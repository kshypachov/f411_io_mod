
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025b54  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006748  08035cf8  08035cf8  00026cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c440  0803c440  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803c440  0803c440  0002d440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c448  0803c448  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803c448  0803c448  0002d448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803c450  0803c450  0002d450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803c454  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000199a8  20000870  0803ccc4  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a218  0803ccc4  0002f218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a939  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f08  00000000  00000000  000891d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00028321  00000000  00000000  000910e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003048  00000000  00000000  000b9408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003066  00000000  00000000  000bc450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  000bf4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049a3c  00000000  00000000  000e0dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aafb9  00000000  00000000  0012a80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d57c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bebc  00000000  00000000  001d580c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001e16c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08035cdc 	.word	0x08035cdc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	08035cdc 	.word	0x08035cdc

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f005 fac6 	bl	8016676 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f005 fabc 	bl	8016676 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f005 fab2 	bl	8016676 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f005 faa8 	bl	8016676 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 8011130:	4b4a      	ldr	r3, [pc, #296]	@ (801125c <StartIOTask+0x130>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e072      	b.n	801124a <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483d      	ldr	r0, [pc, #244]	@ (8011260 <StartIOTask+0x134>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f007 fb38 	bl	80187e2 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f005 fa73 	bl	8016676 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85e      	bhi.n	8011256 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f005 fa5b 	bl	8016676 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f005 fa48 	bl	8016668 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1e      	ldr	r4, [pc, #120]	@ (8011264 <StartIOTask+0x138>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f007 fb46 	bl	801887e <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f007 fab0 	bl	801875e <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e014      	b.n	801122c <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f005 fa28 	bl	8016668 <HAL_GPIO_ReadPin>
 8011218:	fab0 f080 	clz	r0, r0
 801121c:	0940      	lsrs	r0, r0, #5
 801121e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8011222:	446b      	add	r3, sp
 8011224:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011228:	3401      	adds	r4, #1
 801122a:	b2e4      	uxtb	r4, r4
 801122c:	2c02      	cmp	r4, #2
 801122e:	d9e8      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 8011230:	4c0d      	ldr	r4, [pc, #52]	@ (8011268 <StartIOTask+0x13c>)
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	f007 fb23 	bl	801887e <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011238:	2300      	movs	r3, #0
 801123a:	461a      	mov	r2, r3
 801123c:	a903      	add	r1, sp, #12
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	f007 fa8d 	bl	801875e <osMessageQueuePut>
    osDelay(1);
 8011244:	2001      	movs	r0, #1
 8011246:	f007 f992 	bl	801856e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 801124a:	4b05      	ldr	r3, [pc, #20]	@ (8011260 <StartIOTask+0x134>)
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	f007 fb09 	bl	8018864 <osMessageQueueGetCount>
 8011252:	2800      	cmp	r0, #0
 8011254:	d186      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011256:	2400      	movs	r4, #0
 8011258:	e7c5      	b.n	80111e6 <StartIOTask+0xba>
 801125a:	bf00      	nop
 801125c:	08035cf8 	.word	0x08035cf8
 8011260:	2000089c 	.word	0x2000089c
 8011264:	200008a0 	.word	0x200008a0
 8011268:	200008a4 	.word	0x200008a4

0801126c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801126c:	b084      	sub	sp, #16
 801126e:	b508      	push	{r3, lr}
 8011270:	f10d 0c08 	add.w	ip, sp, #8
 8011274:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011278:	2300      	movs	r3, #0
 801127a:	461a      	mov	r2, r3
 801127c:	4661      	mov	r1, ip
 801127e:	4804      	ldr	r0, [pc, #16]	@ (8011290 <add_log_mess_to_q+0x24>)
 8011280:	6800      	ldr	r0, [r0, #0]
 8011282:	f007 fa6c 	bl	801875e <osMessageQueuePut>

}
 8011286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801128a:	b004      	add	sp, #16
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	20000894 	.word	0x20000894

08011294 <StartDisplayTask>:
{
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011298:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801129c:	f007 f967 	bl	801856e <osDelay>
	SSD1306_Init (); // initialise the display
 80112a0:	f006 fffe 	bl	80182a0 <SSD1306_Init>
	osDelay(100);//
 80112a4:	2064      	movs	r0, #100	@ 0x64
 80112a6:	f007 f962 	bl	801856e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112aa:	2100      	movs	r1, #0
 80112ac:	2001      	movs	r0, #1
 80112ae:	f006 ff5b 	bl	8018168 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112b2:	2000      	movs	r0, #0
 80112b4:	f006 ff1c 	bl	80180f0 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b8:	4c48      	ldr	r4, [pc, #288]	@ (80113dc <StartDisplayTask+0x148>)
 80112ba:	2201      	movs	r2, #1
 80112bc:	4621      	mov	r1, r4
 80112be:	4848      	ldr	r0, [pc, #288]	@ (80113e0 <StartDisplayTask+0x14c>)
 80112c0:	f006 ffa6 	bl	8018210 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112c4:	2201      	movs	r2, #1
 80112c6:	4621      	mov	r1, r4
 80112c8:	4846      	ldr	r0, [pc, #280]	@ (80113e4 <StartDisplayTask+0x150>)
 80112ca:	f006 ffa1 	bl	8018210 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112ce:	210b      	movs	r1, #11
 80112d0:	2001      	movs	r0, #1
 80112d2:	f006 ff49 	bl	8018168 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112d6:	2201      	movs	r2, #1
 80112d8:	4621      	mov	r1, r4
 80112da:	4843      	ldr	r0, [pc, #268]	@ (80113e8 <StartDisplayTask+0x154>)
 80112dc:	f006 ff98 	bl	8018210 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112e0:	2116      	movs	r1, #22
 80112e2:	2001      	movs	r0, #1
 80112e4:	f006 ff40 	bl	8018168 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e8:	2201      	movs	r2, #1
 80112ea:	4621      	mov	r1, r4
 80112ec:	483f      	ldr	r0, [pc, #252]	@ (80113ec <StartDisplayTask+0x158>)
 80112ee:	f006 ff8f 	bl	8018210 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112f2:	2121      	movs	r1, #33	@ 0x21
 80112f4:	2001      	movs	r0, #1
 80112f6:	f006 ff37 	bl	8018168 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112fa:	4b3d      	ldr	r3, [pc, #244]	@ (80113f0 <StartDisplayTask+0x15c>)
 80112fc:	6859      	ldr	r1, [r3, #4]
 80112fe:	780a      	ldrb	r2, [r1, #0]
 8011300:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011302:	7888      	ldrb	r0, [r1, #2]
 8011304:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011306:	790e      	ldrb	r6, [r1, #4]
 8011308:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 801130a:	9103      	str	r1, [sp, #12]
 801130c:	9602      	str	r6, [sp, #8]
 801130e:	9501      	str	r5, [sp, #4]
 8011310:	9000      	str	r0, [sp, #0]
 8011312:	4938      	ldr	r1, [pc, #224]	@ (80113f4 <StartDisplayTask+0x160>)
 8011314:	a805      	add	r0, sp, #20
 8011316:	f01a ffa1 	bl	802c25c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801131a:	2201      	movs	r2, #1
 801131c:	4621      	mov	r1, r4
 801131e:	a805      	add	r0, sp, #20
 8011320:	f006 ff76 	bl	8018210 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8011324:	f007 f866 	bl	80183f4 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011328:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801132c:	f008 fc8a 	bl	8019c44 <vTaskDelay>
    int i=0;
 8011330:	2500      	movs	r5, #0
 8011332:	e003      	b.n	801133c <StartDisplayTask+0xa8>
		osDelay(1000);
 8011334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011338:	f007 f919 	bl	801856e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 801133c:	2100      	movs	r1, #0
 801133e:	2001      	movs	r0, #1
 8011340:	f006 ff12 	bl	8018168 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011344:	2000      	movs	r0, #0
 8011346:	f006 fed3 	bl	80180f0 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 801134a:	4c24      	ldr	r4, [pc, #144]	@ (80113dc <StartDisplayTask+0x148>)
 801134c:	2201      	movs	r2, #1
 801134e:	4621      	mov	r1, r4
 8011350:	4829      	ldr	r0, [pc, #164]	@ (80113f8 <StartDisplayTask+0x164>)
 8011352:	f006 ff5d 	bl	8018210 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011356:	4b26      	ldr	r3, [pc, #152]	@ (80113f0 <StartDisplayTask+0x15c>)
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801135c:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	4923      	ldr	r1, [pc, #140]	@ (80113fc <StartDisplayTask+0x168>)
 801136e:	a805      	add	r0, sp, #20
 8011370:	f01a ff74 	bl	802c25c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011374:	2201      	movs	r2, #1
 8011376:	4621      	mov	r1, r4
 8011378:	a805      	add	r0, sp, #20
 801137a:	f006 ff49 	bl	8018210 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 801137e:	210a      	movs	r1, #10
 8011380:	2001      	movs	r0, #1
 8011382:	f006 fef1 	bl	8018168 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8011386:	2201      	movs	r2, #1
 8011388:	4621      	mov	r1, r4
 801138a:	481d      	ldr	r0, [pc, #116]	@ (8011400 <StartDisplayTask+0x16c>)
 801138c:	f006 ff40 	bl	8018210 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011390:	3501      	adds	r5, #1
 8011392:	462a      	mov	r2, r5
 8011394:	491b      	ldr	r1, [pc, #108]	@ (8011404 <StartDisplayTask+0x170>)
 8011396:	a805      	add	r0, sp, #20
 8011398:	f01a ff60 	bl	802c25c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801139c:	2201      	movs	r2, #1
 801139e:	4621      	mov	r1, r4
 80113a0:	a805      	add	r0, sp, #20
 80113a2:	f006 ff35 	bl	8018210 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80113a6:	f007 f825 	bl	80183f4 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113ae:	2201      	movs	r2, #1
 80113b0:	2178      	movs	r1, #120	@ 0x78
 80113b2:	4815      	ldr	r0, [pc, #84]	@ (8011408 <StartDisplayTask+0x174>)
 80113b4:	f005 fcb4 	bl	8016d20 <HAL_I2C_IsDeviceReady>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d0bb      	beq.n	8011334 <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113bc:	4812      	ldr	r0, [pc, #72]	@ (8011408 <StartDisplayTask+0x174>)
 80113be:	f005 fbd9 	bl	8016b74 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113c6:	f008 fc3d 	bl	8019c44 <vTaskDelay>
			MX_I2C1_Init();
 80113ca:	f000 fcff 	bl	8011dcc <MX_I2C1_Init>
			vTaskDelay(1000);
 80113ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113d2:	f008 fc37 	bl	8019c44 <vTaskDelay>
			SSD1306_Init ();
 80113d6:	f006 ff63 	bl	80182a0 <SSD1306_Init>
 80113da:	e7e6      	b.n	80113aa <StartDisplayTask+0x116>
 80113dc:	2000010c 	.word	0x2000010c
 80113e0:	08035f74 	.word	0x08035f74
 80113e4:	08035f80 	.word	0x08035f80
 80113e8:	08035f8c 	.word	0x08035f8c
 80113ec:	08035f98 	.word	0x08035f98
 80113f0:	200008c0 	.word	0x200008c0
 80113f4:	08035fa0 	.word	0x08035fa0
 80113f8:	08035fc0 	.word	0x08035fc0
 80113fc:	08035fc4 	.word	0x08035fc4
 8011400:	08035fd4 	.word	0x08035fd4
 8011404:	0803b4dc 	.word	0x0803b4dc
 8011408:	200008c8 	.word	0x200008c8

0801140c <StartSettingsTask>:
{
 801140c:	b570      	push	{r4, r5, r6, lr}
 801140e:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011410:	2300      	movs	r3, #0
 8011412:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 8011414:	4b79      	ldr	r3, [pc, #484]	@ (80115fc <StartSettingsTask+0x1f0>)
 8011416:	4a7a      	ldr	r2, [pc, #488]	@ (8011600 <StartSettingsTask+0x1f4>)
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x1f8>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x1fc>)
 801141c:	f004 fcbe 	bl	8015d9c <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011420:	497a      	ldr	r1, [pc, #488]	@ (801160c <StartSettingsTask+0x200>)
 8011422:	487b      	ldr	r0, [pc, #492]	@ (8011610 <StartSettingsTask+0x204>)
 8011424:	f009 fcda 	bl	801addc <lfs_fs_ll_init>
 8011428:	2800      	cmp	r0, #0
 801142a:	db3b      	blt.n	80114a4 <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 801142c:	4879      	ldr	r0, [pc, #484]	@ (8011614 <StartSettingsTask+0x208>)
 801142e:	f009 fcc3 	bl	801adb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8011432:	4c79      	ldr	r4, [pc, #484]	@ (8011618 <StartSettingsTask+0x20c>)
 8011434:	4620      	mov	r0, r4
 8011436:	f009 fcb3 	bl	801ada0 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 801143a:	4878      	ldr	r0, [pc, #480]	@ (801161c <StartSettingsTask+0x210>)
 801143c:	f009 fcb0 	bl	801ada0 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011440:	4620      	mov	r0, r4
 8011442:	f009 fcb9 	bl	801adb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8011446:	4876      	ldr	r0, [pc, #472]	@ (8011620 <StartSettingsTask+0x214>)
 8011448:	f009 fcb6 	bl	801adb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 801144c:	4875      	ldr	r0, [pc, #468]	@ (8011624 <StartSettingsTask+0x218>)
 801144e:	f009 fcb3 	bl	801adb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8011452:	4875      	ldr	r0, [pc, #468]	@ (8011628 <StartSettingsTask+0x21c>)
 8011454:	f009 fcb0 	bl	801adb8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011458:	4874      	ldr	r0, [pc, #464]	@ (801162c <StartSettingsTask+0x220>)
 801145a:	f009 fcad 	bl	801adb8 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 801145e:	2200      	movs	r2, #0
 8011460:	a939      	add	r1, sp, #228	@ 0xe4
 8011462:	4873      	ldr	r0, [pc, #460]	@ (8011630 <StartSettingsTask+0x224>)
 8011464:	f009 fbf0 	bl	801ac48 <mg_fs_lfs_status>
 8011468:	b1f8      	cbz	r0, 80114aa <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 801146a:	2101      	movs	r1, #1
 801146c:	4870      	ldr	r0, [pc, #448]	@ (8011630 <StartSettingsTask+0x224>)
 801146e:	f009 fc29 	bl	801acc4 <mg_fs_lfs_open>
 8011472:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011474:	22c6      	movs	r2, #198	@ 0xc6
 8011476:	a907      	add	r1, sp, #28
 8011478:	f009 fc54 	bl	801ad24 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 801147c:	4620      	mov	r0, r4
 801147e:	f009 fc45 	bl	801ad0c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8011482:	2200      	movs	r2, #0
 8011484:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011488:	2302      	movs	r3, #2
 801148a:	a907      	add	r1, sp, #28
 801148c:	4869      	ldr	r0, [pc, #420]	@ (8011634 <StartSettingsTask+0x228>)
 801148e:	6800      	ldr	r0, [r0, #0]
 8011490:	f007 fbcc 	bl	8018c2c <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 8011494:	2200      	movs	r2, #0
 8011496:	a939      	add	r1, sp, #228	@ 0xe4
 8011498:	4867      	ldr	r0, [pc, #412]	@ (8011638 <StartSettingsTask+0x22c>)
 801149a:	f009 fbd5 	bl	801ac48 <mg_fs_lfs_status>
 801149e:	b188      	cbz	r0, 80114c4 <StartSettingsTask+0xb8>
{
 80114a0:	2400      	movs	r4, #0
 80114a2:	e082      	b.n	80115aa <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset();
 80114a4:	f004 ff70 	bl	8016388 <HAL_NVIC_SystemReset>
 80114a8:	e7c0      	b.n	801142c <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114aa:	22c6      	movs	r2, #198	@ 0xc6
 80114ac:	2100      	movs	r1, #0
 80114ae:	a807      	add	r0, sp, #28
 80114b0:	f01b fa96 	bl	802c9e0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114b4:	2302      	movs	r3, #2
 80114b6:	2200      	movs	r2, #0
 80114b8:	a907      	add	r1, sp, #28
 80114ba:	485e      	ldr	r0, [pc, #376]	@ (8011634 <StartSettingsTask+0x228>)
 80114bc:	6800      	ldr	r0, [r0, #0]
 80114be:	f007 fbb5 	bl	8018c2c <xQueueGenericSend>
 80114c2:	e7e7      	b.n	8011494 <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114c4:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c8:	f009 fa56 	bl	801a978 <pvPortMalloc>
	  if (web_users == NULL) {
 80114cc:	4604      	mov	r4, r0
 80114ce:	b390      	cbz	r0, 8011536 <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114d0:	495a      	ldr	r1, [pc, #360]	@ (801163c <StartSettingsTask+0x230>)
 80114d2:	2001      	movs	r0, #1
 80114d4:	f000 fd22 	bl	8011f1c <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d8:	4b59      	ldr	r3, [pc, #356]	@ (8011640 <StartSettingsTask+0x234>)
 80114da:	6818      	ldr	r0, [r3, #0]
 80114dc:	6020      	str	r0, [r4, #0]
 80114de:	889b      	ldrh	r3, [r3, #4]
 80114e0:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114e2:	ad01      	add	r5, sp, #4
 80114e4:	4e57      	ldr	r6, [pc, #348]	@ (8011644 <StartSettingsTask+0x238>)
 80114e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114ee:	f845 0b04 	str.w	r0, [r5], #4
 80114f2:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114f4:	ad01      	add	r5, sp, #4
 80114f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114fc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 8011500:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8011504:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011508:	6828      	ldr	r0, [r5, #0]
 801150a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 801150e:	792b      	ldrb	r3, [r5, #4]
 8011510:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 8011514:	2102      	movs	r1, #2
 8011516:	4848      	ldr	r0, [pc, #288]	@ (8011638 <StartSettingsTask+0x22c>)
 8011518:	f009 fbd4 	bl	801acc4 <mg_fs_lfs_open>
 801151c:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 801151e:	f240 629a 	movw	r2, #1690	@ 0x69a
 8011522:	4621      	mov	r1, r4
 8011524:	f009 fc0a 	bl	801ad3c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011528:	4628      	mov	r0, r5
 801152a:	f009 fbef 	bl	801ad0c <mg_fs_lfs_close>
	  free(web_users);
 801152e:	4620      	mov	r0, r4
 8011530:	f009 faa4 	bl	801aa7c <vPortFree>
 8011534:	e7b4      	b.n	80114a0 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 8011536:	4944      	ldr	r1, [pc, #272]	@ (8011648 <StartSettingsTask+0x23c>)
 8011538:	2003      	movs	r0, #3
 801153a:	f000 fcef 	bl	8011f1c <logging>
 801153e:	e7f6      	b.n	801152e <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011540:	4d3b      	ldr	r5, [pc, #236]	@ (8011630 <StartSettingsTask+0x224>)
 8011542:	4628      	mov	r0, r5
 8011544:	f009 fc2c 	bl	801ada0 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011548:	2102      	movs	r1, #2
 801154a:	4628      	mov	r0, r5
 801154c:	f009 fbba 	bl	801acc4 <mg_fs_lfs_open>
 8011550:	4605      	mov	r5, r0
 8011552:	2800      	cmp	r0, #0
 8011554:	d033      	beq.n	80115be <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011556:	22c6      	movs	r2, #198	@ 0xc6
 8011558:	a907      	add	r1, sp, #28
 801155a:	f009 fbef 	bl	801ad3c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 801155e:	4628      	mov	r0, r5
 8011560:	f009 fbd4 	bl	801ad0c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 8011564:	2200      	movs	r2, #0
 8011566:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801156a:	2302      	movs	r3, #2
 801156c:	a907      	add	r1, sp, #28
 801156e:	4831      	ldr	r0, [pc, #196]	@ (8011634 <StartSettingsTask+0x228>)
 8011570:	6800      	ldr	r0, [r0, #0]
 8011572:	f007 fb5b 	bl	8018c2c <xQueueGenericSend>
 8011576:	e022      	b.n	80115be <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011578:	2001      	movs	r0, #1
 801157a:	f006 fff8 	bl	801856e <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 801157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011582:	4832      	ldr	r0, [pc, #200]	@ (801164c <StartSettingsTask+0x240>)
 8011584:	f005 f870 	bl	8016668 <HAL_GPIO_ReadPin>
 8011588:	2800      	cmp	r0, #0
 801158a:	d0f5      	beq.n	8011578 <StartSettingsTask+0x16c>
			 osDelay(1000);
 801158c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011590:	f006 ffed 	bl	801856e <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 8011594:	4828      	ldr	r0, [pc, #160]	@ (8011638 <StartSettingsTask+0x22c>)
 8011596:	f009 fc03 	bl	801ada0 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 801159a:	f004 fef5 	bl	8016388 <HAL_NVIC_SystemReset>
 801159e:	e000      	b.n	80115a2 <StartSettingsTask+0x196>
		 press_time = 0;
 80115a0:	2400      	movs	r4, #0
	  osDelay(1000);
 80115a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80115a6:	f006 ffe2 	bl	801856e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115aa:	2200      	movs	r2, #0
 80115ac:	a907      	add	r1, sp, #28
 80115ae:	4b21      	ldr	r3, [pc, #132]	@ (8011634 <StartSettingsTask+0x228>)
 80115b0:	6818      	ldr	r0, [r3, #0]
 80115b2:	f007 fe4e 	bl	8019252 <xQueuePeek>
	  if(mqtt_config.save){
 80115b6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1c0      	bne.n	8011540 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115c2:	4822      	ldr	r0, [pc, #136]	@ (801164c <StartSettingsTask+0x240>)
 80115c4:	f005 f850 	bl	8016668 <HAL_GPIO_ReadPin>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d1e9      	bne.n	80115a0 <StartSettingsTask+0x194>
		 press_time++;
 80115cc:	3401      	adds	r4, #1
 80115ce:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115d0:	4d1e      	ldr	r5, [pc, #120]	@ (801164c <StartSettingsTask+0x240>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	2102      	movs	r1, #2
 80115d6:	4628      	mov	r0, r5
 80115d8:	f005 f84d 	bl	8016676 <HAL_GPIO_WritePin>
		 osDelay(100);
 80115dc:	2064      	movs	r0, #100	@ 0x64
 80115de:	f006 ffc6 	bl	801856e <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115e2:	2200      	movs	r2, #0
 80115e4:	2102      	movs	r1, #2
 80115e6:	4628      	mov	r0, r5
 80115e8:	f005 f845 	bl	8016676 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115ec:	2c08      	cmp	r4, #8
 80115ee:	d1d8      	bne.n	80115a2 <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115f0:	2201      	movs	r2, #1
 80115f2:	2102      	movs	r1, #2
 80115f4:	4628      	mov	r0, r5
 80115f6:	f005 f83e 	bl	8016676 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115fa:	e7c0      	b.n	801157e <StartSettingsTask+0x172>
 80115fc:	08011849 	.word	0x08011849
 8011600:	0801186d 	.word	0x0801186d
 8011604:	08011119 	.word	0x08011119
 8011608:	08011105 	.word	0x08011105
 801160c:	08011899 	.word	0x08011899
 8011610:	08011885 	.word	0x08011885
 8011614:	08035fd8 	.word	0x08035fd8
 8011618:	08035fe0 	.word	0x08035fe0
 801161c:	08035fec 	.word	0x08035fec
 8011620:	08035ffc 	.word	0x08035ffc
 8011624:	08036008 	.word	0x08036008
 8011628:	08037a58 	.word	0x08037a58
 801162c:	08036010 	.word	0x08036010
 8011630:	08036018 	.word	0x08036018
 8011634:	20000898 	.word	0x20000898
 8011638:	0803602c 	.word	0x0803602c
 801163c:	08036068 	.word	0x08036068
 8011640:	080360a0 	.word	0x080360a0
 8011644:	080360a8 	.word	0x080360a8
 8011648:	0803603c 	.word	0x0803603c
 801164c:	40020400 	.word	0x40020400

08011650 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011650:	b508      	push	{r3, lr}
	switch (param_type) {
 8011652:	2901      	cmp	r1, #1
 8011654:	d014      	beq.n	8011680 <RW_parameters_from_queue+0x30>
 8011656:	2902      	cmp	r1, #2
 8011658:	d01a      	beq.n	8011690 <RW_parameters_from_queue+0x40>
 801165a:	b101      	cbz	r1, 801165e <RW_parameters_from_queue+0xe>
}
 801165c:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 801165e:	b14a      	cbz	r2, 8011674 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011660:	2a01      	cmp	r2, #1
 8011662:	d1fb      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 8011664:	2302      	movs	r3, #2
 8011666:	2200      	movs	r2, #0
 8011668:	4601      	mov	r1, r0
 801166a:	4812      	ldr	r0, [pc, #72]	@ (80116b4 <RW_parameters_from_queue+0x64>)
 801166c:	6800      	ldr	r0, [r0, #0]
 801166e:	f007 fadd 	bl	8018c2c <xQueueGenericSend>
 8011672:	e7f3      	b.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 8011674:	4601      	mov	r1, r0
 8011676:	4b0f      	ldr	r3, [pc, #60]	@ (80116b4 <RW_parameters_from_queue+0x64>)
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f007 fdea 	bl	8019252 <xQueuePeek>
 801167e:	e7ed      	b.n	801165c <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011680:	2a00      	cmp	r2, #0
 8011682:	d1eb      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 8011684:	4601      	mov	r1, r0
 8011686:	4b0c      	ldr	r3, [pc, #48]	@ (80116b8 <RW_parameters_from_queue+0x68>)
 8011688:	6818      	ldr	r0, [r3, #0]
 801168a:	f007 fde2 	bl	8019252 <xQueuePeek>
 801168e:	e7e5      	b.n	801165c <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011690:	b14a      	cbz	r2, 80116a6 <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 8011692:	2a01      	cmp	r2, #1
 8011694:	d1e2      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 8011696:	2302      	movs	r3, #2
 8011698:	2200      	movs	r2, #0
 801169a:	4601      	mov	r1, r0
 801169c:	4807      	ldr	r0, [pc, #28]	@ (80116bc <RW_parameters_from_queue+0x6c>)
 801169e:	6800      	ldr	r0, [r0, #0]
 80116a0:	f007 fac4 	bl	8018c2c <xQueueGenericSend>
}
 80116a4:	e7da      	b.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 80116a6:	4601      	mov	r1, r0
 80116a8:	4b05      	ldr	r3, [pc, #20]	@ (80116c0 <RW_parameters_from_queue+0x70>)
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	f007 fdd1 	bl	8019252 <xQueuePeek>
 80116b0:	e7d4      	b.n	801165c <RW_parameters_from_queue+0xc>
 80116b2:	bf00      	nop
 80116b4:	20000898 	.word	0x20000898
 80116b8:	200008a4 	.word	0x200008a4
 80116bc:	2000089c 	.word	0x2000089c
 80116c0:	200008a0 	.word	0x200008a0

080116c4 <StartLoggingTask>:
{
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c8:	4841      	ldr	r0, [pc, #260]	@ (80117d0 <StartLoggingTask+0x10c>)
 80116ca:	f000 fc1b 	bl	8011f04 <reg_logging_fn>
	logger_set_level(L_INFO);
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fc1e 	bl	8011f10 <logger_set_level>
	logging(L_INFO, "Device started...");
 80116d4:	493f      	ldr	r1, [pc, #252]	@ (80117d4 <StartLoggingTask+0x110>)
 80116d6:	2001      	movs	r0, #1
 80116d8:	f000 fc20 	bl	8011f1c <logging>
	  while (mg_fs_mounted() == 0){
 80116dc:	e003      	b.n	80116e6 <StartLoggingTask+0x22>
		  osDelay(500);
 80116de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80116e2:	f006 ff44 	bl	801856e <osDelay>
	  while (mg_fs_mounted() == 0){
 80116e6:	f009 fb73 	bl	801add0 <mg_fs_mounted>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d0f7      	beq.n	80116de <StartLoggingTask+0x1a>
	uint32_t count = 2000;
 80116ee:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116f2:	e048      	b.n	8011786 <StartLoggingTask+0xc2>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116f4:	2300      	movs	r3, #0
 80116f6:	461a      	mov	r2, r3
 80116f8:	a907      	add	r1, sp, #28
 80116fa:	4837      	ldr	r0, [pc, #220]	@ (80117d8 <StartLoggingTask+0x114>)
 80116fc:	6800      	ldr	r0, [r0, #0]
 80116fe:	f007 f870 	bl	80187e2 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011702:	2102      	movs	r1, #2
 8011704:	4835      	ldr	r0, [pc, #212]	@ (80117dc <StartLoggingTask+0x118>)
 8011706:	f009 fadd 	bl	801acc4 <mg_fs_lfs_open>
 801170a:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 801170c:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 8011710:	f10d 011d 	add.w	r1, sp, #29
 8011714:	f009 fb12 	bl	801ad3c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011718:	4628      	mov	r0, r5
 801171a:	f009 faf7 	bl	801ad0c <mg_fs_lfs_close>
 801171e:	e038      	b.n	8011792 <StartLoggingTask+0xce>
    	vPortGetHeapStats(&heap_status);
 8011720:	a848      	add	r0, sp, #288	@ 0x120
 8011722:	f009 f9e9 	bl	801aaf8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011726:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801172c:	9303      	str	r3, [sp, #12]
 801172e:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 8011730:	9302      	str	r3, [sp, #8]
 8011732:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801173c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801173e:	4928      	ldr	r1, [pc, #160]	@ (80117e0 <StartLoggingTask+0x11c>)
 8011740:	2001      	movs	r0, #1
 8011742:	f000 fbeb 	bl	8011f1c <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011746:	4c27      	ldr	r4, [pc, #156]	@ (80117e4 <StartLoggingTask+0x120>)
 8011748:	6863      	ldr	r3, [r4, #4]
 801174a:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801174c:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801175a:	b2d2      	uxtb	r2, r2
 801175c:	4922      	ldr	r1, [pc, #136]	@ (80117e8 <StartLoggingTask+0x124>)
 801175e:	2001      	movs	r0, #1
 8011760:	f000 fbdc 	bl	8011f1c <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011764:	6861      	ldr	r1, [r4, #4]
 8011766:	780a      	ldrb	r2, [r1, #0]
 8011768:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801176a:	7888      	ldrb	r0, [r1, #2]
 801176c:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801176e:	790d      	ldrb	r5, [r1, #4]
 8011770:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011772:	9103      	str	r1, [sp, #12]
 8011774:	9502      	str	r5, [sp, #8]
 8011776:	9401      	str	r4, [sp, #4]
 8011778:	9000      	str	r0, [sp, #0]
 801177a:	491c      	ldr	r1, [pc, #112]	@ (80117ec <StartLoggingTask+0x128>)
 801177c:	2001      	movs	r0, #1
 801177e:	f000 fbcd 	bl	8011f1c <logging>
    	count = 0;
 8011782:	2400      	movs	r4, #0
    count ++;
 8011784:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011786:	4b14      	ldr	r3, [pc, #80]	@ (80117d8 <StartLoggingTask+0x114>)
 8011788:	6818      	ldr	r0, [r3, #0]
 801178a:	f007 f86b 	bl	8018864 <osMessageQueueGetCount>
 801178e:	2800      	cmp	r0, #0
 8011790:	d1b0      	bne.n	80116f4 <StartLoggingTask+0x30>
    osDelay(500);
 8011792:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011796:	f006 feea 	bl	801856e <osDelay>
    if (count == 2000){
 801179a:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801179e:	d1f1      	bne.n	8011784 <StartLoggingTask+0xc0>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 80117a0:	2200      	movs	r2, #0
 80117a2:	a94f      	add	r1, sp, #316	@ 0x13c
 80117a4:	480d      	ldr	r0, [pc, #52]	@ (80117dc <StartLoggingTask+0x118>)
 80117a6:	f009 fa4f 	bl	801ac48 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 80117aa:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80117ac:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d9b5      	bls.n	8011720 <StartLoggingTask+0x5c>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117b4:	4c0e      	ldr	r4, [pc, #56]	@ (80117f0 <StartLoggingTask+0x12c>)
 80117b6:	4620      	mov	r0, r4
 80117b8:	f009 faf2 	bl	801ada0 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117bc:	4621      	mov	r1, r4
 80117be:	4807      	ldr	r0, [pc, #28]	@ (80117dc <StartLoggingTask+0x118>)
 80117c0:	f009 fae2 	bl	801ad88 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117c4:	490b      	ldr	r1, [pc, #44]	@ (80117f4 <StartLoggingTask+0x130>)
 80117c6:	2001      	movs	r0, #1
 80117c8:	f000 fba8 	bl	8011f1c <logging>
 80117cc:	e7a8      	b.n	8011720 <StartLoggingTask+0x5c>
 80117ce:	bf00      	nop
 80117d0:	0801126d 	.word	0x0801126d
 80117d4:	080360c0 	.word	0x080360c0
 80117d8:	20000894 	.word	0x20000894
 80117dc:	080360d4 	.word	0x080360d4
 80117e0:	08036108 	.word	0x08036108
 80117e4:	200008c0 	.word	0x200008c0
 80117e8:	0803619c 	.word	0x0803619c
 80117ec:	080361b8 	.word	0x080361b8
 80117f0:	080360e4 	.word	0x080360e4
 80117f4:	080360f4 	.word	0x080360f4

080117f8 <StartWatchDogTask>:
{
 80117f8:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 80117fa:	4806      	ldr	r0, [pc, #24]	@ (8011814 <StartWatchDogTask+0x1c>)
 80117fc:	f005 fb86 	bl	8016f0c <HAL_IWDG_Refresh>
    osDelay(500);
 8011800:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011804:	f006 feb3 	bl	801856e <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011808:	2101      	movs	r1, #1
 801180a:	4803      	ldr	r0, [pc, #12]	@ (8011818 <StartWatchDogTask+0x20>)
 801180c:	f004 ff39 	bl	8016682 <HAL_GPIO_TogglePin>
  for(;;)
 8011810:	e7f3      	b.n	80117fa <StartWatchDogTask+0x2>
 8011812:	bf00      	nop
 8011814:	2000091c 	.word	0x2000091c
 8011818:	40020400 	.word	0x40020400

0801181c <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 801181c:	b500      	push	{lr}
 801181e:	b087      	sub	sp, #28
 8011820:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	2301      	movs	r3, #1
 801182c:	f10d 0217 	add.w	r2, sp, #23
 8011830:	f10d 010f 	add.w	r1, sp, #15
 8011834:	4803      	ldr	r0, [pc, #12]	@ (8011844 <EthTxn+0x28>)
 8011836:	f006 f8f8 	bl	8017a2a <HAL_SPI_TransmitReceive>
}
 801183a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801183e:	b007      	add	sp, #28
 8011840:	f85d fb04 	ldr.w	pc, [sp], #4
 8011844:	2000092c 	.word	0x2000092c

08011848 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011848:	b500      	push	{lr}
 801184a:	b083      	sub	sp, #12
 801184c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011854:	2201      	movs	r2, #1
 8011856:	f10d 0107 	add.w	r1, sp, #7
 801185a:	4803      	ldr	r0, [pc, #12]	@ (8011868 <FlashSPIsendByte+0x20>)
 801185c:	f006 f803 	bl	8017866 <HAL_SPI_Transmit>
}
 8011860:	b003      	add	sp, #12
 8011862:	f85d fb04 	ldr.w	pc, [sp], #4
 8011866:	bf00      	nop
 8011868:	20000984 	.word	0x20000984

0801186c <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 801186c:	b508      	push	{r3, lr}
 801186e:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011874:	4601      	mov	r1, r0
 8011876:	4802      	ldr	r0, [pc, #8]	@ (8011880 <FlashSPIrecvBuff+0x14>)
 8011878:	f006 fa01 	bl	8017c7e <HAL_SPI_Receive>
}
 801187c:	bd08      	pop	{r3, pc}
 801187e:	bf00      	nop
 8011880:	20000984 	.word	0x20000984

08011884 <FS_Lock>:
void FS_Lock(void * param){
 8011884:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011886:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801188a:	4b02      	ldr	r3, [pc, #8]	@ (8011894 <FS_Lock+0x10>)
 801188c:	6818      	ldr	r0, [r3, #0]
 801188e:	f006 fec5 	bl	801861c <osMutexAcquire>
}
 8011892:	bd08      	pop	{r3, pc}
 8011894:	2000088c 	.word	0x2000088c

08011898 <FS_Unlock>:
void FS_Unlock(void * param){
 8011898:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 801189a:	4b02      	ldr	r3, [pc, #8]	@ (80118a4 <FS_Unlock+0xc>)
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	f006 feec 	bl	801867a <osMutexRelease>
}
 80118a2:	bd08      	pop	{r3, pc}
 80118a4:	2000088c 	.word	0x2000088c

080118a8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80118a8:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80118aa:	482c      	ldr	r0, [pc, #176]	@ (801195c <MX_FREERTOS_Init+0xb4>)
 80118ac:	f006 fe6d 	bl	801858a <osMutexNew>
 80118b0:	4b2b      	ldr	r3, [pc, #172]	@ (8011960 <MX_FREERTOS_Init+0xb8>)
 80118b2:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80118b4:	482b      	ldr	r0, [pc, #172]	@ (8011964 <MX_FREERTOS_Init+0xbc>)
 80118b6:	f006 fe68 	bl	801858a <osMutexNew>
 80118ba:	4b2b      	ldr	r3, [pc, #172]	@ (8011968 <MX_FREERTOS_Init+0xc0>)
 80118bc:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80118be:	4a2b      	ldr	r2, [pc, #172]	@ (801196c <MX_FREERTOS_Init+0xc4>)
 80118c0:	2103      	movs	r1, #3
 80118c2:	2001      	movs	r0, #1
 80118c4:	f006 ff00 	bl	80186c8 <osMessageQueueNew>
 80118c8:	4b29      	ldr	r3, [pc, #164]	@ (8011970 <MX_FREERTOS_Init+0xc8>)
 80118ca:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 80118cc:	4a29      	ldr	r2, [pc, #164]	@ (8011974 <MX_FREERTOS_Init+0xcc>)
 80118ce:	2103      	movs	r1, #3
 80118d0:	2001      	movs	r0, #1
 80118d2:	f006 fef9 	bl	80186c8 <osMessageQueueNew>
 80118d6:	4b28      	ldr	r3, [pc, #160]	@ (8011978 <MX_FREERTOS_Init+0xd0>)
 80118d8:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118da:	4a28      	ldr	r2, [pc, #160]	@ (801197c <MX_FREERTOS_Init+0xd4>)
 80118dc:	2103      	movs	r1, #3
 80118de:	2001      	movs	r0, #1
 80118e0:	f006 fef2 	bl	80186c8 <osMessageQueueNew>
 80118e4:	4b26      	ldr	r3, [pc, #152]	@ (8011980 <MX_FREERTOS_Init+0xd8>)
 80118e6:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118e8:	4a26      	ldr	r2, [pc, #152]	@ (8011984 <MX_FREERTOS_Init+0xdc>)
 80118ea:	21c6      	movs	r1, #198	@ 0xc6
 80118ec:	2001      	movs	r0, #1
 80118ee:	f006 feeb 	bl	80186c8 <osMessageQueueNew>
 80118f2:	4b25      	ldr	r3, [pc, #148]	@ (8011988 <MX_FREERTOS_Init+0xe0>)
 80118f4:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118f6:	4a25      	ldr	r2, [pc, #148]	@ (801198c <MX_FREERTOS_Init+0xe4>)
 80118f8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118fc:	200f      	movs	r0, #15
 80118fe:	f006 fee3 	bl	80186c8 <osMessageQueueNew>
 8011902:	4b23      	ldr	r3, [pc, #140]	@ (8011990 <MX_FREERTOS_Init+0xe8>)
 8011904:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011906:	4a23      	ldr	r2, [pc, #140]	@ (8011994 <MX_FREERTOS_Init+0xec>)
 8011908:	2100      	movs	r1, #0
 801190a:	4823      	ldr	r0, [pc, #140]	@ (8011998 <MX_FREERTOS_Init+0xf0>)
 801190c:	f006 fdd0 	bl	80184b0 <osThreadNew>
 8011910:	4b22      	ldr	r3, [pc, #136]	@ (801199c <MX_FREERTOS_Init+0xf4>)
 8011912:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011914:	4a22      	ldr	r2, [pc, #136]	@ (80119a0 <MX_FREERTOS_Init+0xf8>)
 8011916:	2100      	movs	r1, #0
 8011918:	4822      	ldr	r0, [pc, #136]	@ (80119a4 <MX_FREERTOS_Init+0xfc>)
 801191a:	f006 fdc9 	bl	80184b0 <osThreadNew>
 801191e:	4b22      	ldr	r3, [pc, #136]	@ (80119a8 <MX_FREERTOS_Init+0x100>)
 8011920:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011922:	4a22      	ldr	r2, [pc, #136]	@ (80119ac <MX_FREERTOS_Init+0x104>)
 8011924:	2100      	movs	r1, #0
 8011926:	4822      	ldr	r0, [pc, #136]	@ (80119b0 <MX_FREERTOS_Init+0x108>)
 8011928:	f006 fdc2 	bl	80184b0 <osThreadNew>
 801192c:	4b21      	ldr	r3, [pc, #132]	@ (80119b4 <MX_FREERTOS_Init+0x10c>)
 801192e:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011930:	4a21      	ldr	r2, [pc, #132]	@ (80119b8 <MX_FREERTOS_Init+0x110>)
 8011932:	2100      	movs	r1, #0
 8011934:	4821      	ldr	r0, [pc, #132]	@ (80119bc <MX_FREERTOS_Init+0x114>)
 8011936:	f006 fdbb 	bl	80184b0 <osThreadNew>
 801193a:	4b21      	ldr	r3, [pc, #132]	@ (80119c0 <MX_FREERTOS_Init+0x118>)
 801193c:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 801193e:	4a21      	ldr	r2, [pc, #132]	@ (80119c4 <MX_FREERTOS_Init+0x11c>)
 8011940:	2100      	movs	r1, #0
 8011942:	4821      	ldr	r0, [pc, #132]	@ (80119c8 <MX_FREERTOS_Init+0x120>)
 8011944:	f006 fdb4 	bl	80184b0 <osThreadNew>
 8011948:	4b20      	ldr	r3, [pc, #128]	@ (80119cc <MX_FREERTOS_Init+0x124>)
 801194a:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 801194c:	4a20      	ldr	r2, [pc, #128]	@ (80119d0 <MX_FREERTOS_Init+0x128>)
 801194e:	2100      	movs	r1, #0
 8011950:	4820      	ldr	r0, [pc, #128]	@ (80119d4 <MX_FREERTOS_Init+0x12c>)
 8011952:	f006 fdad 	bl	80184b0 <osThreadNew>
 8011956:	4b20      	ldr	r3, [pc, #128]	@ (80119d8 <MX_FREERTOS_Init+0x130>)
 8011958:	6018      	str	r0, [r3, #0]
}
 801195a:	bd08      	pop	{r3, pc}
 801195c:	080362c8 	.word	0x080362c8
 8011960:	20000890 	.word	0x20000890
 8011964:	080362b8 	.word	0x080362b8
 8011968:	2000088c 	.word	0x2000088c
 801196c:	08036338 	.word	0x08036338
 8011970:	200008a4 	.word	0x200008a4
 8011974:	08036320 	.word	0x08036320
 8011978:	200008a0 	.word	0x200008a0
 801197c:	08036308 	.word	0x08036308
 8011980:	2000089c 	.word	0x2000089c
 8011984:	080362f0 	.word	0x080362f0
 8011988:	20000898 	.word	0x20000898
 801198c:	080362d8 	.word	0x080362d8
 8011990:	20000894 	.word	0x20000894
 8011994:	08036404 	.word	0x08036404
 8011998:	08011a05 	.word	0x08011a05
 801199c:	200008bc 	.word	0x200008bc
 80119a0:	080363e0 	.word	0x080363e0
 80119a4:	0801112d 	.word	0x0801112d
 80119a8:	200008b8 	.word	0x200008b8
 80119ac:	080363bc 	.word	0x080363bc
 80119b0:	08011295 	.word	0x08011295
 80119b4:	200008b4 	.word	0x200008b4
 80119b8:	08036398 	.word	0x08036398
 80119bc:	0801140d 	.word	0x0801140d
 80119c0:	200008b0 	.word	0x200008b0
 80119c4:	08036374 	.word	0x08036374
 80119c8:	080116c5 	.word	0x080116c5
 80119cc:	200008ac 	.word	0x200008ac
 80119d0:	08036350 	.word	0x08036350
 80119d4:	080117f9 	.word	0x080117f9
 80119d8:	200008a8 	.word	0x200008a8

080119dc <EthResetBegin>:
void EthResetBegin(void){
 80119dc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 80119de:	2200      	movs	r2, #0
 80119e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <EthResetBegin+0x10>)
 80119e6:	f004 fe46 	bl	8016676 <HAL_GPIO_WritePin>
}
 80119ea:	bd08      	pop	{r3, pc}
 80119ec:	40020000 	.word	0x40020000

080119f0 <EthResetEnd>:
void EthResetEnd(void){
 80119f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119f2:	2201      	movs	r2, #1
 80119f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119f8:	4801      	ldr	r0, [pc, #4]	@ (8011a00 <EthResetEnd+0x10>)
 80119fa:	f004 fe3c 	bl	8016676 <HAL_GPIO_WritePin>
}
 80119fe:	bd08      	pop	{r3, pc}
 8011a00:	40020000 	.word	0x40020000

08011a04 <StartEthTask>:
{
 8011a04:	b530      	push	{r4, r5, lr}
 8011a06:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011a08:	ad22      	add	r5, sp, #136	@ 0x88
 8011a0a:	4b64      	ldr	r3, [pc, #400]	@ (8011b9c <StartEthTask+0x198>)
 8011a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011a12:	ac02      	add	r4, sp, #8
 8011a14:	2280      	movs	r2, #128	@ 0x80
 8011a16:	2100      	movs	r1, #0
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f01a ffe1 	bl	802c9e0 <memset>
 8011a1e:	2340      	movs	r3, #64	@ 0x40
 8011a20:	f88d 3008 	strb.w	r3, [sp, #8]
 8011a24:	2322      	movs	r3, #34	@ 0x22
 8011a26:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8011ba0 <StartEthTask+0x19c>)
 8011a2c:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011a2e:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011a32:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011a34:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011a38:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011a3a:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011a3e:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011a40:	f88d 300d 	strb.w	r3, [sp, #13]
 8011a44:	2301      	movs	r3, #1
 8011a46:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011a4a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011a4e:	4b55      	ldr	r3, [pc, #340]	@ (8011ba4 <StartEthTask+0x1a0>)
 8011a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a52:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a54:	4b54      	ldr	r3, [pc, #336]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011a56:	aa58      	add	r2, sp, #352	@ 0x160
 8011a58:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a5a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a5c:	e003      	b.n	8011a66 <StartEthTask+0x62>
	  osDelay(500);
 8011a5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a62:	f006 fd84 	bl	801856e <osDelay>
  while (mg_fs_mounted() == 0){
 8011a66:	f009 f9b3 	bl	801add0 <mg_fs_mounted>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d0f7      	beq.n	8011a5e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a6e:	a858      	add	r0, sp, #352	@ 0x160
 8011a70:	f011 fda8 	bl	80235c4 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a74:	4b4d      	ldr	r3, [pc, #308]	@ (8011bac <StartEthTask+0x1a8>)
 8011a76:	2203      	movs	r2, #3
 8011a78:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a7a:	f002 ff6f 	bl	801495c <dash_hdl>
 8011a7e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a80:	e00f      	b.n	8011aa2 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a82:	f7ff ffab 	bl	80119dc <EthResetBegin>
	  osDelay(500);
 8011a86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a8a:	f006 fd70 	bl	801856e <osDelay>
	  EthResetEnd();
 8011a8e:	f7ff ffaf 	bl	80119f0 <EthResetEnd>
	  osDelay(2000);
 8011a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a96:	f006 fd6a 	bl	801856e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a9a:	a902      	add	r1, sp, #8
 8011a9c:	a858      	add	r0, sp, #352	@ 0x160
 8011a9e:	f017 f9c1 	bl	8028e24 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011aa2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0eb      	beq.n	8011a82 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011aaa:	2106      	movs	r1, #6
 8011aac:	a802      	add	r0, sp, #8
 8011aae:	f003 fb81 	bl	80151b4 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011ab2:	483f      	ldr	r0, [pc, #252]	@ (8011bb0 <StartEthTask+0x1ac>)
 8011ab4:	f002 ff60 	bl	8014978 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011aba:	4622      	mov	r2, r4
 8011abc:	493d      	ldr	r1, [pc, #244]	@ (8011bb4 <StartEthTask+0x1b0>)
 8011abe:	a858      	add	r0, sp, #352	@ 0x160
 8011ac0:	f015 fbde 	bl	8027280 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ac4:	e006      	b.n	8011ad4 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	a858      	add	r0, sp, #352	@ 0x160
 8011aca:	f017 ff45 	bl	8029958 <mg_mgr_poll>
    osDelay(1);
 8011ace:	2001      	movs	r0, #1
 8011ad0:	f006 fd4d 	bl	801856e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ad4:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011ad8:	2b03      	cmp	r3, #3
 8011ada:	d1f4      	bne.n	8011ac6 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011adc:	4b32      	ldr	r3, [pc, #200]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011ae2:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011af0:	b2d2      	uxtb	r2, r2
 8011af2:	4931      	ldr	r1, [pc, #196]	@ (8011bb8 <StartEthTask+0x1b4>)
 8011af4:	2001      	movs	r0, #1
 8011af6:	f000 fa11 	bl	8011f1c <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011afa:	2200      	movs	r2, #0
 8011afc:	4611      	mov	r1, r2
 8011afe:	a826      	add	r0, sp, #152	@ 0x98
 8011b00:	f7ff fda6 	bl	8011650 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011b04:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011b08:	b1eb      	cbz	r3, 8011b46 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011b0a:	492c      	ldr	r1, [pc, #176]	@ (8011bbc <StartEthTask+0x1b8>)
 8011b0c:	2001      	movs	r0, #1
 8011b0e:	f000 fa05 	bl	8011f1c <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011b12:	4b27      	ldr	r3, [pc, #156]	@ (8011bb0 <StartEthTask+0x1ac>)
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	ab47      	add	r3, sp, #284	@ 0x11c
 8011b1e:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011b22:	a902      	add	r1, sp, #8
 8011b24:	a858      	add	r0, sp, #352	@ 0x160
 8011b26:	f003 fa83 	bl	8015030 <mqtt_init>
  start_sntp(&mgr);
 8011b2a:	a858      	add	r0, sp, #352	@ 0x160
 8011b2c:	f003 ff18 	bl	8015960 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011b30:	a902      	add	r1, sp, #8
 8011b32:	a858      	add	r0, sp, #352	@ 0x160
 8011b34:	f004 f8e0 	bl	8015cf8 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011b38:	a858      	add	r0, sp, #352	@ 0x160
 8011b3a:	f001 f853 	bl	8012be4 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011b3e:	f007 ff73 	bl	8019a28 <xTaskGetTickCount>
 8011b42:	4605      	mov	r5, r0
 8011b44:	e008      	b.n	8011b58 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011b46:	491e      	ldr	r1, [pc, #120]	@ (8011bc0 <StartEthTask+0x1bc>)
 8011b48:	2001      	movs	r0, #1
 8011b4a:	f000 f9e7 	bl	8011f1c <logging>
 8011b4e:	e7ec      	b.n	8011b2a <StartEthTask+0x126>
      osDelay(1);
 8011b50:	2001      	movs	r0, #1
 8011b52:	f006 fd0c 	bl	801856e <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b56:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b58:	f007 ff66 	bl	8019a28 <xTaskGetTickCount>
 8011b5c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b5e:	1b41      	subs	r1, r0, r5
 8011b60:	a858      	add	r0, sp, #352	@ 0x160
 8011b62:	f017 fef9 	bl	8029958 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	a802      	add	r0, sp, #8
 8011b6c:	4798      	blx	r3
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d1ee      	bne.n	8011b50 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011b72:	f7ff ff33 	bl	80119dc <EthResetBegin>
    	  osDelay(100);
 8011b76:	2064      	movs	r0, #100	@ 0x64
 8011b78:	f006 fcf9 	bl	801856e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b7c:	f7ff ff38 	bl	80119f0 <EthResetEnd>
    	  osDelay(3000);
 8011b80:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b84:	f006 fcf3 	bl	801856e <osDelay>
    	  mif.driver->init(&mif);
 8011b88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	a802      	add	r0, sp, #8
 8011b8e:	4798      	blx	r3
    	  osDelay(7000);
 8011b90:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b94:	f006 fceb 	bl	801856e <osDelay>
 8011b98:	e7e5      	b.n	8011b66 <StartEthTask+0x162>
 8011b9a:	bf00      	nop
 8011b9c:	08035d14 	.word	0x08035d14
 8011ba0:	1fff7a00 	.word	0x1fff7a00
 8011ba4:	20000118 	.word	0x20000118
 8011ba8:	200008c0 	.word	0x200008c0
 8011bac:	2000012c 	.word	0x2000012c
 8011bb0:	08011651 	.word	0x08011651
 8011bb4:	080361e0 	.word	0x080361e0
 8011bb8:	0803619c 	.word	0x0803619c
 8011bbc:	080361f4 	.word	0x080361f4
 8011bc0:	0803620c 	.word	0x0803620c

08011bc4 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bc4:	b20b      	sxth	r3, r1
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	dd20      	ble.n	8011c0c <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011bca:	b570      	push	{r4, r5, r6, lr}
 8011bcc:	b082      	sub	sp, #8
 8011bce:	4606      	mov	r6, r0
 8011bd0:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bd2:	188b      	adds	r3, r1, r2
 8011bd4:	2b04      	cmp	r3, #4
 8011bd6:	dd02      	ble.n	8011bde <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011bd8:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011bda:	b002      	add	sp, #8
 8011bdc:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011bde:	1e4c      	subs	r4, r1, #1
 8011be0:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011be2:	2200      	movs	r2, #0
 8011be4:	2101      	movs	r1, #1
 8011be6:	a801      	add	r0, sp, #4
 8011be8:	f7ff fd32 	bl	8011650 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011bec:	e00a      	b.n	8011c04 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011bee:	f104 0308 	add.w	r3, r4, #8
 8011bf2:	446b      	add	r3, sp
 8011bf4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	b2a1      	uxth	r1, r4
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f000 fe47 	bl	8012890 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011c02:	3401      	adds	r4, #1
 8011c04:	42a5      	cmp	r5, r4
 8011c06:	dcf2      	bgt.n	8011bee <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011c08:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011c0a:	e7e6      	b.n	8011bda <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011c0c:	2001      	movs	r0, #1
}
 8011c0e:	4770      	bx	lr

08011c10 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c12:	b083      	sub	sp, #12
 8011c14:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011c16:	b20a      	sxth	r2, r1
 8011c18:	2a00      	cmp	r2, #0
 8011c1a:	dd43      	ble.n	8011ca4 <eMBRegCoilsCB+0x94>
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	461f      	mov	r7, r3
 8011c20:	198b      	adds	r3, r1, r6
 8011c22:	2b04      	cmp	r3, #4
 8011c24:	dc41      	bgt.n	8011caa <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011c26:	b327      	cbz	r7, 8011c72 <eMBRegCoilsCB+0x62>
 8011c28:	2f01      	cmp	r7, #1
 8011c2a:	d139      	bne.n	8011ca0 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011c2c:	3901      	subs	r1, #1
 8011c2e:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c30:	2200      	movs	r2, #0
 8011c32:	2102      	movs	r1, #2
 8011c34:	a801      	add	r0, sp, #4
 8011c36:	f7ff fd0b 	bl	8011650 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c3a:	4627      	mov	r7, r4
 8011c3c:	e00f      	b.n	8011c5e <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011c3e:	2201      	movs	r2, #1
 8011c40:	b2b9      	uxth	r1, r7
 8011c42:	4628      	mov	r0, r5
 8011c44:	f000 fe58 	bl	80128f8 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011c48:	2201      	movs	r2, #1
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f000 fe53 	bl	80128f8 <xMBUtilGetBits>
 8011c52:	f107 0308 	add.w	r3, r7, #8
 8011c56:	446b      	add	r3, sp
 8011c58:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c5c:	3701      	adds	r7, #1
 8011c5e:	1933      	adds	r3, r6, r4
 8011c60:	42bb      	cmp	r3, r7
 8011c62:	dcec      	bgt.n	8011c3e <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011c64:	2201      	movs	r2, #1
 8011c66:	2102      	movs	r1, #2
 8011c68:	a801      	add	r0, sp, #4
 8011c6a:	f7ff fcf1 	bl	8011650 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011c6e:	2000      	movs	r0, #0
 8011c70:	e019      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011c72:	1e4c      	subs	r4, r1, #1
 8011c74:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c76:	2200      	movs	r2, #0
 8011c78:	2102      	movs	r1, #2
 8011c7a:	a801      	add	r0, sp, #4
 8011c7c:	f7ff fce8 	bl	8011650 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011c80:	e00a      	b.n	8011c98 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011c82:	f104 0308 	add.w	r3, r4, #8
 8011c86:	446b      	add	r3, sp
 8011c88:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	b2a1      	uxth	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 fdfd 	bl	8012890 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011c96:	3401      	adds	r4, #1
 8011c98:	42a6      	cmp	r6, r4
 8011c9a:	dcf2      	bgt.n	8011c82 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	e002      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011ca0:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011ca2:	e000      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011ca4:	2001      	movs	r0, #1
}
 8011ca6:	b003      	add	sp, #12
 8011ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011caa:	2001      	movs	r0, #1
 8011cac:	e7fb      	b.n	8011ca6 <eMBRegCoilsCB+0x96>

08011cae <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011cae:	2001      	movs	r0, #1
 8011cb0:	4770      	bx	lr

08011cb2 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011cb2:	2001      	movs	r0, #1
 8011cb4:	4770      	bx	lr
	...

08011cb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cbe:	2400      	movs	r4, #0
 8011cc0:	9403      	str	r4, [sp, #12]
 8011cc2:	9404      	str	r4, [sp, #16]
 8011cc4:	9405      	str	r4, [sp, #20]
 8011cc6:	9406      	str	r4, [sp, #24]
 8011cc8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011cca:	9400      	str	r4, [sp, #0]
 8011ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8011dc0 <MX_GPIO_Init+0x108>)
 8011cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cd8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011cdc:	9200      	str	r2, [sp, #0]
 8011cde:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ce0:	9401      	str	r4, [sp, #4]
 8011ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ce4:	f042 0201 	orr.w	r2, r2, #1
 8011ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cec:	f002 0201 	and.w	r2, r2, #1
 8011cf0:	9201      	str	r2, [sp, #4]
 8011cf2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cf4:	9402      	str	r4, [sp, #8]
 8011cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cf8:	f042 0202 	orr.w	r2, r2, #2
 8011cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d00:	f003 0302 	and.w	r3, r3, #2
 8011d04:	9302      	str	r3, [sp, #8]
 8011d06:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011d08:	4e2e      	ldr	r6, [pc, #184]	@ (8011dc4 <MX_GPIO_Init+0x10c>)
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011d10:	4630      	mov	r0, r6
 8011d12:	f004 fcb0 	bl	8016676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011d16:	4d2c      	ldr	r5, [pc, #176]	@ (8011dc8 <MX_GPIO_Init+0x110>)
 8011d18:	4622      	mov	r2, r4
 8011d1a:	2107      	movs	r1, #7
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f004 fcaa 	bl	8016676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011d22:	2201      	movs	r2, #1
 8011d24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f004 fca4 	bl	8016676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011d2e:	2201      	movs	r2, #1
 8011d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011d34:	4630      	mov	r0, r6
 8011d36:	f004 fc9e 	bl	8016676 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011d3a:	f04f 0907 	mov.w	r9, #7
 8011d3e:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d42:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011d44:	f04f 0802 	mov.w	r8, #2
 8011d48:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d4c:	a903      	add	r1, sp, #12
 8011d4e:	4630      	mov	r0, r6
 8011d50:	f004 fb1e 	bl	8016390 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011d54:	23e0      	movs	r3, #224	@ 0xe0
 8011d56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d58:	2701      	movs	r7, #1
 8011d5a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d5c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d5e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d60:	a903      	add	r1, sp, #12
 8011d62:	4630      	mov	r0, r6
 8011d64:	f004 fb14 	bl	8016390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011d68:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d6c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d6e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d70:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d72:	a903      	add	r1, sp, #12
 8011d74:	4628      	mov	r0, r5
 8011d76:	f004 fb0b 	bl	8016390 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d7e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d80:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d84:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011d88:	a903      	add	r1, sp, #12
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f004 fb00 	bl	8016390 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011d90:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011d94:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d96:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d98:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d9a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d9e:	a903      	add	r1, sp, #12
 8011da0:	4630      	mov	r0, r6
 8011da2:	f004 faf5 	bl	8016390 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011da6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011daa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011dac:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dae:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011db0:	a903      	add	r1, sp, #12
 8011db2:	4628      	mov	r0, r5
 8011db4:	f004 faec 	bl	8016390 <HAL_GPIO_Init>

}
 8011db8:	b009      	add	sp, #36	@ 0x24
 8011dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	bf00      	nop
 8011dc0:	40023800 	.word	0x40023800
 8011dc4:	40020000 	.word	0x40020000
 8011dc8:	40020400 	.word	0x40020400

08011dcc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011dcc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011dce:	480b      	ldr	r0, [pc, #44]	@ (8011dfc <MX_I2C1_Init+0x30>)
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e00 <MX_I2C1_Init+0x34>)
 8011dd2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8011e04 <MX_I2C1_Init+0x38>)
 8011dd6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011ddc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011dde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011de2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011de4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011de6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011de8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011dea:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011dec:	f004 fde4 	bl	80169b8 <HAL_I2C_Init>
 8011df0:	b900      	cbnz	r0, 8011df4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011df2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011df4:	f000 f93c 	bl	8012070 <Error_Handler>
}
 8011df8:	e7fb      	b.n	8011df2 <MX_I2C1_Init+0x26>
 8011dfa:	bf00      	nop
 8011dfc:	200008c8 	.word	0x200008c8
 8011e00:	40005400 	.word	0x40005400
 8011e04:	00030d40 	.word	0x00030d40

08011e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011e08:	b530      	push	{r4, r5, lr}
 8011e0a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	9303      	str	r3, [sp, #12]
 8011e10:	9304      	str	r3, [sp, #16]
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	9306      	str	r3, [sp, #24]
 8011e16:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011e18:	6802      	ldr	r2, [r0, #0]
 8011e1a:	4b15      	ldr	r3, [pc, #84]	@ (8011e70 <HAL_I2C_MspInit+0x68>)
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d001      	beq.n	8011e24 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011e20:	b009      	add	sp, #36	@ 0x24
 8011e22:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e24:	2500      	movs	r5, #0
 8011e26:	9501      	str	r5, [sp, #4]
 8011e28:	4c12      	ldr	r4, [pc, #72]	@ (8011e74 <HAL_I2C_MspInit+0x6c>)
 8011e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e2c:	f043 0302 	orr.w	r3, r3, #2
 8011e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e34:	f003 0302 	and.w	r3, r3, #2
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011e3c:	23c0      	movs	r3, #192	@ 0xc0
 8011e3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011e40:	2312      	movs	r3, #18
 8011e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011e44:	2301      	movs	r3, #1
 8011e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e48:	2303      	movs	r3, #3
 8011e4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011e4c:	2304      	movs	r3, #4
 8011e4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e50:	a903      	add	r1, sp, #12
 8011e52:	4809      	ldr	r0, [pc, #36]	@ (8011e78 <HAL_I2C_MspInit+0x70>)
 8011e54:	f004 fa9c 	bl	8016390 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011e58:	9502      	str	r5, [sp, #8]
 8011e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e60:	6423      	str	r3, [r4, #64]	@ 0x40
 8011e62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e68:	9302      	str	r3, [sp, #8]
 8011e6a:	9b02      	ldr	r3, [sp, #8]
}
 8011e6c:	e7d8      	b.n	8011e20 <HAL_I2C_MspInit+0x18>
 8011e6e:	bf00      	nop
 8011e70:	40005400 	.word	0x40005400
 8011e74:	40023800 	.word	0x40023800
 8011e78:	40020400 	.word	0x40020400

08011e7c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011e7c:	6802      	ldr	r2, [r0, #0]
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ea8 <HAL_I2C_MspDeInit+0x2c>)
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d000      	beq.n	8011e86 <HAL_I2C_MspDeInit+0xa>
 8011e84:	4770      	bx	lr
{
 8011e86:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011e88:	4a08      	ldr	r2, [pc, #32]	@ (8011eac <HAL_I2C_MspDeInit+0x30>)
 8011e8a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011e8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e90:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011e92:	4c07      	ldr	r4, [pc, #28]	@ (8011eb0 <HAL_I2C_MspDeInit+0x34>)
 8011e94:	2140      	movs	r1, #64	@ 0x40
 8011e96:	4620      	mov	r0, r4
 8011e98:	f004 fb5e 	bl	8016558 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011e9c:	2180      	movs	r1, #128	@ 0x80
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f004 fb5a 	bl	8016558 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	bf00      	nop
 8011ea8:	40005400 	.word	0x40005400
 8011eac:	40023800 	.word	0x40023800
 8011eb0:	40020400 	.word	0x40020400

08011eb4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8011eb4:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011eb6:	4807      	ldr	r0, [pc, #28]	@ (8011ed4 <MX_IWDG_Init+0x20>)
 8011eb8:	4b07      	ldr	r3, [pc, #28]	@ (8011ed8 <MX_IWDG_Init+0x24>)
 8011eba:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8011ebc:	2303      	movs	r3, #3
 8011ebe:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8011ec0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8011ec4:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011ec6:	f004 fff5 	bl	8016eb4 <HAL_IWDG_Init>
 8011eca:	b900      	cbnz	r0, 8011ece <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011ecc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011ece:	f000 f8cf 	bl	8012070 <Error_Handler>
}
 8011ed2:	e7fb      	b.n	8011ecc <MX_IWDG_Init+0x18>
 8011ed4:	2000091c 	.word	0x2000091c
 8011ed8:	40003000 	.word	0x40003000

08011edc <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011edc:	b084      	sub	sp, #16
 8011ede:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011ee2:	b004      	add	sp, #16
 8011ee4:	4770      	bx	lr

08011ee6 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011ee6:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011ee8:	fb01 f400 	mul.w	r4, r1, r0
 8011eec:	4620      	mov	r0, r4
 8011eee:	f008 fd43 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011ef2:	4605      	mov	r5, r0
 8011ef4:	b118      	cbz	r0, 8011efe <mg_calloc+0x18>
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	2100      	movs	r1, #0
 8011efa:	f01a fd71 	bl	802c9e0 <memset>
  return p;
}
 8011efe:	4628      	mov	r0, r5
 8011f00:	bd38      	pop	{r3, r4, r5, pc}
	...

08011f04 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011f04:	b108      	cbz	r0, 8011f0a <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011f06:	4a01      	ldr	r2, [pc, #4]	@ (8011f0c <reg_logging_fn+0x8>)
 8011f08:	6010      	str	r0, [r2, #0]
	}
}
 8011f0a:	4770      	bx	lr
 8011f0c:	20000000 	.word	0x20000000

08011f10 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011f10:	4b01      	ldr	r3, [pc, #4]	@ (8011f18 <logger_set_level+0x8>)
 8011f12:	7018      	strb	r0, [r3, #0]
}
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	20000928 	.word	0x20000928

08011f1c <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011f1c:	b40e      	push	{r1, r2, r3}
 8011f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f20:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011f24:	4b44      	ldr	r3, [pc, #272]	@ (8012038 <logging+0x11c>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	4283      	cmp	r3, r0
 8011f2a:	d905      	bls.n	8011f38 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011f2c:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011f30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f34:	b003      	add	sp, #12
 8011f36:	4770      	bx	lr
 8011f38:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011f3a:	2101      	movs	r1, #1
 8011f3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011f40:	f7ff ffd1 	bl	8011ee6 <mg_calloc>
    if (!tmp_buf){
 8011f44:	4605      	mov	r5, r0
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d0f0      	beq.n	8011f2c <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011f4a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011f4e:	2100      	movs	r1, #0
 8011f50:	a85b      	add	r0, sp, #364	@ 0x16c
 8011f52:	f01a fd45 	bl	802c9e0 <memset>
    mess.log_level = level;
 8011f56:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011f5a:	f017 fd91 	bl	8029a80 <mg_now>
 8011f5e:	f7fe fb2d 	bl	80105bc <__aeabi_ul2d>
 8011f62:	4606      	mov	r6, r0
 8011f64:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011f66:	2200      	movs	r2, #0
 8011f68:	4b34      	ldr	r3, [pc, #208]	@ (801203c <logging+0x120>)
 8011f6a:	f7fe fc87 	bl	801087c <__aeabi_ddiv>
 8011f6e:	f7fe ff1f 	bl	8010db0 <__aeabi_d2lz>
 8011f72:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011f76:	a94f      	add	r1, sp, #316	@ 0x13c
 8011f78:	a858      	add	r0, sp, #352	@ 0x160
 8011f7a:	f01a fdc7 	bl	802cb0c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011f7e:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011f80:	4a2f      	ldr	r2, [pc, #188]	@ (8012040 <logging+0x124>)
 8011f82:	2140      	movs	r1, #64	@ 0x40
 8011f84:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f86:	f01b fbd3 	bl	802d730 <strftime>
 8011f8a:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	4639      	mov	r1, r7
 8011f90:	f7fe fdfa 	bl	8010b88 <__aeabi_d2iz>
 8011f94:	4a2b      	ldr	r2, [pc, #172]	@ (8012044 <logging+0x128>)
 8011f96:	fb82 3200 	smull	r3, r2, r2, r0
 8011f9a:	17c3      	asrs	r3, r0, #31
 8011f9c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011fa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fa4:	fb02 0313 	mls	r3, r2, r3, r0
 8011fa8:	4a27      	ldr	r2, [pc, #156]	@ (8012048 <logging+0x12c>)
 8011faa:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011fae:	a83f      	add	r0, sp, #252	@ 0xfc
 8011fb0:	4420      	add	r0, r4
 8011fb2:	f019 ffeb 	bl	802bf8c <snprintf>
 8011fb6:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011fb8:	1c63      	adds	r3, r4, #1
 8011fba:	2220      	movs	r2, #32
 8011fbc:	a93f      	add	r1, sp, #252	@ 0xfc
 8011fbe:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011fc4:	aba2      	add	r3, sp, #648	@ 0x288
 8011fc6:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011fc8:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011fcc:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011fce:	21fd      	movs	r1, #253	@ 0xfd
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f01a faa3 	bl	802c51c <vsnprintf>
 8011fd6:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011fd8:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011fdc:	9601      	str	r6, [sp, #4]
 8011fde:	4b1b      	ldr	r3, [pc, #108]	@ (801204c <logging+0x130>)
 8011fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011fe8:	4a19      	ldr	r2, [pc, #100]	@ (8012050 <logging+0x134>)
 8011fea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f019 ffcc 	bl	802bf8c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011ff4:	2cf5      	cmp	r4, #245	@ 0xf5
 8011ff6:	d81b      	bhi.n	8012030 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f7fe f951 	bl	80102a0 <strlen>
 8011ffe:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8012002:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012006:	4629      	mov	r1, r5
 8012008:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 801200c:	f01a fd2f 	bl	802ca6e <strncpy>
    if (_send_log_mess) {
 8012010:	4b10      	ldr	r3, [pc, #64]	@ (8012054 <logging+0x138>)
 8012012:	681e      	ldr	r6, [r3, #0]
 8012014:	b146      	cbz	r6, 8012028 <logging+0x10c>
        _send_log_mess(mess);
 8012016:	ac5b      	add	r4, sp, #364	@ 0x16c
 8012018:	22f2      	movs	r2, #242	@ 0xf2
 801201a:	a95f      	add	r1, sp, #380	@ 0x17c
 801201c:	4668      	mov	r0, sp
 801201e:	f01b ff1b 	bl	802de58 <memcpy>
 8012022:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012026:	47b0      	blx	r6
    free(tmp_buf);
 8012028:	4628      	mov	r0, r5
 801202a:	f008 fd27 	bl	801aa7c <vPortFree>
 801202e:	e77d      	b.n	8011f2c <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8012030:	23f6      	movs	r3, #246	@ 0xf6
 8012032:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8012036:	e7e4      	b.n	8012002 <logging+0xe6>
 8012038:	20000928 	.word	0x20000928
 801203c:	408f4000 	.word	0x408f4000
 8012040:	08036428 	.word	0x08036428
 8012044:	10624dd3 	.word	0x10624dd3
 8012048:	0803643c 	.word	0x0803643c
 801204c:	20000004 	.word	0x20000004
 8012050:	08036444 	.word	0x08036444
 8012054:	20000000 	.word	0x20000000

08012058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 801205a:	6802      	ldr	r2, [r0, #0]
 801205c:	4b03      	ldr	r3, [pc, #12]	@ (801206c <HAL_TIM_PeriodElapsedCallback+0x14>)
 801205e:	429a      	cmp	r2, r3
 8012060:	d000      	beq.n	8012064 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012062:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012064:	f004 f8f0 	bl	8016248 <HAL_IncTick>
}
 8012068:	e7fb      	b.n	8012062 <HAL_TIM_PeriodElapsedCallback+0xa>
 801206a:	bf00      	nop
 801206c:	40014000 	.word	0x40014000

08012070 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012070:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012072:	e7fe      	b.n	8012072 <Error_Handler+0x2>

08012074 <SystemClock_Config>:
{
 8012074:	b500      	push	{lr}
 8012076:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012078:	2230      	movs	r2, #48	@ 0x30
 801207a:	2100      	movs	r1, #0
 801207c:	a808      	add	r0, sp, #32
 801207e:	f01a fcaf 	bl	802c9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012082:	2300      	movs	r3, #0
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	9304      	str	r3, [sp, #16]
 8012088:	9305      	str	r3, [sp, #20]
 801208a:	9306      	str	r3, [sp, #24]
 801208c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801208e:	9301      	str	r3, [sp, #4]
 8012090:	4a20      	ldr	r2, [pc, #128]	@ (8012114 <SystemClock_Config+0xa0>)
 8012092:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012094:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012098:	6411      	str	r1, [r2, #64]	@ 0x40
 801209a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801209c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80120a0:	9201      	str	r2, [sp, #4]
 80120a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80120a4:	9302      	str	r3, [sp, #8]
 80120a6:	4b1c      	ldr	r3, [pc, #112]	@ (8012118 <SystemClock_Config+0xa4>)
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80120ae:	601a      	str	r2, [r3, #0]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80120b6:	9302      	str	r3, [sp, #8]
 80120b8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80120ba:	2309      	movs	r3, #9
 80120bc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80120be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80120c2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80120c4:	2301      	movs	r3, #1
 80120c6:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80120c8:	2202      	movs	r2, #2
 80120ca:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80120cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80120d0:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80120d2:	2304      	movs	r3, #4
 80120d4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80120d6:	2164      	movs	r1, #100	@ 0x64
 80120d8:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80120da:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80120dc:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80120de:	a808      	add	r0, sp, #32
 80120e0:	f004 ff1a 	bl	8016f18 <HAL_RCC_OscConfig>
 80120e4:	b988      	cbnz	r0, 801210a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80120e6:	230f      	movs	r3, #15
 80120e8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80120ea:	2302      	movs	r3, #2
 80120ec:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80120ee:	2300      	movs	r3, #0
 80120f0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80120f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80120f6:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80120f8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80120fa:	2103      	movs	r1, #3
 80120fc:	a803      	add	r0, sp, #12
 80120fe:	f005 f975 	bl	80173ec <HAL_RCC_ClockConfig>
 8012102:	b920      	cbnz	r0, 801210e <SystemClock_Config+0x9a>
}
 8012104:	b015      	add	sp, #84	@ 0x54
 8012106:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801210a:	f7ff ffb1 	bl	8012070 <Error_Handler>
    Error_Handler();
 801210e:	f7ff ffaf 	bl	8012070 <Error_Handler>
 8012112:	bf00      	nop
 8012114:	40023800 	.word	0x40023800
 8012118:	40007000 	.word	0x40007000

0801211c <main>:
{
 801211c:	b500      	push	{lr}
 801211e:	b083      	sub	sp, #12
 8012120:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8012122:	4b11      	ldr	r3, [pc, #68]	@ (8012168 <main+0x4c>)
 8012124:	4a11      	ldr	r2, [pc, #68]	@ (801216c <main+0x50>)
 8012126:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8012128:	b662      	cpsie	i
	volatile int i = 1000000;
 801212a:	4b11      	ldr	r3, [pc, #68]	@ (8012170 <main+0x54>)
 801212c:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 801212e:	e002      	b.n	8012136 <main+0x1a>
		i--;
 8012130:	9b01      	ldr	r3, [sp, #4]
 8012132:	3b01      	subs	r3, #1
 8012134:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012136:	9b01      	ldr	r3, [sp, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	dcf9      	bgt.n	8012130 <main+0x14>
  HAL_Init();
 801213c:	f004 f86a 	bl	8016214 <HAL_Init>
  SystemClock_Config();
 8012140:	f7ff ff98 	bl	8012074 <SystemClock_Config>
  MX_GPIO_Init();
 8012144:	f7ff fdb8 	bl	8011cb8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8012148:	f000 f836 	bl	80121b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 801214c:	f7ff fe3e 	bl	8011dcc <MX_I2C1_Init>
  MX_SPI1_Init();
 8012150:	f000 f810 	bl	8012174 <MX_SPI1_Init>
  MX_IWDG_Init();
 8012154:	f7ff feae 	bl	8011eb4 <MX_IWDG_Init>
  osKernelInitialize();
 8012158:	f006 f97c 	bl	8018454 <osKernelInitialize>
  MX_FREERTOS_Init();
 801215c:	f7ff fba4 	bl	80118a8 <MX_FREERTOS_Init>
  osKernelStart();
 8012160:	f006 f98a 	bl	8018478 <osKernelStart>
  while (1)
 8012164:	e7fe      	b.n	8012164 <main+0x48>
 8012166:	bf00      	nop
 8012168:	e000ed00 	.word	0xe000ed00
 801216c:	08010000 	.word	0x08010000
 8012170:	000f4240 	.word	0x000f4240

08012174 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012174:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012176:	480e      	ldr	r0, [pc, #56]	@ (80121b0 <MX_SPI1_Init+0x3c>)
 8012178:	4b0e      	ldr	r3, [pc, #56]	@ (80121b4 <MX_SPI1_Init+0x40>)
 801217a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801217c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012180:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012182:	2300      	movs	r3, #0
 8012184:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012186:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012188:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801218a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801218c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012190:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012192:	2208      	movs	r2, #8
 8012194:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012196:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012198:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801219a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801219c:	230a      	movs	r3, #10
 801219e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80121a0:	f005 fb02 	bl	80177a8 <HAL_SPI_Init>
 80121a4:	b900      	cbnz	r0, 80121a8 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80121a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80121a8:	f7ff ff62 	bl	8012070 <Error_Handler>
}
 80121ac:	e7fb      	b.n	80121a6 <MX_SPI1_Init+0x32>
 80121ae:	bf00      	nop
 80121b0:	20000984 	.word	0x20000984
 80121b4:	40013000 	.word	0x40013000

080121b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80121b8:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80121ba:	480d      	ldr	r0, [pc, #52]	@ (80121f0 <MX_SPI2_Init+0x38>)
 80121bc:	4b0d      	ldr	r3, [pc, #52]	@ (80121f4 <MX_SPI2_Init+0x3c>)
 80121be:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80121c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80121c4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80121c6:	2300      	movs	r3, #0
 80121c8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80121ca:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80121cc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80121ce:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80121d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121d4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80121d6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80121d8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80121da:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80121dc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80121de:	230a      	movs	r3, #10
 80121e0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80121e2:	f005 fae1 	bl	80177a8 <HAL_SPI_Init>
 80121e6:	b900      	cbnz	r0, 80121ea <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80121e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80121ea:	f7ff ff41 	bl	8012070 <Error_Handler>
}
 80121ee:	e7fb      	b.n	80121e8 <MX_SPI2_Init+0x30>
 80121f0:	2000092c 	.word	0x2000092c
 80121f4:	40003800 	.word	0x40003800

080121f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80121f8:	b500      	push	{lr}
 80121fa:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121fc:	2300      	movs	r3, #0
 80121fe:	9305      	str	r3, [sp, #20]
 8012200:	9306      	str	r3, [sp, #24]
 8012202:	9307      	str	r3, [sp, #28]
 8012204:	9308      	str	r3, [sp, #32]
 8012206:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012208:	6803      	ldr	r3, [r0, #0]
 801220a:	4a28      	ldr	r2, [pc, #160]	@ (80122ac <HAL_SPI_MspInit+0xb4>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d005      	beq.n	801221c <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8012210:	4a27      	ldr	r2, [pc, #156]	@ (80122b0 <HAL_SPI_MspInit+0xb8>)
 8012212:	4293      	cmp	r3, r2
 8012214:	d025      	beq.n	8012262 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8012216:	b00b      	add	sp, #44	@ 0x2c
 8012218:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 801221c:	2100      	movs	r1, #0
 801221e:	9101      	str	r1, [sp, #4]
 8012220:	4b24      	ldr	r3, [pc, #144]	@ (80122b4 <HAL_SPI_MspInit+0xbc>)
 8012222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012224:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012228:	645a      	str	r2, [r3, #68]	@ 0x44
 801222a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801222c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012230:	9201      	str	r2, [sp, #4]
 8012232:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012234:	9102      	str	r1, [sp, #8]
 8012236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012238:	f042 0202 	orr.w	r2, r2, #2
 801223c:	631a      	str	r2, [r3, #48]	@ 0x30
 801223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012240:	f003 0302 	and.w	r3, r3, #2
 8012244:	9302      	str	r3, [sp, #8]
 8012246:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012248:	2338      	movs	r3, #56	@ 0x38
 801224a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801224c:	2302      	movs	r3, #2
 801224e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012250:	2303      	movs	r3, #3
 8012252:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012254:	2305      	movs	r3, #5
 8012256:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012258:	a905      	add	r1, sp, #20
 801225a:	4817      	ldr	r0, [pc, #92]	@ (80122b8 <HAL_SPI_MspInit+0xc0>)
 801225c:	f004 f898 	bl	8016390 <HAL_GPIO_Init>
 8012260:	e7d9      	b.n	8012216 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012262:	2100      	movs	r1, #0
 8012264:	9103      	str	r1, [sp, #12]
 8012266:	4b13      	ldr	r3, [pc, #76]	@ (80122b4 <HAL_SPI_MspInit+0xbc>)
 8012268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801226a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801226e:	641a      	str	r2, [r3, #64]	@ 0x40
 8012270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012272:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012276:	9203      	str	r2, [sp, #12]
 8012278:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801227a:	9104      	str	r1, [sp, #16]
 801227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801227e:	f042 0202 	orr.w	r2, r2, #2
 8012282:	631a      	str	r2, [r3, #48]	@ 0x30
 8012284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	9304      	str	r3, [sp, #16]
 801228c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801228e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012292:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012294:	2302      	movs	r3, #2
 8012296:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012298:	2303      	movs	r3, #3
 801229a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801229c:	2305      	movs	r3, #5
 801229e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80122a0:	a905      	add	r1, sp, #20
 80122a2:	4805      	ldr	r0, [pc, #20]	@ (80122b8 <HAL_SPI_MspInit+0xc0>)
 80122a4:	f004 f874 	bl	8016390 <HAL_GPIO_Init>
}
 80122a8:	e7b5      	b.n	8012216 <HAL_SPI_MspInit+0x1e>
 80122aa:	bf00      	nop
 80122ac:	40013000 	.word	0x40013000
 80122b0:	40003800 	.word	0x40003800
 80122b4:	40023800 	.word	0x40023800
 80122b8:	40020400 	.word	0x40020400

080122bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80122bc:	b500      	push	{lr}
 80122be:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80122c0:	2200      	movs	r2, #0
 80122c2:	9200      	str	r2, [sp, #0]
 80122c4:	4b0d      	ldr	r3, [pc, #52]	@ (80122fc <HAL_MspInit+0x40>)
 80122c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80122c8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80122cc:	6459      	str	r1, [r3, #68]	@ 0x44
 80122ce:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80122d0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80122d4:	9100      	str	r1, [sp, #0]
 80122d6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80122d8:	9201      	str	r2, [sp, #4]
 80122da:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80122dc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80122e0:	6419      	str	r1, [r3, #64]	@ 0x40
 80122e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80122ec:	210f      	movs	r1, #15
 80122ee:	f06f 0001 	mvn.w	r0, #1
 80122f2:	f004 f835 	bl	8016360 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80122f6:	b003      	add	sp, #12
 80122f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80122fc:	40023800 	.word	0x40023800

08012300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012300:	b530      	push	{r4, r5, lr}
 8012302:	b089      	sub	sp, #36	@ 0x24
 8012304:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012306:	2400      	movs	r4, #0
 8012308:	9401      	str	r4, [sp, #4]
 801230a:	4b1d      	ldr	r3, [pc, #116]	@ (8012380 <HAL_InitTick+0x80>)
 801230c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801230e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8012312:	645a      	str	r2, [r3, #68]	@ 0x44
 8012314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801231a:	9301      	str	r3, [sp, #4]
 801231c:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801231e:	a902      	add	r1, sp, #8
 8012320:	a803      	add	r0, sp, #12
 8012322:	f005 f939 	bl	8017598 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012326:	f005 f927 	bl	8017578 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801232a:	4a16      	ldr	r2, [pc, #88]	@ (8012384 <HAL_InitTick+0x84>)
 801232c:	fba2 2300 	umull	r2, r3, r2, r0
 8012330:	0c9b      	lsrs	r3, r3, #18
 8012332:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012334:	4814      	ldr	r0, [pc, #80]	@ (8012388 <HAL_InitTick+0x88>)
 8012336:	4a15      	ldr	r2, [pc, #84]	@ (801238c <HAL_InitTick+0x8c>)
 8012338:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801233a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801233e:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012340:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 8012342:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012344:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012346:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012348:	f005 fea4 	bl	8018094 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 801234c:	4604      	mov	r4, r0
 801234e:	b110      	cbz	r0, 8012356 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012350:	4620      	mov	r0, r4
 8012352:	b009      	add	sp, #36	@ 0x24
 8012354:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012356:	480c      	ldr	r0, [pc, #48]	@ (8012388 <HAL_InitTick+0x88>)
 8012358:	f005 fd56 	bl	8017e08 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 801235c:	4604      	mov	r4, r0
 801235e:	2800      	cmp	r0, #0
 8012360:	d1f6      	bne.n	8012350 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8012362:	2018      	movs	r0, #24
 8012364:	f004 f80c 	bl	8016380 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012368:	2d0f      	cmp	r5, #15
 801236a:	d901      	bls.n	8012370 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 801236c:	2401      	movs	r4, #1
 801236e:	e7ef      	b.n	8012350 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012370:	2200      	movs	r2, #0
 8012372:	4629      	mov	r1, r5
 8012374:	2018      	movs	r0, #24
 8012376:	f003 fff3 	bl	8016360 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801237a:	4b05      	ldr	r3, [pc, #20]	@ (8012390 <HAL_InitTick+0x90>)
 801237c:	601d      	str	r5, [r3, #0]
 801237e:	e7e7      	b.n	8012350 <HAL_InitTick+0x50>
 8012380:	40023800 	.word	0x40023800
 8012384:	431bde83 	.word	0x431bde83
 8012388:	200009dc 	.word	0x200009dc
 801238c:	40014000 	.word	0x40014000
 8012390:	20000108 	.word	0x20000108

08012394 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012394:	e7fe      	b.n	8012394 <NMI_Handler>

08012396 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012396:	e7fe      	b.n	8012396 <HardFault_Handler>

08012398 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012398:	e7fe      	b.n	8012398 <MemManage_Handler>

0801239a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801239a:	e7fe      	b.n	801239a <BusFault_Handler>

0801239c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801239c:	e7fe      	b.n	801239c <UsageFault_Handler>

0801239e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801239e:	4770      	bx	lr

080123a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80123a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80123a2:	4802      	ldr	r0, [pc, #8]	@ (80123ac <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80123a4:	f005 fd70 	bl	8017e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80123a8:	bd08      	pop	{r3, pc}
 80123aa:	bf00      	nop
 80123ac:	200009dc 	.word	0x200009dc

080123b0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80123b0:	2001      	movs	r0, #1
 80123b2:	4770      	bx	lr

080123b4 <_kill>:

int _kill(int pid, int sig)
{
 80123b4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80123b6:	f01b fd17 	bl	802dde8 <__errno>
 80123ba:	2316      	movs	r3, #22
 80123bc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80123be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123c2:	bd08      	pop	{r3, pc}

080123c4 <_exit>:

void _exit (int status)
{
 80123c4:	b508      	push	{r3, lr}
  _kill(status, -1);
 80123c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80123ca:	f7ff fff3 	bl	80123b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80123ce:	e7fe      	b.n	80123ce <_exit+0xa>

080123d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80123d0:	b570      	push	{r4, r5, r6, lr}
 80123d2:	460c      	mov	r4, r1
 80123d4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123d6:	2500      	movs	r5, #0
 80123d8:	e006      	b.n	80123e8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80123da:	f3af 8000 	nop.w
 80123de:	4621      	mov	r1, r4
 80123e0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123e4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80123e6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123e8:	42b5      	cmp	r5, r6
 80123ea:	dbf6      	blt.n	80123da <_read+0xa>
  }

  return len;
}
 80123ec:	4630      	mov	r0, r6
 80123ee:	bd70      	pop	{r4, r5, r6, pc}

080123f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80123f0:	b570      	push	{r4, r5, r6, lr}
 80123f2:	460c      	mov	r4, r1
 80123f4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123f6:	2500      	movs	r5, #0
 80123f8:	e004      	b.n	8012404 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80123fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80123fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012402:	3501      	adds	r5, #1
 8012404:	42b5      	cmp	r5, r6
 8012406:	dbf8      	blt.n	80123fa <_write+0xa>
  }
  return len;
}
 8012408:	4630      	mov	r0, r6
 801240a:	bd70      	pop	{r4, r5, r6, pc}

0801240c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 801240c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012410:	4770      	bx	lr

08012412 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8012412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012416:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012418:	2000      	movs	r0, #0
 801241a:	4770      	bx	lr

0801241c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 801241c:	2001      	movs	r0, #1
 801241e:	4770      	bx	lr

08012420 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8012420:	2000      	movs	r0, #0
 8012422:	4770      	bx	lr

08012424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012424:	b510      	push	{r4, lr}
 8012426:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012428:	4a0c      	ldr	r2, [pc, #48]	@ (801245c <_sbrk+0x38>)
 801242a:	490d      	ldr	r1, [pc, #52]	@ (8012460 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801242c:	480d      	ldr	r0, [pc, #52]	@ (8012464 <_sbrk+0x40>)
 801242e:	6800      	ldr	r0, [r0, #0]
 8012430:	b140      	cbz	r0, 8012444 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012432:	480c      	ldr	r0, [pc, #48]	@ (8012464 <_sbrk+0x40>)
 8012434:	6800      	ldr	r0, [r0, #0]
 8012436:	4403      	add	r3, r0
 8012438:	1a52      	subs	r2, r2, r1
 801243a:	4293      	cmp	r3, r2
 801243c:	d806      	bhi.n	801244c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801243e:	4a09      	ldr	r2, [pc, #36]	@ (8012464 <_sbrk+0x40>)
 8012440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8012442:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012444:	4807      	ldr	r0, [pc, #28]	@ (8012464 <_sbrk+0x40>)
 8012446:	4c08      	ldr	r4, [pc, #32]	@ (8012468 <_sbrk+0x44>)
 8012448:	6004      	str	r4, [r0, #0]
 801244a:	e7f2      	b.n	8012432 <_sbrk+0xe>
    errno = ENOMEM;
 801244c:	f01b fccc 	bl	802dde8 <__errno>
 8012450:	230c      	movs	r3, #12
 8012452:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012458:	e7f3      	b.n	8012442 <_sbrk+0x1e>
 801245a:	bf00      	nop
 801245c:	20020000 	.word	0x20020000
 8012460:	00000800 	.word	0x00000800
 8012464:	20000a28 	.word	0x20000a28
 8012468:	2001a218 	.word	0x2001a218

0801246c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801246c:	4a03      	ldr	r2, [pc, #12]	@ (801247c <SystemInit+0x10>)
 801246e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012476:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801247a:	4770      	bx	lr
 801247c:	e000ed00 	.word	0xe000ed00

08012480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80124b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012484:	f7ff fff2 	bl	801246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012488:	480c      	ldr	r0, [pc, #48]	@ (80124bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801248a:	490d      	ldr	r1, [pc, #52]	@ (80124c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801248c:	4a0d      	ldr	r2, [pc, #52]	@ (80124c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012490:	e002      	b.n	8012498 <LoopCopyDataInit>

08012492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012496:	3304      	adds	r3, #4

08012498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801249c:	d3f9      	bcc.n	8012492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801249e:	4a0a      	ldr	r2, [pc, #40]	@ (80124c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80124a0:	4c0a      	ldr	r4, [pc, #40]	@ (80124cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80124a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80124a4:	e001      	b.n	80124aa <LoopFillZerobss>

080124a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80124a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80124a8:	3204      	adds	r2, #4

080124aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80124aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80124ac:	d3fb      	bcc.n	80124a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80124ae:	f01b fca9 	bl	802de04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80124b2:	f7ff fe33 	bl	801211c <main>
  bx  lr    
 80124b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80124b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80124bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80124c0:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 80124c4:	0803c454 	.word	0x0803c454
  ldr r2, =_sbss
 80124c8:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 80124cc:	2001a218 	.word	0x2001a218

080124d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80124d0:	e7fe      	b.n	80124d0 <ADC_IRQHandler>

080124d2 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80124d2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80124d4:	880b      	ldrh	r3, [r1, #0]
 80124d6:	2b05      	cmp	r3, #5
 80124d8:	d001      	beq.n	80124de <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124da:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80124dc:	bd38      	pop	{r3, r4, r5, pc}
 80124de:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80124e0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80124e2:	7881      	ldrb	r1, [r0, #2]
 80124e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80124e8:	3101      	adds	r1, #1
 80124ea:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80124ec:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80124ee:	7902      	ldrb	r2, [r0, #4]
 80124f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80124f4:	1e53      	subs	r3, r2, #1
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80124fc:	4563      	cmp	r3, ip
 80124fe:	d820      	bhi.n	8012542 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8012500:	2300      	movs	r3, #0
 8012502:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012504:	2301      	movs	r3, #1
 8012506:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012508:	8823      	ldrh	r3, [r4, #0]
 801250a:	3301      	adds	r3, #1
 801250c:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 801250e:	f012 0f07 	tst.w	r2, #7
 8012512:	d010      	beq.n	8012536 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8012514:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012518:	3301      	adds	r3, #1
 801251a:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801251c:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801251e:	8823      	ldrh	r3, [r4, #0]
 8012520:	3301      	adds	r3, #1
 8012522:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8012524:	2300      	movs	r3, #0
 8012526:	3002      	adds	r0, #2
 8012528:	f7ff fb72 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 801252c:	b930      	cbnz	r0, 801253c <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 801252e:	8823      	ldrh	r3, [r4, #0]
 8012530:	442b      	add	r3, r5
 8012532:	8023      	strh	r3, [r4, #0]
 8012534:	e7d2      	b.n	80124dc <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012536:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 801253a:	e7ef      	b.n	801251c <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 801253c:	f000 f9f0 	bl	8012920 <prveMBError2Exception>
 8012540:	e7cc      	b.n	80124dc <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012542:	2003      	movs	r0, #3
 8012544:	e7ca      	b.n	80124dc <eMBFuncReadCoils+0xa>

08012546 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012546:	880b      	ldrh	r3, [r1, #0]
 8012548:	2b05      	cmp	r3, #5
 801254a:	d001      	beq.n	8012550 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801254c:	2003      	movs	r0, #3
 801254e:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012550:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012552:	7881      	ldrb	r1, [r0, #2]
 8012554:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012558:	3101      	adds	r1, #1
 801255a:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801255c:	7903      	ldrb	r3, [r0, #4]
 801255e:	b9f3      	cbnz	r3, 801259e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012560:	78c2      	ldrb	r2, [r0, #3]
 8012562:	1e53      	subs	r3, r2, #1
 8012564:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012566:	2bfd      	cmp	r3, #253	@ 0xfd
 8012568:	d91b      	bls.n	80125a2 <eMBFuncWriteCoil+0x5c>
{
 801256a:	b500      	push	{lr}
 801256c:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012574:	2aff      	cmp	r2, #255	@ 0xff
 8012576:	d00b      	beq.n	8012590 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012578:	2300      	movs	r3, #0
 801257a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801257e:	2301      	movs	r3, #1
 8012580:	461a      	mov	r2, r3
 8012582:	a801      	add	r0, sp, #4
 8012584:	f7ff fb44 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012588:	b930      	cbnz	r0, 8012598 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801258a:	b003      	add	sp, #12
 801258c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012590:	2301      	movs	r3, #1
 8012592:	f88d 3004 	strb.w	r3, [sp, #4]
 8012596:	e7f2      	b.n	801257e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012598:	f000 f9c2 	bl	8012920 <prveMBError2Exception>
 801259c:	e7f5      	b.n	801258a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801259e:	2003      	movs	r0, #3
 80125a0:	4770      	bx	lr
 80125a2:	2003      	movs	r0, #3
}
 80125a4:	4770      	bx	lr

080125a6 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80125a6:	880b      	ldrh	r3, [r1, #0]
 80125a8:	2b05      	cmp	r3, #5
 80125aa:	d92d      	bls.n	8012608 <eMBFuncWriteMultipleCoils+0x62>
{
 80125ac:	b510      	push	{r4, lr}
 80125ae:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80125b0:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80125b2:	7883      	ldrb	r3, [r0, #2]
 80125b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 80125b8:	3301      	adds	r3, #1
 80125ba:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80125bc:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80125be:	7903      	ldrb	r3, [r0, #4]
 80125c0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80125c4:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80125c8:	f013 0f07 	tst.w	r3, #7
 80125cc:	d00e      	beq.n	80125ec <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80125ce:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125d2:	f10c 0c01 	add.w	ip, ip, #1
 80125d6:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80125da:	1e53      	subs	r3, r2, #1
 80125dc:	b29b      	uxth	r3, r3
 80125de:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80125e2:	d213      	bcs.n	801260c <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80125e4:	45f4      	cmp	ip, lr
 80125e6:	d004      	beq.n	80125f2 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125e8:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80125ea:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80125ec:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125f0:	e7f3      	b.n	80125da <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80125f2:	2301      	movs	r3, #1
 80125f4:	3006      	adds	r0, #6
 80125f6:	f7ff fb0b 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80125fa:	b910      	cbnz	r0, 8012602 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80125fc:	2305      	movs	r3, #5
 80125fe:	8023      	strh	r3, [r4, #0]
 8012600:	e7f3      	b.n	80125ea <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 8012602:	f000 f98d 	bl	8012920 <prveMBError2Exception>
 8012606:	e7f0      	b.n	80125ea <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012608:	2003      	movs	r0, #3
}
 801260a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801260c:	2003      	movs	r0, #3
 801260e:	e7ec      	b.n	80125ea <eMBFuncWriteMultipleCoils+0x44>

08012610 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8012610:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012612:	880b      	ldrh	r3, [r1, #0]
 8012614:	2b05      	cmp	r3, #5
 8012616:	d001      	beq.n	801261c <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012618:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801261a:	bd38      	pop	{r3, r4, r5, pc}
 801261c:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801261e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012620:	7881      	ldrb	r1, [r0, #2]
 8012622:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012626:	3101      	adds	r1, #1
 8012628:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 801262a:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 801262c:	7902      	ldrb	r2, [r0, #4]
 801262e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012632:	1e53      	subs	r3, r2, #1
 8012634:	b29b      	uxth	r3, r3
 8012636:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801263a:	4563      	cmp	r3, ip
 801263c:	d81f      	bhi.n	801267e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801263e:	2300      	movs	r3, #0
 8012640:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012642:	2302      	movs	r3, #2
 8012644:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012646:	8823      	ldrh	r3, [r4, #0]
 8012648:	3301      	adds	r3, #1
 801264a:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801264c:	f012 0f07 	tst.w	r2, #7
 8012650:	d00f      	beq.n	8012672 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012652:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012656:	3301      	adds	r3, #1
 8012658:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801265a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801265c:	8823      	ldrh	r3, [r4, #0]
 801265e:	3301      	adds	r3, #1
 8012660:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012662:	3002      	adds	r0, #2
 8012664:	f7ff faae 	bl	8011bc4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012668:	b930      	cbnz	r0, 8012678 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 801266a:	8823      	ldrh	r3, [r4, #0]
 801266c:	442b      	add	r3, r5
 801266e:	8023      	strh	r3, [r4, #0]
 8012670:	e7d3      	b.n	801261a <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012672:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012676:	e7f0      	b.n	801265a <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012678:	f000 f952 	bl	8012920 <prveMBError2Exception>
 801267c:	e7cd      	b.n	801261a <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801267e:	2003      	movs	r0, #3
 8012680:	e7cb      	b.n	801261a <eMBFuncReadDiscreteInputs+0xa>

08012682 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012682:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012684:	880b      	ldrh	r3, [r1, #0]
 8012686:	2b05      	cmp	r3, #5
 8012688:	d001      	beq.n	801268e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801268a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801268c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801268e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012690:	7881      	ldrb	r1, [r0, #2]
 8012692:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012696:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012698:	2301      	movs	r3, #1
 801269a:	461a      	mov	r2, r3
 801269c:	b289      	uxth	r1, r1
 801269e:	3003      	adds	r0, #3
 80126a0:	f7ff fb07 	bl	8011cb2 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d0f1      	beq.n	801268c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 80126a8:	f000 f93a 	bl	8012920 <prveMBError2Exception>
 80126ac:	e7ee      	b.n	801268c <eMBFuncWriteHoldingRegister+0xa>

080126ae <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80126ae:	880b      	ldrh	r3, [r1, #0]
 80126b0:	2b05      	cmp	r3, #5
 80126b2:	d922      	bls.n	80126fa <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 80126b4:	b510      	push	{r4, lr}
 80126b6:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80126b8:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80126ba:	7883      	ldrb	r3, [r0, #2]
 80126bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 80126c0:	3301      	adds	r3, #1
 80126c2:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80126c4:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80126c6:	7902      	ldrb	r2, [r0, #4]
 80126c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80126cc:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80126d0:	1e53      	subs	r3, r2, #1
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	2b77      	cmp	r3, #119	@ 0x77
 80126d6:	d812      	bhi.n	80126fe <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80126d8:	0053      	lsls	r3, r2, #1
 80126da:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80126dc:	4563      	cmp	r3, ip
 80126de:	d001      	beq.n	80126e4 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126e0:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80126e2:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80126e4:	2301      	movs	r3, #1
 80126e6:	3006      	adds	r0, #6
 80126e8:	f7ff fae3 	bl	8011cb2 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80126ec:	b910      	cbnz	r0, 80126f4 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80126ee:	2305      	movs	r3, #5
 80126f0:	8023      	strh	r3, [r4, #0]
 80126f2:	e7f6      	b.n	80126e2 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80126f4:	f000 f914 	bl	8012920 <prveMBError2Exception>
 80126f8:	e7f3      	b.n	80126e2 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126fa:	2003      	movs	r0, #3
}
 80126fc:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126fe:	2003      	movs	r0, #3
 8012700:	e7ef      	b.n	80126e2 <eMBFuncWriteMultipleHoldingRegister+0x34>

08012702 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012702:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012704:	880b      	ldrh	r3, [r1, #0]
 8012706:	2b05      	cmp	r3, #5
 8012708:	d001      	beq.n	801270e <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801270a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	4602      	mov	r2, r0
 8012710:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012712:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012714:	7881      	ldrb	r1, [r0, #2]
 8012716:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 801271a:	3101      	adds	r1, #1
 801271c:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 801271e:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012720:	1e6b      	subs	r3, r5, #1
 8012722:	b29b      	uxth	r3, r3
 8012724:	2b7c      	cmp	r3, #124	@ 0x7c
 8012726:	d901      	bls.n	801272c <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012728:	2003      	movs	r0, #3
 801272a:	e7ef      	b.n	801270c <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 801272c:	2300      	movs	r3, #0
 801272e:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012730:	f04f 0c03 	mov.w	ip, #3
 8012734:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012738:	f8b4 c000 	ldrh.w	ip, [r4]
 801273c:	f10c 0c01 	add.w	ip, ip, #1
 8012740:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012744:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012748:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 801274c:	8822      	ldrh	r2, [r4, #0]
 801274e:	3201      	adds	r2, #1
 8012750:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012752:	462a      	mov	r2, r5
 8012754:	f7ff faad 	bl	8011cb2 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012758:	b920      	cbnz	r0, 8012764 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 801275a:	8823      	ldrh	r3, [r4, #0]
 801275c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012760:	8023      	strh	r3, [r4, #0]
 8012762:	e7d3      	b.n	801270c <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012764:	f000 f8dc 	bl	8012920 <prveMBError2Exception>
 8012768:	e7d0      	b.n	801270c <eMBFuncReadHoldingRegister+0xa>

0801276a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801276c:	880b      	ldrh	r3, [r1, #0]
 801276e:	2b09      	cmp	r3, #9
 8012770:	d943      	bls.n	80127fa <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012772:	4604      	mov	r4, r0
 8012774:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012776:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012778:	7881      	ldrb	r1, [r0, #2]
 801277a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 801277e:	3101      	adds	r1, #1
 8012780:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012782:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012784:	7907      	ldrb	r7, [r0, #4]
 8012786:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 801278a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 801278c:	7981      	ldrb	r1, [r0, #6]
 801278e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012792:	3101      	adds	r1, #1
 8012794:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012796:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012798:	7a02      	ldrb	r2, [r0, #8]
 801279a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801279e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80127a0:	1e7b      	subs	r3, r7, #1
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	2b7c      	cmp	r3, #124	@ 0x7c
 80127a6:	d82a      	bhi.n	80127fe <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 80127a8:	b35a      	cbz	r2, 8012802 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80127aa:	2a79      	cmp	r2, #121	@ 0x79
 80127ac:	d82b      	bhi.n	8012806 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 80127ae:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 80127b2:	d001      	beq.n	80127b8 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127b4:	2003      	movs	r0, #3
 80127b6:	e021      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80127b8:	2301      	movs	r3, #1
 80127ba:	f104 000a 	add.w	r0, r4, #10
 80127be:	f7ff fa78 	bl	8011cb2 <eMBRegHoldingCB>
 80127c2:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 80127c4:	b9b0      	cbnz	r0, 80127f4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 80127c6:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80127c8:	4620      	mov	r0, r4
 80127ca:	2217      	movs	r2, #23
 80127cc:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 80127d0:	882a      	ldrh	r2, [r5, #0]
 80127d2:	3201      	adds	r2, #1
 80127d4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80127d6:	007a      	lsls	r2, r7, #1
 80127d8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 80127da:	882a      	ldrh	r2, [r5, #0]
 80127dc:	3201      	adds	r2, #1
 80127de:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80127e0:	463a      	mov	r2, r7
 80127e2:	4631      	mov	r1, r6
 80127e4:	f7ff fa65 	bl	8011cb2 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 80127e8:	b920      	cbnz	r0, 80127f4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 80127ea:	882b      	ldrh	r3, [r5, #0]
 80127ec:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80127f0:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 80127f2:	e003      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 80127f4:	f000 f894 	bl	8012920 <prveMBError2Exception>
 80127f8:	e000      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 80127fa:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80127fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127fe:	2003      	movs	r0, #3
 8012800:	e7fc      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012802:	2003      	movs	r0, #3
 8012804:	e7fa      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012806:	2003      	movs	r0, #3
 8012808:	e7f8      	b.n	80127fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>

0801280a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801280a:	880a      	ldrh	r2, [r1, #0]
 801280c:	2a05      	cmp	r2, #5
 801280e:	d001      	beq.n	8012814 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012810:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012812:	4770      	bx	lr
{
 8012814:	b538      	push	{r3, r4, r5, lr}
 8012816:	4603      	mov	r3, r0
 8012818:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801281a:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801281c:	7881      	ldrb	r1, [r0, #2]
 801281e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012822:	3101      	adds	r1, #1
 8012824:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012826:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012828:	7905      	ldrb	r5, [r0, #4]
 801282a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801282e:	1e6a      	subs	r2, r5, #1
 8012830:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012832:	2a7b      	cmp	r2, #123	@ 0x7b
 8012834:	d901      	bls.n	801283a <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012836:	2003      	movs	r0, #3
}
 8012838:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 801283a:	2200      	movs	r2, #0
 801283c:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801283e:	2204      	movs	r2, #4
 8012840:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012844:	8822      	ldrh	r2, [r4, #0]
 8012846:	3201      	adds	r2, #1
 8012848:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 801284a:	006a      	lsls	r2, r5, #1
 801284c:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 801284e:	8823      	ldrh	r3, [r4, #0]
 8012850:	3301      	adds	r3, #1
 8012852:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012854:	462a      	mov	r2, r5
 8012856:	f7ff fa2a 	bl	8011cae <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 801285a:	b920      	cbnz	r0, 8012866 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 801285c:	8823      	ldrh	r3, [r4, #0]
 801285e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012862:	8023      	strh	r3, [r4, #0]
 8012864:	e7e8      	b.n	8012838 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012866:	f000 f85b 	bl	8012920 <prveMBError2Exception>
 801286a:	e7e5      	b.n	8012838 <eMBFuncReadInputRegister+0x2e>

0801286c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012870:	4b05      	ldr	r3, [pc, #20]	@ (8012888 <eMBFuncReportSlaveID+0x1c>)
 8012872:	881c      	ldrh	r4, [r3, #0]
 8012874:	4622      	mov	r2, r4
 8012876:	4905      	ldr	r1, [pc, #20]	@ (801288c <eMBFuncReportSlaveID+0x20>)
 8012878:	3001      	adds	r0, #1
 801287a:	f01b faed 	bl	802de58 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801287e:	3401      	adds	r4, #1
 8012880:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012882:	2000      	movs	r0, #0
 8012884:	bd38      	pop	{r3, r4, r5, pc}
 8012886:	bf00      	nop
 8012888:	20000a2c 	.word	0x20000a2c
 801288c:	20000a30 	.word	0x20000a30

08012890 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012890:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012892:	2a08      	cmp	r2, #8
 8012894:	d823      	bhi.n	80128de <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012896:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 801289a:	f001 0407 	and.w	r4, r1, #7
 801289e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80128a2:	f04f 0c01 	mov.w	ip, #1
 80128a6:	fa0c f202 	lsl.w	r2, ip, r2
 80128aa:	b292      	uxth	r2, r2
 80128ac:	3a01      	subs	r2, #1
 80128ae:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 80128b0:	f001 0107 	and.w	r1, r1, #7
 80128b4:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80128b8:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80128bc:	eb0e 020c 	add.w	r2, lr, ip
 80128c0:	f810 c002 	ldrb.w	ip, [r0, r2]
 80128c4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80128c8:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80128ca:	ea23 0301 	bic.w	r3, r3, r1
 80128ce:	b21b      	sxth	r3, r3
 80128d0:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80128d2:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80128d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128da:	5483      	strb	r3, [r0, r2]
}
 80128dc:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 80128de:	4b03      	ldr	r3, [pc, #12]	@ (80128ec <xMBUtilSetBits+0x5c>)
 80128e0:	4a03      	ldr	r2, [pc, #12]	@ (80128f0 <xMBUtilSetBits+0x60>)
 80128e2:	2137      	movs	r1, #55	@ 0x37
 80128e4:	4803      	ldr	r0, [pc, #12]	@ (80128f4 <xMBUtilSetBits+0x64>)
 80128e6:	f017 fb29 	bl	8029f3c <__assert_func>
 80128ea:	bf00      	nop
 80128ec:	08036488 	.word	0x08036488
 80128f0:	080364e0 	.word	0x080364e0
 80128f4:	08036498 	.word	0x08036498

080128f8 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80128f8:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80128fc:	2301      	movs	r3, #1
 80128fe:	4093      	lsls	r3, r2
 8012900:	b29b      	uxth	r3, r3
 8012902:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012904:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012908:	4460      	add	r0, ip
 801290a:	7840      	ldrb	r0, [r0, #1]
 801290c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012910:	f001 0107 	and.w	r1, r1, #7
 8012914:	410a      	asrs	r2, r1
 8012916:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012918:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 801291c:	b2c0      	uxtb	r0, r0
 801291e:	4770      	bx	lr

08012920 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012920:	2801      	cmp	r0, #1
 8012922:	d005      	beq.n	8012930 <prveMBError2Exception+0x10>
 8012924:	2807      	cmp	r0, #7
 8012926:	d005      	beq.n	8012934 <prveMBError2Exception+0x14>
 8012928:	b108      	cbz	r0, 801292e <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 801292a:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 801292c:	4770      	bx	lr
 801292e:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012930:	2002      	movs	r0, #2
 8012932:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012934:	2006      	movs	r0, #6
 8012936:	4770      	bx	lr

08012938 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012938:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 801293a:	f000 f9ce 	bl	8012cda <eMBTCPDoInit>
 801293e:	4604      	mov	r4, r0
 8012940:	b120      	cbz	r0, 801294c <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012942:	4b11      	ldr	r3, [pc, #68]	@ (8012988 <eMBTCPInit+0x50>)
 8012944:	2201      	movs	r2, #1
 8012946:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012948:	4620      	mov	r0, r4
 801294a:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 801294c:	f000 f8ca 	bl	8012ae4 <xMBPortEventInit>
 8012950:	b1c0      	cbz	r0, 8012984 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012952:	4b0e      	ldr	r3, [pc, #56]	@ (801298c <eMBTCPInit+0x54>)
 8012954:	4a0e      	ldr	r2, [pc, #56]	@ (8012990 <eMBTCPInit+0x58>)
 8012956:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012958:	4b0e      	ldr	r3, [pc, #56]	@ (8012994 <eMBTCPInit+0x5c>)
 801295a:	4a0f      	ldr	r2, [pc, #60]	@ (8012998 <eMBTCPInit+0x60>)
 801295c:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 801295e:	4b0f      	ldr	r3, [pc, #60]	@ (801299c <eMBTCPInit+0x64>)
 8012960:	4a0f      	ldr	r2, [pc, #60]	@ (80129a0 <eMBTCPInit+0x68>)
 8012962:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012964:	4b0f      	ldr	r3, [pc, #60]	@ (80129a4 <eMBTCPInit+0x6c>)
 8012966:	4a10      	ldr	r2, [pc, #64]	@ (80129a8 <eMBTCPInit+0x70>)
 8012968:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 801296a:	4b10      	ldr	r3, [pc, #64]	@ (80129ac <eMBTCPInit+0x74>)
 801296c:	2200      	movs	r2, #0
 801296e:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012970:	4b0f      	ldr	r3, [pc, #60]	@ (80129b0 <eMBTCPInit+0x78>)
 8012972:	22ff      	movs	r2, #255	@ 0xff
 8012974:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012976:	4b0f      	ldr	r3, [pc, #60]	@ (80129b4 <eMBTCPInit+0x7c>)
 8012978:	2202      	movs	r2, #2
 801297a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 801297c:	4b02      	ldr	r3, [pc, #8]	@ (8012988 <eMBTCPInit+0x50>)
 801297e:	2201      	movs	r2, #1
 8012980:	701a      	strb	r2, [r3, #0]
 8012982:	e7e1      	b.n	8012948 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012984:	2403      	movs	r4, #3
 8012986:	e7df      	b.n	8012948 <eMBTCPInit+0x10>
 8012988:	2000009c 	.word	0x2000009c
 801298c:	20000a68 	.word	0x20000a68
 8012990:	08012ceb 	.word	0x08012ceb
 8012994:	20000a64 	.word	0x20000a64
 8012998:	08012ced 	.word	0x08012ced
 801299c:	20000a60 	.word	0x20000a60
 80129a0:	08012cf5 	.word	0x08012cf5
 80129a4:	20000a6c 	.word	0x20000a6c
 80129a8:	08012d35 	.word	0x08012d35
 80129ac:	20000a5c 	.word	0x20000a5c
 80129b0:	20000a71 	.word	0x20000a71
 80129b4:	20000a70 	.word	0x20000a70

080129b8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80129b8:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80129ba:	4b06      	ldr	r3, [pc, #24]	@ (80129d4 <eMBEnable+0x1c>)
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d001      	beq.n	80129c6 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80129c2:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80129c4:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 80129c6:	4b04      	ldr	r3, [pc, #16]	@ (80129d8 <eMBEnable+0x20>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80129cc:	2000      	movs	r0, #0
 80129ce:	4b01      	ldr	r3, [pc, #4]	@ (80129d4 <eMBEnable+0x1c>)
 80129d0:	7018      	strb	r0, [r3, #0]
 80129d2:	e7f7      	b.n	80129c4 <eMBEnable+0xc>
 80129d4:	2000009c 	.word	0x2000009c
 80129d8:	20000a68 	.word	0x20000a68

080129dc <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80129dc:	b530      	push	{r4, r5, lr}
 80129de:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80129e0:	4b36      	ldr	r3, [pc, #216]	@ (8012abc <eMBPoll+0xe0>)
 80129e2:	781c      	ldrb	r4, [r3, #0]
 80129e4:	2c00      	cmp	r4, #0
 80129e6:	d163      	bne.n	8012ab0 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80129e8:	f10d 0007 	add.w	r0, sp, #7
 80129ec:	f000 f88e 	bl	8012b0c <xMBPortEventGet>
 80129f0:	2801      	cmp	r0, #1
 80129f2:	d002      	beq.n	80129fa <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80129f4:	4620      	mov	r0, r4
 80129f6:	b003      	add	sp, #12
 80129f8:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 80129fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d014      	beq.n	8012a2c <eMBPoll+0x50>
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	d1f6      	bne.n	80129f4 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012a06:	4b2e      	ldr	r3, [pc, #184]	@ (8012ac0 <eMBPoll+0xe4>)
 8012a08:	6818      	ldr	r0, [r3, #0]
 8012a0a:	7801      	ldrb	r1, [r0, #0]
 8012a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8012ac4 <eMBPoll+0xe8>)
 8012a0e:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8012a10:	4b2d      	ldr	r3, [pc, #180]	@ (8012ac8 <eMBPoll+0xec>)
 8012a12:	2201      	movs	r2, #1
 8012a14:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012a16:	2300      	movs	r3, #0
 8012a18:	2b0f      	cmp	r3, #15
 8012a1a:	dc25      	bgt.n	8012a68 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8012acc <eMBPoll+0xf0>)
 8012a1e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012a22:	b30a      	cbz	r2, 8012a68 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012a24:	4291      	cmp	r1, r2
 8012a26:	d017      	beq.n	8012a58 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012a28:	3301      	adds	r3, #1
 8012a2a:	e7f5      	b.n	8012a18 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012a2c:	4b28      	ldr	r3, [pc, #160]	@ (8012ad0 <eMBPoll+0xf4>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a28      	ldr	r2, [pc, #160]	@ (8012ad4 <eMBPoll+0xf8>)
 8012a32:	4923      	ldr	r1, [pc, #140]	@ (8012ac0 <eMBPoll+0xe4>)
 8012a34:	4828      	ldr	r0, [pc, #160]	@ (8012ad8 <eMBPoll+0xfc>)
 8012a36:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012a38:	4605      	mov	r5, r0
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	d1da      	bne.n	80129f4 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012a3e:	4b26      	ldr	r3, [pc, #152]	@ (8012ad8 <eMBPoll+0xfc>)
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	4a26      	ldr	r2, [pc, #152]	@ (8012adc <eMBPoll+0x100>)
 8012a44:	7812      	ldrb	r2, [r2, #0]
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d001      	beq.n	8012a4e <eMBPoll+0x72>
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d132      	bne.n	8012ab4 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012a4e:	2002      	movs	r0, #2
 8012a50:	f000 f850 	bl	8012af4 <xMBPortEventPost>
    return MB_ENOERR;
 8012a54:	462c      	mov	r4, r5
 8012a56:	e7cd      	b.n	80129f4 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012a58:	4a1c      	ldr	r2, [pc, #112]	@ (8012acc <eMBPoll+0xf0>)
 8012a5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	491c      	ldr	r1, [pc, #112]	@ (8012ad4 <eMBPoll+0xf8>)
 8012a62:	4798      	blx	r3
 8012a64:	4b18      	ldr	r3, [pc, #96]	@ (8012ac8 <eMBPoll+0xec>)
 8012a66:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012a68:	4b1b      	ldr	r3, [pc, #108]	@ (8012ad8 <eMBPoll+0xfc>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	b323      	cbz	r3, 8012ab8 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012a6e:	4b16      	ldr	r3, [pc, #88]	@ (8012ac8 <eMBPoll+0xec>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	b19b      	cbz	r3, 8012a9c <eMBPoll+0xc0>
                    usLength = 0;
 8012a74:	4a17      	ldr	r2, [pc, #92]	@ (8012ad4 <eMBPoll+0xf8>)
 8012a76:	2100      	movs	r1, #0
 8012a78:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012a7a:	4912      	ldr	r1, [pc, #72]	@ (8012ac4 <eMBPoll+0xe8>)
 8012a7c:	7809      	ldrb	r1, [r1, #0]
 8012a7e:	4810      	ldr	r0, [pc, #64]	@ (8012ac0 <eMBPoll+0xe4>)
 8012a80:	6805      	ldr	r5, [r0, #0]
 8012a82:	f04f 0c01 	mov.w	ip, #1
 8012a86:	f8a2 c000 	strh.w	ip, [r2]
 8012a8a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012a8e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012a90:	6800      	ldr	r0, [r0, #0]
 8012a92:	8811      	ldrh	r1, [r2, #0]
 8012a94:	eb01 050c 	add.w	r5, r1, ip
 8012a98:	8015      	strh	r5, [r2, #0]
 8012a9a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012a9c:	4b10      	ldr	r3, [pc, #64]	@ (8012ae0 <eMBPoll+0x104>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8012ad4 <eMBPoll+0xf8>)
 8012aa2:	8812      	ldrh	r2, [r2, #0]
 8012aa4:	4906      	ldr	r1, [pc, #24]	@ (8012ac0 <eMBPoll+0xe4>)
 8012aa6:	6809      	ldr	r1, [r1, #0]
 8012aa8:	480c      	ldr	r0, [pc, #48]	@ (8012adc <eMBPoll+0x100>)
 8012aaa:	7800      	ldrb	r0, [r0, #0]
 8012aac:	4798      	blx	r3
 8012aae:	e7a1      	b.n	80129f4 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012ab0:	2406      	movs	r4, #6
 8012ab2:	e79f      	b.n	80129f4 <eMBPoll+0x18>
    return MB_ENOERR;
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	e79d      	b.n	80129f4 <eMBPoll+0x18>
 8012ab8:	461c      	mov	r4, r3
 8012aba:	e79b      	b.n	80129f4 <eMBPoll+0x18>
 8012abc:	2000009c 	.word	0x2000009c
 8012ac0:	20000a54 	.word	0x20000a54
 8012ac4:	20000a51 	.word	0x20000a51
 8012ac8:	20000a50 	.word	0x20000a50
 8012acc:	2000001c 	.word	0x2000001c
 8012ad0:	20000a60 	.word	0x20000a60
 8012ad4:	20000a52 	.word	0x20000a52
 8012ad8:	20000a58 	.word	0x20000a58
 8012adc:	20000a71 	.word	0x20000a71
 8012ae0:	20000a6c 	.word	0x20000a6c

08012ae4 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012ae4:	4b02      	ldr	r3, [pc, #8]	@ (8012af0 <xMBPortEventInit+0xc>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012aea:	2001      	movs	r0, #1
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	20000a72 	.word	0x20000a72

08012af4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012af4:	2301      	movs	r3, #1
 8012af6:	4a03      	ldr	r2, [pc, #12]	@ (8012b04 <xMBPortEventPost+0x10>)
 8012af8:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012afa:	4a03      	ldr	r2, [pc, #12]	@ (8012b08 <xMBPortEventPost+0x14>)
 8012afc:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	4770      	bx	lr
 8012b02:	bf00      	nop
 8012b04:	20000a72 	.word	0x20000a72
 8012b08:	20000a73 	.word	0x20000a73

08012b0c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012b0c:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012b0e:	4a05      	ldr	r2, [pc, #20]	@ (8012b24 <xMBPortEventGet+0x18>)
 8012b10:	7810      	ldrb	r0, [r2, #0]
 8012b12:	b130      	cbz	r0, 8012b22 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012b14:	4a04      	ldr	r2, [pc, #16]	@ (8012b28 <xMBPortEventGet+0x1c>)
 8012b16:	7812      	ldrb	r2, [r2, #0]
 8012b18:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012b1a:	4b02      	ldr	r3, [pc, #8]	@ (8012b24 <xMBPortEventGet+0x18>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012b20:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012b22:	4770      	bx	lr
 8012b24:	20000a72 	.word	0x20000a72
 8012b28:	20000a73 	.word	0x20000a73

08012b2c <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012b2c:	2907      	cmp	r1, #7
 8012b2e:	d000      	beq.n	8012b32 <handler_mb_tcp+0x6>
 8012b30:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012b32:	b538      	push	{r3, r4, r5, lr}
 8012b34:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012b36:	4b1e      	ldr	r3, [pc, #120]	@ (8012bb0 <handler_mb_tcp+0x84>)
 8012b38:	f100 021c 	add.w	r2, r0, #28
 8012b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b40:	f013 faec 	bl	802611c <mg_check_ip_acl>
 8012b44:	2801      	cmp	r0, #1
 8012b46:	d006      	beq.n	8012b56 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012b48:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b4c:	f043 0320 	orr.w	r3, r3, #32
 8012b50:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012b54:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012b56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012b58:	b293      	uxth	r3, r2
 8012b5a:	4916      	ldr	r1, [pc, #88]	@ (8012bb4 <handler_mb_tcp+0x88>)
 8012b5c:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012b5e:	b933      	cbnz	r3, 8012b6e <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012b60:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b64:	f043 0320 	orr.w	r3, r3, #32
 8012b68:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b6c:	e7f2      	b.n	8012b54 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012b6e:	461a      	mov	r2, r3
 8012b70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012b72:	4811      	ldr	r0, [pc, #68]	@ (8012bb8 <handler_mb_tcp+0x8c>)
 8012b74:	f01b f970 	bl	802de58 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012b78:	2001      	movs	r0, #1
 8012b7a:	f7ff ffbb 	bl	8012af4 <xMBPortEventPost>
			eMBPoll ();
 8012b7e:	f7ff ff2d 	bl	80129dc <eMBPoll>
			eMBPoll ();
 8012b82:	f7ff ff2b 	bl	80129dc <eMBPoll>
			if(bFrameSent){
 8012b86:	4b0d      	ldr	r3, [pc, #52]	@ (8012bbc <handler_mb_tcp+0x90>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	b933      	cbnz	r3, 8012b9a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012b8c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b90:	f043 0320 	orr.w	r3, r3, #32
 8012b94:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b98:	e7dc      	b.n	8012b54 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012b9a:	2500      	movs	r5, #0
 8012b9c:	4b07      	ldr	r3, [pc, #28]	@ (8012bbc <handler_mb_tcp+0x90>)
 8012b9e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012ba0:	4b07      	ldr	r3, [pc, #28]	@ (8012bc0 <handler_mb_tcp+0x94>)
 8012ba2:	881a      	ldrh	r2, [r3, #0]
 8012ba4:	4907      	ldr	r1, [pc, #28]	@ (8012bc4 <handler_mb_tcp+0x98>)
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f014 fbd2 	bl	8027350 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012bac:	6425      	str	r5, [r4, #64]	@ 0x40
 8012bae:	e7d1      	b.n	8012b54 <handler_mb_tcp+0x28>
 8012bb0:	20000a74 	.word	0x20000a74
 8012bb4:	20001280 	.word	0x20001280
 8012bb8:	20001284 	.word	0x20001284
 8012bbc:	20000a7c 	.word	0x20000a7c
 8012bc0:	20000a7e 	.word	0x20000a7e
 8012bc4:	20000a80 	.word	0x20000a80

08012bc8 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012bc8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012bca:	fb01 f400 	mul.w	r4, r1, r0
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f007 fed2 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012bd4:	4605      	mov	r5, r0
 8012bd6:	b118      	cbz	r0, 8012be0 <my_calloc+0x18>
 8012bd8:	4622      	mov	r2, r4
 8012bda:	2100      	movs	r1, #0
 8012bdc:	f019 ff00 	bl	802c9e0 <memset>
  return p;
}
 8012be0:	4628      	mov	r0, r5
 8012be2:	bd38      	pop	{r3, r4, r5, pc}

08012be4 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012be4:	b530      	push	{r4, r5, lr}
 8012be6:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012be8:	2300      	movs	r3, #0
 8012bea:	4a24      	ldr	r2, [pc, #144]	@ (8012c7c <init_mb_tcp+0x98>)
 8012bec:	4924      	ldr	r1, [pc, #144]	@ (8012c80 <init_mb_tcp+0x9c>)
 8012bee:	f014 fac3 	bl	8027178 <mg_listen>

	eMBTCPInit(0);
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	f7ff fea0 	bl	8012938 <eMBTCPInit>
	eMBEnable();
 8012bf8:	f7ff fede 	bl	80129b8 <eMBEnable>

	size_t acl_size = 0;
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012c00:	a901      	add	r1, sp, #4
 8012c02:	4820      	ldr	r0, [pc, #128]	@ (8012c84 <init_mb_tcp+0xa0>)
 8012c04:	f008 f820 	bl	801ac48 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012c08:	9801      	ldr	r0, [sp, #4]
 8012c0a:	1e42      	subs	r2, r0, #1
 8012c0c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d815      	bhi.n	8012c40 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012c14:	2101      	movs	r1, #1
 8012c16:	4408      	add	r0, r1
 8012c18:	f7ff ffd6 	bl	8012bc8 <my_calloc>
 8012c1c:	4d1a      	ldr	r5, [pc, #104]	@ (8012c88 <init_mb_tcp+0xa4>)
 8012c1e:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012c20:	2101      	movs	r1, #1
 8012c22:	4818      	ldr	r0, [pc, #96]	@ (8012c84 <init_mb_tcp+0xa0>)
 8012c24:	f008 f84e 	bl	801acc4 <mg_fs_lfs_open>
 8012c28:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012c2a:	9a01      	ldr	r2, [sp, #4]
 8012c2c:	6829      	ldr	r1, [r5, #0]
 8012c2e:	f008 f879 	bl	801ad24 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012c36:	4620      	mov	r0, r4
 8012c38:	f008 f868 	bl	801ad0c <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012c3c:	b003      	add	sp, #12
 8012c3e:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012c40:	2101      	movs	r1, #1
 8012c42:	200b      	movs	r0, #11
 8012c44:	f7ff ffc0 	bl	8012bc8 <my_calloc>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	4c0f      	ldr	r4, [pc, #60]	@ (8012c88 <init_mb_tcp+0xa4>)
 8012c4c:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012c4e:	220b      	movs	r2, #11
 8012c50:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012c52:	4a0e      	ldr	r2, [pc, #56]	@ (8012c8c <init_mb_tcp+0xa8>)
 8012c54:	ca03      	ldmia	r2!, {r0, r1}
 8012c56:	6018      	str	r0, [r3, #0]
 8012c58:	6059      	str	r1, [r3, #4]
 8012c5a:	8811      	ldrh	r1, [r2, #0]
 8012c5c:	7892      	ldrb	r2, [r2, #2]
 8012c5e:	8119      	strh	r1, [r3, #8]
 8012c60:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012c62:	2102      	movs	r1, #2
 8012c64:	4807      	ldr	r0, [pc, #28]	@ (8012c84 <init_mb_tcp+0xa0>)
 8012c66:	f008 f82d 	bl	801acc4 <mg_fs_lfs_open>
 8012c6a:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012c6c:	6862      	ldr	r2, [r4, #4]
 8012c6e:	6821      	ldr	r1, [r4, #0]
 8012c70:	f008 f864 	bl	801ad3c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012c74:	4628      	mov	r0, r5
 8012c76:	f008 f849 	bl	801ad0c <mg_fs_lfs_close>
}
 8012c7a:	e7df      	b.n	8012c3c <init_mb_tcp+0x58>
 8012c7c:	08012b2d 	.word	0x08012b2d
 8012c80:	080364f0 	.word	0x080364f0
 8012c84:	08036504 	.word	0x08036504
 8012c88:	20000a74 	.word	0x20000a74
 8012c8c:	08036518 	.word	0x08036518

08012c90 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012c90:	2001      	movs	r0, #1
 8012c92:	4770      	bx	lr

08012c94 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012c94:	4b04      	ldr	r3, [pc, #16]	@ (8012ca8 <xMBTCPPortGetRequest+0x14>)
 8012c96:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012c98:	4b04      	ldr	r3, [pc, #16]	@ (8012cac <xMBTCPPortGetRequest+0x18>)
 8012c9a:	881a      	ldrh	r2, [r3, #0]
 8012c9c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012ca2:	2001      	movs	r0, #1
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop
 8012ca8:	20001284 	.word	0x20001284
 8012cac:	20001280 	.word	0x20001280

08012cb0 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012cb4:	460a      	mov	r2, r1
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	4804      	ldr	r0, [pc, #16]	@ (8012ccc <xMBTCPPortSendResponse+0x1c>)
 8012cba:	f01b f8cd 	bl	802de58 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012cbe:	4b04      	ldr	r3, [pc, #16]	@ (8012cd0 <xMBTCPPortSendResponse+0x20>)
 8012cc0:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012cc2:	2001      	movs	r0, #1
 8012cc4:	4b03      	ldr	r3, [pc, #12]	@ (8012cd4 <xMBTCPPortSendResponse+0x24>)
 8012cc6:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	bf00      	nop
 8012ccc:	20000a80 	.word	0x20000a80
 8012cd0:	20000a7e 	.word	0x20000a7e
 8012cd4:	20000a7c 	.word	0x20000a7c

08012cd8 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012cd8:	4770      	bx	lr

08012cda <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012cda:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012cdc:	f7ff ffd8 	bl	8012c90 <xMBTCPPortInit>
 8012ce0:	b108      	cbz	r0, 8012ce6 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012ce2:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012ce4:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012ce6:	2003      	movs	r0, #3
 8012ce8:	e7fc      	b.n	8012ce4 <eMBTCPDoInit+0xa>

08012cea <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012cea:	4770      	bx	lr

08012cec <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012cec:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012cee:	f7ff fff3 	bl	8012cd8 <vMBTCPPortDisable>
}
 8012cf2:	bd08      	pop	{r3, pc}

08012cf4 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	460d      	mov	r5, r1
 8012cfc:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012cfe:	f10d 0102 	add.w	r1, sp, #2
 8012d02:	a801      	add	r0, sp, #4
 8012d04:	f7ff ffc6 	bl	8012c94 <xMBTCPPortGetRequest>
 8012d08:	b180      	cbz	r0, 8012d2c <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012d0a:	9b01      	ldr	r3, [sp, #4]
 8012d0c:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012d0e:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012d10:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012d14:	d10c      	bne.n	8012d30 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012d16:	3307      	adds	r3, #7
 8012d18:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012d1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012d1e:	3b07      	subs	r3, #7
 8012d20:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012d22:	23ff      	movs	r3, #255	@ 0xff
 8012d24:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012d26:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012d28:	b002      	add	sp, #8
 8012d2a:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012d2c:	2005      	movs	r0, #5
 8012d2e:	e7fb      	b.n	8012d28 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012d30:	2005      	movs	r0, #5
 8012d32:	e7f9      	b.n	8012d28 <eMBTCPReceive+0x34>

08012d34 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012d34:	b508      	push	{r3, lr}
 8012d36:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012d38:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012d3a:	1c53      	adds	r3, r2, #1
 8012d3c:	121b      	asrs	r3, r3, #8
 8012d3e:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012d42:	3201      	adds	r2, #1
 8012d44:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012d48:	b289      	uxth	r1, r1
 8012d4a:	3807      	subs	r0, #7
 8012d4c:	f7ff ffb0 	bl	8012cb0 <xMBTCPPortSendResponse>
 8012d50:	b108      	cbz	r0, 8012d56 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012d52:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012d54:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012d56:	2005      	movs	r0, #5
 8012d58:	e7fc      	b.n	8012d54 <eMBTCPSend+0x20>
	...

08012d5c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012d5c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012d5e:	4b03      	ldr	r3, [pc, #12]	@ (8012d6c <handle_OPTIONS_method+0x10>)
 8012d60:	4a03      	ldr	r2, [pc, #12]	@ (8012d70 <handle_OPTIONS_method+0x14>)
 8012d62:	21c8      	movs	r1, #200	@ 0xc8
 8012d64:	f011 f942 	bl	8023fec <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012d68:	bd08      	pop	{r3, pc}
 8012d6a:	bf00      	nop
 8012d6c:	0803ae3c 	.word	0x0803ae3c
 8012d70:	08036524 	.word	0x08036524

08012d74 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	4605      	mov	r5, r0
 8012d7a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012d7c:	ae02      	add	r6, sp, #8
 8012d7e:	4910      	ldr	r1, [pc, #64]	@ (8012dc0 <handler_dev_version+0x4c>)
 8012d80:	4630      	mov	r0, r6
 8012d82:	f011 fabd 	bl	8024300 <mg_str_s>
 8012d86:	2300      	movs	r3, #0
 8012d88:	9300      	str	r3, [sp, #0]
 8012d8a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d92:	f011 fcd7 	bl	8024744 <mg_match>
 8012d96:	b158      	cbz	r0, 8012db0 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8012d98:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc4 <handler_dev_version+0x50>)
 8012d9a:	9301      	str	r3, [sp, #4]
 8012d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc8 <handler_dev_version+0x54>)
 8012d9e:	9300      	str	r3, [sp, #0]
 8012da0:	4b0a      	ldr	r3, [pc, #40]	@ (8012dcc <handler_dev_version+0x58>)
 8012da2:	4a0b      	ldr	r2, [pc, #44]	@ (8012dd0 <handler_dev_version+0x5c>)
 8012da4:	21c8      	movs	r1, #200	@ 0xc8
 8012da6:	4628      	mov	r0, r5
 8012da8:	f011 f920 	bl	8023fec <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012dac:	b004      	add	sp, #16
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012db0:	4b08      	ldr	r3, [pc, #32]	@ (8012dd4 <handler_dev_version+0x60>)
 8012db2:	4a07      	ldr	r2, [pc, #28]	@ (8012dd0 <handler_dev_version+0x5c>)
 8012db4:	f240 1195 	movw	r1, #405	@ 0x195
 8012db8:	4628      	mov	r0, r5
 8012dba:	f011 f917 	bl	8023fec <mg_http_reply>
		return;
 8012dbe:	e7f5      	b.n	8012dac <handler_dev_version+0x38>
 8012dc0:	080365c4 	.word	0x080365c4
 8012dc4:	08036670 	.word	0x08036670
 8012dc8:	08036674 	.word	0x08036674
 8012dcc:	080365c8 	.word	0x080365c8
 8012dd0:	08036600 	.word	0x08036600
 8012dd4:	08036678 	.word	0x08036678

08012dd8 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 8012dd8:	b570      	push	{r4, r5, r6, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	4605      	mov	r5, r0
 8012dde:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012de0:	ae06      	add	r6, sp, #24
 8012de2:	4913      	ldr	r1, [pc, #76]	@ (8012e30 <handler_dev_info+0x58>)
 8012de4:	4630      	mov	r0, r6
 8012de6:	f011 fa8b 	bl	8024300 <mg_str_s>
 8012dea:	2300      	movs	r3, #0
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012df6:	f011 fca5 	bl	8024744 <mg_match>
 8012dfa:	b188      	cbz	r0, 8012e20 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 8012dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8012e34 <handler_dev_info+0x5c>)
 8012dfe:	9304      	str	r3, [sp, #16]
 8012e00:	4b0d      	ldr	r3, [pc, #52]	@ (8012e38 <handler_dev_info+0x60>)
 8012e02:	9303      	str	r3, [sp, #12]
 8012e04:	4b0d      	ldr	r3, [pc, #52]	@ (8012e3c <handler_dev_info+0x64>)
 8012e06:	9302      	str	r3, [sp, #8]
 8012e08:	4b0d      	ldr	r3, [pc, #52]	@ (8012e40 <handler_dev_info+0x68>)
 8012e0a:	9301      	str	r3, [sp, #4]
 8012e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8012e44 <handler_dev_info+0x6c>)
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	4b0d      	ldr	r3, [pc, #52]	@ (8012e48 <handler_dev_info+0x70>)
 8012e12:	4a0e      	ldr	r2, [pc, #56]	@ (8012e4c <handler_dev_info+0x74>)
 8012e14:	21c8      	movs	r1, #200	@ 0xc8
 8012e16:	4628      	mov	r0, r5
 8012e18:	f011 f8e8 	bl	8023fec <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012e1c:	b008      	add	sp, #32
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012e20:	4b0b      	ldr	r3, [pc, #44]	@ (8012e50 <handler_dev_info+0x78>)
 8012e22:	4a0a      	ldr	r2, [pc, #40]	@ (8012e4c <handler_dev_info+0x74>)
 8012e24:	f240 1195 	movw	r1, #405	@ 0x195
 8012e28:	4628      	mov	r0, r5
 8012e2a:	f011 f8df 	bl	8023fec <mg_http_reply>
		return;
 8012e2e:	e7f5      	b.n	8012e1c <handler_dev_info+0x44>
 8012e30:	080365c4 	.word	0x080365c4
 8012e34:	08036734 	.word	0x08036734
 8012e38:	08036748 	.word	0x08036748
 8012e3c:	08036754 	.word	0x08036754
 8012e40:	08036670 	.word	0x08036670
 8012e44:	08036674 	.word	0x08036674
 8012e48:	080366c8 	.word	0x080366c8
 8012e4c:	08036600 	.word	0x08036600
 8012e50:	08036678 	.word	0x08036678

08012e54 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012e54:	b570      	push	{r4, r5, r6, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	4605      	mov	r5, r0
 8012e5a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012e5c:	ae02      	add	r6, sp, #8
 8012e5e:	4914      	ldr	r1, [pc, #80]	@ (8012eb0 <handle_firmware_deactivate+0x5c>)
 8012e60:	4630      	mov	r0, r6
 8012e62:	f011 fa4d 	bl	8024300 <mg_str_s>
 8012e66:	2300      	movs	r3, #0
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e72:	f011 fc67 	bl	8024744 <mg_match>
 8012e76:	b198      	cbz	r0, 8012ea0 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012e78:	4b0e      	ldr	r3, [pc, #56]	@ (8012eb4 <handle_firmware_deactivate+0x60>)
 8012e7a:	6a1b      	ldr	r3, [r3, #32]
 8012e7c:	480e      	ldr	r0, [pc, #56]	@ (8012eb8 <handle_firmware_deactivate+0x64>)
 8012e7e:	4798      	blx	r3
 8012e80:	b138      	cbz	r0, 8012e92 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e82:	4b0e      	ldr	r3, [pc, #56]	@ (8012ebc <handle_firmware_deactivate+0x68>)
 8012e84:	4a0e      	ldr	r2, [pc, #56]	@ (8012ec0 <handle_firmware_deactivate+0x6c>)
 8012e86:	21c8      	movs	r1, #200	@ 0xc8
 8012e88:	4628      	mov	r0, r5
 8012e8a:	f011 f8af 	bl	8023fec <mg_http_reply>
}
 8012e8e:	b004      	add	sp, #16
 8012e90:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e92:	4b0c      	ldr	r3, [pc, #48]	@ (8012ec4 <handle_firmware_deactivate+0x70>)
 8012e94:	4a0a      	ldr	r2, [pc, #40]	@ (8012ec0 <handle_firmware_deactivate+0x6c>)
 8012e96:	21c8      	movs	r1, #200	@ 0xc8
 8012e98:	4628      	mov	r0, r5
 8012e9a:	f011 f8a7 	bl	8023fec <mg_http_reply>
 8012e9e:	e7f6      	b.n	8012e8e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012ea0:	4b09      	ldr	r3, [pc, #36]	@ (8012ec8 <handle_firmware_deactivate+0x74>)
 8012ea2:	4a07      	ldr	r2, [pc, #28]	@ (8012ec0 <handle_firmware_deactivate+0x6c>)
 8012ea4:	f240 1195 	movw	r1, #405	@ 0x195
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	f011 f89f 	bl	8023fec <mg_http_reply>
}
 8012eae:	e7ee      	b.n	8012e8e <handle_firmware_deactivate+0x3a>
 8012eb0:	0803675c 	.word	0x0803675c
 8012eb4:	200000a0 	.word	0x200000a0
 8012eb8:	08035fec 	.word	0x08035fec
 8012ebc:	08036764 	.word	0x08036764
 8012ec0:	08036600 	.word	0x08036600
 8012ec4:	080367a0 	.word	0x080367a0
 8012ec8:	080367e4 	.word	0x080367e4

08012ecc <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8012ecc:	b570      	push	{r4, r5, r6, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012ed4:	ae02      	add	r6, sp, #8
 8012ed6:	4912      	ldr	r1, [pc, #72]	@ (8012f20 <handle_web_files_remove+0x54>)
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f011 fa11 	bl	8024300 <mg_str_s>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012eea:	f011 fc2b 	bl	8024744 <mg_match>
 8012eee:	b178      	cbz	r0, 8012f10 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8012ef0:	4e0c      	ldr	r6, [pc, #48]	@ (8012f24 <handle_web_files_remove+0x58>)
 8012ef2:	6a33      	ldr	r3, [r6, #32]
 8012ef4:	4c0c      	ldr	r4, [pc, #48]	@ (8012f28 <handle_web_files_remove+0x5c>)
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012efa:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012efc:	4620      	mov	r0, r4
 8012efe:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012f00:	4b0a      	ldr	r3, [pc, #40]	@ (8012f2c <handle_web_files_remove+0x60>)
 8012f02:	4a0b      	ldr	r2, [pc, #44]	@ (8012f30 <handle_web_files_remove+0x64>)
 8012f04:	21c8      	movs	r1, #200	@ 0xc8
 8012f06:	4628      	mov	r0, r5
 8012f08:	f011 f870 	bl	8023fec <mg_http_reply>
}
 8012f0c:	b004      	add	sp, #16
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012f10:	4b08      	ldr	r3, [pc, #32]	@ (8012f34 <handle_web_files_remove+0x68>)
 8012f12:	4a07      	ldr	r2, [pc, #28]	@ (8012f30 <handle_web_files_remove+0x64>)
 8012f14:	f240 1195 	movw	r1, #405	@ 0x195
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f011 f867 	bl	8023fec <mg_http_reply>
}
 8012f1e:	e7f5      	b.n	8012f0c <handle_web_files_remove+0x40>
 8012f20:	0803675c 	.word	0x0803675c
 8012f24:	200000a0 	.word	0x200000a0
 8012f28:	08035fd8 	.word	0x08035fd8
 8012f2c:	08036834 	.word	0x08036834
 8012f30:	08036600 	.word	0x08036600
 8012f34:	080367e4 	.word	0x080367e4

08012f38 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f3a:	b0c3      	sub	sp, #268	@ 0x10c
 8012f3c:	4606      	mov	r6, r0
 8012f3e:	460d      	mov	r5, r1
	char username[128] = {0};
 8012f40:	2400      	movs	r4, #0
 8012f42:	9422      	str	r4, [sp, #136]	@ 0x88
 8012f44:	277c      	movs	r7, #124	@ 0x7c
 8012f46:	463a      	mov	r2, r7
 8012f48:	4621      	mov	r1, r4
 8012f4a:	a823      	add	r0, sp, #140	@ 0x8c
 8012f4c:	f019 fd48 	bl	802c9e0 <memset>
	char pass[128] = {0};
 8012f50:	9402      	str	r4, [sp, #8]
 8012f52:	463a      	mov	r2, r7
 8012f54:	4621      	mov	r1, r4
 8012f56:	a803      	add	r0, sp, #12
 8012f58:	f019 fd42 	bl	802c9e0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012f5c:	2280      	movs	r2, #128	@ 0x80
 8012f5e:	9200      	str	r2, [sp, #0]
 8012f60:	ab02      	add	r3, sp, #8
 8012f62:	a922      	add	r1, sp, #136	@ 0x88
 8012f64:	4628      	mov	r0, r5
 8012f66:	f012 f8f3 	bl	8025150 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012f6a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012f6e:	b113      	cbz	r3, 8012f76 <handler_logout+0x3e>
 8012f70:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012f74:	b962      	cbnz	r2, 8012f90 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012f76:	b913      	cbnz	r3, 8012f7e <handler_logout+0x46>
 8012f78:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012f7c:	bb4b      	cbnz	r3, 8012fd2 <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012f7e:	4b21      	ldr	r3, [pc, #132]	@ (8013004 <handler_logout+0xcc>)
 8012f80:	4a21      	ldr	r2, [pc, #132]	@ (8013008 <handler_logout+0xd0>)
 8012f82:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012f86:	4630      	mov	r0, r6
 8012f88:	f011 f830 	bl	8023fec <mg_http_reply>
}
 8012f8c:	b043      	add	sp, #268	@ 0x10c
 8012f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012f90:	4b1e      	ldr	r3, [pc, #120]	@ (801300c <handler_logout+0xd4>)
 8012f92:	4a1d      	ldr	r2, [pc, #116]	@ (8013008 <handler_logout+0xd0>)
 8012f94:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012f98:	4630      	mov	r0, r6
 8012f9a:	f011 f827 	bl	8023fec <mg_http_reply>
        return;
 8012f9e:	e7f5      	b.n	8012f8c <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 8012fa0:	23b8      	movs	r3, #184	@ 0xb8
 8012fa2:	fb03 f404 	mul.w	r4, r3, r4
 8012fa6:	4f1a      	ldr	r7, [pc, #104]	@ (8013010 <handler_logout+0xd8>)
 8012fa8:	19e5      	adds	r5, r4, r7
 8012faa:	462a      	mov	r2, r5
 8012fac:	4919      	ldr	r1, [pc, #100]	@ (8013014 <handler_logout+0xdc>)
 8012fae:	2001      	movs	r0, #1
 8012fb0:	f7fe ffb4 	bl	8011f1c <logging>
				web_tokens[i].token[0] = '\0';
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 8012fba:	2000      	movs	r0, #0
 8012fbc:	2100      	movs	r1, #0
 8012fbe:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8012fc2:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012fc4:	4b14      	ldr	r3, [pc, #80]	@ (8013018 <handler_logout+0xe0>)
 8012fc6:	4a10      	ldr	r2, [pc, #64]	@ (8013008 <handler_logout+0xd0>)
 8012fc8:	21c8      	movs	r1, #200	@ 0xc8
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f011 f80e 	bl	8023fec <mg_http_reply>
		        return;
 8012fd0:	e7dc      	b.n	8012f8c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8012fd2:	2400      	movs	r4, #0
 8012fd4:	2c09      	cmp	r4, #9
 8012fd6:	dc0c      	bgt.n	8012ff2 <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8012fd8:	23b8      	movs	r3, #184	@ 0xb8
 8012fda:	fb04 f303 	mul.w	r3, r4, r3
 8012fde:	3380      	adds	r3, #128	@ 0x80
 8012fe0:	a902      	add	r1, sp, #8
 8012fe2:	480b      	ldr	r0, [pc, #44]	@ (8013010 <handler_logout+0xd8>)
 8012fe4:	4418      	add	r0, r3
 8012fe6:	f7fd f8fb 	bl	80101e0 <strcmp>
 8012fea:	2800      	cmp	r0, #0
 8012fec:	d0d8      	beq.n	8012fa0 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012fee:	3401      	adds	r4, #1
 8012ff0:	e7f0      	b.n	8012fd4 <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 8012ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801301c <handler_logout+0xe4>)
 8012ff4:	4a04      	ldr	r2, [pc, #16]	@ (8013008 <handler_logout+0xd0>)
 8012ff6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f010 fff6 	bl	8023fec <mg_http_reply>
        return;
 8013000:	e7c4      	b.n	8012f8c <handler_logout+0x54>
 8013002:	bf00      	nop
 8013004:	08036980 	.word	0x08036980
 8013008:	08036600 	.word	0x08036600
 801300c:	0803687c 	.word	0x0803687c
 8013010:	20001a88 	.word	0x20001a88
 8013014:	080368fc 	.word	0x080368fc
 8013018:	08036910 	.word	0x08036910
 801301c:	0803694c 	.word	0x0803694c

08013020 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8013020:	b530      	push	{r4, r5, lr}
 8013022:	b0c7      	sub	sp, #284	@ 0x11c
 8013024:	4605      	mov	r5, r0
 8013026:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8013028:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 801302c:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8013030:	d024      	beq.n	801307c <handle_login+0x5c>
 8013032:	4b14      	ldr	r3, [pc, #80]	@ (8013084 <handle_login+0x64>)
              cookie_name, u->token,
 8013034:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013038:	b312      	cbz	r2, 8013080 <handle_login+0x60>
 801303a:	4a13      	ldr	r2, [pc, #76]	@ (8013088 <handle_login+0x68>)
 801303c:	4813      	ldr	r0, [pc, #76]	@ (801308c <handle_login+0x6c>)
 801303e:	9002      	str	r0, [sp, #8]
 8013040:	9201      	str	r2, [sp, #4]
 8013042:	9100      	str	r1, [sp, #0]
 8013044:	4a12      	ldr	r2, [pc, #72]	@ (8013090 <handle_login+0x70>)
 8013046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801304a:	a806      	add	r0, sp, #24
 801304c:	f010 fad0 	bl	80235f0 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8013050:	9405      	str	r4, [sp, #20]
 8013052:	2200      	movs	r2, #0
 8013054:	9204      	str	r2, [sp, #16]
 8013056:	4b0f      	ldr	r3, [pc, #60]	@ (8013094 <handle_login+0x74>)
 8013058:	9303      	str	r3, [sp, #12]
 801305a:	490f      	ldr	r1, [pc, #60]	@ (8013098 <handle_login+0x78>)
 801305c:	9102      	str	r1, [sp, #8]
 801305e:	9201      	str	r2, [sp, #4]
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	4b0e      	ldr	r3, [pc, #56]	@ (801309c <handle_login+0x7c>)
 8013064:	aa06      	add	r2, sp, #24
 8013066:	21c8      	movs	r1, #200	@ 0xc8
 8013068:	4628      	mov	r0, r5
 801306a:	f010 ffbf 	bl	8023fec <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 801306e:	4622      	mov	r2, r4
 8013070:	490b      	ldr	r1, [pc, #44]	@ (80130a0 <handle_login+0x80>)
 8013072:	2001      	movs	r0, #1
 8013074:	f7fe ff52 	bl	8011f1c <logging>
}
 8013078:	b047      	add	sp, #284	@ 0x11c
 801307a:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801307c:	4b09      	ldr	r3, [pc, #36]	@ (80130a4 <handle_login+0x84>)
 801307e:	e7d9      	b.n	8013034 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013080:	4a09      	ldr	r2, [pc, #36]	@ (80130a8 <handle_login+0x88>)
 8013082:	e7db      	b.n	801303c <handle_login+0x1c>
 8013084:	080369f8 	.word	0x080369f8
 8013088:	08036a1c 	.word	0x08036a1c
 801308c:	0002a300 	.word	0x0002a300
 8013090:	08036a28 	.word	0x08036a28
 8013094:	080227ad 	.word	0x080227ad
 8013098:	08037aa0 	.word	0x08037aa0
 801309c:	08036a6c 	.word	0x08036a6c
 80130a0:	08036a74 	.word	0x08036a74
 80130a4:	08036a0c 	.word	0x08036a0c
 80130a8:	08036c80 	.word	0x08036c80

080130ac <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 80130ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130b0:	b0e5      	sub	sp, #404	@ 0x194
 80130b2:	4605      	mov	r5, r0
 80130b4:	460c      	mov	r4, r1
 80130b6:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 80130b8:	2100      	movs	r1, #0
 80130ba:	9159      	str	r1, [sp, #356]	@ 0x164
 80130bc:	2225      	movs	r2, #37	@ 0x25
 80130be:	a85a      	add	r0, sp, #360	@ 0x168
 80130c0:	f019 fc8e 	bl	802c9e0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 80130c4:	2280      	movs	r2, #128	@ 0x80
 80130c6:	9200      	str	r2, [sp, #0]
 80130c8:	ab02      	add	r3, sp, #8
 80130ca:	a922      	add	r1, sp, #136	@ 0x88
 80130cc:	4620      	mov	r0, r4
 80130ce:	f012 f83f 	bl	8025150 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80130d2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80130d6:	b113      	cbz	r3, 80130de <auth+0x32>
 80130d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80130dc:	b94a      	cbnz	r2, 80130f2 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f040 80bb 	bne.w	801325a <auth+0x1ae>
 80130e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f040 80b2 	bne.w	8013252 <auth+0x1a6>
	return false;
 80130ee:	2000      	movs	r0, #0
 80130f0:	e0b4      	b.n	801325c <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 80130f2:	aa22      	add	r2, sp, #136	@ 0x88
 80130f4:	495b      	ldr	r1, [pc, #364]	@ (8013264 <auth+0x1b8>)
 80130f6:	2001      	movs	r0, #1
 80130f8:	f7fe ff10 	bl	8011f1c <logging>
		mg_sha1_init(&sha1_ctx);
 80130fc:	a842      	add	r0, sp, #264	@ 0x108
 80130fe:	f011 f84d 	bl	802419c <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 8013102:	a802      	add	r0, sp, #8
 8013104:	f7fd f8cc 	bl	80102a0 <strlen>
 8013108:	4602      	mov	r2, r0
 801310a:	a902      	add	r1, sp, #8
 801310c:	a842      	add	r0, sp, #264	@ 0x108
 801310e:	f011 f85f 	bl	80241d0 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 8013112:	a942      	add	r1, sp, #264	@ 0x108
 8013114:	a859      	add	r0, sp, #356	@ 0x164
 8013116:	f011 f895 	bl	8024244 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 801311a:	2400      	movs	r4, #0
 801311c:	e02a      	b.n	8013174 <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 801311e:	4641      	mov	r1, r8
 8013120:	4628      	mov	r0, r5
 8013122:	f7ff ff7d 	bl	8013020 <handle_login>
 8013126:	e066      	b.n	80131f6 <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8013128:	4f4f      	ldr	r7, [pc, #316]	@ (8013268 <auth+0x1bc>)
 801312a:	2280      	movs	r2, #128	@ 0x80
 801312c:	a922      	add	r1, sp, #136	@ 0x88
 801312e:	4638      	mov	r0, r7
 8013130:	f019 fc9d 	bl	802ca6e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8013134:	f016 fca4 	bl	8029a80 <mg_now>
 8013138:	4b4c      	ldr	r3, [pc, #304]	@ (801326c <auth+0x1c0>)
 801313a:	18c3      	adds	r3, r0, r3
 801313c:	f141 0100 	adc.w	r1, r1, #0
 8013140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013144:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013148:	2128      	movs	r1, #40	@ 0x28
 801314a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801314e:	f012 fc45 	bl	80259dc <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013152:	b94e      	cbnz	r6, 8013168 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013154:	22b8      	movs	r2, #184	@ 0xb8
 8013156:	4b46      	ldr	r3, [pc, #280]	@ (8013270 <auth+0x1c4>)
 8013158:	fb02 3204 	mla	r2, r2, r4, r3
 801315c:	4945      	ldr	r1, [pc, #276]	@ (8013274 <auth+0x1c8>)
 801315e:	2001      	movs	r0, #1
 8013160:	f7fe fedc 	bl	8011f1c <logging>
					return true;
 8013164:	2001      	movs	r0, #1
 8013166:	e079      	b.n	801325c <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013168:	4639      	mov	r1, r7
 801316a:	4628      	mov	r0, r5
 801316c:	f7ff ff58 	bl	8013020 <handle_login>
 8013170:	e7f0      	b.n	8013154 <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 8013172:	3401      	adds	r4, #1
 8013174:	2c09      	cmp	r4, #9
 8013176:	dc45      	bgt.n	8013204 <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013178:	a922      	add	r1, sp, #136	@ 0x88
 801317a:	20a9      	movs	r0, #169	@ 0xa9
 801317c:	4b3e      	ldr	r3, [pc, #248]	@ (8013278 <auth+0x1cc>)
 801317e:	fb00 3004 	mla	r0, r0, r4, r3
 8013182:	f7fd f82d 	bl	80101e0 <strcmp>
 8013186:	2800      	cmp	r0, #0
 8013188:	d1f3      	bne.n	8013172 <auth+0xc6>
 801318a:	23a9      	movs	r3, #169	@ 0xa9
 801318c:	fb04 f303 	mul.w	r3, r4, r3
 8013190:	3380      	adds	r3, #128	@ 0x80
 8013192:	a959      	add	r1, sp, #356	@ 0x164
 8013194:	4838      	ldr	r0, [pc, #224]	@ (8013278 <auth+0x1cc>)
 8013196:	4418      	add	r0, r3
 8013198:	f7fd f822 	bl	80101e0 <strcmp>
 801319c:	2800      	cmp	r0, #0
 801319e:	d1e8      	bne.n	8013172 <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 80131a0:	4b33      	ldr	r3, [pc, #204]	@ (8013270 <auth+0x1c4>)
 80131a2:	22b8      	movs	r2, #184	@ 0xb8
 80131a4:	fb02 3304 	mla	r3, r2, r4, r3
 80131a8:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 80131ac:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 80131b0:	f016 fc66 	bl	8029a80 <mg_now>
 80131b4:	4580      	cmp	r8, r0
 80131b6:	418f      	sbcs	r7, r1
 80131b8:	d2b6      	bcs.n	8013128 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 80131ba:	27b8      	movs	r7, #184	@ 0xb8
 80131bc:	fb04 f707 	mul.w	r7, r4, r7
 80131c0:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013270 <auth+0x1c4>
 80131c4:	eb07 0809 	add.w	r8, r7, r9
 80131c8:	2280      	movs	r2, #128	@ 0x80
 80131ca:	a922      	add	r1, sp, #136	@ 0x88
 80131cc:	4640      	mov	r0, r8
 80131ce:	f019 fc4e 	bl	802ca6e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80131d2:	f016 fc55 	bl	8029a80 <mg_now>
 80131d6:	4b25      	ldr	r3, [pc, #148]	@ (801326c <auth+0x1c0>)
 80131d8:	18c0      	adds	r0, r0, r3
 80131da:	f141 0100 	adc.w	r1, r1, #0
 80131de:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80131e2:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80131e6:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80131ea:	2128      	movs	r1, #40	@ 0x28
 80131ec:	4448      	add	r0, r9
 80131ee:	f012 fbf5 	bl	80259dc <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80131f2:	2e00      	cmp	r6, #0
 80131f4:	d193      	bne.n	801311e <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 80131f6:	4642      	mov	r2, r8
 80131f8:	491e      	ldr	r1, [pc, #120]	@ (8013274 <auth+0x1c8>)
 80131fa:	2001      	movs	r0, #1
 80131fc:	f7fe fe8e 	bl	8011f1c <logging>
						return true;
 8013200:	2001      	movs	r0, #1
 8013202:	e02b      	b.n	801325c <auth+0x1b0>
	return false;
 8013204:	2000      	movs	r0, #0
 8013206:	e029      	b.n	801325c <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8013208:	22b8      	movs	r2, #184	@ 0xb8
 801320a:	4b19      	ldr	r3, [pc, #100]	@ (8013270 <auth+0x1c4>)
 801320c:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013210:	9300      	str	r3, [sp, #0]
 8013212:	4b1a      	ldr	r3, [pc, #104]	@ (801327c <auth+0x1d0>)
 8013214:	4a1a      	ldr	r2, [pc, #104]	@ (8013280 <auth+0x1d4>)
 8013216:	21c8      	movs	r1, #200	@ 0xc8
 8013218:	4628      	mov	r0, r5
 801321a:	f010 fee7 	bl	8023fec <mg_http_reply>
 801321e:	e016      	b.n	801324e <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 8013220:	3401      	adds	r4, #1
 8013222:	2c09      	cmp	r4, #9
 8013224:	dc17      	bgt.n	8013256 <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 8013226:	23b8      	movs	r3, #184	@ 0xb8
 8013228:	fb04 f303 	mul.w	r3, r4, r3
 801322c:	3380      	adds	r3, #128	@ 0x80
 801322e:	a902      	add	r1, sp, #8
 8013230:	480f      	ldr	r0, [pc, #60]	@ (8013270 <auth+0x1c4>)
 8013232:	4418      	add	r0, r3
 8013234:	f7fc ffd4 	bl	80101e0 <strcmp>
 8013238:	2800      	cmp	r0, #0
 801323a:	d1f1      	bne.n	8013220 <auth+0x174>
 801323c:	23b8      	movs	r3, #184	@ 0xb8
 801323e:	fb04 f303 	mul.w	r3, r4, r3
 8013242:	4a0b      	ldr	r2, [pc, #44]	@ (8013270 <auth+0x1c4>)
 8013244:	5cd3      	ldrb	r3, [r2, r3]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0ea      	beq.n	8013220 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 801324a:	2e00      	cmp	r6, #0
 801324c:	d1dc      	bne.n	8013208 <auth+0x15c>
				return true;
 801324e:	2001      	movs	r0, #1
 8013250:	e004      	b.n	801325c <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 8013252:	2400      	movs	r4, #0
 8013254:	e7e5      	b.n	8013222 <auth+0x176>
	return false;
 8013256:	2000      	movs	r0, #0
 8013258:	e000      	b.n	801325c <auth+0x1b0>
 801325a:	2000      	movs	r0, #0
}
 801325c:	b065      	add	sp, #404	@ 0x194
 801325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013262:	bf00      	nop
 8013264:	08036a90 	.word	0x08036a90
 8013268:	20001b40 	.word	0x20001b40
 801326c:	0a4cb800 	.word	0x0a4cb800
 8013270:	20001a88 	.word	0x20001a88
 8013274:	08036ab0 	.word	0x08036ab0
 8013278:	200021b8 	.word	0x200021b8
 801327c:	08036acc 	.word	0x08036acc
 8013280:	08036600 	.word	0x08036600

08013284 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013284:	b510      	push	{r4, lr}
 8013286:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013288:	2201      	movs	r2, #1
 801328a:	f7ff ff0f 	bl	80130ac <auth>
 801328e:	b100      	cbz	r0, 8013292 <handler_authanticate+0xe>
}
 8013290:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013292:	4b04      	ldr	r3, [pc, #16]	@ (80132a4 <handler_authanticate+0x20>)
 8013294:	4a04      	ldr	r2, [pc, #16]	@ (80132a8 <handler_authanticate+0x24>)
 8013296:	f240 1193 	movw	r1, #403	@ 0x193
 801329a:	4620      	mov	r0, r4
 801329c:	f010 fea6 	bl	8023fec <mg_http_reply>
}
 80132a0:	e7f6      	b.n	8013290 <handler_authanticate+0xc>
 80132a2:	bf00      	nop
 80132a4:	08036b0c 	.word	0x08036b0c
 80132a8:	08036600 	.word	0x08036600

080132ac <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 80132ac:	b510      	push	{r4, lr}
 80132ae:	b090      	sub	sp, #64	@ 0x40
 80132b0:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 80132b2:	a809      	add	r0, sp, #36	@ 0x24
 80132b4:	f007 fc20 	bl	801aaf8 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 80132b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132ba:	9306      	str	r3, [sp, #24]
 80132bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132be:	9305      	str	r3, [sp, #20]
 80132c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132c2:	9304      	str	r3, [sp, #16]
 80132c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80132c6:	9303      	str	r3, [sp, #12]
 80132c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132ca:	9302      	str	r3, [sp, #8]
 80132cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	4b03      	ldr	r3, [pc, #12]	@ (80132e4 <handle_ram_status_get+0x38>)
 80132d6:	4a04      	ldr	r2, [pc, #16]	@ (80132e8 <handle_ram_status_get+0x3c>)
 80132d8:	21c8      	movs	r1, #200	@ 0xc8
 80132da:	4620      	mov	r0, r4
 80132dc:	f010 fe86 	bl	8023fec <mg_http_reply>
}
 80132e0:	b010      	add	sp, #64	@ 0x40
 80132e2:	bd10      	pop	{r4, pc}
 80132e4:	08036b3c 	.word	0x08036b3c
 80132e8:	08036c40 	.word	0x08036c40

080132ec <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 80132ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ee:	b091      	sub	sp, #68	@ 0x44
 80132f0:	4606      	mov	r6, r0
 80132f2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80132f4:	ad0c      	add	r5, sp, #48	@ 0x30
 80132f6:	494b      	ldr	r1, [pc, #300]	@ (8013424 <handle_io_status_get+0x138>)
 80132f8:	4628      	mov	r0, r5
 80132fa:	f011 f801 	bl	8024300 <mg_str_s>
 80132fe:	2300      	movs	r3, #0
 8013300:	9300      	str	r3, [sp, #0]
 8013302:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013306:	e894 0003 	ldmia.w	r4, {r0, r1}
 801330a:	f011 fa1b 	bl	8024744 <mg_match>
 801330e:	b328      	cbz	r0, 801335c <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8013310:	4c45      	ldr	r4, [pc, #276]	@ (8013428 <handle_io_status_get+0x13c>)
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	2200      	movs	r2, #0
 8013316:	2101      	movs	r1, #1
 8013318:	a80a      	add	r0, sp, #40	@ 0x28
 801331a:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 801331c:	6823      	ldr	r3, [r4, #0]
 801331e:	2200      	movs	r2, #0
 8013320:	2102      	movs	r1, #2
 8013322:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 8013326:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8013328:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801332c:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013330:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8013334:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013338:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 801333c:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013340:	9505      	str	r5, [sp, #20]
 8013342:	9404      	str	r4, [sp, #16]
 8013344:	9003      	str	r0, [sp, #12]
 8013346:	9102      	str	r1, [sp, #8]
 8013348:	9201      	str	r2, [sp, #4]
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	4b37      	ldr	r3, [pc, #220]	@ (801342c <handle_io_status_get+0x140>)
 801334e:	4a38      	ldr	r2, [pc, #224]	@ (8013430 <handle_io_status_get+0x144>)
 8013350:	21c8      	movs	r1, #200	@ 0xc8
 8013352:	4630      	mov	r0, r6
 8013354:	f010 fe4a 	bl	8023fec <mg_http_reply>
}
 8013358:	b011      	add	sp, #68	@ 0x44
 801335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801335c:	ad0e      	add	r5, sp, #56	@ 0x38
 801335e:	4935      	ldr	r1, [pc, #212]	@ (8013434 <handle_io_status_get+0x148>)
 8013360:	4628      	mov	r0, r5
 8013362:	f010 ffcd 	bl	8024300 <mg_str_s>
 8013366:	2300      	movs	r3, #0
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801336e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013372:	f011 f9e7 	bl	8024744 <mg_match>
 8013376:	2800      	cmp	r0, #0
 8013378:	d04b      	beq.n	8013412 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801337a:	ab08      	add	r3, sp, #32
 801337c:	4a2e      	ldr	r2, [pc, #184]	@ (8013438 <handle_io_status_get+0x14c>)
 801337e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013382:	c903      	ldmia	r1, {r0, r1}
 8013384:	f00f fef8 	bl	8023178 <mg_json_get_num>
 8013388:	2800      	cmp	r0, #0
 801338a:	d03a      	beq.n	8013402 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 801338c:	ab0a      	add	r3, sp, #40	@ 0x28
 801338e:	4a2b      	ldr	r2, [pc, #172]	@ (801343c <handle_io_status_get+0x150>)
 8013390:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013394:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013398:	f00f feee 	bl	8023178 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801339c:	2800      	cmp	r0, #0
 801339e:	d030      	beq.n	8013402 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 80133a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80133a4:	f7fd fc18 	bl	8010bd8 <__aeabi_d2uiz>
 80133a8:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 80133aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80133ae:	f7fd fc13 	bl	8010bd8 <__aeabi_d2uiz>
 80133b2:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80133b4:	1e63      	subs	r3, r4, #1
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	2b02      	cmp	r3, #2
 80133ba:	d801      	bhi.n	80133c0 <handle_io_status_get+0xd4>
 80133bc:	2d01      	cmp	r5, #1
 80133be:	d907      	bls.n	80133d0 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80133c0:	4b1f      	ldr	r3, [pc, #124]	@ (8013440 <handle_io_status_get+0x154>)
 80133c2:	4a1b      	ldr	r2, [pc, #108]	@ (8013430 <handle_io_status_get+0x144>)
 80133c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133c8:	4630      	mov	r0, r6
 80133ca:	f010 fe0f 	bl	8023fec <mg_http_reply>
 80133ce:	e7c3      	b.n	8013358 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80133d0:	4f15      	ldr	r7, [pc, #84]	@ (8013428 <handle_io_status_get+0x13c>)
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	2200      	movs	r2, #0
 80133d6:	2102      	movs	r1, #2
 80133d8:	a807      	add	r0, sp, #28
 80133da:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80133dc:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80133e0:	446b      	add	r3, sp
 80133e2:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2201      	movs	r2, #1
 80133ea:	2102      	movs	r1, #2
 80133ec:	a807      	add	r0, sp, #28
 80133ee:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 80133f0:	9501      	str	r5, [sp, #4]
 80133f2:	9400      	str	r4, [sp, #0]
 80133f4:	4b13      	ldr	r3, [pc, #76]	@ (8013444 <handle_io_status_get+0x158>)
 80133f6:	4a0e      	ldr	r2, [pc, #56]	@ (8013430 <handle_io_status_get+0x144>)
 80133f8:	21c8      	movs	r1, #200	@ 0xc8
 80133fa:	4630      	mov	r0, r6
 80133fc:	f010 fdf6 	bl	8023fec <mg_http_reply>
 8013400:	e7aa      	b.n	8013358 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8013402:	4b11      	ldr	r3, [pc, #68]	@ (8013448 <handle_io_status_get+0x15c>)
 8013404:	4a0a      	ldr	r2, [pc, #40]	@ (8013430 <handle_io_status_get+0x144>)
 8013406:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801340a:	4630      	mov	r0, r6
 801340c:	f010 fdee 	bl	8023fec <mg_http_reply>
 8013410:	e7a2      	b.n	8013358 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013412:	4b0e      	ldr	r3, [pc, #56]	@ (801344c <handle_io_status_get+0x160>)
 8013414:	4a06      	ldr	r2, [pc, #24]	@ (8013430 <handle_io_status_get+0x144>)
 8013416:	f240 1195 	movw	r1, #405	@ 0x195
 801341a:	4630      	mov	r0, r6
 801341c:	f010 fde6 	bl	8023fec <mg_http_reply>
}
 8013420:	e79a      	b.n	8013358 <handle_io_status_get+0x6c>
 8013422:	bf00      	nop
 8013424:	080365c4 	.word	0x080365c4
 8013428:	20002854 	.word	0x20002854
 801342c:	08036c84 	.word	0x08036c84
 8013430:	08036600 	.word	0x08036600
 8013434:	0803675c 	.word	0x0803675c
 8013438:	08036cb8 	.word	0x08036cb8
 801343c:	08036cc4 	.word	0x08036cc4
 8013440:	08036d04 	.word	0x08036d04
 8013444:	08036ccc 	.word	0x08036ccc
 8013448:	08036d40 	.word	0x08036d40
 801344c:	08036d7c 	.word	0x08036d7c

08013450 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013450:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013452:	fb01 f400 	mul.w	r4, r1, r0
 8013456:	4620      	mov	r0, r4
 8013458:	f007 fa8e 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801345c:	4605      	mov	r5, r0
 801345e:	b118      	cbz	r0, 8013468 <mg_calloc+0x18>
 8013460:	4622      	mov	r2, r4
 8013462:	2100      	movs	r1, #0
 8013464:	f019 fabc 	bl	802c9e0 <memset>
}
 8013468:	4628      	mov	r0, r5
 801346a:	bd38      	pop	{r3, r4, r5, pc}

0801346c <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 801346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801346e:	b08b      	sub	sp, #44	@ 0x2c
 8013470:	4606      	mov	r6, r0
 8013472:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013474:	ad06      	add	r5, sp, #24
 8013476:	4984      	ldr	r1, [pc, #528]	@ (8013688 <handle_mqtt_conf+0x21c>)
 8013478:	4628      	mov	r0, r5
 801347a:	f010 ff41 	bl	8024300 <mg_str_s>
 801347e:	2300      	movs	r3, #0
 8013480:	9300      	str	r3, [sp, #0]
 8013482:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013486:	e894 0003 	ldmia.w	r4, {r0, r1}
 801348a:	f011 f95b 	bl	8024744 <mg_match>
 801348e:	2800      	cmp	r0, #0
 8013490:	d03b      	beq.n	801350a <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013492:	21c6      	movs	r1, #198	@ 0xc6
 8013494:	2001      	movs	r0, #1
 8013496:	f7ff ffdb 	bl	8013450 <mg_calloc>
		if (mqtt_config == NULL) {
 801349a:	4605      	mov	r5, r0
 801349c:	b340      	cbz	r0, 80134f0 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801349e:	4b7b      	ldr	r3, [pc, #492]	@ (801368c <handle_mqtt_conf+0x220>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2200      	movs	r2, #0
 80134a4:	4611      	mov	r1, r2
 80134a6:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 80134a8:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7fc fef7 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 80134b2:	b2c4      	uxtb	r4, r0
 80134b4:	4622      	mov	r2, r4
 80134b6:	212a      	movs	r1, #42	@ 0x2a
 80134b8:	4638      	mov	r0, r7
 80134ba:	f019 fa91 	bl	802c9e0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 80134be:	442c      	add	r4, r5
 80134c0:	2300      	movs	r3, #0
 80134c2:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80134c6:	786b      	ldrb	r3, [r5, #1]
 80134c8:	b1eb      	cbz	r3, 8013506 <handle_mqtt_conf+0x9a>
 80134ca:	4b71      	ldr	r3, [pc, #452]	@ (8013690 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80134cc:	1caa      	adds	r2, r5, #2
 80134ce:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80134d2:	9703      	str	r7, [sp, #12]
 80134d4:	9102      	str	r1, [sp, #8]
 80134d6:	9201      	str	r2, [sp, #4]
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	4b6e      	ldr	r3, [pc, #440]	@ (8013694 <handle_mqtt_conf+0x228>)
 80134dc:	4a6e      	ldr	r2, [pc, #440]	@ (8013698 <handle_mqtt_conf+0x22c>)
 80134de:	21c8      	movs	r1, #200	@ 0xc8
 80134e0:	4630      	mov	r0, r6
 80134e2:	f010 fd83 	bl	8023fec <mg_http_reply>
		free(mqtt_config);
 80134e6:	4628      	mov	r0, r5
 80134e8:	f007 fac8 	bl	801aa7c <vPortFree>
}
 80134ec:	b00b      	add	sp, #44	@ 0x2c
 80134ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80134f0:	4b6a      	ldr	r3, [pc, #424]	@ (801369c <handle_mqtt_conf+0x230>)
 80134f2:	4a69      	ldr	r2, [pc, #420]	@ (8013698 <handle_mqtt_conf+0x22c>)
 80134f4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80134f8:	4630      	mov	r0, r6
 80134fa:	f010 fd77 	bl	8023fec <mg_http_reply>
			free(mqtt_config);
 80134fe:	4628      	mov	r0, r5
 8013500:	f007 fabc 	bl	801aa7c <vPortFree>
			return;
 8013504:	e7f2      	b.n	80134ec <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013506:	4b66      	ldr	r3, [pc, #408]	@ (80136a0 <handle_mqtt_conf+0x234>)
 8013508:	e7e0      	b.n	80134cc <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801350a:	ad08      	add	r5, sp, #32
 801350c:	4965      	ldr	r1, [pc, #404]	@ (80136a4 <handle_mqtt_conf+0x238>)
 801350e:	4628      	mov	r0, r5
 8013510:	f010 fef6 	bl	8024300 <mg_str_s>
 8013514:	2300      	movs	r3, #0
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	e895 000c 	ldmia.w	r5, {r2, r3}
 801351c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013520:	f011 f910 	bl	8024744 <mg_match>
 8013524:	2800      	cmp	r0, #0
 8013526:	f000 80a7 	beq.w	8013678 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 801352a:	21c6      	movs	r1, #198	@ 0xc6
 801352c:	2001      	movs	r0, #1
 801352e:	f7ff ff8f 	bl	8013450 <mg_calloc>
		if (mqtt_config == NULL) {
 8013532:	4605      	mov	r5, r0
 8013534:	b310      	cbz	r0, 801357c <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013536:	ab05      	add	r3, sp, #20
 8013538:	4a5b      	ldr	r2, [pc, #364]	@ (80136a8 <handle_mqtt_conf+0x23c>)
 801353a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801353e:	c903      	ldmia	r1, {r0, r1}
 8013540:	f00f fbb0 	bl	8022ca4 <mg_json_get>
 8013544:	2800      	cmp	r0, #0
 8013546:	db24      	blt.n	8013592 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013548:	1c6b      	adds	r3, r5, #1
 801354a:	4a58      	ldr	r2, [pc, #352]	@ (80136ac <handle_mqtt_conf+0x240>)
 801354c:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013550:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013554:	f00f fe36 	bl	80231c4 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013558:	4a55      	ldr	r2, [pc, #340]	@ (80136b0 <handle_mqtt_conf+0x244>)
 801355a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801355e:	f011 ffbf 	bl	80254e0 <mg_json_get_str>
 8013562:	4607      	mov	r7, r0
 8013564:	b328      	cbz	r0, 80135b2 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013566:	f016 fca7 	bl	8029eb8 <is_valid_mqtt_url>
 801356a:	4603      	mov	r3, r0
 801356c:	b1e0      	cbz	r0, 80135a8 <handle_mqtt_conf+0x13c>
					switch (err) {
 801356e:	3304      	adds	r3, #4
 8013570:	2b03      	cmp	r3, #3
 8013572:	d879      	bhi.n	8013668 <handle_mqtt_conf+0x1fc>
 8013574:	e8df f003 	tbb	[pc, r3]
 8013578:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801357c:	4b47      	ldr	r3, [pc, #284]	@ (801369c <handle_mqtt_conf+0x230>)
 801357e:	4a46      	ldr	r2, [pc, #280]	@ (8013698 <handle_mqtt_conf+0x22c>)
 8013580:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013584:	4630      	mov	r0, r6
 8013586:	f010 fd31 	bl	8023fec <mg_http_reply>
			free(mqtt_config);
 801358a:	4628      	mov	r0, r5
 801358c:	f007 fa76 	bl	801aa7c <vPortFree>
			return;
 8013590:	e7ac      	b.n	80134ec <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013592:	4b48      	ldr	r3, [pc, #288]	@ (80136b4 <handle_mqtt_conf+0x248>)
 8013594:	4a40      	ldr	r2, [pc, #256]	@ (8013698 <handle_mqtt_conf+0x22c>)
 8013596:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801359a:	4630      	mov	r0, r6
 801359c:	f010 fd26 	bl	8023fec <mg_http_reply>
		free(mqtt_config);
 80135a0:	4628      	mov	r0, r5
 80135a2:	f007 fa6b 	bl	801aa7c <vPortFree>
 80135a6:	e7a1      	b.n	80134ec <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 80135a8:	227f      	movs	r2, #127	@ 0x7f
 80135aa:	4639      	mov	r1, r7
 80135ac:	1ca8      	adds	r0, r5, #2
 80135ae:	f019 fa5e 	bl	802ca6e <strncpy>
			free(broker);
 80135b2:	4638      	mov	r0, r7
 80135b4:	f007 fa62 	bl	801aa7c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 80135b8:	4a3f      	ldr	r2, [pc, #252]	@ (80136b8 <handle_mqtt_conf+0x24c>)
 80135ba:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 80135be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80135c2:	f011 ff8d 	bl	80254e0 <mg_json_get_str>
 80135c6:	4607      	mov	r7, r0
 80135c8:	b128      	cbz	r0, 80135d6 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 80135ca:	2220      	movs	r2, #32
 80135cc:	4601      	mov	r1, r0
 80135ce:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80135d2:	f019 fa4c 	bl	802ca6e <strncpy>
			free(username);
 80135d6:	4638      	mov	r0, r7
 80135d8:	f007 fa50 	bl	801aa7c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 80135dc:	4a37      	ldr	r2, [pc, #220]	@ (80136bc <handle_mqtt_conf+0x250>)
 80135de:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80135e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135e6:	f011 ff7b 	bl	80254e0 <mg_json_get_str>
 80135ea:	4604      	mov	r4, r0
 80135ec:	b128      	cbz	r0, 80135fa <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 80135ee:	2220      	movs	r2, #32
 80135f0:	4601      	mov	r1, r0
 80135f2:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 80135f6:	f019 fa3a 	bl	802ca6e <strncpy>
			free(password);
 80135fa:	4620      	mov	r0, r4
 80135fc:	f007 fa3e 	bl	801aa7c <vPortFree>
			mqtt_config->save = 1;
 8013600:	2201      	movs	r2, #1
 8013602:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013604:	4b21      	ldr	r3, [pc, #132]	@ (801368c <handle_mqtt_conf+0x220>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2100      	movs	r1, #0
 801360a:	4628      	mov	r0, r5
 801360c:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801360e:	4b2c      	ldr	r3, [pc, #176]	@ (80136c0 <handle_mqtt_conf+0x254>)
 8013610:	4a21      	ldr	r2, [pc, #132]	@ (8013698 <handle_mqtt_conf+0x22c>)
 8013612:	21c8      	movs	r1, #200	@ 0xc8
 8013614:	4630      	mov	r0, r6
 8013616:	f010 fce9 	bl	8023fec <mg_http_reply>
 801361a:	e7c1      	b.n	80135a0 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 801361c:	4b29      	ldr	r3, [pc, #164]	@ (80136c4 <handle_mqtt_conf+0x258>)
 801361e:	4a1e      	ldr	r2, [pc, #120]	@ (8013698 <handle_mqtt_conf+0x22c>)
 8013620:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013624:	4630      	mov	r0, r6
 8013626:	f010 fce1 	bl	8023fec <mg_http_reply>
					free(broker);
 801362a:	4638      	mov	r0, r7
 801362c:	f007 fa26 	bl	801aa7c <vPortFree>
					free(mqtt_config);
 8013630:	4628      	mov	r0, r5
 8013632:	f007 fa23 	bl	801aa7c <vPortFree>
					return;
 8013636:	e759      	b.n	80134ec <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013638:	4b23      	ldr	r3, [pc, #140]	@ (80136c8 <handle_mqtt_conf+0x25c>)
 801363a:	4a17      	ldr	r2, [pc, #92]	@ (8013698 <handle_mqtt_conf+0x22c>)
 801363c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013640:	4630      	mov	r0, r6
 8013642:	f010 fcd3 	bl	8023fec <mg_http_reply>
							break;
 8013646:	e7f0      	b.n	801362a <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013648:	4b20      	ldr	r3, [pc, #128]	@ (80136cc <handle_mqtt_conf+0x260>)
 801364a:	4a13      	ldr	r2, [pc, #76]	@ (8013698 <handle_mqtt_conf+0x22c>)
 801364c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013650:	4630      	mov	r0, r6
 8013652:	f010 fccb 	bl	8023fec <mg_http_reply>
							break;
 8013656:	e7e8      	b.n	801362a <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013658:	4b1d      	ldr	r3, [pc, #116]	@ (80136d0 <handle_mqtt_conf+0x264>)
 801365a:	4a0f      	ldr	r2, [pc, #60]	@ (8013698 <handle_mqtt_conf+0x22c>)
 801365c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013660:	4630      	mov	r0, r6
 8013662:	f010 fcc3 	bl	8023fec <mg_http_reply>
							break;
 8013666:	e7e0      	b.n	801362a <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013668:	4b1a      	ldr	r3, [pc, #104]	@ (80136d4 <handle_mqtt_conf+0x268>)
 801366a:	4a0b      	ldr	r2, [pc, #44]	@ (8013698 <handle_mqtt_conf+0x22c>)
 801366c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013670:	4630      	mov	r0, r6
 8013672:	f010 fcbb 	bl	8023fec <mg_http_reply>
							break;
 8013676:	e7d8      	b.n	801362a <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013678:	4b17      	ldr	r3, [pc, #92]	@ (80136d8 <handle_mqtt_conf+0x26c>)
 801367a:	4a07      	ldr	r2, [pc, #28]	@ (8013698 <handle_mqtt_conf+0x22c>)
 801367c:	f240 1195 	movw	r1, #405	@ 0x195
 8013680:	4630      	mov	r0, r6
 8013682:	f010 fcb3 	bl	8023fec <mg_http_reply>
 8013686:	e731      	b.n	80134ec <handle_mqtt_conf+0x80>
 8013688:	080365c4 	.word	0x080365c4
 801368c:	20002854 	.word	0x20002854
 8013690:	08036dd0 	.word	0x08036dd0
 8013694:	08036e1c 	.word	0x08036e1c
 8013698:	08036600 	.word	0x08036600
 801369c:	08036de0 	.word	0x08036de0
 80136a0:	08036dd8 	.word	0x08036dd8
 80136a4:	0803675c 	.word	0x0803675c
 80136a8:	08036e64 	.word	0x08036e64
 80136ac:	08036e98 	.word	0x08036e98
 80136b0:	08036ea4 	.word	0x08036ea4
 80136b4:	08036e68 	.word	0x08036e68
 80136b8:	08036fec 	.word	0x08036fec
 80136bc:	08036ff8 	.word	0x08036ff8
 80136c0:	08037004 	.word	0x08037004
 80136c4:	08036eb0 	.word	0x08036eb0
 80136c8:	08036ef4 	.word	0x08036ef4
 80136cc:	08036f40 	.word	0x08036f40
 80136d0:	08036f80 	.word	0x08036f80
 80136d4:	08036fb8 	.word	0x08036fb8
 80136d8:	08036d7c 	.word	0x08036d7c

080136dc <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 80136dc:	b570      	push	{r4, r5, r6, lr}
 80136de:	b08a      	sub	sp, #40	@ 0x28
 80136e0:	4606      	mov	r6, r0
 80136e2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80136e4:	ad04      	add	r5, sp, #16
 80136e6:	495e      	ldr	r1, [pc, #376]	@ (8013860 <handle_mb_tcp_access_list+0x184>)
 80136e8:	4628      	mov	r0, r5
 80136ea:	f010 fe09 	bl	8024300 <mg_str_s>
 80136ee:	2300      	movs	r3, #0
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80136f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136fa:	f011 f823 	bl	8024744 <mg_match>
 80136fe:	2800      	cmp	r0, #0
 8013700:	d03d      	beq.n	801377e <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 8013702:	2200      	movs	r2, #0
 8013704:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013706:	a903      	add	r1, sp, #12
 8013708:	4856      	ldr	r0, [pc, #344]	@ (8013864 <handle_mb_tcp_access_list+0x188>)
 801370a:	f007 fa9d 	bl	801ac48 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 801370e:	9803      	ldr	r0, [sp, #12]
 8013710:	1e42      	subs	r2, r0, #1
 8013712:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013716:	429a      	cmp	r2, r3
 8013718:	d829      	bhi.n	801376e <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 801371a:	2101      	movs	r1, #1
 801371c:	4408      	add	r0, r1
 801371e:	f7ff fe97 	bl	8013450 <mg_calloc>
			if (acl == NULL){
 8013722:	4604      	mov	r4, r0
 8013724:	b1b8      	cbz	r0, 8013756 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8013726:	2101      	movs	r1, #1
 8013728:	484e      	ldr	r0, [pc, #312]	@ (8013864 <handle_mb_tcp_access_list+0x188>)
 801372a:	f007 facb 	bl	801acc4 <mg_fs_lfs_open>
 801372e:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013730:	9a03      	ldr	r2, [sp, #12]
 8013732:	4621      	mov	r1, r4
 8013734:	f007 faf6 	bl	801ad24 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013738:	4628      	mov	r0, r5
 801373a:	f007 fae7 	bl	801ad0c <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 801373e:	9400      	str	r4, [sp, #0]
 8013740:	4b49      	ldr	r3, [pc, #292]	@ (8013868 <handle_mb_tcp_access_list+0x18c>)
 8013742:	4a4a      	ldr	r2, [pc, #296]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013744:	21c8      	movs	r1, #200	@ 0xc8
 8013746:	4630      	mov	r0, r6
 8013748:	f010 fc50 	bl	8023fec <mg_http_reply>
	        free(acl);
 801374c:	4620      	mov	r0, r4
 801374e:	f007 f995 	bl	801aa7c <vPortFree>
}
 8013752:	b00a      	add	sp, #40	@ 0x28
 8013754:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013756:	4946      	ldr	r1, [pc, #280]	@ (8013870 <handle_mb_tcp_access_list+0x194>)
 8013758:	2003      	movs	r0, #3
 801375a:	f7fe fbdf 	bl	8011f1c <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801375e:	4b45      	ldr	r3, [pc, #276]	@ (8013874 <handle_mb_tcp_access_list+0x198>)
 8013760:	4a42      	ldr	r2, [pc, #264]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013762:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013766:	4630      	mov	r0, r6
 8013768:	f010 fc40 	bl	8023fec <mg_http_reply>
		        return;
 801376c:	e7f1      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 801376e:	4b42      	ldr	r3, [pc, #264]	@ (8013878 <handle_mb_tcp_access_list+0x19c>)
 8013770:	4a3e      	ldr	r2, [pc, #248]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013772:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013776:	4630      	mov	r0, r6
 8013778:	f010 fc38 	bl	8023fec <mg_http_reply>
	        return;
 801377c:	e7e9      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801377e:	ad06      	add	r5, sp, #24
 8013780:	493e      	ldr	r1, [pc, #248]	@ (801387c <handle_mb_tcp_access_list+0x1a0>)
 8013782:	4628      	mov	r0, r5
 8013784:	f010 fdbc 	bl	8024300 <mg_str_s>
 8013788:	2300      	movs	r3, #0
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013794:	f010 ffd6 	bl	8024744 <mg_match>
 8013798:	2800      	cmp	r0, #0
 801379a:	d058      	beq.n	801384e <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 801379c:	ab03      	add	r3, sp, #12
 801379e:	4a38      	ldr	r2, [pc, #224]	@ (8013880 <handle_mb_tcp_access_list+0x1a4>)
 80137a0:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80137a4:	c903      	ldmia	r1, {r0, r1}
 80137a6:	f00f fa7d 	bl	8022ca4 <mg_json_get>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	db34      	blt.n	8013818 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 80137ae:	4a35      	ldr	r2, [pc, #212]	@ (8013884 <handle_mb_tcp_access_list+0x1a8>)
 80137b0:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80137b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137b8:	f011 fe92 	bl	80254e0 <mg_json_get_str>
		if (acl){
 80137bc:	4604      	mov	r4, r0
 80137be:	2800      	cmp	r0, #0
 80137c0:	d03d      	beq.n	801383e <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 80137c2:	ad08      	add	r5, sp, #32
 80137c4:	4601      	mov	r1, r0
 80137c6:	4628      	mov	r0, r5
 80137c8:	f010 fd9a 	bl	8024300 <mg_str_s>
 80137cc:	f106 021c 	add.w	r2, r6, #28
 80137d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80137d4:	f012 fca2 	bl	802611c <mg_check_ip_acl>
 80137d8:	2800      	cmp	r0, #0
 80137da:	db25      	blt.n	8013828 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 80137dc:	4d21      	ldr	r5, [pc, #132]	@ (8013864 <handle_mb_tcp_access_list+0x188>)
 80137de:	4628      	mov	r0, r5
 80137e0:	f007 fade 	bl	801ada0 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 80137e4:	2102      	movs	r1, #2
 80137e6:	4628      	mov	r0, r5
 80137e8:	f007 fa6c 	bl	801acc4 <mg_fs_lfs_open>
 80137ec:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7fc fd56 	bl	80102a0 <strlen>
 80137f4:	1c42      	adds	r2, r0, #1
 80137f6:	4621      	mov	r1, r4
 80137f8:	4628      	mov	r0, r5
 80137fa:	f007 fa9f 	bl	801ad3c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 80137fe:	4628      	mov	r0, r5
 8013800:	f007 fa84 	bl	801ad0c <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013804:	4b20      	ldr	r3, [pc, #128]	@ (8013888 <handle_mb_tcp_access_list+0x1ac>)
 8013806:	4a19      	ldr	r2, [pc, #100]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013808:	21c8      	movs	r1, #200	@ 0xc8
 801380a:	4630      	mov	r0, r6
 801380c:	f010 fbee 	bl	8023fec <mg_http_reply>
				free(acl);
 8013810:	4620      	mov	r0, r4
 8013812:	f007 f933 	bl	801aa7c <vPortFree>
				return;
 8013816:	e79c      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013818:	4b1c      	ldr	r3, [pc, #112]	@ (801388c <handle_mb_tcp_access_list+0x1b0>)
 801381a:	4a14      	ldr	r2, [pc, #80]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 801381c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013820:	4630      	mov	r0, r6
 8013822:	f010 fbe3 	bl	8023fec <mg_http_reply>
			return;
 8013826:	e794      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013828:	4b19      	ldr	r3, [pc, #100]	@ (8013890 <handle_mb_tcp_access_list+0x1b4>)
 801382a:	4a10      	ldr	r2, [pc, #64]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 801382c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013830:	4630      	mov	r0, r6
 8013832:	f010 fbdb 	bl	8023fec <mg_http_reply>
				free(acl);
 8013836:	4620      	mov	r0, r4
 8013838:	f007 f920 	bl	801aa7c <vPortFree>
				return;
 801383c:	e789      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 801383e:	4b15      	ldr	r3, [pc, #84]	@ (8013894 <handle_mb_tcp_access_list+0x1b8>)
 8013840:	4a0a      	ldr	r2, [pc, #40]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013842:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013846:	4630      	mov	r0, r6
 8013848:	f010 fbd0 	bl	8023fec <mg_http_reply>
			return;
 801384c:	e781      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801384e:	4b12      	ldr	r3, [pc, #72]	@ (8013898 <handle_mb_tcp_access_list+0x1bc>)
 8013850:	4a06      	ldr	r2, [pc, #24]	@ (801386c <handle_mb_tcp_access_list+0x190>)
 8013852:	f240 1195 	movw	r1, #405	@ 0x195
 8013856:	4630      	mov	r0, r6
 8013858:	f010 fbc8 	bl	8023fec <mg_http_reply>
		return;
 801385c:	e779      	b.n	8013752 <handle_mb_tcp_access_list+0x76>
 801385e:	bf00      	nop
 8013860:	080365c4 	.word	0x080365c4
 8013864:	08036504 	.word	0x08036504
 8013868:	0803709c 	.word	0x0803709c
 801386c:	08036600 	.word	0x08036600
 8013870:	08037040 	.word	0x08037040
 8013874:	08037074 	.word	0x08037074
 8013878:	080370c8 	.word	0x080370c8
 801387c:	0803675c 	.word	0x0803675c
 8013880:	08036e64 	.word	0x08036e64
 8013884:	080370fc 	.word	0x080370fc
 8013888:	08037144 	.word	0x08037144
 801388c:	08036e68 	.word	0x08036e68
 8013890:	0803710c 	.word	0x0803710c
 8013894:	08037198 	.word	0x08037198
 8013898:	080371e0 	.word	0x080371e0

0801389c <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	b0c7      	sub	sp, #284	@ 0x11c
 80138a2:	4681      	mov	r9, r0
 80138a4:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 80138a6:	2272      	movs	r2, #114	@ 0x72
 80138a8:	498e      	ldr	r1, [pc, #568]	@ (8013ae4 <handle_dev_status+0x248>)
 80138aa:	a827      	add	r0, sp, #156	@ 0x9c
 80138ac:	f01a fad4 	bl	802de58 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 80138b0:	2101      	movs	r1, #1
 80138b2:	201e      	movs	r0, #30
 80138b4:	f7ff fdcc 	bl	8013450 <mg_calloc>
 80138b8:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80138ba:	2101      	movs	r1, #1
 80138bc:	202e      	movs	r0, #46	@ 0x2e
 80138be:	f7ff fdc7 	bl	8013450 <mg_calloc>
 80138c2:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80138c4:	2101      	movs	r1, #1
 80138c6:	202e      	movs	r0, #46	@ 0x2e
 80138c8:	f7ff fdc2 	bl	8013450 <mg_calloc>
 80138cc:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80138ce:	2101      	movs	r1, #1
 80138d0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80138d4:	f7ff fdbc 	bl	8013450 <mg_calloc>
 80138d8:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80138da:	2101      	movs	r1, #1
 80138dc:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80138e0:	f7ff fdb6 	bl	8013450 <mg_calloc>
 80138e4:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 80138e6:	2e00      	cmp	r6, #0
 80138e8:	f000 80e3 	beq.w	8013ab2 <handle_dev_status+0x216>
 80138ec:	2f00      	cmp	r7, #0
 80138ee:	f000 80e0 	beq.w	8013ab2 <handle_dev_status+0x216>
 80138f2:	f1b8 0f00 	cmp.w	r8, #0
 80138f6:	f000 80dc 	beq.w	8013ab2 <handle_dev_status+0x216>
 80138fa:	2c00      	cmp	r4, #0
 80138fc:	f000 80d9 	beq.w	8013ab2 <handle_dev_status+0x216>
 8013900:	2800      	cmp	r0, #0
 8013902:	f000 80d6 	beq.w	8013ab2 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013906:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 801390a:	4977      	ldr	r1, [pc, #476]	@ (8013ae8 <handle_dev_status+0x24c>)
 801390c:	4658      	mov	r0, fp
 801390e:	f010 fcf7 	bl	8024300 <mg_str_s>
 8013912:	2300      	movs	r3, #0
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	e89b 000c 	ldmia.w	fp, {r2, r3}
 801391a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801391e:	f010 ff11 	bl	8024744 <mg_match>
 8013922:	2800      	cmp	r0, #0
 8013924:	f000 80bd 	beq.w	8013aa2 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013928:	f001 fb7c 	bl	8015024 <get_mqtt_connection>
			if(!mqtt_connection){
 801392c:	4682      	mov	sl, r0
 801392e:	b358      	cbz	r0, 8013988 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013930:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013934:	f013 0f20 	tst.w	r3, #32
 8013938:	d12c      	bne.n	8013994 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 801393a:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 801393e:	f013 0f20 	tst.w	r3, #32
 8013942:	d02d      	beq.n	80139a0 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013944:	221e      	movs	r2, #30
 8013946:	4969      	ldr	r1, [pc, #420]	@ (8013aec <handle_dev_status+0x250>)
 8013948:	4630      	mov	r0, r6
 801394a:	f019 f890 	bl	802ca6e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 801394e:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013b14 <handle_dev_status+0x278>
 8013952:	f10a 0308 	add.w	r3, sl, #8
 8013956:	9300      	str	r3, [sp, #0]
 8013958:	465b      	mov	r3, fp
 801395a:	4a65      	ldr	r2, [pc, #404]	@ (8013af0 <handle_dev_status+0x254>)
 801395c:	212e      	movs	r1, #46	@ 0x2e
 801395e:	4640      	mov	r0, r8
 8013960:	f00f fe46 	bl	80235f0 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013964:	f10a 031c 	add.w	r3, sl, #28
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	465b      	mov	r3, fp
 801396c:	4a60      	ldr	r2, [pc, #384]	@ (8013af0 <handle_dev_status+0x254>)
 801396e:	212e      	movs	r1, #46	@ 0x2e
 8013970:	4638      	mov	r0, r7
 8013972:	f00f fe3d 	bl	80235f0 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013976:	4620      	mov	r0, r4
 8013978:	f7fc fc92 	bl	80102a0 <strlen>
 801397c:	4b5d      	ldr	r3, [pc, #372]	@ (8013af4 <handle_dev_status+0x258>)
 801397e:	881b      	ldrh	r3, [r3, #0]
 8013980:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013982:	f04f 0a01 	mov.w	sl, #1
 8013986:	e028      	b.n	80139da <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013988:	221e      	movs	r2, #30
 801398a:	495b      	ldr	r1, [pc, #364]	@ (8013af8 <handle_dev_status+0x25c>)
 801398c:	4630      	mov	r0, r6
 801398e:	f019 f86e 	bl	802ca6e <strncpy>
 8013992:	e7f0      	b.n	8013976 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013994:	221e      	movs	r2, #30
 8013996:	4959      	ldr	r1, [pc, #356]	@ (8013afc <handle_dev_status+0x260>)
 8013998:	4630      	mov	r0, r6
 801399a:	f019 f868 	bl	802ca6e <strncpy>
 801399e:	e7d6      	b.n	801394e <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 80139a0:	221e      	movs	r2, #30
 80139a2:	4957      	ldr	r1, [pc, #348]	@ (8013b00 <handle_dev_status+0x264>)
 80139a4:	4630      	mov	r0, r6
 80139a6:	f019 f862 	bl	802ca6e <strncpy>
 80139aa:	e7d0      	b.n	801394e <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 80139ac:	fa5f f38a 	uxtb.w	r3, sl
 80139b0:	2201      	movs	r2, #1
 80139b2:	2180      	movs	r1, #128	@ 0x80
 80139b4:	a807      	add	r0, sp, #28
 80139b6:	f001 ff25 	bl	8015804 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80139ba:	a907      	add	r1, sp, #28
 80139bc:	4620      	mov	r0, r4
 80139be:	f019 f817 	bl	802c9f0 <strcat>
				strcat(pub_topics_str, "\", \"");
 80139c2:	4620      	mov	r0, r4
 80139c4:	f7fc fc6c 	bl	80102a0 <strlen>
 80139c8:	4603      	mov	r3, r0
 80139ca:	1821      	adds	r1, r4, r0
 80139cc:	4a4d      	ldr	r2, [pc, #308]	@ (8013b04 <handle_dev_status+0x268>)
 80139ce:	6810      	ldr	r0, [r2, #0]
 80139d0:	50e0      	str	r0, [r4, r3]
 80139d2:	7913      	ldrb	r3, [r2, #4]
 80139d4:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80139d6:	f10a 0a01 	add.w	sl, sl, #1
 80139da:	f1ba 0f03 	cmp.w	sl, #3
 80139de:	dde5      	ble.n	80139ac <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80139e0:	f04f 0a01 	mov.w	sl, #1
 80139e4:	e007      	b.n	80139f6 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 80139e6:	4620      	mov	r0, r4
 80139e8:	f7fc fc5a 	bl	80102a0 <strlen>
 80139ec:	4b41      	ldr	r3, [pc, #260]	@ (8013af4 <handle_dev_status+0x258>)
 80139ee:	881b      	ldrh	r3, [r3, #0]
 80139f0:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80139f2:	f10a 0a01 	add.w	sl, sl, #1
 80139f6:	f1ba 0f03 	cmp.w	sl, #3
 80139fa:	dc18      	bgt.n	8013a2e <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80139fc:	fa5f f38a 	uxtb.w	r3, sl
 8013a00:	2202      	movs	r2, #2
 8013a02:	2180      	movs	r1, #128	@ 0x80
 8013a04:	a807      	add	r0, sp, #28
 8013a06:	f001 fefd 	bl	8015804 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013a0a:	a907      	add	r1, sp, #28
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f018 ffef 	bl	802c9f0 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013a12:	f1ba 0f02 	cmp.w	sl, #2
 8013a16:	dce6      	bgt.n	80139e6 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f7fc fc41 	bl	80102a0 <strlen>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	1821      	adds	r1, r4, r0
 8013a22:	4a38      	ldr	r2, [pc, #224]	@ (8013b04 <handle_dev_status+0x268>)
 8013a24:	6810      	ldr	r0, [r2, #0]
 8013a26:	50e0      	str	r0, [r4, r3]
 8013a28:	7913      	ldrb	r3, [r2, #4]
 8013a2a:	710b      	strb	r3, [r1, #4]
 8013a2c:	e7e1      	b.n	80139f2 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013a2e:	4628      	mov	r0, r5
 8013a30:	f7fc fc36 	bl	80102a0 <strlen>
 8013a34:	4b2f      	ldr	r3, [pc, #188]	@ (8013af4 <handle_dev_status+0x258>)
 8013a36:	881b      	ldrh	r3, [r3, #0]
 8013a38:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013a3a:	f04f 0a01 	mov.w	sl, #1
 8013a3e:	e007      	b.n	8013a50 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013a40:	4628      	mov	r0, r5
 8013a42:	f7fc fc2d 	bl	80102a0 <strlen>
 8013a46:	4b2b      	ldr	r3, [pc, #172]	@ (8013af4 <handle_dev_status+0x258>)
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013a4c:	f10a 0a01 	add.w	sl, sl, #1
 8013a50:	f1ba 0f03 	cmp.w	sl, #3
 8013a54:	dc18      	bgt.n	8013a88 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013a56:	fa5f f38a 	uxtb.w	r3, sl
 8013a5a:	2202      	movs	r2, #2
 8013a5c:	2180      	movs	r1, #128	@ 0x80
 8013a5e:	a807      	add	r0, sp, #28
 8013a60:	f001 feb8 	bl	80157d4 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013a64:	a907      	add	r1, sp, #28
 8013a66:	4628      	mov	r0, r5
 8013a68:	f018 ffc2 	bl	802c9f0 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013a6c:	f1ba 0f02 	cmp.w	sl, #2
 8013a70:	dce6      	bgt.n	8013a40 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013a72:	4628      	mov	r0, r5
 8013a74:	f7fc fc14 	bl	80102a0 <strlen>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	1829      	adds	r1, r5, r0
 8013a7c:	4a21      	ldr	r2, [pc, #132]	@ (8013b04 <handle_dev_status+0x268>)
 8013a7e:	6810      	ldr	r0, [r2, #0]
 8013a80:	50e8      	str	r0, [r5, r3]
 8013a82:	7913      	ldrb	r3, [r2, #4]
 8013a84:	710b      	strb	r3, [r1, #4]
 8013a86:	e7e1      	b.n	8013a4c <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013a88:	9504      	str	r5, [sp, #16]
 8013a8a:	9403      	str	r4, [sp, #12]
 8013a8c:	9702      	str	r7, [sp, #8]
 8013a8e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013a92:	9600      	str	r6, [sp, #0]
 8013a94:	ab27      	add	r3, sp, #156	@ 0x9c
 8013a96:	4a1c      	ldr	r2, [pc, #112]	@ (8013b08 <handle_dev_status+0x26c>)
 8013a98:	21c8      	movs	r1, #200	@ 0xc8
 8013a9a:	4648      	mov	r0, r9
 8013a9c:	f010 faa6 	bl	8023fec <mg_http_reply>
 8013aa0:	e00e      	b.n	8013ac0 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b0c <handle_dev_status+0x270>)
 8013aa4:	4a18      	ldr	r2, [pc, #96]	@ (8013b08 <handle_dev_status+0x26c>)
 8013aa6:	f240 1195 	movw	r1, #405	@ 0x195
 8013aaa:	4648      	mov	r0, r9
 8013aac:	f010 fa9e 	bl	8023fec <mg_http_reply>
 8013ab0:	e006      	b.n	8013ac0 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013ab2:	4b17      	ldr	r3, [pc, #92]	@ (8013b10 <handle_dev_status+0x274>)
 8013ab4:	4a14      	ldr	r2, [pc, #80]	@ (8013b08 <handle_dev_status+0x26c>)
 8013ab6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013aba:	4648      	mov	r0, r9
 8013abc:	f010 fa96 	bl	8023fec <mg_http_reply>
	free(mqtt_status_str);
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f006 ffdb 	bl	801aa7c <vPortFree>
	free(mqtt_server_addr);
 8013ac6:	4638      	mov	r0, r7
 8013ac8:	f006 ffd8 	bl	801aa7c <vPortFree>
	free(mqtt_local_addr);
 8013acc:	4640      	mov	r0, r8
 8013ace:	f006 ffd5 	bl	801aa7c <vPortFree>
	free(pub_topics_str);
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f006 ffd2 	bl	801aa7c <vPortFree>
	free(subscr_topics_str);
 8013ad8:	4628      	mov	r0, r5
 8013ada:	f006 ffcf 	bl	801aa7c <vPortFree>
}
 8013ade:	b047      	add	sp, #284	@ 0x11c
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	080372a0 	.word	0x080372a0
 8013ae8:	080365c4 	.word	0x080365c4
 8013aec:	08037240 	.word	0x08037240
 8013af0:	08037254 	.word	0x08037254
 8013af4:	08037258 	.word	0x08037258
 8013af8:	0803afcc 	.word	0x0803afcc
 8013afc:	08037234 	.word	0x08037234
 8013b00:	08037248 	.word	0x08037248
 8013b04:	0803725c 	.word	0x0803725c
 8013b08:	08036600 	.word	0x08036600
 8013b0c:	08036d7c 	.word	0x08036d7c
 8013b10:	08037264 	.word	0x08037264
 8013b14:	0802609d 	.word	0x0802609d

08013b18 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b1a:	b08d      	sub	sp, #52	@ 0x34
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	460c      	mov	r4, r1
 8013b20:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013b22:	ae08      	add	r6, sp, #32
 8013b24:	4923      	ldr	r1, [pc, #140]	@ (8013bb4 <handle_fs_get_log+0x9c>)
 8013b26:	4630      	mov	r0, r6
 8013b28:	f010 fbea 	bl	8024300 <mg_str_s>
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	9300      	str	r3, [sp, #0]
 8013b30:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b38:	f010 fe04 	bl	8024744 <mg_match>
 8013b3c:	b318      	cbz	r0, 8013b86 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013b3e:	2300      	movs	r3, #0
 8013b40:	9302      	str	r3, [sp, #8]
 8013b42:	9303      	str	r3, [sp, #12]
 8013b44:	9304      	str	r3, [sp, #16]
 8013b46:	9305      	str	r3, [sp, #20]
 8013b48:	9306      	str	r3, [sp, #24]
 8013b4a:	9307      	str	r3, [sp, #28]
 8013b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8013bb8 <handle_fs_get_log+0xa0>)
 8013b4e:	9302      	str	r3, [sp, #8]
 8013b50:	4b1a      	ldr	r3, [pc, #104]	@ (8013bbc <handle_fs_get_log+0xa4>)
 8013b52:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013b54:	b145      	cbz	r5, 8013b68 <handle_fs_get_log+0x50>
 8013b56:	2d01      	cmp	r5, #1
 8013b58:	d00e      	beq.n	8013b78 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013b5a:	ab02      	add	r3, sp, #8
 8013b5c:	4a18      	ldr	r2, [pc, #96]	@ (8013bc0 <handle_fs_get_log+0xa8>)
 8013b5e:	4621      	mov	r1, r4
 8013b60:	4638      	mov	r0, r7
 8013b62:	f010 ffab 	bl	8024abc <mg_http_serve_file>
				break;
 8013b66:	e005      	b.n	8013b74 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013b68:	ab02      	add	r3, sp, #8
 8013b6a:	4a15      	ldr	r2, [pc, #84]	@ (8013bc0 <handle_fs_get_log+0xa8>)
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	4638      	mov	r0, r7
 8013b70:	f010 ffa4 	bl	8024abc <mg_http_serve_file>
}
 8013b74:	b00d      	add	sp, #52	@ 0x34
 8013b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013b78:	ab02      	add	r3, sp, #8
 8013b7a:	4a12      	ldr	r2, [pc, #72]	@ (8013bc4 <handle_fs_get_log+0xac>)
 8013b7c:	4621      	mov	r1, r4
 8013b7e:	4638      	mov	r0, r7
 8013b80:	f010 ff9c 	bl	8024abc <mg_http_serve_file>
				break;
 8013b84:	e7f6      	b.n	8013b74 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013b86:	ad0a      	add	r5, sp, #40	@ 0x28
 8013b88:	490f      	ldr	r1, [pc, #60]	@ (8013bc8 <handle_fs_get_log+0xb0>)
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f010 fbb8 	bl	8024300 <mg_str_s>
 8013b90:	2300      	movs	r3, #0
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b9c:	f010 fdd2 	bl	8024744 <mg_match>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d1e7      	bne.n	8013b74 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013ba4:	4b09      	ldr	r3, [pc, #36]	@ (8013bcc <handle_fs_get_log+0xb4>)
 8013ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8013bd0 <handle_fs_get_log+0xb8>)
 8013ba8:	f240 1195 	movw	r1, #405	@ 0x195
 8013bac:	4638      	mov	r0, r7
 8013bae:	f010 fa1d 	bl	8023fec <mg_http_reply>
}
 8013bb2:	e7df      	b.n	8013b74 <handle_fs_get_log+0x5c>
 8013bb4:	080365c4 	.word	0x080365c4
 8013bb8:	08037a58 	.word	0x08037a58
 8013bbc:	200000a0 	.word	0x200000a0
 8013bc0:	080360d4 	.word	0x080360d4
 8013bc4:	080360e4 	.word	0x080360e4
 8013bc8:	0803675c 	.word	0x0803675c
 8013bcc:	08037314 	.word	0x08037314
 8013bd0:	08036600 	.word	0x08036600

08013bd4 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	460d      	mov	r5, r1
 8013bda:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013bdc:	4f0b      	ldr	r7, [pc, #44]	@ (8013c0c <write_users+0x38>)
 8013bde:	6a3b      	ldr	r3, [r7, #32]
 8013be0:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013be2:	2202      	movs	r2, #2
 8013be4:	4621      	mov	r1, r4
 8013be6:	4638      	mov	r0, r7
 8013be8:	f00e ff72 	bl	8022ad0 <mg_fs_open>
 8013bec:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	22a9      	movs	r2, #169	@ 0xa9
 8013bf2:	fb06 f202 	mul.w	r2, r6, r2
 8013bf6:	4629      	mov	r1, r5
 8013bf8:	6800      	ldr	r0, [r0, #0]
 8013bfa:	4798      	blx	r3
	mg_fs_close(fd);
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f00e ff80 	bl	8022b02 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 8013c02:	4903      	ldr	r1, [pc, #12]	@ (8013c10 <write_users+0x3c>)
 8013c04:	2001      	movs	r0, #1
 8013c06:	f7fe f989 	bl	8011f1c <logging>
}
 8013c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c0c:	200000a0 	.word	0x200000a0
 8013c10:	0803736c 	.word	0x0803736c

08013c14 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c18:	b0ae      	sub	sp, #184	@ 0xb8
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013c1e:	ad26      	add	r5, sp, #152	@ 0x98
 8013c20:	49a8      	ldr	r1, [pc, #672]	@ (8013ec4 <handle_manage_user+0x2b0>)
 8013c22:	4628      	mov	r0, r5
 8013c24:	f010 fb6c 	bl	8024300 <mg_str_s>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c34:	f010 fd86 	bl	8024744 <mg_match>
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	d143      	bne.n	8013cc4 <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013c3c:	ad28      	add	r5, sp, #160	@ 0xa0
 8013c3e:	49a2      	ldr	r1, [pc, #648]	@ (8013ec8 <handle_manage_user+0x2b4>)
 8013c40:	4628      	mov	r0, r5
 8013c42:	f010 fb5d 	bl	8024300 <mg_str_s>
 8013c46:	2300      	movs	r3, #0
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c52:	f010 fd77 	bl	8024744 <mg_match>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	f000 80fd 	beq.w	8013e56 <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013c5c:	ab03      	add	r3, sp, #12
 8013c5e:	4a9b      	ldr	r2, [pc, #620]	@ (8013ecc <handle_manage_user+0x2b8>)
 8013c60:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013c64:	c903      	ldmia	r1, {r0, r1}
 8013c66:	f00f f81d 	bl	8022ca4 <mg_json_get>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	f2c0 8089 	blt.w	8013d82 <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013c70:	4a97      	ldr	r2, [pc, #604]	@ (8013ed0 <handle_manage_user+0x2bc>)
 8013c72:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c7a:	f011 fc31 	bl	80254e0 <mg_json_get_str>
 8013c7e:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013c80:	4a94      	ldr	r2, [pc, #592]	@ (8013ed4 <handle_manage_user+0x2c0>)
 8013c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c86:	f011 fc2b 	bl	80254e0 <mg_json_get_str>
 8013c8a:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	f000 80d4 	beq.w	8013e3a <handle_manage_user+0x226>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	f000 80d1 	beq.w	8013e3a <handle_manage_user+0x226>
 8013c98:	782b      	ldrb	r3, [r5, #0]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f000 80cd 	beq.w	8013e3a <handle_manage_user+0x226>
 8013ca0:	7803      	ldrb	r3, [r0, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	f000 80c9 	beq.w	8013e3a <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 8013ca8:	2400      	movs	r4, #0
 8013caa:	2c09      	cmp	r4, #9
 8013cac:	dc7f      	bgt.n	8013dae <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013cae:	4629      	mov	r1, r5
 8013cb0:	20a9      	movs	r0, #169	@ 0xa9
 8013cb2:	4b89      	ldr	r3, [pc, #548]	@ (8013ed8 <handle_manage_user+0x2c4>)
 8013cb4:	fb00 3004 	mla	r0, r0, r4, r3
 8013cb8:	f7fc fa92 	bl	80101e0 <strcmp>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	d068      	beq.n	8013d92 <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 8013cc0:	3401      	adds	r4, #1
 8013cc2:	e7f2      	b.n	8013caa <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013cca:	f7ff fbc1 	bl	8013450 <mg_calloc>
 8013cce:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013cd0:	2101      	movs	r1, #1
 8013cd2:	20a0      	movs	r0, #160	@ 0xa0
 8013cd4:	f7ff fbbc 	bl	8013450 <mg_calloc>
 8013cd8:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013cda:	2f00      	cmp	r7, #0
 8013cdc:	d03d      	beq.n	8013d5a <handle_manage_user+0x146>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d03b      	beq.n	8013d5a <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013ce2:	4b7e      	ldr	r3, [pc, #504]	@ (8013edc <handle_manage_user+0x2c8>)
 8013ce4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ce6:	6038      	str	r0, [r7, #0]
 8013ce8:	6079      	str	r1, [r7, #4]
 8013cea:	60ba      	str	r2, [r7, #8]
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	733b      	strb	r3, [r7, #12]
 8013cf0:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013cf2:	2400      	movs	r4, #0
 8013cf4:	e008      	b.n	8013d08 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013cf6:	4643      	mov	r3, r8
 8013cf8:	4a79      	ldr	r2, [pc, #484]	@ (8013ee0 <handle_manage_user+0x2cc>)
 8013cfa:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013cfe:	1978      	adds	r0, r7, r5
 8013d00:	f018 f944 	bl	802bf8c <snprintf>
 8013d04:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013d06:	3401      	adds	r4, #1
 8013d08:	2c09      	cmp	r4, #9
 8013d0a:	dc18      	bgt.n	8013d3e <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013d0c:	22a9      	movs	r2, #169	@ 0xa9
 8013d0e:	fb04 f202 	mul.w	r2, r4, r2
 8013d12:	4b71      	ldr	r3, [pc, #452]	@ (8013ed8 <handle_manage_user+0x2c4>)
 8013d14:	5c9a      	ldrb	r2, [r3, r2]
 8013d16:	2a00      	cmp	r2, #0
 8013d18:	d0f5      	beq.n	8013d06 <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013d1a:	22a9      	movs	r2, #169	@ 0xa9
 8013d1c:	fb02 3304 	mla	r3, r2, r4, r3
 8013d20:	4a70      	ldr	r2, [pc, #448]	@ (8013ee4 <handle_manage_user+0x2d0>)
 8013d22:	21a0      	movs	r1, #160	@ 0xa0
 8013d24:	4640      	mov	r0, r8
 8013d26:	f018 f931 	bl	802bf8c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013d2a:	2d0c      	cmp	r5, #12
 8013d2c:	d9e3      	bls.n	8013cf6 <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8013ee8 <handle_manage_user+0x2d4>)
 8013d30:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013d34:	1978      	adds	r0, r7, r5
 8013d36:	f018 f929 	bl	802bf8c <snprintf>
 8013d3a:	4405      	add	r5, r0
 8013d3c:	e7db      	b.n	8013cf6 <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013d3e:	4a6b      	ldr	r2, [pc, #428]	@ (8013eec <handle_manage_user+0x2d8>)
 8013d40:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013d44:	1978      	adds	r0, r7, r5
 8013d46:	f018 f921 	bl	802bf8c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8013d4a:	9700      	str	r7, [sp, #0]
 8013d4c:	4b64      	ldr	r3, [pc, #400]	@ (8013ee0 <handle_manage_user+0x2cc>)
 8013d4e:	4a68      	ldr	r2, [pc, #416]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013d50:	21c8      	movs	r1, #200	@ 0xc8
 8013d52:	4630      	mov	r0, r6
 8013d54:	f010 f94a 	bl	8023fec <mg_http_reply>
 8013d58:	e00a      	b.n	8013d70 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013d5a:	4966      	ldr	r1, [pc, #408]	@ (8013ef4 <handle_manage_user+0x2e0>)
 8013d5c:	2003      	movs	r0, #3
 8013d5e:	f7fe f8dd 	bl	8011f1c <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013d62:	4b65      	ldr	r3, [pc, #404]	@ (8013ef8 <handle_manage_user+0x2e4>)
 8013d64:	4a62      	ldr	r2, [pc, #392]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013d66:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	f010 f93e 	bl	8023fec <mg_http_reply>
	    free(response);
 8013d70:	4638      	mov	r0, r7
 8013d72:	f006 fe83 	bl	801aa7c <vPortFree>
	    free(user_entry);
 8013d76:	4640      	mov	r0, r8
 8013d78:	f006 fe80 	bl	801aa7c <vPortFree>
}
 8013d7c:	b02e      	add	sp, #184	@ 0xb8
 8013d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 8013d82:	4b5e      	ldr	r3, [pc, #376]	@ (8013efc <handle_manage_user+0x2e8>)
 8013d84:	4a5a      	ldr	r2, [pc, #360]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013d86:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f010 f92e 	bl	8023fec <mg_http_reply>
	        return;
 8013d90:	e7f4      	b.n	8013d7c <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 8013d92:	4b5b      	ldr	r3, [pc, #364]	@ (8013f00 <handle_manage_user+0x2ec>)
 8013d94:	4a56      	ldr	r2, [pc, #344]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013d96:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f010 f926 	bl	8023fec <mg_http_reply>
	                free(username_add);
 8013da0:	4628      	mov	r0, r5
 8013da2:	f006 fe6b 	bl	801aa7c <vPortFree>
	                free(password_add);
 8013da6:	4638      	mov	r0, r7
 8013da8:	f006 fe68 	bl	801aa7c <vPortFree>
	                return;
 8013dac:	e7e6      	b.n	8013d7c <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 8013dae:	2400      	movs	r4, #0
 8013db0:	9404      	str	r4, [sp, #16]
 8013db2:	2225      	movs	r2, #37	@ 0x25
 8013db4:	4621      	mov	r1, r4
 8013db6:	a805      	add	r0, sp, #20
 8013db8:	f018 fe12 	bl	802c9e0 <memset>
			mg_sha1_init(&sha1_ctx);
 8013dbc:	a80f      	add	r0, sp, #60	@ 0x3c
 8013dbe:	f010 f9ed 	bl	802419c <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013dc2:	4638      	mov	r0, r7
 8013dc4:	f7fc fa6c 	bl	80102a0 <strlen>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	4639      	mov	r1, r7
 8013dcc:	a80f      	add	r0, sp, #60	@ 0x3c
 8013dce:	f010 f9ff 	bl	80241d0 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013dd2:	a90f      	add	r1, sp, #60	@ 0x3c
 8013dd4:	a804      	add	r0, sp, #16
 8013dd6:	f010 fa35 	bl	8024244 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 8013dda:	4621      	mov	r1, r4
 8013ddc:	2909      	cmp	r1, #9
 8013dde:	dc24      	bgt.n	8013e2a <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013de0:	23a9      	movs	r3, #169	@ 0xa9
 8013de2:	fb01 f303 	mul.w	r3, r1, r3
 8013de6:	4a3c      	ldr	r2, [pc, #240]	@ (8013ed8 <handle_manage_user+0x2c4>)
 8013de8:	5cd3      	ldrb	r3, [r2, r3]
 8013dea:	b10b      	cbz	r3, 8013df0 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 8013dec:	3101      	adds	r1, #1
 8013dee:	e7f5      	b.n	8013ddc <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013df0:	23a9      	movs	r3, #169	@ 0xa9
 8013df2:	fb03 f401 	mul.w	r4, r3, r1
 8013df6:	4690      	mov	r8, r2
 8013df8:	227f      	movs	r2, #127	@ 0x7f
 8013dfa:	4629      	mov	r1, r5
 8013dfc:	eb08 0004 	add.w	r0, r8, r4
 8013e00:	f018 fe35 	bl	802ca6e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013e04:	3480      	adds	r4, #128	@ 0x80
 8013e06:	2228      	movs	r2, #40	@ 0x28
 8013e08:	a904      	add	r1, sp, #16
 8013e0a:	eb08 0004 	add.w	r0, r8, r4
 8013e0e:	f018 fe2e 	bl	802ca6e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 8013e12:	220a      	movs	r2, #10
 8013e14:	4641      	mov	r1, r8
 8013e16:	483b      	ldr	r0, [pc, #236]	@ (8013f04 <handle_manage_user+0x2f0>)
 8013e18:	f7ff fedc 	bl	8013bd4 <write_users>
	            mg_http_reply(c, 200, headers,
 8013e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8013f08 <handle_manage_user+0x2f4>)
 8013e1e:	4a34      	ldr	r2, [pc, #208]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013e20:	21c8      	movs	r1, #200	@ 0xc8
 8013e22:	4630      	mov	r0, r6
 8013e24:	f010 f8e2 	bl	8023fec <mg_http_reply>
 8013e28:	e00e      	b.n	8013e48 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 8013e2a:	4b38      	ldr	r3, [pc, #224]	@ (8013f0c <handle_manage_user+0x2f8>)
 8013e2c:	4a30      	ldr	r2, [pc, #192]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013e2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e32:	4630      	mov	r0, r6
 8013e34:	f010 f8da 	bl	8023fec <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013e38:	e006      	b.n	8013e48 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 8013e3a:	4b35      	ldr	r3, [pc, #212]	@ (8013f10 <handle_manage_user+0x2fc>)
 8013e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013e3e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e42:	4630      	mov	r0, r6
 8013e44:	f010 f8d2 	bl	8023fec <mg_http_reply>
		free(username_add);
 8013e48:	4628      	mov	r0, r5
 8013e4a:	f006 fe17 	bl	801aa7c <vPortFree>
		free(password_add);
 8013e4e:	4638      	mov	r0, r7
 8013e50:	f006 fe14 	bl	801aa7c <vPortFree>
		return;
 8013e54:	e792      	b.n	8013d7c <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013e56:	ad2a      	add	r5, sp, #168	@ 0xa8
 8013e58:	492e      	ldr	r1, [pc, #184]	@ (8013f14 <handle_manage_user+0x300>)
 8013e5a:	4628      	mov	r0, r5
 8013e5c:	f010 fa50 	bl	8024300 <mg_str_s>
 8013e60:	2300      	movs	r3, #0
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e6c:	f010 fc6a 	bl	8024744 <mg_match>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d155      	bne.n	8013f20 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013e74:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013e76:	4928      	ldr	r1, [pc, #160]	@ (8013f18 <handle_manage_user+0x304>)
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f010 fa41 	bl	8024300 <mg_str_s>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e8a:	f010 fc5b 	bl	8024744 <mg_match>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f000 80f3 	beq.w	801407a <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8013e94:	4a0e      	ldr	r2, [pc, #56]	@ (8013ed0 <handle_manage_user+0x2bc>)
 8013e96:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e9e:	f011 fb1f 	bl	80254e0 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8013ea2:	4607      	mov	r7, r0
 8013ea4:	b118      	cbz	r0, 8013eae <handle_manage_user+0x29a>
 8013ea6:	7803      	ldrb	r3, [r0, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f040 80cf 	bne.w	801404c <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 8013eae:	4b1b      	ldr	r3, [pc, #108]	@ (8013f1c <handle_manage_user+0x308>)
 8013eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8013ef0 <handle_manage_user+0x2dc>)
 8013eb2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	f010 f898 	bl	8023fec <mg_http_reply>
	    free(username_del);
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	f006 fddd 	bl	801aa7c <vPortFree>
 8013ec2:	e75b      	b.n	8013d7c <handle_manage_user+0x168>
 8013ec4:	080365c4 	.word	0x080365c4
 8013ec8:	0803675c 	.word	0x0803675c
 8013ecc:	08036e64 	.word	0x08036e64
 8013ed0:	080373ac 	.word	0x080373ac
 8013ed4:	080373b4 	.word	0x080373b4
 8013ed8:	200021b8 	.word	0x200021b8
 8013edc:	08037384 	.word	0x08037384
 8013ee0:	0803afd8 	.word	0x0803afd8
 8013ee4:	08037394 	.word	0x08037394
 8013ee8:	080373a4 	.word	0x080373a4
 8013eec:	080373a8 	.word	0x080373a8
 8013ef0:	08036600 	.word	0x08036600
 8013ef4:	08037040 	.word	0x08037040
 8013ef8:	08037074 	.word	0x08037074
 8013efc:	08036e68 	.word	0x08036e68
 8013f00:	080373bc 	.word	0x080373bc
 8013f04:	0803602c 	.word	0x0803602c
 8013f08:	080373f8 	.word	0x080373f8
 8013f0c:	08037434 	.word	0x08037434
 8013f10:	08037468 	.word	0x08037468
 8013f14:	080374a8 	.word	0x080374a8
 8013f18:	08037564 	.word	0x08037564
 8013f1c:	08037600 	.word	0x08037600
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013f20:	ab03      	add	r3, sp, #12
 8013f22:	4a5a      	ldr	r2, [pc, #360]	@ (801408c <handle_manage_user+0x478>)
 8013f24:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013f28:	c903      	ldmia	r1, {r0, r1}
 8013f2a:	f00e febb 	bl	8022ca4 <mg_json_get>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	db21      	blt.n	8013f76 <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8013f32:	4a57      	ldr	r2, [pc, #348]	@ (8014090 <handle_manage_user+0x47c>)
 8013f34:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013f38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f3c:	f011 fad0 	bl	80254e0 <mg_json_get_str>
 8013f40:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8013f42:	4a54      	ldr	r2, [pc, #336]	@ (8014094 <handle_manage_user+0x480>)
 8013f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f48:	f011 faca 	bl	80254e0 <mg_json_get_str>
 8013f4c:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013f4e:	b125      	cbz	r5, 8013f5a <handle_manage_user+0x346>
 8013f50:	b118      	cbz	r0, 8013f5a <handle_manage_user+0x346>
 8013f52:	782b      	ldrb	r3, [r5, #0]
 8013f54:	b10b      	cbz	r3, 8013f5a <handle_manage_user+0x346>
 8013f56:	7803      	ldrb	r3, [r0, #0]
 8013f58:	b9bb      	cbnz	r3, 8013f8a <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 8013f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8014098 <handle_manage_user+0x484>)
 8013f5c:	4a4f      	ldr	r2, [pc, #316]	@ (801409c <handle_manage_user+0x488>)
 8013f5e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f62:	4630      	mov	r0, r6
 8013f64:	f010 f842 	bl	8023fec <mg_http_reply>
	    free(username_edit);
 8013f68:	4628      	mov	r0, r5
 8013f6a:	f006 fd87 	bl	801aa7c <vPortFree>
	    free(new_password);
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f006 fd84 	bl	801aa7c <vPortFree>
	    return;
 8013f74:	e702      	b.n	8013d7c <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 8013f76:	4b4a      	ldr	r3, [pc, #296]	@ (80140a0 <handle_manage_user+0x48c>)
 8013f78:	4a48      	ldr	r2, [pc, #288]	@ (801409c <handle_manage_user+0x488>)
 8013f7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f010 f834 	bl	8023fec <mg_http_reply>
	    char *new_password = NULL;
 8013f84:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8013f86:	4625      	mov	r5, r4
 8013f88:	e7ee      	b.n	8013f68 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 8013f8a:	2700      	movs	r7, #0
 8013f8c:	9704      	str	r7, [sp, #16]
 8013f8e:	2225      	movs	r2, #37	@ 0x25
 8013f90:	4639      	mov	r1, r7
 8013f92:	a805      	add	r0, sp, #20
 8013f94:	f018 fd24 	bl	802c9e0 <memset>
	            mg_sha1_init(&sha1_ctx);
 8013f98:	a80f      	add	r0, sp, #60	@ 0x3c
 8013f9a:	f010 f8ff 	bl	802419c <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f7fc f97e 	bl	80102a0 <strlen>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	a80f      	add	r0, sp, #60	@ 0x3c
 8013faa:	f010 f911 	bl	80241d0 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 8013fae:	a90f      	add	r1, sp, #60	@ 0x3c
 8013fb0:	a804      	add	r0, sp, #16
 8013fb2:	f010 f947 	bl	8024244 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8013fb6:	2f09      	cmp	r7, #9
 8013fb8:	dc25      	bgt.n	8014006 <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 8013fba:	4629      	mov	r1, r5
 8013fbc:	20a9      	movs	r0, #169	@ 0xa9
 8013fbe:	4b39      	ldr	r3, [pc, #228]	@ (80140a4 <handle_manage_user+0x490>)
 8013fc0:	fb00 3007 	mla	r0, r0, r7, r3
 8013fc4:	f7fc f90c 	bl	80101e0 <strcmp>
 8013fc8:	b108      	cbz	r0, 8013fce <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 8013fca:	3701      	adds	r7, #1
 8013fcc:	e7f3      	b.n	8013fb6 <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013fce:	23a9      	movs	r3, #169	@ 0xa9
 8013fd0:	fb03 f707 	mul.w	r7, r3, r7
 8013fd4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013fd8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80140a4 <handle_manage_user+0x490>
 8013fdc:	2228      	movs	r2, #40	@ 0x28
 8013fde:	a904      	add	r1, sp, #16
 8013fe0:	4440      	add	r0, r8
 8013fe2:	f018 fd44 	bl	802ca6e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013fe6:	4447      	add	r7, r8
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8013fee:	220a      	movs	r2, #10
 8013ff0:	4641      	mov	r1, r8
 8013ff2:	482d      	ldr	r0, [pc, #180]	@ (80140a8 <handle_manage_user+0x494>)
 8013ff4:	f7ff fdee 	bl	8013bd4 <write_users>
	                mg_http_reply(c, 200, headers,
 8013ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80140ac <handle_manage_user+0x498>)
 8013ffa:	4a28      	ldr	r2, [pc, #160]	@ (801409c <handle_manage_user+0x488>)
 8013ffc:	21c8      	movs	r1, #200	@ 0xc8
 8013ffe:	4630      	mov	r0, r6
 8014000:	f00f fff4 	bl	8023fec <mg_http_reply>
 8014004:	e7b0      	b.n	8013f68 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 8014006:	4b2a      	ldr	r3, [pc, #168]	@ (80140b0 <handle_manage_user+0x49c>)
 8014008:	4a24      	ldr	r2, [pc, #144]	@ (801409c <handle_manage_user+0x488>)
 801400a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801400e:	4630      	mov	r0, r6
 8014010:	f00f ffec 	bl	8023fec <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8014014:	e7a8      	b.n	8013f68 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8014016:	2280      	movs	r2, #128	@ 0x80
 8014018:	2100      	movs	r1, #0
 801401a:	4628      	mov	r0, r5
 801401c:	f018 fce0 	bl	802c9e0 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8014020:	23a9      	movs	r3, #169	@ 0xa9
 8014022:	fb03 f004 	mul.w	r0, r3, r4
 8014026:	3080      	adds	r0, #128	@ 0x80
 8014028:	4c1e      	ldr	r4, [pc, #120]	@ (80140a4 <handle_manage_user+0x490>)
 801402a:	2229      	movs	r2, #41	@ 0x29
 801402c:	2100      	movs	r1, #0
 801402e:	4420      	add	r0, r4
 8014030:	f018 fcd6 	bl	802c9e0 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8014034:	220a      	movs	r2, #10
 8014036:	4621      	mov	r1, r4
 8014038:	481b      	ldr	r0, [pc, #108]	@ (80140a8 <handle_manage_user+0x494>)
 801403a:	f7ff fdcb 	bl	8013bd4 <write_users>
	            mg_http_reply(c, 200, headers,
 801403e:	4b1d      	ldr	r3, [pc, #116]	@ (80140b4 <handle_manage_user+0x4a0>)
 8014040:	4a16      	ldr	r2, [pc, #88]	@ (801409c <handle_manage_user+0x488>)
 8014042:	21c8      	movs	r1, #200	@ 0xc8
 8014044:	4630      	mov	r0, r6
 8014046:	f00f ffd1 	bl	8023fec <mg_http_reply>
 801404a:	e737      	b.n	8013ebc <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801404c:	2401      	movs	r4, #1
 801404e:	2c09      	cmp	r4, #9
 8014050:	dc0b      	bgt.n	801406a <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8014052:	23a9      	movs	r3, #169	@ 0xa9
 8014054:	4d13      	ldr	r5, [pc, #76]	@ (80140a4 <handle_manage_user+0x490>)
 8014056:	fb03 5504 	mla	r5, r3, r4, r5
 801405a:	4639      	mov	r1, r7
 801405c:	4628      	mov	r0, r5
 801405e:	f7fc f8bf 	bl	80101e0 <strcmp>
 8014062:	2800      	cmp	r0, #0
 8014064:	d0d7      	beq.n	8014016 <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014066:	3401      	adds	r4, #1
 8014068:	e7f1      	b.n	801404e <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 801406a:	4b13      	ldr	r3, [pc, #76]	@ (80140b8 <handle_manage_user+0x4a4>)
 801406c:	4a0b      	ldr	r2, [pc, #44]	@ (801409c <handle_manage_user+0x488>)
 801406e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014072:	4630      	mov	r0, r6
 8014074:	f00f ffba 	bl	8023fec <mg_http_reply>
 8014078:	e720      	b.n	8013ebc <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801407a:	4b10      	ldr	r3, [pc, #64]	@ (80140bc <handle_manage_user+0x4a8>)
 801407c:	4a07      	ldr	r2, [pc, #28]	@ (801409c <handle_manage_user+0x488>)
 801407e:	f240 1195 	movw	r1, #405	@ 0x195
 8014082:	4630      	mov	r0, r6
 8014084:	f00f ffb2 	bl	8023fec <mg_http_reply>
 8014088:	e678      	b.n	8013d7c <handle_manage_user+0x168>
 801408a:	bf00      	nop
 801408c:	08036e64 	.word	0x08036e64
 8014090:	080373ac 	.word	0x080373ac
 8014094:	080373b4 	.word	0x080373b4
 8014098:	08037520 	.word	0x08037520
 801409c:	08036600 	.word	0x08036600
 80140a0:	08036e68 	.word	0x08036e68
 80140a4:	200021b8 	.word	0x200021b8
 80140a8:	0803602c 	.word	0x0803602c
 80140ac:	080374ac 	.word	0x080374ac
 80140b0:	080374f0 	.word	0x080374f0
 80140b4:	0803756c 	.word	0x0803756c
 80140b8:	080375ac 	.word	0x080375ac
 80140bc:	08037640 	.word	0x08037640

080140c0 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	460e      	mov	r6, r1
 80140c4:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 80140c6:	2201      	movs	r2, #1
 80140c8:	4601      	mov	r1, r0
 80140ca:	480e      	ldr	r0, [pc, #56]	@ (8014104 <load_users+0x44>)
 80140cc:	f00e fd00 	bl	8022ad0 <mg_fs_open>
	if (!fd) {
 80140d0:	b188      	cbz	r0, 80140f6 <load_users+0x36>
 80140d2:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80140d4:	4b0b      	ldr	r3, [pc, #44]	@ (8014104 <load_users+0x44>)
 80140d6:	691b      	ldr	r3, [r3, #16]
 80140d8:	22a9      	movs	r2, #169	@ 0xa9
 80140da:	fb04 f202 	mul.w	r2, r4, r2
 80140de:	4631      	mov	r1, r6
 80140e0:	6800      	ldr	r0, [r0, #0]
 80140e2:	4798      	blx	r3
	mg_fs_close(fd);
 80140e4:	4628      	mov	r0, r5
 80140e6:	f00e fd0c 	bl	8022b02 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 80140ea:	4907      	ldr	r1, [pc, #28]	@ (8014108 <load_users+0x48>)
 80140ec:	2001      	movs	r0, #1
 80140ee:	f7fd ff15 	bl	8011f1c <logging>
	return true;
 80140f2:	2001      	movs	r0, #1
}
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 80140f6:	4905      	ldr	r1, [pc, #20]	@ (801410c <load_users+0x4c>)
 80140f8:	2003      	movs	r0, #3
 80140fa:	f7fd ff0f 	bl	8011f1c <logging>
		return false;
 80140fe:	2000      	movs	r0, #0
 8014100:	e7f8      	b.n	80140f4 <load_users+0x34>
 8014102:	bf00      	nop
 8014104:	200000a0 	.word	0x200000a0
 8014108:	080376bc 	.word	0x080376bc
 801410c:	080376a0 	.word	0x080376a0

08014110 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	b086      	sub	sp, #24
 8014114:	4605      	mov	r5, r0
 8014116:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014118:	ae04      	add	r6, sp, #16
 801411a:	4915      	ldr	r1, [pc, #84]	@ (8014170 <handle_restart_mcu+0x60>)
 801411c:	4630      	mov	r0, r6
 801411e:	f010 f8ef 	bl	8024300 <mg_str_s>
 8014122:	2300      	movs	r3, #0
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	e896 000c 	ldmia.w	r6, {r2, r3}
 801412a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801412e:	f010 fb09 	bl	8024744 <mg_match>
 8014132:	b1a0      	cbz	r0, 801415e <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8014134:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8014136:	6818      	ldr	r0, [r3, #0]
 8014138:	2300      	movs	r3, #0
 801413a:	9302      	str	r3, [sp, #8]
 801413c:	4b0d      	ldr	r3, [pc, #52]	@ (8014174 <handle_restart_mcu+0x64>)
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	2301      	movs	r3, #1
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014148:	2300      	movs	r3, #0
 801414a:	f011 fabb 	bl	80256c4 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801414e:	4b0a      	ldr	r3, [pc, #40]	@ (8014178 <handle_restart_mcu+0x68>)
 8014150:	4a0a      	ldr	r2, [pc, #40]	@ (801417c <handle_restart_mcu+0x6c>)
 8014152:	21c8      	movs	r1, #200	@ 0xc8
 8014154:	4628      	mov	r0, r5
 8014156:	f00f ff49 	bl	8023fec <mg_http_reply>
}
 801415a:	b006      	add	sp, #24
 801415c:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801415e:	4b08      	ldr	r3, [pc, #32]	@ (8014180 <handle_restart_mcu+0x70>)
 8014160:	4a06      	ldr	r2, [pc, #24]	@ (801417c <handle_restart_mcu+0x6c>)
 8014162:	f240 1195 	movw	r1, #405	@ 0x195
 8014166:	4628      	mov	r0, r5
 8014168:	f00f ff40 	bl	8023fec <mg_http_reply>
}
 801416c:	e7f5      	b.n	801415a <handle_restart_mcu+0x4a>
 801416e:	bf00      	nop
 8014170:	0803675c 	.word	0x0803675c
 8014174:	08016389 	.word	0x08016389
 8014178:	080376d8 	.word	0x080376d8
 801417c:	08036600 	.word	0x08036600
 8014180:	080367e4 	.word	0x080367e4

08014184 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014184:	b570      	push	{r4, r5, r6, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	4605      	mov	r5, r0
 801418a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801418c:	ae02      	add	r6, sp, #8
 801418e:	4914      	ldr	r1, [pc, #80]	@ (80141e0 <handle_activete_and_reboot+0x5c>)
 8014190:	4630      	mov	r0, r6
 8014192:	f010 f8b5 	bl	8024300 <mg_str_s>
 8014196:	2300      	movs	r3, #0
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801419e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141a2:	f010 facf 	bl	8024744 <mg_match>
 80141a6:	b198      	cbz	r0, 80141d0 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80141a8:	4b0e      	ldr	r3, [pc, #56]	@ (80141e4 <handle_activete_and_reboot+0x60>)
 80141aa:	69db      	ldr	r3, [r3, #28]
 80141ac:	490e      	ldr	r1, [pc, #56]	@ (80141e8 <handle_activete_and_reboot+0x64>)
 80141ae:	480f      	ldr	r0, [pc, #60]	@ (80141ec <handle_activete_and_reboot+0x68>)
 80141b0:	4798      	blx	r3
 80141b2:	b128      	cbz	r0, 80141c0 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 80141b4:	4621      	mov	r1, r4
 80141b6:	4628      	mov	r0, r5
 80141b8:	f7ff ffaa 	bl	8014110 <handle_restart_mcu>
}
 80141bc:	b004      	add	sp, #16
 80141be:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80141c0:	4b0b      	ldr	r3, [pc, #44]	@ (80141f0 <handle_activete_and_reboot+0x6c>)
 80141c2:	4a0c      	ldr	r2, [pc, #48]	@ (80141f4 <handle_activete_and_reboot+0x70>)
 80141c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80141c8:	4628      	mov	r0, r5
 80141ca:	f00f ff0f 	bl	8023fec <mg_http_reply>
 80141ce:	e7f5      	b.n	80141bc <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80141d0:	4b09      	ldr	r3, [pc, #36]	@ (80141f8 <handle_activete_and_reboot+0x74>)
 80141d2:	4a08      	ldr	r2, [pc, #32]	@ (80141f4 <handle_activete_and_reboot+0x70>)
 80141d4:	f240 1195 	movw	r1, #405	@ 0x195
 80141d8:	4628      	mov	r0, r5
 80141da:	f00f ff07 	bl	8023fec <mg_http_reply>
}
 80141de:	e7ed      	b.n	80141bc <handle_activete_and_reboot+0x38>
 80141e0:	0803675c 	.word	0x0803675c
 80141e4:	200000a0 	.word	0x200000a0
 80141e8:	08035fec 	.word	0x08035fec
 80141ec:	08037710 	.word	0x08037710
 80141f0:	08037728 	.word	0x08037728
 80141f4:	08036600 	.word	0x08036600
 80141f8:	080367e4 	.word	0x080367e4

080141fc <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80141fc:	b570      	push	{r4, r5, r6, lr}
 80141fe:	b0c4      	sub	sp, #272	@ 0x110
 8014200:	4606      	mov	r6, r0
 8014202:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014204:	ad42      	add	r5, sp, #264	@ 0x108
 8014206:	4920      	ldr	r1, [pc, #128]	@ (8014288 <handle_fs_mkdir+0x8c>)
 8014208:	4628      	mov	r0, r5
 801420a:	f010 f879 	bl	8024300 <mg_str_s>
 801420e:	2300      	movs	r3, #0
 8014210:	9300      	str	r3, [sp, #0]
 8014212:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014216:	e894 0003 	ldmia.w	r4, {r0, r1}
 801421a:	f010 fa93 	bl	8024744 <mg_match>
 801421e:	b350      	cbz	r0, 8014276 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8014220:	237b      	movs	r3, #123	@ 0x7b
 8014222:	aa23      	add	r2, sp, #140	@ 0x8c
 8014224:	4919      	ldr	r1, [pc, #100]	@ (801428c <handle_fs_mkdir+0x90>)
 8014226:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 801422a:	f010 ff56 	bl	80250da <mg_http_get_var>
 801422e:	2800      	cmp	r0, #0
 8014230:	dd19      	ble.n	8014266 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8014232:	ab23      	add	r3, sp, #140	@ 0x8c
 8014234:	4a16      	ldr	r2, [pc, #88]	@ (8014290 <handle_fs_mkdir+0x94>)
 8014236:	2180      	movs	r1, #128	@ 0x80
 8014238:	a803      	add	r0, sp, #12
 801423a:	f017 fea7 	bl	802bf8c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 801423e:	4b15      	ldr	r3, [pc, #84]	@ (8014294 <handle_fs_mkdir+0x98>)
 8014240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014242:	a803      	add	r0, sp, #12
 8014244:	4798      	blx	r3
 8014246:	b130      	cbz	r0, 8014256 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8014248:	4b13      	ldr	r3, [pc, #76]	@ (8014298 <handle_fs_mkdir+0x9c>)
 801424a:	4a14      	ldr	r2, [pc, #80]	@ (801429c <handle_fs_mkdir+0xa0>)
 801424c:	21c8      	movs	r1, #200	@ 0xc8
 801424e:	4630      	mov	r0, r6
 8014250:	f00f fecc 	bl	8023fec <mg_http_reply>
 8014254:	e016      	b.n	8014284 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8014256:	4b12      	ldr	r3, [pc, #72]	@ (80142a0 <handle_fs_mkdir+0xa4>)
 8014258:	4a10      	ldr	r2, [pc, #64]	@ (801429c <handle_fs_mkdir+0xa0>)
 801425a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801425e:	4630      	mov	r0, r6
 8014260:	f00f fec4 	bl	8023fec <mg_http_reply>
 8014264:	e00e      	b.n	8014284 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8014266:	4b0f      	ldr	r3, [pc, #60]	@ (80142a4 <handle_fs_mkdir+0xa8>)
 8014268:	4a0c      	ldr	r2, [pc, #48]	@ (801429c <handle_fs_mkdir+0xa0>)
 801426a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801426e:	4630      	mov	r0, r6
 8014270:	f00f febc 	bl	8023fec <mg_http_reply>
 8014274:	e006      	b.n	8014284 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014276:	4b0c      	ldr	r3, [pc, #48]	@ (80142a8 <handle_fs_mkdir+0xac>)
 8014278:	4a08      	ldr	r2, [pc, #32]	@ (801429c <handle_fs_mkdir+0xa0>)
 801427a:	f240 1195 	movw	r1, #405	@ 0x195
 801427e:	4630      	mov	r0, r6
 8014280:	f00f feb4 	bl	8023fec <mg_http_reply>
}
 8014284:	b044      	add	sp, #272	@ 0x110
 8014286:	bd70      	pop	{r4, r5, r6, pc}
 8014288:	0803675c 	.word	0x0803675c
 801428c:	0803776c 	.word	0x0803776c
 8014290:	08037774 	.word	0x08037774
 8014294:	200000a0 	.word	0x200000a0
 8014298:	0803777c 	.word	0x0803777c
 801429c:	08036600 	.word	0x08036600
 80142a0:	080377b0 	.word	0x080377b0
 80142a4:	080377ec 	.word	0x080377ec
 80142a8:	080367e4 	.word	0x080367e4

080142ac <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 80142ac:	b570      	push	{r4, r5, r6, lr}
 80142ae:	b0a4      	sub	sp, #144	@ 0x90
 80142b0:	4605      	mov	r5, r0
 80142b2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80142b4:	ae22      	add	r6, sp, #136	@ 0x88
 80142b6:	491c      	ldr	r1, [pc, #112]	@ (8014328 <handle_firmware_upload+0x7c>)
 80142b8:	4630      	mov	r0, r6
 80142ba:	f010 f821 	bl	8024300 <mg_str_s>
 80142be:	2300      	movs	r3, #0
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80142c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80142ca:	f010 fa3b 	bl	8024744 <mg_match>
 80142ce:	b308      	cbz	r0, 8014314 <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80142d0:	2380      	movs	r3, #128	@ 0x80
 80142d2:	aa02      	add	r2, sp, #8
 80142d4:	4915      	ldr	r1, [pc, #84]	@ (801432c <handle_firmware_upload+0x80>)
 80142d6:	f104 0010 	add.w	r0, r4, #16
 80142da:	f010 fefe 	bl	80250da <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80142de:	4914      	ldr	r1, [pc, #80]	@ (8014330 <handle_firmware_upload+0x84>)
 80142e0:	a802      	add	r0, sp, #8
 80142e2:	f7fb ff7d 	bl	80101e0 <strcmp>
 80142e6:	b958      	cbnz	r0, 8014300 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80142e8:	4b12      	ldr	r3, [pc, #72]	@ (8014334 <handle_firmware_upload+0x88>)
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	4b12      	ldr	r3, [pc, #72]	@ (8014338 <handle_firmware_upload+0x8c>)
 80142ee:	4a13      	ldr	r2, [pc, #76]	@ (801433c <handle_firmware_upload+0x90>)
 80142f0:	4621      	mov	r1, r4
 80142f2:	4628      	mov	r0, r5
 80142f4:	f012 fcb8 	bl	8026c68 <mg_http_upload>
			vTaskDelay(1);
 80142f8:	2001      	movs	r0, #1
 80142fa:	f005 fca3 	bl	8019c44 <vTaskDelay>
 80142fe:	e010      	b.n	8014322 <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8014300:	4b0b      	ldr	r3, [pc, #44]	@ (8014330 <handle_firmware_upload+0x84>)
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	4b0e      	ldr	r3, [pc, #56]	@ (8014340 <handle_firmware_upload+0x94>)
 8014306:	4a0f      	ldr	r2, [pc, #60]	@ (8014344 <handle_firmware_upload+0x98>)
 8014308:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801430c:	4628      	mov	r0, r5
 801430e:	f00f fe6d 	bl	8023fec <mg_http_reply>
 8014312:	e006      	b.n	8014322 <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014314:	4b0c      	ldr	r3, [pc, #48]	@ (8014348 <handle_firmware_upload+0x9c>)
 8014316:	4a0b      	ldr	r2, [pc, #44]	@ (8014344 <handle_firmware_upload+0x98>)
 8014318:	f240 1195 	movw	r1, #405	@ 0x195
 801431c:	4628      	mov	r0, r5
 801431e:	f00f fe65 	bl	8023fec <mg_http_reply>
}
 8014322:	b024      	add	sp, #144	@ 0x90
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	bf00      	nop
 8014328:	0803675c 	.word	0x0803675c
 801432c:	0803af28 	.word	0x0803af28
 8014330:	08037828 	.word	0x08037828
 8014334:	0003d090 	.word	0x0003d090
 8014338:	08035fe0 	.word	0x08035fe0
 801433c:	200000a0 	.word	0x200000a0
 8014340:	08037838 	.word	0x08037838
 8014344:	08036600 	.word	0x08036600
 8014348:	080367e4 	.word	0x080367e4

0801434c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 801434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801434e:	b097      	sub	sp, #92	@ 0x5c
 8014350:	4604      	mov	r4, r0
 8014352:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8014354:	2101      	movs	r1, #1
 8014356:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801435a:	f7ff f879 	bl	8013450 <mg_calloc>
	if (buff == NULL){
 801435e:	4605      	mov	r5, r0
 8014360:	b150      	cbz	r0, 8014378 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014362:	2201      	movs	r2, #1
 8014364:	4621      	mov	r1, r4
 8014366:	4828      	ldr	r0, [pc, #160]	@ (8014408 <calc_file_md5sum+0xbc>)
 8014368:	f00e fbb2 	bl	8022ad0 <mg_fs_open>
	if (fd==NULL){
 801436c:	4604      	mov	r4, r0
 801436e:	b140      	cbz	r0, 8014382 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014370:	4668      	mov	r0, sp
 8014372:	f00e ffbd 	bl	80232f0 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014376:	e010      	b.n	801439a <calc_file_md5sum+0x4e>
		free(buff);
 8014378:	f006 fb80 	bl	801aa7c <vPortFree>
		return -1;
 801437c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014380:	e040      	b.n	8014404 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014382:	f00e fbbe 	bl	8022b02 <mg_fs_close>
		free(buff);
 8014386:	4628      	mov	r0, r5
 8014388:	f006 fb78 	bl	801aa7c <vPortFree>
		return -2;
 801438c:	f06f 0001 	mvn.w	r0, #1
 8014390:	e038      	b.n	8014404 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014392:	4629      	mov	r1, r5
 8014394:	4668      	mov	r0, sp
 8014396:	f00e ffc1 	bl	802331c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801439a:	4b1b      	ldr	r3, [pc, #108]	@ (8014408 <calc_file_md5sum+0xbc>)
 801439c:	691b      	ldr	r3, [r3, #16]
 801439e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80143a2:	4629      	mov	r1, r5
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	4798      	blx	r3
 80143a8:	4602      	mov	r2, r0
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d1f1      	bne.n	8014392 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 80143ae:	4620      	mov	r0, r4
 80143b0:	f00e fba7 	bl	8022b02 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 80143b4:	2101      	movs	r1, #1
 80143b6:	2010      	movs	r0, #16
 80143b8:	f7ff f84a 	bl	8013450 <mg_calloc>
	if (digest == NULL){
 80143bc:	4607      	mov	r7, r0
 80143be:	b128      	cbz	r0, 80143cc <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 80143c0:	4601      	mov	r1, r0
 80143c2:	4668      	mov	r0, sp
 80143c4:	f00f f801 	bl	80233ca <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 80143c8:	2400      	movs	r4, #0
 80143ca:	e012      	b.n	80143f2 <calc_file_md5sum+0xa6>
		free(buff);
 80143cc:	4628      	mov	r0, r5
 80143ce:	f006 fb55 	bl	801aa7c <vPortFree>
		free(digest);
 80143d2:	4638      	mov	r0, r7
 80143d4:	f006 fb52 	bl	801aa7c <vPortFree>
		return -1;
 80143d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143dc:	e012      	b.n	8014404 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80143de:	0061      	lsls	r1, r4, #1
 80143e0:	5d3b      	ldrb	r3, [r7, r4]
 80143e2:	4a0a      	ldr	r2, [pc, #40]	@ (801440c <calc_file_md5sum+0xc0>)
 80143e4:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80143e8:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80143ec:	f017 fdce 	bl	802bf8c <snprintf>
	for (int i = 0; i < 16; ++i) {
 80143f0:	3401      	adds	r4, #1
 80143f2:	2c0f      	cmp	r4, #15
 80143f4:	ddf3      	ble.n	80143de <calc_file_md5sum+0x92>
	free(buff);
 80143f6:	4628      	mov	r0, r5
 80143f8:	f006 fb40 	bl	801aa7c <vPortFree>
	free(digest);
 80143fc:	4638      	mov	r0, r7
 80143fe:	f006 fb3d 	bl	801aa7c <vPortFree>
	return 0;
 8014402:	2000      	movs	r0, #0
}
 8014404:	b017      	add	sp, #92	@ 0x5c
 8014406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014408:	200000a0 	.word	0x200000a0
 801440c:	08037884 	.word	0x08037884

08014410 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8014410:	b570      	push	{r4, r5, r6, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	4605      	mov	r5, r0
 8014416:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8014418:	ae02      	add	r6, sp, #8
 801441a:	4919      	ldr	r1, [pc, #100]	@ (8014480 <handle_firmware_md5+0x70>)
 801441c:	4630      	mov	r0, r6
 801441e:	f00f ff6f 	bl	8024300 <mg_str_s>
 8014422:	2300      	movs	r3, #0
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	e896 000c 	ldmia.w	r6, {r2, r3}
 801442a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801442e:	f010 f989 	bl	8024744 <mg_match>
 8014432:	b1e8      	cbz	r0, 8014470 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014434:	2101      	movs	r1, #1
 8014436:	2021      	movs	r0, #33	@ 0x21
 8014438:	f7ff f80a 	bl	8013450 <mg_calloc>
 801443c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 801443e:	4601      	mov	r1, r0
 8014440:	4810      	ldr	r0, [pc, #64]	@ (8014484 <handle_firmware_md5+0x74>)
 8014442:	f7ff ff83 	bl	801434c <calc_file_md5sum>
 8014446:	b958      	cbnz	r0, 8014460 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014448:	9400      	str	r4, [sp, #0]
 801444a:	4b0f      	ldr	r3, [pc, #60]	@ (8014488 <handle_firmware_md5+0x78>)
 801444c:	4a0f      	ldr	r2, [pc, #60]	@ (801448c <handle_firmware_md5+0x7c>)
 801444e:	21c8      	movs	r1, #200	@ 0xc8
 8014450:	4628      	mov	r0, r5
 8014452:	f00f fdcb 	bl	8023fec <mg_http_reply>
		free(md5_str);
 8014456:	4620      	mov	r0, r4
 8014458:	f006 fb10 	bl	801aa7c <vPortFree>
}
 801445c:	b004      	add	sp, #16
 801445e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014460:	4b0b      	ldr	r3, [pc, #44]	@ (8014490 <handle_firmware_md5+0x80>)
 8014462:	4a0a      	ldr	r2, [pc, #40]	@ (801448c <handle_firmware_md5+0x7c>)
 8014464:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014468:	4628      	mov	r0, r5
 801446a:	f00f fdbf 	bl	8023fec <mg_http_reply>
 801446e:	e7f2      	b.n	8014456 <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014470:	4b08      	ldr	r3, [pc, #32]	@ (8014494 <handle_firmware_md5+0x84>)
 8014472:	4a06      	ldr	r2, [pc, #24]	@ (801448c <handle_firmware_md5+0x7c>)
 8014474:	f240 1195 	movw	r1, #405	@ 0x195
 8014478:	4628      	mov	r0, r5
 801447a:	f00f fdb7 	bl	8023fec <mg_http_reply>
}
 801447e:	e7ed      	b.n	801445c <handle_firmware_md5+0x4c>
 8014480:	080365c4 	.word	0x080365c4
 8014484:	08037710 	.word	0x08037710
 8014488:	0803788c 	.word	0x0803788c
 801448c:	08036600 	.word	0x08036600
 8014490:	080378b0 	.word	0x080378b0
 8014494:	08036678 	.word	0x08036678

08014498 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014498:	290b      	cmp	r1, #11
 801449a:	d000      	beq.n	801449e <dashboard+0x6>
 801449c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801449e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144a0:	b0b5      	sub	sp, #212	@ 0xd4
 80144a2:	4605      	mov	r5, r0
 80144a4:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 80144a6:	2200      	movs	r2, #0
 80144a8:	4621      	mov	r1, r4
 80144aa:	f7fe fdff 	bl	80130ac <auth>
 80144ae:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 80144b0:	ae08      	add	r6, sp, #32
 80144b2:	49af      	ldr	r1, [pc, #700]	@ (8014770 <dashboard+0x2d8>)
 80144b4:	4630      	mov	r0, r6
 80144b6:	f00f ff23 	bl	8024300 <mg_str_s>
 80144ba:	2300      	movs	r3, #0
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144c6:	f010 f93d 	bl	8024744 <mg_match>
 80144ca:	b120      	cbz	r0, 80144d6 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 80144cc:	4628      	mov	r0, r5
 80144ce:	f7fe fc45 	bl	8012d5c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80144d2:	b035      	add	sp, #212	@ 0xd4
 80144d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80144d6:	ae0a      	add	r6, sp, #40	@ 0x28
 80144d8:	49a6      	ldr	r1, [pc, #664]	@ (8014774 <dashboard+0x2dc>)
 80144da:	4630      	mov	r0, r6
 80144dc:	f00f ff10 	bl	8024300 <mg_str_s>
 80144e0:	2300      	movs	r3, #0
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144e8:	f104 0108 	add.w	r1, r4, #8
 80144ec:	c903      	ldmia	r1, {r0, r1}
 80144ee:	f010 f929 	bl	8024744 <mg_match>
 80144f2:	b100      	cbz	r0, 80144f6 <dashboard+0x5e>
 80144f4:	b1bf      	cbz	r7, 8014526 <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80144f6:	ae0c      	add	r6, sp, #48	@ 0x30
 80144f8:	499f      	ldr	r1, [pc, #636]	@ (8014778 <dashboard+0x2e0>)
 80144fa:	4630      	mov	r0, r6
 80144fc:	f00f ff00 	bl	8024300 <mg_str_s>
 8014500:	2300      	movs	r3, #0
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014508:	f104 0108 	add.w	r1, r4, #8
 801450c:	c903      	ldmia	r1, {r0, r1}
 801450e:	f010 f919 	bl	8024744 <mg_match>
 8014512:	b180      	cbz	r0, 8014536 <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 8014514:	4999      	ldr	r1, [pc, #612]	@ (801477c <dashboard+0x2e4>)
 8014516:	2001      	movs	r0, #1
 8014518:	f7fd fd00 	bl	8011f1c <logging>
        	 handler_authanticate(c,hm);
 801451c:	4621      	mov	r1, r4
 801451e:	4628      	mov	r0, r5
 8014520:	f7fe feb0 	bl	8013284 <handler_authanticate>
 8014524:	e7d5      	b.n	80144d2 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 8014526:	4b96      	ldr	r3, [pc, #600]	@ (8014780 <dashboard+0x2e8>)
 8014528:	4a96      	ldr	r2, [pc, #600]	@ (8014784 <dashboard+0x2ec>)
 801452a:	f240 1193 	movw	r1, #403	@ 0x193
 801452e:	4628      	mov	r0, r5
 8014530:	f00f fd5c 	bl	8023fec <mg_http_reply>
 8014534:	e7cd      	b.n	80144d2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014536:	ae0e      	add	r6, sp, #56	@ 0x38
 8014538:	4993      	ldr	r1, [pc, #588]	@ (8014788 <dashboard+0x2f0>)
 801453a:	4630      	mov	r0, r6
 801453c:	f00f fee0 	bl	8024300 <mg_str_s>
 8014540:	2300      	movs	r3, #0
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014548:	f104 0108 	add.w	r1, r4, #8
 801454c:	c903      	ldmia	r1, {r0, r1}
 801454e:	f010 f8f9 	bl	8024744 <mg_match>
 8014552:	b140      	cbz	r0, 8014566 <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014554:	498d      	ldr	r1, [pc, #564]	@ (801478c <dashboard+0x2f4>)
 8014556:	2001      	movs	r0, #1
 8014558:	f7fd fce0 	bl	8011f1c <logging>
			handler_logout(c,hm);
 801455c:	4621      	mov	r1, r4
 801455e:	4628      	mov	r0, r5
 8014560:	f7fe fcea 	bl	8012f38 <handler_logout>
 8014564:	e7b5      	b.n	80144d2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014566:	ae10      	add	r6, sp, #64	@ 0x40
 8014568:	4989      	ldr	r1, [pc, #548]	@ (8014790 <dashboard+0x2f8>)
 801456a:	4630      	mov	r0, r6
 801456c:	f00f fec8 	bl	8024300 <mg_str_s>
 8014570:	2300      	movs	r3, #0
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014578:	f104 0108 	add.w	r1, r4, #8
 801457c:	c903      	ldmia	r1, {r0, r1}
 801457e:	f010 f8e1 	bl	8024744 <mg_match>
 8014582:	b138      	cbz	r0, 8014594 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014584:	4983      	ldr	r1, [pc, #524]	@ (8014794 <dashboard+0x2fc>)
 8014586:	2001      	movs	r0, #1
 8014588:	f7fd fcc8 	bl	8011f1c <logging>
			handle_ram_status_get(c);
 801458c:	4628      	mov	r0, r5
 801458e:	f7fe fe8d 	bl	80132ac <handle_ram_status_get>
 8014592:	e79e      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014594:	ae12      	add	r6, sp, #72	@ 0x48
 8014596:	4980      	ldr	r1, [pc, #512]	@ (8014798 <dashboard+0x300>)
 8014598:	4630      	mov	r0, r6
 801459a:	f00f feb1 	bl	8024300 <mg_str_s>
 801459e:	2300      	movs	r3, #0
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145a6:	f104 0108 	add.w	r1, r4, #8
 80145aa:	c903      	ldmia	r1, {r0, r1}
 80145ac:	f010 f8ca 	bl	8024744 <mg_match>
 80145b0:	b140      	cbz	r0, 80145c4 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 80145b2:	497a      	ldr	r1, [pc, #488]	@ (801479c <dashboard+0x304>)
 80145b4:	2001      	movs	r0, #1
 80145b6:	f7fd fcb1 	bl	8011f1c <logging>
			handle_io_status_get(c, hm);
 80145ba:	4621      	mov	r1, r4
 80145bc:	4628      	mov	r0, r5
 80145be:	f7fe fe95 	bl	80132ec <handle_io_status_get>
 80145c2:	e786      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 80145c4:	ae14      	add	r6, sp, #80	@ 0x50
 80145c6:	4976      	ldr	r1, [pc, #472]	@ (80147a0 <dashboard+0x308>)
 80145c8:	4630      	mov	r0, r6
 80145ca:	f00f fe99 	bl	8024300 <mg_str_s>
 80145ce:	2300      	movs	r3, #0
 80145d0:	9300      	str	r3, [sp, #0]
 80145d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145d6:	f104 0108 	add.w	r1, r4, #8
 80145da:	c903      	ldmia	r1, {r0, r1}
 80145dc:	f010 f8b2 	bl	8024744 <mg_match>
 80145e0:	b140      	cbz	r0, 80145f4 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 80145e2:	4970      	ldr	r1, [pc, #448]	@ (80147a4 <dashboard+0x30c>)
 80145e4:	2001      	movs	r0, #1
 80145e6:	f7fd fc99 	bl	8011f1c <logging>
			handle_mqtt_conf(c, hm);
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7fe ff3d 	bl	801346c <handle_mqtt_conf>
 80145f2:	e76e      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 80145f4:	ae16      	add	r6, sp, #88	@ 0x58
 80145f6:	496c      	ldr	r1, [pc, #432]	@ (80147a8 <dashboard+0x310>)
 80145f8:	4630      	mov	r0, r6
 80145fa:	f00f fe81 	bl	8024300 <mg_str_s>
 80145fe:	2300      	movs	r3, #0
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014606:	f104 0108 	add.w	r1, r4, #8
 801460a:	c903      	ldmia	r1, {r0, r1}
 801460c:	f010 f89a 	bl	8024744 <mg_match>
 8014610:	b140      	cbz	r0, 8014624 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 8014612:	4966      	ldr	r1, [pc, #408]	@ (80147ac <dashboard+0x314>)
 8014614:	2001      	movs	r0, #1
 8014616:	f7fd fc81 	bl	8011f1c <logging>
			handle_mb_tcp_access_list(c, hm);
 801461a:	4621      	mov	r1, r4
 801461c:	4628      	mov	r0, r5
 801461e:	f7ff f85d 	bl	80136dc <handle_mb_tcp_access_list>
 8014622:	e756      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8014624:	ae18      	add	r6, sp, #96	@ 0x60
 8014626:	4962      	ldr	r1, [pc, #392]	@ (80147b0 <dashboard+0x318>)
 8014628:	4630      	mov	r0, r6
 801462a:	f00f fe69 	bl	8024300 <mg_str_s>
 801462e:	2300      	movs	r3, #0
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014636:	f104 0108 	add.w	r1, r4, #8
 801463a:	c903      	ldmia	r1, {r0, r1}
 801463c:	f010 f882 	bl	8024744 <mg_match>
 8014640:	b140      	cbz	r0, 8014654 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014642:	495c      	ldr	r1, [pc, #368]	@ (80147b4 <dashboard+0x31c>)
 8014644:	2001      	movs	r0, #1
 8014646:	f7fd fc69 	bl	8011f1c <logging>
			handle_dev_status(c, hm);
 801464a:	4621      	mov	r1, r4
 801464c:	4628      	mov	r0, r5
 801464e:	f7ff f925 	bl	801389c <handle_dev_status>
 8014652:	e73e      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014654:	ae1a      	add	r6, sp, #104	@ 0x68
 8014656:	4958      	ldr	r1, [pc, #352]	@ (80147b8 <dashboard+0x320>)
 8014658:	4630      	mov	r0, r6
 801465a:	f00f fe51 	bl	8024300 <mg_str_s>
 801465e:	2300      	movs	r3, #0
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014666:	68e1      	ldr	r1, [r4, #12]
 8014668:	68a0      	ldr	r0, [r4, #8]
 801466a:	f010 f86b 	bl	8024744 <mg_match>
 801466e:	b148      	cbz	r0, 8014684 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014670:	4952      	ldr	r1, [pc, #328]	@ (80147bc <dashboard+0x324>)
 8014672:	2001      	movs	r0, #1
 8014674:	f7fd fc52 	bl	8011f1c <logging>
			handle_fs_get_log(c, hm, 0);
 8014678:	2200      	movs	r2, #0
 801467a:	4621      	mov	r1, r4
 801467c:	4628      	mov	r0, r5
 801467e:	f7ff fa4b 	bl	8013b18 <handle_fs_get_log>
 8014682:	e726      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014684:	ae1c      	add	r6, sp, #112	@ 0x70
 8014686:	494e      	ldr	r1, [pc, #312]	@ (80147c0 <dashboard+0x328>)
 8014688:	4630      	mov	r0, r6
 801468a:	f00f fe39 	bl	8024300 <mg_str_s>
 801468e:	2300      	movs	r3, #0
 8014690:	9300      	str	r3, [sp, #0]
 8014692:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014696:	68e1      	ldr	r1, [r4, #12]
 8014698:	68a0      	ldr	r0, [r4, #8]
 801469a:	f010 f853 	bl	8024744 <mg_match>
 801469e:	b148      	cbz	r0, 80146b4 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 80146a0:	4948      	ldr	r1, [pc, #288]	@ (80147c4 <dashboard+0x32c>)
 80146a2:	2001      	movs	r0, #1
 80146a4:	f7fd fc3a 	bl	8011f1c <logging>
			handle_fs_get_log(c, hm, 1);
 80146a8:	2201      	movs	r2, #1
 80146aa:	4621      	mov	r1, r4
 80146ac:	4628      	mov	r0, r5
 80146ae:	f7ff fa33 	bl	8013b18 <handle_fs_get_log>
 80146b2:	e70e      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 80146b4:	ae1e      	add	r6, sp, #120	@ 0x78
 80146b6:	4944      	ldr	r1, [pc, #272]	@ (80147c8 <dashboard+0x330>)
 80146b8:	4630      	mov	r0, r6
 80146ba:	f00f fe21 	bl	8024300 <mg_str_s>
 80146be:	2300      	movs	r3, #0
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146c6:	68e1      	ldr	r1, [r4, #12]
 80146c8:	68a0      	ldr	r0, [r4, #8]
 80146ca:	f010 f83b 	bl	8024744 <mg_match>
 80146ce:	b140      	cbz	r0, 80146e2 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 80146d0:	493e      	ldr	r1, [pc, #248]	@ (80147cc <dashboard+0x334>)
 80146d2:	2001      	movs	r0, #1
 80146d4:	f7fd fc22 	bl	8011f1c <logging>
			handle_manage_user(c, hm);
 80146d8:	4621      	mov	r1, r4
 80146da:	4628      	mov	r0, r5
 80146dc:	f7ff fa9a 	bl	8013c14 <handle_manage_user>
 80146e0:	e6f7      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80146e2:	ae20      	add	r6, sp, #128	@ 0x80
 80146e4:	493a      	ldr	r1, [pc, #232]	@ (80147d0 <dashboard+0x338>)
 80146e6:	4630      	mov	r0, r6
 80146e8:	f00f fe0a 	bl	8024300 <mg_str_s>
 80146ec:	2300      	movs	r3, #0
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146f4:	68e1      	ldr	r1, [r4, #12]
 80146f6:	68a0      	ldr	r0, [r4, #8]
 80146f8:	f010 f824 	bl	8024744 <mg_match>
 80146fc:	b140      	cbz	r0, 8014710 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 80146fe:	4935      	ldr	r1, [pc, #212]	@ (80147d4 <dashboard+0x33c>)
 8014700:	2001      	movs	r0, #1
 8014702:	f7fd fc0b 	bl	8011f1c <logging>
			handle_restart_mcu(c, hm);
 8014706:	4621      	mov	r1, r4
 8014708:	4628      	mov	r0, r5
 801470a:	f7ff fd01 	bl	8014110 <handle_restart_mcu>
 801470e:	e6e0      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 8014710:	ae22      	add	r6, sp, #136	@ 0x88
 8014712:	4931      	ldr	r1, [pc, #196]	@ (80147d8 <dashboard+0x340>)
 8014714:	4630      	mov	r0, r6
 8014716:	f00f fdf3 	bl	8024300 <mg_str_s>
 801471a:	2300      	movs	r3, #0
 801471c:	9300      	str	r3, [sp, #0]
 801471e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014722:	68e1      	ldr	r1, [r4, #12]
 8014724:	68a0      	ldr	r0, [r4, #8]
 8014726:	f010 f80d 	bl	8024744 <mg_match>
 801472a:	b140      	cbz	r0, 801473e <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 801472c:	492b      	ldr	r1, [pc, #172]	@ (80147dc <dashboard+0x344>)
 801472e:	2001      	movs	r0, #1
 8014730:	f7fd fbf4 	bl	8011f1c <logging>
			handler_dev_version(c, hm);
 8014734:	4621      	mov	r1, r4
 8014736:	4628      	mov	r0, r5
 8014738:	f7fe fb1c 	bl	8012d74 <handler_dev_version>
 801473c:	e6c9      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 801473e:	ae24      	add	r6, sp, #144	@ 0x90
 8014740:	4927      	ldr	r1, [pc, #156]	@ (80147e0 <dashboard+0x348>)
 8014742:	4630      	mov	r0, r6
 8014744:	f00f fddc 	bl	8024300 <mg_str_s>
 8014748:	2300      	movs	r3, #0
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014750:	68e1      	ldr	r1, [r4, #12]
 8014752:	68a0      	ldr	r0, [r4, #8]
 8014754:	f00f fff6 	bl	8024744 <mg_match>
 8014758:	2800      	cmp	r0, #0
 801475a:	d045      	beq.n	80147e8 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 801475c:	4921      	ldr	r1, [pc, #132]	@ (80147e4 <dashboard+0x34c>)
 801475e:	2001      	movs	r0, #1
 8014760:	f7fd fbdc 	bl	8011f1c <logging>
			handler_dev_info(c, hm);
 8014764:	4621      	mov	r1, r4
 8014766:	4628      	mov	r0, r5
 8014768:	f7fe fb36 	bl	8012dd8 <handler_dev_info>
 801476c:	e6b1      	b.n	80144d2 <dashboard+0x3a>
 801476e:	bf00      	nop
 8014770:	080378f0 	.word	0x080378f0
 8014774:	080378f8 	.word	0x080378f8
 8014778:	08037910 	.word	0x08037910
 801477c:	0803791c 	.word	0x0803791c
 8014780:	08037900 	.word	0x08037900
 8014784:	08036c80 	.word	0x08036c80
 8014788:	08037930 	.word	0x08037930
 801478c:	0803793c 	.word	0x0803793c
 8014790:	08037954 	.word	0x08037954
 8014794:	08037964 	.word	0x08037964
 8014798:	08037980 	.word	0x08037980
 801479c:	08037990 	.word	0x08037990
 80147a0:	080379a8 	.word	0x080379a8
 80147a4:	080379bc 	.word	0x080379bc
 80147a8:	080379d8 	.word	0x080379d8
 80147ac:	080379e8 	.word	0x080379e8
 80147b0:	08037a04 	.word	0x08037a04
 80147b4:	08037a18 	.word	0x08037a18
 80147b8:	08037a34 	.word	0x08037a34
 80147bc:	08037a44 	.word	0x08037a44
 80147c0:	08037a60 	.word	0x08037a60
 80147c4:	08037a74 	.word	0x08037a74
 80147c8:	08037a94 	.word	0x08037a94
 80147cc:	08037aa8 	.word	0x08037aa8
 80147d0:	08037ac4 	.word	0x08037ac4
 80147d4:	08037ad8 	.word	0x08037ad8
 80147d8:	08037af8 	.word	0x08037af8
 80147dc:	08037b0c 	.word	0x08037b0c
 80147e0:	08037b2c 	.word	0x08037b2c
 80147e4:	08037b40 	.word	0x08037b40
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 80147e8:	ae26      	add	r6, sp, #152	@ 0x98
 80147ea:	4950      	ldr	r1, [pc, #320]	@ (801492c <dashboard+0x494>)
 80147ec:	4630      	mov	r0, r6
 80147ee:	f00f fd87 	bl	8024300 <mg_str_s>
 80147f2:	2300      	movs	r3, #0
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147fa:	68e1      	ldr	r1, [r4, #12]
 80147fc:	68a0      	ldr	r0, [r4, #8]
 80147fe:	f00f ffa1 	bl	8024744 <mg_match>
 8014802:	b120      	cbz	r0, 801480e <dashboard+0x376>
			handle_firmware_upload(c, hm);
 8014804:	4621      	mov	r1, r4
 8014806:	4628      	mov	r0, r5
 8014808:	f7ff fd50 	bl	80142ac <handle_firmware_upload>
 801480c:	e661      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 801480e:	ae28      	add	r6, sp, #160	@ 0xa0
 8014810:	4947      	ldr	r1, [pc, #284]	@ (8014930 <dashboard+0x498>)
 8014812:	4630      	mov	r0, r6
 8014814:	f00f fd74 	bl	8024300 <mg_str_s>
 8014818:	2300      	movs	r3, #0
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014820:	68e1      	ldr	r1, [r4, #12]
 8014822:	68a0      	ldr	r0, [r4, #8]
 8014824:	f00f ff8e 	bl	8024744 <mg_match>
 8014828:	b140      	cbz	r0, 801483c <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 801482a:	4942      	ldr	r1, [pc, #264]	@ (8014934 <dashboard+0x49c>)
 801482c:	2001      	movs	r0, #1
 801482e:	f7fd fb75 	bl	8011f1c <logging>
			handle_firmware_md5(c, hm);
 8014832:	4621      	mov	r1, r4
 8014834:	4628      	mov	r0, r5
 8014836:	f7ff fdeb 	bl	8014410 <handle_firmware_md5>
 801483a:	e64a      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 801483c:	ae2a      	add	r6, sp, #168	@ 0xa8
 801483e:	493e      	ldr	r1, [pc, #248]	@ (8014938 <dashboard+0x4a0>)
 8014840:	4630      	mov	r0, r6
 8014842:	f00f fd5d 	bl	8024300 <mg_str_s>
 8014846:	2300      	movs	r3, #0
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801484e:	68e1      	ldr	r1, [r4, #12]
 8014850:	68a0      	ldr	r0, [r4, #8]
 8014852:	f00f ff77 	bl	8024744 <mg_match>
 8014856:	b140      	cbz	r0, 801486a <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014858:	4938      	ldr	r1, [pc, #224]	@ (801493c <dashboard+0x4a4>)
 801485a:	2001      	movs	r0, #1
 801485c:	f7fd fb5e 	bl	8011f1c <logging>
			handle_activete_and_reboot(c, hm);
 8014860:	4621      	mov	r1, r4
 8014862:	4628      	mov	r0, r5
 8014864:	f7ff fc8e 	bl	8014184 <handle_activete_and_reboot>
 8014868:	e633      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 801486a:	ae2c      	add	r6, sp, #176	@ 0xb0
 801486c:	4934      	ldr	r1, [pc, #208]	@ (8014940 <dashboard+0x4a8>)
 801486e:	4630      	mov	r0, r6
 8014870:	f00f fd46 	bl	8024300 <mg_str_s>
 8014874:	2300      	movs	r3, #0
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	e896 000c 	ldmia.w	r6, {r2, r3}
 801487c:	68e1      	ldr	r1, [r4, #12]
 801487e:	68a0      	ldr	r0, [r4, #8]
 8014880:	f00f ff60 	bl	8024744 <mg_match>
 8014884:	b120      	cbz	r0, 8014890 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f7fe fae3 	bl	8012e54 <handle_firmware_deactivate>
 801488e:	e620      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014890:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014892:	492c      	ldr	r1, [pc, #176]	@ (8014944 <dashboard+0x4ac>)
 8014894:	4630      	mov	r0, r6
 8014896:	f00f fd33 	bl	8024300 <mg_str_s>
 801489a:	2300      	movs	r3, #0
 801489c:	9300      	str	r3, [sp, #0]
 801489e:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148a2:	68e1      	ldr	r1, [r4, #12]
 80148a4:	68a0      	ldr	r0, [r4, #8]
 80148a6:	f00f ff4d 	bl	8024744 <mg_match>
 80148aa:	b120      	cbz	r0, 80148b6 <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 80148ac:	4621      	mov	r1, r4
 80148ae:	4628      	mov	r0, r5
 80148b0:	f7fe fb0c 	bl	8012ecc <handle_web_files_remove>
 80148b4:	e60d      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 80148b6:	ae30      	add	r6, sp, #192	@ 0xc0
 80148b8:	4923      	ldr	r1, [pc, #140]	@ (8014948 <dashboard+0x4b0>)
 80148ba:	4630      	mov	r0, r6
 80148bc:	f00f fd20 	bl	8024300 <mg_str_s>
 80148c0:	2300      	movs	r3, #0
 80148c2:	9300      	str	r3, [sp, #0]
 80148c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148c8:	68e1      	ldr	r1, [r4, #12]
 80148ca:	68a0      	ldr	r0, [r4, #8]
 80148cc:	f00f ff3a 	bl	8024744 <mg_match>
 80148d0:	b140      	cbz	r0, 80148e4 <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 80148d2:	4b1e      	ldr	r3, [pc, #120]	@ (801494c <dashboard+0x4b4>)
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	4b1e      	ldr	r3, [pc, #120]	@ (8014950 <dashboard+0x4b8>)
 80148d8:	4a1e      	ldr	r2, [pc, #120]	@ (8014954 <dashboard+0x4bc>)
 80148da:	4621      	mov	r1, r4
 80148dc:	4628      	mov	r0, r5
 80148de:	f012 f9c3 	bl	8026c68 <mg_http_upload>
 80148e2:	e5f6      	b.n	80144d2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 80148e4:	ae32      	add	r6, sp, #200	@ 0xc8
 80148e6:	491c      	ldr	r1, [pc, #112]	@ (8014958 <dashboard+0x4c0>)
 80148e8:	4630      	mov	r0, r6
 80148ea:	f00f fd09 	bl	8024300 <mg_str_s>
 80148ee:	2300      	movs	r3, #0
 80148f0:	9300      	str	r3, [sp, #0]
 80148f2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148f6:	68e1      	ldr	r1, [r4, #12]
 80148f8:	68a0      	ldr	r0, [r4, #8]
 80148fa:	f00f ff23 	bl	8024744 <mg_match>
 80148fe:	b120      	cbz	r0, 801490a <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014900:	4621      	mov	r1, r4
 8014902:	4628      	mov	r0, r5
 8014904:	f7ff fc7a 	bl	80141fc <handle_fs_mkdir>
 8014908:	e5e3      	b.n	80144d2 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 801490a:	2300      	movs	r3, #0
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	9303      	str	r3, [sp, #12]
 8014910:	9304      	str	r3, [sp, #16]
 8014912:	9305      	str	r3, [sp, #20]
 8014914:	9306      	str	r3, [sp, #24]
 8014916:	9307      	str	r3, [sp, #28]
 8014918:	4b0d      	ldr	r3, [pc, #52]	@ (8014950 <dashboard+0x4b8>)
 801491a:	9302      	str	r3, [sp, #8]
 801491c:	4b0d      	ldr	r3, [pc, #52]	@ (8014954 <dashboard+0x4bc>)
 801491e:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014920:	aa02      	add	r2, sp, #8
 8014922:	4621      	mov	r1, r4
 8014924:	4628      	mov	r0, r5
 8014926:	f012 f8b9 	bl	8026a9c <mg_http_serve_dir>
}
 801492a:	e5d2      	b.n	80144d2 <dashboard+0x3a>
 801492c:	08037b5c 	.word	0x08037b5c
 8014930:	08037b74 	.word	0x08037b74
 8014934:	08037b88 	.word	0x08037b88
 8014938:	08037ba4 	.word	0x08037ba4
 801493c:	08037bb8 	.word	0x08037bb8
 8014940:	08037bd8 	.word	0x08037bd8
 8014944:	08037bf4 	.word	0x08037bf4
 8014948:	08037c10 	.word	0x08037c10
 801494c:	0016e360 	.word	0x0016e360
 8014950:	08035fd8 	.word	0x08035fd8
 8014954:	200000a0 	.word	0x200000a0
 8014958:	08037c2c 	.word	0x08037c2c

0801495c <dash_hdl>:

void * dash_hdl (void){
 801495c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 801495e:	220a      	movs	r2, #10
 8014960:	4902      	ldr	r1, [pc, #8]	@ (801496c <dash_hdl+0x10>)
 8014962:	4803      	ldr	r0, [pc, #12]	@ (8014970 <dash_hdl+0x14>)
 8014964:	f7ff fbac 	bl	80140c0 <load_users>

	return &dashboard;
}
 8014968:	4802      	ldr	r0, [pc, #8]	@ (8014974 <dash_hdl+0x18>)
 801496a:	bd08      	pop	{r3, pc}
 801496c:	200021b8 	.word	0x200021b8
 8014970:	0803602c 	.word	0x0803602c
 8014974:	08014499 	.word	0x08014499

08014978 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014978:	4b01      	ldr	r3, [pc, #4]	@ (8014980 <reg_parameter_handler+0x8>)
 801497a:	6018      	str	r0, [r3, #0]
}
 801497c:	4770      	bx	lr
 801497e:	bf00      	nop
 8014980:	20002854 	.word	0x20002854

08014984 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014984:	4b1a      	ldr	r3, [pc, #104]	@ (80149f0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	b103      	cbz	r3, 801498c <_ZL18mqtt_timer_handlerPv+0x8>
 801498a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 801498c:	b530      	push	{r4, r5, lr}
 801498e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014990:	4918      	ldr	r1, [pc, #96]	@ (80149f4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014992:	2001      	movs	r0, #1
 8014994:	f7fd fac2 	bl	8011f1c <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014998:	4c17      	ldr	r4, [pc, #92]	@ (80149f8 <_ZL18mqtt_timer_handlerPv+0x74>)
 801499a:	2240      	movs	r2, #64	@ 0x40
 801499c:	2100      	movs	r1, #0
 801499e:	4620      	mov	r0, r4
 80149a0:	f018 f81e 	bl	802c9e0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80149a4:	ad02      	add	r5, sp, #8
 80149a6:	4b15      	ldr	r3, [pc, #84]	@ (80149fc <_ZL18mqtt_timer_handlerPv+0x78>)
 80149a8:	6819      	ldr	r1, [r3, #0]
 80149aa:	4628      	mov	r0, r5
 80149ac:	f00f fca8 	bl	8024300 <mg_str_s>
 80149b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80149b4:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 80149b8:	4b11      	ldr	r3, [pc, #68]	@ (8014a00 <_ZL18mqtt_timer_handlerPv+0x7c>)
 80149ba:	6819      	ldr	r1, [r3, #0]
 80149bc:	4628      	mov	r0, r5
 80149be:	f00f fc9f 	bl	8024300 <mg_str_s>
 80149c2:	f104 0308 	add.w	r3, r4, #8
 80149c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80149ca:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80149ce:	233c      	movs	r3, #60	@ 0x3c
 80149d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80149d2:	2300      	movs	r3, #0
 80149d4:	9300      	str	r3, [sp, #0]
 80149d6:	4b0b      	ldr	r3, [pc, #44]	@ (8014a04 <_ZL18mqtt_timer_handlerPv+0x80>)
 80149d8:	4622      	mov	r2, r4
 80149da:	490b      	ldr	r1, [pc, #44]	@ (8014a08 <_ZL18mqtt_timer_handlerPv+0x84>)
 80149dc:	6809      	ldr	r1, [r1, #0]
 80149de:	480b      	ldr	r0, [pc, #44]	@ (8014a0c <_ZL18mqtt_timer_handlerPv+0x88>)
 80149e0:	6800      	ldr	r0, [r0, #0]
 80149e2:	f014 fa01 	bl	8028de8 <mg_mqtt_connect>
 80149e6:	4b02      	ldr	r3, [pc, #8]	@ (80149f0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 80149e8:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 80149ea:	b005      	add	sp, #20
 80149ec:	bd30      	pop	{r4, r5, pc}
 80149ee:	bf00      	nop
 80149f0:	20002878 	.word	0x20002878
 80149f4:	08037c48 	.word	0x08037c48
 80149f8:	2000287c 	.word	0x2000287c
 80149fc:	200028d0 	.word	0x200028d0
 8014a00:	200028cc 	.word	0x200028cc
 8014a04:	08014f61 	.word	0x08014f61
 8014a08:	200028d4 	.word	0x200028d4
 8014a0c:	200028c0 	.word	0x200028c0

08014a10 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a14:	b085      	sub	sp, #20
 8014a16:	4681      	mov	r9, r0
 8014a18:	4688      	mov	r8, r1
 8014a1a:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8014a1c:	4c2a      	ldr	r4, [pc, #168]	@ (8014ac8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8014a1e:	f100 0308 	add.w	r3, r0, #8
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	4b29      	ldr	r3, [pc, #164]	@ (8014acc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014a26:	4a2a      	ldr	r2, [pc, #168]	@ (8014ad0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014a28:	2128      	movs	r1, #40	@ 0x28
 8014a2a:	6820      	ldr	r0, [r4, #0]
 8014a2c:	f00e fde0 	bl	80235f0 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014a30:	6824      	ldr	r4, [r4, #0]
 8014a32:	4620      	mov	r0, r4
 8014a34:	f7fb fc34 	bl	80102a0 <strlen>
 8014a38:	4601      	mov	r1, r0
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f000 fbe0 	bl	8015200 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014a40:	2600      	movs	r6, #0
 8014a42:	e03b      	b.n	8014abc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014a44:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014a48:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014a4c:	791d      	ldrb	r5, [r3, #4]
 8014a4e:	4f21      	ldr	r7, [pc, #132]	@ (8014ad4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014a50:	462b      	mov	r3, r5
 8014a52:	4622      	mov	r2, r4
 8014a54:	2180      	movs	r1, #128	@ 0x80
 8014a56:	6838      	ldr	r0, [r7, #0]
 8014a58:	f000 fbf0 	bl	801523c <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014a5c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014ae0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014a60:	462b      	mov	r3, r5
 8014a62:	4622      	mov	r2, r4
 8014a64:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014a68:	f8db 0000 	ldr.w	r0, [fp]
 8014a6c:	f000 fc96 	bl	801539c <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014a70:	4d19      	ldr	r5, [pc, #100]	@ (8014ad8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014a72:	ac02      	add	r4, sp, #8
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	4620      	mov	r0, r4
 8014a78:	f00f fc42 	bl	8024300 <mg_str_s>
 8014a7c:	f105 0318 	add.w	r3, r5, #24
 8014a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a84:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014a88:	f8db 1000 	ldr.w	r1, [fp]
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f00f fc37 	bl	8024300 <mg_str_s>
 8014a92:	f105 0320 	add.w	r3, r5, #32
 8014a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a9a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014a9e:	2401      	movs	r4, #1
 8014aa0:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014aa4:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014aa8:	4629      	mov	r1, r5
 8014aaa:	4648      	mov	r0, r9
 8014aac:	f012 ff02 	bl	80278b4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014ab0:	683a      	ldr	r2, [r7, #0]
 8014ab2:	490a      	ldr	r1, [pc, #40]	@ (8014adc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f7fd fa31 	bl	8011f1c <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014aba:	4426      	add	r6, r4
 8014abc:	4556      	cmp	r6, sl
 8014abe:	d3c1      	bcc.n	8014a44 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014ac0:	b005      	add	sp, #20
 8014ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20002874 	.word	0x20002874
 8014acc:	08026081 	.word	0x08026081
 8014ad0:	08037254 	.word	0x08037254
 8014ad4:	200028c8 	.word	0x200028c8
 8014ad8:	2000287c 	.word	0x2000287c
 8014adc:	08037c68 	.word	0x08037c68
 8014ae0:	200028c4 	.word	0x200028c4

08014ae4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014ae4:	b570      	push	{r4, r5, r6, lr}
 8014ae6:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 8014aec:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 8014aee:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 8014af0:	b326      	cbz	r6, 8014b3c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 8014af2:	4604      	mov	r4, r0
 8014af4:	b315      	cbz	r5, 8014b3c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014af6:	4b71      	ldr	r3, [pc, #452]	@ (8014cbc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2200      	movs	r2, #0
 8014afc:	2102      	movs	r1, #2
 8014afe:	a803      	add	r0, sp, #12
 8014b00:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8014b02:	9b03      	ldr	r3, [sp, #12]
 8014b04:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014b08:	0c1b      	lsrs	r3, r3, #16
 8014b0a:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 8014b0e:	496c      	ldr	r1, [pc, #432]	@ (8014cc0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 8014b10:	4628      	mov	r0, r5
 8014b12:	f017 ffe5 	bl	802cae0 <strstr>
    if (switch_position != NULL) {
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f000 80ba 	beq.w	8014c90 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8014b1c:	aa01      	add	r2, sp, #4
 8014b1e:	4969      	ldr	r1, [pc, #420]	@ (8014cc4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 8014b20:	f017 fbbc 	bl	802c29c <sscanf>
 8014b24:	2801      	cmp	r0, #1
 8014b26:	d018      	beq.n	8014b5a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014b28:	4b67      	ldr	r3, [pc, #412]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f300 80a5 	bgt.w	8014c7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014b32:	4966      	ldr	r1, [pc, #408]	@ (8014ccc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 8014b34:	2003      	movs	r0, #3
 8014b36:	f7fd f9f1 	bl	8011f1c <logging>
 8014b3a:	e0b2      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014b3c:	4b62      	ldr	r3, [pc, #392]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f340 80ae 	ble.w	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 8014b46:	4b62      	ldr	r3, [pc, #392]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b48:	2292      	movs	r2, #146	@ 0x92
 8014b4a:	4962      	ldr	r1, [pc, #392]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b4c:	2001      	movs	r0, #1
 8014b4e:	f011 fb4b 	bl	80261e8 <mg_log_prefix>
 8014b52:	4861      	ldr	r0, [pc, #388]	@ (8014cd8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8014b54:	f00f f9f6 	bl	8023f44 <mg_log>
    	return;
 8014b58:	e0a3      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	dc18      	bgt.n	8014b94 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8014b62:	462b      	mov	r3, r5
 8014b64:	9a01      	ldr	r2, [sp, #4]
 8014b66:	495d      	ldr	r1, [pc, #372]	@ (8014cdc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8014b68:	2001      	movs	r0, #1
 8014b6a:	f7fd f9d7 	bl	8011f1c <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8014b6e:	9d01      	ldr	r5, [sp, #4]
 8014b70:	1e6b      	subs	r3, r5, #1
 8014b72:	2b02      	cmp	r3, #2
 8014b74:	d81a      	bhi.n	8014bac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014b76:	68e4      	ldr	r4, [r4, #12]
 8014b78:	2c02      	cmp	r4, #2
 8014b7a:	d02e      	beq.n	8014bda <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014b7c:	2c03      	cmp	r4, #3
 8014b7e:	d04f      	beq.n	8014c20 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014b80:	4b51      	ldr	r3, [pc, #324]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	dc6e      	bgt.n	8014c66 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8014b88:	4632      	mov	r2, r6
 8014b8a:	4955      	ldr	r1, [pc, #340]	@ (8014ce0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014b8c:	2003      	movs	r0, #3
 8014b8e:	f7fd f9c5 	bl	8011f1c <logging>
 8014b92:	e086      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014b94:	4b4e      	ldr	r3, [pc, #312]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b96:	229f      	movs	r2, #159	@ 0x9f
 8014b98:	494e      	ldr	r1, [pc, #312]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b9a:	2002      	movs	r0, #2
 8014b9c:	f011 fb24 	bl	80261e8 <mg_log_prefix>
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	9901      	ldr	r1, [sp, #4]
 8014ba4:	484f      	ldr	r0, [pc, #316]	@ (8014ce4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8014ba6:	f00f f9cd 	bl	8023f44 <mg_log>
 8014baa:	e7da      	b.n	8014b62 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014bac:	4b46      	ldr	r3, [pc, #280]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	dc06      	bgt.n	8014bc2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8014bb4:	9b01      	ldr	r3, [sp, #4]
 8014bb6:	2203      	movs	r2, #3
 8014bb8:	494b      	ldr	r1, [pc, #300]	@ (8014ce8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014bba:	4610      	mov	r0, r2
 8014bbc:	f7fd f9ae 	bl	8011f1c <logging>
    			return;
 8014bc0:	e06f      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014bc2:	4b43      	ldr	r3, [pc, #268]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014bc4:	22a4      	movs	r2, #164	@ 0xa4
 8014bc6:	4943      	ldr	r1, [pc, #268]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014bc8:	2001      	movs	r0, #1
 8014bca:	f011 fb0d 	bl	80261e8 <mg_log_prefix>
 8014bce:	9a01      	ldr	r2, [sp, #4]
 8014bd0:	2103      	movs	r1, #3
 8014bd2:	4845      	ldr	r0, [pc, #276]	@ (8014ce8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014bd4:	f00f f9b6 	bl	8023f44 <mg_log>
 8014bd8:	e7ec      	b.n	8014bb4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014bda:	2202      	movs	r2, #2
 8014bdc:	4943      	ldr	r1, [pc, #268]	@ (8014cec <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 8014bde:	4630      	mov	r0, r6
 8014be0:	f017 ff33 	bl	802ca4a <strncmp>
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d1c9      	bne.n	8014b7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 8014be8:	f105 030f 	add.w	r3, r5, #15
 8014bec:	446b      	add	r3, sp
 8014bee:	2201      	movs	r2, #1
 8014bf0:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014bf4:	4b34      	ldr	r3, [pc, #208]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	4293      	cmp	r3, r2
 8014bfa:	dc06      	bgt.n	8014c0a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8014cbc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2201      	movs	r2, #1
 8014c02:	2102      	movs	r1, #2
 8014c04:	a802      	add	r0, sp, #8
 8014c06:	4798      	blx	r3
 8014c08:	e04b      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014c0a:	4b31      	ldr	r3, [pc, #196]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014c0c:	22ae      	movs	r2, #174	@ 0xae
 8014c0e:	4931      	ldr	r1, [pc, #196]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014c10:	2002      	movs	r0, #2
 8014c12:	f011 fae9 	bl	80261e8 <mg_log_prefix>
 8014c16:	9901      	ldr	r1, [sp, #4]
 8014c18:	4835      	ldr	r0, [pc, #212]	@ (8014cf0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 8014c1a:	f00f f993 	bl	8023f44 <mg_log>
 8014c1e:	e7ed      	b.n	8014bfc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014c20:	2203      	movs	r2, #3
 8014c22:	4934      	ldr	r1, [pc, #208]	@ (8014cf4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 8014c24:	4630      	mov	r0, r6
 8014c26:	f017 ff10 	bl	802ca4a <strncmp>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	d1a8      	bne.n	8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 8014c2e:	f105 030f 	add.w	r3, r5, #15
 8014c32:	446b      	add	r3, sp
 8014c34:	2200      	movs	r2, #0
 8014c36:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014c3a:	4b23      	ldr	r3, [pc, #140]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b01      	cmp	r3, #1
 8014c40:	dc06      	bgt.n	8014c50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014c42:	4b1e      	ldr	r3, [pc, #120]	@ (8014cbc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2201      	movs	r2, #1
 8014c48:	2102      	movs	r1, #2
 8014c4a:	a802      	add	r0, sp, #8
 8014c4c:	4798      	blx	r3
 8014c4e:	e028      	b.n	8014ca2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014c50:	4b1f      	ldr	r3, [pc, #124]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014c52:	22b2      	movs	r2, #178	@ 0xb2
 8014c54:	491f      	ldr	r1, [pc, #124]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014c56:	2002      	movs	r0, #2
 8014c58:	f011 fac6 	bl	80261e8 <mg_log_prefix>
 8014c5c:	9901      	ldr	r1, [sp, #4]
 8014c5e:	4826      	ldr	r0, [pc, #152]	@ (8014cf8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 8014c60:	f00f f970 	bl	8023f44 <mg_log>
 8014c64:	e7ed      	b.n	8014c42 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014c66:	4b1a      	ldr	r3, [pc, #104]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014c68:	22b6      	movs	r2, #182	@ 0xb6
 8014c6a:	491a      	ldr	r1, [pc, #104]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f011 fabb 	bl	80261e8 <mg_log_prefix>
 8014c72:	4631      	mov	r1, r6
 8014c74:	481a      	ldr	r0, [pc, #104]	@ (8014ce0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014c76:	f00f f965 	bl	8023f44 <mg_log>
 8014c7a:	e785      	b.n	8014b88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014c7c:	4b14      	ldr	r3, [pc, #80]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014c7e:	22bb      	movs	r2, #187	@ 0xbb
 8014c80:	4914      	ldr	r1, [pc, #80]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014c82:	2001      	movs	r0, #1
 8014c84:	f011 fab0 	bl	80261e8 <mg_log_prefix>
 8014c88:	481c      	ldr	r0, [pc, #112]	@ (8014cfc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 8014c8a:	f00f f95b 	bl	8023f44 <mg_log>
 8014c8e:	e750      	b.n	8014b32 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014c90:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	dc06      	bgt.n	8014ca6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8014c98:	462a      	mov	r2, r5
 8014c9a:	4919      	ldr	r1, [pc, #100]	@ (8014d00 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014c9c:	2003      	movs	r0, #3
 8014c9e:	f7fd f93d 	bl	8011f1c <logging>
}
 8014ca2:	b004      	add	sp, #16
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014ca8:	22bf      	movs	r2, #191	@ 0xbf
 8014caa:	490a      	ldr	r1, [pc, #40]	@ (8014cd4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014cac:	2001      	movs	r0, #1
 8014cae:	f011 fa9b 	bl	80261e8 <mg_log_prefix>
 8014cb2:	4629      	mov	r1, r5
 8014cb4:	4812      	ldr	r0, [pc, #72]	@ (8014d00 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014cb6:	f00f f945 	bl	8023f44 <mg_log>
 8014cba:	e7ed      	b.n	8014c98 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8014cbc:	20002860 	.word	0x20002860
 8014cc0:	08037cfc 	.word	0x08037cfc
 8014cc4:	08037d04 	.word	0x08037d04
 8014cc8:	2000012c 	.word	0x2000012c
 8014ccc:	08037e58 	.word	0x08037e58
 8014cd0:	08037c8c 	.word	0x08037c8c
 8014cd4:	08037cac 	.word	0x08037cac
 8014cd8:	08037cd8 	.word	0x08037cd8
 8014cdc:	08037d3c 	.word	0x08037d3c
 8014ce0:	08037de4 	.word	0x08037de4
 8014ce4:	08037d10 	.word	0x08037d10
 8014ce8:	08037d64 	.word	0x08037d64
 8014cec:	08037db4 	.word	0x08037db4
 8014cf0:	08037db8 	.word	0x08037db8
 8014cf4:	08037dcc 	.word	0x08037dcc
 8014cf8:	08037dd0 	.word	0x08037dd0
 8014cfc:	08037e20 	.word	0x08037e20
 8014d00:	08037e90 	.word	0x08037e90

08014d04 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014d04:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014d06:	fb01 f400 	mul.w	r4, r1, r0
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f005 fe34 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014d10:	4605      	mov	r5, r0
 8014d12:	b118      	cbz	r0, 8014d1c <_ZL9my_callocjj+0x18>
 8014d14:	4622      	mov	r2, r4
 8014d16:	2100      	movs	r1, #0
 8014d18:	f017 fe62 	bl	802c9e0 <memset>
}
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}

08014d20 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d24:	b087      	sub	sp, #28
 8014d26:	4607      	mov	r7, r0
 8014d28:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014d2a:	4d58      	ldr	r5, [pc, #352]	@ (8014e8c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014d2c:	682b      	ldr	r3, [r5, #0]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	2101      	movs	r1, #1
 8014d32:	a804      	add	r0, sp, #16
 8014d34:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014d36:	682b      	ldr	r3, [r5, #0]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	2102      	movs	r1, #2
 8014d3c:	f10d 0013 	add.w	r0, sp, #19
 8014d40:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014d42:	2203      	movs	r2, #3
 8014d44:	4952      	ldr	r1, [pc, #328]	@ (8014e90 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014d46:	a804      	add	r0, sp, #16
 8014d48:	f017 fdb6 	bl	802c8b8 <memcmp>
 8014d4c:	b948      	cbnz	r0, 8014d62 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014d4e:	2203      	movs	r2, #3
 8014d50:	4950      	ldr	r1, [pc, #320]	@ (8014e94 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014d52:	f10d 0013 	add.w	r0, sp, #19
 8014d56:	f017 fdaf 	bl	802c8b8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014d5a:	b910      	cbnz	r0, 8014d62 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014d5c:	2c00      	cmp	r4, #0
 8014d5e:	f000 8091 	beq.w	8014e84 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014d62:	4b4b      	ldr	r3, [pc, #300]	@ (8014e90 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014d64:	aa06      	add	r2, sp, #24
 8014d66:	e912 0003 	ldmdb	r2, {r0, r1}
 8014d6a:	6018      	str	r0, [r3, #0]
 8014d6c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014d6e:	2101      	movs	r1, #1
 8014d70:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014d74:	f7ff ffc6 	bl	8014d04 <_ZL9my_callocjj>
 8014d78:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014d7a:	2101      	movs	r1, #1
 8014d7c:	2080      	movs	r0, #128	@ 0x80
 8014d7e:	f7ff ffc1 	bl	8014d04 <_ZL9my_callocjj>
 8014d82:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014d84:	2200      	movs	r2, #0
 8014d86:	e038      	b.n	8014dfa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014d88:	f102 0801 	add.w	r8, r2, #1
 8014d8c:	fa5f f888 	uxtb.w	r8, r8
 8014d90:	f102 0318 	add.w	r3, r2, #24
 8014d94:	eb0d 0203 	add.w	r2, sp, r3
 8014d98:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014d9c:	9300      	str	r3, [sp, #0]
 8014d9e:	4643      	mov	r3, r8
 8014da0:	2201      	movs	r2, #1
 8014da2:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014da6:	4630      	mov	r0, r6
 8014da8:	f000 fcec 	bl	8015784 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014dac:	4643      	mov	r3, r8
 8014dae:	2201      	movs	r2, #1
 8014db0:	2180      	movs	r1, #128	@ 0x80
 8014db2:	4628      	mov	r0, r5
 8014db4:	f000 fd26 	bl	8015804 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014db8:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014e98 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014dbc:	ac02      	add	r4, sp, #8
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f00f fa9d 	bl	8024300 <mg_str_s>
 8014dc6:	f109 0318 	add.w	r3, r9, #24
 8014dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014dce:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014dd2:	4631      	mov	r1, r6
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f00f fa93 	bl	8024300 <mg_str_s>
 8014dda:	f109 0320 	add.w	r3, r9, #32
 8014dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014de2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014de6:	2300      	movs	r3, #0
 8014de8:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014dec:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014df0:	4649      	mov	r1, r9
 8014df2:	4638      	mov	r0, r7
 8014df4:	f012 fd5e 	bl	80278b4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014df8:	4642      	mov	r2, r8
 8014dfa:	2a02      	cmp	r2, #2
 8014dfc:	d9c4      	bls.n	8014d88 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014dfe:	2200      	movs	r2, #0
 8014e00:	e038      	b.n	8014e74 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014e02:	f102 0801 	add.w	r8, r2, #1
 8014e06:	fa5f f888 	uxtb.w	r8, r8
 8014e0a:	f102 0318 	add.w	r3, r2, #24
 8014e0e:	eb0d 0203 	add.w	r2, sp, r3
 8014e12:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	4643      	mov	r3, r8
 8014e1a:	2202      	movs	r2, #2
 8014e1c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014e20:	4630      	mov	r0, r6
 8014e22:	f000 fcaf 	bl	8015784 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014e26:	4643      	mov	r3, r8
 8014e28:	2202      	movs	r2, #2
 8014e2a:	2180      	movs	r1, #128	@ 0x80
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	f000 fce9 	bl	8015804 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014e32:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014e98 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014e36:	ac02      	add	r4, sp, #8
 8014e38:	4629      	mov	r1, r5
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	f00f fa60 	bl	8024300 <mg_str_s>
 8014e40:	f109 0318 	add.w	r3, r9, #24
 8014e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e48:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	4620      	mov	r0, r4
 8014e50:	f00f fa56 	bl	8024300 <mg_str_s>
 8014e54:	f109 0320 	add.w	r3, r9, #32
 8014e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e5c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014e60:	2300      	movs	r3, #0
 8014e62:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014e66:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014e6a:	4649      	mov	r1, r9
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f012 fd21 	bl	80278b4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014e72:	4642      	mov	r2, r8
 8014e74:	2a02      	cmp	r2, #2
 8014e76:	d9c4      	bls.n	8014e02 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f005 fdff 	bl	801aa7c <vPortFree>
		free(topik);
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f005 fdfc 	bl	801aa7c <vPortFree>
}
 8014e84:	b007      	add	sp, #28
 8014e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e8a:	bf00      	nop
 8014e8c:	20002860 	.word	0x20002860
 8014e90:	20002858 	.word	0x20002858
 8014e94:	2000285b 	.word	0x2000285b
 8014e98:	2000287c 	.word	0x2000287c

08014e9c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014e9c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014e9e:	4b05      	ldr	r3, [pc, #20]	@ (8014eb4 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014ea0:	6818      	ldr	r0, [r3, #0]
 8014ea2:	b110      	cbz	r0, 8014eaa <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014ea4:	4b04      	ldr	r3, [pc, #16]	@ (8014eb8 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	b903      	cbnz	r3, 8014eac <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014eaa:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014eac:	2100      	movs	r1, #0
 8014eae:	f7ff ff37 	bl	8014d20 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014eb2:	e7fa      	b.n	8014eaa <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014eb4:	20002878 	.word	0x20002878
 8014eb8:	20002864 	.word	0x20002864

08014ebc <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014ebc:	b508      	push	{r3, lr}
	if(is_registered){
 8014ebe:	4b05      	ldr	r3, [pc, #20]	@ (8014ed4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	b903      	cbnz	r3, 8014ec6 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014ec4:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014ec6:	2101      	movs	r1, #1
 8014ec8:	4b03      	ldr	r3, [pc, #12]	@ (8014ed8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014eca:	6818      	ldr	r0, [r3, #0]
 8014ecc:	f7ff ff28 	bl	8014d20 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014ed0:	e7f8      	b.n	8014ec4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014ed2:	bf00      	nop
 8014ed4:	20002864 	.word	0x20002864
 8014ed8:	20002878 	.word	0x20002878

08014edc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee0:	b083      	sub	sp, #12
 8014ee2:	4681      	mov	r9, r0
 8014ee4:	460d      	mov	r5, r1
 8014ee6:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014ee8:	2400      	movs	r4, #0
 8014eea:	e000      	b.n	8014eee <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014eec:	3401      	adds	r4, #1
 8014eee:	42b4      	cmp	r4, r6
 8014ef0:	d22e      	bcs.n	8014f50 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014ef2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014ef6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014efa:	2b02      	cmp	r3, #2
 8014efc:	d1f6      	bne.n	8014eec <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014efe:	2101      	movs	r1, #1
 8014f00:	2080      	movs	r0, #128	@ 0x80
 8014f02:	f7ff feff 	bl	8014d04 <_ZL9my_callocjj>
 8014f06:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014f08:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014f0c:	2202      	movs	r2, #2
 8014f0e:	2180      	movs	r1, #128	@ 0x80
 8014f10:	f000 fc60 	bl	80157d4 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014f14:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014f5c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014f18:	f04f 0b01 	mov.w	fp, #1
 8014f1c:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014f20:	46ea      	mov	sl, sp
 8014f22:	4639      	mov	r1, r7
 8014f24:	4650      	mov	r0, sl
 8014f26:	f00f f9eb 	bl	8024300 <mg_str_s>
 8014f2a:	f108 0318 	add.w	r3, r8, #24
 8014f2e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014f32:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014f36:	4641      	mov	r1, r8
 8014f38:	4648      	mov	r0, r9
 8014f3a:	f012 fc6d 	bl	8027818 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014f3e:	463a      	mov	r2, r7
 8014f40:	4905      	ldr	r1, [pc, #20]	@ (8014f58 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014f42:	4658      	mov	r0, fp
 8014f44:	f7fc ffea 	bl	8011f1c <logging>
			free(topik);
 8014f48:	4638      	mov	r0, r7
 8014f4a:	f005 fd97 	bl	801aa7c <vPortFree>
 8014f4e:	e7cd      	b.n	8014eec <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014f50:	b003      	add	sp, #12
 8014f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f56:	bf00      	nop
 8014f58:	08037ec0 	.word	0x08037ec0
 8014f5c:	2000287c 	.word	0x2000287c

08014f60 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8014f60:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8014f62:	2910      	cmp	r1, #16
 8014f64:	d031      	beq.n	8014fca <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8014f66:	4605      	mov	r5, r0
 8014f68:	2911      	cmp	r1, #17
 8014f6a:	d002      	beq.n	8014f72 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8014f6c:	2909      	cmp	r1, #9
 8014f6e:	d03a      	beq.n	8014fe6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8014f70:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8014f72:	4b22      	ldr	r3, [pc, #136]	@ (8014ffc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b02      	cmp	r3, #2
 8014f78:	dc1d      	bgt.n	8014fb6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 8014f7a:	4921      	ldr	r1, [pc, #132]	@ (8015000 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8014f7c:	2001      	movs	r0, #1
 8014f7e:	f7fc ffcd 	bl	8011f1c <logging>
		mqtt_conn = conn;
 8014f82:	4b20      	ldr	r3, [pc, #128]	@ (8015004 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014f84:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8014f86:	4b20      	ldr	r3, [pc, #128]	@ (8015008 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1f0      	bne.n	8014f70 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014f8e:	4e1f      	ldr	r6, [pc, #124]	@ (801500c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8014f90:	2206      	movs	r2, #6
 8014f92:	4631      	mov	r1, r6
 8014f94:	4628      	mov	r0, r5
 8014f96:	f7ff fd3b 	bl	8014a10 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8014f9a:	4c1a      	ldr	r4, [pc, #104]	@ (8015004 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014f9c:	2101      	movs	r1, #1
 8014f9e:	6820      	ldr	r0, [r4, #0]
 8014fa0:	f7ff febe 	bl	8014d20 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014fa4:	2206      	movs	r2, #6
 8014fa6:	4631      	mov	r1, r6
 8014fa8:	6820      	ldr	r0, [r4, #0]
 8014faa:	f7ff ff97 	bl	8014edc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014fae:	4b16      	ldr	r3, [pc, #88]	@ (8015008 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	701a      	strb	r2, [r3, #0]
 8014fb4:	e7dc      	b.n	8014f70 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014fb6:	4b16      	ldr	r3, [pc, #88]	@ (8015010 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8014fb8:	22cd      	movs	r2, #205	@ 0xcd
 8014fba:	4916      	ldr	r1, [pc, #88]	@ (8015014 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8014fbc:	2003      	movs	r0, #3
 8014fbe:	f011 f913 	bl	80261e8 <mg_log_prefix>
 8014fc2:	4815      	ldr	r0, [pc, #84]	@ (8015018 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8014fc4:	f00e ffbe 	bl	8023f44 <mg_log>
 8014fc8:	e7d7      	b.n	8014f7a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8014fca:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8014fcc:	4913      	ldr	r1, [pc, #76]	@ (801501c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8014fce:	2001      	movs	r0, #1
 8014fd0:	f7fc ffa4 	bl	8011f1c <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	f7ff fd85 	bl	8014ae4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8014fda:	2100      	movs	r1, #0
 8014fdc:	4b09      	ldr	r3, [pc, #36]	@ (8015004 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014fde:	6818      	ldr	r0, [r3, #0]
 8014fe0:	f7ff fe9e 	bl	8014d20 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8014fe4:	e7c4      	b.n	8014f70 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 8014fe6:	490e      	ldr	r1, [pc, #56]	@ (8015020 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8014fe8:	2001      	movs	r0, #1
 8014fea:	f7fc ff97 	bl	8011f1c <logging>
		mqtt_conn     = NULL;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	4a04      	ldr	r2, [pc, #16]	@ (8015004 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014ff2:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8014ff4:	4a04      	ldr	r2, [pc, #16]	@ (8015008 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014ff6:	7013      	strb	r3, [r2, #0]
}
 8014ff8:	e7ba      	b.n	8014f70 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8014ffa:	bf00      	nop
 8014ffc:	2000012c 	.word	0x2000012c
 8015000:	08037f08 	.word	0x08037f08
 8015004:	20002878 	.word	0x20002878
 8015008:	20002864 	.word	0x20002864
 801500c:	200000c8 	.word	0x200000c8
 8015010:	08037edc 	.word	0x08037edc
 8015014:	08037cac 	.word	0x08037cac
 8015018:	08037ef0 	.word	0x08037ef0
 801501c:	08037f20 	.word	0x08037f20
 8015020:	08037f44 	.word	0x08037f44

08015024 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8015024:	4b01      	ldr	r3, [pc, #4]	@ (801502c <get_mqtt_connection+0x8>)
 8015026:	6818      	ldr	r0, [r3, #0]
 8015028:	4770      	bx	lr
 801502a:	bf00      	nop
 801502c:	20002878 	.word	0x20002878

08015030 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8015030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015034:	b086      	sub	sp, #24
 8015036:	4606      	mov	r6, r0
 8015038:	460c      	mov	r4, r1
 801503a:	4691      	mov	r9, r2
 801503c:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801503e:	2101      	movs	r1, #1
 8015040:	2080      	movs	r0, #128	@ 0x80
 8015042:	f7ff fe5f 	bl	8014d04 <_ZL9my_callocjj>
 8015046:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8015190 <mqtt_init+0x160>
 801504a:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801504e:	2101      	movs	r1, #1
 8015050:	2021      	movs	r0, #33	@ 0x21
 8015052:	f7ff fe57 	bl	8014d04 <_ZL9my_callocjj>
 8015056:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8015194 <mqtt_init+0x164>
 801505a:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 801505e:	2101      	movs	r1, #1
 8015060:	2021      	movs	r0, #33	@ 0x21
 8015062:	f7ff fe4f 	bl	8014d04 <_ZL9my_callocjj>
 8015066:	4f3b      	ldr	r7, [pc, #236]	@ (8015154 <mqtt_init+0x124>)
 8015068:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801506a:	2101      	movs	r1, #1
 801506c:	2080      	movs	r0, #128	@ 0x80
 801506e:	f7ff fe49 	bl	8014d04 <_ZL9my_callocjj>
 8015072:	4b39      	ldr	r3, [pc, #228]	@ (8015158 <mqtt_init+0x128>)
 8015074:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8015076:	2101      	movs	r1, #1
 8015078:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801507c:	f7ff fe42 	bl	8014d04 <_ZL9my_callocjj>
 8015080:	4b36      	ldr	r3, [pc, #216]	@ (801515c <mqtt_init+0x12c>)
 8015082:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8015084:	2101      	movs	r1, #1
 8015086:	2028      	movs	r0, #40	@ 0x28
 8015088:	f7ff fe3c 	bl	8014d04 <_ZL9my_callocjj>
 801508c:	4b34      	ldr	r3, [pc, #208]	@ (8015160 <mqtt_init+0x130>)
 801508e:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8015090:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015092:	4b34      	ldr	r3, [pc, #208]	@ (8015164 <mqtt_init+0x134>)
 8015094:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8015096:	f8da a000 	ldr.w	sl, [sl]
 801509a:	4649      	mov	r1, r9
 801509c:	4650      	mov	r0, sl
 801509e:	f018 fea9 	bl	802ddf4 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80150a2:	f8d8 9000 	ldr.w	r9, [r8]
 80150a6:	4629      	mov	r1, r5
 80150a8:	4648      	mov	r0, r9
 80150aa:	f018 fea3 	bl	802ddf4 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80150ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80150b0:	6838      	ldr	r0, [r7, #0]
 80150b2:	f018 fe9f 	bl	802ddf4 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 80150b6:	464b      	mov	r3, r9
 80150b8:	4652      	mov	r2, sl
 80150ba:	492b      	ldr	r1, [pc, #172]	@ (8015168 <mqtt_init+0x138>)
 80150bc:	2001      	movs	r0, #1
 80150be:	f7fc ff2d 	bl	8011f1c <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 80150c2:	4d2a      	ldr	r5, [pc, #168]	@ (801516c <mqtt_init+0x13c>)
 80150c4:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 80150c6:	4b2a      	ldr	r3, [pc, #168]	@ (8015170 <mqtt_init+0x140>)
 80150c8:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 80150ca:	2106      	movs	r1, #6
 80150cc:	4620      	mov	r0, r4
 80150ce:	f000 f871 	bl	80151b4 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80150d2:	4e28      	ldr	r6, [pc, #160]	@ (8015174 <mqtt_init+0x144>)
 80150d4:	ac04      	add	r4, sp, #16
 80150d6:	f8d8 1000 	ldr.w	r1, [r8]
 80150da:	4620      	mov	r0, r4
 80150dc:	f00f f910 	bl	8024300 <mg_str_s>
 80150e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80150e4:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80150e8:	6839      	ldr	r1, [r7, #0]
 80150ea:	4620      	mov	r0, r4
 80150ec:	f00f f908 	bl	8024300 <mg_str_s>
 80150f0:	f106 0308 	add.w	r3, r6, #8
 80150f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80150f8:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80150fc:	233c      	movs	r3, #60	@ 0x3c
 80150fe:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8015100:	2400      	movs	r4, #0
 8015102:	9402      	str	r4, [sp, #8]
 8015104:	4b1c      	ldr	r3, [pc, #112]	@ (8015178 <mqtt_init+0x148>)
 8015106:	9301      	str	r3, [sp, #4]
 8015108:	2303      	movs	r3, #3
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015110:	2300      	movs	r3, #0
 8015112:	6828      	ldr	r0, [r5, #0]
 8015114:	f010 fad6 	bl	80256c4 <mg_timer_add>
 8015118:	4b18      	ldr	r3, [pc, #96]	@ (801517c <mqtt_init+0x14c>)
 801511a:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 801511c:	9402      	str	r4, [sp, #8]
 801511e:	4b18      	ldr	r3, [pc, #96]	@ (8015180 <mqtt_init+0x150>)
 8015120:	9301      	str	r3, [sp, #4]
 8015122:	2601      	movs	r6, #1
 8015124:	9600      	str	r6, [sp, #0]
 8015126:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801512a:	2300      	movs	r3, #0
 801512c:	6828      	ldr	r0, [r5, #0]
 801512e:	f010 fac9 	bl	80256c4 <mg_timer_add>
 8015132:	4b14      	ldr	r3, [pc, #80]	@ (8015184 <mqtt_init+0x154>)
 8015134:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8015136:	9402      	str	r4, [sp, #8]
 8015138:	4b13      	ldr	r3, [pc, #76]	@ (8015188 <mqtt_init+0x158>)
 801513a:	9301      	str	r3, [sp, #4]
 801513c:	9600      	str	r6, [sp, #0]
 801513e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8015142:	2300      	movs	r3, #0
 8015144:	6828      	ldr	r0, [r5, #0]
 8015146:	f010 fabd 	bl	80256c4 <mg_timer_add>
 801514a:	4b10      	ldr	r3, [pc, #64]	@ (801518c <mqtt_init+0x15c>)
 801514c:	6018      	str	r0, [r3, #0]

}
 801514e:	b006      	add	sp, #24
 8015150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015154:	200028cc 	.word	0x200028cc
 8015158:	200028c8 	.word	0x200028c8
 801515c:	200028c4 	.word	0x200028c4
 8015160:	20002874 	.word	0x20002874
 8015164:	20002860 	.word	0x20002860
 8015168:	08037f5c 	.word	0x08037f5c
 801516c:	200028c0 	.word	0x200028c0
 8015170:	200028bc 	.word	0x200028bc
 8015174:	2000287c 	.word	0x2000287c
 8015178:	08014985 	.word	0x08014985
 801517c:	20002870 	.word	0x20002870
 8015180:	08014ebd 	.word	0x08014ebd
 8015184:	2000286c 	.word	0x2000286c
 8015188:	08014e9d 	.word	0x08014e9d
 801518c:	20002868 	.word	0x20002868
 8015190:	200028d4 	.word	0x200028d4
 8015194:	200028d0 	.word	0x200028d0

08015198 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015198:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801519a:	fb01 f400 	mul.w	r4, r1, r0
 801519e:	4620      	mov	r0, r4
 80151a0:	f005 fbea 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80151a4:	4605      	mov	r5, r0
 80151a6:	b118      	cbz	r0, 80151b0 <_ZL9my_callocjj+0x18>
 80151a8:	4622      	mov	r2, r4
 80151aa:	2100      	movs	r1, #0
 80151ac:	f017 fc18 	bl	802c9e0 <memset>
}
 80151b0:	4628      	mov	r0, r5
 80151b2:	bd38      	pop	{r3, r4, r5, pc}

080151b4 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	4606      	mov	r6, r0
 80151b8:	460d      	mov	r5, r1

	if ( unical_id){
 80151ba:	4b0f      	ldr	r3, [pc, #60]	@ (80151f8 <set_device_id+0x44>)
 80151bc:	6818      	ldr	r0, [r3, #0]
 80151be:	b108      	cbz	r0, 80151c4 <set_device_id+0x10>
		free(unical_id);
 80151c0:	f005 fc5c 	bl	801aa7c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80151c4:	0068      	lsls	r0, r5, #1
 80151c6:	2101      	movs	r1, #1
 80151c8:	4408      	add	r0, r1
 80151ca:	f7ff ffe5 	bl	8015198 <_ZL9my_callocjj>
 80151ce:	4b0a      	ldr	r3, [pc, #40]	@ (80151f8 <set_device_id+0x44>)
 80151d0:	6018      	str	r0, [r3, #0]


	if (unical_id){
 80151d2:	b108      	cbz	r0, 80151d8 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80151d4:	2400      	movs	r4, #0
 80151d6:	e00b      	b.n	80151f0 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151dc:	e00b      	b.n	80151f6 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80151de:	4b06      	ldr	r3, [pc, #24]	@ (80151f8 <set_device_id+0x44>)
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	5d32      	ldrb	r2, [r6, r4]
 80151e4:	4905      	ldr	r1, [pc, #20]	@ (80151fc <set_device_id+0x48>)
 80151e6:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80151ea:	f017 f837 	bl	802c25c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80151ee:	3401      	adds	r4, #1
 80151f0:	42ac      	cmp	r4, r5
 80151f2:	d3f4      	bcc.n	80151de <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 80151f4:	2000      	movs	r0, #0
}
 80151f6:	bd70      	pop	{r4, r5, r6, pc}
 80151f8:	200028dc 	.word	0x200028dc
 80151fc:	08037f88 	.word	0x08037f88

08015200 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	4605      	mov	r5, r0
 8015204:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8015206:	4b0c      	ldr	r3, [pc, #48]	@ (8015238 <set_device_conf_ip+0x38>)
 8015208:	6818      	ldr	r0, [r3, #0]
 801520a:	b108      	cbz	r0, 8015210 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 801520c:	f005 fc36 	bl	801aa7c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8015210:	2101      	movs	r1, #1
 8015212:	1860      	adds	r0, r4, r1
 8015214:	f7ff ffc0 	bl	8015198 <_ZL9my_callocjj>
 8015218:	4b07      	ldr	r3, [pc, #28]	@ (8015238 <set_device_conf_ip+0x38>)
 801521a:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 801521c:	b140      	cbz	r0, 8015230 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801521e:	4622      	mov	r2, r4
 8015220:	4629      	mov	r1, r5
 8015222:	f017 fc24 	bl	802ca6e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8015226:	4b04      	ldr	r3, [pc, #16]	@ (8015238 <set_device_conf_ip+0x38>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2000      	movs	r0, #0
 801522c:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 801522e:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015234:	e7fb      	b.n	801522e <set_device_conf_ip+0x2e>
 8015236:	bf00      	nop
 8015238:	200028d8 	.word	0x200028d8

0801523c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 801523c:	b500      	push	{lr}
 801523e:	b087      	sub	sp, #28

	strcpy(buff, "");
 8015240:	f04f 0c00 	mov.w	ip, #0
 8015244:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015248:	3a01      	subs	r2, #1
 801524a:	2a07      	cmp	r2, #7
 801524c:	f200 8087 	bhi.w	801535e <get_config_topik_string+0x122>
 8015250:	e8df f002 	tbb	[pc, r2]
 8015254:	45251604 	.word	0x45251604
 8015258:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 801525c:	9304      	str	r3, [sp, #16]
 801525e:	4b41      	ldr	r3, [pc, #260]	@ (8015364 <get_config_topik_string+0x128>)
 8015260:	9303      	str	r3, [sp, #12]
 8015262:	4b41      	ldr	r3, [pc, #260]	@ (8015368 <get_config_topik_string+0x12c>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	9302      	str	r3, [sp, #8]
 8015268:	4b40      	ldr	r3, [pc, #256]	@ (801536c <get_config_topik_string+0x130>)
 801526a:	9301      	str	r3, [sp, #4]
 801526c:	4b40      	ldr	r3, [pc, #256]	@ (8015370 <get_config_topik_string+0x134>)
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	4b40      	ldr	r3, [pc, #256]	@ (8015374 <get_config_topik_string+0x138>)
 8015272:	4a41      	ldr	r2, [pc, #260]	@ (8015378 <get_config_topik_string+0x13c>)
 8015274:	f016 fe8a 	bl	802bf8c <snprintf>
			return -1;
			break;
	}


	return 0;
 8015278:	2000      	movs	r0, #0
}
 801527a:	b007      	add	sp, #28
 801527c:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8015280:	9304      	str	r3, [sp, #16]
 8015282:	4b3e      	ldr	r3, [pc, #248]	@ (801537c <get_config_topik_string+0x140>)
 8015284:	9303      	str	r3, [sp, #12]
 8015286:	4a38      	ldr	r2, [pc, #224]	@ (8015368 <get_config_topik_string+0x12c>)
 8015288:	6812      	ldr	r2, [r2, #0]
 801528a:	9202      	str	r2, [sp, #8]
 801528c:	4a37      	ldr	r2, [pc, #220]	@ (801536c <get_config_topik_string+0x130>)
 801528e:	9201      	str	r2, [sp, #4]
 8015290:	9300      	str	r3, [sp, #0]
 8015292:	4b38      	ldr	r3, [pc, #224]	@ (8015374 <get_config_topik_string+0x138>)
 8015294:	4a38      	ldr	r2, [pc, #224]	@ (8015378 <get_config_topik_string+0x13c>)
 8015296:	f016 fe79 	bl	802bf8c <snprintf>
	return 0;
 801529a:	2000      	movs	r0, #0
			break;
 801529c:	e7ed      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 801529e:	9304      	str	r3, [sp, #16]
 80152a0:	4b37      	ldr	r3, [pc, #220]	@ (8015380 <get_config_topik_string+0x144>)
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	4b30      	ldr	r3, [pc, #192]	@ (8015368 <get_config_topik_string+0x12c>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	9302      	str	r3, [sp, #8]
 80152aa:	4b30      	ldr	r3, [pc, #192]	@ (801536c <get_config_topik_string+0x130>)
 80152ac:	9301      	str	r3, [sp, #4]
 80152ae:	4b35      	ldr	r3, [pc, #212]	@ (8015384 <get_config_topik_string+0x148>)
 80152b0:	9300      	str	r3, [sp, #0]
 80152b2:	4b30      	ldr	r3, [pc, #192]	@ (8015374 <get_config_topik_string+0x138>)
 80152b4:	4a30      	ldr	r2, [pc, #192]	@ (8015378 <get_config_topik_string+0x13c>)
 80152b6:	f016 fe69 	bl	802bf8c <snprintf>
	return 0;
 80152ba:	2000      	movs	r0, #0
			break;
 80152bc:	e7dd      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 80152be:	9304      	str	r3, [sp, #16]
 80152c0:	4b31      	ldr	r3, [pc, #196]	@ (8015388 <get_config_topik_string+0x14c>)
 80152c2:	9303      	str	r3, [sp, #12]
 80152c4:	4b28      	ldr	r3, [pc, #160]	@ (8015368 <get_config_topik_string+0x12c>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	9302      	str	r3, [sp, #8]
 80152ca:	4b28      	ldr	r3, [pc, #160]	@ (801536c <get_config_topik_string+0x130>)
 80152cc:	9301      	str	r3, [sp, #4]
 80152ce:	4b2d      	ldr	r3, [pc, #180]	@ (8015384 <get_config_topik_string+0x148>)
 80152d0:	9300      	str	r3, [sp, #0]
 80152d2:	4b28      	ldr	r3, [pc, #160]	@ (8015374 <get_config_topik_string+0x138>)
 80152d4:	4a28      	ldr	r2, [pc, #160]	@ (8015378 <get_config_topik_string+0x13c>)
 80152d6:	f016 fe59 	bl	802bf8c <snprintf>
	return 0;
 80152da:	2000      	movs	r0, #0
			break;
 80152dc:	e7cd      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 80152de:	9304      	str	r3, [sp, #16]
 80152e0:	4b2a      	ldr	r3, [pc, #168]	@ (801538c <get_config_topik_string+0x150>)
 80152e2:	9303      	str	r3, [sp, #12]
 80152e4:	4b20      	ldr	r3, [pc, #128]	@ (8015368 <get_config_topik_string+0x12c>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	9302      	str	r3, [sp, #8]
 80152ea:	4b20      	ldr	r3, [pc, #128]	@ (801536c <get_config_topik_string+0x130>)
 80152ec:	9301      	str	r3, [sp, #4]
 80152ee:	4b25      	ldr	r3, [pc, #148]	@ (8015384 <get_config_topik_string+0x148>)
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	4b20      	ldr	r3, [pc, #128]	@ (8015374 <get_config_topik_string+0x138>)
 80152f4:	4a20      	ldr	r2, [pc, #128]	@ (8015378 <get_config_topik_string+0x13c>)
 80152f6:	f016 fe49 	bl	802bf8c <snprintf>
	return 0;
 80152fa:	2000      	movs	r0, #0
			break;
 80152fc:	e7bd      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 80152fe:	9304      	str	r3, [sp, #16]
 8015300:	4b23      	ldr	r3, [pc, #140]	@ (8015390 <get_config_topik_string+0x154>)
 8015302:	9303      	str	r3, [sp, #12]
 8015304:	4b18      	ldr	r3, [pc, #96]	@ (8015368 <get_config_topik_string+0x12c>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	9302      	str	r3, [sp, #8]
 801530a:	4b18      	ldr	r3, [pc, #96]	@ (801536c <get_config_topik_string+0x130>)
 801530c:	9301      	str	r3, [sp, #4]
 801530e:	4b1d      	ldr	r3, [pc, #116]	@ (8015384 <get_config_topik_string+0x148>)
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	4b18      	ldr	r3, [pc, #96]	@ (8015374 <get_config_topik_string+0x138>)
 8015314:	4a18      	ldr	r2, [pc, #96]	@ (8015378 <get_config_topik_string+0x13c>)
 8015316:	f016 fe39 	bl	802bf8c <snprintf>
	return 0;
 801531a:	2000      	movs	r0, #0
			break;
 801531c:	e7ad      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 801531e:	9304      	str	r3, [sp, #16]
 8015320:	4b1c      	ldr	r3, [pc, #112]	@ (8015394 <get_config_topik_string+0x158>)
 8015322:	9303      	str	r3, [sp, #12]
 8015324:	4b10      	ldr	r3, [pc, #64]	@ (8015368 <get_config_topik_string+0x12c>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	9302      	str	r3, [sp, #8]
 801532a:	4b10      	ldr	r3, [pc, #64]	@ (801536c <get_config_topik_string+0x130>)
 801532c:	9301      	str	r3, [sp, #4]
 801532e:	4b15      	ldr	r3, [pc, #84]	@ (8015384 <get_config_topik_string+0x148>)
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	4b10      	ldr	r3, [pc, #64]	@ (8015374 <get_config_topik_string+0x138>)
 8015334:	4a10      	ldr	r2, [pc, #64]	@ (8015378 <get_config_topik_string+0x13c>)
 8015336:	f016 fe29 	bl	802bf8c <snprintf>
	return 0;
 801533a:	2000      	movs	r0, #0
			break;
 801533c:	e79d      	b.n	801527a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 801533e:	9304      	str	r3, [sp, #16]
 8015340:	4b15      	ldr	r3, [pc, #84]	@ (8015398 <get_config_topik_string+0x15c>)
 8015342:	9303      	str	r3, [sp, #12]
 8015344:	4b08      	ldr	r3, [pc, #32]	@ (8015368 <get_config_topik_string+0x12c>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	9302      	str	r3, [sp, #8]
 801534a:	4b08      	ldr	r3, [pc, #32]	@ (801536c <get_config_topik_string+0x130>)
 801534c:	9301      	str	r3, [sp, #4]
 801534e:	4b0d      	ldr	r3, [pc, #52]	@ (8015384 <get_config_topik_string+0x148>)
 8015350:	9300      	str	r3, [sp, #0]
 8015352:	4b08      	ldr	r3, [pc, #32]	@ (8015374 <get_config_topik_string+0x138>)
 8015354:	4a08      	ldr	r2, [pc, #32]	@ (8015378 <get_config_topik_string+0x13c>)
 8015356:	f016 fe19 	bl	802bf8c <snprintf>
	return 0;
 801535a:	2000      	movs	r0, #0
			break;
 801535c:	e78d      	b.n	801527a <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 801535e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015362:	e78a      	b.n	801527a <get_config_topik_string+0x3e>
 8015364:	08037fa8 	.word	0x08037fa8
 8015368:	200028dc 	.word	0x200028dc
 801536c:	08036754 	.word	0x08036754
 8015370:	08037fb0 	.word	0x08037fb0
 8015374:	200000f8 	.word	0x200000f8
 8015378:	08037f90 	.word	0x08037f90
 801537c:	08037cfc 	.word	0x08037cfc
 8015380:	08037fc0 	.word	0x08037fc0
 8015384:	08037fc8 	.word	0x08037fc8
 8015388:	08037fd0 	.word	0x08037fd0
 801538c:	08037fd8 	.word	0x08037fd8
 8015390:	08037fe0 	.word	0x08037fe0
 8015394:	08037ff0 	.word	0x08037ff0
 8015398:	08038000 	.word	0x08038000

0801539c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 801539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a0:	b099      	sub	sp, #100	@ 0x64
 80153a2:	9017      	str	r0, [sp, #92]	@ 0x5c
 80153a4:	460d      	mov	r5, r1
 80153a6:	4617      	mov	r7, r2
 80153a8:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 80153aa:	460a      	mov	r2, r1
 80153ac:	2100      	movs	r1, #0
 80153ae:	f017 fb17 	bl	802c9e0 <memset>

	switch (payload_type) {
 80153b2:	1e7a      	subs	r2, r7, #1
 80153b4:	2a07      	cmp	r2, #7
 80153b6:	f200 81ba 	bhi.w	801572e <get_config_payload_string+0x392>
 80153ba:	e8df f012 	tbh	[pc, r2, lsl #1]
 80153be:	0008      	.short	0x0008
 80153c0:	00a10043 	.word	0x00a10043
 80153c4:	00c500ea 	.word	0x00c500ea
 80153c8:	0193016e 	.word	0x0193016e
 80153cc:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80153ce:	2101      	movs	r1, #1
 80153d0:	2080      	movs	r0, #128	@ 0x80
 80153d2:	f7ff fee1 	bl	8015198 <_ZL9my_callocjj>
 80153d6:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 80153d8:	9400      	str	r4, [sp, #0]
 80153da:	4b80      	ldr	r3, [pc, #512]	@ (80155dc <get_config_payload_string+0x240>)
 80153dc:	4a80      	ldr	r2, [pc, #512]	@ (80155e0 <get_config_payload_string+0x244>)
 80153de:	2180      	movs	r1, #128	@ 0x80
 80153e0:	f016 fdd4 	bl	802bf8c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 80153e4:	4b7f      	ldr	r3, [pc, #508]	@ (80155e4 <get_config_payload_string+0x248>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	4b7f      	ldr	r3, [pc, #508]	@ (80155e8 <get_config_payload_string+0x24c>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80153ee:	4b7f      	ldr	r3, [pc, #508]	@ (80155ec <get_config_payload_string+0x250>)
 80153f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80153f2:	4b7f      	ldr	r3, [pc, #508]	@ (80155f0 <get_config_payload_string+0x254>)
 80153f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80153f6:	4b7f      	ldr	r3, [pc, #508]	@ (80155f4 <get_config_payload_string+0x258>)
 80153f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80153fa:	4b7f      	ldr	r3, [pc, #508]	@ (80155f8 <get_config_payload_string+0x25c>)
 80153fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80153fe:	4b7f      	ldr	r3, [pc, #508]	@ (80155fc <get_config_payload_string+0x260>)
 8015400:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015402:	920e      	str	r2, [sp, #56]	@ 0x38
 8015404:	4b7e      	ldr	r3, [pc, #504]	@ (8015600 <get_config_payload_string+0x264>)
 8015406:	930d      	str	r3, [sp, #52]	@ 0x34
 8015408:	497e      	ldr	r1, [pc, #504]	@ (8015604 <get_config_payload_string+0x268>)
 801540a:	910c      	str	r1, [sp, #48]	@ 0x30
 801540c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801540e:	497e      	ldr	r1, [pc, #504]	@ (8015608 <get_config_payload_string+0x26c>)
 8015410:	910a      	str	r1, [sp, #40]	@ 0x28
 8015412:	9209      	str	r2, [sp, #36]	@ 0x24
 8015414:	9308      	str	r3, [sp, #32]
 8015416:	9707      	str	r7, [sp, #28]
 8015418:	487c      	ldr	r0, [pc, #496]	@ (801560c <get_config_payload_string+0x270>)
 801541a:	9006      	str	r0, [sp, #24]
 801541c:	9405      	str	r4, [sp, #20]
 801541e:	9104      	str	r1, [sp, #16]
 8015420:	9403      	str	r4, [sp, #12]
 8015422:	9102      	str	r1, [sp, #8]
 8015424:	9201      	str	r2, [sp, #4]
 8015426:	9300      	str	r3, [sp, #0]
 8015428:	4b79      	ldr	r3, [pc, #484]	@ (8015610 <get_config_payload_string+0x274>)
 801542a:	4a7a      	ldr	r2, [pc, #488]	@ (8015614 <get_config_payload_string+0x278>)
 801542c:	4629      	mov	r1, r5
 801542e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015430:	f016 fdac 	bl	802bf8c <snprintf>
 8015434:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8015436:	4638      	mov	r0, r7
 8015438:	f005 fb20 	bl	801aa7c <vPortFree>

			return len;
 801543c:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 801543e:	b019      	add	sp, #100	@ 0x64
 8015440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015444:	2101      	movs	r1, #1
 8015446:	2080      	movs	r0, #128	@ 0x80
 8015448:	f7ff fea6 	bl	8015198 <_ZL9my_callocjj>
 801544c:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801544e:	2101      	movs	r1, #1
 8015450:	2080      	movs	r0, #128	@ 0x80
 8015452:	f7ff fea1 	bl	8015198 <_ZL9my_callocjj>
 8015456:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8015458:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 801564c <get_config_payload_string+0x2b0>
 801545c:	9400      	str	r4, [sp, #0]
 801545e:	464b      	mov	r3, r9
 8015460:	4a6d      	ldr	r2, [pc, #436]	@ (8015618 <get_config_payload_string+0x27c>)
 8015462:	2180      	movs	r1, #128	@ 0x80
 8015464:	4638      	mov	r0, r7
 8015466:	f016 fd91 	bl	802bf8c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 801546a:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8015600 <get_config_payload_string+0x264>
 801546e:	4e65      	ldr	r6, [pc, #404]	@ (8015604 <get_config_payload_string+0x268>)
 8015470:	9602      	str	r6, [sp, #8]
 8015472:	9701      	str	r7, [sp, #4]
 8015474:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80155e4 <get_config_payload_string+0x248>
 8015478:	f8db 3000 	ldr.w	r3, [fp]
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	4653      	mov	r3, sl
 8015480:	4a66      	ldr	r2, [pc, #408]	@ (801561c <get_config_payload_string+0x280>)
 8015482:	2180      	movs	r1, #128	@ 0x80
 8015484:	4640      	mov	r0, r8
 8015486:	f016 fd81 	bl	802bf8c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 801548a:	9400      	str	r4, [sp, #0]
 801548c:	4b64      	ldr	r3, [pc, #400]	@ (8015620 <get_config_payload_string+0x284>)
 801548e:	4a54      	ldr	r2, [pc, #336]	@ (80155e0 <get_config_payload_string+0x244>)
 8015490:	2180      	movs	r1, #128	@ 0x80
 8015492:	4638      	mov	r0, r7
 8015494:	f016 fd7a 	bl	802bf8c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8015498:	f8db 3000 	ldr.w	r3, [fp]
 801549c:	4a52      	ldr	r2, [pc, #328]	@ (80155e8 <get_config_payload_string+0x24c>)
 801549e:	6812      	ldr	r2, [r2, #0]
 80154a0:	9214      	str	r2, [sp, #80]	@ 0x50
 80154a2:	4a52      	ldr	r2, [pc, #328]	@ (80155ec <get_config_payload_string+0x250>)
 80154a4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80154a6:	4a52      	ldr	r2, [pc, #328]	@ (80155f0 <get_config_payload_string+0x254>)
 80154a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80154aa:	4a52      	ldr	r2, [pc, #328]	@ (80155f4 <get_config_payload_string+0x258>)
 80154ac:	9211      	str	r2, [sp, #68]	@ 0x44
 80154ae:	4a52      	ldr	r2, [pc, #328]	@ (80155f8 <get_config_payload_string+0x25c>)
 80154b0:	9210      	str	r2, [sp, #64]	@ 0x40
 80154b2:	4a52      	ldr	r2, [pc, #328]	@ (80155fc <get_config_payload_string+0x260>)
 80154b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80154b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80154b8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 80154bc:	960c      	str	r6, [sp, #48]	@ 0x30
 80154be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80154c0:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80154c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80154c6:	f8cd a020 	str.w	sl, [sp, #32]
 80154ca:	9707      	str	r7, [sp, #28]
 80154cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80154d0:	9405      	str	r4, [sp, #20]
 80154d2:	f8cd 9010 	str.w	r9, [sp, #16]
 80154d6:	9403      	str	r4, [sp, #12]
 80154d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80154dc:	9301      	str	r3, [sp, #4]
 80154de:	f8cd a000 	str.w	sl, [sp]
 80154e2:	464b      	mov	r3, r9
 80154e4:	4a4b      	ldr	r2, [pc, #300]	@ (8015614 <get_config_payload_string+0x278>)
 80154e6:	4629      	mov	r1, r5
 80154e8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80154ea:	f016 fd4f 	bl	802bf8c <snprintf>
 80154ee:	4604      	mov	r4, r0
			free(name);
 80154f0:	4638      	mov	r0, r7
 80154f2:	f005 fac3 	bl	801aa7c <vPortFree>
			free(com_topik);
 80154f6:	4640      	mov	r0, r8
 80154f8:	f005 fac0 	bl	801aa7c <vPortFree>
			return len;
 80154fc:	b2e0      	uxtb	r0, r4
 80154fe:	e79e      	b.n	801543e <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8015500:	4b38      	ldr	r3, [pc, #224]	@ (80155e4 <get_config_payload_string+0x248>)
 8015502:	6819      	ldr	r1, [r3, #0]
 8015504:	4b3e      	ldr	r3, [pc, #248]	@ (8015600 <get_config_payload_string+0x264>)
 8015506:	4a47      	ldr	r2, [pc, #284]	@ (8015624 <get_config_payload_string+0x288>)
 8015508:	4837      	ldr	r0, [pc, #220]	@ (80155e8 <get_config_payload_string+0x24c>)
 801550a:	6800      	ldr	r0, [r0, #0]
 801550c:	9010      	str	r0, [sp, #64]	@ 0x40
 801550e:	4837      	ldr	r0, [pc, #220]	@ (80155ec <get_config_payload_string+0x250>)
 8015510:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015512:	4837      	ldr	r0, [pc, #220]	@ (80155f0 <get_config_payload_string+0x254>)
 8015514:	900e      	str	r0, [sp, #56]	@ 0x38
 8015516:	4837      	ldr	r0, [pc, #220]	@ (80155f4 <get_config_payload_string+0x258>)
 8015518:	900d      	str	r0, [sp, #52]	@ 0x34
 801551a:	4837      	ldr	r0, [pc, #220]	@ (80155f8 <get_config_payload_string+0x25c>)
 801551c:	900c      	str	r0, [sp, #48]	@ 0x30
 801551e:	4837      	ldr	r0, [pc, #220]	@ (80155fc <get_config_payload_string+0x260>)
 8015520:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015522:	910a      	str	r1, [sp, #40]	@ 0x28
 8015524:	9309      	str	r3, [sp, #36]	@ 0x24
 8015526:	4840      	ldr	r0, [pc, #256]	@ (8015628 <get_config_payload_string+0x28c>)
 8015528:	9008      	str	r0, [sp, #32]
 801552a:	9207      	str	r2, [sp, #28]
 801552c:	9106      	str	r1, [sp, #24]
 801552e:	9305      	str	r3, [sp, #20]
 8015530:	483e      	ldr	r0, [pc, #248]	@ (801562c <get_config_payload_string+0x290>)
 8015532:	9004      	str	r0, [sp, #16]
 8015534:	483e      	ldr	r0, [pc, #248]	@ (8015630 <get_config_payload_string+0x294>)
 8015536:	9003      	str	r0, [sp, #12]
 8015538:	9202      	str	r2, [sp, #8]
 801553a:	483e      	ldr	r0, [pc, #248]	@ (8015634 <get_config_payload_string+0x298>)
 801553c:	9001      	str	r0, [sp, #4]
 801553e:	9100      	str	r1, [sp, #0]
 8015540:	4934      	ldr	r1, [pc, #208]	@ (8015614 <get_config_payload_string+0x278>)
 8015542:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015544:	f016 fe8a 	bl	802c25c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015548:	4b26      	ldr	r3, [pc, #152]	@ (80155e4 <get_config_payload_string+0x248>)
 801554a:	6819      	ldr	r1, [r3, #0]
 801554c:	4b2c      	ldr	r3, [pc, #176]	@ (8015600 <get_config_payload_string+0x264>)
 801554e:	4a3a      	ldr	r2, [pc, #232]	@ (8015638 <get_config_payload_string+0x29c>)
 8015550:	4825      	ldr	r0, [pc, #148]	@ (80155e8 <get_config_payload_string+0x24c>)
 8015552:	6800      	ldr	r0, [r0, #0]
 8015554:	9010      	str	r0, [sp, #64]	@ 0x40
 8015556:	4825      	ldr	r0, [pc, #148]	@ (80155ec <get_config_payload_string+0x250>)
 8015558:	900f      	str	r0, [sp, #60]	@ 0x3c
 801555a:	4825      	ldr	r0, [pc, #148]	@ (80155f0 <get_config_payload_string+0x254>)
 801555c:	900e      	str	r0, [sp, #56]	@ 0x38
 801555e:	4825      	ldr	r0, [pc, #148]	@ (80155f4 <get_config_payload_string+0x258>)
 8015560:	900d      	str	r0, [sp, #52]	@ 0x34
 8015562:	4825      	ldr	r0, [pc, #148]	@ (80155f8 <get_config_payload_string+0x25c>)
 8015564:	900c      	str	r0, [sp, #48]	@ 0x30
 8015566:	4825      	ldr	r0, [pc, #148]	@ (80155fc <get_config_payload_string+0x260>)
 8015568:	900b      	str	r0, [sp, #44]	@ 0x2c
 801556a:	910a      	str	r1, [sp, #40]	@ 0x28
 801556c:	9309      	str	r3, [sp, #36]	@ 0x24
 801556e:	4833      	ldr	r0, [pc, #204]	@ (801563c <get_config_payload_string+0x2a0>)
 8015570:	9008      	str	r0, [sp, #32]
 8015572:	9207      	str	r2, [sp, #28]
 8015574:	9106      	str	r1, [sp, #24]
 8015576:	9305      	str	r3, [sp, #20]
 8015578:	4831      	ldr	r0, [pc, #196]	@ (8015640 <get_config_payload_string+0x2a4>)
 801557a:	9004      	str	r0, [sp, #16]
 801557c:	4823      	ldr	r0, [pc, #140]	@ (801560c <get_config_payload_string+0x270>)
 801557e:	9003      	str	r0, [sp, #12]
 8015580:	9202      	str	r2, [sp, #8]
 8015582:	482c      	ldr	r0, [pc, #176]	@ (8015634 <get_config_payload_string+0x298>)
 8015584:	9001      	str	r0, [sp, #4]
 8015586:	9100      	str	r1, [sp, #0]
 8015588:	4922      	ldr	r1, [pc, #136]	@ (8015614 <get_config_payload_string+0x278>)
 801558a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801558c:	f016 fe66 	bl	802c25c <sprintf>
			break;
 8015590:	e7da      	b.n	8015548 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8015592:	4b14      	ldr	r3, [pc, #80]	@ (80155e4 <get_config_payload_string+0x248>)
 8015594:	6819      	ldr	r1, [r3, #0]
 8015596:	4b1a      	ldr	r3, [pc, #104]	@ (8015600 <get_config_payload_string+0x264>)
 8015598:	4a1d      	ldr	r2, [pc, #116]	@ (8015610 <get_config_payload_string+0x274>)
 801559a:	4813      	ldr	r0, [pc, #76]	@ (80155e8 <get_config_payload_string+0x24c>)
 801559c:	6800      	ldr	r0, [r0, #0]
 801559e:	9010      	str	r0, [sp, #64]	@ 0x40
 80155a0:	4812      	ldr	r0, [pc, #72]	@ (80155ec <get_config_payload_string+0x250>)
 80155a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80155a4:	4812      	ldr	r0, [pc, #72]	@ (80155f0 <get_config_payload_string+0x254>)
 80155a6:	900e      	str	r0, [sp, #56]	@ 0x38
 80155a8:	4812      	ldr	r0, [pc, #72]	@ (80155f4 <get_config_payload_string+0x258>)
 80155aa:	900d      	str	r0, [sp, #52]	@ 0x34
 80155ac:	4812      	ldr	r0, [pc, #72]	@ (80155f8 <get_config_payload_string+0x25c>)
 80155ae:	900c      	str	r0, [sp, #48]	@ 0x30
 80155b0:	4812      	ldr	r0, [pc, #72]	@ (80155fc <get_config_payload_string+0x260>)
 80155b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80155b4:	910a      	str	r1, [sp, #40]	@ 0x28
 80155b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80155b8:	4822      	ldr	r0, [pc, #136]	@ (8015644 <get_config_payload_string+0x2a8>)
 80155ba:	9008      	str	r0, [sp, #32]
 80155bc:	9207      	str	r2, [sp, #28]
 80155be:	9106      	str	r1, [sp, #24]
 80155c0:	9305      	str	r3, [sp, #20]
 80155c2:	4821      	ldr	r0, [pc, #132]	@ (8015648 <get_config_payload_string+0x2ac>)
 80155c4:	9004      	str	r0, [sp, #16]
 80155c6:	4811      	ldr	r0, [pc, #68]	@ (801560c <get_config_payload_string+0x270>)
 80155c8:	9003      	str	r0, [sp, #12]
 80155ca:	9202      	str	r2, [sp, #8]
 80155cc:	4819      	ldr	r0, [pc, #100]	@ (8015634 <get_config_payload_string+0x298>)
 80155ce:	9001      	str	r0, [sp, #4]
 80155d0:	9100      	str	r1, [sp, #0]
 80155d2:	4910      	ldr	r1, [pc, #64]	@ (8015614 <get_config_payload_string+0x278>)
 80155d4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80155d6:	f016 fe41 	bl	802c25c <sprintf>
			break;
 80155da:	e7b5      	b.n	8015548 <get_config_payload_string+0x1ac>
 80155dc:	08038008 	.word	0x08038008
 80155e0:	08038014 	.word	0x08038014
 80155e4:	200028dc 	.word	0x200028dc
 80155e8:	200028d8 	.word	0x200028d8
 80155ec:	08036674 	.word	0x08036674
 80155f0:	08036670 	.word	0x08036670
 80155f4:	0803801c 	.word	0x0803801c
 80155f8:	08036734 	.word	0x08036734
 80155fc:	08036748 	.word	0x08036748
 8015600:	08036754 	.word	0x08036754
 8015604:	08036c80 	.word	0x08036c80
 8015608:	08037fa8 	.word	0x08037fa8
 801560c:	0803a478 	.word	0x0803a478
 8015610:	08037fd8 	.word	0x08037fd8
 8015614:	08038184 	.word	0x08038184
 8015618:	0803802c 	.word	0x0803802c
 801561c:	0803815c 	.word	0x0803815c
 8015620:	08038034 	.word	0x08038034
 8015624:	08037fc0 	.word	0x08037fc0
 8015628:	08038048 	.word	0x08038048
 801562c:	0803804c 	.word	0x0803804c
 8015630:	0803805c 	.word	0x0803805c
 8015634:	08038080 	.word	0x08038080
 8015638:	08037fd0 	.word	0x08037fd0
 801563c:	08038088 	.word	0x08038088
 8015640:	0803808c 	.word	0x0803808c
 8015644:	0803809c 	.word	0x0803809c
 8015648:	080380a0 	.word	0x080380a0
 801564c:	08037cfc 	.word	0x08037cfc
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8015650:	4b38      	ldr	r3, [pc, #224]	@ (8015734 <get_config_payload_string+0x398>)
 8015652:	6819      	ldr	r1, [r3, #0]
 8015654:	4b38      	ldr	r3, [pc, #224]	@ (8015738 <get_config_payload_string+0x39c>)
 8015656:	4a39      	ldr	r2, [pc, #228]	@ (801573c <get_config_payload_string+0x3a0>)
 8015658:	4839      	ldr	r0, [pc, #228]	@ (8015740 <get_config_payload_string+0x3a4>)
 801565a:	6800      	ldr	r0, [r0, #0]
 801565c:	9010      	str	r0, [sp, #64]	@ 0x40
 801565e:	4839      	ldr	r0, [pc, #228]	@ (8015744 <get_config_payload_string+0x3a8>)
 8015660:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015662:	4839      	ldr	r0, [pc, #228]	@ (8015748 <get_config_payload_string+0x3ac>)
 8015664:	900e      	str	r0, [sp, #56]	@ 0x38
 8015666:	4839      	ldr	r0, [pc, #228]	@ (801574c <get_config_payload_string+0x3b0>)
 8015668:	900d      	str	r0, [sp, #52]	@ 0x34
 801566a:	4839      	ldr	r0, [pc, #228]	@ (8015750 <get_config_payload_string+0x3b4>)
 801566c:	900c      	str	r0, [sp, #48]	@ 0x30
 801566e:	4839      	ldr	r0, [pc, #228]	@ (8015754 <get_config_payload_string+0x3b8>)
 8015670:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015672:	910a      	str	r1, [sp, #40]	@ 0x28
 8015674:	9309      	str	r3, [sp, #36]	@ 0x24
 8015676:	4838      	ldr	r0, [pc, #224]	@ (8015758 <get_config_payload_string+0x3bc>)
 8015678:	9008      	str	r0, [sp, #32]
 801567a:	9207      	str	r2, [sp, #28]
 801567c:	9106      	str	r1, [sp, #24]
 801567e:	9305      	str	r3, [sp, #20]
 8015680:	4836      	ldr	r0, [pc, #216]	@ (801575c <get_config_payload_string+0x3c0>)
 8015682:	9004      	str	r0, [sp, #16]
 8015684:	4836      	ldr	r0, [pc, #216]	@ (8015760 <get_config_payload_string+0x3c4>)
 8015686:	9003      	str	r0, [sp, #12]
 8015688:	9202      	str	r2, [sp, #8]
 801568a:	4836      	ldr	r0, [pc, #216]	@ (8015764 <get_config_payload_string+0x3c8>)
 801568c:	9001      	str	r0, [sp, #4]
 801568e:	9100      	str	r1, [sp, #0]
 8015690:	4935      	ldr	r1, [pc, #212]	@ (8015768 <get_config_payload_string+0x3cc>)
 8015692:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015694:	f016 fde2 	bl	802c25c <sprintf>
			break;
 8015698:	e756      	b.n	8015548 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 801569a:	4b26      	ldr	r3, [pc, #152]	@ (8015734 <get_config_payload_string+0x398>)
 801569c:	6819      	ldr	r1, [r3, #0]
 801569e:	4b26      	ldr	r3, [pc, #152]	@ (8015738 <get_config_payload_string+0x39c>)
 80156a0:	4a32      	ldr	r2, [pc, #200]	@ (801576c <get_config_payload_string+0x3d0>)
 80156a2:	4827      	ldr	r0, [pc, #156]	@ (8015740 <get_config_payload_string+0x3a4>)
 80156a4:	6800      	ldr	r0, [r0, #0]
 80156a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80156a8:	4826      	ldr	r0, [pc, #152]	@ (8015744 <get_config_payload_string+0x3a8>)
 80156aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156ac:	4826      	ldr	r0, [pc, #152]	@ (8015748 <get_config_payload_string+0x3ac>)
 80156ae:	900e      	str	r0, [sp, #56]	@ 0x38
 80156b0:	4826      	ldr	r0, [pc, #152]	@ (801574c <get_config_payload_string+0x3b0>)
 80156b2:	900d      	str	r0, [sp, #52]	@ 0x34
 80156b4:	4826      	ldr	r0, [pc, #152]	@ (8015750 <get_config_payload_string+0x3b4>)
 80156b6:	900c      	str	r0, [sp, #48]	@ 0x30
 80156b8:	4826      	ldr	r0, [pc, #152]	@ (8015754 <get_config_payload_string+0x3b8>)
 80156ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 80156bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80156be:	9309      	str	r3, [sp, #36]	@ 0x24
 80156c0:	482b      	ldr	r0, [pc, #172]	@ (8015770 <get_config_payload_string+0x3d4>)
 80156c2:	9008      	str	r0, [sp, #32]
 80156c4:	9207      	str	r2, [sp, #28]
 80156c6:	9106      	str	r1, [sp, #24]
 80156c8:	9305      	str	r3, [sp, #20]
 80156ca:	482a      	ldr	r0, [pc, #168]	@ (8015774 <get_config_payload_string+0x3d8>)
 80156cc:	9004      	str	r0, [sp, #16]
 80156ce:	4824      	ldr	r0, [pc, #144]	@ (8015760 <get_config_payload_string+0x3c4>)
 80156d0:	9003      	str	r0, [sp, #12]
 80156d2:	9202      	str	r2, [sp, #8]
 80156d4:	4823      	ldr	r0, [pc, #140]	@ (8015764 <get_config_payload_string+0x3c8>)
 80156d6:	9001      	str	r0, [sp, #4]
 80156d8:	9100      	str	r1, [sp, #0]
 80156da:	4923      	ldr	r1, [pc, #140]	@ (8015768 <get_config_payload_string+0x3cc>)
 80156dc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80156de:	f016 fdbd 	bl	802c25c <sprintf>
			break;
 80156e2:	e731      	b.n	8015548 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 80156e4:	4b13      	ldr	r3, [pc, #76]	@ (8015734 <get_config_payload_string+0x398>)
 80156e6:	6819      	ldr	r1, [r3, #0]
 80156e8:	4b13      	ldr	r3, [pc, #76]	@ (8015738 <get_config_payload_string+0x39c>)
 80156ea:	4a23      	ldr	r2, [pc, #140]	@ (8015778 <get_config_payload_string+0x3dc>)
 80156ec:	4814      	ldr	r0, [pc, #80]	@ (8015740 <get_config_payload_string+0x3a4>)
 80156ee:	6800      	ldr	r0, [r0, #0]
 80156f0:	9010      	str	r0, [sp, #64]	@ 0x40
 80156f2:	4814      	ldr	r0, [pc, #80]	@ (8015744 <get_config_payload_string+0x3a8>)
 80156f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156f6:	4814      	ldr	r0, [pc, #80]	@ (8015748 <get_config_payload_string+0x3ac>)
 80156f8:	900e      	str	r0, [sp, #56]	@ 0x38
 80156fa:	4814      	ldr	r0, [pc, #80]	@ (801574c <get_config_payload_string+0x3b0>)
 80156fc:	900d      	str	r0, [sp, #52]	@ 0x34
 80156fe:	4814      	ldr	r0, [pc, #80]	@ (8015750 <get_config_payload_string+0x3b4>)
 8015700:	900c      	str	r0, [sp, #48]	@ 0x30
 8015702:	4814      	ldr	r0, [pc, #80]	@ (8015754 <get_config_payload_string+0x3b8>)
 8015704:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015706:	910a      	str	r1, [sp, #40]	@ 0x28
 8015708:	9309      	str	r3, [sp, #36]	@ 0x24
 801570a:	481c      	ldr	r0, [pc, #112]	@ (801577c <get_config_payload_string+0x3e0>)
 801570c:	9008      	str	r0, [sp, #32]
 801570e:	9207      	str	r2, [sp, #28]
 8015710:	9106      	str	r1, [sp, #24]
 8015712:	9305      	str	r3, [sp, #20]
 8015714:	481a      	ldr	r0, [pc, #104]	@ (8015780 <get_config_payload_string+0x3e4>)
 8015716:	9004      	str	r0, [sp, #16]
 8015718:	4811      	ldr	r0, [pc, #68]	@ (8015760 <get_config_payload_string+0x3c4>)
 801571a:	9003      	str	r0, [sp, #12]
 801571c:	9202      	str	r2, [sp, #8]
 801571e:	4811      	ldr	r0, [pc, #68]	@ (8015764 <get_config_payload_string+0x3c8>)
 8015720:	9001      	str	r0, [sp, #4]
 8015722:	9100      	str	r1, [sp, #0]
 8015724:	4910      	ldr	r1, [pc, #64]	@ (8015768 <get_config_payload_string+0x3cc>)
 8015726:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015728:	f016 fd98 	bl	802c25c <sprintf>
			break;
 801572c:	e70c      	b.n	8015548 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 801572e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015732:	e684      	b.n	801543e <get_config_payload_string+0xa2>
 8015734:	200028dc 	.word	0x200028dc
 8015738:	08036754 	.word	0x08036754
 801573c:	08037fe0 	.word	0x08037fe0
 8015740:	200028d8 	.word	0x200028d8
 8015744:	08036674 	.word	0x08036674
 8015748:	08036670 	.word	0x08036670
 801574c:	0803801c 	.word	0x0803801c
 8015750:	08036734 	.word	0x08036734
 8015754:	08036748 	.word	0x08036748
 8015758:	080380c4 	.word	0x080380c4
 801575c:	080380c8 	.word	0x080380c8
 8015760:	0803a478 	.word	0x0803a478
 8015764:	08038080 	.word	0x08038080
 8015768:	08038184 	.word	0x08038184
 801576c:	08037ff0 	.word	0x08037ff0
 8015770:	080380e8 	.word	0x080380e8
 8015774:	080380ec 	.word	0x080380ec
 8015778:	08038000 	.word	0x08038000
 801577c:	08038118 	.word	0x08038118
 8015780:	0803811c 	.word	0x0803811c

08015784 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015784:	b530      	push	{r4, r5, lr}
 8015786:	b083      	sub	sp, #12
 8015788:	461c      	mov	r4, r3
 801578a:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 801578e:	2a01      	cmp	r2, #1
 8015790:	d00b      	beq.n	80157aa <gen_bin_sensor_status_payload_JSON+0x26>
 8015792:	2a02      	cmp	r2, #2
 8015794:	d10b      	bne.n	80157ae <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8015796:	4b0a      	ldr	r3, [pc, #40]	@ (80157c0 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8015798:	b15d      	cbz	r5, 80157b2 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 801579a:	4a0a      	ldr	r2, [pc, #40]	@ (80157c4 <gen_bin_sensor_status_payload_JSON+0x40>)
 801579c:	9201      	str	r2, [sp, #4]
 801579e:	9400      	str	r4, [sp, #0]
 80157a0:	4a09      	ldr	r2, [pc, #36]	@ (80157c8 <gen_bin_sensor_status_payload_JSON+0x44>)
 80157a2:	f016 fbf3 	bl	802bf8c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 80157a6:	b003      	add	sp, #12
 80157a8:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 80157aa:	4b08      	ldr	r3, [pc, #32]	@ (80157cc <gen_bin_sensor_status_payload_JSON+0x48>)
 80157ac:	e7f4      	b.n	8015798 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 80157ae:	2300      	movs	r3, #0
 80157b0:	e7f2      	b.n	8015798 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 80157b2:	4a07      	ldr	r2, [pc, #28]	@ (80157d0 <gen_bin_sensor_status_payload_JSON+0x4c>)
 80157b4:	9201      	str	r2, [sp, #4]
 80157b6:	9400      	str	r4, [sp, #0]
 80157b8:	4a03      	ldr	r2, [pc, #12]	@ (80157c8 <gen_bin_sensor_status_payload_JSON+0x44>)
 80157ba:	f016 fbe7 	bl	802bf8c <snprintf>
 80157be:	e7f2      	b.n	80157a6 <gen_bin_sensor_status_payload_JSON+0x22>
 80157c0:	08037cfc 	.word	0x08037cfc
 80157c4:	08037db4 	.word	0x08037db4
 80157c8:	0803814c 	.word	0x0803814c
 80157cc:	08037fa8 	.word	0x08037fa8
 80157d0:	08037dcc 	.word	0x08037dcc

080157d4 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 80157d4:	b500      	push	{lr}
 80157d6:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 80157d8:	9302      	str	r3, [sp, #8]
 80157da:	4b06      	ldr	r3, [pc, #24]	@ (80157f4 <generate_comand_topik_for_subscrabe+0x20>)
 80157dc:	9301      	str	r3, [sp, #4]
 80157de:	4b06      	ldr	r3, [pc, #24]	@ (80157f8 <generate_comand_topik_for_subscrabe+0x24>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	4b05      	ldr	r3, [pc, #20]	@ (80157fc <generate_comand_topik_for_subscrabe+0x28>)
 80157e6:	4a06      	ldr	r2, [pc, #24]	@ (8015800 <generate_comand_topik_for_subscrabe+0x2c>)
 80157e8:	f016 fbd0 	bl	802bf8c <snprintf>
			break;
	}
}
 80157ec:	b005      	add	sp, #20
 80157ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80157f2:	bf00      	nop
 80157f4:	08037cfc 	.word	0x08037cfc
 80157f8:	200028dc 	.word	0x200028dc
 80157fc:	08036754 	.word	0x08036754
 8015800:	08038128 	.word	0x08038128

08015804 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015804:	b500      	push	{lr}
 8015806:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015808:	f04f 0c00 	mov.w	ip, #0
 801580c:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015810:	2a01      	cmp	r2, #1
 8015812:	d006      	beq.n	8015822 <generate_status_topik+0x1e>
 8015814:	2a02      	cmp	r2, #2
 8015816:	d00f      	beq.n	8015838 <generate_status_topik+0x34>
 8015818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 801581c:	b005      	add	sp, #20
 801581e:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015822:	9302      	str	r3, [sp, #8]
 8015824:	4b0a      	ldr	r3, [pc, #40]	@ (8015850 <generate_status_topik+0x4c>)
 8015826:	9301      	str	r3, [sp, #4]
 8015828:	4b0a      	ldr	r3, [pc, #40]	@ (8015854 <generate_status_topik+0x50>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	9300      	str	r3, [sp, #0]
 801582e:	4b0a      	ldr	r3, [pc, #40]	@ (8015858 <generate_status_topik+0x54>)
 8015830:	4a0a      	ldr	r2, [pc, #40]	@ (801585c <generate_status_topik+0x58>)
 8015832:	f016 fbab 	bl	802bf8c <snprintf>
 8015836:	e7f1      	b.n	801581c <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015838:	9302      	str	r3, [sp, #8]
 801583a:	4b09      	ldr	r3, [pc, #36]	@ (8015860 <generate_status_topik+0x5c>)
 801583c:	9301      	str	r3, [sp, #4]
 801583e:	4b05      	ldr	r3, [pc, #20]	@ (8015854 <generate_status_topik+0x50>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	9300      	str	r3, [sp, #0]
 8015844:	4b04      	ldr	r3, [pc, #16]	@ (8015858 <generate_status_topik+0x54>)
 8015846:	4a05      	ldr	r2, [pc, #20]	@ (801585c <generate_status_topik+0x58>)
 8015848:	f016 fba0 	bl	802bf8c <snprintf>
 801584c:	e7e6      	b.n	801581c <generate_status_topik+0x18>
 801584e:	bf00      	nop
 8015850:	08037fa8 	.word	0x08037fa8
 8015854:	200028dc 	.word	0x200028dc
 8015858:	08036754 	.word	0x08036754
 801585c:	08038138 	.word	0x08038138
 8015860:	08037cfc 	.word	0x08037cfc

08015864 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015864:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015866:	4b08      	ldr	r3, [pc, #32]	@ (8015888 <timer_fn+0x24>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	b12b      	cbz	r3, 8015878 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 801586c:	4b06      	ldr	r3, [pc, #24]	@ (8015888 <timer_fn+0x24>)
 801586e:	6818      	ldr	r0, [r3, #0]
 8015870:	b108      	cbz	r0, 8015876 <timer_fn+0x12>
 8015872:	f014 f9c9 	bl	8029c08 <mg_sntp_request>
}
 8015876:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015878:	4a04      	ldr	r2, [pc, #16]	@ (801588c <timer_fn+0x28>)
 801587a:	4619      	mov	r1, r3
 801587c:	f014 fa96 	bl	8029dac <mg_sntp_connect>
 8015880:	4b01      	ldr	r3, [pc, #4]	@ (8015888 <timer_fn+0x24>)
 8015882:	6018      	str	r0, [r3, #0]
 8015884:	e7f2      	b.n	801586c <timer_fn+0x8>
 8015886:	bf00      	nop
 8015888:	200028e0 	.word	0x200028e0
 801588c:	08015891 	.word	0x08015891

08015890 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015890:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8015892:	2912      	cmp	r1, #18
 8015894:	d002      	beq.n	801589c <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015896:	2909      	cmp	r1, #9
 8015898:	d046      	beq.n	8015928 <sfn+0x98>
}
 801589a:	bd70      	pop	{r4, r5, r6, pc}
 801589c:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 801589e:	4926      	ldr	r1, [pc, #152]	@ (8015938 <sfn+0xa8>)
 80158a0:	2001      	movs	r0, #1
 80158a2:	f7fc fb3b 	bl	8011f1c <logging>
    uint64_t curtime = mg_now();
 80158a6:	f014 f8eb 	bl	8029a80 <mg_now>
 80158aa:	4606      	mov	r6, r0
 80158ac:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80158ae:	4b23      	ldr	r3, [pc, #140]	@ (801593c <sfn+0xac>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b01      	cmp	r3, #1
 80158b4:	dc20      	bgt.n	80158f8 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 80158b6:	4632      	mov	r2, r6
 80158b8:	462b      	mov	r3, r5
 80158ba:	4921      	ldr	r1, [pc, #132]	@ (8015940 <sfn+0xb0>)
 80158bc:	2001      	movs	r0, #1
 80158be:	f7fc fb2d 	bl	8011f1c <logging>
      uint64_t t = *(uint64_t *) ev_data;
 80158c2:	6825      	ldr	r5, [r4, #0]
 80158c4:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 80158c6:	f010 fc89 	bl	80261dc <mg_millis>
 80158ca:	1a28      	subs	r0, r5, r0
 80158cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80158d0:	f04f 0300 	mov.w	r3, #0
 80158d4:	eb64 0101 	sbc.w	r1, r4, r1
 80158d8:	f7fb fa3e 	bl	8010d58 <__aeabi_uldivmod>
 80158dc:	4b19      	ldr	r3, [pc, #100]	@ (8015944 <sfn+0xb4>)
 80158de:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80158e2:	4b16      	ldr	r3, [pc, #88]	@ (801593c <sfn+0xac>)
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	dc12      	bgt.n	8015910 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80158ea:	462a      	mov	r2, r5
 80158ec:	4623      	mov	r3, r4
 80158ee:	4916      	ldr	r1, [pc, #88]	@ (8015948 <sfn+0xb8>)
 80158f0:	2001      	movs	r0, #1
 80158f2:	f7fc fb13 	bl	8011f1c <logging>
 80158f6:	e7d0      	b.n	801589a <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80158f8:	4b14      	ldr	r3, [pc, #80]	@ (801594c <sfn+0xbc>)
 80158fa:	221b      	movs	r2, #27
 80158fc:	4914      	ldr	r1, [pc, #80]	@ (8015950 <sfn+0xc0>)
 80158fe:	2002      	movs	r0, #2
 8015900:	f010 fc72 	bl	80261e8 <mg_log_prefix>
 8015904:	4632      	mov	r2, r6
 8015906:	462b      	mov	r3, r5
 8015908:	480d      	ldr	r0, [pc, #52]	@ (8015940 <sfn+0xb0>)
 801590a:	f00e fb1b 	bl	8023f44 <mg_log>
 801590e:	e7d2      	b.n	80158b6 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015910:	4b0e      	ldr	r3, [pc, #56]	@ (801594c <sfn+0xbc>)
 8015912:	2221      	movs	r2, #33	@ 0x21
 8015914:	490e      	ldr	r1, [pc, #56]	@ (8015950 <sfn+0xc0>)
 8015916:	2002      	movs	r0, #2
 8015918:	f010 fc66 	bl	80261e8 <mg_log_prefix>
 801591c:	462a      	mov	r2, r5
 801591e:	4623      	mov	r3, r4
 8015920:	480c      	ldr	r0, [pc, #48]	@ (8015954 <sfn+0xc4>)
 8015922:	f00e fb0f 	bl	8023f44 <mg_log>
 8015926:	e7e0      	b.n	80158ea <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015928:	490b      	ldr	r1, [pc, #44]	@ (8015958 <sfn+0xc8>)
 801592a:	2001      	movs	r0, #1
 801592c:	f7fc faf6 	bl	8011f1c <logging>
    s_sntp_conn = NULL;
 8015930:	4b0a      	ldr	r3, [pc, #40]	@ (801595c <sfn+0xcc>)
 8015932:	2200      	movs	r2, #0
 8015934:	601a      	str	r2, [r3, #0]
}
 8015936:	e7b0      	b.n	801589a <sfn+0xa>
 8015938:	08038304 	.word	0x08038304
 801593c:	2000012c 	.word	0x2000012c
 8015940:	08038348 	.word	0x08038348
 8015944:	200028e8 	.word	0x200028e8
 8015948:	080383a0 	.word	0x080383a0
 801594c:	080383fc 	.word	0x080383fc
 8015950:	08038328 	.word	0x08038328
 8015954:	0803837c 	.word	0x0803837c
 8015958:	080383c4 	.word	0x080383c4
 801595c:	200028e0 	.word	0x200028e0

08015960 <start_sntp>:

void start_sntp(void *arg){
 8015960:	b530      	push	{r4, r5, lr}
 8015962:	b085      	sub	sp, #20
 8015964:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015966:	490d      	ldr	r1, [pc, #52]	@ (801599c <start_sntp+0x3c>)
 8015968:	2001      	movs	r0, #1
 801596a:	f7fc fad7 	bl	8011f1c <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 801596e:	9402      	str	r4, [sp, #8]
 8015970:	4d0b      	ldr	r5, [pc, #44]	@ (80159a0 <start_sntp+0x40>)
 8015972:	9501      	str	r5, [sp, #4]
 8015974:	2300      	movs	r3, #0
 8015976:	9300      	str	r3, [sp, #0]
 8015978:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801597c:	2300      	movs	r3, #0
 801597e:	4620      	mov	r0, r4
 8015980:	f00f fea0 	bl	80256c4 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8015984:	9402      	str	r4, [sp, #8]
 8015986:	9501      	str	r5, [sp, #4]
 8015988:	2301      	movs	r3, #1
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	4a05      	ldr	r2, [pc, #20]	@ (80159a4 <start_sntp+0x44>)
 801598e:	2300      	movs	r3, #0
 8015990:	4620      	mov	r0, r4
 8015992:	f00f fe97 	bl	80256c4 <mg_timer_add>

}
 8015996:	b005      	add	sp, #20
 8015998:	bd30      	pop	{r4, r5, pc}
 801599a:	bf00      	nop
 801599c:	080383e0 	.word	0x080383e0
 80159a0:	08015865 	.word	0x08015865
 80159a4:	00107ac0 	.word	0x00107ac0

080159a8 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80159a8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80159aa:	fb01 f400 	mul.w	r4, r1, r0
 80159ae:	4620      	mov	r0, r4
 80159b0:	f004 ffe2 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80159b4:	4605      	mov	r5, r0
 80159b6:	b118      	cbz	r0, 80159c0 <my_calloc+0x18>
 80159b8:	4622      	mov	r2, r4
 80159ba:	2100      	movs	r1, #0
 80159bc:	f017 f810 	bl	802c9e0 <memset>
}
 80159c0:	4628      	mov	r0, r5
 80159c2:	bd38      	pop	{r3, r4, r5, pc}

080159c4 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 80159c4:	b570      	push	{r4, r5, r6, lr}
 80159c6:	b088      	sub	sp, #32
 80159c8:	4605      	mov	r5, r0
 80159ca:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 80159cc:	4917      	ldr	r1, [pc, #92]	@ (8015a2c <dev_description_handler+0x68>)
 80159ce:	2000      	movs	r0, #0
 80159d0:	f7fc faa4 	bl	8011f1c <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80159d4:	ae06      	add	r6, sp, #24
 80159d6:	4916      	ldr	r1, [pc, #88]	@ (8015a30 <dev_description_handler+0x6c>)
 80159d8:	4630      	mov	r0, r6
 80159da:	f00e fc91 	bl	8024300 <mg_str_s>
 80159de:	2300      	movs	r3, #0
 80159e0:	9300      	str	r3, [sp, #0]
 80159e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80159e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80159ea:	f00e feab 	bl	8024744 <mg_match>
 80159ee:	b1a8      	cbz	r0, 8015a1c <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80159f0:	4b10      	ldr	r3, [pc, #64]	@ (8015a34 <dev_description_handler+0x70>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	9305      	str	r3, [sp, #20]
 80159f6:	4b10      	ldr	r3, [pc, #64]	@ (8015a38 <dev_description_handler+0x74>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	9304      	str	r3, [sp, #16]
 80159fc:	4b0f      	ldr	r3, [pc, #60]	@ (8015a3c <dev_description_handler+0x78>)
 80159fe:	9303      	str	r3, [sp, #12]
 8015a00:	4b0f      	ldr	r3, [pc, #60]	@ (8015a40 <dev_description_handler+0x7c>)
 8015a02:	9302      	str	r3, [sp, #8]
 8015a04:	4b0f      	ldr	r3, [pc, #60]	@ (8015a44 <dev_description_handler+0x80>)
 8015a06:	9301      	str	r3, [sp, #4]
 8015a08:	4b0f      	ldr	r3, [pc, #60]	@ (8015a48 <dev_description_handler+0x84>)
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015a4c <dev_description_handler+0x88>)
 8015a0e:	4a10      	ldr	r2, [pc, #64]	@ (8015a50 <dev_description_handler+0x8c>)
 8015a10:	21c8      	movs	r1, #200	@ 0xc8
 8015a12:	4628      	mov	r0, r5
 8015a14:	f00e faea 	bl	8023fec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015a18:	b008      	add	sp, #32
 8015a1a:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8015a54 <dev_description_handler+0x90>)
 8015a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8015a50 <dev_description_handler+0x8c>)
 8015a20:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015a24:	4628      	mov	r0, r5
 8015a26:	f00e fae1 	bl	8023fec <mg_http_reply>
}
 8015a2a:	e7f5      	b.n	8015a18 <dev_description_handler+0x54>
 8015a2c:	08038400 	.word	0x08038400
 8015a30:	080365c4 	.word	0x080365c4
 8015a34:	200028fc 	.word	0x200028fc
 8015a38:	20002904 	.word	0x20002904
 8015a3c:	08036674 	.word	0x08036674
 8015a40:	08036734 	.word	0x08036734
 8015a44:	0803801c 	.word	0x0803801c
 8015a48:	08036748 	.word	0x08036748
 8015a4c:	08038708 	.word	0x08038708
 8015a50:	08036c80 	.word	0x08036c80
 8015a54:	08037314 	.word	0x08037314

08015a58 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015a5c:	4905      	ldr	r1, [pc, #20]	@ (8015a74 <dev_404_handler+0x1c>)
 8015a5e:	2000      	movs	r0, #0
 8015a60:	f7fc fa5c 	bl	8011f1c <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015a64:	4b04      	ldr	r3, [pc, #16]	@ (8015a78 <dev_404_handler+0x20>)
 8015a66:	4a05      	ldr	r2, [pc, #20]	@ (8015a7c <dev_404_handler+0x24>)
 8015a68:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	f00e fabd 	bl	8023fec <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015a72:	bd10      	pop	{r4, pc}
 8015a74:	08038420 	.word	0x08038420
 8015a78:	08038438 	.word	0x08038438
 8015a7c:	08036c80 	.word	0x08036c80

08015a80 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015a80:	290b      	cmp	r1, #11
 8015a82:	d000      	beq.n	8015a86 <ssdp_web_handler+0x6>
 8015a84:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015a86:	b570      	push	{r4, r5, r6, lr}
 8015a88:	b086      	sub	sp, #24
 8015a8a:	4605      	mov	r5, r0
 8015a8c:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8015a8e:	4917      	ldr	r1, [pc, #92]	@ (8015aec <ssdp_web_handler+0x6c>)
 8015a90:	2000      	movs	r0, #0
 8015a92:	f7fc fa43 	bl	8011f1c <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015a96:	ae02      	add	r6, sp, #8
 8015a98:	4915      	ldr	r1, [pc, #84]	@ (8015af0 <ssdp_web_handler+0x70>)
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f00e fc30 	bl	8024300 <mg_str_s>
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015aa8:	f104 0108 	add.w	r1, r4, #8
 8015aac:	c903      	ldmia	r1, {r0, r1}
 8015aae:	f00e fe49 	bl	8024744 <mg_match>
 8015ab2:	b128      	cbz	r0, 8015ac0 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	f7ff ff84 	bl	80159c4 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015abc:	b006      	add	sp, #24
 8015abe:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015ac0:	ae04      	add	r6, sp, #16
 8015ac2:	490c      	ldr	r1, [pc, #48]	@ (8015af4 <ssdp_web_handler+0x74>)
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	f00e fc1b 	bl	8024300 <mg_str_s>
 8015aca:	2300      	movs	r3, #0
 8015acc:	9300      	str	r3, [sp, #0]
 8015ace:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015ad2:	f104 0108 	add.w	r1, r4, #8
 8015ad6:	c903      	ldmia	r1, {r0, r1}
 8015ad8:	f00e fe34 	bl	8024744 <mg_match>
 8015adc:	2800      	cmp	r0, #0
 8015ade:	d0ed      	beq.n	8015abc <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015ae0:	4621      	mov	r1, r4
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	f7ff ffb8 	bl	8015a58 <dev_404_handler>
}
 8015ae8:	e7e8      	b.n	8015abc <ssdp_web_handler+0x3c>
 8015aea:	bf00      	nop
 8015aec:	08038464 	.word	0x08038464
 8015af0:	0803848c 	.word	0x0803848c
 8015af4:	080384a4 	.word	0x080384a4

08015af8 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015af8:	b510      	push	{r4, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	4602      	mov	r2, r0
 8015afe:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015b00:	0e14      	lsrs	r4, r2, #24
 8015b02:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015b06:	0c11      	lsrs	r1, r2, #16
 8015b08:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8015b0c:	0a13      	lsrs	r3, r2, #8
 8015b0e:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015b12:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015b16:	9401      	str	r4, [sp, #4]
 8015b18:	b2c9      	uxtb	r1, r1
 8015b1a:	9100      	str	r1, [sp, #0]
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	b2d2      	uxtb	r2, r2
 8015b20:	4902      	ldr	r1, [pc, #8]	@ (8015b2c <ip_to_string+0x34>)
 8015b22:	f016 fb9b 	bl	802c25c <sprintf>
}
 8015b26:	b004      	add	sp, #16
 8015b28:	bd10      	pop	{r4, pc}
 8015b2a:	bf00      	nop
 8015b2c:	080384a8 	.word	0x080384a8

08015b30 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015b30:	b570      	push	{r4, r5, r6, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015b36:	491e      	ldr	r1, [pc, #120]	@ (8015bb0 <send_ssdp_notify+0x80>)
 8015b38:	2000      	movs	r0, #0
 8015b3a:	f7fc f9ef 	bl	8011f1c <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8015b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8015bb4 <send_ssdp_notify+0x84>)
 8015b40:	6818      	ldr	r0, [r3, #0]
 8015b42:	f7fa fbad 	bl	80102a0 <strlen>
 8015b46:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015b48:	2101      	movs	r1, #1
 8015b4a:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8015b4e:	f7ff ff2b 	bl	80159a8 <my_calloc>
 8015b52:	4a19      	ldr	r2, [pc, #100]	@ (8015bb8 <send_ssdp_notify+0x88>)
 8015b54:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015b56:	b330      	cbz	r0, 8015ba6 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015b58:	4b18      	ldr	r3, [pc, #96]	@ (8015bbc <send_ssdp_notify+0x8c>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	4d18      	ldr	r5, [pc, #96]	@ (8015bc0 <send_ssdp_notify+0x90>)
 8015b5e:	6829      	ldr	r1, [r5, #0]
 8015b60:	6898      	ldr	r0, [r3, #8]
 8015b62:	f7ff ffc9 	bl	8015af8 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015b66:	4b13      	ldr	r3, [pc, #76]	@ (8015bb4 <send_ssdp_notify+0x84>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	9302      	str	r3, [sp, #8]
 8015b6c:	4b15      	ldr	r3, [pc, #84]	@ (8015bc4 <send_ssdp_notify+0x94>)
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	682b      	ldr	r3, [r5, #0]
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	4b14      	ldr	r3, [pc, #80]	@ (8015bc8 <send_ssdp_notify+0x98>)
 8015b76:	4a15      	ldr	r2, [pc, #84]	@ (8015bcc <send_ssdp_notify+0x9c>)
 8015b78:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015b7c:	480e      	ldr	r0, [pc, #56]	@ (8015bb8 <send_ssdp_notify+0x88>)
 8015b7e:	6800      	ldr	r0, [r0, #0]
 8015b80:	f016 fa04 	bl	802bf8c <snprintf>
    if (udp_conn != NULL) {
 8015b84:	b14e      	cbz	r6, 8015b9a <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015b86:	4b0c      	ldr	r3, [pc, #48]	@ (8015bb8 <send_ssdp_notify+0x88>)
 8015b88:	681c      	ldr	r4, [r3, #0]
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f7fa fb88 	bl	80102a0 <strlen>
 8015b90:	4602      	mov	r2, r0
 8015b92:	4621      	mov	r1, r4
 8015b94:	4630      	mov	r0, r6
 8015b96:	f011 fbdb 	bl	8027350 <mg_send>
    free(buff);
 8015b9a:	4b07      	ldr	r3, [pc, #28]	@ (8015bb8 <send_ssdp_notify+0x88>)
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f004 ff6d 	bl	801aa7c <vPortFree>
}
 8015ba2:	b004      	add	sp, #16
 8015ba4:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015ba6:	490a      	ldr	r1, [pc, #40]	@ (8015bd0 <send_ssdp_notify+0xa0>)
 8015ba8:	2003      	movs	r0, #3
 8015baa:	f7fc f9b7 	bl	8011f1c <logging>
		return; //TODO add log
 8015bae:	e7f8      	b.n	8015ba2 <send_ssdp_notify+0x72>
 8015bb0:	080384b4 	.word	0x080384b4
 8015bb4:	20002904 	.word	0x20002904
 8015bb8:	20002900 	.word	0x20002900
 8015bbc:	200028f4 	.word	0x200028f4
 8015bc0:	200028fc 	.word	0x200028fc
 8015bc4:	08038504 	.word	0x08038504
 8015bc8:	080384fc 	.word	0x080384fc
 8015bcc:	08038610 	.word	0x08038610
 8015bd0:	080384cc 	.word	0x080384cc

08015bd4 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015bd4:	2907      	cmp	r1, #7
 8015bd6:	d000      	beq.n	8015bda <ssdp_listener_handler+0x6>
 8015bd8:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015bda:	b570      	push	{r4, r5, r6, lr}
 8015bdc:	b088      	sub	sp, #32
 8015bde:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015be0:	491a      	ldr	r1, [pc, #104]	@ (8015c4c <ssdp_listener_handler+0x78>)
 8015be2:	2000      	movs	r0, #0
 8015be4:	f7fc f99a 	bl	8011f1c <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015be8:	4b19      	ldr	r3, [pc, #100]	@ (8015c50 <ssdp_listener_handler+0x7c>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	ad02      	add	r5, sp, #8
 8015bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015bf0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f00e fb90 	bl	8024318 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015bf8:	ae04      	add	r6, sp, #16
 8015bfa:	4916      	ldr	r1, [pc, #88]	@ (8015c54 <ssdp_listener_handler+0x80>)
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f00e fb7f 	bl	8024300 <mg_str_s>
 8015c02:	2300      	movs	r3, #0
 8015c04:	9300      	str	r3, [sp, #0]
 8015c06:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015c0e:	f00e fd99 	bl	8024744 <mg_match>
 8015c12:	b918      	cbnz	r0, 8015c1c <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015c18:	b008      	add	sp, #32
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015c1c:	ad06      	add	r5, sp, #24
 8015c1e:	490e      	ldr	r1, [pc, #56]	@ (8015c58 <ssdp_listener_handler+0x84>)
 8015c20:	4628      	mov	r0, r5
 8015c22:	f00e fb6d 	bl	8024300 <mg_str_s>
 8015c26:	2300      	movs	r3, #0
 8015c28:	9300      	str	r3, [sp, #0]
 8015c2a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015c2e:	a902      	add	r1, sp, #8
 8015c30:	c903      	ldmia	r1, {r0, r1}
 8015c32:	f00e fd87 	bl	8024744 <mg_match>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d0ec      	beq.n	8015c14 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015c3a:	4908      	ldr	r1, [pc, #32]	@ (8015c5c <ssdp_listener_handler+0x88>)
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	f7fc f96d 	bl	8011f1c <logging>
			send_ssdp_notify(udp_listen_conn);
 8015c42:	4b03      	ldr	r3, [pc, #12]	@ (8015c50 <ssdp_listener_handler+0x7c>)
 8015c44:	6818      	ldr	r0, [r3, #0]
 8015c46:	f7ff ff73 	bl	8015b30 <send_ssdp_notify>
 8015c4a:	e7e3      	b.n	8015c14 <ssdp_listener_handler+0x40>
 8015c4c:	0803850c 	.word	0x0803850c
 8015c50:	200028f0 	.word	0x200028f0
 8015c54:	08038540 	.word	0x08038540
 8015c58:	0803854c 	.word	0x0803854c
 8015c5c:	0803855c 	.word	0x0803855c

08015c60 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015c60:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015c62:	490c      	ldr	r1, [pc, #48]	@ (8015c94 <ssdp_timer_handler+0x34>)
 8015c64:	2000      	movs	r0, #0
 8015c66:	f7fc f959 	bl	8011f1c <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	490a      	ldr	r1, [pc, #40]	@ (8015c98 <ssdp_timer_handler+0x38>)
 8015c70:	480a      	ldr	r0, [pc, #40]	@ (8015c9c <ssdp_timer_handler+0x3c>)
 8015c72:	6800      	ldr	r0, [r0, #0]
 8015c74:	f013 f840 	bl	8028cf8 <mg_connect>
	if (conn == NULL){
 8015c78:	b130      	cbz	r0, 8015c88 <ssdp_timer_handler+0x28>
 8015c7a:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015c7c:	f7ff ff58 	bl	8015b30 <send_ssdp_notify>
	mg_close_conn(conn);
 8015c80:	4620      	mov	r0, r4
 8015c82:	f011 fa23 	bl	80270cc <mg_close_conn>
}
 8015c86:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015c88:	4905      	ldr	r1, [pc, #20]	@ (8015ca0 <ssdp_timer_handler+0x40>)
 8015c8a:	2003      	movs	r0, #3
 8015c8c:	f7fc f946 	bl	8011f1c <logging>
		return ;
 8015c90:	e7f9      	b.n	8015c86 <ssdp_timer_handler+0x26>
 8015c92:	bf00      	nop
 8015c94:	0803858c 	.word	0x0803858c
 8015c98:	080388ac 	.word	0x080388ac
 8015c9c:	200028f8 	.word	0x200028f8
 8015ca0:	080385a4 	.word	0x080385a4

08015ca4 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015ca4:	b570      	push	{r4, r5, r6, lr}
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015caa:	4910      	ldr	r1, [pc, #64]	@ (8015cec <ssdp_set_id+0x48>)
 8015cac:	2000      	movs	r0, #0
 8015cae:	f7fc f935 	bl	8011f1c <logging>
	if (id && (id_len > 0)){
 8015cb2:	b1d6      	cbz	r6, 8015cea <ssdp_set_id+0x46>
 8015cb4:	b1cd      	cbz	r5, 8015cea <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8015cf0 <ssdp_set_id+0x4c>)
 8015cb8:	6818      	ldr	r0, [r3, #0]
 8015cba:	b108      	cbz	r0, 8015cc0 <ssdp_set_id+0x1c>
 8015cbc:	f004 fede 	bl	801aa7c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015cc0:	0068      	lsls	r0, r5, #1
 8015cc2:	2101      	movs	r1, #1
 8015cc4:	4408      	add	r0, r1
 8015cc6:	f7ff fe6f 	bl	80159a8 <my_calloc>
 8015cca:	4b09      	ldr	r3, [pc, #36]	@ (8015cf0 <ssdp_set_id+0x4c>)
 8015ccc:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8015cce:	b160      	cbz	r0, 8015cea <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015cd0:	2400      	movs	r4, #0
 8015cd2:	e008      	b.n	8015ce6 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015cd4:	4b06      	ldr	r3, [pc, #24]	@ (8015cf0 <ssdp_set_id+0x4c>)
 8015cd6:	6818      	ldr	r0, [r3, #0]
 8015cd8:	5d32      	ldrb	r2, [r6, r4]
 8015cda:	4906      	ldr	r1, [pc, #24]	@ (8015cf4 <ssdp_set_id+0x50>)
 8015cdc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015ce0:	f016 fabc 	bl	802c25c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015ce4:	3401      	adds	r4, #1
 8015ce6:	42a5      	cmp	r5, r4
 8015ce8:	d8f4      	bhi.n	8015cd4 <ssdp_set_id+0x30>
}
 8015cea:	bd70      	pop	{r4, r5, r6, pc}
 8015cec:	080385cc 	.word	0x080385cc
 8015cf0:	20002904 	.word	0x20002904
 8015cf4:	08037f88 	.word	0x08037f88

08015cf8 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015cf8:	b530      	push	{r4, r5, lr}
 8015cfa:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8015cfc:	4b18      	ldr	r3, [pc, #96]	@ (8015d60 <ssdp_start_server+0x68>)
 8015cfe:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015d00:	4b18      	ldr	r3, [pc, #96]	@ (8015d64 <ssdp_start_server+0x6c>)
 8015d02:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015d04:	2101      	movs	r1, #1
 8015d06:	2028      	movs	r0, #40	@ 0x28
 8015d08:	f7ff fe4e 	bl	80159a8 <my_calloc>
 8015d0c:	4b16      	ldr	r3, [pc, #88]	@ (8015d68 <ssdp_start_server+0x70>)
 8015d0e:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8015d10:	b318      	cbz	r0, 8015d5a <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8015d12:	4d14      	ldr	r5, [pc, #80]	@ (8015d64 <ssdp_start_server+0x6c>)
 8015d14:	2106      	movs	r1, #6
 8015d16:	6828      	ldr	r0, [r5, #0]
 8015d18:	f7ff ffc4 	bl	8015ca4 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8015d1c:	4913      	ldr	r1, [pc, #76]	@ (8015d6c <ssdp_start_server+0x74>)
 8015d1e:	2001      	movs	r0, #1
 8015d20:	f7fc f8fc 	bl	8011f1c <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015d24:	4c0e      	ldr	r4, [pc, #56]	@ (8015d60 <ssdp_start_server+0x68>)
 8015d26:	2300      	movs	r3, #0
 8015d28:	9302      	str	r3, [sp, #8]
 8015d2a:	4b11      	ldr	r3, [pc, #68]	@ (8015d70 <ssdp_start_server+0x78>)
 8015d2c:	9301      	str	r3, [sp, #4]
 8015d2e:	2303      	movs	r3, #3
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015d36:	2300      	movs	r3, #0
 8015d38:	6820      	ldr	r0, [r4, #0]
 8015d3a:	f00f fcc3 	bl	80256c4 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8015d3e:	682b      	ldr	r3, [r5, #0]
 8015d40:	4a0c      	ldr	r2, [pc, #48]	@ (8015d74 <ssdp_start_server+0x7c>)
 8015d42:	490d      	ldr	r1, [pc, #52]	@ (8015d78 <ssdp_start_server+0x80>)
 8015d44:	6820      	ldr	r0, [r4, #0]
 8015d46:	f011 fa9b 	bl	8027280 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8015d4a:	682b      	ldr	r3, [r5, #0]
 8015d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8015d7c <ssdp_start_server+0x84>)
 8015d4e:	490c      	ldr	r1, [pc, #48]	@ (8015d80 <ssdp_start_server+0x88>)
 8015d50:	6820      	ldr	r0, [r4, #0]
 8015d52:	f011 fa11 	bl	8027178 <mg_listen>
 8015d56:	4b0b      	ldr	r3, [pc, #44]	@ (8015d84 <ssdp_start_server+0x8c>)
 8015d58:	6018      	str	r0, [r3, #0]
}
 8015d5a:	b005      	add	sp, #20
 8015d5c:	bd30      	pop	{r4, r5, pc}
 8015d5e:	bf00      	nop
 8015d60:	200028f8 	.word	0x200028f8
 8015d64:	200028f4 	.word	0x200028f4
 8015d68:	200028fc 	.word	0x200028fc
 8015d6c:	080385e0 	.word	0x080385e0
 8015d70:	08015c61 	.word	0x08015c61
 8015d74:	08015a81 	.word	0x08015a81
 8015d78:	080385f8 	.word	0x080385f8
 8015d7c:	08015bd5 	.word	0x08015bd5
 8015d80:	080388ac 	.word	0x080388ac
 8015d84:	200028f0 	.word	0x200028f0

08015d88 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015d88:	4770      	bx	lr
	...

08015d8c <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015d8c:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8015d8e:	4b02      	ldr	r3, [pc, #8]	@ (8015d98 <sFLASH_SPI_ReadBuffer+0xc>)
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	4798      	blx	r3
}
 8015d94:	bd08      	pop	{r3, pc}
 8015d96:	bf00      	nop
 8015d98:	20002948 	.word	0x20002948

08015d9c <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8015d9c:	b410      	push	{r4}
	if (chip_select){
 8015d9e:	b158      	cbz	r0, 8015db8 <SPI_flash_reg_cb+0x1c>
 8015da0:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8015da2:	4809      	ldr	r0, [pc, #36]	@ (8015dc8 <SPI_flash_reg_cb+0x2c>)
 8015da4:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015da6:	b159      	cbz	r1, 8015dc0 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015da8:	4807      	ldr	r0, [pc, #28]	@ (8015dc8 <SPI_flash_reg_cb+0x2c>)
 8015daa:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8015dac:	4906      	ldr	r1, [pc, #24]	@ (8015dc8 <SPI_flash_reg_cb+0x2c>)
 8015dae:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8015db0:	608b      	str	r3, [r1, #8]
}
 8015db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015db6:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8015db8:	4803      	ldr	r0, [pc, #12]	@ (8015dc8 <SPI_flash_reg_cb+0x2c>)
 8015dba:	4c04      	ldr	r4, [pc, #16]	@ (8015dcc <SPI_flash_reg_cb+0x30>)
 8015dbc:	60c4      	str	r4, [r0, #12]
 8015dbe:	e7f2      	b.n	8015da6 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8015dc0:	4901      	ldr	r1, [pc, #4]	@ (8015dc8 <SPI_flash_reg_cb+0x2c>)
 8015dc2:	4802      	ldr	r0, [pc, #8]	@ (8015dcc <SPI_flash_reg_cb+0x30>)
 8015dc4:	6108      	str	r0, [r1, #16]
 8015dc6:	e7f1      	b.n	8015dac <SPI_flash_reg_cb+0x10>
 8015dc8:	20002948 	.word	0x20002948
 8015dcc:	08015d89 	.word	0x08015d89

08015dd0 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8015dd0:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8015dd2:	4b02      	ldr	r3, [pc, #8]	@ (8015ddc <sFLASH_CS_LOW+0xc>)
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	4798      	blx	r3
}
 8015dd8:	bd08      	pop	{r3, pc}
 8015dda:	bf00      	nop
 8015ddc:	20002948 	.word	0x20002948

08015de0 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8015de0:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8015de2:	4b02      	ldr	r3, [pc, #8]	@ (8015dec <sFLASH_CS_HIGH+0xc>)
 8015de4:	691b      	ldr	r3, [r3, #16]
 8015de6:	4798      	blx	r3
}
 8015de8:	bd08      	pop	{r3, pc}
 8015dea:	bf00      	nop
 8015dec:	20002948 	.word	0x20002948

08015df0 <sFLASH_ReadByte>:
{
 8015df0:	b500      	push	{lr}
 8015df2:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8015df4:	4b05      	ldr	r3, [pc, #20]	@ (8015e0c <sFLASH_ReadByte+0x1c>)
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	2101      	movs	r1, #1
 8015dfa:	f10d 0007 	add.w	r0, sp, #7
 8015dfe:	4798      	blx	r3
}
 8015e00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015e04:	b003      	add	sp, #12
 8015e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e0a:	bf00      	nop
 8015e0c:	20002948 	.word	0x20002948

08015e10 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015e10:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8015e12:	4b02      	ldr	r3, [pc, #8]	@ (8015e1c <sFLASH_SendByte+0xc>)
 8015e14:	689b      	ldr	r3, [r3, #8]
 8015e16:	4798      	blx	r3
}
 8015e18:	bd08      	pop	{r3, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20002948 	.word	0x20002948

08015e20 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8015e20:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8015e22:	f7ff ffd5 	bl	8015dd0 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015e26:	2066      	movs	r0, #102	@ 0x66
 8015e28:	f7ff fff2 	bl	8015e10 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015e2c:	2099      	movs	r0, #153	@ 0x99
 8015e2e:	f7ff ffef 	bl	8015e10 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015e32:	f7ff ffd5 	bl	8015de0 <sFLASH_CS_HIGH>
}
 8015e36:	bd08      	pop	{r3, pc}

08015e38 <sFLASH_Init>:
void sFLASH_Init(void){
 8015e38:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8015e3a:	2064      	movs	r0, #100	@ 0x64
 8015e3c:	f000 fa16 	bl	801626c <HAL_Delay>
    sFLASH_Reset();
 8015e40:	f7ff ffee 	bl	8015e20 <sFLASH_Reset>
    HAL_Delay(100);
 8015e44:	2064      	movs	r0, #100	@ 0x64
 8015e46:	f000 fa11 	bl	801626c <HAL_Delay>
    HAL_Delay(100);
 8015e4a:	2064      	movs	r0, #100	@ 0x64
 8015e4c:	f000 fa0e 	bl	801626c <HAL_Delay>
}
 8015e50:	bd08      	pop	{r3, pc}

08015e52 <sFLASH_ReadBuffer>:
{
 8015e52:	b570      	push	{r4, r5, r6, lr}
 8015e54:	4606      	mov	r6, r0
 8015e56:	460c      	mov	r4, r1
 8015e58:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 8015e5a:	f7ff ffb9 	bl	8015dd0 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 8015e5e:	2d10      	cmp	r5, #16
 8015e60:	d917      	bls.n	8015e92 <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8015e62:	200b      	movs	r0, #11
 8015e64:	f7ff ffd4 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015e68:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015e6c:	f7ff ffd0 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8015e70:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015e74:	f7ff ffcc 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015e78:	b2e0      	uxtb	r0, r4
 8015e7a:	f7ff ffc9 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 8015e7e:	2000      	movs	r0, #0
 8015e80:	f7ff ffc6 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015e84:	4629      	mov	r1, r5
 8015e86:	4630      	mov	r0, r6
 8015e88:	f7ff ff80 	bl	8015d8c <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8015e8c:	f7ff ffa8 	bl	8015de0 <sFLASH_CS_HIGH>
}
 8015e90:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8015e92:	2003      	movs	r0, #3
 8015e94:	f7ff ffbc 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015e98:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015e9c:	f7ff ffb8 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015ea0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015ea4:	f7ff ffb4 	bl	8015e10 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015ea8:	b2e0      	uxtb	r0, r4
 8015eaa:	f7ff ffb1 	bl	8015e10 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015eae:	e004      	b.n	8015eba <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8015eb0:	f7ff ff9e 	bl	8015df0 <sFLASH_ReadByte>
 8015eb4:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015eb8:	4625      	mov	r5, r4
 8015eba:	1e6b      	subs	r3, r5, #1
 8015ebc:	b29c      	uxth	r4, r3
 8015ebe:	2d00      	cmp	r5, #0
 8015ec0:	d1f6      	bne.n	8015eb0 <sFLASH_ReadBuffer+0x5e>
 8015ec2:	e7e3      	b.n	8015e8c <sFLASH_ReadBuffer+0x3a>

08015ec4 <sFLASH_ReadID>:
{
 8015ec4:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8015ec6:	f7ff ff83 	bl	8015dd0 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015eca:	f7ff ff89 	bl	8015de0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015ece:	f7ff ff7f 	bl	8015dd0 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015ed2:	f7ff ff85 	bl	8015de0 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015ed6:	f7ff ff7b 	bl	8015dd0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015eda:	209f      	movs	r0, #159	@ 0x9f
 8015edc:	f7ff ff98 	bl	8015e10 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8015ee0:	f7ff ff86 	bl	8015df0 <sFLASH_ReadByte>
 8015ee4:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8015ee6:	f7ff ff83 	bl	8015df0 <sFLASH_ReadByte>
 8015eea:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8015eec:	f7ff ff80 	bl	8015df0 <sFLASH_ReadByte>
 8015ef0:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8015ef2:	f7ff ff75 	bl	8015de0 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015ef6:	0224      	lsls	r4, r4, #8
 8015ef8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8015efc:	ea44 0005 	orr.w	r0, r4, r5
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f04 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4605      	mov	r5, r0
	sFLASH_Init();
 8015f08:	f7ff ff96 	bl	8015e38 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8015f0c:	f7ff ffda 	bl	8015ec4 <sFLASH_ReadID>
	switch (flash_id) {
 8015f10:	4b52      	ldr	r3, [pc, #328]	@ (801605c <sFLASH_GetInfo+0x158>)
 8015f12:	4298      	cmp	r0, r3
 8015f14:	f000 8085 	beq.w	8016022 <sFLASH_GetInfo+0x11e>
 8015f18:	f0c0 809c 	bcc.w	8016054 <sFLASH_GetInfo+0x150>
 8015f1c:	4b50      	ldr	r3, [pc, #320]	@ (8016060 <sFLASH_GetInfo+0x15c>)
 8015f1e:	4298      	cmp	r0, r3
 8015f20:	f200 8098 	bhi.w	8016054 <sFLASH_GetInfo+0x150>
 8015f24:	3b03      	subs	r3, #3
 8015f26:	4298      	cmp	r0, r3
 8015f28:	f0c0 8094 	bcc.w	8016054 <sFLASH_GetInfo+0x150>
 8015f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8016064 <sFLASH_GetInfo+0x160>)
 8015f2e:	4403      	add	r3, r0
 8015f30:	2b03      	cmp	r3, #3
 8015f32:	f200 808f 	bhi.w	8016054 <sFLASH_GetInfo+0x150>
 8015f36:	e8df f003 	tbb	[pc, r3]
 8015f3a:	2b02      	.short	0x2b02
 8015f3c:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8015f3e:	4c4a      	ldr	r4, [pc, #296]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8015f40:	4b4a      	ldr	r3, [pc, #296]	@ (801606c <sFLASH_GetInfo+0x168>)
 8015f42:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015f44:	2301      	movs	r3, #1
 8015f46:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015f48:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015f4e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f54:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8015f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f5a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 8015f5c:	2231      	movs	r2, #49	@ 0x31
 8015f5e:	4944      	ldr	r1, [pc, #272]	@ (8016070 <sFLASH_GetInfo+0x16c>)
 8015f60:	f104 000e 	add.w	r0, r4, #14
 8015f64:	f016 fd83 	bl	802ca6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015f68:	2300      	movs	r3, #0
 8015f6a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 8015f6e:	46ac      	mov	ip, r5
 8015f70:	4c3d      	ldr	r4, [pc, #244]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8015f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015f90:	4c35      	ldr	r4, [pc, #212]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8015f92:	4b38      	ldr	r3, [pc, #224]	@ (8016074 <sFLASH_GetInfo+0x170>)
 8015f94:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015f96:	2301      	movs	r3, #1
 8015f98:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015f9a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015fa0:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fa6:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015fac:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8015fae:	2231      	movs	r2, #49	@ 0x31
 8015fb0:	4931      	ldr	r1, [pc, #196]	@ (8016078 <sFLASH_GetInfo+0x174>)
 8015fb2:	f104 000e 	add.w	r0, r4, #14
 8015fb6:	f016 fd5a 	bl	802ca6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015fba:	2300      	movs	r3, #0
 8015fbc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015fc0:	e7d5      	b.n	8015f6e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8015fc2:	4c29      	ldr	r4, [pc, #164]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8015fc4:	4b2d      	ldr	r3, [pc, #180]	@ (801607c <sFLASH_GetInfo+0x178>)
 8015fc6:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015fcc:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015fd2:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fd8:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8015fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015fde:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 8015fe0:	2231      	movs	r2, #49	@ 0x31
 8015fe2:	4927      	ldr	r1, [pc, #156]	@ (8016080 <sFLASH_GetInfo+0x17c>)
 8015fe4:	f104 000e 	add.w	r0, r4, #14
 8015fe8:	f016 fd41 	bl	802ca6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015fec:	2300      	movs	r3, #0
 8015fee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015ff2:	e7bc      	b.n	8015f6e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8015ff4:	4c1c      	ldr	r4, [pc, #112]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8015ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8016060 <sFLASH_GetInfo+0x15c>)
 8015ff8:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015ffe:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016004:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016006:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801600a:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 801600c:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 801600e:	2231      	movs	r2, #49	@ 0x31
 8016010:	491c      	ldr	r1, [pc, #112]	@ (8016084 <sFLASH_GetInfo+0x180>)
 8016012:	f104 000e 	add.w	r0, r4, #14
 8016016:	f016 fd2a 	bl	802ca6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801601a:	2300      	movs	r3, #0
 801601c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016020:	e7a5      	b.n	8015f6e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8016022:	4c11      	ldr	r4, [pc, #68]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8016024:	4b0d      	ldr	r3, [pc, #52]	@ (801605c <sFLASH_GetInfo+0x158>)
 8016026:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016028:	2301      	movs	r3, #1
 801602a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801602c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801602e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016032:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016034:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016038:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 801603a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801603e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8016040:	2231      	movs	r2, #49	@ 0x31
 8016042:	4911      	ldr	r1, [pc, #68]	@ (8016088 <sFLASH_GetInfo+0x184>)
 8016044:	f104 000e 	add.w	r0, r4, #14
 8016048:	f016 fd11 	bl	802ca6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801604c:	2300      	movs	r3, #0
 801604e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016052:	e78c      	b.n	8015f6e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8016054:	4b04      	ldr	r3, [pc, #16]	@ (8016068 <sFLASH_GetInfo+0x164>)
 8016056:	2200      	movs	r2, #0
 8016058:	601a      	str	r2, [r3, #0]
			break;
 801605a:	e788      	b.n	8015f6e <sFLASH_GetInfo+0x6a>
 801605c:	00c22016 	.word	0x00c22016
 8016060:	00ef4018 	.word	0x00ef4018
 8016064:	ff10bfeb 	.word	0xff10bfeb
 8016068:	20002908 	.word	0x20002908
 801606c:	00ef4015 	.word	0x00ef4015
 8016070:	080388c8 	.word	0x080388c8
 8016074:	00ef4016 	.word	0x00ef4016
 8016078:	080388d0 	.word	0x080388d0
 801607c:	00ef4017 	.word	0x00ef4017
 8016080:	080388d8 	.word	0x080388d8
 8016084:	080388e0 	.word	0x080388e0
 8016088:	080388e8 	.word	0x080388e8

0801608c <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 801608c:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801608e:	f7ff fe9f 	bl	8015dd0 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8016092:	2006      	movs	r0, #6
 8016094:	f7ff febc 	bl	8015e10 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8016098:	f7ff fea2 	bl	8015de0 <sFLASH_CS_HIGH>
}
 801609c:	bd08      	pop	{r3, pc}
	...

080160a0 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80160a0:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 80160a2:	4d09      	ldr	r5, [pc, #36]	@ (80160c8 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 80160a4:	f7ff fe94 	bl	8015dd0 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 80160a8:	2005      	movs	r0, #5
 80160aa:	f7ff feb1 	bl	8015e10 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 80160ae:	f7ff fe9f 	bl	8015df0 <sFLASH_ReadByte>
 80160b2:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 80160b4:	f7ff fe94 	bl	8015de0 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 80160b8:	462b      	mov	r3, r5
 80160ba:	3d01      	subs	r5, #1
 80160bc:	b113      	cbz	r3, 80160c4 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80160be:	f014 0f01 	tst.w	r4, #1
 80160c2:	d1ef      	bne.n	80160a4 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 80160c4:	bd38      	pop	{r3, r4, r5, pc}
 80160c6:	bf00      	nop
 80160c8:	000186a0 	.word	0x000186a0

080160cc <sFLASH_EraseSector>:
{
 80160cc:	b510      	push	{r4, lr}
 80160ce:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 80160d0:	f7ff ffdc 	bl	801608c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80160d4:	f7ff fe7c 	bl	8015dd0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 80160d8:	2020      	movs	r0, #32
 80160da:	f7ff fe99 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80160de:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80160e2:	f7ff fe95 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80160e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80160ea:	f7ff fe91 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 80160ee:	b2e0      	uxtb	r0, r4
 80160f0:	f7ff fe8e 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 80160f4:	f7ff fe74 	bl	8015de0 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80160f8:	f7ff ffd2 	bl	80160a0 <sFLASH_WaitForWriteEnd>
}
 80160fc:	bd10      	pop	{r4, pc}

080160fe <sFLASH_WritePage>:
{
 80160fe:	b570      	push	{r4, r5, r6, lr}
 8016100:	4606      	mov	r6, r0
 8016102:	460c      	mov	r4, r1
 8016104:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8016106:	f7ff ffc1 	bl	801608c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 801610a:	f7ff fe61 	bl	8015dd0 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801610e:	2002      	movs	r0, #2
 8016110:	f7ff fe7e 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8016114:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016118:	f7ff fe7a 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 801611c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016120:	f7ff fe76 	bl	8015e10 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8016124:	b2e0      	uxtb	r0, r4
 8016126:	f7ff fe73 	bl	8015e10 <sFLASH_SendByte>
  while (NumByteToWrite--)
 801612a:	e004      	b.n	8016136 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 801612c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8016130:	f7ff fe6e 	bl	8015e10 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016134:	4625      	mov	r5, r4
 8016136:	1e6b      	subs	r3, r5, #1
 8016138:	b29c      	uxth	r4, r3
 801613a:	2d00      	cmp	r5, #0
 801613c:	d1f6      	bne.n	801612c <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 801613e:	f7ff fe4f 	bl	8015de0 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016142:	f7ff ffad 	bl	80160a0 <sFLASH_WaitForWriteEnd>
}
 8016146:	bd70      	pop	{r4, r5, r6, pc}

08016148 <sFLASH_WriteBuffer>:
{
 8016148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801614c:	4605      	mov	r5, r0
 801614e:	460c      	mov	r4, r1
 8016150:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8016152:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016154:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8016156:	b9d3      	cbnz	r3, 801618e <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016158:	b971      	cbnz	r1, 8016178 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801615a:	4621      	mov	r1, r4
 801615c:	f7ff ffcf 	bl	80160fe <sFLASH_WritePage>
 8016160:	e013      	b.n	801618a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016166:	4621      	mov	r1, r4
 8016168:	4628      	mov	r0, r5
 801616a:	f7ff ffc8 	bl	80160fe <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801616e:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016172:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016176:	4631      	mov	r1, r6
 8016178:	1e4b      	subs	r3, r1, #1
 801617a:	b2de      	uxtb	r6, r3
 801617c:	2900      	cmp	r1, #0
 801617e:	d1f0      	bne.n	8016162 <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016180:	b2fa      	uxtb	r2, r7
 8016182:	4621      	mov	r1, r4
 8016184:	4628      	mov	r0, r5
 8016186:	f7ff ffba 	bl	80160fe <sFLASH_WritePage>
}
 801618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801618e:	f1c3 0800 	rsb	r8, r3, #0
 8016192:	fa5f f888 	uxtb.w	r8, r8
 8016196:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016198:	b9a1      	cbnz	r1, 80161c4 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801619a:	4590      	cmp	r8, r2
 801619c:	d20d      	bcs.n	80161ba <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 801619e:	4413      	add	r3, r2
 80161a0:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80161a2:	4642      	mov	r2, r8
 80161a4:	4621      	mov	r1, r4
 80161a6:	f7ff ffaa 	bl	80160fe <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80161aa:	4632      	mov	r2, r6
 80161ac:	eb08 0104 	add.w	r1, r8, r4
 80161b0:	eb05 0008 	add.w	r0, r5, r8
 80161b4:	f7ff ffa3 	bl	80160fe <sFLASH_WritePage>
 80161b8:	e7e7      	b.n	801618a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80161ba:	463a      	mov	r2, r7
 80161bc:	4621      	mov	r1, r4
 80161be:	f7ff ff9e 	bl	80160fe <sFLASH_WritePage>
 80161c2:	e7e2      	b.n	801618a <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 80161c4:	eba7 0708 	sub.w	r7, r7, r8
 80161c8:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80161cc:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80161d0:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80161d2:	4642      	mov	r2, r8
 80161d4:	4621      	mov	r1, r4
 80161d6:	f7ff ff92 	bl	80160fe <sFLASH_WritePage>
      WriteAddr +=  count;
 80161da:	4444      	add	r4, r8
      pBuffer += count;
 80161dc:	4445      	add	r5, r8
      while (NumOfPage--)
 80161de:	e00a      	b.n	80161f6 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80161e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80161e4:	4621      	mov	r1, r4
 80161e6:	4628      	mov	r0, r5
 80161e8:	f7ff ff89 	bl	80160fe <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80161ec:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80161f0:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80161f4:	4646      	mov	r6, r8
 80161f6:	1e73      	subs	r3, r6, #1
 80161f8:	fa5f f883 	uxtb.w	r8, r3
 80161fc:	2e00      	cmp	r6, #0
 80161fe:	d1ef      	bne.n	80161e0 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 8016200:	2f00      	cmp	r7, #0
 8016202:	d0c2      	beq.n	801618a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016204:	fa5f f289 	uxtb.w	r2, r9
 8016208:	4621      	mov	r1, r4
 801620a:	4628      	mov	r0, r5
 801620c:	f7ff ff77 	bl	80160fe <sFLASH_WritePage>
}
 8016210:	e7bb      	b.n	801618a <sFLASH_WriteBuffer+0x42>
	...

08016214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016214:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016216:	4b0b      	ldr	r3, [pc, #44]	@ (8016244 <HAL_Init+0x30>)
 8016218:	681a      	ldr	r2, [r3, #0]
 801621a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801621e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016226:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016228:	681a      	ldr	r2, [r3, #0]
 801622a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801622e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016230:	2003      	movs	r0, #3
 8016232:	f000 f883 	bl	801633c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016236:	200f      	movs	r0, #15
 8016238:	f7fc f862 	bl	8012300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801623c:	f7fc f83e 	bl	80122bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8016240:	2000      	movs	r0, #0
 8016242:	bd08      	pop	{r3, pc}
 8016244:	40023c00 	.word	0x40023c00

08016248 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8016248:	4a03      	ldr	r2, [pc, #12]	@ (8016258 <HAL_IncTick+0x10>)
 801624a:	6811      	ldr	r1, [r2, #0]
 801624c:	4b03      	ldr	r3, [pc, #12]	@ (801625c <HAL_IncTick+0x14>)
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	440b      	add	r3, r1
 8016252:	6013      	str	r3, [r2, #0]
}
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop
 8016258:	2000295c 	.word	0x2000295c
 801625c:	20000106 	.word	0x20000106

08016260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8016260:	4b01      	ldr	r3, [pc, #4]	@ (8016268 <HAL_GetTick+0x8>)
 8016262:	6818      	ldr	r0, [r3, #0]
}
 8016264:	4770      	bx	lr
 8016266:	bf00      	nop
 8016268:	2000295c 	.word	0x2000295c

0801626c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801626c:	b538      	push	{r3, r4, r5, lr}
 801626e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8016270:	f7ff fff6 	bl	8016260 <HAL_GetTick>
 8016274:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016276:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801627a:	d002      	beq.n	8016282 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 801627c:	4b04      	ldr	r3, [pc, #16]	@ (8016290 <HAL_Delay+0x24>)
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016282:	f7ff ffed 	bl	8016260 <HAL_GetTick>
 8016286:	1b40      	subs	r0, r0, r5
 8016288:	42a0      	cmp	r0, r4
 801628a:	d3fa      	bcc.n	8016282 <HAL_Delay+0x16>
  {
  }
}
 801628c:	bd38      	pop	{r3, r4, r5, pc}
 801628e:	bf00      	nop
 8016290:	20000106 	.word	0x20000106

08016294 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8016294:	2800      	cmp	r0, #0
 8016296:	db07      	blt.n	80162a8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016298:	f000 021f 	and.w	r2, r0, #31
 801629c:	0940      	lsrs	r0, r0, #5
 801629e:	2301      	movs	r3, #1
 80162a0:	4093      	lsls	r3, r2
 80162a2:	4a02      	ldr	r2, [pc, #8]	@ (80162ac <__NVIC_EnableIRQ+0x18>)
 80162a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	e000e100 	.word	0xe000e100

080162b0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80162b0:	2800      	cmp	r0, #0
 80162b2:	db08      	blt.n	80162c6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80162b4:	0109      	lsls	r1, r1, #4
 80162b6:	b2c9      	uxtb	r1, r1
 80162b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80162bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80162c0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80162c4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80162c6:	f000 000f 	and.w	r0, r0, #15
 80162ca:	0109      	lsls	r1, r1, #4
 80162cc:	b2c9      	uxtb	r1, r1
 80162ce:	4b01      	ldr	r3, [pc, #4]	@ (80162d4 <__NVIC_SetPriority+0x24>)
 80162d0:	5419      	strb	r1, [r3, r0]
  }
}
 80162d2:	4770      	bx	lr
 80162d4:	e000ed14 	.word	0xe000ed14

080162d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80162d8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80162da:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80162de:	f1c0 0c07 	rsb	ip, r0, #7
 80162e2:	f1bc 0f04 	cmp.w	ip, #4
 80162e6:	bf28      	it	cs
 80162e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80162ec:	1d03      	adds	r3, r0, #4
 80162ee:	2b06      	cmp	r3, #6
 80162f0:	d90f      	bls.n	8016312 <NVIC_EncodePriority+0x3a>
 80162f2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80162f4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80162f8:	fa0e f00c 	lsl.w	r0, lr, ip
 80162fc:	ea21 0100 	bic.w	r1, r1, r0
 8016300:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016302:	fa0e fe03 	lsl.w	lr, lr, r3
 8016306:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 801630a:	ea41 0002 	orr.w	r0, r1, r2
 801630e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016312:	2300      	movs	r3, #0
 8016314:	e7ee      	b.n	80162f4 <NVIC_EncodePriority+0x1c>
	...

08016318 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8016318:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801631c:	4905      	ldr	r1, [pc, #20]	@ (8016334 <__NVIC_SystemReset+0x1c>)
 801631e:	68ca      	ldr	r2, [r1, #12]
 8016320:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016324:	4b04      	ldr	r3, [pc, #16]	@ (8016338 <__NVIC_SystemReset+0x20>)
 8016326:	4313      	orrs	r3, r2
 8016328:	60cb      	str	r3, [r1, #12]
 801632a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801632e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016330:	e7fd      	b.n	801632e <__NVIC_SystemReset+0x16>
 8016332:	bf00      	nop
 8016334:	e000ed00 	.word	0xe000ed00
 8016338:	05fa0004 	.word	0x05fa0004

0801633c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801633c:	4a07      	ldr	r2, [pc, #28]	@ (801635c <HAL_NVIC_SetPriorityGrouping+0x20>)
 801633e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016340:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8016344:	041b      	lsls	r3, r3, #16
 8016346:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016348:	0200      	lsls	r0, r0, #8
 801634a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801634e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8016350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8016354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8016358:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801635a:	4770      	bx	lr
 801635c:	e000ed00 	.word	0xe000ed00

08016360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016360:	b510      	push	{r4, lr}
 8016362:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016364:	4b05      	ldr	r3, [pc, #20]	@ (801637c <HAL_NVIC_SetPriority+0x1c>)
 8016366:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016368:	f3c0 2002 	ubfx	r0, r0, #8, #3
 801636c:	f7ff ffb4 	bl	80162d8 <NVIC_EncodePriority>
 8016370:	4601      	mov	r1, r0
 8016372:	4620      	mov	r0, r4
 8016374:	f7ff ff9c 	bl	80162b0 <__NVIC_SetPriority>
}
 8016378:	bd10      	pop	{r4, pc}
 801637a:	bf00      	nop
 801637c:	e000ed00 	.word	0xe000ed00

08016380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016380:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016382:	f7ff ff87 	bl	8016294 <__NVIC_EnableIRQ>
}
 8016386:	bd08      	pop	{r3, pc}

08016388 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8016388:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 801638a:	f7ff ffc5 	bl	8016318 <__NVIC_SystemReset>
	...

08016390 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016390:	2300      	movs	r3, #0
 8016392:	2b0f      	cmp	r3, #15
 8016394:	f200 80d7 	bhi.w	8016546 <HAL_GPIO_Init+0x1b6>
{
 8016398:	b570      	push	{r4, r5, r6, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	e065      	b.n	801646a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801639e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80163a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80163a4:	2403      	movs	r4, #3
 80163a6:	fa04 f40e 	lsl.w	r4, r4, lr
 80163aa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80163ae:	68cc      	ldr	r4, [r1, #12]
 80163b0:	fa04 f40e 	lsl.w	r4, r4, lr
 80163b4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80163b6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80163b8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80163ba:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80163be:	684a      	ldr	r2, [r1, #4]
 80163c0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80163c4:	409a      	lsls	r2, r3
 80163c6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80163c8:	6042      	str	r2, [r0, #4]
 80163ca:	e05c      	b.n	8016486 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80163cc:	08dc      	lsrs	r4, r3, #3
 80163ce:	3408      	adds	r4, #8
 80163d0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80163d4:	f003 0507 	and.w	r5, r3, #7
 80163d8:	00ad      	lsls	r5, r5, #2
 80163da:	f04f 0e0f 	mov.w	lr, #15
 80163de:	fa0e fe05 	lsl.w	lr, lr, r5
 80163e2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80163e6:	690a      	ldr	r2, [r1, #16]
 80163e8:	40aa      	lsls	r2, r5
 80163ea:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80163ee:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80163f2:	e05c      	b.n	80164ae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80163f4:	2204      	movs	r2, #4
 80163f6:	e000      	b.n	80163fa <HAL_GPIO_Init+0x6a>
 80163f8:	2200      	movs	r2, #0
 80163fa:	fa02 f20e 	lsl.w	r2, r2, lr
 80163fe:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016400:	3402      	adds	r4, #2
 8016402:	4d51      	ldr	r5, [pc, #324]	@ (8016548 <HAL_GPIO_Init+0x1b8>)
 8016404:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016408:	4a50      	ldr	r2, [pc, #320]	@ (801654c <HAL_GPIO_Init+0x1bc>)
 801640a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 801640c:	ea6f 020c 	mvn.w	r2, ip
 8016410:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016414:	684e      	ldr	r6, [r1, #4]
 8016416:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 801641a:	d001      	beq.n	8016420 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 801641c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8016420:	4c4a      	ldr	r4, [pc, #296]	@ (801654c <HAL_GPIO_Init+0x1bc>)
 8016422:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8016424:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8016426:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801642a:	684e      	ldr	r6, [r1, #4]
 801642c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8016430:	d001      	beq.n	8016436 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8016432:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8016436:	4c45      	ldr	r4, [pc, #276]	@ (801654c <HAL_GPIO_Init+0x1bc>)
 8016438:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 801643a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 801643c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016440:	684e      	ldr	r6, [r1, #4]
 8016442:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8016446:	d001      	beq.n	801644c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8016448:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 801644c:	4c3f      	ldr	r4, [pc, #252]	@ (801654c <HAL_GPIO_Init+0x1bc>)
 801644e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016450:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8016452:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016454:	684d      	ldr	r5, [r1, #4]
 8016456:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 801645a:	d001      	beq.n	8016460 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 801645c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8016460:	4c3a      	ldr	r4, [pc, #232]	@ (801654c <HAL_GPIO_Init+0x1bc>)
 8016462:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016464:	3301      	adds	r3, #1
 8016466:	2b0f      	cmp	r3, #15
 8016468:	d86b      	bhi.n	8016542 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801646a:	2201      	movs	r2, #1
 801646c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801646e:	680c      	ldr	r4, [r1, #0]
 8016470:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8016474:	ea32 0404 	bics.w	r4, r2, r4
 8016478:	d1f4      	bne.n	8016464 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801647a:	684c      	ldr	r4, [r1, #4]
 801647c:	f004 0403 	and.w	r4, r4, #3
 8016480:	3c01      	subs	r4, #1
 8016482:	2c01      	cmp	r4, #1
 8016484:	d98b      	bls.n	801639e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016486:	684a      	ldr	r2, [r1, #4]
 8016488:	f002 0203 	and.w	r2, r2, #3
 801648c:	2a03      	cmp	r2, #3
 801648e:	d009      	beq.n	80164a4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8016490:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016492:	005d      	lsls	r5, r3, #1
 8016494:	2203      	movs	r2, #3
 8016496:	40aa      	lsls	r2, r5
 8016498:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801649c:	688a      	ldr	r2, [r1, #8]
 801649e:	40aa      	lsls	r2, r5
 80164a0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80164a2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80164a4:	684a      	ldr	r2, [r1, #4]
 80164a6:	f002 0203 	and.w	r2, r2, #3
 80164aa:	2a02      	cmp	r2, #2
 80164ac:	d08e      	beq.n	80163cc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80164ae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80164b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80164b4:	2203      	movs	r2, #3
 80164b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80164ba:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80164be:	684a      	ldr	r2, [r1, #4]
 80164c0:	f002 0203 	and.w	r2, r2, #3
 80164c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80164c8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80164ca:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80164cc:	684a      	ldr	r2, [r1, #4]
 80164ce:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80164d2:	d0c7      	beq.n	8016464 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80164d4:	2200      	movs	r2, #0
 80164d6:	9201      	str	r2, [sp, #4]
 80164d8:	4a1d      	ldr	r2, [pc, #116]	@ (8016550 <HAL_GPIO_Init+0x1c0>)
 80164da:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80164dc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80164e0:	6454      	str	r4, [r2, #68]	@ 0x44
 80164e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80164e4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80164e8:	9201      	str	r2, [sp, #4]
 80164ea:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80164ec:	089c      	lsrs	r4, r3, #2
 80164ee:	1ca5      	adds	r5, r4, #2
 80164f0:	4a15      	ldr	r2, [pc, #84]	@ (8016548 <HAL_GPIO_Init+0x1b8>)
 80164f2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80164f6:	f003 0e03 	and.w	lr, r3, #3
 80164fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80164fe:	220f      	movs	r2, #15
 8016500:	fa02 f20e 	lsl.w	r2, r2, lr
 8016504:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016508:	4a12      	ldr	r2, [pc, #72]	@ (8016554 <HAL_GPIO_Init+0x1c4>)
 801650a:	4290      	cmp	r0, r2
 801650c:	f43f af74 	beq.w	80163f8 <HAL_GPIO_Init+0x68>
 8016510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016514:	4290      	cmp	r0, r2
 8016516:	d00e      	beq.n	8016536 <HAL_GPIO_Init+0x1a6>
 8016518:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801651c:	4290      	cmp	r0, r2
 801651e:	d00c      	beq.n	801653a <HAL_GPIO_Init+0x1aa>
 8016520:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016524:	4290      	cmp	r0, r2
 8016526:	d00a      	beq.n	801653e <HAL_GPIO_Init+0x1ae>
 8016528:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801652c:	4290      	cmp	r0, r2
 801652e:	f43f af61 	beq.w	80163f4 <HAL_GPIO_Init+0x64>
 8016532:	2207      	movs	r2, #7
 8016534:	e761      	b.n	80163fa <HAL_GPIO_Init+0x6a>
 8016536:	2201      	movs	r2, #1
 8016538:	e75f      	b.n	80163fa <HAL_GPIO_Init+0x6a>
 801653a:	2202      	movs	r2, #2
 801653c:	e75d      	b.n	80163fa <HAL_GPIO_Init+0x6a>
 801653e:	2203      	movs	r2, #3
 8016540:	e75b      	b.n	80163fa <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8016542:	b002      	add	sp, #8
 8016544:	bd70      	pop	{r4, r5, r6, pc}
 8016546:	4770      	bx	lr
 8016548:	40013800 	.word	0x40013800
 801654c:	40013c00 	.word	0x40013c00
 8016550:	40023800 	.word	0x40023800
 8016554:	40020000 	.word	0x40020000

08016558 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016558:	2300      	movs	r3, #0
 801655a:	2b0f      	cmp	r3, #15
 801655c:	d87c      	bhi.n	8016658 <HAL_GPIO_DeInit+0x100>
{
 801655e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016560:	e02d      	b.n	80165be <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016562:	2504      	movs	r5, #4
 8016564:	e000      	b.n	8016568 <HAL_GPIO_DeInit+0x10>
 8016566:	2500      	movs	r5, #0
 8016568:	fa05 f50c 	lsl.w	r5, r5, ip
 801656c:	42a5      	cmp	r5, r4
 801656e:	d057      	beq.n	8016620 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016570:	6804      	ldr	r4, [r0, #0]
 8016572:	005d      	lsls	r5, r3, #1
 8016574:	f04f 0c03 	mov.w	ip, #3
 8016578:	fa0c fc05 	lsl.w	ip, ip, r5
 801657c:	ea24 040c 	bic.w	r4, r4, ip
 8016580:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016582:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8016586:	f10e 0e08 	add.w	lr, lr, #8
 801658a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 801658e:	f003 0607 	and.w	r6, r3, #7
 8016592:	00b6      	lsls	r6, r6, #2
 8016594:	250f      	movs	r5, #15
 8016596:	40b5      	lsls	r5, r6
 8016598:	ea24 0405 	bic.w	r4, r4, r5
 801659c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80165a0:	68c4      	ldr	r4, [r0, #12]
 80165a2:	ea24 040c 	bic.w	r4, r4, ip
 80165a6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80165a8:	6844      	ldr	r4, [r0, #4]
 80165aa:	ea24 0202 	bic.w	r2, r4, r2
 80165ae:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80165b0:	6882      	ldr	r2, [r0, #8]
 80165b2:	ea22 020c 	bic.w	r2, r2, ip
 80165b6:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80165b8:	3301      	adds	r3, #1
 80165ba:	2b0f      	cmp	r3, #15
 80165bc:	d84b      	bhi.n	8016656 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 80165be:	2201      	movs	r2, #1
 80165c0:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80165c2:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 80165c6:	ea32 0401 	bics.w	r4, r2, r1
 80165ca:	d1f5      	bne.n	80165b8 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80165cc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80165d0:	f10e 0502 	add.w	r5, lr, #2
 80165d4:	4c21      	ldr	r4, [pc, #132]	@ (801665c <HAL_GPIO_DeInit+0x104>)
 80165d6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80165da:	f003 0c03 	and.w	ip, r3, #3
 80165de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80165e2:	250f      	movs	r5, #15
 80165e4:	fa05 f70c 	lsl.w	r7, r5, ip
 80165e8:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80165ea:	4d1d      	ldr	r5, [pc, #116]	@ (8016660 <HAL_GPIO_DeInit+0x108>)
 80165ec:	42a8      	cmp	r0, r5
 80165ee:	d0ba      	beq.n	8016566 <HAL_GPIO_DeInit+0xe>
 80165f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80165f4:	42a8      	cmp	r0, r5
 80165f6:	d00d      	beq.n	8016614 <HAL_GPIO_DeInit+0xbc>
 80165f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80165fc:	42a8      	cmp	r0, r5
 80165fe:	d00b      	beq.n	8016618 <HAL_GPIO_DeInit+0xc0>
 8016600:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016604:	42a8      	cmp	r0, r5
 8016606:	d009      	beq.n	801661c <HAL_GPIO_DeInit+0xc4>
 8016608:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801660c:	42a8      	cmp	r0, r5
 801660e:	d0a8      	beq.n	8016562 <HAL_GPIO_DeInit+0xa>
 8016610:	2507      	movs	r5, #7
 8016612:	e7a9      	b.n	8016568 <HAL_GPIO_DeInit+0x10>
 8016614:	2501      	movs	r5, #1
 8016616:	e7a7      	b.n	8016568 <HAL_GPIO_DeInit+0x10>
 8016618:	2502      	movs	r5, #2
 801661a:	e7a5      	b.n	8016568 <HAL_GPIO_DeInit+0x10>
 801661c:	2503      	movs	r5, #3
 801661e:	e7a3      	b.n	8016568 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8016620:	4c10      	ldr	r4, [pc, #64]	@ (8016664 <HAL_GPIO_DeInit+0x10c>)
 8016622:	6825      	ldr	r5, [r4, #0]
 8016624:	ea25 0506 	bic.w	r5, r5, r6
 8016628:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801662a:	6865      	ldr	r5, [r4, #4]
 801662c:	ea25 0506 	bic.w	r5, r5, r6
 8016630:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8016632:	68e5      	ldr	r5, [r4, #12]
 8016634:	ea25 0506 	bic.w	r5, r5, r6
 8016638:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801663a:	68a5      	ldr	r5, [r4, #8]
 801663c:	ea25 0506 	bic.w	r5, r5, r6
 8016640:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8016642:	4e06      	ldr	r6, [pc, #24]	@ (801665c <HAL_GPIO_DeInit+0x104>)
 8016644:	f10e 0402 	add.w	r4, lr, #2
 8016648:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801664c:	ea25 0507 	bic.w	r5, r5, r7
 8016650:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8016654:	e78c      	b.n	8016570 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8016656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	40013800 	.word	0x40013800
 8016660:	40020000 	.word	0x40020000
 8016664:	40013c00 	.word	0x40013c00

08016668 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016668:	6903      	ldr	r3, [r0, #16]
 801666a:	4219      	tst	r1, r3
 801666c:	d001      	beq.n	8016672 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801666e:	2001      	movs	r0, #1
 8016670:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016672:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8016674:	4770      	bx	lr

08016676 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016676:	b10a      	cbz	r2, 801667c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016678:	6181      	str	r1, [r0, #24]
 801667a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801667c:	0409      	lsls	r1, r1, #16
 801667e:	6181      	str	r1, [r0, #24]
  }
}
 8016680:	4770      	bx	lr

08016682 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016682:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8016684:	ea01 0203 	and.w	r2, r1, r3
 8016688:	ea21 0103 	bic.w	r1, r1, r3
 801668c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016690:	6181      	str	r1, [r0, #24]
}
 8016692:	4770      	bx	lr

08016694 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016694:	6803      	ldr	r3, [r0, #0]
 8016696:	695a      	ldr	r2, [r3, #20]
 8016698:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801669c:	d101      	bne.n	80166a2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 801669e:	2000      	movs	r0, #0
}
 80166a0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80166a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80166a6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80166a8:	2300      	movs	r3, #0
 80166aa:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80166ac:	2220      	movs	r2, #32
 80166ae:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80166b2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80166b6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80166b8:	f042 0204 	orr.w	r2, r2, #4
 80166bc:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80166be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80166c2:	2001      	movs	r0, #1
 80166c4:	4770      	bx	lr

080166c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80166c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ca:	4606      	mov	r6, r0
 80166cc:	460c      	mov	r4, r1
 80166ce:	4617      	mov	r7, r2
 80166d0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80166d2:	e03b      	b.n	801674c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80166d4:	f7ff fdc4 	bl	8016260 <HAL_GetTick>
 80166d8:	9b06      	ldr	r3, [sp, #24]
 80166da:	1ac0      	subs	r0, r0, r3
 80166dc:	4540      	cmp	r0, r8
 80166de:	d802      	bhi.n	80166e6 <I2C_WaitOnFlagUntilTimeout+0x20>
 80166e0:	f1b8 0f00 	cmp.w	r8, #0
 80166e4:	d132      	bne.n	801674c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80166e6:	2d01      	cmp	r5, #1
 80166e8:	d018      	beq.n	801671c <I2C_WaitOnFlagUntilTimeout+0x56>
 80166ea:	6833      	ldr	r3, [r6, #0]
 80166ec:	699b      	ldr	r3, [r3, #24]
 80166ee:	ea24 0303 	bic.w	r3, r4, r3
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	fab3 f383 	clz	r3, r3
 80166f8:	095b      	lsrs	r3, r3, #5
 80166fa:	429f      	cmp	r7, r3
 80166fc:	d126      	bne.n	801674c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80166fe:	2300      	movs	r3, #0
 8016700:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016702:	2220      	movs	r2, #32
 8016704:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016708:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801670c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801670e:	f042 0220 	orr.w	r2, r2, #32
 8016712:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016714:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016718:	2001      	movs	r0, #1
 801671a:	e027      	b.n	801676c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801671c:	6833      	ldr	r3, [r6, #0]
 801671e:	695b      	ldr	r3, [r3, #20]
 8016720:	ea24 0303 	bic.w	r3, r4, r3
 8016724:	b29b      	uxth	r3, r3
 8016726:	fab3 f383 	clz	r3, r3
 801672a:	095b      	lsrs	r3, r3, #5
 801672c:	e7e5      	b.n	80166fa <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801672e:	6833      	ldr	r3, [r6, #0]
 8016730:	695b      	ldr	r3, [r3, #20]
 8016732:	ea24 0c03 	bic.w	ip, r4, r3
 8016736:	fa1f fc8c 	uxth.w	ip, ip
 801673a:	fabc fc8c 	clz	ip, ip
 801673e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016742:	4567      	cmp	r7, ip
 8016744:	d111      	bne.n	801676a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8016746:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801674a:	d1c3      	bne.n	80166d4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801674c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8016750:	2d01      	cmp	r5, #1
 8016752:	d0ec      	beq.n	801672e <I2C_WaitOnFlagUntilTimeout+0x68>
 8016754:	6833      	ldr	r3, [r6, #0]
 8016756:	699b      	ldr	r3, [r3, #24]
 8016758:	ea24 0c03 	bic.w	ip, r4, r3
 801675c:	fa1f fc8c 	uxth.w	ip, ip
 8016760:	fabc fc8c 	clz	ip, ip
 8016764:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016768:	e7eb      	b.n	8016742 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 801676a:	2000      	movs	r0, #0
}
 801676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016770 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8016770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016774:	4605      	mov	r5, r0
 8016776:	460e      	mov	r6, r1
 8016778:	4690      	mov	r8, r2
 801677a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801677c:	e053      	b.n	8016826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016784:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016786:	682b      	ldr	r3, [r5, #0]
 8016788:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801678c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 801678e:	2300      	movs	r3, #0
 8016790:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016792:	2220      	movs	r2, #32
 8016794:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016798:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801679c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801679e:	f042 0204 	orr.w	r2, r2, #4
 80167a2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80167a4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80167a8:	2001      	movs	r0, #1
 80167aa:	e04a      	b.n	8016842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80167ac:	f7ff fd58 	bl	8016260 <HAL_GetTick>
 80167b0:	eba0 0009 	sub.w	r0, r0, r9
 80167b4:	4540      	cmp	r0, r8
 80167b6:	d802      	bhi.n	80167be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80167b8:	f1b8 0f00 	cmp.w	r8, #0
 80167bc:	d133      	bne.n	8016826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80167be:	2f01      	cmp	r7, #1
 80167c0:	d017      	beq.n	80167f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80167c2:	682b      	ldr	r3, [r5, #0]
 80167c4:	699b      	ldr	r3, [r3, #24]
 80167c6:	ea26 0303 	bic.w	r3, r6, r3
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	3b00      	subs	r3, #0
 80167ce:	bf18      	it	ne
 80167d0:	2301      	movne	r3, #1
 80167d2:	b343      	cbz	r3, 8016826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80167d4:	2300      	movs	r3, #0
 80167d6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80167d8:	2220      	movs	r2, #32
 80167da:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80167de:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80167e2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80167e4:	f042 0220 	orr.w	r2, r2, #32
 80167e8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80167ea:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80167ee:	2001      	movs	r0, #1
 80167f0:	e027      	b.n	8016842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80167f2:	682b      	ldr	r3, [r5, #0]
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	ea26 0303 	bic.w	r3, r6, r3
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	3b00      	subs	r3, #0
 80167fe:	bf18      	it	ne
 8016800:	2301      	movne	r3, #1
 8016802:	e7e6      	b.n	80167d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016804:	682b      	ldr	r3, [r5, #0]
 8016806:	699c      	ldr	r4, [r3, #24]
 8016808:	ea26 0404 	bic.w	r4, r6, r4
 801680c:	b2a4      	uxth	r4, r4
 801680e:	3c00      	subs	r4, #0
 8016810:	bf18      	it	ne
 8016812:	2401      	movne	r4, #1
 8016814:	b1a4      	cbz	r4, 8016840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016816:	682b      	ldr	r3, [r5, #0]
 8016818:	695a      	ldr	r2, [r3, #20]
 801681a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801681e:	d1ae      	bne.n	801677e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8016820:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016824:	d1c2      	bne.n	80167ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016826:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801682a:	2f01      	cmp	r7, #1
 801682c:	d1ea      	bne.n	8016804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 801682e:	682b      	ldr	r3, [r5, #0]
 8016830:	695c      	ldr	r4, [r3, #20]
 8016832:	ea26 0404 	bic.w	r4, r6, r4
 8016836:	b2a4      	uxth	r4, r4
 8016838:	3c00      	subs	r4, #0
 801683a:	bf18      	it	ne
 801683c:	2401      	movne	r4, #1
 801683e:	e7e9      	b.n	8016814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8016840:	2000      	movs	r0, #0
}
 8016842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08016848 <I2C_MasterRequestWrite>:
{
 8016848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801684a:	b083      	sub	sp, #12
 801684c:	4604      	mov	r4, r0
 801684e:	460d      	mov	r5, r1
 8016850:	4616      	mov	r6, r2
 8016852:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016854:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016856:	2b08      	cmp	r3, #8
 8016858:	d00d      	beq.n	8016876 <I2C_MasterRequestWrite+0x2e>
 801685a:	2b01      	cmp	r3, #1
 801685c:	d00b      	beq.n	8016876 <I2C_MasterRequestWrite+0x2e>
 801685e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016862:	d008      	beq.n	8016876 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016864:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016866:	2b12      	cmp	r3, #18
 8016868:	d10a      	bne.n	8016880 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801686a:	6802      	ldr	r2, [r0, #0]
 801686c:	6813      	ldr	r3, [r2, #0]
 801686e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016872:	6013      	str	r3, [r2, #0]
 8016874:	e004      	b.n	8016880 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016876:	6822      	ldr	r2, [r4, #0]
 8016878:	6813      	ldr	r3, [r2, #0]
 801687a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801687e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016880:	9700      	str	r7, [sp, #0]
 8016882:	4633      	mov	r3, r6
 8016884:	2200      	movs	r2, #0
 8016886:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801688a:	4620      	mov	r0, r4
 801688c:	f7ff ff1b 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016890:	b980      	cbnz	r0, 80168b4 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016892:	6923      	ldr	r3, [r4, #16]
 8016894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016898:	d116      	bne.n	80168c8 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801689a:	6823      	ldr	r3, [r4, #0]
 801689c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80168a0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80168a2:	463b      	mov	r3, r7
 80168a4:	4632      	mov	r2, r6
 80168a6:	4913      	ldr	r1, [pc, #76]	@ (80168f4 <I2C_MasterRequestWrite+0xac>)
 80168a8:	4620      	mov	r0, r4
 80168aa:	f7ff ff61 	bl	8016770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80168ae:	b9f8      	cbnz	r0, 80168f0 <I2C_MasterRequestWrite+0xa8>
}
 80168b0:	b003      	add	sp, #12
 80168b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80168bc:	d002      	beq.n	80168c4 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80168be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168c2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80168c4:	2003      	movs	r0, #3
 80168c6:	e7f3      	b.n	80168b0 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80168c8:	11eb      	asrs	r3, r5, #7
 80168ca:	6822      	ldr	r2, [r4, #0]
 80168cc:	f003 0306 	and.w	r3, r3, #6
 80168d0:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80168d4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80168d6:	463b      	mov	r3, r7
 80168d8:	4632      	mov	r2, r6
 80168da:	4907      	ldr	r1, [pc, #28]	@ (80168f8 <I2C_MasterRequestWrite+0xb0>)
 80168dc:	4620      	mov	r0, r4
 80168de:	f7ff ff47 	bl	8016770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80168e2:	b918      	cbnz	r0, 80168ec <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80168e4:	6823      	ldr	r3, [r4, #0]
 80168e6:	b2ed      	uxtb	r5, r5
 80168e8:	611d      	str	r5, [r3, #16]
 80168ea:	e7da      	b.n	80168a2 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80168ec:	2001      	movs	r0, #1
 80168ee:	e7df      	b.n	80168b0 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80168f0:	2001      	movs	r0, #1
 80168f2:	e7dd      	b.n	80168b0 <I2C_MasterRequestWrite+0x68>
 80168f4:	00010002 	.word	0x00010002
 80168f8:	00010008 	.word	0x00010008

080168fc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	4604      	mov	r4, r0
 8016900:	460d      	mov	r5, r1
 8016902:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016904:	6823      	ldr	r3, [r4, #0]
 8016906:	695b      	ldr	r3, [r3, #20]
 8016908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801690c:	d121      	bne.n	8016952 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801690e:	4620      	mov	r0, r4
 8016910:	f7ff fec0 	bl	8016694 <I2C_IsAcknowledgeFailed>
 8016914:	b9f8      	cbnz	r0, 8016956 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016916:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801691a:	d0f3      	beq.n	8016904 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801691c:	f7ff fca0 	bl	8016260 <HAL_GetTick>
 8016920:	1b80      	subs	r0, r0, r6
 8016922:	42a8      	cmp	r0, r5
 8016924:	d801      	bhi.n	801692a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8016926:	2d00      	cmp	r5, #0
 8016928:	d1ec      	bne.n	8016904 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	695b      	ldr	r3, [r3, #20]
 801692e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016932:	d1e7      	bne.n	8016904 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016934:	2300      	movs	r3, #0
 8016936:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016938:	2220      	movs	r2, #32
 801693a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801693e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016942:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016944:	f042 0220 	orr.w	r2, r2, #32
 8016948:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801694a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 801694e:	2001      	movs	r0, #1
 8016950:	e000      	b.n	8016954 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8016952:	2000      	movs	r0, #0
}
 8016954:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016956:	2001      	movs	r0, #1
 8016958:	e7fc      	b.n	8016954 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0801695a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 801695a:	b570      	push	{r4, r5, r6, lr}
 801695c:	4604      	mov	r4, r0
 801695e:	460d      	mov	r5, r1
 8016960:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	695b      	ldr	r3, [r3, #20]
 8016966:	f013 0f04 	tst.w	r3, #4
 801696a:	d121      	bne.n	80169b0 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801696c:	4620      	mov	r0, r4
 801696e:	f7ff fe91 	bl	8016694 <I2C_IsAcknowledgeFailed>
 8016972:	b9f8      	cbnz	r0, 80169b4 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016974:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016978:	d0f3      	beq.n	8016962 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801697a:	f7ff fc71 	bl	8016260 <HAL_GetTick>
 801697e:	1b80      	subs	r0, r0, r6
 8016980:	42a8      	cmp	r0, r5
 8016982:	d801      	bhi.n	8016988 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8016984:	2d00      	cmp	r5, #0
 8016986:	d1ec      	bne.n	8016962 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016988:	6823      	ldr	r3, [r4, #0]
 801698a:	695b      	ldr	r3, [r3, #20]
 801698c:	f013 0f04 	tst.w	r3, #4
 8016990:	d1e7      	bne.n	8016962 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016992:	2300      	movs	r3, #0
 8016994:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016996:	2220      	movs	r2, #32
 8016998:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801699c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80169a0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80169a2:	f042 0220 	orr.w	r2, r2, #32
 80169a6:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80169a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80169ac:	2001      	movs	r0, #1
 80169ae:	e000      	b.n	80169b2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80169b0:	2000      	movs	r0, #0
}
 80169b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80169b4:	2001      	movs	r0, #1
 80169b6:	e7fc      	b.n	80169b2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080169b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80169b8:	2800      	cmp	r0, #0
 80169ba:	f000 80cc 	beq.w	8016b56 <HAL_I2C_Init+0x19e>
{
 80169be:	b570      	push	{r4, r5, r6, lr}
 80169c0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80169c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d077      	beq.n	8016aba <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80169ca:	2324      	movs	r3, #36	@ 0x24
 80169cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80169d0:	6822      	ldr	r2, [r4, #0]
 80169d2:	6813      	ldr	r3, [r2, #0]
 80169d4:	f023 0301 	bic.w	r3, r3, #1
 80169d8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80169da:	6822      	ldr	r2, [r4, #0]
 80169dc:	6813      	ldr	r3, [r2, #0]
 80169de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80169e2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80169e4:	6822      	ldr	r2, [r4, #0]
 80169e6:	6813      	ldr	r3, [r2, #0]
 80169e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80169ec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80169ee:	f000 fdb3 	bl	8017558 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80169f2:	6862      	ldr	r2, [r4, #4]
 80169f4:	4b5a      	ldr	r3, [pc, #360]	@ (8016b60 <HAL_I2C_Init+0x1a8>)
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d864      	bhi.n	8016ac4 <HAL_I2C_Init+0x10c>
 80169fa:	4b5a      	ldr	r3, [pc, #360]	@ (8016b64 <HAL_I2C_Init+0x1ac>)
 80169fc:	4298      	cmp	r0, r3
 80169fe:	bf8c      	ite	hi
 8016a00:	2300      	movhi	r3, #0
 8016a02:	2301      	movls	r3, #1
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	f040 80a8 	bne.w	8016b5a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8016a0a:	4957      	ldr	r1, [pc, #348]	@ (8016b68 <HAL_I2C_Init+0x1b0>)
 8016a0c:	fba1 3100 	umull	r3, r1, r1, r0
 8016a10:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016a12:	6825      	ldr	r5, [r4, #0]
 8016a14:	686a      	ldr	r2, [r5, #4]
 8016a16:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016a1a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8016a1e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016a20:	6821      	ldr	r1, [r4, #0]
 8016a22:	6a0a      	ldr	r2, [r1, #32]
 8016a24:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016a28:	6866      	ldr	r6, [r4, #4]
 8016a2a:	4d4d      	ldr	r5, [pc, #308]	@ (8016b60 <HAL_I2C_Init+0x1a8>)
 8016a2c:	42ae      	cmp	r6, r5
 8016a2e:	d84f      	bhi.n	8016ad0 <HAL_I2C_Init+0x118>
 8016a30:	3301      	adds	r3, #1
 8016a32:	4313      	orrs	r3, r2
 8016a34:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016a36:	6821      	ldr	r1, [r4, #0]
 8016a38:	69ca      	ldr	r2, [r1, #28]
 8016a3a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8016a3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016a42:	6865      	ldr	r5, [r4, #4]
 8016a44:	4b46      	ldr	r3, [pc, #280]	@ (8016b60 <HAL_I2C_Init+0x1a8>)
 8016a46:	429d      	cmp	r5, r3
 8016a48:	d84c      	bhi.n	8016ae4 <HAL_I2C_Init+0x12c>
 8016a4a:	1e43      	subs	r3, r0, #1
 8016a4c:	006d      	lsls	r5, r5, #1
 8016a4e:	fbb3 f3f5 	udiv	r3, r3, r5
 8016a52:	3301      	adds	r3, #1
 8016a54:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8016a58:	4203      	tst	r3, r0
 8016a5a:	d078      	beq.n	8016b4e <HAL_I2C_Init+0x196>
 8016a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016a60:	431a      	orrs	r2, r3
 8016a62:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016a64:	6821      	ldr	r1, [r4, #0]
 8016a66:	680b      	ldr	r3, [r1, #0]
 8016a68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016a6c:	69e2      	ldr	r2, [r4, #28]
 8016a6e:	6a20      	ldr	r0, [r4, #32]
 8016a70:	4302      	orrs	r2, r0
 8016a72:	4313      	orrs	r3, r2
 8016a74:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016a76:	6821      	ldr	r1, [r4, #0]
 8016a78:	688b      	ldr	r3, [r1, #8]
 8016a7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016a7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016a82:	6922      	ldr	r2, [r4, #16]
 8016a84:	68e0      	ldr	r0, [r4, #12]
 8016a86:	4302      	orrs	r2, r0
 8016a88:	4313      	orrs	r3, r2
 8016a8a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016a8c:	6821      	ldr	r1, [r4, #0]
 8016a8e:	68cb      	ldr	r3, [r1, #12]
 8016a90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016a94:	6962      	ldr	r2, [r4, #20]
 8016a96:	69a0      	ldr	r0, [r4, #24]
 8016a98:	4302      	orrs	r2, r0
 8016a9a:	4313      	orrs	r3, r2
 8016a9c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8016a9e:	6822      	ldr	r2, [r4, #0]
 8016aa0:	6813      	ldr	r3, [r2, #0]
 8016aa2:	f043 0301 	orr.w	r3, r3, #1
 8016aa6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016aa8:	2000      	movs	r0, #0
 8016aaa:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016aac:	2320      	movs	r3, #32
 8016aae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016ab2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ab4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016ab8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016aba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8016abe:	f7fb f9a3 	bl	8011e08 <HAL_I2C_MspInit>
 8016ac2:	e782      	b.n	80169ca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016ac4:	4b29      	ldr	r3, [pc, #164]	@ (8016b6c <HAL_I2C_Init+0x1b4>)
 8016ac6:	4298      	cmp	r0, r3
 8016ac8:	bf8c      	ite	hi
 8016aca:	2300      	movhi	r3, #0
 8016acc:	2301      	movls	r3, #1
 8016ace:	e799      	b.n	8016a04 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016ad0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8016ad4:	fb05 f303 	mul.w	r3, r5, r3
 8016ad8:	4d25      	ldr	r5, [pc, #148]	@ (8016b70 <HAL_I2C_Init+0x1b8>)
 8016ada:	fba5 5303 	umull	r5, r3, r5, r3
 8016ade:	099b      	lsrs	r3, r3, #6
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	e7a6      	b.n	8016a32 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016ae4:	68a6      	ldr	r6, [r4, #8]
 8016ae6:	b9be      	cbnz	r6, 8016b18 <HAL_I2C_Init+0x160>
 8016ae8:	1e43      	subs	r3, r0, #1
 8016aea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016aee:	fbb3 f3fc 	udiv	r3, r3, ip
 8016af2:	3301      	adds	r3, #1
 8016af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016af8:	fab3 f383 	clz	r3, r3
 8016afc:	095b      	lsrs	r3, r3, #5
 8016afe:	bb43      	cbnz	r3, 8016b52 <HAL_I2C_Init+0x19a>
 8016b00:	b9c6      	cbnz	r6, 8016b34 <HAL_I2C_Init+0x17c>
 8016b02:	1e43      	subs	r3, r0, #1
 8016b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b08:	fbb3 f3f5 	udiv	r3, r3, r5
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016b16:	e7a3      	b.n	8016a60 <HAL_I2C_Init+0xa8>
 8016b18:	1e43      	subs	r3, r0, #1
 8016b1a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8016b1e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8016b22:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b26:	3301      	adds	r3, #1
 8016b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b2c:	fab3 f383 	clz	r3, r3
 8016b30:	095b      	lsrs	r3, r3, #5
 8016b32:	e7e4      	b.n	8016afe <HAL_I2C_Init+0x146>
 8016b34:	1e43      	subs	r3, r0, #1
 8016b36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016b3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016b3e:	fbb3 f3f5 	udiv	r3, r3, r5
 8016b42:	3301      	adds	r3, #1
 8016b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016b4c:	e788      	b.n	8016a60 <HAL_I2C_Init+0xa8>
 8016b4e:	2304      	movs	r3, #4
 8016b50:	e786      	b.n	8016a60 <HAL_I2C_Init+0xa8>
 8016b52:	2301      	movs	r3, #1
 8016b54:	e784      	b.n	8016a60 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8016b56:	2001      	movs	r0, #1
}
 8016b58:	4770      	bx	lr
    return HAL_ERROR;
 8016b5a:	2001      	movs	r0, #1
 8016b5c:	e7ac      	b.n	8016ab8 <HAL_I2C_Init+0x100>
 8016b5e:	bf00      	nop
 8016b60:	000186a0 	.word	0x000186a0
 8016b64:	001e847f 	.word	0x001e847f
 8016b68:	431bde83 	.word	0x431bde83
 8016b6c:	003d08ff 	.word	0x003d08ff
 8016b70:	10624dd3 	.word	0x10624dd3

08016b74 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8016b74:	b1a8      	cbz	r0, 8016ba2 <HAL_I2C_DeInit+0x2e>
{
 8016b76:	b510      	push	{r4, lr}
 8016b78:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016b7a:	2324      	movs	r3, #36	@ 0x24
 8016b7c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016b80:	6802      	ldr	r2, [r0, #0]
 8016b82:	6813      	ldr	r3, [r2, #0]
 8016b84:	f023 0301 	bic.w	r3, r3, #1
 8016b88:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8016b8a:	f7fb f977 	bl	8011e7c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016b8e:	2000      	movs	r0, #0
 8016b90:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016b92:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016b96:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016b98:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8016b9c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8016ba0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8016ba2:	2001      	movs	r0, #1
}
 8016ba4:	4770      	bx	lr
	...

08016ba8 <HAL_I2C_Master_Transmit>:
{
 8016ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bac:	b085      	sub	sp, #20
 8016bae:	4604      	mov	r4, r0
 8016bb0:	460f      	mov	r7, r1
 8016bb2:	4691      	mov	r9, r2
 8016bb4:	4698      	mov	r8, r3
 8016bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016bb8:	f7ff fb52 	bl	8016260 <HAL_GetTick>
 8016bbc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016bbe:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8016bc2:	b2c0      	uxtb	r0, r0
 8016bc4:	2820      	cmp	r0, #32
 8016bc6:	d004      	beq.n	8016bd2 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016bc8:	2702      	movs	r7, #2
}
 8016bca:	4638      	mov	r0, r7
 8016bcc:	b005      	add	sp, #20
 8016bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016bd2:	9500      	str	r5, [sp, #0]
 8016bd4:	2319      	movs	r3, #25
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	494f      	ldr	r1, [pc, #316]	@ (8016d18 <HAL_I2C_Master_Transmit+0x170>)
 8016bda:	4620      	mov	r0, r4
 8016bdc:	f7ff fd73 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016be0:	2800      	cmp	r0, #0
 8016be2:	f040 8092 	bne.w	8016d0a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8016be6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016bea:	2b01      	cmp	r3, #1
 8016bec:	f000 808f 	beq.w	8016d0e <HAL_I2C_Master_Transmit+0x166>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016bf6:	6823      	ldr	r3, [r4, #0]
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	f012 0f01 	tst.w	r2, #1
 8016bfe:	d103      	bne.n	8016c08 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8016c00:	681a      	ldr	r2, [r3, #0]
 8016c02:	f042 0201 	orr.w	r2, r2, #1
 8016c06:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016c08:	6822      	ldr	r2, [r4, #0]
 8016c0a:	6813      	ldr	r3, [r2, #0]
 8016c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c10:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016c12:	2321      	movs	r3, #33	@ 0x21
 8016c14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016c18:	2310      	movs	r3, #16
 8016c1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8016c22:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016c26:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016c2a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016c2c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8016d1c <HAL_I2C_Master_Transmit+0x174>)
 8016c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016c32:	462b      	mov	r3, r5
 8016c34:	4632      	mov	r2, r6
 8016c36:	4639      	mov	r1, r7
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f7ff fe05 	bl	8016848 <I2C_MasterRequestWrite>
 8016c3e:	4607      	mov	r7, r0
 8016c40:	2800      	cmp	r0, #0
 8016c42:	d166      	bne.n	8016d12 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016c44:	2300      	movs	r3, #0
 8016c46:	9303      	str	r3, [sp, #12]
 8016c48:	6823      	ldr	r3, [r4, #0]
 8016c4a:	695a      	ldr	r2, [r3, #20]
 8016c4c:	9203      	str	r2, [sp, #12]
 8016c4e:	699b      	ldr	r3, [r3, #24]
 8016c50:	9303      	str	r3, [sp, #12]
 8016c52:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8016c54:	e011      	b.n	8016c7a <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016c56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016c58:	2b04      	cmp	r3, #4
 8016c5a:	d001      	beq.n	8016c60 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8016c5c:	2701      	movs	r7, #1
 8016c5e:	e7b4      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016c60:	6822      	ldr	r2, [r4, #0]
 8016c62:	6813      	ldr	r3, [r2, #0]
 8016c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016c68:	6013      	str	r3, [r2, #0]
 8016c6a:	e7f7      	b.n	8016c5c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c6c:	462a      	mov	r2, r5
 8016c6e:	4631      	mov	r1, r6
 8016c70:	4620      	mov	r0, r4
 8016c72:	f7ff fe72 	bl	801695a <I2C_WaitOnBTFFlagUntilTimeout>
 8016c76:	2800      	cmp	r0, #0
 8016c78:	d12e      	bne.n	8016cd8 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8016c7a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d036      	beq.n	8016cee <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c80:	462a      	mov	r2, r5
 8016c82:	4631      	mov	r1, r6
 8016c84:	4620      	mov	r0, r4
 8016c86:	f7ff fe39 	bl	80168fc <I2C_WaitOnTXEFlagUntilTimeout>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d1e3      	bne.n	8016c56 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016c8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	7812      	ldrb	r2, [r2, #0]
 8016c94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8016c96:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016c98:	1c43      	adds	r3, r0, #1
 8016c9a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8016c9c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8016c9e:	b289      	uxth	r1, r1
 8016ca0:	3901      	subs	r1, #1
 8016ca2:	b289      	uxth	r1, r1
 8016ca4:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8016ca6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016ca8:	3b01      	subs	r3, #1
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016cae:	6822      	ldr	r2, [r4, #0]
 8016cb0:	6951      	ldr	r1, [r2, #20]
 8016cb2:	f011 0f04 	tst.w	r1, #4
 8016cb6:	d0d9      	beq.n	8016c6c <HAL_I2C_Master_Transmit+0xc4>
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d0d7      	beq.n	8016c6c <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016cbc:	7843      	ldrb	r3, [r0, #1]
 8016cbe:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8016cc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8016cc6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	3b01      	subs	r3, #1
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8016cd0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016cd2:	3b01      	subs	r3, #1
 8016cd4:	8523      	strh	r3, [r4, #40]	@ 0x28
 8016cd6:	e7c9      	b.n	8016c6c <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016cda:	2b04      	cmp	r3, #4
 8016cdc:	d001      	beq.n	8016ce2 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8016cde:	2701      	movs	r7, #1
 8016ce0:	e773      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ce2:	6822      	ldr	r2, [r4, #0]
 8016ce4:	6813      	ldr	r3, [r2, #0]
 8016ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016cea:	6013      	str	r3, [r2, #0]
 8016cec:	e7f7      	b.n	8016cde <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016cee:	6822      	ldr	r2, [r4, #0]
 8016cf0:	6813      	ldr	r3, [r2, #0]
 8016cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016cf6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8016cf8:	2320      	movs	r3, #32
 8016cfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8016d04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8016d08:	e75f      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8016d0a:	2702      	movs	r7, #2
 8016d0c:	e75d      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8016d0e:	2702      	movs	r7, #2
 8016d10:	e75b      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8016d12:	2701      	movs	r7, #1
 8016d14:	e759      	b.n	8016bca <HAL_I2C_Master_Transmit+0x22>
 8016d16:	bf00      	nop
 8016d18:	00100002 	.word	0x00100002
 8016d1c:	ffff0000 	.word	0xffff0000

08016d20 <HAL_I2C_IsDeviceReady>:
{
 8016d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d24:	b085      	sub	sp, #20
 8016d26:	4604      	mov	r4, r0
 8016d28:	4688      	mov	r8, r1
 8016d2a:	4691      	mov	r9, r2
 8016d2c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8016d2e:	f7ff fa97 	bl	8016260 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016d32:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	2b20      	cmp	r3, #32
 8016d3a:	d003      	beq.n	8016d44 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016d3c:	2002      	movs	r0, #2
}
 8016d3e:	b005      	add	sp, #20
 8016d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d44:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016d46:	9000      	str	r0, [sp, #0]
 8016d48:	2319      	movs	r3, #25
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	4957      	ldr	r1, [pc, #348]	@ (8016eac <HAL_I2C_IsDeviceReady+0x18c>)
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f7ff fcb9 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	f040 80a0 	bne.w	8016e9a <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8016d5a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	f000 809d 	beq.w	8016e9e <HAL_I2C_IsDeviceReady+0x17e>
 8016d64:	2301      	movs	r3, #1
 8016d66:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	681a      	ldr	r2, [r3, #0]
 8016d6e:	f012 0f01 	tst.w	r2, #1
 8016d72:	d103      	bne.n	8016d7c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	f042 0201 	orr.w	r2, r2, #1
 8016d7a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016d7c:	6822      	ldr	r2, [r4, #0]
 8016d7e:	6813      	ldr	r3, [r2, #0]
 8016d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016d84:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8016d86:	2324      	movs	r3, #36	@ 0x24
 8016d88:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016d8c:	2700      	movs	r7, #0
 8016d8e:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016d90:	4b47      	ldr	r3, [pc, #284]	@ (8016eb0 <HAL_I2C_IsDeviceReady+0x190>)
 8016d92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016d94:	e040      	b.n	8016e18 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016d96:	6823      	ldr	r3, [r4, #0]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016d9e:	d002      	beq.n	8016da6 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016da4:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8016da6:	2003      	movs	r0, #3
 8016da8:	e7c9      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016daa:	23a0      	movs	r3, #160	@ 0xa0
 8016dac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016db0:	6822      	ldr	r2, [r4, #0]
 8016db2:	6953      	ldr	r3, [r2, #20]
 8016db4:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016db8:	6952      	ldr	r2, [r2, #20]
 8016dba:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016dbe:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8016dc2:	fa5f fc8c 	uxtb.w	ip, ip
 8016dc6:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8016dca:	d009      	beq.n	8016de0 <HAL_I2C_IsDeviceReady+0xc0>
 8016dcc:	b943      	cbnz	r3, 8016de0 <HAL_I2C_IsDeviceReady+0xc0>
 8016dce:	b93a      	cbnz	r2, 8016de0 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016dd0:	f7ff fa46 	bl	8016260 <HAL_GetTick>
 8016dd4:	1b80      	subs	r0, r0, r6
 8016dd6:	42a8      	cmp	r0, r5
 8016dd8:	d8e7      	bhi.n	8016daa <HAL_I2C_IsDeviceReady+0x8a>
 8016dda:	2d00      	cmp	r5, #0
 8016ddc:	d1e8      	bne.n	8016db0 <HAL_I2C_IsDeviceReady+0x90>
 8016dde:	e7e4      	b.n	8016daa <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8016de0:	2320      	movs	r3, #32
 8016de2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8016de6:	6823      	ldr	r3, [r4, #0]
 8016de8:	695a      	ldr	r2, [r3, #20]
 8016dea:	f012 0f02 	tst.w	r2, #2
 8016dee:	d131      	bne.n	8016e54 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016df6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016dfe:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016e00:	9600      	str	r6, [sp, #0]
 8016e02:	2319      	movs	r3, #25
 8016e04:	2201      	movs	r2, #1
 8016e06:	4929      	ldr	r1, [pc, #164]	@ (8016eac <HAL_I2C_IsDeviceReady+0x18c>)
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f7ff fc5c 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	d149      	bne.n	8016ea6 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8016e12:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8016e14:	454f      	cmp	r7, r9
 8016e16:	d238      	bcs.n	8016e8a <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016e18:	6822      	ldr	r2, [r4, #0]
 8016e1a:	6813      	ldr	r3, [r2, #0]
 8016e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016e20:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8016e22:	9600      	str	r6, [sp, #0]
 8016e24:	462b      	mov	r3, r5
 8016e26:	2200      	movs	r2, #0
 8016e28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	f7ff fc4a 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016e32:	2800      	cmp	r0, #0
 8016e34:	d1af      	bne.n	8016d96 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016e36:	6823      	ldr	r3, [r4, #0]
 8016e38:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016e3c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8016e3e:	f7ff fa0f 	bl	8016260 <HAL_GetTick>
 8016e42:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016e44:	6822      	ldr	r2, [r4, #0]
 8016e46:	6953      	ldr	r3, [r2, #20]
 8016e48:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016e4c:	6952      	ldr	r2, [r2, #20]
 8016e4e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016e52:	e7b4      	b.n	8016dbe <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016e5a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	9303      	str	r3, [sp, #12]
 8016e60:	6823      	ldr	r3, [r4, #0]
 8016e62:	695a      	ldr	r2, [r3, #20]
 8016e64:	9203      	str	r2, [sp, #12]
 8016e66:	699b      	ldr	r3, [r3, #24]
 8016e68:	9303      	str	r3, [sp, #12]
 8016e6a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016e6c:	9600      	str	r6, [sp, #0]
 8016e6e:	2319      	movs	r3, #25
 8016e70:	2201      	movs	r2, #1
 8016e72:	490e      	ldr	r1, [pc, #56]	@ (8016eac <HAL_I2C_IsDeviceReady+0x18c>)
 8016e74:	4620      	mov	r0, r4
 8016e76:	f7ff fc26 	bl	80166c6 <I2C_WaitOnFlagUntilTimeout>
 8016e7a:	b990      	cbnz	r0, 8016ea2 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8016e7c:	2320      	movs	r3, #32
 8016e7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8016e82:	2300      	movs	r3, #0
 8016e84:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8016e88:	e759      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016e8a:	2320      	movs	r3, #32
 8016e8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8016e90:	2300      	movs	r3, #0
 8016e92:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8016e96:	2001      	movs	r0, #1
 8016e98:	e751      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8016e9a:	2002      	movs	r0, #2
 8016e9c:	e74f      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8016e9e:	2002      	movs	r0, #2
 8016ea0:	e74d      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016ea2:	2001      	movs	r0, #1
 8016ea4:	e74b      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016ea6:	2001      	movs	r0, #1
 8016ea8:	e749      	b.n	8016d3e <HAL_I2C_IsDeviceReady+0x1e>
 8016eaa:	bf00      	nop
 8016eac:	00100002 	.word	0x00100002
 8016eb0:	ffff0000 	.word	0xffff0000

08016eb4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8016eb4:	b340      	cbz	r0, 8016f08 <HAL_IWDG_Init+0x54>
{
 8016eb6:	b538      	push	{r3, r4, r5, lr}
 8016eb8:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8016eba:	6803      	ldr	r3, [r0, #0]
 8016ebc:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8016ec0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8016ec2:	6803      	ldr	r3, [r0, #0]
 8016ec4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8016ec8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8016eca:	6803      	ldr	r3, [r0, #0]
 8016ecc:	6842      	ldr	r2, [r0, #4]
 8016ece:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8016ed0:	6803      	ldr	r3, [r0, #0]
 8016ed2:	6882      	ldr	r2, [r0, #8]
 8016ed4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8016ed6:	f7ff f9c3 	bl	8016260 <HAL_GetTick>
 8016eda:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016edc:	6823      	ldr	r3, [r4, #0]
 8016ede:	68da      	ldr	r2, [r3, #12]
 8016ee0:	f012 0f03 	tst.w	r2, #3
 8016ee4:	d00b      	beq.n	8016efe <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016ee6:	f7ff f9bb 	bl	8016260 <HAL_GetTick>
 8016eea:	1b40      	subs	r0, r0, r5
 8016eec:	2831      	cmp	r0, #49	@ 0x31
 8016eee:	d9f5      	bls.n	8016edc <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	f013 0f03 	tst.w	r3, #3
 8016ef8:	d0f0      	beq.n	8016edc <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8016efa:	2003      	movs	r0, #3
 8016efc:	e003      	b.n	8016f06 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016efe:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8016f02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016f04:	2000      	movs	r0, #0
}
 8016f06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8016f08:	2001      	movs	r0, #1
}
 8016f0a:	4770      	bx	lr

08016f0c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016f0c:	6803      	ldr	r3, [r0, #0]
 8016f0e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8016f12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8016f14:	2000      	movs	r0, #0
 8016f16:	4770      	bx	lr

08016f18 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	f000 81e0 	beq.w	80172de <HAL_RCC_OscConfig+0x3c6>
{
 8016f1e:	b570      	push	{r4, r5, r6, lr}
 8016f20:	b082      	sub	sp, #8
 8016f22:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f24:	6803      	ldr	r3, [r0, #0]
 8016f26:	f013 0f01 	tst.w	r3, #1
 8016f2a:	d03b      	beq.n	8016fa4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f2c:	4b9f      	ldr	r3, [pc, #636]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f2e:	689b      	ldr	r3, [r3, #8]
 8016f30:	f003 030c 	and.w	r3, r3, #12
 8016f34:	2b04      	cmp	r3, #4
 8016f36:	d02c      	beq.n	8016f92 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f38:	4b9c      	ldr	r3, [pc, #624]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f40:	2b08      	cmp	r3, #8
 8016f42:	d021      	beq.n	8016f88 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016f44:	6863      	ldr	r3, [r4, #4]
 8016f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f4a:	d04f      	beq.n	8016fec <HAL_RCC_OscConfig+0xd4>
 8016f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016f50:	d052      	beq.n	8016ff8 <HAL_RCC_OscConfig+0xe0>
 8016f52:	4b96      	ldr	r3, [pc, #600]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f54:	681a      	ldr	r2, [r3, #0]
 8016f56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8016f5a:	601a      	str	r2, [r3, #0]
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8016f62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016f64:	6863      	ldr	r3, [r4, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d050      	beq.n	801700c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016f6a:	f7ff f979 	bl	8016260 <HAL_GetTick>
 8016f6e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016f70:	4b8e      	ldr	r3, [pc, #568]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016f78:	d114      	bne.n	8016fa4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016f7a:	f7ff f971 	bl	8016260 <HAL_GetTick>
 8016f7e:	1b40      	subs	r0, r0, r5
 8016f80:	2864      	cmp	r0, #100	@ 0x64
 8016f82:	d9f5      	bls.n	8016f70 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8016f84:	2003      	movs	r0, #3
 8016f86:	e1b1      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f88:	4b88      	ldr	r3, [pc, #544]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016f90:	d0d8      	beq.n	8016f44 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016f92:	4b86      	ldr	r3, [pc, #536]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016f9a:	d003      	beq.n	8016fa4 <HAL_RCC_OscConfig+0x8c>
 8016f9c:	6863      	ldr	r3, [r4, #4]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	f000 819f 	beq.w	80172e2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	f013 0f02 	tst.w	r3, #2
 8016faa:	d054      	beq.n	8017056 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016fac:	4b7f      	ldr	r3, [pc, #508]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	f013 0f0c 	tst.w	r3, #12
 8016fb4:	d03e      	beq.n	8017034 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016fb8:	689b      	ldr	r3, [r3, #8]
 8016fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016fbe:	2b08      	cmp	r3, #8
 8016fc0:	d033      	beq.n	801702a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016fc2:	68e3      	ldr	r3, [r4, #12]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d068      	beq.n	801709a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016fc8:	4b79      	ldr	r3, [pc, #484]	@ (80171b0 <HAL_RCC_OscConfig+0x298>)
 8016fca:	2201      	movs	r2, #1
 8016fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fce:	f7ff f947 	bl	8016260 <HAL_GetTick>
 8016fd2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016fd4:	4b75      	ldr	r3, [pc, #468]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	f013 0f02 	tst.w	r3, #2
 8016fdc:	d154      	bne.n	8017088 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016fde:	f7ff f93f 	bl	8016260 <HAL_GetTick>
 8016fe2:	1b40      	subs	r0, r0, r5
 8016fe4:	2802      	cmp	r0, #2
 8016fe6:	d9f5      	bls.n	8016fd4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8016fe8:	2003      	movs	r0, #3
 8016fea:	e17f      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016fec:	4a6f      	ldr	r2, [pc, #444]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016fee:	6813      	ldr	r3, [r2, #0]
 8016ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016ff4:	6013      	str	r3, [r2, #0]
 8016ff6:	e7b5      	b.n	8016f64 <HAL_RCC_OscConfig+0x4c>
 8016ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8016ffa:	681a      	ldr	r2, [r3, #0]
 8016ffc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8017000:	601a      	str	r2, [r3, #0]
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8017008:	601a      	str	r2, [r3, #0]
 801700a:	e7ab      	b.n	8016f64 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 801700c:	f7ff f928 	bl	8016260 <HAL_GetTick>
 8017010:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017012:	4b66      	ldr	r3, [pc, #408]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801701a:	d0c3      	beq.n	8016fa4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801701c:	f7ff f920 	bl	8016260 <HAL_GetTick>
 8017020:	1b40      	subs	r0, r0, r5
 8017022:	2864      	cmp	r0, #100	@ 0x64
 8017024:	d9f5      	bls.n	8017012 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8017026:	2003      	movs	r0, #3
 8017028:	e160      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801702a:	4b60      	ldr	r3, [pc, #384]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017032:	d1c6      	bne.n	8016fc2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017034:	4b5d      	ldr	r3, [pc, #372]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f013 0f02 	tst.w	r3, #2
 801703c:	d003      	beq.n	8017046 <HAL_RCC_OscConfig+0x12e>
 801703e:	68e3      	ldr	r3, [r4, #12]
 8017040:	2b01      	cmp	r3, #1
 8017042:	f040 8150 	bne.w	80172e6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017046:	4a59      	ldr	r2, [pc, #356]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017048:	6813      	ldr	r3, [r2, #0]
 801704a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801704e:	6921      	ldr	r1, [r4, #16]
 8017050:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017054:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	f013 0f08 	tst.w	r3, #8
 801705c:	d042      	beq.n	80170e4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801705e:	6963      	ldr	r3, [r4, #20]
 8017060:	b36b      	cbz	r3, 80170be <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017062:	4b53      	ldr	r3, [pc, #332]	@ (80171b0 <HAL_RCC_OscConfig+0x298>)
 8017064:	2201      	movs	r2, #1
 8017066:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801706a:	f7ff f8f9 	bl	8016260 <HAL_GetTick>
 801706e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017070:	4b4e      	ldr	r3, [pc, #312]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017074:	f013 0f02 	tst.w	r3, #2
 8017078:	d134      	bne.n	80170e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801707a:	f7ff f8f1 	bl	8016260 <HAL_GetTick>
 801707e:	1b40      	subs	r0, r0, r5
 8017080:	2802      	cmp	r0, #2
 8017082:	d9f5      	bls.n	8017070 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8017084:	2003      	movs	r0, #3
 8017086:	e131      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017088:	4a48      	ldr	r2, [pc, #288]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 801708a:	6813      	ldr	r3, [r2, #0]
 801708c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017090:	6921      	ldr	r1, [r4, #16]
 8017092:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017096:	6013      	str	r3, [r2, #0]
 8017098:	e7dd      	b.n	8017056 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801709a:	4b45      	ldr	r3, [pc, #276]	@ (80171b0 <HAL_RCC_OscConfig+0x298>)
 801709c:	2200      	movs	r2, #0
 801709e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80170a0:	f7ff f8de 	bl	8016260 <HAL_GetTick>
 80170a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80170a6:	4b41      	ldr	r3, [pc, #260]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f013 0f02 	tst.w	r3, #2
 80170ae:	d0d2      	beq.n	8017056 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80170b0:	f7ff f8d6 	bl	8016260 <HAL_GetTick>
 80170b4:	1b40      	subs	r0, r0, r5
 80170b6:	2802      	cmp	r0, #2
 80170b8:	d9f5      	bls.n	80170a6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80170ba:	2003      	movs	r0, #3
 80170bc:	e116      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80170be:	4b3c      	ldr	r3, [pc, #240]	@ (80171b0 <HAL_RCC_OscConfig+0x298>)
 80170c0:	2200      	movs	r2, #0
 80170c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80170c6:	f7ff f8cb 	bl	8016260 <HAL_GetTick>
 80170ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80170cc:	4b37      	ldr	r3, [pc, #220]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 80170ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170d0:	f013 0f02 	tst.w	r3, #2
 80170d4:	d006      	beq.n	80170e4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80170d6:	f7ff f8c3 	bl	8016260 <HAL_GetTick>
 80170da:	1b40      	subs	r0, r0, r5
 80170dc:	2802      	cmp	r0, #2
 80170de:	d9f5      	bls.n	80170cc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80170e0:	2003      	movs	r0, #3
 80170e2:	e103      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80170e4:	6823      	ldr	r3, [r4, #0]
 80170e6:	f013 0f04 	tst.w	r3, #4
 80170ea:	d077      	beq.n	80171dc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80170ec:	4b2f      	ldr	r3, [pc, #188]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 80170ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170f0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80170f4:	d133      	bne.n	801715e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80170f6:	2300      	movs	r3, #0
 80170f8:	9301      	str	r3, [sp, #4]
 80170fa:	4b2c      	ldr	r3, [pc, #176]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 80170fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80170fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8017102:	641a      	str	r2, [r3, #64]	@ 0x40
 8017104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801710a:	9301      	str	r3, [sp, #4]
 801710c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801710e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017110:	4b28      	ldr	r3, [pc, #160]	@ (80171b4 <HAL_RCC_OscConfig+0x29c>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017118:	d023      	beq.n	8017162 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801711a:	68a3      	ldr	r3, [r4, #8]
 801711c:	2b01      	cmp	r3, #1
 801711e:	d034      	beq.n	801718a <HAL_RCC_OscConfig+0x272>
 8017120:	2b05      	cmp	r3, #5
 8017122:	d038      	beq.n	8017196 <HAL_RCC_OscConfig+0x27e>
 8017124:	4b21      	ldr	r3, [pc, #132]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017126:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017128:	f022 0201 	bic.w	r2, r2, #1
 801712c:	671a      	str	r2, [r3, #112]	@ 0x70
 801712e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017130:	f022 0204 	bic.w	r2, r2, #4
 8017134:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017136:	68a3      	ldr	r3, [r4, #8]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d03d      	beq.n	80171b8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801713c:	f7ff f890 	bl	8016260 <HAL_GetTick>
 8017140:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017142:	4b1a      	ldr	r3, [pc, #104]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017146:	f013 0f02 	tst.w	r3, #2
 801714a:	d146      	bne.n	80171da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801714c:	f7ff f888 	bl	8016260 <HAL_GetTick>
 8017150:	1b80      	subs	r0, r0, r6
 8017152:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017156:	4298      	cmp	r0, r3
 8017158:	d9f3      	bls.n	8017142 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801715a:	2003      	movs	r0, #3
 801715c:	e0c6      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 801715e:	2500      	movs	r5, #0
 8017160:	e7d6      	b.n	8017110 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017162:	4a14      	ldr	r2, [pc, #80]	@ (80171b4 <HAL_RCC_OscConfig+0x29c>)
 8017164:	6813      	ldr	r3, [r2, #0]
 8017166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801716a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801716c:	f7ff f878 	bl	8016260 <HAL_GetTick>
 8017170:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017172:	4b10      	ldr	r3, [pc, #64]	@ (80171b4 <HAL_RCC_OscConfig+0x29c>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801717a:	d1ce      	bne.n	801711a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801717c:	f7ff f870 	bl	8016260 <HAL_GetTick>
 8017180:	1b80      	subs	r0, r0, r6
 8017182:	2802      	cmp	r0, #2
 8017184:	d9f5      	bls.n	8017172 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8017186:	2003      	movs	r0, #3
 8017188:	e0b0      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801718a:	4a08      	ldr	r2, [pc, #32]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 801718c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801718e:	f043 0301 	orr.w	r3, r3, #1
 8017192:	6713      	str	r3, [r2, #112]	@ 0x70
 8017194:	e7cf      	b.n	8017136 <HAL_RCC_OscConfig+0x21e>
 8017196:	4b05      	ldr	r3, [pc, #20]	@ (80171ac <HAL_RCC_OscConfig+0x294>)
 8017198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801719a:	f042 0204 	orr.w	r2, r2, #4
 801719e:	671a      	str	r2, [r3, #112]	@ 0x70
 80171a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80171a2:	f042 0201 	orr.w	r2, r2, #1
 80171a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80171a8:	e7c5      	b.n	8017136 <HAL_RCC_OscConfig+0x21e>
 80171aa:	bf00      	nop
 80171ac:	40023800 	.word	0x40023800
 80171b0:	42470000 	.word	0x42470000
 80171b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80171b8:	f7ff f852 	bl	8016260 <HAL_GetTick>
 80171bc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80171be:	4b52      	ldr	r3, [pc, #328]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 80171c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171c2:	f013 0f02 	tst.w	r3, #2
 80171c6:	d008      	beq.n	80171da <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80171c8:	f7ff f84a 	bl	8016260 <HAL_GetTick>
 80171cc:	1b80      	subs	r0, r0, r6
 80171ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80171d2:	4298      	cmp	r0, r3
 80171d4:	d9f3      	bls.n	80171be <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80171d6:	2003      	movs	r0, #3
 80171d8:	e088      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80171da:	b9ed      	cbnz	r5, 8017218 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80171dc:	69a3      	ldr	r3, [r4, #24]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	f000 8083 	beq.w	80172ea <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80171e4:	4a48      	ldr	r2, [pc, #288]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 80171e6:	6892      	ldr	r2, [r2, #8]
 80171e8:	f002 020c 	and.w	r2, r2, #12
 80171ec:	2a08      	cmp	r2, #8
 80171ee:	d051      	beq.n	8017294 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80171f0:	2b02      	cmp	r3, #2
 80171f2:	d017      	beq.n	8017224 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80171f4:	4b45      	ldr	r3, [pc, #276]	@ (801730c <HAL_RCC_OscConfig+0x3f4>)
 80171f6:	2200      	movs	r2, #0
 80171f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80171fa:	f7ff f831 	bl	8016260 <HAL_GetTick>
 80171fe:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017200:	4b41      	ldr	r3, [pc, #260]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017208:	d042      	beq.n	8017290 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801720a:	f7ff f829 	bl	8016260 <HAL_GetTick>
 801720e:	1b00      	subs	r0, r0, r4
 8017210:	2802      	cmp	r0, #2
 8017212:	d9f5      	bls.n	8017200 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8017214:	2003      	movs	r0, #3
 8017216:	e069      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017218:	4a3b      	ldr	r2, [pc, #236]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 801721a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801721c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017220:	6413      	str	r3, [r2, #64]	@ 0x40
 8017222:	e7db      	b.n	80171dc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017224:	4b39      	ldr	r3, [pc, #228]	@ (801730c <HAL_RCC_OscConfig+0x3f4>)
 8017226:	2200      	movs	r2, #0
 8017228:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801722a:	f7ff f819 	bl	8016260 <HAL_GetTick>
 801722e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017230:	4b35      	ldr	r3, [pc, #212]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017238:	d006      	beq.n	8017248 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801723a:	f7ff f811 	bl	8016260 <HAL_GetTick>
 801723e:	1b40      	subs	r0, r0, r5
 8017240:	2802      	cmp	r0, #2
 8017242:	d9f5      	bls.n	8017230 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8017244:	2003      	movs	r0, #3
 8017246:	e051      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017248:	69e3      	ldr	r3, [r4, #28]
 801724a:	6a22      	ldr	r2, [r4, #32]
 801724c:	4313      	orrs	r3, r2
 801724e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017250:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8017254:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017256:	0852      	lsrs	r2, r2, #1
 8017258:	3a01      	subs	r2, #1
 801725a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801725e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017260:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017264:	4a28      	ldr	r2, [pc, #160]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 8017266:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8017268:	4b28      	ldr	r3, [pc, #160]	@ (801730c <HAL_RCC_OscConfig+0x3f4>)
 801726a:	2201      	movs	r2, #1
 801726c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801726e:	f7fe fff7 	bl	8016260 <HAL_GetTick>
 8017272:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017274:	4b24      	ldr	r3, [pc, #144]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801727c:	d106      	bne.n	801728c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801727e:	f7fe ffef 	bl	8016260 <HAL_GetTick>
 8017282:	1b00      	subs	r0, r0, r4
 8017284:	2802      	cmp	r0, #2
 8017286:	d9f5      	bls.n	8017274 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8017288:	2003      	movs	r0, #3
 801728a:	e02f      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801728c:	2000      	movs	r0, #0
 801728e:	e02d      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 8017290:	2000      	movs	r0, #0
 8017292:	e02b      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017294:	2b01      	cmp	r3, #1
 8017296:	d02b      	beq.n	80172f0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8017298:	4b1b      	ldr	r3, [pc, #108]	@ (8017308 <HAL_RCC_OscConfig+0x3f0>)
 801729a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801729c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80172a0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80172a2:	4291      	cmp	r1, r2
 80172a4:	d126      	bne.n	80172f4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80172a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80172aa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80172ac:	428a      	cmp	r2, r1
 80172ae:	d123      	bne.n	80172f8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80172b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80172b2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80172b6:	401a      	ands	r2, r3
 80172b8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80172bc:	d11e      	bne.n	80172fc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80172be:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80172c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80172c4:	0852      	lsrs	r2, r2, #1
 80172c6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80172c8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80172cc:	d118      	bne.n	8017300 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80172ce:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80172d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80172d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80172d8:	d114      	bne.n	8017304 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80172da:	2000      	movs	r0, #0
 80172dc:	e006      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80172de:	2001      	movs	r0, #1
}
 80172e0:	4770      	bx	lr
        return HAL_ERROR;
 80172e2:	2001      	movs	r0, #1
 80172e4:	e002      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80172e6:	2001      	movs	r0, #1
 80172e8:	e000      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80172ea:	2000      	movs	r0, #0
}
 80172ec:	b002      	add	sp, #8
 80172ee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80172f0:	2001      	movs	r0, #1
 80172f2:	e7fb      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80172f4:	2001      	movs	r0, #1
 80172f6:	e7f9      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 80172f8:	2001      	movs	r0, #1
 80172fa:	e7f7      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 80172fc:	2001      	movs	r0, #1
 80172fe:	e7f5      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 8017300:	2001      	movs	r0, #1
 8017302:	e7f3      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 8017304:	2001      	movs	r0, #1
 8017306:	e7f1      	b.n	80172ec <HAL_RCC_OscConfig+0x3d4>
 8017308:	40023800 	.word	0x40023800
 801730c:	42470000 	.word	0x42470000

08017310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017310:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017312:	4b33      	ldr	r3, [pc, #204]	@ (80173e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017314:	689b      	ldr	r3, [r3, #8]
 8017316:	f003 030c 	and.w	r3, r3, #12
 801731a:	2b04      	cmp	r3, #4
 801731c:	d05b      	beq.n	80173d6 <HAL_RCC_GetSysClockFreq+0xc6>
 801731e:	2b08      	cmp	r3, #8
 8017320:	d15b      	bne.n	80173da <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017322:	4b2f      	ldr	r3, [pc, #188]	@ (80173e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017324:	685a      	ldr	r2, [r3, #4]
 8017326:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801732a:	685b      	ldr	r3, [r3, #4]
 801732c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017330:	d02c      	beq.n	801738c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017332:	4b2b      	ldr	r3, [pc, #172]	@ (80173e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017334:	6858      	ldr	r0, [r3, #4]
 8017336:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801733a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801733e:	ebbc 0c00 	subs.w	ip, ip, r0
 8017342:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017346:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801734a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 801734e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017352:	ebb1 010c 	subs.w	r1, r1, ip
 8017356:	eb63 030e 	sbc.w	r3, r3, lr
 801735a:	00db      	lsls	r3, r3, #3
 801735c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017360:	00c9      	lsls	r1, r1, #3
 8017362:	eb11 0c00 	adds.w	ip, r1, r0
 8017366:	f143 0300 	adc.w	r3, r3, #0
 801736a:	0259      	lsls	r1, r3, #9
 801736c:	2300      	movs	r3, #0
 801736e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8017372:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8017376:	f7f9 fcef 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 801737a:	4b19      	ldr	r3, [pc, #100]	@ (80173e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8017382:	3301      	adds	r3, #1
 8017384:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8017386:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 801738a:	e027      	b.n	80173dc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801738c:	4b14      	ldr	r3, [pc, #80]	@ (80173e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801738e:	6858      	ldr	r0, [r3, #4]
 8017390:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017394:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017398:	ebbc 0c00 	subs.w	ip, ip, r0
 801739c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80173a0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80173a4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80173a8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80173ac:	ebb1 010c 	subs.w	r1, r1, ip
 80173b0:	eb63 030e 	sbc.w	r3, r3, lr
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80173ba:	00c9      	lsls	r1, r1, #3
 80173bc:	eb11 0c00 	adds.w	ip, r1, r0
 80173c0:	f143 0300 	adc.w	r3, r3, #0
 80173c4:	0299      	lsls	r1, r3, #10
 80173c6:	2300      	movs	r3, #0
 80173c8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80173cc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80173d0:	f7f9 fcc2 	bl	8010d58 <__aeabi_uldivmod>
 80173d4:	e7d1      	b.n	801737a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80173d6:	4803      	ldr	r0, [pc, #12]	@ (80173e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80173d8:	e000      	b.n	80173dc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80173da:	4803      	ldr	r0, [pc, #12]	@ (80173e8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80173dc:	bd08      	pop	{r3, pc}
 80173de:	bf00      	nop
 80173e0:	40023800 	.word	0x40023800
 80173e4:	007a1200 	.word	0x007a1200
 80173e8:	00f42400 	.word	0x00f42400

080173ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80173ec:	2800      	cmp	r0, #0
 80173ee:	f000 809b 	beq.w	8017528 <HAL_RCC_ClockConfig+0x13c>
{
 80173f2:	b570      	push	{r4, r5, r6, lr}
 80173f4:	460d      	mov	r5, r1
 80173f6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80173f8:	4b4f      	ldr	r3, [pc, #316]	@ (8017538 <HAL_RCC_ClockConfig+0x14c>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	f003 0307 	and.w	r3, r3, #7
 8017400:	428b      	cmp	r3, r1
 8017402:	d208      	bcs.n	8017416 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017404:	b2cb      	uxtb	r3, r1
 8017406:	4a4c      	ldr	r2, [pc, #304]	@ (8017538 <HAL_RCC_ClockConfig+0x14c>)
 8017408:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801740a:	6813      	ldr	r3, [r2, #0]
 801740c:	f003 0307 	and.w	r3, r3, #7
 8017410:	428b      	cmp	r3, r1
 8017412:	f040 808b 	bne.w	801752c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017416:	6823      	ldr	r3, [r4, #0]
 8017418:	f013 0f02 	tst.w	r3, #2
 801741c:	d017      	beq.n	801744e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801741e:	f013 0f04 	tst.w	r3, #4
 8017422:	d004      	beq.n	801742e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017424:	4a45      	ldr	r2, [pc, #276]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 8017426:	6893      	ldr	r3, [r2, #8]
 8017428:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801742c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801742e:	6823      	ldr	r3, [r4, #0]
 8017430:	f013 0f08 	tst.w	r3, #8
 8017434:	d004      	beq.n	8017440 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017436:	4a41      	ldr	r2, [pc, #260]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 8017438:	6893      	ldr	r3, [r2, #8]
 801743a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801743e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017440:	4a3e      	ldr	r2, [pc, #248]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 8017442:	6893      	ldr	r3, [r2, #8]
 8017444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017448:	68a1      	ldr	r1, [r4, #8]
 801744a:	430b      	orrs	r3, r1
 801744c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801744e:	6823      	ldr	r3, [r4, #0]
 8017450:	f013 0f01 	tst.w	r3, #1
 8017454:	d032      	beq.n	80174bc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017456:	6863      	ldr	r3, [r4, #4]
 8017458:	2b01      	cmp	r3, #1
 801745a:	d021      	beq.n	80174a0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801745c:	1e9a      	subs	r2, r3, #2
 801745e:	2a01      	cmp	r2, #1
 8017460:	d925      	bls.n	80174ae <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017462:	4a36      	ldr	r2, [pc, #216]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 8017464:	6812      	ldr	r2, [r2, #0]
 8017466:	f012 0f02 	tst.w	r2, #2
 801746a:	d061      	beq.n	8017530 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801746c:	4933      	ldr	r1, [pc, #204]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 801746e:	688a      	ldr	r2, [r1, #8]
 8017470:	f022 0203 	bic.w	r2, r2, #3
 8017474:	4313      	orrs	r3, r2
 8017476:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017478:	f7fe fef2 	bl	8016260 <HAL_GetTick>
 801747c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801747e:	4b2f      	ldr	r3, [pc, #188]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 8017480:	689b      	ldr	r3, [r3, #8]
 8017482:	f003 030c 	and.w	r3, r3, #12
 8017486:	6862      	ldr	r2, [r4, #4]
 8017488:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801748c:	d016      	beq.n	80174bc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801748e:	f7fe fee7 	bl	8016260 <HAL_GetTick>
 8017492:	1b80      	subs	r0, r0, r6
 8017494:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017498:	4298      	cmp	r0, r3
 801749a:	d9f0      	bls.n	801747e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 801749c:	2003      	movs	r0, #3
 801749e:	e042      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80174a0:	4a26      	ldr	r2, [pc, #152]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 80174a2:	6812      	ldr	r2, [r2, #0]
 80174a4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80174a8:	d1e0      	bne.n	801746c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80174aa:	2001      	movs	r0, #1
 80174ac:	e03b      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80174ae:	4a23      	ldr	r2, [pc, #140]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 80174b0:	6812      	ldr	r2, [r2, #0]
 80174b2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80174b6:	d1d9      	bne.n	801746c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80174b8:	2001      	movs	r0, #1
 80174ba:	e034      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80174bc:	4b1e      	ldr	r3, [pc, #120]	@ (8017538 <HAL_RCC_ClockConfig+0x14c>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	f003 0307 	and.w	r3, r3, #7
 80174c4:	42ab      	cmp	r3, r5
 80174c6:	d907      	bls.n	80174d8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80174c8:	b2ea      	uxtb	r2, r5
 80174ca:	4b1b      	ldr	r3, [pc, #108]	@ (8017538 <HAL_RCC_ClockConfig+0x14c>)
 80174cc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	f003 0307 	and.w	r3, r3, #7
 80174d4:	42ab      	cmp	r3, r5
 80174d6:	d12d      	bne.n	8017534 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80174d8:	6823      	ldr	r3, [r4, #0]
 80174da:	f013 0f04 	tst.w	r3, #4
 80174de:	d006      	beq.n	80174ee <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80174e0:	4a16      	ldr	r2, [pc, #88]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 80174e2:	6893      	ldr	r3, [r2, #8]
 80174e4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80174e8:	68e1      	ldr	r1, [r4, #12]
 80174ea:	430b      	orrs	r3, r1
 80174ec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80174ee:	6823      	ldr	r3, [r4, #0]
 80174f0:	f013 0f08 	tst.w	r3, #8
 80174f4:	d007      	beq.n	8017506 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80174f6:	4a11      	ldr	r2, [pc, #68]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 80174f8:	6893      	ldr	r3, [r2, #8]
 80174fa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80174fe:	6921      	ldr	r1, [r4, #16]
 8017500:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017504:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017506:	f7ff ff03 	bl	8017310 <HAL_RCC_GetSysClockFreq>
 801750a:	4b0c      	ldr	r3, [pc, #48]	@ (801753c <HAL_RCC_ClockConfig+0x150>)
 801750c:	689b      	ldr	r3, [r3, #8]
 801750e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017512:	4a0b      	ldr	r2, [pc, #44]	@ (8017540 <HAL_RCC_ClockConfig+0x154>)
 8017514:	5cd3      	ldrb	r3, [r2, r3]
 8017516:	40d8      	lsrs	r0, r3
 8017518:	4b0a      	ldr	r3, [pc, #40]	@ (8017544 <HAL_RCC_ClockConfig+0x158>)
 801751a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 801751c:	4b0a      	ldr	r3, [pc, #40]	@ (8017548 <HAL_RCC_ClockConfig+0x15c>)
 801751e:	6818      	ldr	r0, [r3, #0]
 8017520:	f7fa feee 	bl	8012300 <HAL_InitTick>
  return HAL_OK;
 8017524:	2000      	movs	r0, #0
}
 8017526:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017528:	2001      	movs	r0, #1
}
 801752a:	4770      	bx	lr
      return HAL_ERROR;
 801752c:	2001      	movs	r0, #1
 801752e:	e7fa      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8017530:	2001      	movs	r0, #1
 8017532:	e7f8      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017534:	2001      	movs	r0, #1
 8017536:	e7f6      	b.n	8017526 <HAL_RCC_ClockConfig+0x13a>
 8017538:	40023c00 	.word	0x40023c00
 801753c:	40023800 	.word	0x40023800
 8017540:	08036478 	.word	0x08036478
 8017544:	20000018 	.word	0x20000018
 8017548:	20000108 	.word	0x20000108

0801754c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 801754c:	4b01      	ldr	r3, [pc, #4]	@ (8017554 <HAL_RCC_GetHCLKFreq+0x8>)
 801754e:	6818      	ldr	r0, [r3, #0]
 8017550:	4770      	bx	lr
 8017552:	bf00      	nop
 8017554:	20000018 	.word	0x20000018

08017558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017558:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801755a:	f7ff fff7 	bl	801754c <HAL_RCC_GetHCLKFreq>
 801755e:	4b04      	ldr	r3, [pc, #16]	@ (8017570 <HAL_RCC_GetPCLK1Freq+0x18>)
 8017560:	689b      	ldr	r3, [r3, #8]
 8017562:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017566:	4a03      	ldr	r2, [pc, #12]	@ (8017574 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017568:	5cd3      	ldrb	r3, [r2, r3]
}
 801756a:	40d8      	lsrs	r0, r3
 801756c:	bd08      	pop	{r3, pc}
 801756e:	bf00      	nop
 8017570:	40023800 	.word	0x40023800
 8017574:	08036470 	.word	0x08036470

08017578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017578:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801757a:	f7ff ffe7 	bl	801754c <HAL_RCC_GetHCLKFreq>
 801757e:	4b04      	ldr	r3, [pc, #16]	@ (8017590 <HAL_RCC_GetPCLK2Freq+0x18>)
 8017580:	689b      	ldr	r3, [r3, #8]
 8017582:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017586:	4a03      	ldr	r2, [pc, #12]	@ (8017594 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017588:	5cd3      	ldrb	r3, [r2, r3]
}
 801758a:	40d8      	lsrs	r0, r3
 801758c:	bd08      	pop	{r3, pc}
 801758e:	bf00      	nop
 8017590:	40023800 	.word	0x40023800
 8017594:	08036470 	.word	0x08036470

08017598 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017598:	230f      	movs	r3, #15
 801759a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801759c:	4b0b      	ldr	r3, [pc, #44]	@ (80175cc <HAL_RCC_GetClockConfig+0x34>)
 801759e:	689a      	ldr	r2, [r3, #8]
 80175a0:	f002 0203 	and.w	r2, r2, #3
 80175a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80175a6:	689a      	ldr	r2, [r3, #8]
 80175a8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80175ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80175ae:	689a      	ldr	r2, [r3, #8]
 80175b0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80175b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80175b6:	689b      	ldr	r3, [r3, #8]
 80175b8:	08db      	lsrs	r3, r3, #3
 80175ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80175be:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80175c0:	4b03      	ldr	r3, [pc, #12]	@ (80175d0 <HAL_RCC_GetClockConfig+0x38>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f003 0307 	and.w	r3, r3, #7
 80175c8:	600b      	str	r3, [r1, #0]
}
 80175ca:	4770      	bx	lr
 80175cc:	40023800 	.word	0x40023800
 80175d0:	40023c00 	.word	0x40023c00

080175d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80175d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d8:	b082      	sub	sp, #8
 80175da:	4605      	mov	r5, r0
 80175dc:	4688      	mov	r8, r1
 80175de:	4617      	mov	r7, r2
 80175e0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80175e2:	f7fe fe3d 	bl	8016260 <HAL_GetTick>
 80175e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175e8:	1a1b      	subs	r3, r3, r0
 80175ea:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80175ee:	f7fe fe37 	bl	8016260 <HAL_GetTick>
 80175f2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80175f4:	4b28      	ldr	r3, [pc, #160]	@ (8017698 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80175fc:	fb09 f303 	mul.w	r3, r9, r3
 8017600:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017602:	682b      	ldr	r3, [r5, #0]
 8017604:	689c      	ldr	r4, [r3, #8]
 8017606:	ea38 0404 	bics.w	r4, r8, r4
 801760a:	bf0c      	ite	eq
 801760c:	2301      	moveq	r3, #1
 801760e:	2300      	movne	r3, #0
 8017610:	42bb      	cmp	r3, r7
 8017612:	d03d      	beq.n	8017690 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017614:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017618:	d0f3      	beq.n	8017602 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801761a:	f7fe fe21 	bl	8016260 <HAL_GetTick>
 801761e:	eba0 000a 	sub.w	r0, r0, sl
 8017622:	4548      	cmp	r0, r9
 8017624:	d207      	bcs.n	8017636 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017626:	9a01      	ldr	r2, [sp, #4]
 8017628:	b102      	cbz	r2, 801762c <SPI_WaitFlagStateUntilTimeout+0x58>
 801762a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 801762c:	9b01      	ldr	r3, [sp, #4]
 801762e:	3b01      	subs	r3, #1
 8017630:	9301      	str	r3, [sp, #4]
 8017632:	4691      	mov	r9, r2
 8017634:	e7e5      	b.n	8017602 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017636:	682a      	ldr	r2, [r5, #0]
 8017638:	6853      	ldr	r3, [r2, #4]
 801763a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801763e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017640:	686b      	ldr	r3, [r5, #4]
 8017642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017646:	d00b      	beq.n	8017660 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017648:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801764a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801764e:	d014      	beq.n	801767a <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8017650:	2301      	movs	r3, #1
 8017652:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017656:	2300      	movs	r3, #0
 8017658:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 801765c:	2003      	movs	r0, #3
 801765e:	e018      	b.n	8017692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017660:	68ab      	ldr	r3, [r5, #8]
 8017662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017666:	d002      	beq.n	801766e <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801766c:	d1ec      	bne.n	8017648 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 801766e:	682a      	ldr	r2, [r5, #0]
 8017670:	6813      	ldr	r3, [r2, #0]
 8017672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017676:	6013      	str	r3, [r2, #0]
 8017678:	e7e6      	b.n	8017648 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 801767a:	682a      	ldr	r2, [r5, #0]
 801767c:	6813      	ldr	r3, [r2, #0]
 801767e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017682:	6013      	str	r3, [r2, #0]
 8017684:	682a      	ldr	r2, [r5, #0]
 8017686:	6813      	ldr	r3, [r2, #0]
 8017688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801768c:	6013      	str	r3, [r2, #0]
 801768e:	e7df      	b.n	8017650 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8017690:	2000      	movs	r0, #0
}
 8017692:	b002      	add	sp, #8
 8017694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017698:	20000018 	.word	0x20000018

0801769c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801769c:	b570      	push	{r4, r5, r6, lr}
 801769e:	b084      	sub	sp, #16
 80176a0:	4604      	mov	r4, r0
 80176a2:	460d      	mov	r5, r1
 80176a4:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80176a6:	9200      	str	r2, [sp, #0]
 80176a8:	460b      	mov	r3, r1
 80176aa:	2201      	movs	r2, #1
 80176ac:	2102      	movs	r1, #2
 80176ae:	f7ff ff91 	bl	80175d4 <SPI_WaitFlagStateUntilTimeout>
 80176b2:	b9d0      	cbnz	r0, 80176ea <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80176b4:	4b17      	ldr	r3, [pc, #92]	@ (8017714 <SPI_EndRxTxTransaction+0x78>)
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	4a17      	ldr	r2, [pc, #92]	@ (8017718 <SPI_EndRxTxTransaction+0x7c>)
 80176ba:	fba2 2303 	umull	r2, r3, r2, r3
 80176be:	0d5b      	lsrs	r3, r3, #21
 80176c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176c4:	fb02 f303 	mul.w	r3, r2, r3
 80176c8:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80176ca:	6863      	ldr	r3, [r4, #4]
 80176cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80176d0:	d011      	beq.n	80176f6 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80176d2:	9b03      	ldr	r3, [sp, #12]
 80176d4:	b13b      	cbz	r3, 80176e6 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80176d6:	9b03      	ldr	r3, [sp, #12]
 80176d8:	3b01      	subs	r3, #1
 80176da:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80176dc:	6823      	ldr	r3, [r4, #0]
 80176de:	689b      	ldr	r3, [r3, #8]
 80176e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176e4:	d1f5      	bne.n	80176d2 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80176e6:	b004      	add	sp, #16
 80176e8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80176ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80176ec:	f043 0320 	orr.w	r3, r3, #32
 80176f0:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80176f2:	2003      	movs	r0, #3
 80176f4:	e7f7      	b.n	80176e6 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80176f6:	9600      	str	r6, [sp, #0]
 80176f8:	462b      	mov	r3, r5
 80176fa:	2200      	movs	r2, #0
 80176fc:	2180      	movs	r1, #128	@ 0x80
 80176fe:	4620      	mov	r0, r4
 8017700:	f7ff ff68 	bl	80175d4 <SPI_WaitFlagStateUntilTimeout>
 8017704:	2800      	cmp	r0, #0
 8017706:	d0ee      	beq.n	80176e6 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017708:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801770a:	f043 0320 	orr.w	r3, r3, #32
 801770e:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017710:	2003      	movs	r0, #3
 8017712:	e7e8      	b.n	80176e6 <SPI_EndRxTxTransaction+0x4a>
 8017714:	20000018 	.word	0x20000018
 8017718:	165e9f81 	.word	0x165e9f81

0801771c <SPI_EndRxTransaction>:
{
 801771c:	b510      	push	{r4, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	4604      	mov	r4, r0
 8017722:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017724:	6841      	ldr	r1, [r0, #4]
 8017726:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801772a:	d014      	beq.n	8017756 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801772c:	6861      	ldr	r1, [r4, #4]
 801772e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017732:	d12a      	bne.n	801778a <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017734:	68a1      	ldr	r1, [r4, #8]
 8017736:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801773a:	d019      	beq.n	8017770 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801773c:	9200      	str	r2, [sp, #0]
 801773e:	2200      	movs	r2, #0
 8017740:	2180      	movs	r1, #128	@ 0x80
 8017742:	4620      	mov	r0, r4
 8017744:	f7ff ff46 	bl	80175d4 <SPI_WaitFlagStateUntilTimeout>
 8017748:	b330      	cbz	r0, 8017798 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801774a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801774c:	f043 0320 	orr.w	r3, r3, #32
 8017750:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017752:	2003      	movs	r0, #3
 8017754:	e020      	b.n	8017798 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017756:	6881      	ldr	r1, [r0, #8]
 8017758:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801775c:	d002      	beq.n	8017764 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801775e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017762:	d1e3      	bne.n	801772c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8017764:	6820      	ldr	r0, [r4, #0]
 8017766:	6801      	ldr	r1, [r0, #0]
 8017768:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 801776c:	6001      	str	r1, [r0, #0]
 801776e:	e7dd      	b.n	801772c <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017770:	9200      	str	r2, [sp, #0]
 8017772:	2200      	movs	r2, #0
 8017774:	2101      	movs	r1, #1
 8017776:	4620      	mov	r0, r4
 8017778:	f7ff ff2c 	bl	80175d4 <SPI_WaitFlagStateUntilTimeout>
 801777c:	b160      	cbz	r0, 8017798 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801777e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017780:	f043 0320 	orr.w	r3, r3, #32
 8017784:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017786:	2003      	movs	r0, #3
 8017788:	e006      	b.n	8017798 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801778a:	9200      	str	r2, [sp, #0]
 801778c:	2200      	movs	r2, #0
 801778e:	2101      	movs	r1, #1
 8017790:	4620      	mov	r0, r4
 8017792:	f7ff ff1f 	bl	80175d4 <SPI_WaitFlagStateUntilTimeout>
 8017796:	b908      	cbnz	r0, 801779c <SPI_EndRxTransaction+0x80>
}
 8017798:	b002      	add	sp, #8
 801779a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801779c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801779e:	f043 0320 	orr.w	r3, r3, #32
 80177a2:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80177a4:	2003      	movs	r0, #3
 80177a6:	e7f7      	b.n	8017798 <SPI_EndRxTransaction+0x7c>

080177a8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d05a      	beq.n	8017862 <HAL_SPI_Init+0xba>
{
 80177ac:	b510      	push	{r4, lr}
 80177ae:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80177b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80177b2:	b933      	cbnz	r3, 80177c2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80177b4:	6843      	ldr	r3, [r0, #4]
 80177b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80177ba:	d005      	beq.n	80177c8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80177bc:	2300      	movs	r3, #0
 80177be:	61c3      	str	r3, [r0, #28]
 80177c0:	e002      	b.n	80177c8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80177c2:	2300      	movs	r3, #0
 80177c4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80177c6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80177c8:	2300      	movs	r3, #0
 80177ca:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80177cc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d040      	beq.n	8017856 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80177d4:	2302      	movs	r3, #2
 80177d6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80177da:	6822      	ldr	r2, [r4, #0]
 80177dc:	6813      	ldr	r3, [r2, #0]
 80177de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80177e2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80177e4:	6863      	ldr	r3, [r4, #4]
 80177e6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80177ea:	68a2      	ldr	r2, [r4, #8]
 80177ec:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80177f0:	4313      	orrs	r3, r2
 80177f2:	68e2      	ldr	r2, [r4, #12]
 80177f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80177f8:	4313      	orrs	r3, r2
 80177fa:	6922      	ldr	r2, [r4, #16]
 80177fc:	f002 0202 	and.w	r2, r2, #2
 8017800:	4313      	orrs	r3, r2
 8017802:	6962      	ldr	r2, [r4, #20]
 8017804:	f002 0201 	and.w	r2, r2, #1
 8017808:	4313      	orrs	r3, r2
 801780a:	69a2      	ldr	r2, [r4, #24]
 801780c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8017810:	4313      	orrs	r3, r2
 8017812:	69e2      	ldr	r2, [r4, #28]
 8017814:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017818:	4313      	orrs	r3, r2
 801781a:	6a22      	ldr	r2, [r4, #32]
 801781c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017820:	4313      	orrs	r3, r2
 8017822:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017824:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017828:	6821      	ldr	r1, [r4, #0]
 801782a:	4313      	orrs	r3, r2
 801782c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801782e:	8b63      	ldrh	r3, [r4, #26]
 8017830:	f003 0304 	and.w	r3, r3, #4
 8017834:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017836:	f002 0210 	and.w	r2, r2, #16
 801783a:	6821      	ldr	r1, [r4, #0]
 801783c:	4313      	orrs	r3, r2
 801783e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017840:	6822      	ldr	r2, [r4, #0]
 8017842:	69d3      	ldr	r3, [r2, #28]
 8017844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017848:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801784a:	2000      	movs	r0, #0
 801784c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801784e:	2301      	movs	r3, #1
 8017850:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8017854:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8017856:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 801785a:	4620      	mov	r0, r4
 801785c:	f7fa fccc 	bl	80121f8 <HAL_SPI_MspInit>
 8017860:	e7b8      	b.n	80177d4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8017862:	2001      	movs	r0, #1
}
 8017864:	4770      	bx	lr

08017866 <HAL_SPI_Transmit>:
{
 8017866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801786a:	b083      	sub	sp, #12
 801786c:	4604      	mov	r4, r0
 801786e:	4689      	mov	r9, r1
 8017870:	4690      	mov	r8, r2
 8017872:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017874:	f7fe fcf4 	bl	8016260 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017878:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 801787c:	b2f6      	uxtb	r6, r6
 801787e:	2e01      	cmp	r6, #1
 8017880:	f040 80cc 	bne.w	8017a1c <HAL_SPI_Transmit+0x1b6>
 8017884:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017886:	f1b9 0f00 	cmp.w	r9, #0
 801788a:	f000 80c8 	beq.w	8017a1e <HAL_SPI_Transmit+0x1b8>
 801788e:	f1b8 0f00 	cmp.w	r8, #0
 8017892:	f000 80c4 	beq.w	8017a1e <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017896:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801789a:	2b01      	cmp	r3, #1
 801789c:	f000 80c3 	beq.w	8017a26 <HAL_SPI_Transmit+0x1c0>
 80178a0:	2301      	movs	r3, #1
 80178a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80178a6:	2303      	movs	r3, #3
 80178a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80178ac:	2300      	movs	r3, #0
 80178ae:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80178b0:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80178b4:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80178b8:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80178bc:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80178be:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80178c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80178c2:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80178c4:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80178c6:	68a3      	ldr	r3, [r4, #8]
 80178c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80178cc:	d01e      	beq.n	801790c <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80178ce:	6823      	ldr	r3, [r4, #0]
 80178d0:	681a      	ldr	r2, [r3, #0]
 80178d2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80178d6:	d103      	bne.n	80178e0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80178d8:	681a      	ldr	r2, [r3, #0]
 80178da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80178de:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80178e0:	68e3      	ldr	r3, [r4, #12]
 80178e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178e6:	d01c      	beq.n	8017922 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80178e8:	6863      	ldr	r3, [r4, #4]
 80178ea:	b113      	cbz	r3, 80178f2 <HAL_SPI_Transmit+0x8c>
 80178ec:	f1b8 0f01 	cmp.w	r8, #1
 80178f0:	d15f      	bne.n	80179b2 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80178f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80178f4:	6823      	ldr	r3, [r4, #0]
 80178f6:	7812      	ldrb	r2, [r2, #0]
 80178f8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80178fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80178fc:	3301      	adds	r3, #1
 80178fe:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017900:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017902:	b29b      	uxth	r3, r3
 8017904:	3b01      	subs	r3, #1
 8017906:	b29b      	uxth	r3, r3
 8017908:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801790a:	e052      	b.n	80179b2 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 801790c:	6822      	ldr	r2, [r4, #0]
 801790e:	6813      	ldr	r3, [r2, #0]
 8017910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017914:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8017916:	6822      	ldr	r2, [r4, #0]
 8017918:	6813      	ldr	r3, [r2, #0]
 801791a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801791e:	6013      	str	r3, [r2, #0]
 8017920:	e7d5      	b.n	80178ce <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017922:	6863      	ldr	r3, [r4, #4]
 8017924:	b113      	cbz	r3, 801792c <HAL_SPI_Transmit+0xc6>
 8017926:	f1b8 0f01 	cmp.w	r8, #1
 801792a:	d115      	bne.n	8017958 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801792c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	8812      	ldrh	r2, [r2, #0]
 8017932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017936:	3302      	adds	r3, #2
 8017938:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801793a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801793c:	b29b      	uxth	r3, r3
 801793e:	3b01      	subs	r3, #1
 8017940:	b29b      	uxth	r3, r3
 8017942:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017944:	e008      	b.n	8017958 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017946:	f7fe fc8b 	bl	8016260 <HAL_GetTick>
 801794a:	1bc0      	subs	r0, r0, r7
 801794c:	42a8      	cmp	r0, r5
 801794e:	d302      	bcc.n	8017956 <HAL_SPI_Transmit+0xf0>
 8017950:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017954:	d115      	bne.n	8017982 <HAL_SPI_Transmit+0x11c>
 8017956:	b1a5      	cbz	r5, 8017982 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8017958:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801795a:	b29b      	uxth	r3, r3
 801795c:	2b00      	cmp	r3, #0
 801795e:	d042      	beq.n	80179e6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017960:	6823      	ldr	r3, [r4, #0]
 8017962:	689a      	ldr	r2, [r3, #8]
 8017964:	f012 0f02 	tst.w	r2, #2
 8017968:	d0ed      	beq.n	8017946 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801796a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801796c:	8812      	ldrh	r2, [r2, #0]
 801796e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017972:	3302      	adds	r3, #2
 8017974:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017976:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017978:	b29b      	uxth	r3, r3
 801797a:	3b01      	subs	r3, #1
 801797c:	b29b      	uxth	r3, r3
 801797e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017980:	e7ea      	b.n	8017958 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8017982:	2301      	movs	r3, #1
 8017984:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017988:	2300      	movs	r3, #0
 801798a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801798e:	2603      	movs	r6, #3
 8017990:	e045      	b.n	8017a1e <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017992:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017994:	7812      	ldrb	r2, [r2, #0]
 8017996:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017998:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801799a:	3301      	adds	r3, #1
 801799c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801799e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80179a2:	fa1f fc8c 	uxth.w	ip, ip
 80179a6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80179aa:	fa1f fc8c 	uxth.w	ip, ip
 80179ae:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80179b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	b1b3      	cbz	r3, 80179e6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	689a      	ldr	r2, [r3, #8]
 80179bc:	f012 0f02 	tst.w	r2, #2
 80179c0:	d1e7      	bne.n	8017992 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80179c2:	f7fe fc4d 	bl	8016260 <HAL_GetTick>
 80179c6:	1bc0      	subs	r0, r0, r7
 80179c8:	42a8      	cmp	r0, r5
 80179ca:	d302      	bcc.n	80179d2 <HAL_SPI_Transmit+0x16c>
 80179cc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80179d0:	d101      	bne.n	80179d6 <HAL_SPI_Transmit+0x170>
 80179d2:	2d00      	cmp	r5, #0
 80179d4:	d1ed      	bne.n	80179b2 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80179d6:	2301      	movs	r3, #1
 80179d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80179dc:	2300      	movs	r3, #0
 80179de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80179e2:	2603      	movs	r6, #3
 80179e4:	e01b      	b.n	8017a1e <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80179e6:	463a      	mov	r2, r7
 80179e8:	4629      	mov	r1, r5
 80179ea:	4620      	mov	r0, r4
 80179ec:	f7ff fe56 	bl	801769c <SPI_EndRxTxTransaction>
 80179f0:	b108      	cbz	r0, 80179f6 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80179f2:	2320      	movs	r3, #32
 80179f4:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80179f6:	68a3      	ldr	r3, [r4, #8]
 80179f8:	b933      	cbnz	r3, 8017a08 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80179fa:	9301      	str	r3, [sp, #4]
 80179fc:	6823      	ldr	r3, [r4, #0]
 80179fe:	68da      	ldr	r2, [r3, #12]
 8017a00:	9201      	str	r2, [sp, #4]
 8017a02:	689b      	ldr	r3, [r3, #8]
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017a08:	2301      	movs	r3, #1
 8017a0a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017a0e:	2300      	movs	r3, #0
 8017a10:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017a14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017a16:	b913      	cbnz	r3, 8017a1e <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8017a18:	2600      	movs	r6, #0
 8017a1a:	e000      	b.n	8017a1e <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8017a1c:	2602      	movs	r6, #2
}
 8017a1e:	4630      	mov	r0, r6
 8017a20:	b003      	add	sp, #12
 8017a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017a26:	2602      	movs	r6, #2
 8017a28:	e7f9      	b.n	8017a1e <HAL_SPI_Transmit+0x1b8>

08017a2a <HAL_SPI_TransmitReceive>:
{
 8017a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a2e:	b083      	sub	sp, #12
 8017a30:	4604      	mov	r4, r0
 8017a32:	4688      	mov	r8, r1
 8017a34:	4691      	mov	r9, r2
 8017a36:	461f      	mov	r7, r3
 8017a38:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8017a3a:	f7fe fc11 	bl	8016260 <HAL_GetTick>
 8017a3e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8017a40:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017a44:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8017a46:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d00a      	beq.n	8017a62 <HAL_SPI_TransmitReceive+0x38>
 8017a4c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8017a50:	f040 8105 	bne.w	8017c5e <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8017a54:	68a2      	ldr	r2, [r4, #8]
 8017a56:	2a00      	cmp	r2, #0
 8017a58:	f040 8105 	bne.w	8017c66 <HAL_SPI_TransmitReceive+0x23c>
 8017a5c:	2b04      	cmp	r3, #4
 8017a5e:	f040 8104 	bne.w	8017c6a <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8017a62:	f1b8 0f00 	cmp.w	r8, #0
 8017a66:	f000 8102 	beq.w	8017c6e <HAL_SPI_TransmitReceive+0x244>
 8017a6a:	f1b9 0f00 	cmp.w	r9, #0
 8017a6e:	f000 8100 	beq.w	8017c72 <HAL_SPI_TransmitReceive+0x248>
 8017a72:	2f00      	cmp	r7, #0
 8017a74:	f000 80ff 	beq.w	8017c76 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8017a78:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017a7c:	2b01      	cmp	r3, #1
 8017a7e:	f000 80fc 	beq.w	8017c7a <HAL_SPI_TransmitReceive+0x250>
 8017a82:	2301      	movs	r3, #1
 8017a84:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017a88:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	2b04      	cmp	r3, #4
 8017a90:	d002      	beq.n	8017a98 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8017a92:	2305      	movs	r3, #5
 8017a94:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017a9c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017aa0:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8017aa2:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017aa4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017aa8:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017aaa:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017aac:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017aae:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017ab0:	6823      	ldr	r3, [r4, #0]
 8017ab2:	681a      	ldr	r2, [r3, #0]
 8017ab4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017ab8:	d103      	bne.n	8017ac2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8017aba:	681a      	ldr	r2, [r3, #0]
 8017abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017ac0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017ac2:	68e3      	ldr	r3, [r4, #12]
 8017ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ac8:	d011      	beq.n	8017aee <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017aca:	6863      	ldr	r3, [r4, #4]
 8017acc:	b10b      	cbz	r3, 8017ad2 <HAL_SPI_TransmitReceive+0xa8>
 8017ace:	2f01      	cmp	r7, #1
 8017ad0:	d10b      	bne.n	8017aea <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017ad2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	7812      	ldrb	r2, [r2, #0]
 8017ad8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017ada:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017adc:	3301      	adds	r3, #1
 8017ade:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017ae0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	3b01      	subs	r3, #1
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017aea:	2701      	movs	r7, #1
 8017aec:	e071      	b.n	8017bd2 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017aee:	6863      	ldr	r3, [r4, #4]
 8017af0:	b10b      	cbz	r3, 8017af6 <HAL_SPI_TransmitReceive+0xcc>
 8017af2:	2f01      	cmp	r7, #1
 8017af4:	d10b      	bne.n	8017b0e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017af6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	8812      	ldrh	r2, [r2, #0]
 8017afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b00:	3302      	adds	r3, #2
 8017b02:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017b04:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	3b01      	subs	r3, #1
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017b0e:	2701      	movs	r7, #1
 8017b10:	e01b      	b.n	8017b4a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017b12:	6823      	ldr	r3, [r4, #0]
 8017b14:	689a      	ldr	r2, [r3, #8]
 8017b16:	f012 0f01 	tst.w	r2, #1
 8017b1a:	d00e      	beq.n	8017b3a <HAL_SPI_TransmitReceive+0x110>
 8017b1c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017b1e:	b292      	uxth	r2, r2
 8017b20:	b15a      	cbz	r2, 8017b3a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017b22:	68da      	ldr	r2, [r3, #12]
 8017b24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017b28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017b2a:	3302      	adds	r3, #2
 8017b2c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017b2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	3b01      	subs	r3, #1
 8017b34:	b29b      	uxth	r3, r3
 8017b36:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017b38:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017b3a:	f7fe fb91 	bl	8016260 <HAL_GetTick>
 8017b3e:	1b80      	subs	r0, r0, r6
 8017b40:	42a8      	cmp	r0, r5
 8017b42:	d302      	bcc.n	8017b4a <HAL_SPI_TransmitReceive+0x120>
 8017b44:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017b48:	d11e      	bne.n	8017b88 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017b4a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b4c:	b29b      	uxth	r3, r3
 8017b4e:	b91b      	cbnz	r3, 8017b58 <HAL_SPI_TransmitReceive+0x12e>
 8017b50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017b52:	b29b      	uxth	r3, r3
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d062      	beq.n	8017c1e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	689a      	ldr	r2, [r3, #8]
 8017b5c:	f012 0f02 	tst.w	r2, #2
 8017b60:	d0d7      	beq.n	8017b12 <HAL_SPI_TransmitReceive+0xe8>
 8017b62:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017b64:	b292      	uxth	r2, r2
 8017b66:	2a00      	cmp	r2, #0
 8017b68:	d0d3      	beq.n	8017b12 <HAL_SPI_TransmitReceive+0xe8>
 8017b6a:	2f00      	cmp	r7, #0
 8017b6c:	d0d1      	beq.n	8017b12 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017b6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b70:	8812      	ldrh	r2, [r2, #0]
 8017b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017b74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b76:	3302      	adds	r3, #2
 8017b78:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017b7a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b7c:	b29b      	uxth	r3, r3
 8017b7e:	3b01      	subs	r3, #1
 8017b80:	b29b      	uxth	r3, r3
 8017b82:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017b84:	2700      	movs	r7, #0
 8017b86:	e7c4      	b.n	8017b12 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8017b88:	2301      	movs	r3, #1
 8017b8a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017b8e:	2300      	movs	r3, #0
 8017b90:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017b94:	2003      	movs	r0, #3
 8017b96:	e063      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017b98:	6823      	ldr	r3, [r4, #0]
 8017b9a:	689a      	ldr	r2, [r3, #8]
 8017b9c:	f012 0f01 	tst.w	r2, #1
 8017ba0:	d00e      	beq.n	8017bc0 <HAL_SPI_TransmitReceive+0x196>
 8017ba2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017ba4:	b292      	uxth	r2, r2
 8017ba6:	b15a      	cbz	r2, 8017bc0 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017ba8:	68da      	ldr	r2, [r3, #12]
 8017baa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017bae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017bb4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	3b01      	subs	r3, #1
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017bbe:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017bc0:	f7fe fb4e 	bl	8016260 <HAL_GetTick>
 8017bc4:	1b83      	subs	r3, r0, r6
 8017bc6:	42ab      	cmp	r3, r5
 8017bc8:	d302      	bcc.n	8017bd0 <HAL_SPI_TransmitReceive+0x1a6>
 8017bca:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017bce:	d11e      	bne.n	8017c0e <HAL_SPI_TransmitReceive+0x1e4>
 8017bd0:	b1ed      	cbz	r5, 8017c0e <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017bd2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	b913      	cbnz	r3, 8017bde <HAL_SPI_TransmitReceive+0x1b4>
 8017bd8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	b1fb      	cbz	r3, 8017c1e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017bde:	6823      	ldr	r3, [r4, #0]
 8017be0:	689a      	ldr	r2, [r3, #8]
 8017be2:	f012 0f02 	tst.w	r2, #2
 8017be6:	d0d7      	beq.n	8017b98 <HAL_SPI_TransmitReceive+0x16e>
 8017be8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017bea:	b292      	uxth	r2, r2
 8017bec:	2a00      	cmp	r2, #0
 8017bee:	d0d3      	beq.n	8017b98 <HAL_SPI_TransmitReceive+0x16e>
 8017bf0:	2f00      	cmp	r7, #0
 8017bf2:	d0d1      	beq.n	8017b98 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8017bf4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017bf6:	7812      	ldrb	r2, [r2, #0]
 8017bf8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8017bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017c00:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	3b01      	subs	r3, #1
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017c0a:	2700      	movs	r7, #0
 8017c0c:	e7c4      	b.n	8017b98 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8017c0e:	2301      	movs	r3, #1
 8017c10:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017c14:	2300      	movs	r3, #0
 8017c16:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017c1a:	2003      	movs	r0, #3
 8017c1c:	e020      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017c1e:	4632      	mov	r2, r6
 8017c20:	4629      	mov	r1, r5
 8017c22:	4620      	mov	r0, r4
 8017c24:	f7ff fd3a 	bl	801769c <SPI_EndRxTxTransaction>
 8017c28:	b990      	cbnz	r0, 8017c50 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017c2a:	68a3      	ldr	r3, [r4, #8]
 8017c2c:	b933      	cbnz	r3, 8017c3c <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	68da      	ldr	r2, [r3, #12]
 8017c34:	9201      	str	r2, [sp, #4]
 8017c36:	689b      	ldr	r3, [r3, #8]
 8017c38:	9301      	str	r3, [sp, #4]
 8017c3a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017c42:	2300      	movs	r3, #0
 8017c44:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017c48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017c4a:	b14b      	cbz	r3, 8017c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017c4c:	2001      	movs	r0, #1
 8017c4e:	e007      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017c50:	2320      	movs	r3, #32
 8017c52:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8017c54:	2300      	movs	r3, #0
 8017c56:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8017c5a:	2001      	movs	r0, #1
 8017c5c:	e000      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8017c5e:	2002      	movs	r0, #2
}
 8017c60:	b003      	add	sp, #12
 8017c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8017c66:	2002      	movs	r0, #2
 8017c68:	e7fa      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
 8017c6a:	2002      	movs	r0, #2
 8017c6c:	e7f8      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017c6e:	2001      	movs	r0, #1
 8017c70:	e7f6      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
 8017c72:	2001      	movs	r0, #1
 8017c74:	e7f4      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
 8017c76:	2001      	movs	r0, #1
 8017c78:	e7f2      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8017c7a:	2002      	movs	r0, #2
 8017c7c:	e7f0      	b.n	8017c60 <HAL_SPI_TransmitReceive+0x236>

08017c7e <HAL_SPI_Receive>:
{
 8017c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c82:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8017c84:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8017c88:	b2f6      	uxtb	r6, r6
 8017c8a:	2e01      	cmp	r6, #1
 8017c8c:	f040 80b4 	bne.w	8017df8 <HAL_SPI_Receive+0x17a>
 8017c90:	4604      	mov	r4, r0
 8017c92:	4689      	mov	r9, r1
 8017c94:	4690      	mov	r8, r2
 8017c96:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017c98:	6843      	ldr	r3, [r0, #4]
 8017c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017c9e:	d101      	bne.n	8017ca4 <HAL_SPI_Receive+0x26>
 8017ca0:	6883      	ldr	r3, [r0, #8]
 8017ca2:	b393      	cbz	r3, 8017d0a <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8017ca4:	f7fe fadc 	bl	8016260 <HAL_GetTick>
 8017ca8:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017caa:	f1b9 0f00 	cmp.w	r9, #0
 8017cae:	f000 80a4 	beq.w	8017dfa <HAL_SPI_Receive+0x17c>
 8017cb2:	f1b8 0f00 	cmp.w	r8, #0
 8017cb6:	f000 80a0 	beq.w	8017dfa <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8017cba:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	f000 809f 	beq.w	8017e02 <HAL_SPI_Receive+0x184>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017cca:	2304      	movs	r3, #4
 8017ccc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017cd4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017cd8:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017cdc:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017ce0:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017ce2:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017ce4:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8017ce6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017ce8:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017cea:	68a3      	ldr	r3, [r4, #8]
 8017cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017cf0:	d015      	beq.n	8017d1e <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017cfa:	d103      	bne.n	8017d04 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8017cfc:	681a      	ldr	r2, [r3, #0]
 8017cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017d02:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017d04:	68e3      	ldr	r3, [r4, #12]
 8017d06:	b1f3      	cbz	r3, 8017d46 <HAL_SPI_Receive+0xc8>
 8017d08:	e043      	b.n	8017d92 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017d0a:	2304      	movs	r3, #4
 8017d0c:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017d10:	9500      	str	r5, [sp, #0]
 8017d12:	4613      	mov	r3, r2
 8017d14:	460a      	mov	r2, r1
 8017d16:	f7ff fe88 	bl	8017a2a <HAL_SPI_TransmitReceive>
 8017d1a:	4606      	mov	r6, r0
 8017d1c:	e06d      	b.n	8017dfa <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017d1e:	6822      	ldr	r2, [r4, #0]
 8017d20:	6813      	ldr	r3, [r2, #0]
 8017d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017d26:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8017d28:	6822      	ldr	r2, [r4, #0]
 8017d2a:	6813      	ldr	r3, [r2, #0]
 8017d2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017d30:	6013      	str	r3, [r2, #0]
 8017d32:	e7de      	b.n	8017cf2 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017d34:	f7fe fa94 	bl	8016260 <HAL_GetTick>
 8017d38:	1bc0      	subs	r0, r0, r7
 8017d3a:	42a8      	cmp	r0, r5
 8017d3c:	d302      	bcc.n	8017d44 <HAL_SPI_Receive+0xc6>
 8017d3e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017d42:	d115      	bne.n	8017d70 <HAL_SPI_Receive+0xf2>
 8017d44:	b1a5      	cbz	r5, 8017d70 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8017d46:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d042      	beq.n	8017dd4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	689a      	ldr	r2, [r3, #8]
 8017d52:	f012 0f01 	tst.w	r2, #1
 8017d56:	d0ed      	beq.n	8017d34 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017d58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017d5a:	7b1b      	ldrb	r3, [r3, #12]
 8017d5c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017d5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d60:	3301      	adds	r3, #1
 8017d62:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017d64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d66:	b29b      	uxth	r3, r3
 8017d68:	3b01      	subs	r3, #1
 8017d6a:	b29b      	uxth	r3, r3
 8017d6c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8017d6e:	e7ea      	b.n	8017d46 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8017d70:	2301      	movs	r3, #1
 8017d72:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017d76:	2300      	movs	r3, #0
 8017d78:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017d7c:	2603      	movs	r6, #3
 8017d7e:	e03c      	b.n	8017dfa <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017d80:	f7fe fa6e 	bl	8016260 <HAL_GetTick>
 8017d84:	1bc0      	subs	r0, r0, r7
 8017d86:	42a8      	cmp	r0, r5
 8017d88:	d302      	bcc.n	8017d90 <HAL_SPI_Receive+0x112>
 8017d8a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017d8e:	d119      	bne.n	8017dc4 <HAL_SPI_Receive+0x146>
 8017d90:	b1c5      	cbz	r5, 8017dc4 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8017d92:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	b1eb      	cbz	r3, 8017dd4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017d98:	6823      	ldr	r3, [r4, #0]
 8017d9a:	689a      	ldr	r2, [r3, #8]
 8017d9c:	f012 0f01 	tst.w	r2, #1
 8017da0:	d0ee      	beq.n	8017d80 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017da2:	68da      	ldr	r2, [r3, #12]
 8017da4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017da8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017daa:	3302      	adds	r3, #2
 8017dac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017dae:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8017db2:	fa1f fc8c 	uxth.w	ip, ip
 8017db6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017dba:	fa1f fc8c 	uxth.w	ip, ip
 8017dbe:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8017dc2:	e7e6      	b.n	8017d92 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017dca:	2300      	movs	r3, #0
 8017dcc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017dd0:	2603      	movs	r6, #3
 8017dd2:	e012      	b.n	8017dfa <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017dd4:	463a      	mov	r2, r7
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f7ff fc9f 	bl	801771c <SPI_EndRxTransaction>
 8017dde:	b108      	cbz	r0, 8017de4 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017de0:	2320      	movs	r3, #32
 8017de2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8017de4:	2301      	movs	r3, #1
 8017de6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017dea:	2300      	movs	r3, #0
 8017dec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017df0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017df2:	b913      	cbnz	r3, 8017dfa <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8017df4:	2600      	movs	r6, #0
 8017df6:	e000      	b.n	8017dfa <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8017df8:	2602      	movs	r6, #2
}
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	b003      	add	sp, #12
 8017dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017e02:	2602      	movs	r6, #2
 8017e04:	e7f9      	b.n	8017dfa <HAL_SPI_Receive+0x17c>

08017e06 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8017e06:	4770      	bx	lr

08017e08 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017e08:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d12f      	bne.n	8017e72 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017e12:	2302      	movs	r3, #2
 8017e14:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017e18:	6802      	ldr	r2, [r0, #0]
 8017e1a:	68d3      	ldr	r3, [r2, #12]
 8017e1c:	f043 0301 	orr.w	r3, r3, #1
 8017e20:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017e22:	6803      	ldr	r3, [r0, #0]
 8017e24:	4a15      	ldr	r2, [pc, #84]	@ (8017e7c <HAL_TIM_Base_Start_IT+0x74>)
 8017e26:	4293      	cmp	r3, r2
 8017e28:	d018      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
 8017e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017e2e:	d015      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
 8017e30:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d011      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
 8017e38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d00d      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
 8017e40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017e44:	4293      	cmp	r3, r2
 8017e46:	d009      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
 8017e48:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017e4c:	4293      	cmp	r3, r2
 8017e4e:	d005      	beq.n	8017e5c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	f042 0201 	orr.w	r2, r2, #1
 8017e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017e58:	2000      	movs	r0, #0
 8017e5a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017e5c:	689a      	ldr	r2, [r3, #8]
 8017e5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017e62:	2a06      	cmp	r2, #6
 8017e64:	d007      	beq.n	8017e76 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	f042 0201 	orr.w	r2, r2, #1
 8017e6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8017e6e:	2000      	movs	r0, #0
 8017e70:	4770      	bx	lr
    return HAL_ERROR;
 8017e72:	2001      	movs	r0, #1
 8017e74:	4770      	bx	lr
  return HAL_OK;
 8017e76:	2000      	movs	r0, #0
}
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop
 8017e7c:	40010000 	.word	0x40010000

08017e80 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017e80:	4770      	bx	lr

08017e82 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017e82:	4770      	bx	lr

08017e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017e84:	4770      	bx	lr

08017e86 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017e86:	4770      	bx	lr

08017e88 <HAL_TIM_IRQHandler>:
{
 8017e88:	b570      	push	{r4, r5, r6, lr}
 8017e8a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8017e8c:	6803      	ldr	r3, [r0, #0]
 8017e8e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017e90:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017e92:	f015 0f02 	tst.w	r5, #2
 8017e96:	d010      	beq.n	8017eba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017e98:	f016 0f02 	tst.w	r6, #2
 8017e9c:	d00d      	beq.n	8017eba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017e9e:	f06f 0202 	mvn.w	r2, #2
 8017ea2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017ea8:	6803      	ldr	r3, [r0, #0]
 8017eaa:	699b      	ldr	r3, [r3, #24]
 8017eac:	f013 0f03 	tst.w	r3, #3
 8017eb0:	d05e      	beq.n	8017f70 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8017eb2:	f7ff ffe6 	bl	8017e82 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017eba:	f015 0f04 	tst.w	r5, #4
 8017ebe:	d012      	beq.n	8017ee6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017ec0:	f016 0f04 	tst.w	r6, #4
 8017ec4:	d00f      	beq.n	8017ee6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	f06f 0204 	mvn.w	r2, #4
 8017ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017ece:	2302      	movs	r3, #2
 8017ed0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017ed2:	6823      	ldr	r3, [r4, #0]
 8017ed4:	699b      	ldr	r3, [r3, #24]
 8017ed6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017eda:	d04f      	beq.n	8017f7c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8017edc:	4620      	mov	r0, r4
 8017ede:	f7ff ffd0 	bl	8017e82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017ee6:	f015 0f08 	tst.w	r5, #8
 8017eea:	d012      	beq.n	8017f12 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017eec:	f016 0f08 	tst.w	r6, #8
 8017ef0:	d00f      	beq.n	8017f12 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	f06f 0208 	mvn.w	r2, #8
 8017ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017efa:	2304      	movs	r3, #4
 8017efc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017efe:	6823      	ldr	r3, [r4, #0]
 8017f00:	69db      	ldr	r3, [r3, #28]
 8017f02:	f013 0f03 	tst.w	r3, #3
 8017f06:	d040      	beq.n	8017f8a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8017f08:	4620      	mov	r0, r4
 8017f0a:	f7ff ffba 	bl	8017e82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017f12:	f015 0f10 	tst.w	r5, #16
 8017f16:	d012      	beq.n	8017f3e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017f18:	f016 0f10 	tst.w	r6, #16
 8017f1c:	d00f      	beq.n	8017f3e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017f1e:	6823      	ldr	r3, [r4, #0]
 8017f20:	f06f 0210 	mvn.w	r2, #16
 8017f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017f26:	2308      	movs	r3, #8
 8017f28:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017f2a:	6823      	ldr	r3, [r4, #0]
 8017f2c:	69db      	ldr	r3, [r3, #28]
 8017f2e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017f32:	d031      	beq.n	8017f98 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8017f34:	4620      	mov	r0, r4
 8017f36:	f7ff ffa4 	bl	8017e82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017f3e:	f015 0f01 	tst.w	r5, #1
 8017f42:	d002      	beq.n	8017f4a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017f44:	f016 0f01 	tst.w	r6, #1
 8017f48:	d12d      	bne.n	8017fa6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017f4a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8017f4e:	d002      	beq.n	8017f56 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017f50:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8017f54:	d12f      	bne.n	8017fb6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017f56:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8017f5a:	d002      	beq.n	8017f62 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017f5c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8017f60:	d131      	bne.n	8017fc6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017f62:	f015 0f20 	tst.w	r5, #32
 8017f66:	d002      	beq.n	8017f6e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017f68:	f016 0f20 	tst.w	r6, #32
 8017f6c:	d133      	bne.n	8017fd6 <HAL_TIM_IRQHandler+0x14e>
}
 8017f6e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f70:	f7ff ff86 	bl	8017e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f74:	4620      	mov	r0, r4
 8017f76:	f7ff ff85 	bl	8017e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f7a:	e79c      	b.n	8017eb6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	f7ff ff7f 	bl	8017e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f82:	4620      	mov	r0, r4
 8017f84:	f7ff ff7e 	bl	8017e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f88:	e7ab      	b.n	8017ee2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f7ff ff78 	bl	8017e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f90:	4620      	mov	r0, r4
 8017f92:	f7ff ff77 	bl	8017e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f96:	e7ba      	b.n	8017f0e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f7ff ff71 	bl	8017e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f7ff ff70 	bl	8017e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8017fa4:	e7c9      	b.n	8017f3a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017fa6:	6823      	ldr	r3, [r4, #0]
 8017fa8:	f06f 0201 	mvn.w	r2, #1
 8017fac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017fae:	4620      	mov	r0, r4
 8017fb0:	f7fa f852 	bl	8012058 <HAL_TIM_PeriodElapsedCallback>
 8017fb4:	e7c9      	b.n	8017f4a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017fb6:	6823      	ldr	r3, [r4, #0]
 8017fb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017fbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f000 f895 	bl	80180ee <HAL_TIMEx_BreakCallback>
 8017fc4:	e7c7      	b.n	8017f56 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017fcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f7ff ff59 	bl	8017e86 <HAL_TIM_TriggerCallback>
 8017fd4:	e7c5      	b.n	8017f62 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017fd6:	6823      	ldr	r3, [r4, #0]
 8017fd8:	f06f 0220 	mvn.w	r2, #32
 8017fdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8017fde:	4620      	mov	r0, r4
 8017fe0:	f000 f884 	bl	80180ec <HAL_TIMEx_CommutCallback>
}
 8017fe4:	e7c3      	b.n	8017f6e <HAL_TIM_IRQHandler+0xe6>
	...

08017fe8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017fe8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017fea:	4a29      	ldr	r2, [pc, #164]	@ (8018090 <TIM_Base_SetConfig+0xa8>)
 8017fec:	4290      	cmp	r0, r2
 8017fee:	d00e      	beq.n	801800e <TIM_Base_SetConfig+0x26>
 8017ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017ff4:	d00b      	beq.n	801800e <TIM_Base_SetConfig+0x26>
 8017ff6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017ffa:	4290      	cmp	r0, r2
 8017ffc:	d007      	beq.n	801800e <TIM_Base_SetConfig+0x26>
 8017ffe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018002:	4290      	cmp	r0, r2
 8018004:	d003      	beq.n	801800e <TIM_Base_SetConfig+0x26>
 8018006:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801800a:	4290      	cmp	r0, r2
 801800c:	d103      	bne.n	8018016 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801800e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8018012:	684a      	ldr	r2, [r1, #4]
 8018014:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018016:	4a1e      	ldr	r2, [pc, #120]	@ (8018090 <TIM_Base_SetConfig+0xa8>)
 8018018:	4290      	cmp	r0, r2
 801801a:	d01a      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 801801c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018020:	d017      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 8018022:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018026:	4290      	cmp	r0, r2
 8018028:	d013      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 801802a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801802e:	4290      	cmp	r0, r2
 8018030:	d00f      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 8018032:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018036:	4290      	cmp	r0, r2
 8018038:	d00b      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 801803a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801803e:	4290      	cmp	r0, r2
 8018040:	d007      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 8018042:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018046:	4290      	cmp	r0, r2
 8018048:	d003      	beq.n	8018052 <TIM_Base_SetConfig+0x6a>
 801804a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801804e:	4290      	cmp	r0, r2
 8018050:	d103      	bne.n	801805a <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018056:	68ca      	ldr	r2, [r1, #12]
 8018058:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801805a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801805e:	694a      	ldr	r2, [r1, #20]
 8018060:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8018062:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018064:	688b      	ldr	r3, [r1, #8]
 8018066:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018068:	680b      	ldr	r3, [r1, #0]
 801806a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801806c:	4b08      	ldr	r3, [pc, #32]	@ (8018090 <TIM_Base_SetConfig+0xa8>)
 801806e:	4298      	cmp	r0, r3
 8018070:	d00a      	beq.n	8018088 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018072:	2301      	movs	r3, #1
 8018074:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018076:	6903      	ldr	r3, [r0, #16]
 8018078:	f013 0f01 	tst.w	r3, #1
 801807c:	d003      	beq.n	8018086 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801807e:	6903      	ldr	r3, [r0, #16]
 8018080:	f023 0301 	bic.w	r3, r3, #1
 8018084:	6103      	str	r3, [r0, #16]
  }
}
 8018086:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8018088:	690b      	ldr	r3, [r1, #16]
 801808a:	6303      	str	r3, [r0, #48]	@ 0x30
 801808c:	e7f1      	b.n	8018072 <TIM_Base_SetConfig+0x8a>
 801808e:	bf00      	nop
 8018090:	40010000 	.word	0x40010000

08018094 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8018094:	b340      	cbz	r0, 80180e8 <HAL_TIM_Base_Init+0x54>
{
 8018096:	b510      	push	{r4, lr}
 8018098:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801809a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801809e:	b1f3      	cbz	r3, 80180de <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80180a0:	2302      	movs	r3, #2
 80180a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80180a6:	4621      	mov	r1, r4
 80180a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80180ac:	f7ff ff9c 	bl	8017fe8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80180b0:	2301      	movs	r3, #1
 80180b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80180b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80180ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80180be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80180c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80180c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80180ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80180ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80180d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80180d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80180da:	2000      	movs	r0, #0
}
 80180dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80180de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80180e2:	f7ff fe90 	bl	8017e06 <HAL_TIM_Base_MspInit>
 80180e6:	e7db      	b.n	80180a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80180e8:	2001      	movs	r0, #1
}
 80180ea:	4770      	bx	lr

080180ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80180ec:	4770      	bx	lr

080180ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80180ee:	4770      	bx	lr

080180f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80180f0:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80180f2:	b930      	cbnz	r0, 8018102 <SSD1306_Fill+0x12>
 80180f4:	2100      	movs	r1, #0
 80180f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80180fa:	4803      	ldr	r0, [pc, #12]	@ (8018108 <SSD1306_Fill+0x18>)
 80180fc:	f014 fc70 	bl	802c9e0 <memset>
}
 8018100:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018102:	21ff      	movs	r1, #255	@ 0xff
 8018104:	e7f7      	b.n	80180f6 <SSD1306_Fill+0x6>
 8018106:	bf00      	nop
 8018108:	20002968 	.word	0x20002968

0801810c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 801810c:	287f      	cmp	r0, #127	@ 0x7f
 801810e:	d825      	bhi.n	801815c <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8018110:	293f      	cmp	r1, #63	@ 0x3f
 8018112:	d823      	bhi.n	801815c <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018114:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8018116:	4b12      	ldr	r3, [pc, #72]	@ (8018160 <SSD1306_DrawPixel+0x54>)
 8018118:	791b      	ldrb	r3, [r3, #4]
 801811a:	b113      	cbz	r3, 8018122 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 801811c:	fab2 f282 	clz	r2, r2
 8018120:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018122:	2a01      	cmp	r2, #1
 8018124:	d00f      	beq.n	8018146 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8018126:	08cb      	lsrs	r3, r1, #3
 8018128:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801812c:	4c0d      	ldr	r4, [pc, #52]	@ (8018164 <SSD1306_DrawPixel+0x58>)
 801812e:	5c22      	ldrb	r2, [r4, r0]
 8018130:	f001 0107 	and.w	r1, r1, #7
 8018134:	2301      	movs	r3, #1
 8018136:	408b      	lsls	r3, r1
 8018138:	43db      	mvns	r3, r3
 801813a:	b25b      	sxtb	r3, r3
 801813c:	4013      	ands	r3, r2
 801813e:	5423      	strb	r3, [r4, r0]
	}
}
 8018140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018144:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8018146:	08cb      	lsrs	r3, r1, #3
 8018148:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801814c:	4c05      	ldr	r4, [pc, #20]	@ (8018164 <SSD1306_DrawPixel+0x58>)
 801814e:	5c23      	ldrb	r3, [r4, r0]
 8018150:	f001 0107 	and.w	r1, r1, #7
 8018154:	408a      	lsls	r2, r1
 8018156:	4313      	orrs	r3, r2
 8018158:	5423      	strb	r3, [r4, r0]
 801815a:	e7f1      	b.n	8018140 <SSD1306_DrawPixel+0x34>
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop
 8018160:	20002960 	.word	0x20002960
 8018164:	20002968 	.word	0x20002968

08018168 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8018168:	4b01      	ldr	r3, [pc, #4]	@ (8018170 <SSD1306_GotoXY+0x8>)
 801816a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 801816c:	8059      	strh	r1, [r3, #2]
}
 801816e:	4770      	bx	lr
 8018170:	20002960 	.word	0x20002960

08018174 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018178:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801817a:	4b24      	ldr	r3, [pc, #144]	@ (801820c <SSD1306_Putc+0x98>)
 801817c:	881b      	ldrh	r3, [r3, #0]
 801817e:	780a      	ldrb	r2, [r1, #0]
 8018180:	4413      	add	r3, r2
	if (
 8018182:	2b7f      	cmp	r3, #127	@ 0x7f
 8018184:	dc3e      	bgt.n	8018204 <SSD1306_Putc+0x90>
 8018186:	4681      	mov	r9, r0
 8018188:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801818a:	4b20      	ldr	r3, [pc, #128]	@ (801820c <SSD1306_Putc+0x98>)
 801818c:	885b      	ldrh	r3, [r3, #2]
 801818e:	784a      	ldrb	r2, [r1, #1]
 8018190:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018192:	2b3f      	cmp	r3, #63	@ 0x3f
 8018194:	dc38      	bgt.n	8018208 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8018196:	2600      	movs	r6, #0
 8018198:	e020      	b.n	80181dc <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801819a:	4b1c      	ldr	r3, [pc, #112]	@ (801820c <SSD1306_Putc+0x98>)
 801819c:	8818      	ldrh	r0, [r3, #0]
 801819e:	8859      	ldrh	r1, [r3, #2]
 80181a0:	4431      	add	r1, r6
 80181a2:	4420      	add	r0, r4
 80181a4:	fab8 f288 	clz	r2, r8
 80181a8:	0952      	lsrs	r2, r2, #5
 80181aa:	b289      	uxth	r1, r1
 80181ac:	b280      	uxth	r0, r0
 80181ae:	f7ff ffad 	bl	801810c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80181b2:	3401      	adds	r4, #1
 80181b4:	782b      	ldrb	r3, [r5, #0]
 80181b6:	42a3      	cmp	r3, r4
 80181b8:	d90f      	bls.n	80181da <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80181ba:	fa07 f304 	lsl.w	r3, r7, r4
 80181be:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80181c2:	d0ea      	beq.n	801819a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80181c4:	4b11      	ldr	r3, [pc, #68]	@ (801820c <SSD1306_Putc+0x98>)
 80181c6:	8818      	ldrh	r0, [r3, #0]
 80181c8:	8859      	ldrh	r1, [r3, #2]
 80181ca:	4431      	add	r1, r6
 80181cc:	4420      	add	r0, r4
 80181ce:	4642      	mov	r2, r8
 80181d0:	b289      	uxth	r1, r1
 80181d2:	b280      	uxth	r0, r0
 80181d4:	f7ff ff9a 	bl	801810c <SSD1306_DrawPixel>
 80181d8:	e7eb      	b.n	80181b2 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80181da:	3601      	adds	r6, #1
 80181dc:	786a      	ldrb	r2, [r5, #1]
 80181de:	42b2      	cmp	r2, r6
 80181e0:	d908      	bls.n	80181f4 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80181e2:	6869      	ldr	r1, [r5, #4]
 80181e4:	f1a9 0320 	sub.w	r3, r9, #32
 80181e8:	fb02 6303 	mla	r3, r2, r3, r6
 80181ec:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80181f0:	2400      	movs	r4, #0
 80181f2:	e7df      	b.n	80181b4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80181f4:	4a05      	ldr	r2, [pc, #20]	@ (801820c <SSD1306_Putc+0x98>)
 80181f6:	8813      	ldrh	r3, [r2, #0]
 80181f8:	7829      	ldrb	r1, [r5, #0]
 80181fa:	440b      	add	r3, r1
 80181fc:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80181fe:	4648      	mov	r0, r9
}
 8018200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8018204:	2000      	movs	r0, #0
 8018206:	e7fb      	b.n	8018200 <SSD1306_Putc+0x8c>
 8018208:	2000      	movs	r0, #0
 801820a:	e7f9      	b.n	8018200 <SSD1306_Putc+0x8c>
 801820c:	20002960 	.word	0x20002960

08018210 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018210:	b570      	push	{r4, r5, r6, lr}
 8018212:	4604      	mov	r4, r0
 8018214:	460e      	mov	r6, r1
 8018216:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8018218:	e000      	b.n	801821c <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801821a:	3401      	adds	r4, #1
	while (*str) {
 801821c:	7820      	ldrb	r0, [r4, #0]
 801821e:	b138      	cbz	r0, 8018230 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8018220:	462a      	mov	r2, r5
 8018222:	4631      	mov	r1, r6
 8018224:	f7ff ffa6 	bl	8018174 <SSD1306_Putc>
 8018228:	4603      	mov	r3, r0
 801822a:	7820      	ldrb	r0, [r4, #0]
 801822c:	4283      	cmp	r3, r0
 801822e:	d0f4      	beq.n	801821a <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8018230:	bd70      	pop	{r4, r5, r6, pc}
	...

08018234 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018234:	b500      	push	{lr}
 8018236:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8018238:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 801823c:	f04f 0c00 	mov.w	ip, #0
 8018240:	e009      	b.n	8018256 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8018242:	f10c 0e01 	add.w	lr, ip, #1
 8018246:	f812 100c 	ldrb.w	r1, [r2, ip]
 801824a:	f10d 0c08 	add.w	ip, sp, #8
 801824e:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8018252:	fa5f fc8e 	uxtb.w	ip, lr
 8018256:	459c      	cmp	ip, r3
 8018258:	d3f3      	bcc.n	8018242 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 801825a:	3301      	adds	r3, #1
 801825c:	220a      	movs	r2, #10
 801825e:	9200      	str	r2, [sp, #0]
 8018260:	b29b      	uxth	r3, r3
 8018262:	aa02      	add	r2, sp, #8
 8018264:	4601      	mov	r1, r0
 8018266:	4803      	ldr	r0, [pc, #12]	@ (8018274 <ssd1306_I2C_WriteMulti+0x40>)
 8018268:	f7fe fc9e 	bl	8016ba8 <HAL_I2C_Master_Transmit>
}
 801826c:	b043      	add	sp, #268	@ 0x10c
 801826e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018272:	bf00      	nop
 8018274:	200008c8 	.word	0x200008c8

08018278 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8018278:	b500      	push	{lr}
 801827a:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 801827c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8018280:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8018284:	230a      	movs	r3, #10
 8018286:	9300      	str	r3, [sp, #0]
 8018288:	2302      	movs	r3, #2
 801828a:	aa03      	add	r2, sp, #12
 801828c:	4601      	mov	r1, r0
 801828e:	4803      	ldr	r0, [pc, #12]	@ (801829c <ssd1306_I2C_Write+0x24>)
 8018290:	f7fe fc8a 	bl	8016ba8 <HAL_I2C_Master_Transmit>
}
 8018294:	b005      	add	sp, #20
 8018296:	f85d fb04 	ldr.w	pc, [sp], #4
 801829a:	bf00      	nop
 801829c:	200008c8 	.word	0x200008c8

080182a0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80182a0:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80182a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80182a6:	2201      	movs	r2, #1
 80182a8:	2178      	movs	r1, #120	@ 0x78
 80182aa:	4850      	ldr	r0, [pc, #320]	@ (80183ec <SSD1306_Init+0x14c>)
 80182ac:	f7fe fd38 	bl	8016d20 <HAL_I2C_IsDeviceReady>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	f040 8099 	bne.w	80183e8 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 80182b6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80182ba:	e000      	b.n	80182be <SSD1306_Init+0x1e>
		p--;
 80182bc:	3b01      	subs	r3, #1
	while(p>0)
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d1fc      	bne.n	80182bc <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80182c2:	22ae      	movs	r2, #174	@ 0xae
 80182c4:	2100      	movs	r1, #0
 80182c6:	2078      	movs	r0, #120	@ 0x78
 80182c8:	f7ff ffd6 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80182cc:	2220      	movs	r2, #32
 80182ce:	2100      	movs	r1, #0
 80182d0:	2078      	movs	r0, #120	@ 0x78
 80182d2:	f7ff ffd1 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80182d6:	2210      	movs	r2, #16
 80182d8:	2100      	movs	r1, #0
 80182da:	2078      	movs	r0, #120	@ 0x78
 80182dc:	f7ff ffcc 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80182e0:	22b0      	movs	r2, #176	@ 0xb0
 80182e2:	2100      	movs	r1, #0
 80182e4:	2078      	movs	r0, #120	@ 0x78
 80182e6:	f7ff ffc7 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80182ea:	22c8      	movs	r2, #200	@ 0xc8
 80182ec:	2100      	movs	r1, #0
 80182ee:	2078      	movs	r0, #120	@ 0x78
 80182f0:	f7ff ffc2 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80182f4:	2200      	movs	r2, #0
 80182f6:	4611      	mov	r1, r2
 80182f8:	2078      	movs	r0, #120	@ 0x78
 80182fa:	f7ff ffbd 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80182fe:	2210      	movs	r2, #16
 8018300:	2100      	movs	r1, #0
 8018302:	2078      	movs	r0, #120	@ 0x78
 8018304:	f7ff ffb8 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8018308:	2240      	movs	r2, #64	@ 0x40
 801830a:	2100      	movs	r1, #0
 801830c:	2078      	movs	r0, #120	@ 0x78
 801830e:	f7ff ffb3 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8018312:	2281      	movs	r2, #129	@ 0x81
 8018314:	2100      	movs	r1, #0
 8018316:	2078      	movs	r0, #120	@ 0x78
 8018318:	f7ff ffae 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 801831c:	22ff      	movs	r2, #255	@ 0xff
 801831e:	2100      	movs	r1, #0
 8018320:	2078      	movs	r0, #120	@ 0x78
 8018322:	f7ff ffa9 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8018326:	22a1      	movs	r2, #161	@ 0xa1
 8018328:	2100      	movs	r1, #0
 801832a:	2078      	movs	r0, #120	@ 0x78
 801832c:	f7ff ffa4 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018330:	22a6      	movs	r2, #166	@ 0xa6
 8018332:	2100      	movs	r1, #0
 8018334:	2078      	movs	r0, #120	@ 0x78
 8018336:	f7ff ff9f 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 801833a:	22a8      	movs	r2, #168	@ 0xa8
 801833c:	2100      	movs	r1, #0
 801833e:	2078      	movs	r0, #120	@ 0x78
 8018340:	f7ff ff9a 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8018344:	223f      	movs	r2, #63	@ 0x3f
 8018346:	2100      	movs	r1, #0
 8018348:	2078      	movs	r0, #120	@ 0x78
 801834a:	f7ff ff95 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 801834e:	22a4      	movs	r2, #164	@ 0xa4
 8018350:	2100      	movs	r1, #0
 8018352:	2078      	movs	r0, #120	@ 0x78
 8018354:	f7ff ff90 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8018358:	22d3      	movs	r2, #211	@ 0xd3
 801835a:	2100      	movs	r1, #0
 801835c:	2078      	movs	r0, #120	@ 0x78
 801835e:	f7ff ff8b 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8018362:	2200      	movs	r2, #0
 8018364:	4611      	mov	r1, r2
 8018366:	2078      	movs	r0, #120	@ 0x78
 8018368:	f7ff ff86 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 801836c:	22d5      	movs	r2, #213	@ 0xd5
 801836e:	2100      	movs	r1, #0
 8018370:	2078      	movs	r0, #120	@ 0x78
 8018372:	f7ff ff81 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018376:	22f0      	movs	r2, #240	@ 0xf0
 8018378:	2100      	movs	r1, #0
 801837a:	2078      	movs	r0, #120	@ 0x78
 801837c:	f7ff ff7c 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8018380:	22d9      	movs	r2, #217	@ 0xd9
 8018382:	2100      	movs	r1, #0
 8018384:	2078      	movs	r0, #120	@ 0x78
 8018386:	f7ff ff77 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 801838a:	2222      	movs	r2, #34	@ 0x22
 801838c:	2100      	movs	r1, #0
 801838e:	2078      	movs	r0, #120	@ 0x78
 8018390:	f7ff ff72 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018394:	22da      	movs	r2, #218	@ 0xda
 8018396:	2100      	movs	r1, #0
 8018398:	2078      	movs	r0, #120	@ 0x78
 801839a:	f7ff ff6d 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 801839e:	2212      	movs	r2, #18
 80183a0:	2100      	movs	r1, #0
 80183a2:	2078      	movs	r0, #120	@ 0x78
 80183a4:	f7ff ff68 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80183a8:	22db      	movs	r2, #219	@ 0xdb
 80183aa:	2100      	movs	r1, #0
 80183ac:	2078      	movs	r0, #120	@ 0x78
 80183ae:	f7ff ff63 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80183b2:	2220      	movs	r2, #32
 80183b4:	2100      	movs	r1, #0
 80183b6:	2078      	movs	r0, #120	@ 0x78
 80183b8:	f7ff ff5e 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80183bc:	228d      	movs	r2, #141	@ 0x8d
 80183be:	2100      	movs	r1, #0
 80183c0:	2078      	movs	r0, #120	@ 0x78
 80183c2:	f7ff ff59 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80183c6:	2214      	movs	r2, #20
 80183c8:	2100      	movs	r1, #0
 80183ca:	2078      	movs	r0, #120	@ 0x78
 80183cc:	f7ff ff54 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80183d0:	22af      	movs	r2, #175	@ 0xaf
 80183d2:	2100      	movs	r1, #0
 80183d4:	2078      	movs	r0, #120	@ 0x78
 80183d6:	f7ff ff4f 	bl	8018278 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 80183da:	4b05      	ldr	r3, [pc, #20]	@ (80183f0 <SSD1306_Init+0x150>)
 80183dc:	2200      	movs	r2, #0
 80183de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80183e0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80183e2:	2001      	movs	r0, #1
 80183e4:	7158      	strb	r0, [r3, #5]
}
 80183e6:	bd08      	pop	{r3, pc}
		return 0;
 80183e8:	2000      	movs	r0, #0
 80183ea:	e7fc      	b.n	80183e6 <SSD1306_Init+0x146>
 80183ec:	200008c8 	.word	0x200008c8
 80183f0:	20002960 	.word	0x20002960

080183f4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80183f4:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80183f6:	2400      	movs	r4, #0
 80183f8:	e01a      	b.n	8018430 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80183fa:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 80183fe:	b2d2      	uxtb	r2, r2
 8018400:	2100      	movs	r1, #0
 8018402:	2078      	movs	r0, #120	@ 0x78
 8018404:	f7ff ff38 	bl	8018278 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018408:	2200      	movs	r2, #0
 801840a:	4611      	mov	r1, r2
 801840c:	2078      	movs	r0, #120	@ 0x78
 801840e:	f7ff ff33 	bl	8018278 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018412:	2210      	movs	r2, #16
 8018414:	2100      	movs	r1, #0
 8018416:	2078      	movs	r0, #120	@ 0x78
 8018418:	f7ff ff2e 	bl	8018278 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 801841c:	2380      	movs	r3, #128	@ 0x80
 801841e:	4a06      	ldr	r2, [pc, #24]	@ (8018438 <SSD1306_UpdateScreen+0x44>)
 8018420:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8018424:	2140      	movs	r1, #64	@ 0x40
 8018426:	2078      	movs	r0, #120	@ 0x78
 8018428:	f7ff ff04 	bl	8018234 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 801842c:	3401      	adds	r4, #1
 801842e:	b2e4      	uxtb	r4, r4
 8018430:	2c07      	cmp	r4, #7
 8018432:	d9e2      	bls.n	80183fa <SSD1306_UpdateScreen+0x6>
}
 8018434:	bd10      	pop	{r4, pc}
 8018436:	bf00      	nop
 8018438:	20002968 	.word	0x20002968

0801843c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801843c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 801843e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018442:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018444:	f001 fd4a 	bl	8019edc <xTaskGetSchedulerState>
 8018448:	2801      	cmp	r0, #1
 801844a:	d100      	bne.n	801844e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 801844c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 801844e:	f002 f949 	bl	801a6e4 <xPortSysTickHandler>
}
 8018452:	e7fb      	b.n	801844c <SysTick_Handler+0x10>

08018454 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018454:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018458:	b92b      	cbnz	r3, 8018466 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 801845a:	4b06      	ldr	r3, [pc, #24]	@ (8018474 <osKernelInitialize+0x20>)
 801845c:	6818      	ldr	r0, [r3, #0]
 801845e:	b928      	cbnz	r0, 801846c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018460:	2201      	movs	r2, #1
 8018462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018464:	4770      	bx	lr
    stat = osErrorISR;
 8018466:	f06f 0005 	mvn.w	r0, #5
 801846a:	4770      	bx	lr
    } else {
      stat = osError;
 801846c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8018470:	4770      	bx	lr
 8018472:	bf00      	nop
 8018474:	20003668 	.word	0x20003668

08018478 <osKernelStart>:
 8018478:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 801847c:	b973      	cbnz	r3, 801849c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801847e:	4b0a      	ldr	r3, [pc, #40]	@ (80184a8 <osKernelStart+0x30>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	2b01      	cmp	r3, #1
 8018484:	d10d      	bne.n	80184a2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8018486:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018488:	2400      	movs	r4, #0
 801848a:	4b08      	ldr	r3, [pc, #32]	@ (80184ac <osKernelStart+0x34>)
 801848c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801848e:	4b06      	ldr	r3, [pc, #24]	@ (80184a8 <osKernelStart+0x30>)
 8018490:	2202      	movs	r2, #2
 8018492:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018494:	f001 fa6a 	bl	801996c <vTaskStartScheduler>
      stat = osOK;
 8018498:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 801849a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 801849c:	f06f 0005 	mvn.w	r0, #5
 80184a0:	4770      	bx	lr
      stat = osError;
 80184a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80184a6:	4770      	bx	lr
 80184a8:	20003668 	.word	0x20003668
 80184ac:	e000ed00 	.word	0xe000ed00

080184b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80184b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184b2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80184b4:	2400      	movs	r4, #0
 80184b6:	9405      	str	r4, [sp, #20]
 80184b8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80184bc:	bb7c      	cbnz	r4, 801851e <osThreadNew+0x6e>
 80184be:	b370      	cbz	r0, 801851e <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80184c0:	b32a      	cbz	r2, 801850e <osThreadNew+0x5e>
      if (attr->name != NULL) {
 80184c2:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80184c4:	6993      	ldr	r3, [r2, #24]
 80184c6:	b903      	cbnz	r3, 80184ca <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80184c8:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80184ca:	1e5c      	subs	r4, r3, #1
 80184cc:	2c37      	cmp	r4, #55	@ 0x37
 80184ce:	d84a      	bhi.n	8018566 <osThreadNew+0xb6>
 80184d0:	6854      	ldr	r4, [r2, #4]
 80184d2:	f014 0f01 	tst.w	r4, #1
 80184d6:	d148      	bne.n	801856a <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80184d8:	6956      	ldr	r6, [r2, #20]
 80184da:	b176      	cbz	r6, 80184fa <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80184dc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80184e0:	6894      	ldr	r4, [r2, #8]
 80184e2:	b134      	cbz	r4, 80184f2 <osThreadNew+0x42>
 80184e4:	68d7      	ldr	r7, [r2, #12]
 80184e6:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 80184ea:	d302      	bcc.n	80184f2 <osThreadNew+0x42>
 80184ec:	6917      	ldr	r7, [r2, #16]
 80184ee:	b107      	cbz	r7, 80184f2 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80184f0:	b9c6      	cbnz	r6, 8018524 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80184f2:	b12c      	cbz	r4, 8018500 <osThreadNew+0x50>
    mem  = -1;
 80184f4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80184f8:	e00e      	b.n	8018518 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80184fa:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80184fe:	e7ef      	b.n	80184e0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018500:	68d4      	ldr	r4, [r2, #12]
 8018502:	b98c      	cbnz	r4, 8018528 <osThreadNew+0x78>
 8018504:	6914      	ldr	r4, [r2, #16]
 8018506:	b194      	cbz	r4, 801852e <osThreadNew+0x7e>
    mem  = -1;
 8018508:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801850c:	e004      	b.n	8018518 <osThreadNew+0x68>
    name = NULL;
 801850e:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8018510:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8018512:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8018514:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8018518:	2c01      	cmp	r4, #1
 801851a:	d00a      	beq.n	8018532 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 801851c:	b1ac      	cbz	r4, 801854a <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801851e:	9805      	ldr	r0, [sp, #20]
}
 8018520:	b007      	add	sp, #28
 8018522:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8018524:	2401      	movs	r4, #1
 8018526:	e7f7      	b.n	8018518 <osThreadNew+0x68>
    mem  = -1;
 8018528:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801852c:	e7f4      	b.n	8018518 <osThreadNew+0x68>
          mem = 0;
 801852e:	2400      	movs	r4, #0
 8018530:	e7f2      	b.n	8018518 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018532:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018534:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018536:	9202      	str	r2, [sp, #8]
 8018538:	9401      	str	r4, [sp, #4]
 801853a:	9300      	str	r3, [sp, #0]
 801853c:	460b      	mov	r3, r1
 801853e:	4662      	mov	r2, ip
 8018540:	4629      	mov	r1, r5
 8018542:	f001 f9a3 	bl	801988c <xTaskCreateStatic>
 8018546:	9005      	str	r0, [sp, #20]
 8018548:	e7e9      	b.n	801851e <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801854a:	aa05      	add	r2, sp, #20
 801854c:	9201      	str	r2, [sp, #4]
 801854e:	9300      	str	r3, [sp, #0]
 8018550:	460b      	mov	r3, r1
 8018552:	fa1f f28c 	uxth.w	r2, ip
 8018556:	4629      	mov	r1, r5
 8018558:	f001 f9d5 	bl	8019906 <xTaskCreate>
 801855c:	2801      	cmp	r0, #1
 801855e:	d0de      	beq.n	801851e <osThreadNew+0x6e>
            hTask = NULL;
 8018560:	2300      	movs	r3, #0
 8018562:	9305      	str	r3, [sp, #20]
 8018564:	e7db      	b.n	801851e <osThreadNew+0x6e>
        return (NULL);
 8018566:	2000      	movs	r0, #0
 8018568:	e7da      	b.n	8018520 <osThreadNew+0x70>
 801856a:	2000      	movs	r0, #0
 801856c:	e7d8      	b.n	8018520 <osThreadNew+0x70>

0801856e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801856e:	b508      	push	{r3, lr}
 8018570:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8018574:	b933      	cbnz	r3, 8018584 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8018576:	b908      	cbnz	r0, 801857c <osDelay+0xe>
    stat = osOK;
 8018578:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801857a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 801857c:	f001 fb62 	bl	8019c44 <vTaskDelay>
    stat = osOK;
 8018580:	2000      	movs	r0, #0
 8018582:	e7fa      	b.n	801857a <osDelay+0xc>
    stat = osErrorISR;
 8018584:	f06f 0005 	mvn.w	r0, #5
 8018588:	e7f7      	b.n	801857a <osDelay+0xc>

0801858a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801858a:	b570      	push	{r4, r5, r6, lr}
 801858c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8018590:	2b00      	cmp	r3, #0
 8018592:	d13c      	bne.n	801860e <osMutexNew+0x84>
 8018594:	4604      	mov	r4, r0
    if (attr != NULL) {
 8018596:	b100      	cbz	r0, 801859a <osMutexNew+0x10>
      type = attr->attr_bits;
 8018598:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801859a:	f013 0601 	ands.w	r6, r3, #1
 801859e:	d000      	beq.n	80185a2 <osMutexNew+0x18>
      rmtx = 1U;
 80185a0:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80185a2:	f013 0f08 	tst.w	r3, #8
 80185a6:	d135      	bne.n	8018614 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 80185a8:	b344      	cbz	r4, 80185fc <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80185aa:	68a1      	ldr	r1, [r4, #8]
 80185ac:	b111      	cbz	r1, 80185b4 <osMutexNew+0x2a>
 80185ae:	68e3      	ldr	r3, [r4, #12]
 80185b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80185b2:	d818      	bhi.n	80185e6 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80185b4:	b191      	cbz	r1, 80185dc <osMutexNew+0x52>
      mem = -1;
 80185b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80185ba:	bb6b      	cbnz	r3, 8018618 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80185bc:	b316      	cbz	r6, 8018604 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80185be:	2004      	movs	r0, #4
 80185c0:	f000 fc04 	bl	8018dcc <xQueueCreateMutex>
 80185c4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80185c6:	b31d      	cbz	r5, 8018610 <osMutexNew+0x86>
        if (attr != NULL) {
 80185c8:	b104      	cbz	r4, 80185cc <osMutexNew+0x42>
          name = attr->name;
 80185ca:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80185cc:	4621      	mov	r1, r4
 80185ce:	4628      	mov	r0, r5
 80185d0:	f000 ff64 	bl	801949c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80185d4:	b1e6      	cbz	r6, 8018610 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80185d6:	f045 0501 	orr.w	r5, r5, #1
 80185da:	e019      	b.n	8018610 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80185dc:	68e3      	ldr	r3, [r4, #12]
 80185de:	b17b      	cbz	r3, 8018600 <osMutexNew+0x76>
      mem = -1;
 80185e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185e4:	e7e9      	b.n	80185ba <osMutexNew+0x30>
          if (rmtx != 0U) {
 80185e6:	b126      	cbz	r6, 80185f2 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80185e8:	2004      	movs	r0, #4
 80185ea:	f000 fbfa 	bl	8018de2 <xQueueCreateMutexStatic>
 80185ee:	4605      	mov	r5, r0
 80185f0:	e7e9      	b.n	80185c6 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80185f2:	2001      	movs	r0, #1
 80185f4:	f000 fbf5 	bl	8018de2 <xQueueCreateMutexStatic>
 80185f8:	4605      	mov	r5, r0
 80185fa:	e7e4      	b.n	80185c6 <osMutexNew+0x3c>
        mem = 0;
 80185fc:	2300      	movs	r3, #0
 80185fe:	e7dc      	b.n	80185ba <osMutexNew+0x30>
            mem = 0;
 8018600:	2300      	movs	r3, #0
 8018602:	e7da      	b.n	80185ba <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8018604:	2001      	movs	r0, #1
 8018606:	f000 fbe1 	bl	8018dcc <xQueueCreateMutex>
 801860a:	4605      	mov	r5, r0
 801860c:	e7db      	b.n	80185c6 <osMutexNew+0x3c>
  hMutex = NULL;
 801860e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8018610:	4628      	mov	r0, r5
 8018612:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8018614:	2500      	movs	r5, #0
 8018616:	e7fb      	b.n	8018610 <osMutexNew+0x86>
 8018618:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 801861a:	e7f9      	b.n	8018610 <osMutexNew+0x86>

0801861c <osMutexAcquire>:
 801861c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018620:	b9da      	cbnz	r2, 801865a <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018622:	b510      	push	{r4, lr}
 8018624:	4603      	mov	r3, r0
 8018626:	460c      	mov	r4, r1
 8018628:	f020 0001 	bic.w	r0, r0, #1
 801862c:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018630:	2b01      	cmp	r3, #1
 8018632:	d915      	bls.n	8018660 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018634:	b141      	cbz	r1, 8018648 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018636:	4621      	mov	r1, r4
 8018638:	f000 fdeb 	bl	8019212 <xQueueTakeMutexRecursive>
 801863c:	2801      	cmp	r0, #1
 801863e:	d012      	beq.n	8018666 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8018640:	b19c      	cbz	r4, 801866a <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8018642:	f06f 0001 	mvn.w	r0, #1
 8018646:	e00f      	b.n	8018668 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018648:	4621      	mov	r1, r4
 801864a:	f000 fd0f 	bl	801906c <xQueueSemaphoreTake>
 801864e:	2801      	cmp	r0, #1
 8018650:	d00e      	beq.n	8018670 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8018652:	b17c      	cbz	r4, 8018674 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8018654:	f06f 0001 	mvn.w	r0, #1
 8018658:	e006      	b.n	8018668 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 801865a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 801865e:	4770      	bx	lr
    stat = osErrorParameter;
 8018660:	f06f 0003 	mvn.w	r0, #3
 8018664:	e000      	b.n	8018668 <osMutexAcquire+0x4c>
  stat = osOK;
 8018666:	2000      	movs	r0, #0
}
 8018668:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 801866a:	f06f 0002 	mvn.w	r0, #2
 801866e:	e7fb      	b.n	8018668 <osMutexAcquire+0x4c>
  stat = osOK;
 8018670:	2000      	movs	r0, #0
 8018672:	e7f9      	b.n	8018668 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8018674:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018678:	e7f6      	b.n	8018668 <osMutexAcquire+0x4c>

0801867a <osMutexRelease>:
 801867a:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 801867e:	b9ba      	cbnz	r2, 80186b0 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018680:	b508      	push	{r3, lr}
 8018682:	4603      	mov	r3, r0
 8018684:	f020 0001 	bic.w	r0, r0, #1
 8018688:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 801868c:	2b01      	cmp	r3, #1
 801868e:	d912      	bls.n	80186b6 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018690:	b129      	cbz	r1, 801869e <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8018692:	f000 fbb5 	bl	8018e00 <xQueueGiveMutexRecursive>
 8018696:	2801      	cmp	r0, #1
 8018698:	d110      	bne.n	80186bc <osMutexRelease+0x42>
  stat = osOK;
 801869a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801869c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801869e:	2300      	movs	r3, #0
 80186a0:	461a      	mov	r2, r3
 80186a2:	4619      	mov	r1, r3
 80186a4:	f000 fac2 	bl	8018c2c <xQueueGenericSend>
 80186a8:	2801      	cmp	r0, #1
 80186aa:	d10a      	bne.n	80186c2 <osMutexRelease+0x48>
  stat = osOK;
 80186ac:	2000      	movs	r0, #0
 80186ae:	e7f5      	b.n	801869c <osMutexRelease+0x22>
    stat = osErrorISR;
 80186b0:	f06f 0005 	mvn.w	r0, #5
}
 80186b4:	4770      	bx	lr
    stat = osErrorParameter;
 80186b6:	f06f 0003 	mvn.w	r0, #3
 80186ba:	e7ef      	b.n	801869c <osMutexRelease+0x22>
        stat = osErrorResource;
 80186bc:	f06f 0002 	mvn.w	r0, #2
 80186c0:	e7ec      	b.n	801869c <osMutexRelease+0x22>
        stat = osErrorResource;
 80186c2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80186c6:	e7e9      	b.n	801869c <osMutexRelease+0x22>

080186c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80186c8:	b570      	push	{r4, r5, r6, lr}
 80186ca:	b082      	sub	sp, #8
 80186cc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d13a      	bne.n	801874a <osMessageQueueNew+0x82>
 80186d4:	4614      	mov	r4, r2
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d03b      	beq.n	8018752 <osMessageQueueNew+0x8a>
 80186da:	2900      	cmp	r1, #0
 80186dc:	d03b      	beq.n	8018756 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80186de:	b36a      	cbz	r2, 801873c <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80186e0:	6893      	ldr	r3, [r2, #8]
 80186e2:	b14b      	cbz	r3, 80186f8 <osMessageQueueNew+0x30>
 80186e4:	68d2      	ldr	r2, [r2, #12]
 80186e6:	2a4f      	cmp	r2, #79	@ 0x4f
 80186e8:	d906      	bls.n	80186f8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80186ea:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80186ec:	b122      	cbz	r2, 80186f8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80186ee:	fb01 f500 	mul.w	r5, r1, r0
 80186f2:	6966      	ldr	r6, [r4, #20]
 80186f4:	42ae      	cmp	r6, r5
 80186f6:	d21b      	bcs.n	8018730 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80186f8:	b173      	cbz	r3, 8018718 <osMessageQueueNew+0x50>
    mem = -1;
 80186fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80186fe:	bb63      	cbnz	r3, 801875a <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018700:	2200      	movs	r2, #0
 8018702:	f000 fa6f 	bl	8018be4 <xQueueGenericCreate>
 8018706:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018708:	b305      	cbz	r5, 801874c <osMessageQueueNew+0x84>
      if (attr != NULL) {
 801870a:	b104      	cbz	r4, 801870e <osMessageQueueNew+0x46>
        name = attr->name;
 801870c:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 801870e:	4621      	mov	r1, r4
 8018710:	4628      	mov	r0, r5
 8018712:	f000 fec3 	bl	801949c <vQueueAddToRegistry>
 8018716:	e019      	b.n	801874c <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018718:	68e3      	ldr	r3, [r4, #12]
 801871a:	b98b      	cbnz	r3, 8018740 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801871c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801871e:	b113      	cbz	r3, 8018726 <osMessageQueueNew+0x5e>
    mem = -1;
 8018720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018724:	e7eb      	b.n	80186fe <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018726:	6963      	ldr	r3, [r4, #20]
 8018728:	b16b      	cbz	r3, 8018746 <osMessageQueueNew+0x7e>
    mem = -1;
 801872a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801872e:	e7e6      	b.n	80186fe <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018730:	2500      	movs	r5, #0
 8018732:	9500      	str	r5, [sp, #0]
 8018734:	f000 fa0c 	bl	8018b50 <xQueueGenericCreateStatic>
 8018738:	4605      	mov	r5, r0
 801873a:	e7e5      	b.n	8018708 <osMessageQueueNew+0x40>
      mem = 0;
 801873c:	2300      	movs	r3, #0
 801873e:	e7de      	b.n	80186fe <osMessageQueueNew+0x36>
    mem = -1;
 8018740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018744:	e7db      	b.n	80186fe <osMessageQueueNew+0x36>
          mem = 0;
 8018746:	2300      	movs	r3, #0
 8018748:	e7d9      	b.n	80186fe <osMessageQueueNew+0x36>
  hQueue = NULL;
 801874a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 801874c:	4628      	mov	r0, r5
 801874e:	b002      	add	sp, #8
 8018750:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8018752:	2500      	movs	r5, #0
 8018754:	e7fa      	b.n	801874c <osMessageQueueNew+0x84>
 8018756:	2500      	movs	r5, #0
 8018758:	e7f8      	b.n	801874c <osMessageQueueNew+0x84>
 801875a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 801875c:	e7f6      	b.n	801874c <osMessageQueueNew+0x84>

0801875e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801875e:	b510      	push	{r4, lr}
 8018760:	b082      	sub	sp, #8
 8018762:	461c      	mov	r4, r3
 8018764:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018768:	b1c3      	cbz	r3, 801879c <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801876a:	b318      	cbz	r0, 80187b4 <osMessageQueuePut+0x56>
 801876c:	b329      	cbz	r1, 80187ba <osMessageQueuePut+0x5c>
 801876e:	bb3c      	cbnz	r4, 80187c0 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018770:	2300      	movs	r3, #0
 8018772:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018774:	aa01      	add	r2, sp, #4
 8018776:	f000 fb63 	bl	8018e40 <xQueueGenericSendFromISR>
 801877a:	2801      	cmp	r0, #1
 801877c:	d123      	bne.n	80187c6 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 801877e:	9801      	ldr	r0, [sp, #4]
 8018780:	b150      	cbz	r0, 8018798 <osMessageQueuePut+0x3a>
 8018782:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801878a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801878e:	f3bf 8f4f 	dsb	sy
 8018792:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018796:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018798:	b002      	add	sp, #8
 801879a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801879c:	b1b0      	cbz	r0, 80187cc <osMessageQueuePut+0x6e>
 801879e:	b1c1      	cbz	r1, 80187d2 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80187a0:	2300      	movs	r3, #0
 80187a2:	4622      	mov	r2, r4
 80187a4:	f000 fa42 	bl	8018c2c <xQueueGenericSend>
 80187a8:	2801      	cmp	r0, #1
 80187aa:	d015      	beq.n	80187d8 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 80187ac:	b1b4      	cbz	r4, 80187dc <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 80187ae:	f06f 0001 	mvn.w	r0, #1
 80187b2:	e7f1      	b.n	8018798 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80187b4:	f06f 0003 	mvn.w	r0, #3
 80187b8:	e7ee      	b.n	8018798 <osMessageQueuePut+0x3a>
 80187ba:	f06f 0003 	mvn.w	r0, #3
 80187be:	e7eb      	b.n	8018798 <osMessageQueuePut+0x3a>
 80187c0:	f06f 0003 	mvn.w	r0, #3
 80187c4:	e7e8      	b.n	8018798 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80187c6:	f06f 0002 	mvn.w	r0, #2
 80187ca:	e7e5      	b.n	8018798 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80187cc:	f06f 0003 	mvn.w	r0, #3
 80187d0:	e7e2      	b.n	8018798 <osMessageQueuePut+0x3a>
 80187d2:	f06f 0003 	mvn.w	r0, #3
 80187d6:	e7df      	b.n	8018798 <osMessageQueuePut+0x3a>
  stat = osOK;
 80187d8:	2000      	movs	r0, #0
 80187da:	e7dd      	b.n	8018798 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80187dc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80187e0:	e7da      	b.n	8018798 <osMessageQueuePut+0x3a>

080187e2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80187e2:	b510      	push	{r4, lr}
 80187e4:	b082      	sub	sp, #8
 80187e6:	461c      	mov	r4, r3
 80187e8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80187ec:	b1c3      	cbz	r3, 8018820 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80187ee:	b310      	cbz	r0, 8018836 <osMessageQueueGet+0x54>
 80187f0:	b321      	cbz	r1, 801883c <osMessageQueueGet+0x5a>
 80187f2:	bb34      	cbnz	r4, 8018842 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80187f4:	2300      	movs	r3, #0
 80187f6:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80187f8:	aa01      	add	r2, sp, #4
 80187fa:	f000 fdd9 	bl	80193b0 <xQueueReceiveFromISR>
 80187fe:	2801      	cmp	r0, #1
 8018800:	d122      	bne.n	8018848 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018802:	9801      	ldr	r0, [sp, #4]
 8018804:	b150      	cbz	r0, 801881c <osMessageQueueGet+0x3a>
 8018806:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801880e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018812:	f3bf 8f4f 	dsb	sy
 8018816:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801881a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801881c:	b002      	add	sp, #8
 801881e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018820:	b1a8      	cbz	r0, 801884e <osMessageQueueGet+0x6c>
 8018822:	b1b9      	cbz	r1, 8018854 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018824:	4622      	mov	r2, r4
 8018826:	f000 fb72 	bl	8018f0e <xQueueReceive>
 801882a:	2801      	cmp	r0, #1
 801882c:	d015      	beq.n	801885a <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 801882e:	b1b4      	cbz	r4, 801885e <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018830:	f06f 0001 	mvn.w	r0, #1
 8018834:	e7f2      	b.n	801881c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018836:	f06f 0003 	mvn.w	r0, #3
 801883a:	e7ef      	b.n	801881c <osMessageQueueGet+0x3a>
 801883c:	f06f 0003 	mvn.w	r0, #3
 8018840:	e7ec      	b.n	801881c <osMessageQueueGet+0x3a>
 8018842:	f06f 0003 	mvn.w	r0, #3
 8018846:	e7e9      	b.n	801881c <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018848:	f06f 0002 	mvn.w	r0, #2
 801884c:	e7e6      	b.n	801881c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 801884e:	f06f 0003 	mvn.w	r0, #3
 8018852:	e7e3      	b.n	801881c <osMessageQueueGet+0x3a>
 8018854:	f06f 0003 	mvn.w	r0, #3
 8018858:	e7e0      	b.n	801881c <osMessageQueueGet+0x3a>
  stat = osOK;
 801885a:	2000      	movs	r0, #0
 801885c:	e7de      	b.n	801881c <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 801885e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018862:	e7db      	b.n	801881c <osMessageQueueGet+0x3a>

08018864 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018864:	b148      	cbz	r0, 801887a <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018866:	b508      	push	{r3, lr}
 8018868:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 801886c:	b112      	cbz	r2, 8018874 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801886e:	f000 fe09 	bl	8019484 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8018872:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018874:	f000 fdf3 	bl	801945e <uxQueueMessagesWaiting>
 8018878:	e7fb      	b.n	8018872 <osMessageQueueGetCount+0xe>
    count = 0U;
 801887a:	2000      	movs	r0, #0
}
 801887c:	4770      	bx	lr

0801887e <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801887e:	b508      	push	{r3, lr}
 8018880:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018884:	b92b      	cbnz	r3, 8018892 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018886:	b138      	cbz	r0, 8018898 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018888:	2100      	movs	r1, #0
 801888a:	f000 f90e 	bl	8018aaa <xQueueGenericReset>
    stat = osOK;
 801888e:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018890:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8018892:	f06f 0005 	mvn.w	r0, #5
 8018896:	e7fb      	b.n	8018890 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018898:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801889c:	e7f8      	b.n	8018890 <osMessageQueueReset+0x12>
	...

080188a0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80188a0:	4b03      	ldr	r3, [pc, #12]	@ (80188b0 <vApplicationGetIdleTaskMemory+0x10>)
 80188a2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80188a4:	4b03      	ldr	r3, [pc, #12]	@ (80188b4 <vApplicationGetIdleTaskMemory+0x14>)
 80188a6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80188a8:	2380      	movs	r3, #128	@ 0x80
 80188aa:	6013      	str	r3, [r2, #0]
}
 80188ac:	4770      	bx	lr
 80188ae:	bf00      	nop
 80188b0:	200034e8 	.word	0x200034e8
 80188b4:	200032e8 	.word	0x200032e8

080188b8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80188b8:	4b03      	ldr	r3, [pc, #12]	@ (80188c8 <vApplicationGetTimerTaskMemory+0x10>)
 80188ba:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80188bc:	4b03      	ldr	r3, [pc, #12]	@ (80188cc <vApplicationGetTimerTaskMemory+0x14>)
 80188be:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80188c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80188c4:	6013      	str	r3, [r2, #0]
}
 80188c6:	4770      	bx	lr
 80188c8:	20003168 	.word	0x20003168
 80188cc:	20002d68 	.word	0x20002d68

080188d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188d0:	f100 0308 	add.w	r3, r0, #8
 80188d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80188d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80188da:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80188e0:	2300      	movs	r3, #0
 80188e2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80188e4:	4770      	bx	lr

080188e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80188e6:	2300      	movs	r3, #0
 80188e8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80188ea:	4770      	bx	lr

080188ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80188ec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80188ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80188f0:	689a      	ldr	r2, [r3, #8]
 80188f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80188f4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80188f6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80188f8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80188fa:	6803      	ldr	r3, [r0, #0]
 80188fc:	3301      	adds	r3, #1
 80188fe:	6003      	str	r3, [r0, #0]
}
 8018900:	4770      	bx	lr

08018902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018902:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018904:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018906:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801890a:	d011      	beq.n	8018930 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801890c:	f100 0308 	add.w	r3, r0, #8
 8018910:	461c      	mov	r4, r3
 8018912:	685b      	ldr	r3, [r3, #4]
 8018914:	681a      	ldr	r2, [r3, #0]
 8018916:	42aa      	cmp	r2, r5
 8018918:	d9fa      	bls.n	8018910 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801891a:	6863      	ldr	r3, [r4, #4]
 801891c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801891e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018920:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018922:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018924:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018926:	6803      	ldr	r3, [r0, #0]
 8018928:	3301      	adds	r3, #1
 801892a:	6003      	str	r3, [r0, #0]
}
 801892c:	bc30      	pop	{r4, r5}
 801892e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018930:	6904      	ldr	r4, [r0, #16]
 8018932:	e7f2      	b.n	801891a <vListInsert+0x18>

08018934 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018934:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018936:	6841      	ldr	r1, [r0, #4]
 8018938:	6882      	ldr	r2, [r0, #8]
 801893a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801893c:	6841      	ldr	r1, [r0, #4]
 801893e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018940:	685a      	ldr	r2, [r3, #4]
 8018942:	4282      	cmp	r2, r0
 8018944:	d006      	beq.n	8018954 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018946:	2200      	movs	r2, #0
 8018948:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801894a:	681a      	ldr	r2, [r3, #0]
 801894c:	3a01      	subs	r2, #1
 801894e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018950:	6818      	ldr	r0, [r3, #0]
}
 8018952:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018954:	6882      	ldr	r2, [r0, #8]
 8018956:	605a      	str	r2, [r3, #4]
 8018958:	e7f5      	b.n	8018946 <uxListRemove+0x12>

0801895a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801895a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801895c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801895e:	b118      	cbz	r0, 8018968 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018962:	6818      	ldr	r0, [r3, #0]
 8018964:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018968:	4770      	bx	lr

0801896a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801896a:	b510      	push	{r4, lr}
 801896c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801896e:	f001 fe49 	bl	801a604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018972:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018974:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018976:	429a      	cmp	r2, r3
 8018978:	d004      	beq.n	8018984 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801897a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801897c:	f001 fe64 	bl	801a648 <vPortExitCritical>

	return xReturn;
}
 8018980:	4620      	mov	r0, r4
 8018982:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018984:	2401      	movs	r4, #1
 8018986:	e7f9      	b.n	801897c <prvIsQueueFull+0x12>

08018988 <prvIsQueueEmpty>:
{
 8018988:	b510      	push	{r4, lr}
 801898a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801898c:	f001 fe3a 	bl	801a604 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018990:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018992:	b923      	cbnz	r3, 801899e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8018994:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8018996:	f001 fe57 	bl	801a648 <vPortExitCritical>
}
 801899a:	4620      	mov	r0, r4
 801899c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 801899e:	2400      	movs	r4, #0
 80189a0:	e7f9      	b.n	8018996 <prvIsQueueEmpty+0xe>

080189a2 <prvCopyDataToQueue>:
{
 80189a2:	b570      	push	{r4, r5, r6, lr}
 80189a4:	4604      	mov	r4, r0
 80189a6:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80189a8:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80189aa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80189ac:	b95a      	cbnz	r2, 80189c6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80189ae:	6803      	ldr	r3, [r0, #0]
 80189b0:	b11b      	cbz	r3, 80189ba <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80189b2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80189b4:	3601      	adds	r6, #1
 80189b6:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80189b8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80189ba:	6880      	ldr	r0, [r0, #8]
 80189bc:	f001 faea 	bl	8019f94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80189c0:	2300      	movs	r3, #0
 80189c2:	60a3      	str	r3, [r4, #8]
 80189c4:	e7f6      	b.n	80189b4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80189c6:	b96d      	cbnz	r5, 80189e4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80189c8:	6840      	ldr	r0, [r0, #4]
 80189ca:	f015 fa45 	bl	802de58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80189ce:	6863      	ldr	r3, [r4, #4]
 80189d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80189d2:	4413      	add	r3, r2
 80189d4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80189d6:	68a2      	ldr	r2, [r4, #8]
 80189d8:	4293      	cmp	r3, r2
 80189da:	d319      	bcc.n	8018a10 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80189dc:	6823      	ldr	r3, [r4, #0]
 80189de:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80189e0:	4628      	mov	r0, r5
 80189e2:	e7e7      	b.n	80189b4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80189e4:	68c0      	ldr	r0, [r0, #12]
 80189e6:	f015 fa37 	bl	802de58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80189ea:	68e3      	ldr	r3, [r4, #12]
 80189ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80189ee:	4251      	negs	r1, r2
 80189f0:	1a9b      	subs	r3, r3, r2
 80189f2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80189f4:	6822      	ldr	r2, [r4, #0]
 80189f6:	4293      	cmp	r3, r2
 80189f8:	d202      	bcs.n	8018a00 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80189fa:	68a3      	ldr	r3, [r4, #8]
 80189fc:	440b      	add	r3, r1
 80189fe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8018a00:	2d02      	cmp	r5, #2
 8018a02:	d001      	beq.n	8018a08 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8018a04:	2000      	movs	r0, #0
 8018a06:	e7d5      	b.n	80189b4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a08:	b126      	cbz	r6, 8018a14 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8018a0a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	e7d1      	b.n	80189b4 <prvCopyDataToQueue+0x12>
 8018a10:	4628      	mov	r0, r5
 8018a12:	e7cf      	b.n	80189b4 <prvCopyDataToQueue+0x12>
 8018a14:	2000      	movs	r0, #0
 8018a16:	e7cd      	b.n	80189b4 <prvCopyDataToQueue+0x12>

08018a18 <prvCopyDataFromQueue>:
{
 8018a18:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018a1a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018a1c:	b16a      	cbz	r2, 8018a3a <prvCopyDataFromQueue+0x22>
{
 8018a1e:	b510      	push	{r4, lr}
 8018a20:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018a22:	68d9      	ldr	r1, [r3, #12]
 8018a24:	4411      	add	r1, r2
 8018a26:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018a28:	689c      	ldr	r4, [r3, #8]
 8018a2a:	42a1      	cmp	r1, r4
 8018a2c:	d301      	bcc.n	8018a32 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018a2e:	6819      	ldr	r1, [r3, #0]
 8018a30:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018a32:	68d9      	ldr	r1, [r3, #12]
 8018a34:	f015 fa10 	bl	802de58 <memcpy>
}
 8018a38:	bd10      	pop	{r4, pc}
 8018a3a:	4770      	bx	lr

08018a3c <prvUnlockQueue>:
{
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8018a40:	f001 fde0 	bl	801a604 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8018a44:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8018a48:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018a4a:	e001      	b.n	8018a50 <prvUnlockQueue+0x14>
			--cTxLock;
 8018a4c:	3c01      	subs	r4, #1
 8018a4e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018a50:	2c00      	cmp	r4, #0
 8018a52:	dd0a      	ble.n	8018a6a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a54:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018a56:	b143      	cbz	r3, 8018a6a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a58:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018a5c:	f001 f99e 	bl	8019d9c <xTaskRemoveFromEventList>
 8018a60:	2800      	cmp	r0, #0
 8018a62:	d0f3      	beq.n	8018a4c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8018a64:	f001 fa2e 	bl	8019ec4 <vTaskMissedYield>
 8018a68:	e7f0      	b.n	8018a4c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8018a6a:	23ff      	movs	r3, #255	@ 0xff
 8018a6c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8018a70:	f001 fdea 	bl	801a648 <vPortExitCritical>
	taskENTER_CRITICAL();
 8018a74:	f001 fdc6 	bl	801a604 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018a78:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8018a7c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018a7e:	e001      	b.n	8018a84 <prvUnlockQueue+0x48>
				--cRxLock;
 8018a80:	3c01      	subs	r4, #1
 8018a82:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018a84:	2c00      	cmp	r4, #0
 8018a86:	dd0a      	ble.n	8018a9e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018a88:	692b      	ldr	r3, [r5, #16]
 8018a8a:	b143      	cbz	r3, 8018a9e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018a8c:	f105 0010 	add.w	r0, r5, #16
 8018a90:	f001 f984 	bl	8019d9c <xTaskRemoveFromEventList>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	d0f3      	beq.n	8018a80 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8018a98:	f001 fa14 	bl	8019ec4 <vTaskMissedYield>
 8018a9c:	e7f0      	b.n	8018a80 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8018a9e:	23ff      	movs	r3, #255	@ 0xff
 8018aa0:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8018aa4:	f001 fdd0 	bl	801a648 <vPortExitCritical>
}
 8018aa8:	bd38      	pop	{r3, r4, r5, pc}

08018aaa <xQueueGenericReset>:
{
 8018aaa:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018aac:	b1e0      	cbz	r0, 8018ae8 <xQueueGenericReset+0x3e>
 8018aae:	460d      	mov	r5, r1
 8018ab0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018ab2:	f001 fda7 	bl	801a604 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018ab6:	6823      	ldr	r3, [r4, #0]
 8018ab8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8018aba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018abc:	fb01 3002 	mla	r0, r1, r2, r3
 8018ac0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018ac6:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018ac8:	3a01      	subs	r2, #1
 8018aca:	fb02 3301 	mla	r3, r2, r1, r3
 8018ace:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018ad0:	23ff      	movs	r3, #255	@ 0xff
 8018ad2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018ad6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8018ada:	b9fd      	cbnz	r5, 8018b1c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018adc:	6923      	ldr	r3, [r4, #16]
 8018ade:	b963      	cbnz	r3, 8018afa <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8018ae0:	f001 fdb2 	bl	801a648 <vPortExitCritical>
}
 8018ae4:	2001      	movs	r0, #1
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018aec:	f383 8811 	msr	BASEPRI, r3
 8018af0:	f3bf 8f6f 	isb	sy
 8018af4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018af8:	e7fe      	b.n	8018af8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018afa:	f104 0010 	add.w	r0, r4, #16
 8018afe:	f001 f94d 	bl	8019d9c <xTaskRemoveFromEventList>
 8018b02:	2800      	cmp	r0, #0
 8018b04:	d0ec      	beq.n	8018ae0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8018b06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b12:	f3bf 8f4f 	dsb	sy
 8018b16:	f3bf 8f6f 	isb	sy
 8018b1a:	e7e1      	b.n	8018ae0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018b1c:	f104 0010 	add.w	r0, r4, #16
 8018b20:	f7ff fed6 	bl	80188d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018b24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018b28:	f7ff fed2 	bl	80188d0 <vListInitialise>
 8018b2c:	e7d8      	b.n	8018ae0 <xQueueGenericReset+0x36>

08018b2e <prvInitialiseNewQueue>:
{
 8018b2e:	b538      	push	{r3, r4, r5, lr}
 8018b30:	461d      	mov	r5, r3
 8018b32:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8018b34:	460b      	mov	r3, r1
 8018b36:	b949      	cbnz	r1, 8018b4c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018b38:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8018b3a:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018b3c:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018b3e:	2101      	movs	r1, #1
 8018b40:	4620      	mov	r0, r4
 8018b42:	f7ff ffb2 	bl	8018aaa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8018b46:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018b4c:	6022      	str	r2, [r4, #0]
 8018b4e:	e7f4      	b.n	8018b3a <prvInitialiseNewQueue+0xc>

08018b50 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018b50:	b940      	cbnz	r0, 8018b64 <xQueueGenericCreateStatic+0x14>
 8018b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b56:	f383 8811 	msr	BASEPRI, r3
 8018b5a:	f3bf 8f6f 	isb	sy
 8018b5e:	f3bf 8f4f 	dsb	sy
 8018b62:	e7fe      	b.n	8018b62 <xQueueGenericCreateStatic+0x12>
	{
 8018b64:	b510      	push	{r4, lr}
 8018b66:	b084      	sub	sp, #16
 8018b68:	461c      	mov	r4, r3
 8018b6a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8018b6c:	b153      	cbz	r3, 8018b84 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018b6e:	b192      	cbz	r2, 8018b96 <xQueueGenericCreateStatic+0x46>
 8018b70:	b989      	cbnz	r1, 8018b96 <xQueueGenericCreateStatic+0x46>
 8018b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b76:	f383 8811 	msr	BASEPRI, r3
 8018b7a:	f3bf 8f6f 	isb	sy
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	e7fe      	b.n	8018b82 <xQueueGenericCreateStatic+0x32>
 8018b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b88:	f383 8811 	msr	BASEPRI, r3
 8018b8c:	f3bf 8f6f 	isb	sy
 8018b90:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8018b94:	e7fe      	b.n	8018b94 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018b96:	b16a      	cbz	r2, 8018bb4 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018b98:	2350      	movs	r3, #80	@ 0x50
 8018b9a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018b9c:	9b03      	ldr	r3, [sp, #12]
 8018b9e:	2b50      	cmp	r3, #80	@ 0x50
 8018ba0:	d013      	beq.n	8018bca <xQueueGenericCreateStatic+0x7a>
 8018ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ba6:	f383 8811 	msr	BASEPRI, r3
 8018baa:	f3bf 8f6f 	isb	sy
 8018bae:	f3bf 8f4f 	dsb	sy
 8018bb2:	e7fe      	b.n	8018bb2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018bb4:	2900      	cmp	r1, #0
 8018bb6:	d0ef      	beq.n	8018b98 <xQueueGenericCreateStatic+0x48>
 8018bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	e7fe      	b.n	8018bc8 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018bca:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018bcc:	2301      	movs	r3, #1
 8018bce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018bd2:	9400      	str	r4, [sp, #0]
 8018bd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018bd8:	4660      	mov	r0, ip
 8018bda:	f7ff ffa8 	bl	8018b2e <prvInitialiseNewQueue>
	}
 8018bde:	4620      	mov	r0, r4
 8018be0:	b004      	add	sp, #16
 8018be2:	bd10      	pop	{r4, pc}

08018be4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018be4:	b940      	cbnz	r0, 8018bf8 <xQueueGenericCreate+0x14>
 8018be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bea:	f383 8811 	msr	BASEPRI, r3
 8018bee:	f3bf 8f6f 	isb	sy
 8018bf2:	f3bf 8f4f 	dsb	sy
 8018bf6:	e7fe      	b.n	8018bf6 <xQueueGenericCreate+0x12>
	{
 8018bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	460d      	mov	r5, r1
 8018bfe:	4614      	mov	r4, r2
 8018c00:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c02:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018c06:	3050      	adds	r0, #80	@ 0x50
 8018c08:	f001 feb6 	bl	801a978 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018c0c:	4607      	mov	r7, r0
 8018c0e:	b150      	cbz	r0, 8018c26 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018c10:	2300      	movs	r3, #0
 8018c12:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018c16:	9000      	str	r0, [sp, #0]
 8018c18:	4623      	mov	r3, r4
 8018c1a:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018c1e:	4629      	mov	r1, r5
 8018c20:	4630      	mov	r0, r6
 8018c22:	f7ff ff84 	bl	8018b2e <prvInitialiseNewQueue>
	}
 8018c26:	4638      	mov	r0, r7
 8018c28:	b003      	add	sp, #12
 8018c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c2c <xQueueGenericSend>:
{
 8018c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c2e:	b085      	sub	sp, #20
 8018c30:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018c32:	b188      	cbz	r0, 8018c58 <xQueueGenericSend+0x2c>
 8018c34:	460f      	mov	r7, r1
 8018c36:	461d      	mov	r5, r3
 8018c38:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c3a:	b1b1      	cbz	r1, 8018c6a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018c3c:	2d02      	cmp	r5, #2
 8018c3e:	d120      	bne.n	8018c82 <xQueueGenericSend+0x56>
 8018c40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018c42:	2b01      	cmp	r3, #1
 8018c44:	d01d      	beq.n	8018c82 <xQueueGenericSend+0x56>
 8018c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c4a:	f383 8811 	msr	BASEPRI, r3
 8018c4e:	f3bf 8f6f 	isb	sy
 8018c52:	f3bf 8f4f 	dsb	sy
 8018c56:	e7fe      	b.n	8018c56 <xQueueGenericSend+0x2a>
 8018c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c5c:	f383 8811 	msr	BASEPRI, r3
 8018c60:	f3bf 8f6f 	isb	sy
 8018c64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018c68:	e7fe      	b.n	8018c68 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c6a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d0e5      	beq.n	8018c3c <xQueueGenericSend+0x10>
 8018c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c74:	f383 8811 	msr	BASEPRI, r3
 8018c78:	f3bf 8f6f 	isb	sy
 8018c7c:	f3bf 8f4f 	dsb	sy
 8018c80:	e7fe      	b.n	8018c80 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018c82:	f001 f92b 	bl	8019edc <xTaskGetSchedulerState>
 8018c86:	4606      	mov	r6, r0
 8018c88:	b958      	cbnz	r0, 8018ca2 <xQueueGenericSend+0x76>
 8018c8a:	9b01      	ldr	r3, [sp, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d048      	beq.n	8018d22 <xQueueGenericSend+0xf6>
 8018c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c94:	f383 8811 	msr	BASEPRI, r3
 8018c98:	f3bf 8f6f 	isb	sy
 8018c9c:	f3bf 8f4f 	dsb	sy
 8018ca0:	e7fe      	b.n	8018ca0 <xQueueGenericSend+0x74>
 8018ca2:	2600      	movs	r6, #0
 8018ca4:	e03d      	b.n	8018d22 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018ca6:	462a      	mov	r2, r5
 8018ca8:	4639      	mov	r1, r7
 8018caa:	4620      	mov	r0, r4
 8018cac:	f7ff fe79 	bl	80189a2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018cb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018cb2:	b97b      	cbnz	r3, 8018cd4 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8018cb4:	b148      	cbz	r0, 8018cca <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8018cb6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018cc2:	f3bf 8f4f 	dsb	sy
 8018cc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8018cca:	f001 fcbd 	bl	801a648 <vPortExitCritical>
				return pdPASS;
 8018cce:	2001      	movs	r0, #1
}
 8018cd0:	b005      	add	sp, #20
 8018cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018cd4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018cd8:	f001 f860 	bl	8019d9c <xTaskRemoveFromEventList>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	d0f4      	beq.n	8018cca <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8018ce0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ce8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018cec:	f3bf 8f4f 	dsb	sy
 8018cf0:	f3bf 8f6f 	isb	sy
 8018cf4:	e7e9      	b.n	8018cca <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8018cf6:	f001 fca7 	bl	801a648 <vPortExitCritical>
					return errQUEUE_FULL;
 8018cfa:	2000      	movs	r0, #0
 8018cfc:	e7e8      	b.n	8018cd0 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018cfe:	a802      	add	r0, sp, #8
 8018d00:	f001 f892 	bl	8019e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018d04:	2601      	movs	r6, #1
 8018d06:	e019      	b.n	8018d3c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8018d08:	2300      	movs	r3, #0
 8018d0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018d0e:	e021      	b.n	8018d54 <xQueueGenericSend+0x128>
 8018d10:	2300      	movs	r3, #0
 8018d12:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018d16:	e023      	b.n	8018d60 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f7ff fe8f 	bl	8018a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018d1e:	f000 ff15 	bl	8019b4c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018d22:	f001 fc6f 	bl	801a604 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018d26:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018d28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	d3bb      	bcc.n	8018ca6 <xQueueGenericSend+0x7a>
 8018d2e:	2d02      	cmp	r5, #2
 8018d30:	d0b9      	beq.n	8018ca6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018d32:	9b01      	ldr	r3, [sp, #4]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d0de      	beq.n	8018cf6 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8018d38:	2e00      	cmp	r6, #0
 8018d3a:	d0e0      	beq.n	8018cfe <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8018d3c:	f001 fc84 	bl	801a648 <vPortExitCritical>
		vTaskSuspendAll();
 8018d40:	f000 fe6a 	bl	8019a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018d44:	f001 fc5e 	bl	801a604 <vPortEnterCritical>
 8018d48:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8018d4c:	b252      	sxtb	r2, r2
 8018d4e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018d52:	d0d9      	beq.n	8018d08 <xQueueGenericSend+0xdc>
 8018d54:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8018d58:	b252      	sxtb	r2, r2
 8018d5a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018d5e:	d0d7      	beq.n	8018d10 <xQueueGenericSend+0xe4>
 8018d60:	f001 fc72 	bl	801a648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018d64:	a901      	add	r1, sp, #4
 8018d66:	a802      	add	r0, sp, #8
 8018d68:	f001 f86a 	bl	8019e40 <xTaskCheckForTimeOut>
 8018d6c:	b9d8      	cbnz	r0, 8018da6 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f7ff fdfb 	bl	801896a <prvIsQueueFull>
 8018d74:	2800      	cmp	r0, #0
 8018d76:	d0cf      	beq.n	8018d18 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018d78:	9901      	ldr	r1, [sp, #4]
 8018d7a:	f104 0010 	add.w	r0, r4, #16
 8018d7e:	f000 ffd9 	bl	8019d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018d82:	4620      	mov	r0, r4
 8018d84:	f7ff fe5a 	bl	8018a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018d88:	f000 fee0 	bl	8019b4c <xTaskResumeAll>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	d1c8      	bne.n	8018d22 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8018d90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018d9c:	f3bf 8f4f 	dsb	sy
 8018da0:	f3bf 8f6f 	isb	sy
 8018da4:	e7bd      	b.n	8018d22 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8018da6:	4620      	mov	r0, r4
 8018da8:	f7ff fe48 	bl	8018a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018dac:	f000 fece 	bl	8019b4c <xTaskResumeAll>
			return errQUEUE_FULL;
 8018db0:	2000      	movs	r0, #0
 8018db2:	e78d      	b.n	8018cd0 <xQueueGenericSend+0xa4>

08018db4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8018db4:	b148      	cbz	r0, 8018dca <prvInitialiseMutex+0x16>
	{
 8018db6:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018db8:	2100      	movs	r1, #0
 8018dba:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018dbc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018dbe:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	460a      	mov	r2, r1
 8018dc4:	f7ff ff32 	bl	8018c2c <xQueueGenericSend>
	}
 8018dc8:	bd08      	pop	{r3, pc}
 8018dca:	4770      	bx	lr

08018dcc <xQueueCreateMutex>:
	{
 8018dcc:	b510      	push	{r4, lr}
 8018dce:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018dd0:	2100      	movs	r1, #0
 8018dd2:	2001      	movs	r0, #1
 8018dd4:	f7ff ff06 	bl	8018be4 <xQueueGenericCreate>
 8018dd8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018dda:	f7ff ffeb 	bl	8018db4 <prvInitialiseMutex>
	}
 8018dde:	4620      	mov	r0, r4
 8018de0:	bd10      	pop	{r4, pc}

08018de2 <xQueueCreateMutexStatic>:
	{
 8018de2:	b510      	push	{r4, lr}
 8018de4:	b082      	sub	sp, #8
 8018de6:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018de8:	9000      	str	r0, [sp, #0]
 8018dea:	2200      	movs	r2, #0
 8018dec:	4611      	mov	r1, r2
 8018dee:	2001      	movs	r0, #1
 8018df0:	f7ff feae 	bl	8018b50 <xQueueGenericCreateStatic>
 8018df4:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018df6:	f7ff ffdd 	bl	8018db4 <prvInitialiseMutex>
	}
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	b002      	add	sp, #8
 8018dfe:	bd10      	pop	{r4, pc}

08018e00 <xQueueGiveMutexRecursive>:
	{
 8018e00:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8018e02:	b138      	cbz	r0, 8018e14 <xQueueGiveMutexRecursive+0x14>
 8018e04:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018e06:	6885      	ldr	r5, [r0, #8]
 8018e08:	f001 f862 	bl	8019ed0 <xTaskGetCurrentTaskHandle>
 8018e0c:	4285      	cmp	r5, r0
 8018e0e:	d00a      	beq.n	8018e26 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8018e10:	2000      	movs	r0, #0
	}
 8018e12:	bd38      	pop	{r3, r4, r5, pc}
 8018e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e18:	f383 8811 	msr	BASEPRI, r3
 8018e1c:	f3bf 8f6f 	isb	sy
 8018e20:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8018e24:	e7fe      	b.n	8018e24 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8018e26:	68e3      	ldr	r3, [r4, #12]
 8018e28:	3b01      	subs	r3, #1
 8018e2a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018e2c:	b10b      	cbz	r3, 8018e32 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8018e2e:	2001      	movs	r0, #1
		return xReturn;
 8018e30:	e7ef      	b.n	8018e12 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018e32:	461a      	mov	r2, r3
 8018e34:	4619      	mov	r1, r3
 8018e36:	4620      	mov	r0, r4
 8018e38:	f7ff fef8 	bl	8018c2c <xQueueGenericSend>
			xReturn = pdPASS;
 8018e3c:	2001      	movs	r0, #1
 8018e3e:	e7e8      	b.n	8018e12 <xQueueGiveMutexRecursive+0x12>

08018e40 <xQueueGenericSendFromISR>:
{
 8018e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018e44:	b190      	cbz	r0, 8018e6c <xQueueGenericSendFromISR+0x2c>
 8018e46:	460f      	mov	r7, r1
 8018e48:	4616      	mov	r6, r2
 8018e4a:	461c      	mov	r4, r3
 8018e4c:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e4e:	b1b1      	cbz	r1, 8018e7e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018e50:	2c02      	cmp	r4, #2
 8018e52:	d120      	bne.n	8018e96 <xQueueGenericSendFromISR+0x56>
 8018e54:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d01d      	beq.n	8018e96 <xQueueGenericSendFromISR+0x56>
 8018e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e5e:	f383 8811 	msr	BASEPRI, r3
 8018e62:	f3bf 8f6f 	isb	sy
 8018e66:	f3bf 8f4f 	dsb	sy
 8018e6a:	e7fe      	b.n	8018e6a <xQueueGenericSendFromISR+0x2a>
 8018e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e70:	f383 8811 	msr	BASEPRI, r3
 8018e74:	f3bf 8f6f 	isb	sy
 8018e78:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018e7c:	e7fe      	b.n	8018e7c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e7e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d0e5      	beq.n	8018e50 <xQueueGenericSendFromISR+0x10>
 8018e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e88:	f383 8811 	msr	BASEPRI, r3
 8018e8c:	f3bf 8f6f 	isb	sy
 8018e90:	f3bf 8f4f 	dsb	sy
 8018e94:	e7fe      	b.n	8018e94 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018e96:	f001 fcdb 	bl	801a850 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018e9a:	f3ef 8811 	mrs	r8, BASEPRI
 8018e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ea2:	f383 8811 	msr	BASEPRI, r3
 8018ea6:	f3bf 8f6f 	isb	sy
 8018eaa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018eae:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018eb0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d306      	bcc.n	8018ec4 <xQueueGenericSendFromISR+0x84>
 8018eb6:	2c02      	cmp	r4, #2
 8018eb8:	d004      	beq.n	8018ec4 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8018eba:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018ebc:	f388 8811 	msr	BASEPRI, r8
}
 8018ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8018ec4:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8018ec8:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ecc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018ece:	4622      	mov	r2, r4
 8018ed0:	4639      	mov	r1, r7
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	f7ff fd65 	bl	80189a2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8018ed8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018edc:	d006      	beq.n	8018eec <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018ede:	f109 0301 	add.w	r3, r9, #1
 8018ee2:	b25b      	sxtb	r3, r3
 8018ee4:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8018ee8:	2001      	movs	r0, #1
 8018eea:	e7e7      	b.n	8018ebc <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018eec:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018eee:	b90b      	cbnz	r3, 8018ef4 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8018ef0:	2001      	movs	r0, #1
 8018ef2:	e7e3      	b.n	8018ebc <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ef4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018ef8:	f000 ff50 	bl	8019d9c <xTaskRemoveFromEventList>
 8018efc:	b118      	cbz	r0, 8018f06 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8018efe:	b126      	cbz	r6, 8018f0a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018f00:	2001      	movs	r0, #1
 8018f02:	6030      	str	r0, [r6, #0]
 8018f04:	e7da      	b.n	8018ebc <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8018f06:	2001      	movs	r0, #1
 8018f08:	e7d8      	b.n	8018ebc <xQueueGenericSendFromISR+0x7c>
 8018f0a:	2001      	movs	r0, #1
 8018f0c:	e7d6      	b.n	8018ebc <xQueueGenericSendFromISR+0x7c>

08018f0e <xQueueReceive>:
{
 8018f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f10:	b085      	sub	sp, #20
 8018f12:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018f14:	b190      	cbz	r0, 8018f3c <xQueueReceive+0x2e>
 8018f16:	460f      	mov	r7, r1
 8018f18:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f1a:	b1c1      	cbz	r1, 8018f4e <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f1c:	f000 ffde 	bl	8019edc <xTaskGetSchedulerState>
 8018f20:	4606      	mov	r6, r0
 8018f22:	bb00      	cbnz	r0, 8018f66 <xQueueReceive+0x58>
 8018f24:	9b01      	ldr	r3, [sp, #4]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d05e      	beq.n	8018fe8 <xQueueReceive+0xda>
	__asm volatile
 8018f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	e7fe      	b.n	8018f3a <xQueueReceive+0x2c>
 8018f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f40:	f383 8811 	msr	BASEPRI, r3
 8018f44:	f3bf 8f6f 	isb	sy
 8018f48:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018f4c:	e7fe      	b.n	8018f4c <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f4e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d0e3      	beq.n	8018f1c <xQueueReceive+0xe>
 8018f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f58:	f383 8811 	msr	BASEPRI, r3
 8018f5c:	f3bf 8f6f 	isb	sy
 8018f60:	f3bf 8f4f 	dsb	sy
 8018f64:	e7fe      	b.n	8018f64 <xQueueReceive+0x56>
 8018f66:	2600      	movs	r6, #0
 8018f68:	e03e      	b.n	8018fe8 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018f6a:	4639      	mov	r1, r7
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f7ff fd53 	bl	8018a18 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018f72:	3d01      	subs	r5, #1
 8018f74:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f76:	6923      	ldr	r3, [r4, #16]
 8018f78:	b923      	cbnz	r3, 8018f84 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8018f7a:	f001 fb65 	bl	801a648 <vPortExitCritical>
				return pdPASS;
 8018f7e:	2001      	movs	r0, #1
}
 8018f80:	b005      	add	sp, #20
 8018f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f84:	f104 0010 	add.w	r0, r4, #16
 8018f88:	f000 ff08 	bl	8019d9c <xTaskRemoveFromEventList>
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	d0f4      	beq.n	8018f7a <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018f90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f9c:	f3bf 8f4f 	dsb	sy
 8018fa0:	f3bf 8f6f 	isb	sy
 8018fa4:	e7e9      	b.n	8018f7a <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8018fa6:	f001 fb4f 	bl	801a648 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018faa:	2000      	movs	r0, #0
 8018fac:	e7e8      	b.n	8018f80 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018fae:	a802      	add	r0, sp, #8
 8018fb0:	f000 ff3a 	bl	8019e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018fb4:	2601      	movs	r6, #1
 8018fb6:	e021      	b.n	8018ffc <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8018fb8:	2300      	movs	r3, #0
 8018fba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018fbe:	e029      	b.n	8019014 <xQueueReceive+0x106>
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018fc6:	e02b      	b.n	8019020 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8018fc8:	4620      	mov	r0, r4
 8018fca:	f7ff fd37 	bl	8018a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018fce:	f000 fdbd 	bl	8019b4c <xTaskResumeAll>
 8018fd2:	e009      	b.n	8018fe8 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8018fd4:	4620      	mov	r0, r4
 8018fd6:	f7ff fd31 	bl	8018a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018fda:	f000 fdb7 	bl	8019b4c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f7ff fcd2 	bl	8018988 <prvIsQueueEmpty>
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	d13f      	bne.n	8019068 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8018fe8:	f001 fb0c 	bl	801a604 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fec:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018fee:	2d00      	cmp	r5, #0
 8018ff0:	d1bb      	bne.n	8018f6a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018ff2:	9b01      	ldr	r3, [sp, #4]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d0d6      	beq.n	8018fa6 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018ff8:	2e00      	cmp	r6, #0
 8018ffa:	d0d8      	beq.n	8018fae <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8018ffc:	f001 fb24 	bl	801a648 <vPortExitCritical>
		vTaskSuspendAll();
 8019000:	f000 fd0a 	bl	8019a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019004:	f001 fafe 	bl	801a604 <vPortEnterCritical>
 8019008:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801900c:	b25b      	sxtb	r3, r3
 801900e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019012:	d0d1      	beq.n	8018fb8 <xQueueReceive+0xaa>
 8019014:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019018:	b25b      	sxtb	r3, r3
 801901a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801901e:	d0cf      	beq.n	8018fc0 <xQueueReceive+0xb2>
 8019020:	f001 fb12 	bl	801a648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019024:	a901      	add	r1, sp, #4
 8019026:	a802      	add	r0, sp, #8
 8019028:	f000 ff0a 	bl	8019e40 <xTaskCheckForTimeOut>
 801902c:	2800      	cmp	r0, #0
 801902e:	d1d1      	bne.n	8018fd4 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019030:	4620      	mov	r0, r4
 8019032:	f7ff fca9 	bl	8018988 <prvIsQueueEmpty>
 8019036:	2800      	cmp	r0, #0
 8019038:	d0c6      	beq.n	8018fc8 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801903a:	9901      	ldr	r1, [sp, #4]
 801903c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019040:	f000 fe78 	bl	8019d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019044:	4620      	mov	r0, r4
 8019046:	f7ff fcf9 	bl	8018a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801904a:	f000 fd7f 	bl	8019b4c <xTaskResumeAll>
 801904e:	2800      	cmp	r0, #0
 8019050:	d1ca      	bne.n	8018fe8 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8019052:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801905a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801905e:	f3bf 8f4f 	dsb	sy
 8019062:	f3bf 8f6f 	isb	sy
 8019066:	e7bf      	b.n	8018fe8 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8019068:	2000      	movs	r0, #0
 801906a:	e789      	b.n	8018f80 <xQueueReceive+0x72>

0801906c <xQueueSemaphoreTake>:
{
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	b084      	sub	sp, #16
 8019070:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019072:	b158      	cbz	r0, 801908c <xQueueSemaphoreTake+0x20>
 8019074:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8019076:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019078:	b18b      	cbz	r3, 801909e <xQueueSemaphoreTake+0x32>
 801907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801907e:	f383 8811 	msr	BASEPRI, r3
 8019082:	f3bf 8f6f 	isb	sy
 8019086:	f3bf 8f4f 	dsb	sy
 801908a:	e7fe      	b.n	801908a <xQueueSemaphoreTake+0x1e>
 801908c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019090:	f383 8811 	msr	BASEPRI, r3
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801909c:	e7fe      	b.n	801909c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801909e:	f000 ff1d 	bl	8019edc <xTaskGetSchedulerState>
 80190a2:	4605      	mov	r5, r0
 80190a4:	b950      	cbnz	r0, 80190bc <xQueueSemaphoreTake+0x50>
 80190a6:	9b01      	ldr	r3, [sp, #4]
 80190a8:	b15b      	cbz	r3, 80190c2 <xQueueSemaphoreTake+0x56>
 80190aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ae:	f383 8811 	msr	BASEPRI, r3
 80190b2:	f3bf 8f6f 	isb	sy
 80190b6:	f3bf 8f4f 	dsb	sy
 80190ba:	e7fe      	b.n	80190ba <xQueueSemaphoreTake+0x4e>
 80190bc:	2600      	movs	r6, #0
 80190be:	4635      	mov	r5, r6
 80190c0:	e055      	b.n	801916e <xQueueSemaphoreTake+0x102>
 80190c2:	4606      	mov	r6, r0
 80190c4:	e053      	b.n	801916e <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80190c6:	3b01      	subs	r3, #1
 80190c8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80190ca:	6823      	ldr	r3, [r4, #0]
 80190cc:	b13b      	cbz	r3, 80190de <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190ce:	6923      	ldr	r3, [r4, #16]
 80190d0:	b94b      	cbnz	r3, 80190e6 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80190d2:	f001 fab9 	bl	801a648 <vPortExitCritical>
				return pdPASS;
 80190d6:	2601      	movs	r6, #1
}
 80190d8:	4630      	mov	r0, r6
 80190da:	b004      	add	sp, #16
 80190dc:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80190de:	f000 fff1 	bl	801a0c4 <pvTaskIncrementMutexHeldCount>
 80190e2:	60a0      	str	r0, [r4, #8]
 80190e4:	e7f3      	b.n	80190ce <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80190e6:	f104 0010 	add.w	r0, r4, #16
 80190ea:	f000 fe57 	bl	8019d9c <xTaskRemoveFromEventList>
 80190ee:	2800      	cmp	r0, #0
 80190f0:	d0ef      	beq.n	80190d2 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80190f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80190f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80190fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80190fe:	f3bf 8f4f 	dsb	sy
 8019102:	f3bf 8f6f 	isb	sy
 8019106:	e7e4      	b.n	80190d2 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019108:	b146      	cbz	r6, 801911c <xQueueSemaphoreTake+0xb0>
 801910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801910e:	f383 8811 	msr	BASEPRI, r3
 8019112:	f3bf 8f6f 	isb	sy
 8019116:	f3bf 8f4f 	dsb	sy
 801911a:	e7fe      	b.n	801911a <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 801911c:	f001 fa94 	bl	801a648 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019120:	e7da      	b.n	80190d8 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019122:	a802      	add	r0, sp, #8
 8019124:	f000 fe80 	bl	8019e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019128:	2501      	movs	r5, #1
 801912a:	e02a      	b.n	8019182 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 801912c:	2300      	movs	r3, #0
 801912e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019132:	e032      	b.n	801919a <xQueueSemaphoreTake+0x12e>
 8019134:	2300      	movs	r3, #0
 8019136:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801913a:	e034      	b.n	80191a6 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801913c:	f001 fa62 	bl	801a604 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019140:	68a0      	ldr	r0, [r4, #8]
 8019142:	f000 fedb 	bl	8019efc <xTaskPriorityInherit>
 8019146:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8019148:	f001 fa7e 	bl	801a648 <vPortExitCritical>
 801914c:	e03b      	b.n	80191c6 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801914e:	4620      	mov	r0, r4
 8019150:	f7ff fc74 	bl	8018a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019154:	f000 fcfa 	bl	8019b4c <xTaskResumeAll>
 8019158:	e009      	b.n	801916e <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801915a:	4620      	mov	r0, r4
 801915c:	f7ff fc6e 	bl	8018a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019160:	f000 fcf4 	bl	8019b4c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019164:	4620      	mov	r0, r4
 8019166:	f7ff fc0f 	bl	8018988 <prvIsQueueEmpty>
 801916a:	2800      	cmp	r0, #0
 801916c:	d142      	bne.n	80191f4 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801916e:	f001 fa49 	bl	801a604 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019172:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019174:	2b00      	cmp	r3, #0
 8019176:	d1a6      	bne.n	80190c6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019178:	9b01      	ldr	r3, [sp, #4]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d0c4      	beq.n	8019108 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801917e:	2d00      	cmp	r5, #0
 8019180:	d0cf      	beq.n	8019122 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8019182:	f001 fa61 	bl	801a648 <vPortExitCritical>
		vTaskSuspendAll();
 8019186:	f000 fc47 	bl	8019a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801918a:	f001 fa3b 	bl	801a604 <vPortEnterCritical>
 801918e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019192:	b25b      	sxtb	r3, r3
 8019194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019198:	d0c8      	beq.n	801912c <xQueueSemaphoreTake+0xc0>
 801919a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801919e:	b25b      	sxtb	r3, r3
 80191a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80191a4:	d0c6      	beq.n	8019134 <xQueueSemaphoreTake+0xc8>
 80191a6:	f001 fa4f 	bl	801a648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80191aa:	a901      	add	r1, sp, #4
 80191ac:	a802      	add	r0, sp, #8
 80191ae:	f000 fe47 	bl	8019e40 <xTaskCheckForTimeOut>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d1d1      	bne.n	801915a <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80191b6:	4620      	mov	r0, r4
 80191b8:	f7ff fbe6 	bl	8018988 <prvIsQueueEmpty>
 80191bc:	2800      	cmp	r0, #0
 80191be:	d0c6      	beq.n	801914e <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80191c0:	6823      	ldr	r3, [r4, #0]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d0ba      	beq.n	801913c <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80191c6:	9901      	ldr	r1, [sp, #4]
 80191c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80191cc:	f000 fdb2 	bl	8019d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80191d0:	4620      	mov	r0, r4
 80191d2:	f7ff fc33 	bl	8018a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80191d6:	f000 fcb9 	bl	8019b4c <xTaskResumeAll>
 80191da:	2800      	cmp	r0, #0
 80191dc:	d1c7      	bne.n	801916e <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80191de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80191e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80191ea:	f3bf 8f4f 	dsb	sy
 80191ee:	f3bf 8f6f 	isb	sy
 80191f2:	e7bc      	b.n	801916e <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80191f4:	b90e      	cbnz	r6, 80191fa <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80191f6:	2600      	movs	r6, #0
 80191f8:	e76e      	b.n	80190d8 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80191fa:	f001 fa03 	bl	801a604 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80191fe:	4620      	mov	r0, r4
 8019200:	f7ff fbab 	bl	801895a <prvGetDisinheritPriorityAfterTimeout>
 8019204:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019206:	68a0      	ldr	r0, [r4, #8]
 8019208:	f000 ff0c 	bl	801a024 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801920c:	f001 fa1c 	bl	801a648 <vPortExitCritical>
 8019210:	e7f1      	b.n	80191f6 <xQueueSemaphoreTake+0x18a>

08019212 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8019212:	b180      	cbz	r0, 8019236 <xQueueTakeMutexRecursive+0x24>
	{
 8019214:	b570      	push	{r4, r5, r6, lr}
 8019216:	460c      	mov	r4, r1
 8019218:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801921a:	6886      	ldr	r6, [r0, #8]
 801921c:	f000 fe58 	bl	8019ed0 <xTaskGetCurrentTaskHandle>
 8019220:	4286      	cmp	r6, r0
 8019222:	d011      	beq.n	8019248 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019224:	4621      	mov	r1, r4
 8019226:	4628      	mov	r0, r5
 8019228:	f7ff ff20 	bl	801906c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801922c:	b180      	cbz	r0, 8019250 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801922e:	68eb      	ldr	r3, [r5, #12]
 8019230:	3301      	adds	r3, #1
 8019232:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8019234:	e00c      	b.n	8019250 <xQueueTakeMutexRecursive+0x3e>
 8019236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801923a:	f383 8811 	msr	BASEPRI, r3
 801923e:	f3bf 8f6f 	isb	sy
 8019242:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019246:	e7fe      	b.n	8019246 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019248:	68eb      	ldr	r3, [r5, #12]
 801924a:	3301      	adds	r3, #1
 801924c:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 801924e:	2001      	movs	r0, #1
	}
 8019250:	bd70      	pop	{r4, r5, r6, pc}

08019252 <xQueuePeek>:
{
 8019252:	b570      	push	{r4, r5, r6, lr}
 8019254:	b084      	sub	sp, #16
 8019256:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019258:	b190      	cbz	r0, 8019280 <xQueuePeek+0x2e>
 801925a:	460e      	mov	r6, r1
 801925c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801925e:	b1c1      	cbz	r1, 8019292 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019260:	f000 fe3c 	bl	8019edc <xTaskGetSchedulerState>
 8019264:	4605      	mov	r5, r0
 8019266:	bb00      	cbnz	r0, 80192aa <xQueuePeek+0x58>
 8019268:	9b01      	ldr	r3, [sp, #4]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d05e      	beq.n	801932c <xQueuePeek+0xda>
 801926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019272:	f383 8811 	msr	BASEPRI, r3
 8019276:	f3bf 8f6f 	isb	sy
 801927a:	f3bf 8f4f 	dsb	sy
 801927e:	e7fe      	b.n	801927e <xQueuePeek+0x2c>
 8019280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019284:	f383 8811 	msr	BASEPRI, r3
 8019288:	f3bf 8f6f 	isb	sy
 801928c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019290:	e7fe      	b.n	8019290 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019292:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019294:	2b00      	cmp	r3, #0
 8019296:	d0e3      	beq.n	8019260 <xQueuePeek+0xe>
 8019298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801929c:	f383 8811 	msr	BASEPRI, r3
 80192a0:	f3bf 8f6f 	isb	sy
 80192a4:	f3bf 8f4f 	dsb	sy
 80192a8:	e7fe      	b.n	80192a8 <xQueuePeek+0x56>
 80192aa:	2500      	movs	r5, #0
 80192ac:	e03e      	b.n	801932c <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80192ae:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192b0:	4631      	mov	r1, r6
 80192b2:	4620      	mov	r0, r4
 80192b4:	f7ff fbb0 	bl	8018a18 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80192b8:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80192ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80192bc:	b923      	cbnz	r3, 80192c8 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 80192be:	f001 f9c3 	bl	801a648 <vPortExitCritical>
				return pdPASS;
 80192c2:	2001      	movs	r0, #1
}
 80192c4:	b004      	add	sp, #16
 80192c6:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80192c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80192cc:	f000 fd66 	bl	8019d9c <xTaskRemoveFromEventList>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	d0f4      	beq.n	80192be <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80192d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80192d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80192dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80192e0:	f3bf 8f4f 	dsb	sy
 80192e4:	f3bf 8f6f 	isb	sy
 80192e8:	e7e9      	b.n	80192be <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 80192ea:	f001 f9ad 	bl	801a648 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80192ee:	2000      	movs	r0, #0
 80192f0:	e7e8      	b.n	80192c4 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80192f2:	a802      	add	r0, sp, #8
 80192f4:	f000 fd98 	bl	8019e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80192f8:	2501      	movs	r5, #1
 80192fa:	e021      	b.n	8019340 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 80192fc:	2300      	movs	r3, #0
 80192fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019302:	e029      	b.n	8019358 <xQueuePeek+0x106>
 8019304:	2300      	movs	r3, #0
 8019306:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801930a:	e02b      	b.n	8019364 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 801930c:	4620      	mov	r0, r4
 801930e:	f7ff fb95 	bl	8018a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019312:	f000 fc1b 	bl	8019b4c <xTaskResumeAll>
 8019316:	e009      	b.n	801932c <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8019318:	4620      	mov	r0, r4
 801931a:	f7ff fb8f 	bl	8018a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801931e:	f000 fc15 	bl	8019b4c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019322:	4620      	mov	r0, r4
 8019324:	f7ff fb30 	bl	8018988 <prvIsQueueEmpty>
 8019328:	2800      	cmp	r0, #0
 801932a:	d13f      	bne.n	80193ac <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 801932c:	f001 f96a 	bl	801a604 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019330:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019332:	2b00      	cmp	r3, #0
 8019334:	d1bb      	bne.n	80192ae <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019336:	9b01      	ldr	r3, [sp, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d0d6      	beq.n	80192ea <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801933c:	2d00      	cmp	r5, #0
 801933e:	d0d8      	beq.n	80192f2 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8019340:	f001 f982 	bl	801a648 <vPortExitCritical>
		vTaskSuspendAll();
 8019344:	f000 fb68 	bl	8019a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019348:	f001 f95c 	bl	801a604 <vPortEnterCritical>
 801934c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019350:	b25b      	sxtb	r3, r3
 8019352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019356:	d0d1      	beq.n	80192fc <xQueuePeek+0xaa>
 8019358:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801935c:	b25b      	sxtb	r3, r3
 801935e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019362:	d0cf      	beq.n	8019304 <xQueuePeek+0xb2>
 8019364:	f001 f970 	bl	801a648 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019368:	a901      	add	r1, sp, #4
 801936a:	a802      	add	r0, sp, #8
 801936c:	f000 fd68 	bl	8019e40 <xTaskCheckForTimeOut>
 8019370:	2800      	cmp	r0, #0
 8019372:	d1d1      	bne.n	8019318 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019374:	4620      	mov	r0, r4
 8019376:	f7ff fb07 	bl	8018988 <prvIsQueueEmpty>
 801937a:	2800      	cmp	r0, #0
 801937c:	d0c6      	beq.n	801930c <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801937e:	9901      	ldr	r1, [sp, #4]
 8019380:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019384:	f000 fcd6 	bl	8019d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019388:	4620      	mov	r0, r4
 801938a:	f7ff fb57 	bl	8018a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801938e:	f000 fbdd 	bl	8019b4c <xTaskResumeAll>
 8019392:	2800      	cmp	r0, #0
 8019394:	d1ca      	bne.n	801932c <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8019396:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801939a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801939e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80193a2:	f3bf 8f4f 	dsb	sy
 80193a6:	f3bf 8f6f 	isb	sy
 80193aa:	e7bf      	b.n	801932c <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 80193ac:	2000      	movs	r0, #0
 80193ae:	e789      	b.n	80192c4 <xQueuePeek+0x72>

080193b0 <xQueueReceiveFromISR>:
{
 80193b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80193b4:	b1b0      	cbz	r0, 80193e4 <xQueueReceiveFromISR+0x34>
 80193b6:	460d      	mov	r5, r1
 80193b8:	4690      	mov	r8, r2
 80193ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80193bc:	b1d9      	cbz	r1, 80193f6 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80193be:	f001 fa47 	bl	801a850 <vPortValidateInterruptPriority>
	__asm volatile
 80193c2:	f3ef 8711 	mrs	r7, BASEPRI
 80193c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ca:	f383 8811 	msr	BASEPRI, r3
 80193ce:	f3bf 8f6f 	isb	sy
 80193d2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193d6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193d8:	b9ce      	cbnz	r6, 801940e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80193da:	2000      	movs	r0, #0
	__asm volatile
 80193dc:	f387 8811 	msr	BASEPRI, r7
}
 80193e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80193e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193e8:	f383 8811 	msr	BASEPRI, r3
 80193ec:	f3bf 8f6f 	isb	sy
 80193f0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80193f4:	e7fe      	b.n	80193f4 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80193f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d0e0      	beq.n	80193be <xQueueReceiveFromISR+0xe>
 80193fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019400:	f383 8811 	msr	BASEPRI, r3
 8019404:	f3bf 8f6f 	isb	sy
 8019408:	f3bf 8f4f 	dsb	sy
 801940c:	e7fe      	b.n	801940c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801940e:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8019412:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019416:	4629      	mov	r1, r5
 8019418:	4620      	mov	r0, r4
 801941a:	f7ff fafd 	bl	8018a18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801941e:	1e73      	subs	r3, r6, #1
 8019420:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8019422:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019426:	d006      	beq.n	8019436 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019428:	f109 0301 	add.w	r3, r9, #1
 801942c:	b25b      	sxtb	r3, r3
 801942e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8019432:	2001      	movs	r0, #1
 8019434:	e7d2      	b.n	80193dc <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019436:	6923      	ldr	r3, [r4, #16]
 8019438:	b90b      	cbnz	r3, 801943e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 801943a:	2001      	movs	r0, #1
 801943c:	e7ce      	b.n	80193dc <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801943e:	f104 0010 	add.w	r0, r4, #16
 8019442:	f000 fcab 	bl	8019d9c <xTaskRemoveFromEventList>
 8019446:	b130      	cbz	r0, 8019456 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8019448:	f1b8 0f00 	cmp.w	r8, #0
 801944c:	d005      	beq.n	801945a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801944e:	2001      	movs	r0, #1
 8019450:	f8c8 0000 	str.w	r0, [r8]
 8019454:	e7c2      	b.n	80193dc <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8019456:	2001      	movs	r0, #1
 8019458:	e7c0      	b.n	80193dc <xQueueReceiveFromISR+0x2c>
 801945a:	2001      	movs	r0, #1
 801945c:	e7be      	b.n	80193dc <xQueueReceiveFromISR+0x2c>

0801945e <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 801945e:	b140      	cbz	r0, 8019472 <uxQueueMessagesWaiting+0x14>
{
 8019460:	b510      	push	{r4, lr}
 8019462:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019464:	f001 f8ce 	bl	801a604 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019468:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 801946a:	f001 f8ed 	bl	801a648 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801946e:	4620      	mov	r0, r4
 8019470:	bd10      	pop	{r4, pc}
 8019472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019476:	f383 8811 	msr	BASEPRI, r3
 801947a:	f3bf 8f6f 	isb	sy
 801947e:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8019482:	e7fe      	b.n	8019482 <uxQueueMessagesWaiting+0x24>

08019484 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8019484:	b108      	cbz	r0, 801948a <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019486:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019488:	4770      	bx	lr
 801948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801948e:	f383 8811 	msr	BASEPRI, r3
 8019492:	f3bf 8f6f 	isb	sy
 8019496:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801949a:	e7fe      	b.n	801949a <uxQueueMessagesWaitingFromISR+0x16>

0801949c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801949c:	2300      	movs	r3, #0
 801949e:	2b07      	cmp	r3, #7
 80194a0:	d80c      	bhi.n	80194bc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80194a2:	4a07      	ldr	r2, [pc, #28]	@ (80194c0 <vQueueAddToRegistry+0x24>)
 80194a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80194a8:	b10a      	cbz	r2, 80194ae <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80194aa:	3301      	adds	r3, #1
 80194ac:	e7f7      	b.n	801949e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80194ae:	4a04      	ldr	r2, [pc, #16]	@ (80194c0 <vQueueAddToRegistry+0x24>)
 80194b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80194b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80194b8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80194ba:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	2000366c 	.word	0x2000366c

080194c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80194c4:	b570      	push	{r4, r5, r6, lr}
 80194c6:	4604      	mov	r4, r0
 80194c8:	460d      	mov	r5, r1
 80194ca:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80194cc:	f001 f89a 	bl	801a604 <vPortEnterCritical>
 80194d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80194d4:	b25b      	sxtb	r3, r3
 80194d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80194da:	d00d      	beq.n	80194f8 <vQueueWaitForMessageRestricted+0x34>
 80194dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80194e0:	b25b      	sxtb	r3, r3
 80194e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80194e6:	d00b      	beq.n	8019500 <vQueueWaitForMessageRestricted+0x3c>
 80194e8:	f001 f8ae 	bl	801a648 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80194ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80194ee:	b15b      	cbz	r3, 8019508 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80194f0:	4620      	mov	r0, r4
 80194f2:	f7ff faa3 	bl	8018a3c <prvUnlockQueue>
	}
 80194f6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80194f8:	2300      	movs	r3, #0
 80194fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80194fe:	e7ed      	b.n	80194dc <vQueueWaitForMessageRestricted+0x18>
 8019500:	2300      	movs	r3, #0
 8019502:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019506:	e7ef      	b.n	80194e8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019508:	4632      	mov	r2, r6
 801950a:	4629      	mov	r1, r5
 801950c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019510:	f000 fc28 	bl	8019d64 <vTaskPlaceOnEventListRestricted>
 8019514:	e7ec      	b.n	80194f0 <vQueueWaitForMessageRestricted+0x2c>
	...

08019518 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019518:	4b08      	ldr	r3, [pc, #32]	@ (801953c <prvResetNextTaskUnblockTime+0x24>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	b923      	cbnz	r3, 801952a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019520:	4b07      	ldr	r3, [pc, #28]	@ (8019540 <prvResetNextTaskUnblockTime+0x28>)
 8019522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019526:	601a      	str	r2, [r3, #0]
 8019528:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801952a:	4b04      	ldr	r3, [pc, #16]	@ (801953c <prvResetNextTaskUnblockTime+0x24>)
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	68db      	ldr	r3, [r3, #12]
 8019530:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019532:	685a      	ldr	r2, [r3, #4]
 8019534:	4b02      	ldr	r3, [pc, #8]	@ (8019540 <prvResetNextTaskUnblockTime+0x28>)
 8019536:	601a      	str	r2, [r3, #0]
	}
}
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	2000371c 	.word	0x2000371c
 8019540:	200036b4 	.word	0x200036b4

08019544 <prvInitialiseNewTask>:
{
 8019544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019548:	4680      	mov	r8, r0
 801954a:	460d      	mov	r5, r1
 801954c:	4617      	mov	r7, r2
 801954e:	4699      	mov	r9, r3
 8019550:	9e08      	ldr	r6, [sp, #32]
 8019552:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8019556:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019558:	0092      	lsls	r2, r2, #2
 801955a:	21a5      	movs	r1, #165	@ 0xa5
 801955c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801955e:	f013 fa3f 	bl	802c9e0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019562:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019564:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8019568:	3a01      	subs	r2, #1
 801956a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801956e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8019572:	2d00      	cmp	r5, #0
 8019574:	d061      	beq.n	801963a <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019576:	f04f 0c00 	mov.w	ip, #0
 801957a:	f1bc 0f0f 	cmp.w	ip, #15
 801957e:	d809      	bhi.n	8019594 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019580:	f815 300c 	ldrb.w	r3, [r5, ip]
 8019584:	eb04 020c 	add.w	r2, r4, ip
 8019588:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 801958c:	b113      	cbz	r3, 8019594 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801958e:	f10c 0c01 	add.w	ip, ip, #1
 8019592:	e7f2      	b.n	801957a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019594:	2300      	movs	r3, #0
 8019596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801959a:	2e37      	cmp	r6, #55	@ 0x37
 801959c:	d900      	bls.n	80195a0 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801959e:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80195a0:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80195a2:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80195a4:	2500      	movs	r5, #0
 80195a6:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80195a8:	1d20      	adds	r0, r4, #4
 80195aa:	f7ff f99c 	bl	80188e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80195ae:	f104 0018 	add.w	r0, r4, #24
 80195b2:	f7ff f998 	bl	80188e6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80195b6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80195b8:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80195bc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80195be:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80195c0:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80195c4:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80195c8:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80195cc:	4629      	mov	r1, r5
 80195ce:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80195d2:	f013 fa05 	bl	802c9e0 <memset>
 80195d6:	4b1b      	ldr	r3, [pc, #108]	@ (8019644 <prvInitialiseNewTask+0x100>)
 80195d8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80195da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80195de:	6622      	str	r2, [r4, #96]	@ 0x60
 80195e0:	33d0      	adds	r3, #208	@ 0xd0
 80195e2:	6663      	str	r3, [r4, #100]	@ 0x64
 80195e4:	2201      	movs	r2, #1
 80195e6:	2300      	movs	r3, #0
 80195e8:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 80195ec:	f243 330e 	movw	r3, #13070	@ 0x330e
 80195f0:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 80195f4:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 80195f8:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 80195fc:	f241 2334 	movw	r3, #4660	@ 0x1234
 8019600:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8019604:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8019608:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 801960c:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8019610:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8019614:	2305      	movs	r3, #5
 8019616:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 801961a:	230b      	movs	r3, #11
 801961c:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019620:	464a      	mov	r2, r9
 8019622:	4641      	mov	r1, r8
 8019624:	4638      	mov	r0, r7
 8019626:	f000 ffc3 	bl	801a5b0 <pxPortInitialiseStack>
 801962a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801962c:	f1ba 0f00 	cmp.w	sl, #0
 8019630:	d001      	beq.n	8019636 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019632:	f8ca 4000 	str.w	r4, [sl]
}
 8019636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801963a:	2300      	movs	r3, #0
 801963c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8019640:	e7ab      	b.n	801959a <prvInitialiseNewTask+0x56>
 8019642:	bf00      	nop
 8019644:	20019ee4 	.word	0x20019ee4

08019648 <prvInitialiseTaskLists>:
{
 8019648:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801964a:	2400      	movs	r4, #0
 801964c:	e007      	b.n	801965e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801964e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8019652:	0093      	lsls	r3, r2, #2
 8019654:	480e      	ldr	r0, [pc, #56]	@ (8019690 <prvInitialiseTaskLists+0x48>)
 8019656:	4418      	add	r0, r3
 8019658:	f7ff f93a 	bl	80188d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801965c:	3401      	adds	r4, #1
 801965e:	2c37      	cmp	r4, #55	@ 0x37
 8019660:	d9f5      	bls.n	801964e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8019662:	4d0c      	ldr	r5, [pc, #48]	@ (8019694 <prvInitialiseTaskLists+0x4c>)
 8019664:	4628      	mov	r0, r5
 8019666:	f7ff f933 	bl	80188d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801966a:	4c0b      	ldr	r4, [pc, #44]	@ (8019698 <prvInitialiseTaskLists+0x50>)
 801966c:	4620      	mov	r0, r4
 801966e:	f7ff f92f 	bl	80188d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019672:	480a      	ldr	r0, [pc, #40]	@ (801969c <prvInitialiseTaskLists+0x54>)
 8019674:	f7ff f92c 	bl	80188d0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019678:	4809      	ldr	r0, [pc, #36]	@ (80196a0 <prvInitialiseTaskLists+0x58>)
 801967a:	f7ff f929 	bl	80188d0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801967e:	4809      	ldr	r0, [pc, #36]	@ (80196a4 <prvInitialiseTaskLists+0x5c>)
 8019680:	f7ff f926 	bl	80188d0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8019684:	4b08      	ldr	r3, [pc, #32]	@ (80196a8 <prvInitialiseTaskLists+0x60>)
 8019686:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019688:	4b08      	ldr	r3, [pc, #32]	@ (80196ac <prvInitialiseTaskLists+0x64>)
 801968a:	601c      	str	r4, [r3, #0]
}
 801968c:	bd38      	pop	{r3, r4, r5, pc}
 801968e:	bf00      	nop
 8019690:	20003748 	.word	0x20003748
 8019694:	20003734 	.word	0x20003734
 8019698:	20003720 	.word	0x20003720
 801969c:	20003704 	.word	0x20003704
 80196a0:	200036f0 	.word	0x200036f0
 80196a4:	200036d8 	.word	0x200036d8
 80196a8:	2000371c 	.word	0x2000371c
 80196ac:	20003718 	.word	0x20003718

080196b0 <prvAddNewTaskToReadyList>:
{
 80196b0:	b510      	push	{r4, lr}
 80196b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80196b4:	f000 ffa6 	bl	801a604 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80196b8:	4a22      	ldr	r2, [pc, #136]	@ (8019744 <prvAddNewTaskToReadyList+0x94>)
 80196ba:	6813      	ldr	r3, [r2, #0]
 80196bc:	3301      	adds	r3, #1
 80196be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80196c0:	4b21      	ldr	r3, [pc, #132]	@ (8019748 <prvAddNewTaskToReadyList+0x98>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	b15b      	cbz	r3, 80196de <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80196c6:	4b21      	ldr	r3, [pc, #132]	@ (801974c <prvAddNewTaskToReadyList+0x9c>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	b96b      	cbnz	r3, 80196e8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80196cc:	4b1e      	ldr	r3, [pc, #120]	@ (8019748 <prvAddNewTaskToReadyList+0x98>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d807      	bhi.n	80196e8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80196d8:	4b1b      	ldr	r3, [pc, #108]	@ (8019748 <prvAddNewTaskToReadyList+0x98>)
 80196da:	601c      	str	r4, [r3, #0]
 80196dc:	e004      	b.n	80196e8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80196de:	4b1a      	ldr	r3, [pc, #104]	@ (8019748 <prvAddNewTaskToReadyList+0x98>)
 80196e0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80196e2:	6813      	ldr	r3, [r2, #0]
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d029      	beq.n	801973c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80196e8:	4a19      	ldr	r2, [pc, #100]	@ (8019750 <prvAddNewTaskToReadyList+0xa0>)
 80196ea:	6813      	ldr	r3, [r2, #0]
 80196ec:	3301      	adds	r3, #1
 80196ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80196f0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80196f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80196f4:	4b17      	ldr	r3, [pc, #92]	@ (8019754 <prvAddNewTaskToReadyList+0xa4>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4298      	cmp	r0, r3
 80196fa:	d901      	bls.n	8019700 <prvAddNewTaskToReadyList+0x50>
 80196fc:	4b15      	ldr	r3, [pc, #84]	@ (8019754 <prvAddNewTaskToReadyList+0xa4>)
 80196fe:	6018      	str	r0, [r3, #0]
 8019700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019704:	1d21      	adds	r1, r4, #4
 8019706:	4b14      	ldr	r3, [pc, #80]	@ (8019758 <prvAddNewTaskToReadyList+0xa8>)
 8019708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801970c:	f7ff f8ee 	bl	80188ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8019710:	f000 ff9a 	bl	801a648 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019714:	4b0d      	ldr	r3, [pc, #52]	@ (801974c <prvAddNewTaskToReadyList+0x9c>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	b17b      	cbz	r3, 801973a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801971a:	4b0b      	ldr	r3, [pc, #44]	@ (8019748 <prvAddNewTaskToReadyList+0x98>)
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019720:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019722:	429a      	cmp	r2, r3
 8019724:	d209      	bcs.n	801973a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8019726:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801972a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801972e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019732:	f3bf 8f4f 	dsb	sy
 8019736:	f3bf 8f6f 	isb	sy
}
 801973a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 801973c:	f7ff ff84 	bl	8019648 <prvInitialiseTaskLists>
 8019740:	e7d2      	b.n	80196e8 <prvAddNewTaskToReadyList+0x38>
 8019742:	bf00      	nop
 8019744:	200036d4 	.word	0x200036d4
 8019748:	20003ba8 	.word	0x20003ba8
 801974c:	200036c8 	.word	0x200036c8
 8019750:	200036b8 	.word	0x200036b8
 8019754:	200036cc 	.word	0x200036cc
 8019758:	20003748 	.word	0x20003748

0801975c <prvDeleteTCB>:
	{
 801975c:	b510      	push	{r4, lr}
 801975e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019760:	3058      	adds	r0, #88	@ 0x58
 8019762:	f014 fadf 	bl	802dd24 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019766:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 801976a:	b163      	cbz	r3, 8019786 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801976c:	2b01      	cmp	r3, #1
 801976e:	d011      	beq.n	8019794 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019770:	2b02      	cmp	r3, #2
 8019772:	d00e      	beq.n	8019792 <prvDeleteTCB+0x36>
 8019774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019778:	f383 8811 	msr	BASEPRI, r3
 801977c:	f3bf 8f6f 	isb	sy
 8019780:	f3bf 8f4f 	dsb	sy
 8019784:	e7fe      	b.n	8019784 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8019786:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019788:	f001 f978 	bl	801aa7c <vPortFree>
				vPortFree( pxTCB );
 801978c:	4620      	mov	r0, r4
 801978e:	f001 f975 	bl	801aa7c <vPortFree>
	}
 8019792:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8019794:	4620      	mov	r0, r4
 8019796:	f001 f971 	bl	801aa7c <vPortFree>
 801979a:	e7fa      	b.n	8019792 <prvDeleteTCB+0x36>

0801979c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801979c:	4b0f      	ldr	r3, [pc, #60]	@ (80197dc <prvCheckTasksWaitingTermination+0x40>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	b1d3      	cbz	r3, 80197d8 <prvCheckTasksWaitingTermination+0x3c>
{
 80197a2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80197a4:	f000 ff2e 	bl	801a604 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80197a8:	4b0d      	ldr	r3, [pc, #52]	@ (80197e0 <prvCheckTasksWaitingTermination+0x44>)
 80197aa:	68db      	ldr	r3, [r3, #12]
 80197ac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80197ae:	1d20      	adds	r0, r4, #4
 80197b0:	f7ff f8c0 	bl	8018934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80197b4:	4a0b      	ldr	r2, [pc, #44]	@ (80197e4 <prvCheckTasksWaitingTermination+0x48>)
 80197b6:	6813      	ldr	r3, [r2, #0]
 80197b8:	3b01      	subs	r3, #1
 80197ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80197bc:	4a07      	ldr	r2, [pc, #28]	@ (80197dc <prvCheckTasksWaitingTermination+0x40>)
 80197be:	6813      	ldr	r3, [r2, #0]
 80197c0:	3b01      	subs	r3, #1
 80197c2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80197c4:	f000 ff40 	bl	801a648 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80197c8:	4620      	mov	r0, r4
 80197ca:	f7ff ffc7 	bl	801975c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80197ce:	4b03      	ldr	r3, [pc, #12]	@ (80197dc <prvCheckTasksWaitingTermination+0x40>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d1e6      	bne.n	80197a4 <prvCheckTasksWaitingTermination+0x8>
}
 80197d6:	bd10      	pop	{r4, pc}
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop
 80197dc:	200036ec 	.word	0x200036ec
 80197e0:	200036f0 	.word	0x200036f0
 80197e4:	200036d4 	.word	0x200036d4

080197e8 <prvIdleTask>:
{
 80197e8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80197ea:	f7ff ffd7 	bl	801979c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80197ee:	4b07      	ldr	r3, [pc, #28]	@ (801980c <prvIdleTask+0x24>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d9f9      	bls.n	80197ea <prvIdleTask+0x2>
				taskYIELD();
 80197f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80197fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80197fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019802:	f3bf 8f4f 	dsb	sy
 8019806:	f3bf 8f6f 	isb	sy
 801980a:	e7ee      	b.n	80197ea <prvIdleTask+0x2>
 801980c:	20003748 	.word	0x20003748

08019810 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019810:	b570      	push	{r4, r5, r6, lr}
 8019812:	4604      	mov	r4, r0
 8019814:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019816:	4b17      	ldr	r3, [pc, #92]	@ (8019874 <prvAddCurrentTaskToDelayedList+0x64>)
 8019818:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801981a:	4b17      	ldr	r3, [pc, #92]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x68>)
 801981c:	6818      	ldr	r0, [r3, #0]
 801981e:	3004      	adds	r0, #4
 8019820:	f7ff f888 	bl	8018934 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019824:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019828:	d00d      	beq.n	8019846 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801982a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801982c:	4b12      	ldr	r3, [pc, #72]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x68>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019832:	42a6      	cmp	r6, r4
 8019834:	d910      	bls.n	8019858 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019836:	4b11      	ldr	r3, [pc, #68]	@ (801987c <prvAddCurrentTaskToDelayedList+0x6c>)
 8019838:	6818      	ldr	r0, [r3, #0]
 801983a:	4b0f      	ldr	r3, [pc, #60]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x68>)
 801983c:	6819      	ldr	r1, [r3, #0]
 801983e:	3104      	adds	r1, #4
 8019840:	f7ff f85f 	bl	8018902 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019844:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019846:	2d00      	cmp	r5, #0
 8019848:	d0ef      	beq.n	801982a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801984a:	4b0b      	ldr	r3, [pc, #44]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x68>)
 801984c:	6819      	ldr	r1, [r3, #0]
 801984e:	3104      	adds	r1, #4
 8019850:	480b      	ldr	r0, [pc, #44]	@ (8019880 <prvAddCurrentTaskToDelayedList+0x70>)
 8019852:	f7ff f84b 	bl	80188ec <vListInsertEnd>
 8019856:	e7f5      	b.n	8019844 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019858:	4b0a      	ldr	r3, [pc, #40]	@ (8019884 <prvAddCurrentTaskToDelayedList+0x74>)
 801985a:	6818      	ldr	r0, [r3, #0]
 801985c:	4b06      	ldr	r3, [pc, #24]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x68>)
 801985e:	6819      	ldr	r1, [r3, #0]
 8019860:	3104      	adds	r1, #4
 8019862:	f7ff f84e 	bl	8018902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019866:	4b08      	ldr	r3, [pc, #32]	@ (8019888 <prvAddCurrentTaskToDelayedList+0x78>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	42a3      	cmp	r3, r4
 801986c:	d9ea      	bls.n	8019844 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 801986e:	4b06      	ldr	r3, [pc, #24]	@ (8019888 <prvAddCurrentTaskToDelayedList+0x78>)
 8019870:	601c      	str	r4, [r3, #0]
}
 8019872:	e7e7      	b.n	8019844 <prvAddCurrentTaskToDelayedList+0x34>
 8019874:	200036d0 	.word	0x200036d0
 8019878:	20003ba8 	.word	0x20003ba8
 801987c:	20003718 	.word	0x20003718
 8019880:	200036d8 	.word	0x200036d8
 8019884:	2000371c 	.word	0x2000371c
 8019888:	200036b4 	.word	0x200036b4

0801988c <xTaskCreateStatic>:
	{
 801988c:	b530      	push	{r4, r5, lr}
 801988e:	b087      	sub	sp, #28
 8019890:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8019892:	b18c      	cbz	r4, 80198b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019894:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019896:	b1c5      	cbz	r5, 80198ca <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019898:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 801989c:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801989e:	9d04      	ldr	r5, [sp, #16]
 80198a0:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 80198a4:	d01a      	beq.n	80198dc <xTaskCreateStatic+0x50>
 80198a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198aa:	f383 8811 	msr	BASEPRI, r3
 80198ae:	f3bf 8f6f 	isb	sy
 80198b2:	f3bf 8f4f 	dsb	sy
 80198b6:	e7fe      	b.n	80198b6 <xTaskCreateStatic+0x2a>
 80198b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198bc:	f383 8811 	msr	BASEPRI, r3
 80198c0:	f3bf 8f6f 	isb	sy
 80198c4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80198c8:	e7fe      	b.n	80198c8 <xTaskCreateStatic+0x3c>
 80198ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198ce:	f383 8811 	msr	BASEPRI, r3
 80198d2:	f3bf 8f6f 	isb	sy
 80198d6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80198da:	e7fe      	b.n	80198da <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80198dc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80198de:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80198e0:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80198e2:	2402      	movs	r4, #2
 80198e4:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80198e8:	2400      	movs	r4, #0
 80198ea:	9403      	str	r4, [sp, #12]
 80198ec:	9502      	str	r5, [sp, #8]
 80198ee:	ac05      	add	r4, sp, #20
 80198f0:	9401      	str	r4, [sp, #4]
 80198f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80198f4:	9400      	str	r4, [sp, #0]
 80198f6:	f7ff fe25 	bl	8019544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80198fa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80198fc:	f7ff fed8 	bl	80196b0 <prvAddNewTaskToReadyList>
	}
 8019900:	9805      	ldr	r0, [sp, #20]
 8019902:	b007      	add	sp, #28
 8019904:	bd30      	pop	{r4, r5, pc}

08019906 <xTaskCreate>:
	{
 8019906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801990a:	b085      	sub	sp, #20
 801990c:	4607      	mov	r7, r0
 801990e:	4688      	mov	r8, r1
 8019910:	4614      	mov	r4, r2
 8019912:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019914:	0090      	lsls	r0, r2, #2
 8019916:	f001 f82f 	bl	801a978 <pvPortMalloc>
			if( pxStack != NULL )
 801991a:	b310      	cbz	r0, 8019962 <xTaskCreate+0x5c>
 801991c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801991e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019922:	f001 f829 	bl	801a978 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8019926:	4605      	mov	r5, r0
 8019928:	b1a8      	cbz	r0, 8019956 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801992a:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801992e:	2300      	movs	r3, #0
 8019930:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019934:	9303      	str	r3, [sp, #12]
 8019936:	9002      	str	r0, [sp, #8]
 8019938:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801993a:	9301      	str	r3, [sp, #4]
 801993c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	4633      	mov	r3, r6
 8019942:	4622      	mov	r2, r4
 8019944:	4641      	mov	r1, r8
 8019946:	4638      	mov	r0, r7
 8019948:	f7ff fdfc 	bl	8019544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801994c:	4628      	mov	r0, r5
 801994e:	f7ff feaf 	bl	80196b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019952:	2001      	movs	r0, #1
 8019954:	e007      	b.n	8019966 <xTaskCreate+0x60>
					vPortFree( pxStack );
 8019956:	4648      	mov	r0, r9
 8019958:	f001 f890 	bl	801aa7c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801995c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019960:	e001      	b.n	8019966 <xTaskCreate+0x60>
 8019962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8019966:	b005      	add	sp, #20
 8019968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801996c <vTaskStartScheduler>:
{
 801996c:	b510      	push	{r4, lr}
 801996e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019970:	2400      	movs	r4, #0
 8019972:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019974:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019976:	aa07      	add	r2, sp, #28
 8019978:	a906      	add	r1, sp, #24
 801997a:	a805      	add	r0, sp, #20
 801997c:	f7fe ff90 	bl	80188a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019980:	9b05      	ldr	r3, [sp, #20]
 8019982:	9302      	str	r3, [sp, #8]
 8019984:	9b06      	ldr	r3, [sp, #24]
 8019986:	9301      	str	r3, [sp, #4]
 8019988:	9400      	str	r4, [sp, #0]
 801998a:	4623      	mov	r3, r4
 801998c:	9a07      	ldr	r2, [sp, #28]
 801998e:	491a      	ldr	r1, [pc, #104]	@ (80199f8 <vTaskStartScheduler+0x8c>)
 8019990:	481a      	ldr	r0, [pc, #104]	@ (80199fc <vTaskStartScheduler+0x90>)
 8019992:	f7ff ff7b 	bl	801988c <xTaskCreateStatic>
 8019996:	4b1a      	ldr	r3, [pc, #104]	@ (8019a00 <vTaskStartScheduler+0x94>)
 8019998:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801999a:	b1e8      	cbz	r0, 80199d8 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801999c:	f000 fc0c 	bl	801a1b8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80199a0:	2801      	cmp	r0, #1
 80199a2:	d11a      	bne.n	80199da <vTaskStartScheduler+0x6e>
 80199a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199a8:	f383 8811 	msr	BASEPRI, r3
 80199ac:	f3bf 8f6f 	isb	sy
 80199b0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80199b4:	4b13      	ldr	r3, [pc, #76]	@ (8019a04 <vTaskStartScheduler+0x98>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	3358      	adds	r3, #88	@ 0x58
 80199ba:	4a13      	ldr	r2, [pc, #76]	@ (8019a08 <vTaskStartScheduler+0x9c>)
 80199bc:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80199be:	4b13      	ldr	r3, [pc, #76]	@ (8019a0c <vTaskStartScheduler+0xa0>)
 80199c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80199c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80199c6:	4b12      	ldr	r3, [pc, #72]	@ (8019a10 <vTaskStartScheduler+0xa4>)
 80199c8:	2201      	movs	r2, #1
 80199ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80199cc:	4b11      	ldr	r3, [pc, #68]	@ (8019a14 <vTaskStartScheduler+0xa8>)
 80199ce:	2200      	movs	r2, #0
 80199d0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80199d2:	f000 feb1 	bl	801a738 <xPortStartScheduler>
 80199d6:	e003      	b.n	80199e0 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 80199d8:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80199da:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80199de:	d001      	beq.n	80199e4 <vTaskStartScheduler+0x78>
}
 80199e0:	b008      	add	sp, #32
 80199e2:	bd10      	pop	{r4, pc}
 80199e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199e8:	f383 8811 	msr	BASEPRI, r3
 80199ec:	f3bf 8f6f 	isb	sy
 80199f0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80199f4:	e7fe      	b.n	80199f4 <vTaskStartScheduler+0x88>
 80199f6:	bf00      	nop
 80199f8:	0803905c 	.word	0x0803905c
 80199fc:	080197e9 	.word	0x080197e9
 8019a00:	200036b0 	.word	0x200036b0
 8019a04:	20003ba8 	.word	0x20003ba8
 8019a08:	200002d8 	.word	0x200002d8
 8019a0c:	200036b4 	.word	0x200036b4
 8019a10:	200036c8 	.word	0x200036c8
 8019a14:	200036d0 	.word	0x200036d0

08019a18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8019a18:	4a02      	ldr	r2, [pc, #8]	@ (8019a24 <vTaskSuspendAll+0xc>)
 8019a1a:	6813      	ldr	r3, [r2, #0]
 8019a1c:	3301      	adds	r3, #1
 8019a1e:	6013      	str	r3, [r2, #0]
}
 8019a20:	4770      	bx	lr
 8019a22:	bf00      	nop
 8019a24:	200036ac 	.word	0x200036ac

08019a28 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8019a28:	4b01      	ldr	r3, [pc, #4]	@ (8019a30 <xTaskGetTickCount+0x8>)
 8019a2a:	6818      	ldr	r0, [r3, #0]
}
 8019a2c:	4770      	bx	lr
 8019a2e:	bf00      	nop
 8019a30:	200036d0 	.word	0x200036d0

08019a34 <xTaskIncrementTick>:
{
 8019a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a36:	4b3a      	ldr	r3, [pc, #232]	@ (8019b20 <xTaskIncrementTick+0xec>)
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d169      	bne.n	8019b12 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019a3e:	4b39      	ldr	r3, [pc, #228]	@ (8019b24 <xTaskIncrementTick+0xf0>)
 8019a40:	681d      	ldr	r5, [r3, #0]
 8019a42:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8019a44:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019a46:	b9c5      	cbnz	r5, 8019a7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8019a48:	4b37      	ldr	r3, [pc, #220]	@ (8019b28 <xTaskIncrementTick+0xf4>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	b143      	cbz	r3, 8019a62 <xTaskIncrementTick+0x2e>
 8019a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a54:	f383 8811 	msr	BASEPRI, r3
 8019a58:	f3bf 8f6f 	isb	sy
 8019a5c:	f3bf 8f4f 	dsb	sy
 8019a60:	e7fe      	b.n	8019a60 <xTaskIncrementTick+0x2c>
 8019a62:	4a31      	ldr	r2, [pc, #196]	@ (8019b28 <xTaskIncrementTick+0xf4>)
 8019a64:	6811      	ldr	r1, [r2, #0]
 8019a66:	4b31      	ldr	r3, [pc, #196]	@ (8019b2c <xTaskIncrementTick+0xf8>)
 8019a68:	6818      	ldr	r0, [r3, #0]
 8019a6a:	6010      	str	r0, [r2, #0]
 8019a6c:	6019      	str	r1, [r3, #0]
 8019a6e:	4a30      	ldr	r2, [pc, #192]	@ (8019b30 <xTaskIncrementTick+0xfc>)
 8019a70:	6813      	ldr	r3, [r2, #0]
 8019a72:	3301      	adds	r3, #1
 8019a74:	6013      	str	r3, [r2, #0]
 8019a76:	f7ff fd4f 	bl	8019518 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8019b34 <xTaskIncrementTick+0x100>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	42ab      	cmp	r3, r5
 8019a80:	d93d      	bls.n	8019afe <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8019a82:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019a84:	4b2c      	ldr	r3, [pc, #176]	@ (8019b38 <xTaskIncrementTick+0x104>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019a8e:	009a      	lsls	r2, r3, #2
 8019a90:	4b2a      	ldr	r3, [pc, #168]	@ (8019b3c <xTaskIncrementTick+0x108>)
 8019a92:	589b      	ldr	r3, [r3, r2]
 8019a94:	2b01      	cmp	r3, #1
 8019a96:	d900      	bls.n	8019a9a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8019a98:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8019a9a:	4b29      	ldr	r3, [pc, #164]	@ (8019b40 <xTaskIncrementTick+0x10c>)
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d03c      	beq.n	8019b1c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8019aa2:	2701      	movs	r7, #1
	return xSwitchRequired;
 8019aa4:	e03a      	b.n	8019b1c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8019aa6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8019b28 <xTaskIncrementTick+0xf4>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	b343      	cbz	r3, 8019b02 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8019b28 <xTaskIncrementTick+0xf4>)
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019ab8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8019aba:	429d      	cmp	r5, r3
 8019abc:	d326      	bcc.n	8019b0c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019abe:	1d26      	adds	r6, r4, #4
 8019ac0:	4630      	mov	r0, r6
 8019ac2:	f7fe ff37 	bl	8018934 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019ac6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019ac8:	b11b      	cbz	r3, 8019ad2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019aca:	f104 0018 	add.w	r0, r4, #24
 8019ace:	f7fe ff31 	bl	8018934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019ad2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8019b44 <xTaskIncrementTick+0x110>)
 8019ad6:	6812      	ldr	r2, [r2, #0]
 8019ad8:	4293      	cmp	r3, r2
 8019ada:	d901      	bls.n	8019ae0 <xTaskIncrementTick+0xac>
 8019adc:	4a19      	ldr	r2, [pc, #100]	@ (8019b44 <xTaskIncrementTick+0x110>)
 8019ade:	6013      	str	r3, [r2, #0]
 8019ae0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019ae4:	009a      	lsls	r2, r3, #2
 8019ae6:	4631      	mov	r1, r6
 8019ae8:	4814      	ldr	r0, [pc, #80]	@ (8019b3c <xTaskIncrementTick+0x108>)
 8019aea:	4410      	add	r0, r2
 8019aec:	f7fe fefe 	bl	80188ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019af0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019af2:	4b11      	ldr	r3, [pc, #68]	@ (8019b38 <xTaskIncrementTick+0x104>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d2d4      	bcs.n	8019aa6 <xTaskIncrementTick+0x72>
 8019afc:	e7d4      	b.n	8019aa8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8019afe:	2700      	movs	r7, #0
 8019b00:	e7d2      	b.n	8019aa8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b02:	4b0c      	ldr	r3, [pc, #48]	@ (8019b34 <xTaskIncrementTick+0x100>)
 8019b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b08:	601a      	str	r2, [r3, #0]
					break;
 8019b0a:	e7bb      	b.n	8019a84 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8019b0c:	4a09      	ldr	r2, [pc, #36]	@ (8019b34 <xTaskIncrementTick+0x100>)
 8019b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019b10:	e7b8      	b.n	8019a84 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8019b12:	4a0d      	ldr	r2, [pc, #52]	@ (8019b48 <xTaskIncrementTick+0x114>)
 8019b14:	6813      	ldr	r3, [r2, #0]
 8019b16:	3301      	adds	r3, #1
 8019b18:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8019b1a:	2700      	movs	r7, #0
}
 8019b1c:	4638      	mov	r0, r7
 8019b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b20:	200036ac 	.word	0x200036ac
 8019b24:	200036d0 	.word	0x200036d0
 8019b28:	2000371c 	.word	0x2000371c
 8019b2c:	20003718 	.word	0x20003718
 8019b30:	200036bc 	.word	0x200036bc
 8019b34:	200036b4 	.word	0x200036b4
 8019b38:	20003ba8 	.word	0x20003ba8
 8019b3c:	20003748 	.word	0x20003748
 8019b40:	200036c0 	.word	0x200036c0
 8019b44:	200036cc 	.word	0x200036cc
 8019b48:	200036c4 	.word	0x200036c4

08019b4c <xTaskResumeAll>:
{
 8019b4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8019b4e:	4b35      	ldr	r3, [pc, #212]	@ (8019c24 <xTaskResumeAll+0xd8>)
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	b943      	cbnz	r3, 8019b66 <xTaskResumeAll+0x1a>
 8019b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b58:	f383 8811 	msr	BASEPRI, r3
 8019b5c:	f3bf 8f6f 	isb	sy
 8019b60:	f3bf 8f4f 	dsb	sy
 8019b64:	e7fe      	b.n	8019b64 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8019b66:	f000 fd4d 	bl	801a604 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8019c24 <xTaskResumeAll+0xd8>)
 8019b6c:	681a      	ldr	r2, [r3, #0]
 8019b6e:	3a01      	subs	r2, #1
 8019b70:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d14f      	bne.n	8019c18 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019b78:	4b2b      	ldr	r3, [pc, #172]	@ (8019c28 <xTaskResumeAll+0xdc>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	b90b      	cbnz	r3, 8019b82 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8019b7e:	2400      	movs	r4, #0
 8019b80:	e04b      	b.n	8019c1a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8019b82:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019b84:	4b29      	ldr	r3, [pc, #164]	@ (8019c2c <xTaskResumeAll+0xe0>)
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	b31b      	cbz	r3, 8019bd2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b8a:	4b28      	ldr	r3, [pc, #160]	@ (8019c2c <xTaskResumeAll+0xe0>)
 8019b8c:	68db      	ldr	r3, [r3, #12]
 8019b8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019b90:	f104 0018 	add.w	r0, r4, #24
 8019b94:	f7fe fece 	bl	8018934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019b98:	1d25      	adds	r5, r4, #4
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	f7fe feca 	bl	8018934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019ba0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019ba2:	4b23      	ldr	r3, [pc, #140]	@ (8019c30 <xTaskResumeAll+0xe4>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	4298      	cmp	r0, r3
 8019ba8:	d901      	bls.n	8019bae <xTaskResumeAll+0x62>
 8019baa:	4b21      	ldr	r3, [pc, #132]	@ (8019c30 <xTaskResumeAll+0xe4>)
 8019bac:	6018      	str	r0, [r3, #0]
 8019bae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8019c34 <xTaskResumeAll+0xe8>)
 8019bb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019bba:	f7fe fe97 	bl	80188ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019bbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8019c38 <xTaskResumeAll+0xec>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bc6:	429a      	cmp	r2, r3
 8019bc8:	d3dc      	bcc.n	8019b84 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8019bca:	4b1c      	ldr	r3, [pc, #112]	@ (8019c3c <xTaskResumeAll+0xf0>)
 8019bcc:	2201      	movs	r2, #1
 8019bce:	601a      	str	r2, [r3, #0]
 8019bd0:	e7d8      	b.n	8019b84 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8019bd2:	b10c      	cbz	r4, 8019bd8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8019bd4:	f7ff fca0 	bl	8019518 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019bd8:	4b19      	ldr	r3, [pc, #100]	@ (8019c40 <xTaskResumeAll+0xf4>)
 8019bda:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8019bdc:	b984      	cbnz	r4, 8019c00 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8019bde:	4b17      	ldr	r3, [pc, #92]	@ (8019c3c <xTaskResumeAll+0xf0>)
 8019be0:	681c      	ldr	r4, [r3, #0]
 8019be2:	b1d4      	cbz	r4, 8019c1a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8019be4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019bec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019bf0:	f3bf 8f4f 	dsb	sy
 8019bf4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8019bf8:	2401      	movs	r4, #1
 8019bfa:	e00e      	b.n	8019c1a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019bfc:	3c01      	subs	r4, #1
 8019bfe:	d007      	beq.n	8019c10 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8019c00:	f7ff ff18 	bl	8019a34 <xTaskIncrementTick>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	d0f9      	beq.n	8019bfc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8019c08:	4b0c      	ldr	r3, [pc, #48]	@ (8019c3c <xTaskResumeAll+0xf0>)
 8019c0a:	2201      	movs	r2, #1
 8019c0c:	601a      	str	r2, [r3, #0]
 8019c0e:	e7f5      	b.n	8019bfc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8019c10:	4b0b      	ldr	r3, [pc, #44]	@ (8019c40 <xTaskResumeAll+0xf4>)
 8019c12:	2200      	movs	r2, #0
 8019c14:	601a      	str	r2, [r3, #0]
 8019c16:	e7e2      	b.n	8019bde <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8019c18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019c1a:	f000 fd15 	bl	801a648 <vPortExitCritical>
}
 8019c1e:	4620      	mov	r0, r4
 8019c20:	bd38      	pop	{r3, r4, r5, pc}
 8019c22:	bf00      	nop
 8019c24:	200036ac 	.word	0x200036ac
 8019c28:	200036d4 	.word	0x200036d4
 8019c2c:	20003704 	.word	0x20003704
 8019c30:	200036cc 	.word	0x200036cc
 8019c34:	20003748 	.word	0x20003748
 8019c38:	20003ba8 	.word	0x20003ba8
 8019c3c:	200036c0 	.word	0x200036c0
 8019c40:	200036c4 	.word	0x200036c4

08019c44 <vTaskDelay>:
	{
 8019c44:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019c46:	b1a8      	cbz	r0, 8019c74 <vTaskDelay+0x30>
 8019c48:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8019c4a:	4b10      	ldr	r3, [pc, #64]	@ (8019c8c <vTaskDelay+0x48>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	b143      	cbz	r3, 8019c62 <vTaskDelay+0x1e>
 8019c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c54:	f383 8811 	msr	BASEPRI, r3
 8019c58:	f3bf 8f6f 	isb	sy
 8019c5c:	f3bf 8f4f 	dsb	sy
 8019c60:	e7fe      	b.n	8019c60 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019c62:	f7ff fed9 	bl	8019a18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019c66:	2100      	movs	r1, #0
 8019c68:	4620      	mov	r0, r4
 8019c6a:	f7ff fdd1 	bl	8019810 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019c6e:	f7ff ff6d 	bl	8019b4c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8019c72:	b948      	cbnz	r0, 8019c88 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8019c74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019c7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019c80:	f3bf 8f4f 	dsb	sy
 8019c84:	f3bf 8f6f 	isb	sy
	}
 8019c88:	bd10      	pop	{r4, pc}
 8019c8a:	bf00      	nop
 8019c8c:	200036ac 	.word	0x200036ac

08019c90 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019c90:	4b22      	ldr	r3, [pc, #136]	@ (8019d1c <vTaskSwitchContext+0x8c>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	b11b      	cbz	r3, 8019c9e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8019c96:	4b22      	ldr	r3, [pc, #136]	@ (8019d20 <vTaskSwitchContext+0x90>)
 8019c98:	2201      	movs	r2, #1
 8019c9a:	601a      	str	r2, [r3, #0]
 8019c9c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019c9e:	4b20      	ldr	r3, [pc, #128]	@ (8019d20 <vTaskSwitchContext+0x90>)
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8019d24 <vTaskSwitchContext+0x94>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019cac:	008a      	lsls	r2, r1, #2
 8019cae:	491e      	ldr	r1, [pc, #120]	@ (8019d28 <vTaskSwitchContext+0x98>)
 8019cb0:	588a      	ldr	r2, [r1, r2]
 8019cb2:	b95a      	cbnz	r2, 8019ccc <vTaskSwitchContext+0x3c>
 8019cb4:	b10b      	cbz	r3, 8019cba <vTaskSwitchContext+0x2a>
 8019cb6:	3b01      	subs	r3, #1
 8019cb8:	e7f6      	b.n	8019ca8 <vTaskSwitchContext+0x18>
 8019cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cbe:	f383 8811 	msr	BASEPRI, r3
 8019cc2:	f3bf 8f6f 	isb	sy
 8019cc6:	f3bf 8f4f 	dsb	sy
 8019cca:	e7fe      	b.n	8019cca <vTaskSwitchContext+0x3a>
 8019ccc:	4608      	mov	r0, r1
 8019cce:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019cd2:	008a      	lsls	r2, r1, #2
 8019cd4:	4402      	add	r2, r0
 8019cd6:	6851      	ldr	r1, [r2, #4]
 8019cd8:	6849      	ldr	r1, [r1, #4]
 8019cda:	6051      	str	r1, [r2, #4]
 8019cdc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8019ce0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8019ce4:	3208      	adds	r2, #8
 8019ce6:	4402      	add	r2, r0
 8019ce8:	4291      	cmp	r1, r2
 8019cea:	d00f      	beq.n	8019d0c <vTaskSwitchContext+0x7c>
 8019cec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019cf0:	0091      	lsls	r1, r2, #2
 8019cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8019d28 <vTaskSwitchContext+0x98>)
 8019cf4:	440a      	add	r2, r1
 8019cf6:	6852      	ldr	r2, [r2, #4]
 8019cf8:	68d1      	ldr	r1, [r2, #12]
 8019cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8019d2c <vTaskSwitchContext+0x9c>)
 8019cfc:	6011      	str	r1, [r2, #0]
 8019cfe:	4909      	ldr	r1, [pc, #36]	@ (8019d24 <vTaskSwitchContext+0x94>)
 8019d00:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019d02:	6813      	ldr	r3, [r2, #0]
 8019d04:	3358      	adds	r3, #88	@ 0x58
 8019d06:	4a0a      	ldr	r2, [pc, #40]	@ (8019d30 <vTaskSwitchContext+0xa0>)
 8019d08:	6013      	str	r3, [r2, #0]
}
 8019d0a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d0c:	6848      	ldr	r0, [r1, #4]
 8019d0e:	4662      	mov	r2, ip
 8019d10:	0091      	lsls	r1, r2, #2
 8019d12:	4a05      	ldr	r2, [pc, #20]	@ (8019d28 <vTaskSwitchContext+0x98>)
 8019d14:	440a      	add	r2, r1
 8019d16:	6050      	str	r0, [r2, #4]
 8019d18:	e7e8      	b.n	8019cec <vTaskSwitchContext+0x5c>
 8019d1a:	bf00      	nop
 8019d1c:	200036ac 	.word	0x200036ac
 8019d20:	200036c0 	.word	0x200036c0
 8019d24:	200036cc 	.word	0x200036cc
 8019d28:	20003748 	.word	0x20003748
 8019d2c:	20003ba8 	.word	0x20003ba8
 8019d30:	200002d8 	.word	0x200002d8

08019d34 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8019d34:	b158      	cbz	r0, 8019d4e <vTaskPlaceOnEventList+0x1a>
{
 8019d36:	b510      	push	{r4, lr}
 8019d38:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d3a:	4a09      	ldr	r2, [pc, #36]	@ (8019d60 <vTaskPlaceOnEventList+0x2c>)
 8019d3c:	6811      	ldr	r1, [r2, #0]
 8019d3e:	3118      	adds	r1, #24
 8019d40:	f7fe fddf 	bl	8018902 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019d44:	2101      	movs	r1, #1
 8019d46:	4620      	mov	r0, r4
 8019d48:	f7ff fd62 	bl	8019810 <prvAddCurrentTaskToDelayedList>
}
 8019d4c:	bd10      	pop	{r4, pc}
 8019d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d52:	f383 8811 	msr	BASEPRI, r3
 8019d56:	f3bf 8f6f 	isb	sy
 8019d5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8019d5e:	e7fe      	b.n	8019d5e <vTaskPlaceOnEventList+0x2a>
 8019d60:	20003ba8 	.word	0x20003ba8

08019d64 <vTaskPlaceOnEventListRestricted>:
	{
 8019d64:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8019d66:	b170      	cbz	r0, 8019d86 <vTaskPlaceOnEventListRestricted+0x22>
 8019d68:	460d      	mov	r5, r1
 8019d6a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8019d98 <vTaskPlaceOnEventListRestricted+0x34>)
 8019d6e:	6811      	ldr	r1, [r2, #0]
 8019d70:	3118      	adds	r1, #24
 8019d72:	f7fe fdbb 	bl	80188ec <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8019d76:	b10c      	cbz	r4, 8019d7c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8019d78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019d7c:	4621      	mov	r1, r4
 8019d7e:	4628      	mov	r0, r5
 8019d80:	f7ff fd46 	bl	8019810 <prvAddCurrentTaskToDelayedList>
	}
 8019d84:	bd38      	pop	{r3, r4, r5, pc}
 8019d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d8a:	f383 8811 	msr	BASEPRI, r3
 8019d8e:	f3bf 8f6f 	isb	sy
 8019d92:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8019d96:	e7fe      	b.n	8019d96 <vTaskPlaceOnEventListRestricted+0x32>
 8019d98:	20003ba8 	.word	0x20003ba8

08019d9c <xTaskRemoveFromEventList>:
{
 8019d9c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d9e:	68c3      	ldr	r3, [r0, #12]
 8019da0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019da2:	b324      	cbz	r4, 8019dee <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019da4:	f104 0518 	add.w	r5, r4, #24
 8019da8:	4628      	mov	r0, r5
 8019daa:	f7fe fdc3 	bl	8018934 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019dae:	4b18      	ldr	r3, [pc, #96]	@ (8019e10 <xTaskRemoveFromEventList+0x74>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	bb2b      	cbnz	r3, 8019e00 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019db4:	1d25      	adds	r5, r4, #4
 8019db6:	4628      	mov	r0, r5
 8019db8:	f7fe fdbc 	bl	8018934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019dbc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019dbe:	4b15      	ldr	r3, [pc, #84]	@ (8019e14 <xTaskRemoveFromEventList+0x78>)
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	4298      	cmp	r0, r3
 8019dc4:	d901      	bls.n	8019dca <xTaskRemoveFromEventList+0x2e>
 8019dc6:	4b13      	ldr	r3, [pc, #76]	@ (8019e14 <xTaskRemoveFromEventList+0x78>)
 8019dc8:	6018      	str	r0, [r3, #0]
 8019dca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019dce:	4629      	mov	r1, r5
 8019dd0:	4b11      	ldr	r3, [pc, #68]	@ (8019e18 <xTaskRemoveFromEventList+0x7c>)
 8019dd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019dd6:	f7fe fd89 	bl	80188ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019dda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8019e1c <xTaskRemoveFromEventList+0x80>)
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019de2:	429a      	cmp	r2, r3
 8019de4:	d911      	bls.n	8019e0a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8019de6:	2001      	movs	r0, #1
 8019de8:	4b0d      	ldr	r3, [pc, #52]	@ (8019e20 <xTaskRemoveFromEventList+0x84>)
 8019dea:	6018      	str	r0, [r3, #0]
}
 8019dec:	bd38      	pop	{r3, r4, r5, pc}
 8019dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019df2:	f383 8811 	msr	BASEPRI, r3
 8019df6:	f3bf 8f6f 	isb	sy
 8019dfa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8019dfe:	e7fe      	b.n	8019dfe <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019e00:	4629      	mov	r1, r5
 8019e02:	4808      	ldr	r0, [pc, #32]	@ (8019e24 <xTaskRemoveFromEventList+0x88>)
 8019e04:	f7fe fd72 	bl	80188ec <vListInsertEnd>
 8019e08:	e7e7      	b.n	8019dda <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8019e0a:	2000      	movs	r0, #0
	return xReturn;
 8019e0c:	e7ee      	b.n	8019dec <xTaskRemoveFromEventList+0x50>
 8019e0e:	bf00      	nop
 8019e10:	200036ac 	.word	0x200036ac
 8019e14:	200036cc 	.word	0x200036cc
 8019e18:	20003748 	.word	0x20003748
 8019e1c:	20003ba8 	.word	0x20003ba8
 8019e20:	200036c0 	.word	0x200036c0
 8019e24:	20003704 	.word	0x20003704

08019e28 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019e28:	4b03      	ldr	r3, [pc, #12]	@ (8019e38 <vTaskInternalSetTimeOutState+0x10>)
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019e2e:	4b03      	ldr	r3, [pc, #12]	@ (8019e3c <vTaskInternalSetTimeOutState+0x14>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	6043      	str	r3, [r0, #4]
}
 8019e34:	4770      	bx	lr
 8019e36:	bf00      	nop
 8019e38:	200036bc 	.word	0x200036bc
 8019e3c:	200036d0 	.word	0x200036d0

08019e40 <xTaskCheckForTimeOut>:
{
 8019e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8019e42:	b1c8      	cbz	r0, 8019e78 <xTaskCheckForTimeOut+0x38>
 8019e44:	460c      	mov	r4, r1
 8019e46:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8019e48:	b1f9      	cbz	r1, 8019e8a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8019e4a:	f000 fbdb 	bl	801a604 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8019e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8019ebc <xTaskCheckForTimeOut+0x7c>)
 8019e50:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019e52:	686b      	ldr	r3, [r5, #4]
 8019e54:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8019e56:	6822      	ldr	r2, [r4, #0]
 8019e58:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019e5c:	d026      	beq.n	8019eac <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019e5e:	4e18      	ldr	r6, [pc, #96]	@ (8019ec0 <xTaskCheckForTimeOut+0x80>)
 8019e60:	6836      	ldr	r6, [r6, #0]
 8019e62:	682f      	ldr	r7, [r5, #0]
 8019e64:	42b7      	cmp	r7, r6
 8019e66:	d001      	beq.n	8019e6c <xTaskCheckForTimeOut+0x2c>
 8019e68:	428b      	cmp	r3, r1
 8019e6a:	d924      	bls.n	8019eb6 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019e6c:	4282      	cmp	r2, r0
 8019e6e:	d815      	bhi.n	8019e9c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8019e70:	2300      	movs	r3, #0
 8019e72:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8019e74:	2401      	movs	r4, #1
 8019e76:	e01a      	b.n	8019eae <xTaskCheckForTimeOut+0x6e>
 8019e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e7c:	f383 8811 	msr	BASEPRI, r3
 8019e80:	f3bf 8f6f 	isb	sy
 8019e84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8019e88:	e7fe      	b.n	8019e88 <xTaskCheckForTimeOut+0x48>
 8019e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e8e:	f383 8811 	msr	BASEPRI, r3
 8019e92:	f3bf 8f6f 	isb	sy
 8019e96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8019e9a:	e7fe      	b.n	8019e9a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019e9c:	1a5b      	subs	r3, r3, r1
 8019e9e:	4413      	add	r3, r2
 8019ea0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	f7ff ffc0 	bl	8019e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019ea8:	2400      	movs	r4, #0
 8019eaa:	e000      	b.n	8019eae <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019eac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019eae:	f000 fbcb 	bl	801a648 <vPortExitCritical>
}
 8019eb2:	4620      	mov	r0, r4
 8019eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8019eb6:	2401      	movs	r4, #1
 8019eb8:	e7f9      	b.n	8019eae <xTaskCheckForTimeOut+0x6e>
 8019eba:	bf00      	nop
 8019ebc:	200036d0 	.word	0x200036d0
 8019ec0:	200036bc 	.word	0x200036bc

08019ec4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8019ec4:	4b01      	ldr	r3, [pc, #4]	@ (8019ecc <vTaskMissedYield+0x8>)
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	601a      	str	r2, [r3, #0]
}
 8019eca:	4770      	bx	lr
 8019ecc:	200036c0 	.word	0x200036c0

08019ed0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019ed0:	4b01      	ldr	r3, [pc, #4]	@ (8019ed8 <xTaskGetCurrentTaskHandle+0x8>)
 8019ed2:	6818      	ldr	r0, [r3, #0]
	}
 8019ed4:	4770      	bx	lr
 8019ed6:	bf00      	nop
 8019ed8:	20003ba8 	.word	0x20003ba8

08019edc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019edc:	4b05      	ldr	r3, [pc, #20]	@ (8019ef4 <xTaskGetSchedulerState+0x18>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	b133      	cbz	r3, 8019ef0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019ee2:	4b05      	ldr	r3, [pc, #20]	@ (8019ef8 <xTaskGetSchedulerState+0x1c>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	b10b      	cbz	r3, 8019eec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8019ee8:	2000      	movs	r0, #0
	}
 8019eea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019eec:	2002      	movs	r0, #2
 8019eee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019ef0:	2001      	movs	r0, #1
 8019ef2:	4770      	bx	lr
 8019ef4:	200036c8 	.word	0x200036c8
 8019ef8:	200036ac 	.word	0x200036ac

08019efc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019efc:	2800      	cmp	r0, #0
 8019efe:	d03e      	beq.n	8019f7e <xTaskPriorityInherit+0x82>
	{
 8019f00:	b538      	push	{r3, r4, r5, lr}
 8019f02:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019f04:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019f06:	4a20      	ldr	r2, [pc, #128]	@ (8019f88 <xTaskPriorityInherit+0x8c>)
 8019f08:	6812      	ldr	r2, [r2, #0]
 8019f0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019f0c:	4293      	cmp	r3, r2
 8019f0e:	d22e      	bcs.n	8019f6e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019f10:	6982      	ldr	r2, [r0, #24]
 8019f12:	2a00      	cmp	r2, #0
 8019f14:	db05      	blt.n	8019f22 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f16:	4a1c      	ldr	r2, [pc, #112]	@ (8019f88 <xTaskPriorityInherit+0x8c>)
 8019f18:	6812      	ldr	r2, [r2, #0]
 8019f1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019f1c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019f20:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019f22:	6961      	ldr	r1, [r4, #20]
 8019f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019f28:	4a18      	ldr	r2, [pc, #96]	@ (8019f8c <xTaskPriorityInherit+0x90>)
 8019f2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	d005      	beq.n	8019f3e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019f32:	4b15      	ldr	r3, [pc, #84]	@ (8019f88 <xTaskPriorityInherit+0x8c>)
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8019f3a:	2001      	movs	r0, #1
	}
 8019f3c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019f3e:	1d25      	adds	r5, r4, #4
 8019f40:	4628      	mov	r0, r5
 8019f42:	f7fe fcf7 	bl	8018934 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019f46:	4b10      	ldr	r3, [pc, #64]	@ (8019f88 <xTaskPriorityInherit+0x8c>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019f4c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019f4e:	4b10      	ldr	r3, [pc, #64]	@ (8019f90 <xTaskPriorityInherit+0x94>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	4298      	cmp	r0, r3
 8019f54:	d901      	bls.n	8019f5a <xTaskPriorityInherit+0x5e>
 8019f56:	4b0e      	ldr	r3, [pc, #56]	@ (8019f90 <xTaskPriorityInherit+0x94>)
 8019f58:	6018      	str	r0, [r3, #0]
 8019f5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019f5e:	4629      	mov	r1, r5
 8019f60:	4b0a      	ldr	r3, [pc, #40]	@ (8019f8c <xTaskPriorityInherit+0x90>)
 8019f62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f66:	f7fe fcc1 	bl	80188ec <vListInsertEnd>
				xReturn = pdTRUE;
 8019f6a:	2001      	movs	r0, #1
 8019f6c:	e7e6      	b.n	8019f3c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019f6e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019f70:	4b05      	ldr	r3, [pc, #20]	@ (8019f88 <xTaskPriorityInherit+0x8c>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d303      	bcc.n	8019f82 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8019f7a:	2000      	movs	r0, #0
 8019f7c:	e7de      	b.n	8019f3c <xTaskPriorityInherit+0x40>
 8019f7e:	2000      	movs	r0, #0
	}
 8019f80:	4770      	bx	lr
					xReturn = pdTRUE;
 8019f82:	2001      	movs	r0, #1
		return xReturn;
 8019f84:	e7da      	b.n	8019f3c <xTaskPriorityInherit+0x40>
 8019f86:	bf00      	nop
 8019f88:	20003ba8 	.word	0x20003ba8
 8019f8c:	20003748 	.word	0x20003748
 8019f90:	200036cc 	.word	0x200036cc

08019f94 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8019f94:	2800      	cmp	r0, #0
 8019f96:	d03b      	beq.n	801a010 <xTaskPriorityDisinherit+0x7c>
	{
 8019f98:	b538      	push	{r3, r4, r5, lr}
 8019f9a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019f9c:	4b1e      	ldr	r3, [pc, #120]	@ (801a018 <xTaskPriorityDisinherit+0x84>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	4283      	cmp	r3, r0
 8019fa2:	d008      	beq.n	8019fb6 <xTaskPriorityDisinherit+0x22>
 8019fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fa8:	f383 8811 	msr	BASEPRI, r3
 8019fac:	f3bf 8f6f 	isb	sy
 8019fb0:	f3bf 8f4f 	dsb	sy
 8019fb4:	e7fe      	b.n	8019fb4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8019fb6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019fb8:	b943      	cbnz	r3, 8019fcc <xTaskPriorityDisinherit+0x38>
 8019fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fbe:	f383 8811 	msr	BASEPRI, r3
 8019fc2:	f3bf 8f6f 	isb	sy
 8019fc6:	f3bf 8f4f 	dsb	sy
 8019fca:	e7fe      	b.n	8019fca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8019fcc:	3b01      	subs	r3, #1
 8019fce:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019fd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8019fd2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019fd4:	4291      	cmp	r1, r2
 8019fd6:	d01d      	beq.n	801a014 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019fd8:	b10b      	cbz	r3, 8019fde <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8019fda:	2000      	movs	r0, #0
	}
 8019fdc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019fde:	1d05      	adds	r5, r0, #4
 8019fe0:	4628      	mov	r0, r5
 8019fe2:	f7fe fca7 	bl	8018934 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019fe6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8019fe8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019fea:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8019fee:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019ff0:	4b0a      	ldr	r3, [pc, #40]	@ (801a01c <xTaskPriorityDisinherit+0x88>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	4298      	cmp	r0, r3
 8019ff6:	d901      	bls.n	8019ffc <xTaskPriorityDisinherit+0x68>
 8019ff8:	4b08      	ldr	r3, [pc, #32]	@ (801a01c <xTaskPriorityDisinherit+0x88>)
 8019ffa:	6018      	str	r0, [r3, #0]
 8019ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a000:	4629      	mov	r1, r5
 801a002:	4b07      	ldr	r3, [pc, #28]	@ (801a020 <xTaskPriorityDisinherit+0x8c>)
 801a004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a008:	f7fe fc70 	bl	80188ec <vListInsertEnd>
					xReturn = pdTRUE;
 801a00c:	2001      	movs	r0, #1
 801a00e:	e7e5      	b.n	8019fdc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801a010:	2000      	movs	r0, #0
	}
 801a012:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801a014:	2000      	movs	r0, #0
 801a016:	e7e1      	b.n	8019fdc <xTaskPriorityDisinherit+0x48>
 801a018:	20003ba8 	.word	0x20003ba8
 801a01c:	200036cc 	.word	0x200036cc
 801a020:	20003748 	.word	0x20003748

0801a024 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801a024:	2800      	cmp	r0, #0
 801a026:	d046      	beq.n	801a0b6 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801a028:	b538      	push	{r3, r4, r5, lr}
 801a02a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801a02c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a02e:	b943      	cbnz	r3, 801a042 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a034:	f383 8811 	msr	BASEPRI, r3
 801a038:	f3bf 8f6f 	isb	sy
 801a03c:	f3bf 8f4f 	dsb	sy
 801a040:	e7fe      	b.n	801a040 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a042:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a044:	428a      	cmp	r2, r1
 801a046:	d200      	bcs.n	801a04a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a048:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a04a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a04c:	4291      	cmp	r1, r2
 801a04e:	d001      	beq.n	801a054 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a050:	2b01      	cmp	r3, #1
 801a052:	d000      	beq.n	801a056 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801a054:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801a056:	4b18      	ldr	r3, [pc, #96]	@ (801a0b8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	42a3      	cmp	r3, r4
 801a05c:	d022      	beq.n	801a0a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801a05e:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a060:	69a3      	ldr	r3, [r4, #24]
 801a062:	2b00      	cmp	r3, #0
 801a064:	db02      	blt.n	801a06c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a066:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a06a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a06c:	6962      	ldr	r2, [r4, #20]
 801a06e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a072:	4b12      	ldr	r3, [pc, #72]	@ (801a0bc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a074:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a078:	429a      	cmp	r2, r3
 801a07a:	d1eb      	bne.n	801a054 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a07c:	1d25      	adds	r5, r4, #4
 801a07e:	4628      	mov	r0, r5
 801a080:	f7fe fc58 	bl	8018934 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801a084:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a086:	4b0e      	ldr	r3, [pc, #56]	@ (801a0c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	4298      	cmp	r0, r3
 801a08c:	d901      	bls.n	801a092 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801a08e:	4b0c      	ldr	r3, [pc, #48]	@ (801a0c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a090:	6018      	str	r0, [r3, #0]
 801a092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a096:	4629      	mov	r1, r5
 801a098:	4b08      	ldr	r3, [pc, #32]	@ (801a0bc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a09a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a09e:	f7fe fc25 	bl	80188ec <vListInsertEnd>
	}
 801a0a2:	e7d7      	b.n	801a054 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801a0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0a8:	f383 8811 	msr	BASEPRI, r3
 801a0ac:	f3bf 8f6f 	isb	sy
 801a0b0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801a0b4:	e7fe      	b.n	801a0b4 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801a0b6:	4770      	bx	lr
 801a0b8:	20003ba8 	.word	0x20003ba8
 801a0bc:	20003748 	.word	0x20003748
 801a0c0:	200036cc 	.word	0x200036cc

0801a0c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801a0c4:	4b05      	ldr	r3, [pc, #20]	@ (801a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	b123      	cbz	r3, 801a0d4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801a0ca:	4b04      	ldr	r3, [pc, #16]	@ (801a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0cc:	681a      	ldr	r2, [r3, #0]
 801a0ce:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801a0d4:	4b01      	ldr	r3, [pc, #4]	@ (801a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0d6:	6818      	ldr	r0, [r3, #0]
	}
 801a0d8:	4770      	bx	lr
 801a0da:	bf00      	nop
 801a0dc:	20003ba8 	.word	0x20003ba8

0801a0e0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a0e0:	4b06      	ldr	r3, [pc, #24]	@ (801a0fc <prvGetNextExpireTime+0x1c>)
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	6813      	ldr	r3, [r2, #0]
 801a0e6:	b92b      	cbnz	r3, 801a0f4 <prvGetNextExpireTime+0x14>
 801a0e8:	2301      	movs	r3, #1
 801a0ea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a0ec:	b923      	cbnz	r3, 801a0f8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a0ee:	68d3      	ldr	r3, [r2, #12]
 801a0f0:	6818      	ldr	r0, [r3, #0]
 801a0f2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	e7f8      	b.n	801a0ea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a0f8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801a0fa:	4770      	bx	lr
 801a0fc:	20003cac 	.word	0x20003cac

0801a100 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a100:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a102:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a104:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a106:	4291      	cmp	r1, r2
 801a108:	d80c      	bhi.n	801a124 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a10a:	1ad2      	subs	r2, r2, r3
 801a10c:	6983      	ldr	r3, [r0, #24]
 801a10e:	429a      	cmp	r2, r3
 801a110:	d301      	bcc.n	801a116 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a112:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801a114:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a116:	1d01      	adds	r1, r0, #4
 801a118:	4b09      	ldr	r3, [pc, #36]	@ (801a140 <prvInsertTimerInActiveList+0x40>)
 801a11a:	6818      	ldr	r0, [r3, #0]
 801a11c:	f7fe fbf1 	bl	8018902 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a120:	2000      	movs	r0, #0
 801a122:	e7f7      	b.n	801a114 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a124:	429a      	cmp	r2, r3
 801a126:	d201      	bcs.n	801a12c <prvInsertTimerInActiveList+0x2c>
 801a128:	4299      	cmp	r1, r3
 801a12a:	d206      	bcs.n	801a13a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a12c:	1d01      	adds	r1, r0, #4
 801a12e:	4b05      	ldr	r3, [pc, #20]	@ (801a144 <prvInsertTimerInActiveList+0x44>)
 801a130:	6818      	ldr	r0, [r3, #0]
 801a132:	f7fe fbe6 	bl	8018902 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a136:	2000      	movs	r0, #0
 801a138:	e7ec      	b.n	801a114 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801a13a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801a13c:	e7ea      	b.n	801a114 <prvInsertTimerInActiveList+0x14>
 801a13e:	bf00      	nop
 801a140:	20003ca8 	.word	0x20003ca8
 801a144:	20003cac 	.word	0x20003cac

0801a148 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a148:	b530      	push	{r4, r5, lr}
 801a14a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a14c:	f000 fa5a 	bl	801a604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a150:	4b11      	ldr	r3, [pc, #68]	@ (801a198 <prvCheckForValidListAndQueue+0x50>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	b11b      	cbz	r3, 801a15e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a156:	f000 fa77 	bl	801a648 <vPortExitCritical>
}
 801a15a:	b003      	add	sp, #12
 801a15c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801a15e:	4d0f      	ldr	r5, [pc, #60]	@ (801a19c <prvCheckForValidListAndQueue+0x54>)
 801a160:	4628      	mov	r0, r5
 801a162:	f7fe fbb5 	bl	80188d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a166:	4c0e      	ldr	r4, [pc, #56]	@ (801a1a0 <prvCheckForValidListAndQueue+0x58>)
 801a168:	4620      	mov	r0, r4
 801a16a:	f7fe fbb1 	bl	80188d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a16e:	4b0d      	ldr	r3, [pc, #52]	@ (801a1a4 <prvCheckForValidListAndQueue+0x5c>)
 801a170:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a172:	4b0d      	ldr	r3, [pc, #52]	@ (801a1a8 <prvCheckForValidListAndQueue+0x60>)
 801a174:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a176:	2300      	movs	r3, #0
 801a178:	9300      	str	r3, [sp, #0]
 801a17a:	4b0c      	ldr	r3, [pc, #48]	@ (801a1ac <prvCheckForValidListAndQueue+0x64>)
 801a17c:	4a0c      	ldr	r2, [pc, #48]	@ (801a1b0 <prvCheckForValidListAndQueue+0x68>)
 801a17e:	2110      	movs	r1, #16
 801a180:	200a      	movs	r0, #10
 801a182:	f7fe fce5 	bl	8018b50 <xQueueGenericCreateStatic>
 801a186:	4b04      	ldr	r3, [pc, #16]	@ (801a198 <prvCheckForValidListAndQueue+0x50>)
 801a188:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d0e3      	beq.n	801a156 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a18e:	4909      	ldr	r1, [pc, #36]	@ (801a1b4 <prvCheckForValidListAndQueue+0x6c>)
 801a190:	f7ff f984 	bl	801949c <vQueueAddToRegistry>
 801a194:	e7df      	b.n	801a156 <prvCheckForValidListAndQueue+0xe>
 801a196:	bf00      	nop
 801a198:	20003ca4 	.word	0x20003ca4
 801a19c:	20003cc4 	.word	0x20003cc4
 801a1a0:	20003cb0 	.word	0x20003cb0
 801a1a4:	20003cac 	.word	0x20003cac
 801a1a8:	20003ca8 	.word	0x20003ca8
 801a1ac:	20003bac 	.word	0x20003bac
 801a1b0:	20003bfc 	.word	0x20003bfc
 801a1b4:	08039064 	.word	0x08039064

0801a1b8 <xTimerCreateTimerTask>:
{
 801a1b8:	b510      	push	{r4, lr}
 801a1ba:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a1bc:	f7ff ffc4 	bl	801a148 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a1c0:	4b12      	ldr	r3, [pc, #72]	@ (801a20c <xTimerCreateTimerTask+0x54>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	b1cb      	cbz	r3, 801a1fa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a1c6:	2400      	movs	r4, #0
 801a1c8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a1ca:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a1cc:	aa07      	add	r2, sp, #28
 801a1ce:	a906      	add	r1, sp, #24
 801a1d0:	a805      	add	r0, sp, #20
 801a1d2:	f7fe fb71 	bl	80188b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a1d6:	9b05      	ldr	r3, [sp, #20]
 801a1d8:	9302      	str	r3, [sp, #8]
 801a1da:	9b06      	ldr	r3, [sp, #24]
 801a1dc:	9301      	str	r3, [sp, #4]
 801a1de:	2302      	movs	r3, #2
 801a1e0:	9300      	str	r3, [sp, #0]
 801a1e2:	4623      	mov	r3, r4
 801a1e4:	9a07      	ldr	r2, [sp, #28]
 801a1e6:	490a      	ldr	r1, [pc, #40]	@ (801a210 <xTimerCreateTimerTask+0x58>)
 801a1e8:	480a      	ldr	r0, [pc, #40]	@ (801a214 <xTimerCreateTimerTask+0x5c>)
 801a1ea:	f7ff fb4f 	bl	801988c <xTaskCreateStatic>
 801a1ee:	4b0a      	ldr	r3, [pc, #40]	@ (801a218 <xTimerCreateTimerTask+0x60>)
 801a1f0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a1f2:	b110      	cbz	r0, 801a1fa <xTimerCreateTimerTask+0x42>
}
 801a1f4:	2001      	movs	r0, #1
 801a1f6:	b008      	add	sp, #32
 801a1f8:	bd10      	pop	{r4, pc}
 801a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1fe:	f383 8811 	msr	BASEPRI, r3
 801a202:	f3bf 8f6f 	isb	sy
 801a206:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a20a:	e7fe      	b.n	801a20a <xTimerCreateTimerTask+0x52>
 801a20c:	20003ca4 	.word	0x20003ca4
 801a210:	0803906c 	.word	0x0803906c
 801a214:	0801a51d 	.word	0x0801a51d
 801a218:	20003ca0 	.word	0x20003ca0

0801a21c <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a21c:	b1b8      	cbz	r0, 801a24e <xTimerGenericCommand+0x32>
 801a21e:	469c      	mov	ip, r3
 801a220:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a222:	4818      	ldr	r0, [pc, #96]	@ (801a284 <xTimerGenericCommand+0x68>)
 801a224:	6800      	ldr	r0, [r0, #0]
 801a226:	b358      	cbz	r0, 801a280 <xTimerGenericCommand+0x64>
{
 801a228:	b500      	push	{lr}
 801a22a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a22c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a22e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a230:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a232:	2905      	cmp	r1, #5
 801a234:	dc1c      	bgt.n	801a270 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a236:	f7ff fe51 	bl	8019edc <xTaskGetSchedulerState>
 801a23a:	2802      	cmp	r0, #2
 801a23c:	d010      	beq.n	801a260 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a23e:	2300      	movs	r3, #0
 801a240:	461a      	mov	r2, r3
 801a242:	4669      	mov	r1, sp
 801a244:	480f      	ldr	r0, [pc, #60]	@ (801a284 <xTimerGenericCommand+0x68>)
 801a246:	6800      	ldr	r0, [r0, #0]
 801a248:	f7fe fcf0 	bl	8018c2c <xQueueGenericSend>
 801a24c:	e015      	b.n	801a27a <xTimerGenericCommand+0x5e>
 801a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a252:	f383 8811 	msr	BASEPRI, r3
 801a256:	f3bf 8f6f 	isb	sy
 801a25a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a25e:	e7fe      	b.n	801a25e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a260:	2300      	movs	r3, #0
 801a262:	9a06      	ldr	r2, [sp, #24]
 801a264:	4669      	mov	r1, sp
 801a266:	4807      	ldr	r0, [pc, #28]	@ (801a284 <xTimerGenericCommand+0x68>)
 801a268:	6800      	ldr	r0, [r0, #0]
 801a26a:	f7fe fcdf 	bl	8018c2c <xQueueGenericSend>
 801a26e:	e004      	b.n	801a27a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a270:	2300      	movs	r3, #0
 801a272:	4662      	mov	r2, ip
 801a274:	4669      	mov	r1, sp
 801a276:	f7fe fde3 	bl	8018e40 <xQueueGenericSendFromISR>
}
 801a27a:	b005      	add	sp, #20
 801a27c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a280:	2000      	movs	r0, #0
}
 801a282:	4770      	bx	lr
 801a284:	20003ca4 	.word	0x20003ca4

0801a288 <prvSwitchTimerLists>:
{
 801a288:	b570      	push	{r4, r5, r6, lr}
 801a28a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a28c:	4b1b      	ldr	r3, [pc, #108]	@ (801a2fc <prvSwitchTimerLists+0x74>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	681a      	ldr	r2, [r3, #0]
 801a292:	b362      	cbz	r2, 801a2ee <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a294:	68db      	ldr	r3, [r3, #12]
 801a296:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a298:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a29a:	1d25      	adds	r5, r4, #4
 801a29c:	4628      	mov	r0, r5
 801a29e:	f7fe fb49 	bl	8018934 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a2a2:	6a23      	ldr	r3, [r4, #32]
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a2a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a2ac:	f013 0f04 	tst.w	r3, #4
 801a2b0:	d0ec      	beq.n	801a28c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a2b2:	69a3      	ldr	r3, [r4, #24]
 801a2b4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a2b6:	429e      	cmp	r6, r3
 801a2b8:	d207      	bcs.n	801a2ca <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a2ba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a2bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a2be:	4629      	mov	r1, r5
 801a2c0:	4b0e      	ldr	r3, [pc, #56]	@ (801a2fc <prvSwitchTimerLists+0x74>)
 801a2c2:	6818      	ldr	r0, [r3, #0]
 801a2c4:	f7fe fb1d 	bl	8018902 <vListInsert>
 801a2c8:	e7e0      	b.n	801a28c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a2ca:	2100      	movs	r1, #0
 801a2cc:	9100      	str	r1, [sp, #0]
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	4632      	mov	r2, r6
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	f7ff ffa2 	bl	801a21c <xTimerGenericCommand>
				configASSERT( xResult );
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	d1d7      	bne.n	801a28c <prvSwitchTimerLists+0x4>
 801a2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2e0:	f383 8811 	msr	BASEPRI, r3
 801a2e4:	f3bf 8f6f 	isb	sy
 801a2e8:	f3bf 8f4f 	dsb	sy
 801a2ec:	e7fe      	b.n	801a2ec <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a2ee:	4a04      	ldr	r2, [pc, #16]	@ (801a300 <prvSwitchTimerLists+0x78>)
 801a2f0:	6810      	ldr	r0, [r2, #0]
 801a2f2:	4902      	ldr	r1, [pc, #8]	@ (801a2fc <prvSwitchTimerLists+0x74>)
 801a2f4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a2f6:	6013      	str	r3, [r2, #0]
}
 801a2f8:	b002      	add	sp, #8
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	20003cac 	.word	0x20003cac
 801a300:	20003ca8 	.word	0x20003ca8

0801a304 <prvSampleTimeNow>:
{
 801a304:	b538      	push	{r3, r4, r5, lr}
 801a306:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a308:	f7ff fb8e 	bl	8019a28 <xTaskGetTickCount>
 801a30c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a30e:	4b07      	ldr	r3, [pc, #28]	@ (801a32c <prvSampleTimeNow+0x28>)
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	4283      	cmp	r3, r0
 801a314:	d805      	bhi.n	801a322 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a316:	2300      	movs	r3, #0
 801a318:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a31a:	4b04      	ldr	r3, [pc, #16]	@ (801a32c <prvSampleTimeNow+0x28>)
 801a31c:	601c      	str	r4, [r3, #0]
}
 801a31e:	4620      	mov	r0, r4
 801a320:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801a322:	f7ff ffb1 	bl	801a288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a326:	2301      	movs	r3, #1
 801a328:	602b      	str	r3, [r5, #0]
 801a32a:	e7f6      	b.n	801a31a <prvSampleTimeNow+0x16>
 801a32c:	20003c9c 	.word	0x20003c9c

0801a330 <prvProcessExpiredTimer>:
{
 801a330:	b570      	push	{r4, r5, r6, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	4606      	mov	r6, r0
 801a336:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a338:	4917      	ldr	r1, [pc, #92]	@ (801a398 <prvProcessExpiredTimer+0x68>)
 801a33a:	6809      	ldr	r1, [r1, #0]
 801a33c:	68c9      	ldr	r1, [r1, #12]
 801a33e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a340:	1d20      	adds	r0, r4, #4
 801a342:	f7fe faf7 	bl	8018934 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a346:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801a34a:	f01c 0f04 	tst.w	ip, #4
 801a34e:	d108      	bne.n	801a362 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a350:	f02c 0c01 	bic.w	ip, ip, #1
 801a354:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a358:	6a23      	ldr	r3, [r4, #32]
 801a35a:	4620      	mov	r0, r4
 801a35c:	4798      	blx	r3
}
 801a35e:	b002      	add	sp, #8
 801a360:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a362:	69a1      	ldr	r1, [r4, #24]
 801a364:	4633      	mov	r3, r6
 801a366:	462a      	mov	r2, r5
 801a368:	4431      	add	r1, r6
 801a36a:	4620      	mov	r0, r4
 801a36c:	f7ff fec8 	bl	801a100 <prvInsertTimerInActiveList>
 801a370:	2800      	cmp	r0, #0
 801a372:	d0f1      	beq.n	801a358 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a374:	2100      	movs	r1, #0
 801a376:	9100      	str	r1, [sp, #0]
 801a378:	460b      	mov	r3, r1
 801a37a:	4632      	mov	r2, r6
 801a37c:	4620      	mov	r0, r4
 801a37e:	f7ff ff4d 	bl	801a21c <xTimerGenericCommand>
			configASSERT( xResult );
 801a382:	2800      	cmp	r0, #0
 801a384:	d1e8      	bne.n	801a358 <prvProcessExpiredTimer+0x28>
 801a386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a38a:	f383 8811 	msr	BASEPRI, r3
 801a38e:	f3bf 8f6f 	isb	sy
 801a392:	f3bf 8f4f 	dsb	sy
 801a396:	e7fe      	b.n	801a396 <prvProcessExpiredTimer+0x66>
 801a398:	20003cac 	.word	0x20003cac

0801a39c <prvProcessTimerOrBlockTask>:
{
 801a39c:	b570      	push	{r4, r5, r6, lr}
 801a39e:	b082      	sub	sp, #8
 801a3a0:	4606      	mov	r6, r0
 801a3a2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801a3a4:	f7ff fb38 	bl	8019a18 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a3a8:	a801      	add	r0, sp, #4
 801a3aa:	f7ff ffab 	bl	801a304 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801a3ae:	9b01      	ldr	r3, [sp, #4]
 801a3b0:	bb33      	cbnz	r3, 801a400 <prvProcessTimerOrBlockTask+0x64>
 801a3b2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a3b4:	b9e4      	cbnz	r4, 801a3f0 <prvProcessTimerOrBlockTask+0x54>
 801a3b6:	42b0      	cmp	r0, r6
 801a3b8:	d213      	bcs.n	801a3e2 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a3ba:	4622      	mov	r2, r4
 801a3bc:	1b71      	subs	r1, r6, r5
 801a3be:	4b12      	ldr	r3, [pc, #72]	@ (801a408 <prvProcessTimerOrBlockTask+0x6c>)
 801a3c0:	6818      	ldr	r0, [r3, #0]
 801a3c2:	f7ff f87f 	bl	80194c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a3c6:	f7ff fbc1 	bl	8019b4c <xTaskResumeAll>
 801a3ca:	b9d8      	cbnz	r0, 801a404 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801a3cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a3d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a3d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a3d8:	f3bf 8f4f 	dsb	sy
 801a3dc:	f3bf 8f6f 	isb	sy
 801a3e0:	e010      	b.n	801a404 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801a3e2:	f7ff fbb3 	bl	8019b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a3e6:	4629      	mov	r1, r5
 801a3e8:	4630      	mov	r0, r6
 801a3ea:	f7ff ffa1 	bl	801a330 <prvProcessExpiredTimer>
 801a3ee:	e009      	b.n	801a404 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a3f0:	4a06      	ldr	r2, [pc, #24]	@ (801a40c <prvProcessTimerOrBlockTask+0x70>)
 801a3f2:	6812      	ldr	r2, [r2, #0]
 801a3f4:	6812      	ldr	r2, [r2, #0]
 801a3f6:	b90a      	cbnz	r2, 801a3fc <prvProcessTimerOrBlockTask+0x60>
 801a3f8:	2401      	movs	r4, #1
 801a3fa:	e7de      	b.n	801a3ba <prvProcessTimerOrBlockTask+0x1e>
 801a3fc:	461c      	mov	r4, r3
 801a3fe:	e7dc      	b.n	801a3ba <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801a400:	f7ff fba4 	bl	8019b4c <xTaskResumeAll>
}
 801a404:	b002      	add	sp, #8
 801a406:	bd70      	pop	{r4, r5, r6, pc}
 801a408:	20003ca4 	.word	0x20003ca4
 801a40c:	20003ca8 	.word	0x20003ca8

0801a410 <prvProcessReceivedCommands>:
{
 801a410:	b510      	push	{r4, lr}
 801a412:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a414:	e002      	b.n	801a41c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a416:	9b04      	ldr	r3, [sp, #16]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	da0f      	bge.n	801a43c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a41c:	2200      	movs	r2, #0
 801a41e:	a904      	add	r1, sp, #16
 801a420:	4b3d      	ldr	r3, [pc, #244]	@ (801a518 <prvProcessReceivedCommands+0x108>)
 801a422:	6818      	ldr	r0, [r3, #0]
 801a424:	f7fe fd73 	bl	8018f0e <xQueueReceive>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d073      	beq.n	801a514 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a42c:	9b04      	ldr	r3, [sp, #16]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	daf1      	bge.n	801a416 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a432:	9907      	ldr	r1, [sp, #28]
 801a434:	9806      	ldr	r0, [sp, #24]
 801a436:	9b05      	ldr	r3, [sp, #20]
 801a438:	4798      	blx	r3
 801a43a:	e7ec      	b.n	801a416 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a43c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a43e:	6963      	ldr	r3, [r4, #20]
 801a440:	b113      	cbz	r3, 801a448 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a442:	1d20      	adds	r0, r4, #4
 801a444:	f7fe fa76 	bl	8018934 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a448:	a803      	add	r0, sp, #12
 801a44a:	f7ff ff5b 	bl	801a304 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801a44e:	9b04      	ldr	r3, [sp, #16]
 801a450:	2b09      	cmp	r3, #9
 801a452:	d8e3      	bhi.n	801a41c <prvProcessReceivedCommands+0xc>
 801a454:	e8df f003 	tbb	[pc, r3]
 801a458:	30050505 	.word	0x30050505
 801a45c:	05055037 	.word	0x05055037
 801a460:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a462:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a466:	f043 0301 	orr.w	r3, r3, #1
 801a46a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a46e:	9b05      	ldr	r3, [sp, #20]
 801a470:	69a1      	ldr	r1, [r4, #24]
 801a472:	4602      	mov	r2, r0
 801a474:	4419      	add	r1, r3
 801a476:	4620      	mov	r0, r4
 801a478:	f7ff fe42 	bl	801a100 <prvInsertTimerInActiveList>
 801a47c:	2800      	cmp	r0, #0
 801a47e:	d0cd      	beq.n	801a41c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a480:	6a23      	ldr	r3, [r4, #32]
 801a482:	4620      	mov	r0, r4
 801a484:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a486:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a48a:	f013 0f04 	tst.w	r3, #4
 801a48e:	d0c5      	beq.n	801a41c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a490:	69a2      	ldr	r2, [r4, #24]
 801a492:	2100      	movs	r1, #0
 801a494:	9100      	str	r1, [sp, #0]
 801a496:	460b      	mov	r3, r1
 801a498:	9805      	ldr	r0, [sp, #20]
 801a49a:	4402      	add	r2, r0
 801a49c:	4620      	mov	r0, r4
 801a49e:	f7ff febd 	bl	801a21c <xTimerGenericCommand>
							configASSERT( xResult );
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d1ba      	bne.n	801a41c <prvProcessReceivedCommands+0xc>
 801a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4aa:	f383 8811 	msr	BASEPRI, r3
 801a4ae:	f3bf 8f6f 	isb	sy
 801a4b2:	f3bf 8f4f 	dsb	sy
 801a4b6:	e7fe      	b.n	801a4b6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a4b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4bc:	f023 0301 	bic.w	r3, r3, #1
 801a4c0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801a4c4:	e7aa      	b.n	801a41c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a4c6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4ca:	f043 0301 	orr.w	r3, r3, #1
 801a4ce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a4d2:	9905      	ldr	r1, [sp, #20]
 801a4d4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a4d6:	b131      	cbz	r1, 801a4e6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a4d8:	4603      	mov	r3, r0
 801a4da:	4602      	mov	r2, r0
 801a4dc:	4401      	add	r1, r0
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f7ff fe0e 	bl	801a100 <prvInsertTimerInActiveList>
					break;
 801a4e4:	e79a      	b.n	801a41c <prvProcessReceivedCommands+0xc>
 801a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4ea:	f383 8811 	msr	BASEPRI, r3
 801a4ee:	f3bf 8f6f 	isb	sy
 801a4f2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a4f6:	e7fe      	b.n	801a4f6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a4f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4fc:	f013 0f02 	tst.w	r3, #2
 801a500:	d004      	beq.n	801a50c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a502:	f023 0301 	bic.w	r3, r3, #1
 801a506:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801a50a:	e787      	b.n	801a41c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801a50c:	4620      	mov	r0, r4
 801a50e:	f000 fab5 	bl	801aa7c <vPortFree>
 801a512:	e783      	b.n	801a41c <prvProcessReceivedCommands+0xc>
}
 801a514:	b008      	add	sp, #32
 801a516:	bd10      	pop	{r4, pc}
 801a518:	20003ca4 	.word	0x20003ca4

0801a51c <prvTimerTask>:
{
 801a51c:	b500      	push	{lr}
 801a51e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a520:	a801      	add	r0, sp, #4
 801a522:	f7ff fddd 	bl	801a0e0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a526:	9901      	ldr	r1, [sp, #4]
 801a528:	f7ff ff38 	bl	801a39c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801a52c:	f7ff ff70 	bl	801a410 <prvProcessReceivedCommands>
	for( ;; )
 801a530:	e7f6      	b.n	801a520 <prvTimerTask+0x4>
	...

0801a534 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a534:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801a536:	2300      	movs	r3, #0
 801a538:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a53a:	4b0d      	ldr	r3, [pc, #52]	@ (801a570 <prvTaskExitError+0x3c>)
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a542:	d008      	beq.n	801a556 <prvTaskExitError+0x22>
 801a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a548:	f383 8811 	msr	BASEPRI, r3
 801a54c:	f3bf 8f6f 	isb	sy
 801a550:	f3bf 8f4f 	dsb	sy
 801a554:	e7fe      	b.n	801a554 <prvTaskExitError+0x20>
 801a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a55a:	f383 8811 	msr	BASEPRI, r3
 801a55e:	f3bf 8f6f 	isb	sy
 801a562:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a566:	9b01      	ldr	r3, [sp, #4]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d0fc      	beq.n	801a566 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a56c:	b002      	add	sp, #8
 801a56e:	4770      	bx	lr
 801a570:	20000114 	.word	0x20000114

0801a574 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a574:	4808      	ldr	r0, [pc, #32]	@ (801a598 <prvPortStartFirstTask+0x24>)
 801a576:	6800      	ldr	r0, [r0, #0]
 801a578:	6800      	ldr	r0, [r0, #0]
 801a57a:	f380 8808 	msr	MSP, r0
 801a57e:	f04f 0000 	mov.w	r0, #0
 801a582:	f380 8814 	msr	CONTROL, r0
 801a586:	b662      	cpsie	i
 801a588:	b661      	cpsie	f
 801a58a:	f3bf 8f4f 	dsb	sy
 801a58e:	f3bf 8f6f 	isb	sy
 801a592:	df00      	svc	0
 801a594:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a596:	0000      	.short	0x0000
 801a598:	e000ed08 	.word	0xe000ed08

0801a59c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a59c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a5ac <vPortEnableVFP+0x10>
 801a5a0:	6801      	ldr	r1, [r0, #0]
 801a5a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a5a6:	6001      	str	r1, [r0, #0]
 801a5a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a5aa:	0000      	.short	0x0000
 801a5ac:	e000ed88 	.word	0xe000ed88

0801a5b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a5b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a5b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a5b8:	f021 0101 	bic.w	r1, r1, #1
 801a5bc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a5c0:	4b05      	ldr	r3, [pc, #20]	@ (801a5d8 <pxPortInitialiseStack+0x28>)
 801a5c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a5c6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a5ca:	f06f 0302 	mvn.w	r3, #2
 801a5ce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801a5d2:	3844      	subs	r0, #68	@ 0x44
 801a5d4:	4770      	bx	lr
 801a5d6:	bf00      	nop
 801a5d8:	0801a535 	.word	0x0801a535
 801a5dc:	00000000 	.word	0x00000000

0801a5e0 <SVC_Handler>:
	__asm volatile (
 801a5e0:	4b07      	ldr	r3, [pc, #28]	@ (801a600 <pxCurrentTCBConst2>)
 801a5e2:	6819      	ldr	r1, [r3, #0]
 801a5e4:	6808      	ldr	r0, [r1, #0]
 801a5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ea:	f380 8809 	msr	PSP, r0
 801a5ee:	f3bf 8f6f 	isb	sy
 801a5f2:	f04f 0000 	mov.w	r0, #0
 801a5f6:	f380 8811 	msr	BASEPRI, r0
 801a5fa:	4770      	bx	lr
 801a5fc:	f3af 8000 	nop.w

0801a600 <pxCurrentTCBConst2>:
 801a600:	20003ba8 	.word	0x20003ba8

0801a604 <vPortEnterCritical>:
 801a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a608:	f383 8811 	msr	BASEPRI, r3
 801a60c:	f3bf 8f6f 	isb	sy
 801a610:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801a614:	4a0b      	ldr	r2, [pc, #44]	@ (801a644 <vPortEnterCritical+0x40>)
 801a616:	6813      	ldr	r3, [r2, #0]
 801a618:	3301      	adds	r3, #1
 801a61a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801a61c:	2b01      	cmp	r3, #1
 801a61e:	d000      	beq.n	801a622 <vPortEnterCritical+0x1e>
}
 801a620:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a622:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a626:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801a62a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801a62e:	d0f7      	beq.n	801a620 <vPortEnterCritical+0x1c>
 801a630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a634:	f383 8811 	msr	BASEPRI, r3
 801a638:	f3bf 8f6f 	isb	sy
 801a63c:	f3bf 8f4f 	dsb	sy
 801a640:	e7fe      	b.n	801a640 <vPortEnterCritical+0x3c>
 801a642:	bf00      	nop
 801a644:	20000114 	.word	0x20000114

0801a648 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801a648:	4b09      	ldr	r3, [pc, #36]	@ (801a670 <vPortExitCritical+0x28>)
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	b943      	cbnz	r3, 801a660 <vPortExitCritical+0x18>
 801a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a652:	f383 8811 	msr	BASEPRI, r3
 801a656:	f3bf 8f6f 	isb	sy
 801a65a:	f3bf 8f4f 	dsb	sy
 801a65e:	e7fe      	b.n	801a65e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801a660:	3b01      	subs	r3, #1
 801a662:	4a03      	ldr	r2, [pc, #12]	@ (801a670 <vPortExitCritical+0x28>)
 801a664:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a666:	b90b      	cbnz	r3, 801a66c <vPortExitCritical+0x24>
	__asm volatile
 801a668:	f383 8811 	msr	BASEPRI, r3
}
 801a66c:	4770      	bx	lr
 801a66e:	bf00      	nop
 801a670:	20000114 	.word	0x20000114
	...

0801a680 <PendSV_Handler>:
	__asm volatile
 801a680:	f3ef 8009 	mrs	r0, PSP
 801a684:	f3bf 8f6f 	isb	sy
 801a688:	4b15      	ldr	r3, [pc, #84]	@ (801a6e0 <pxCurrentTCBConst>)
 801a68a:	681a      	ldr	r2, [r3, #0]
 801a68c:	f01e 0f10 	tst.w	lr, #16
 801a690:	bf08      	it	eq
 801a692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a69a:	6010      	str	r0, [r2, #0]
 801a69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a6a4:	f380 8811 	msr	BASEPRI, r0
 801a6a8:	f3bf 8f4f 	dsb	sy
 801a6ac:	f3bf 8f6f 	isb	sy
 801a6b0:	f7ff faee 	bl	8019c90 <vTaskSwitchContext>
 801a6b4:	f04f 0000 	mov.w	r0, #0
 801a6b8:	f380 8811 	msr	BASEPRI, r0
 801a6bc:	bc09      	pop	{r0, r3}
 801a6be:	6819      	ldr	r1, [r3, #0]
 801a6c0:	6808      	ldr	r0, [r1, #0]
 801a6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c6:	f01e 0f10 	tst.w	lr, #16
 801a6ca:	bf08      	it	eq
 801a6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a6d0:	f380 8809 	msr	PSP, r0
 801a6d4:	f3bf 8f6f 	isb	sy
 801a6d8:	4770      	bx	lr
 801a6da:	bf00      	nop
 801a6dc:	f3af 8000 	nop.w

0801a6e0 <pxCurrentTCBConst>:
 801a6e0:	20003ba8 	.word	0x20003ba8

0801a6e4 <xPortSysTickHandler>:
{
 801a6e4:	b508      	push	{r3, lr}
	__asm volatile
 801a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6ea:	f383 8811 	msr	BASEPRI, r3
 801a6ee:	f3bf 8f6f 	isb	sy
 801a6f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801a6f6:	f7ff f99d 	bl	8019a34 <xTaskIncrementTick>
 801a6fa:	b128      	cbz	r0, 801a708 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a6fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a704:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801a708:	2300      	movs	r3, #0
 801a70a:	f383 8811 	msr	BASEPRI, r3
}
 801a70e:	bd08      	pop	{r3, pc}

0801a710 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a710:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801a714:	2300      	movs	r3, #0
 801a716:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a718:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a71a:	4b05      	ldr	r3, [pc, #20]	@ (801a730 <vPortSetupTimerInterrupt+0x20>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	4905      	ldr	r1, [pc, #20]	@ (801a734 <vPortSetupTimerInterrupt+0x24>)
 801a720:	fba1 1303 	umull	r1, r3, r1, r3
 801a724:	099b      	lsrs	r3, r3, #6
 801a726:	3b01      	subs	r3, #1
 801a728:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a72a:	2307      	movs	r3, #7
 801a72c:	6113      	str	r3, [r2, #16]
}
 801a72e:	4770      	bx	lr
 801a730:	20000018 	.word	0x20000018
 801a734:	10624dd3 	.word	0x10624dd3

0801a738 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a73c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a740:	4b3d      	ldr	r3, [pc, #244]	@ (801a838 <xPortStartScheduler+0x100>)
 801a742:	429a      	cmp	r2, r3
 801a744:	d01c      	beq.n	801a780 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a746:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a74a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a74e:	4b3b      	ldr	r3, [pc, #236]	@ (801a83c <xPortStartScheduler+0x104>)
 801a750:	429a      	cmp	r2, r3
 801a752:	d01e      	beq.n	801a792 <xPortStartScheduler+0x5a>
{
 801a754:	b530      	push	{r4, r5, lr}
 801a756:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a758:	4b39      	ldr	r3, [pc, #228]	@ (801a840 <xPortStartScheduler+0x108>)
 801a75a:	781a      	ldrb	r2, [r3, #0]
 801a75c:	b2d2      	uxtb	r2, r2
 801a75e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a760:	22ff      	movs	r2, #255	@ 0xff
 801a762:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a764:	781b      	ldrb	r3, [r3, #0]
 801a766:	b2db      	uxtb	r3, r3
 801a768:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a76c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a770:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a774:	4a33      	ldr	r2, [pc, #204]	@ (801a844 <xPortStartScheduler+0x10c>)
 801a776:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a778:	4b33      	ldr	r3, [pc, #204]	@ (801a848 <xPortStartScheduler+0x110>)
 801a77a:	2207      	movs	r2, #7
 801a77c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a77e:	e01b      	b.n	801a7b8 <xPortStartScheduler+0x80>
	__asm volatile
 801a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a784:	f383 8811 	msr	BASEPRI, r3
 801a788:	f3bf 8f6f 	isb	sy
 801a78c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a790:	e7fe      	b.n	801a790 <xPortStartScheduler+0x58>
 801a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a796:	f383 8811 	msr	BASEPRI, r3
 801a79a:	f3bf 8f6f 	isb	sy
 801a79e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a7a2:	e7fe      	b.n	801a7a2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801a7a4:	4a28      	ldr	r2, [pc, #160]	@ (801a848 <xPortStartScheduler+0x110>)
 801a7a6:	6813      	ldr	r3, [r2, #0]
 801a7a8:	3b01      	subs	r3, #1
 801a7aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a7ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a7b0:	005b      	lsls	r3, r3, #1
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a7b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a7bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a7c0:	d1f0      	bne.n	801a7a4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a7c2:	4b21      	ldr	r3, [pc, #132]	@ (801a848 <xPortStartScheduler+0x110>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	2b03      	cmp	r3, #3
 801a7c8:	d008      	beq.n	801a7dc <xPortStartScheduler+0xa4>
 801a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7ce:	f383 8811 	msr	BASEPRI, r3
 801a7d2:	f3bf 8f6f 	isb	sy
 801a7d6:	f3bf 8f4f 	dsb	sy
 801a7da:	e7fe      	b.n	801a7da <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a7dc:	021b      	lsls	r3, r3, #8
 801a7de:	4a1a      	ldr	r2, [pc, #104]	@ (801a848 <xPortStartScheduler+0x110>)
 801a7e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a7e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a7e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a7e8:	9b01      	ldr	r3, [sp, #4]
 801a7ea:	b2db      	uxtb	r3, r3
 801a7ec:	4a14      	ldr	r2, [pc, #80]	@ (801a840 <xPortStartScheduler+0x108>)
 801a7ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a7f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801a7f4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a7f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a7fc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a800:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a804:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a808:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801a80c:	f7ff ff80 	bl	801a710 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801a810:	2500      	movs	r5, #0
 801a812:	4b0e      	ldr	r3, [pc, #56]	@ (801a84c <xPortStartScheduler+0x114>)
 801a814:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801a816:	f7ff fec1 	bl	801a59c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a81a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801a81e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a822:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801a826:	f7ff fea5 	bl	801a574 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801a82a:	f7ff fa31 	bl	8019c90 <vTaskSwitchContext>
	prvTaskExitError();
 801a82e:	f7ff fe81 	bl	801a534 <prvTaskExitError>
}
 801a832:	4628      	mov	r0, r5
 801a834:	b003      	add	sp, #12
 801a836:	bd30      	pop	{r4, r5, pc}
 801a838:	410fc271 	.word	0x410fc271
 801a83c:	410fc270 	.word	0x410fc270
 801a840:	e000e400 	.word	0xe000e400
 801a844:	20003cdc 	.word	0x20003cdc
 801a848:	20003cd8 	.word	0x20003cd8
 801a84c:	20000114 	.word	0x20000114

0801a850 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a850:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a854:	2b0f      	cmp	r3, #15
 801a856:	d90f      	bls.n	801a878 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a858:	4a11      	ldr	r2, [pc, #68]	@ (801a8a0 <vPortValidateInterruptPriority+0x50>)
 801a85a:	5c9b      	ldrb	r3, [r3, r2]
 801a85c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a85e:	4a11      	ldr	r2, [pc, #68]	@ (801a8a4 <vPortValidateInterruptPriority+0x54>)
 801a860:	7812      	ldrb	r2, [r2, #0]
 801a862:	429a      	cmp	r2, r3
 801a864:	d908      	bls.n	801a878 <vPortValidateInterruptPriority+0x28>
 801a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a86a:	f383 8811 	msr	BASEPRI, r3
 801a86e:	f3bf 8f6f 	isb	sy
 801a872:	f3bf 8f4f 	dsb	sy
 801a876:	e7fe      	b.n	801a876 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a878:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a87c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801a880:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a884:	4a08      	ldr	r2, [pc, #32]	@ (801a8a8 <vPortValidateInterruptPriority+0x58>)
 801a886:	6812      	ldr	r2, [r2, #0]
 801a888:	4293      	cmp	r3, r2
 801a88a:	d908      	bls.n	801a89e <vPortValidateInterruptPriority+0x4e>
 801a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a890:	f383 8811 	msr	BASEPRI, r3
 801a894:	f3bf 8f6f 	isb	sy
 801a898:	f3bf 8f4f 	dsb	sy
 801a89c:	e7fe      	b.n	801a89c <vPortValidateInterruptPriority+0x4c>
	}
 801a89e:	4770      	bx	lr
 801a8a0:	e000e3f0 	.word	0xe000e3f0
 801a8a4:	20003cdc 	.word	0x20003cdc
 801a8a8:	20003cd8 	.word	0x20003cd8

0801a8ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a8ac:	4a12      	ldr	r2, [pc, #72]	@ (801a8f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a8ae:	f012 0f07 	tst.w	r2, #7
 801a8b2:	d01f      	beq.n	801a8f4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a8b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a8ba:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801a8be:	33f8      	adds	r3, #248	@ 0xf8
 801a8c0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8c2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a8c4:	480d      	ldr	r0, [pc, #52]	@ (801a8fc <prvHeapInit+0x50>)
 801a8c6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a8c8:	2100      	movs	r1, #0
 801a8ca:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a8cc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a8ce:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8d0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a8d4:	480a      	ldr	r0, [pc, #40]	@ (801a900 <prvHeapInit+0x54>)
 801a8d6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801a8d8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a8da:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a8dc:	1a99      	subs	r1, r3, r2
 801a8de:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a8e0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8e2:	4b08      	ldr	r3, [pc, #32]	@ (801a904 <prvHeapInit+0x58>)
 801a8e4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8e6:	4b08      	ldr	r3, [pc, #32]	@ (801a908 <prvHeapInit+0x5c>)
 801a8e8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a8ea:	4b08      	ldr	r3, [pc, #32]	@ (801a90c <prvHeapInit+0x60>)
 801a8ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a8f0:	601a      	str	r2, [r3, #0]
}
 801a8f2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a8f4:	4b06      	ldr	r3, [pc, #24]	@ (801a910 <prvHeapInit+0x64>)
 801a8f6:	e7e5      	b.n	801a8c4 <prvHeapInit+0x18>
 801a8f8:	20003d00 	.word	0x20003d00
 801a8fc:	20003cf8 	.word	0x20003cf8
 801a900:	20003cf4 	.word	0x20003cf4
 801a904:	20003cec 	.word	0x20003cec
 801a908:	20003cf0 	.word	0x20003cf0
 801a90c:	20003ce0 	.word	0x20003ce0
 801a910:	000160f8 	.word	0x000160f8

0801a914 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a914:	4b16      	ldr	r3, [pc, #88]	@ (801a970 <prvInsertBlockIntoFreeList+0x5c>)
 801a916:	461a      	mov	r2, r3
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4283      	cmp	r3, r0
 801a91c:	d3fb      	bcc.n	801a916 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a91e:	6851      	ldr	r1, [r2, #4]
 801a920:	eb02 0c01 	add.w	ip, r2, r1
 801a924:	4584      	cmp	ip, r0
 801a926:	d009      	beq.n	801a93c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a928:	6841      	ldr	r1, [r0, #4]
 801a92a:	eb00 0c01 	add.w	ip, r0, r1
 801a92e:	4563      	cmp	r3, ip
 801a930:	d009      	beq.n	801a946 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a932:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a934:	4290      	cmp	r0, r2
 801a936:	d019      	beq.n	801a96c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a938:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801a93a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a93c:	6840      	ldr	r0, [r0, #4]
 801a93e:	4401      	add	r1, r0
 801a940:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801a942:	4610      	mov	r0, r2
 801a944:	e7f0      	b.n	801a928 <prvInsertBlockIntoFreeList+0x14>
{
 801a946:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a948:	4c0a      	ldr	r4, [pc, #40]	@ (801a974 <prvInsertBlockIntoFreeList+0x60>)
 801a94a:	6824      	ldr	r4, [r4, #0]
 801a94c:	42a3      	cmp	r3, r4
 801a94e:	d00b      	beq.n	801a968 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	4419      	add	r1, r3
 801a954:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a956:	6813      	ldr	r3, [r2, #0]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801a95c:	4290      	cmp	r0, r2
 801a95e:	d000      	beq.n	801a962 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a960:	6010      	str	r0, [r2, #0]
	}
}
 801a962:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a966:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a968:	6004      	str	r4, [r0, #0]
 801a96a:	e7f7      	b.n	801a95c <prvInsertBlockIntoFreeList+0x48>
 801a96c:	4770      	bx	lr
 801a96e:	bf00      	nop
 801a970:	20003cf8 	.word	0x20003cf8
 801a974:	20003cf4 	.word	0x20003cf4

0801a978 <pvPortMalloc>:
{
 801a978:	b538      	push	{r3, r4, r5, lr}
 801a97a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a97c:	f7ff f84c 	bl	8019a18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a980:	4b38      	ldr	r3, [pc, #224]	@ (801aa64 <pvPortMalloc+0xec>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	b1b3      	cbz	r3, 801a9b4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a986:	4b38      	ldr	r3, [pc, #224]	@ (801aa68 <pvPortMalloc+0xf0>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	421c      	tst	r4, r3
 801a98c:	d150      	bne.n	801aa30 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801a98e:	2c00      	cmp	r4, #0
 801a990:	d050      	beq.n	801aa34 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801a992:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a996:	f014 0f07 	tst.w	r4, #7
 801a99a:	d002      	beq.n	801a9a2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a99c:	f022 0207 	bic.w	r2, r2, #7
 801a9a0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a9a2:	2a00      	cmp	r2, #0
 801a9a4:	d055      	beq.n	801aa52 <pvPortMalloc+0xda>
 801a9a6:	4b31      	ldr	r3, [pc, #196]	@ (801aa6c <pvPortMalloc+0xf4>)
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	d353      	bcc.n	801aa56 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801a9ae:	4930      	ldr	r1, [pc, #192]	@ (801aa70 <pvPortMalloc+0xf8>)
 801a9b0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9b2:	e004      	b.n	801a9be <pvPortMalloc+0x46>
			prvHeapInit();
 801a9b4:	f7ff ff7a 	bl	801a8ac <prvHeapInit>
 801a9b8:	e7e5      	b.n	801a986 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801a9ba:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801a9bc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9be:	6863      	ldr	r3, [r4, #4]
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d202      	bcs.n	801a9ca <pvPortMalloc+0x52>
 801a9c4:	6823      	ldr	r3, [r4, #0]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d1f7      	bne.n	801a9ba <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801a9ca:	4b26      	ldr	r3, [pc, #152]	@ (801aa64 <pvPortMalloc+0xec>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	42a3      	cmp	r3, r4
 801a9d0:	d043      	beq.n	801aa5a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a9d2:	680d      	ldr	r5, [r1, #0]
 801a9d4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a9d6:	6823      	ldr	r3, [r4, #0]
 801a9d8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a9da:	6863      	ldr	r3, [r4, #4]
 801a9dc:	1a9b      	subs	r3, r3, r2
 801a9de:	2b10      	cmp	r3, #16
 801a9e0:	d910      	bls.n	801aa04 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a9e2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a9e4:	f010 0f07 	tst.w	r0, #7
 801a9e8:	d008      	beq.n	801a9fc <pvPortMalloc+0x84>
 801a9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9ee:	f383 8811 	msr	BASEPRI, r3
 801a9f2:	f3bf 8f6f 	isb	sy
 801a9f6:	f3bf 8f4f 	dsb	sy
 801a9fa:	e7fe      	b.n	801a9fa <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a9fc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a9fe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801aa00:	f7ff ff88 	bl	801a914 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801aa04:	6862      	ldr	r2, [r4, #4]
 801aa06:	4919      	ldr	r1, [pc, #100]	@ (801aa6c <pvPortMalloc+0xf4>)
 801aa08:	680b      	ldr	r3, [r1, #0]
 801aa0a:	1a9b      	subs	r3, r3, r2
 801aa0c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801aa0e:	4919      	ldr	r1, [pc, #100]	@ (801aa74 <pvPortMalloc+0xfc>)
 801aa10:	6809      	ldr	r1, [r1, #0]
 801aa12:	428b      	cmp	r3, r1
 801aa14:	d201      	bcs.n	801aa1a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801aa16:	4917      	ldr	r1, [pc, #92]	@ (801aa74 <pvPortMalloc+0xfc>)
 801aa18:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801aa1a:	4b13      	ldr	r3, [pc, #76]	@ (801aa68 <pvPortMalloc+0xf0>)
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	4313      	orrs	r3, r2
 801aa20:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801aa22:	2300      	movs	r3, #0
 801aa24:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801aa26:	4a14      	ldr	r2, [pc, #80]	@ (801aa78 <pvPortMalloc+0x100>)
 801aa28:	6813      	ldr	r3, [r2, #0]
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	6013      	str	r3, [r2, #0]
 801aa2e:	e002      	b.n	801aa36 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801aa30:	2500      	movs	r5, #0
 801aa32:	e000      	b.n	801aa36 <pvPortMalloc+0xbe>
 801aa34:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801aa36:	f7ff f889 	bl	8019b4c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa3a:	f015 0f07 	tst.w	r5, #7
 801aa3e:	d00e      	beq.n	801aa5e <pvPortMalloc+0xe6>
 801aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa44:	f383 8811 	msr	BASEPRI, r3
 801aa48:	f3bf 8f6f 	isb	sy
 801aa4c:	f3bf 8f4f 	dsb	sy
 801aa50:	e7fe      	b.n	801aa50 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801aa52:	2500      	movs	r5, #0
 801aa54:	e7ef      	b.n	801aa36 <pvPortMalloc+0xbe>
 801aa56:	2500      	movs	r5, #0
 801aa58:	e7ed      	b.n	801aa36 <pvPortMalloc+0xbe>
 801aa5a:	2500      	movs	r5, #0
 801aa5c:	e7eb      	b.n	801aa36 <pvPortMalloc+0xbe>
}
 801aa5e:	4628      	mov	r0, r5
 801aa60:	bd38      	pop	{r3, r4, r5, pc}
 801aa62:	bf00      	nop
 801aa64:	20003cf4 	.word	0x20003cf4
 801aa68:	20003ce0 	.word	0x20003ce0
 801aa6c:	20003cf0 	.word	0x20003cf0
 801aa70:	20003cf8 	.word	0x20003cf8
 801aa74:	20003cec 	.word	0x20003cec
 801aa78:	20003ce8 	.word	0x20003ce8

0801aa7c <vPortFree>:
	if( pv != NULL )
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d034      	beq.n	801aaea <vPortFree+0x6e>
{
 801aa80:	b538      	push	{r3, r4, r5, lr}
 801aa82:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801aa84:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801aa88:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801aa8c:	4a17      	ldr	r2, [pc, #92]	@ (801aaec <vPortFree+0x70>)
 801aa8e:	6812      	ldr	r2, [r2, #0]
 801aa90:	4213      	tst	r3, r2
 801aa92:	d108      	bne.n	801aaa6 <vPortFree+0x2a>
 801aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa98:	f383 8811 	msr	BASEPRI, r3
 801aa9c:	f3bf 8f6f 	isb	sy
 801aaa0:	f3bf 8f4f 	dsb	sy
 801aaa4:	e7fe      	b.n	801aaa4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801aaa6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801aaaa:	b141      	cbz	r1, 801aabe <vPortFree+0x42>
 801aaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aab0:	f383 8811 	msr	BASEPRI, r3
 801aab4:	f3bf 8f6f 	isb	sy
 801aab8:	f3bf 8f4f 	dsb	sy
 801aabc:	e7fe      	b.n	801aabc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801aabe:	ea23 0302 	bic.w	r3, r3, r2
 801aac2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801aac6:	f7fe ffa7 	bl	8019a18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801aaca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801aace:	4a08      	ldr	r2, [pc, #32]	@ (801aaf0 <vPortFree+0x74>)
 801aad0:	6813      	ldr	r3, [r2, #0]
 801aad2:	440b      	add	r3, r1
 801aad4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801aad6:	4628      	mov	r0, r5
 801aad8:	f7ff ff1c 	bl	801a914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801aadc:	4a05      	ldr	r2, [pc, #20]	@ (801aaf4 <vPortFree+0x78>)
 801aade:	6813      	ldr	r3, [r2, #0]
 801aae0:	3301      	adds	r3, #1
 801aae2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801aae4:	f7ff f832 	bl	8019b4c <xTaskResumeAll>
}
 801aae8:	bd38      	pop	{r3, r4, r5, pc}
 801aaea:	4770      	bx	lr
 801aaec:	20003ce0 	.word	0x20003ce0
 801aaf0:	20003cf0 	.word	0x20003cf0
 801aaf4:	20003ce4 	.word	0x20003ce4

0801aaf8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aafa:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801aafc:	f7fe ff8c 	bl	8019a18 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801ab00:	4b17      	ldr	r3, [pc, #92]	@ (801ab60 <vPortGetHeapStats+0x68>)
 801ab02:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801ab04:	b193      	cbz	r3, 801ab2c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ab06:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ab0a:	2500      	movs	r5, #0
 801ab0c:	462c      	mov	r4, r5
 801ab0e:	e004      	b.n	801ab1a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801ab10:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801ab12:	4a14      	ldr	r2, [pc, #80]	@ (801ab64 <vPortGetHeapStats+0x6c>)
 801ab14:	6812      	ldr	r2, [r2, #0]
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d00c      	beq.n	801ab34 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801ab1a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801ab1c:	685a      	ldr	r2, [r3, #4]
 801ab1e:	42aa      	cmp	r2, r5
 801ab20:	d900      	bls.n	801ab24 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801ab22:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801ab24:	42b2      	cmp	r2, r6
 801ab26:	d2f3      	bcs.n	801ab10 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801ab28:	4616      	mov	r6, r2
 801ab2a:	e7f1      	b.n	801ab10 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ab2c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ab30:	2500      	movs	r5, #0
 801ab32:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801ab34:	f7ff f80a 	bl	8019b4c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ab38:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801ab3a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801ab3c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801ab3e:	f7ff fd61 	bl	801a604 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801ab42:	4b09      	ldr	r3, [pc, #36]	@ (801ab68 <vPortGetHeapStats+0x70>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801ab48:	4b08      	ldr	r3, [pc, #32]	@ (801ab6c <vPortGetHeapStats+0x74>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801ab4e:	4b08      	ldr	r3, [pc, #32]	@ (801ab70 <vPortGetHeapStats+0x78>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801ab54:	4b07      	ldr	r3, [pc, #28]	@ (801ab74 <vPortGetHeapStats+0x7c>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801ab5a:	f7ff fd75 	bl	801a648 <vPortExitCritical>
}
 801ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab60:	20003cf8 	.word	0x20003cf8
 801ab64:	20003cf4 	.word	0x20003cf4
 801ab68:	20003cf0 	.word	0x20003cf0
 801ab6c:	20003ce8 	.word	0x20003ce8
 801ab70:	20003ce4 	.word	0x20003ce4
 801ab74:	20003cec 	.word	0x20003cec

0801ab78 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801ab78:	2000      	movs	r0, #0
 801ab7a:	4770      	bx	lr

0801ab7c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801ab7c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801ab7e:	fb01 f400 	mul.w	r4, r1, r0
 801ab82:	4620      	mov	r0, r4
 801ab84:	f7ff fef8 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801ab88:	4605      	mov	r5, r0
 801ab8a:	b118      	cbz	r0, 801ab94 <mg_calloc+0x18>
 801ab8c:	4622      	mov	r2, r4
 801ab8e:	2100      	movs	r1, #0
 801ab90:	f011 ff26 	bl	802c9e0 <memset>
}
 801ab94:	4628      	mov	r0, r5
 801ab96:	bd38      	pop	{r3, r4, r5, pc}

0801ab98 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801ab98:	b508      	push	{r3, lr}
 801ab9a:	4684      	mov	ip, r0
 801ab9c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801ab9e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801aba2:	428b      	cmp	r3, r1
 801aba4:	d90a      	bls.n	801abbc <block_device_read+0x24>
 801aba6:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801aba8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801abac:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801abb0:	fb01 e103 	mla	r1, r1, r3, lr
 801abb4:	f7fb f94d 	bl	8015e52 <sFLASH_ReadBuffer>
}
 801abb8:	2000      	movs	r0, #0
 801abba:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801abbc:	4b03      	ldr	r3, [pc, #12]	@ (801abcc <block_device_read+0x34>)
 801abbe:	4a04      	ldr	r2, [pc, #16]	@ (801abd0 <block_device_read+0x38>)
 801abc0:	f240 1119 	movw	r1, #281	@ 0x119
 801abc4:	4803      	ldr	r0, [pc, #12]	@ (801abd4 <block_device_read+0x3c>)
 801abc6:	f00f f9b9 	bl	8029f3c <__assert_func>
 801abca:	bf00      	nop
 801abcc:	08039074 	.word	0x08039074
 801abd0:	080390f0 	.word	0x080390f0
 801abd4:	0803908c 	.word	0x0803908c

0801abd8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801abd8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801abda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801abdc:	428b      	cmp	r3, r1
 801abde:	d906      	bls.n	801abee <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801abe0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801abe2:	fb01 f000 	mul.w	r0, r1, r0
 801abe6:	f7fb fa71 	bl	80160cc <sFLASH_EraseSector>
}
 801abea:	2000      	movs	r0, #0
 801abec:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801abee:	4b03      	ldr	r3, [pc, #12]	@ (801abfc <block_device_erase+0x24>)
 801abf0:	4a03      	ldr	r2, [pc, #12]	@ (801ac00 <block_device_erase+0x28>)
 801abf2:	f240 1121 	movw	r1, #289	@ 0x121
 801abf6:	4803      	ldr	r0, [pc, #12]	@ (801ac04 <block_device_erase+0x2c>)
 801abf8:	f00f f9a0 	bl	8029f3c <__assert_func>
 801abfc:	08039074 	.word	0x08039074
 801ac00:	080390dc 	.word	0x080390dc
 801ac04:	0803908c 	.word	0x0803908c

0801ac08 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801ac08:	b508      	push	{r3, lr}
 801ac0a:	4684      	mov	ip, r0
 801ac0c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801ac0e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801ac12:	428b      	cmp	r3, r1
 801ac14:	d90a      	bls.n	801ac2c <block_device_prog+0x24>
 801ac16:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801ac18:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801ac1c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ac20:	fb01 e103 	mla	r1, r1, r3, lr
 801ac24:	f7fb fa90 	bl	8016148 <sFLASH_WriteBuffer>
}
 801ac28:	2000      	movs	r0, #0
 801ac2a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801ac2c:	4b03      	ldr	r3, [pc, #12]	@ (801ac3c <block_device_prog+0x34>)
 801ac2e:	4a04      	ldr	r2, [pc, #16]	@ (801ac40 <block_device_prog+0x38>)
 801ac30:	f240 1129 	movw	r1, #297	@ 0x129
 801ac34:	4803      	ldr	r0, [pc, #12]	@ (801ac44 <block_device_prog+0x3c>)
 801ac36:	f00f f981 	bl	8029f3c <__assert_func>
 801ac3a:	bf00      	nop
 801ac3c:	08039074 	.word	0x08039074
 801ac40:	080390c8 	.word	0x080390c8
 801ac44:	0803908c 	.word	0x0803908c

0801ac48 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801ac48:	b530      	push	{r4, r5, lr}
 801ac4a:	b0c3      	sub	sp, #268	@ 0x10c
 801ac4c:	460d      	mov	r5, r1
 801ac4e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801ac50:	466a      	mov	r2, sp
 801ac52:	4601      	mov	r1, r0
 801ac54:	480b      	ldr	r0, [pc, #44]	@ (801ac84 <mg_fs_lfs_status+0x3c>)
 801ac56:	f004 fd97 	bl	801f788 <lfs_stat>
 801ac5a:	b110      	cbz	r0, 801ac62 <mg_fs_lfs_status+0x1a>
    return 0;
 801ac5c:	2000      	movs	r0, #0
}
 801ac5e:	b043      	add	sp, #268	@ 0x10c
 801ac60:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801ac62:	b10d      	cbz	r5, 801ac68 <mg_fs_lfs_status+0x20>
 801ac64:	9b01      	ldr	r3, [sp, #4]
 801ac66:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801ac68:	b11c      	cbz	r4, 801ac72 <mg_fs_lfs_status+0x2a>
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801ac72:	f89d 3000 	ldrb.w	r3, [sp]
 801ac76:	2b02      	cmp	r3, #2
 801ac78:	d001      	beq.n	801ac7e <mg_fs_lfs_status+0x36>
 801ac7a:	2001      	movs	r0, #1
 801ac7c:	e7ef      	b.n	801ac5e <mg_fs_lfs_status+0x16>
 801ac7e:	2004      	movs	r0, #4
 801ac80:	e7ed      	b.n	801ac5e <mg_fs_lfs_status+0x16>
 801ac82:	bf00      	nop
 801ac84:	20019e58 	.word	0x20019e58

0801ac88 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801ac88:	b530      	push	{r4, r5, lr}
 801ac8a:	b0d1      	sub	sp, #324	@ 0x144
 801ac8c:	460d      	mov	r5, r1
 801ac8e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801ac90:	4602      	mov	r2, r0
 801ac92:	a901      	add	r1, sp, #4
 801ac94:	480a      	ldr	r0, [pc, #40]	@ (801acc0 <mg_fs_lfs_list+0x38>)
 801ac96:	f004 fe9d 	bl	801f9d4 <lfs_dir_open>
 801ac9a:	b120      	cbz	r0, 801aca6 <mg_fs_lfs_list+0x1e>
}
 801ac9c:	b051      	add	sp, #324	@ 0x144
 801ac9e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801aca0:	4621      	mov	r1, r4
 801aca2:	a810      	add	r0, sp, #64	@ 0x40
 801aca4:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801aca6:	aa0e      	add	r2, sp, #56	@ 0x38
 801aca8:	a901      	add	r1, sp, #4
 801acaa:	4805      	ldr	r0, [pc, #20]	@ (801acc0 <mg_fs_lfs_list+0x38>)
 801acac:	f004 fecd 	bl	801fa4a <lfs_dir_read>
 801acb0:	2800      	cmp	r0, #0
 801acb2:	dcf5      	bgt.n	801aca0 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801acb4:	a901      	add	r1, sp, #4
 801acb6:	4802      	ldr	r0, [pc, #8]	@ (801acc0 <mg_fs_lfs_list+0x38>)
 801acb8:	f004 feb4 	bl	801fa24 <lfs_dir_close>
}
 801acbc:	e7ee      	b.n	801ac9c <mg_fs_lfs_list+0x14>
 801acbe:	bf00      	nop
 801acc0:	20019e58 	.word	0x20019e58

0801acc4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801acc4:	b570      	push	{r4, r5, r6, lr}
 801acc6:	4605      	mov	r5, r0
 801acc8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801acca:	2054      	movs	r0, #84	@ 0x54
 801accc:	f7ff fe54 	bl	801a978 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801acd0:	4606      	mov	r6, r0
 801acd2:	b188      	cbz	r0, 801acf8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801acd4:	f014 0301 	ands.w	r3, r4, #1
 801acd8:	d000      	beq.n	801acdc <mg_fs_lfs_open+0x18>
 801acda:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801acdc:	f014 0f02 	tst.w	r4, #2
 801ace0:	d003      	beq.n	801acea <mg_fs_lfs_open+0x26>
 801ace2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801ace6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801acea:	462a      	mov	r2, r5
 801acec:	4631      	mov	r1, r6
 801acee:	4806      	ldr	r0, [pc, #24]	@ (801ad08 <mg_fs_lfs_open+0x44>)
 801acf0:	f004 fd60 	bl	801f7b4 <lfs_file_open>
 801acf4:	2800      	cmp	r0, #0
 801acf6:	db01      	blt.n	801acfc <mg_fs_lfs_open+0x38>
}
 801acf8:	4630      	mov	r0, r6
 801acfa:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801acfc:	4630      	mov	r0, r6
 801acfe:	f7ff febd 	bl	801aa7c <vPortFree>
        return NULL;
 801ad02:	2600      	movs	r6, #0
 801ad04:	e7f8      	b.n	801acf8 <mg_fs_lfs_open+0x34>
 801ad06:	bf00      	nop
 801ad08:	20019e58 	.word	0x20019e58

0801ad0c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801ad0c:	b510      	push	{r4, lr}
 801ad0e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801ad10:	4601      	mov	r1, r0
 801ad12:	4803      	ldr	r0, [pc, #12]	@ (801ad20 <mg_fs_lfs_close+0x14>)
 801ad14:	f004 fd7a 	bl	801f80c <lfs_file_close>
    free(file);
 801ad18:	4620      	mov	r0, r4
 801ad1a:	f7ff feaf 	bl	801aa7c <vPortFree>
}
 801ad1e:	bd10      	pop	{r4, pc}
 801ad20:	20019e58 	.word	0x20019e58

0801ad24 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801ad24:	b508      	push	{r3, lr}
 801ad26:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801ad28:	460a      	mov	r2, r1
 801ad2a:	4601      	mov	r1, r0
 801ad2c:	4802      	ldr	r0, [pc, #8]	@ (801ad38 <mg_fs_lfs_read+0x14>)
 801ad2e:	f004 fd93 	bl	801f858 <lfs_file_read>
}
 801ad32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801ad36:	bd08      	pop	{r3, pc}
 801ad38:	20019e58 	.word	0x20019e58

0801ad3c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801ad3c:	b508      	push	{r3, lr}
 801ad3e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801ad40:	460a      	mov	r2, r1
 801ad42:	4601      	mov	r1, r0
 801ad44:	4802      	ldr	r0, [pc, #8]	@ (801ad50 <mg_fs_lfs_write+0x14>)
 801ad46:	f004 fdb3 	bl	801f8b0 <lfs_file_write>
}
 801ad4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801ad4e:	bd08      	pop	{r3, pc}
 801ad50:	20019e58 	.word	0x20019e58

0801ad54 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801ad54:	b510      	push	{r4, lr}
 801ad56:	4604      	mov	r4, r0
 801ad58:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	4601      	mov	r1, r0
 801ad5e:	4809      	ldr	r0, [pc, #36]	@ (801ad84 <mg_fs_lfs_seek+0x30>)
 801ad60:	f004 fdd2 	bl	801f908 <lfs_file_seek>
 801ad64:	2800      	cmp	r0, #0
 801ad66:	db06      	blt.n	801ad76 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801ad68:	4621      	mov	r1, r4
 801ad6a:	4806      	ldr	r0, [pc, #24]	@ (801ad84 <mg_fs_lfs_seek+0x30>)
 801ad6c:	f004 fdf8 	bl	801f960 <lfs_file_tell>
     if (pos < 0) {
 801ad70:	2800      	cmp	r0, #0
 801ad72:	db03      	blt.n	801ad7c <mg_fs_lfs_seek+0x28>
}
 801ad74:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801ad76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad7a:	e7fb      	b.n	801ad74 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801ad7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad80:	e7f8      	b.n	801ad74 <mg_fs_lfs_seek+0x20>
 801ad82:	bf00      	nop
 801ad84:	20019e58 	.word	0x20019e58

0801ad88 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801ad88:	b508      	push	{r3, lr}
 801ad8a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801ad8c:	4601      	mov	r1, r0
 801ad8e:	4803      	ldr	r0, [pc, #12]	@ (801ad9c <mg_fs_lfs_rename+0x14>)
 801ad90:	f004 fce5 	bl	801f75e <lfs_rename>
}
 801ad94:	fab0 f080 	clz	r0, r0
 801ad98:	0940      	lsrs	r0, r0, #5
 801ad9a:	bd08      	pop	{r3, pc}
 801ad9c:	20019e58 	.word	0x20019e58

0801ada0 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801ada0:	b508      	push	{r3, lr}
 801ada2:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801ada4:	4803      	ldr	r0, [pc, #12]	@ (801adb4 <mg_fs_lfs_remove+0x14>)
 801ada6:	f004 fcc7 	bl	801f738 <lfs_remove>
}
 801adaa:	fab0 f080 	clz	r0, r0
 801adae:	0940      	lsrs	r0, r0, #5
 801adb0:	bd08      	pop	{r3, pc}
 801adb2:	bf00      	nop
 801adb4:	20019e58 	.word	0x20019e58

0801adb8 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801adb8:	b508      	push	{r3, lr}
 801adba:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801adbc:	4803      	ldr	r0, [pc, #12]	@ (801adcc <mg_fs_lfs_mkdir+0x14>)
 801adbe:	f004 fdf5 	bl	801f9ac <lfs_mkdir>
}
 801adc2:	fab0 f080 	clz	r0, r0
 801adc6:	0940      	lsrs	r0, r0, #5
 801adc8:	bd08      	pop	{r3, pc}
 801adca:	bf00      	nop
 801adcc:	20019e58 	.word	0x20019e58

0801add0 <mg_fs_mounted>:
}
 801add0:	4b01      	ldr	r3, [pc, #4]	@ (801add8 <mg_fs_mounted+0x8>)
 801add2:	7818      	ldrb	r0, [r3, #0]
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop
 801add8:	20019df8 	.word	0x20019df8

0801addc <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	b090      	sub	sp, #64	@ 0x40
 801ade2:	4680      	mov	r8, r0
 801ade4:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801ade6:	4668      	mov	r0, sp
 801ade8:	f7fb f88c 	bl	8015f04 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801adec:	9b00      	ldr	r3, [sp, #0]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d054      	beq.n	801ae9c <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801adf2:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801adf6:	4621      	mov	r1, r4
 801adf8:	2001      	movs	r0, #1
 801adfa:	f7ff febf 	bl	801ab7c <mg_calloc>
 801adfe:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801ae00:	4621      	mov	r1, r4
 801ae02:	2001      	movs	r0, #1
 801ae04:	f7ff feba 	bl	801ab7c <mg_calloc>
 801ae08:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	2001      	movs	r0, #1
 801ae0e:	f7ff feb5 	bl	801ab7c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801ae12:	2d00      	cmp	r5, #0
 801ae14:	d02b      	beq.n	801ae6e <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 801ae16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ae1a:	4922      	ldr	r1, [pc, #136]	@ (801aea4 <lfs_fs_ll_init+0xc8>)
 801ae1c:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801ae1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ae22:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801ae24:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ae28:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801ae2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ae2e:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801ae30:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801ae32:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801ae34:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801ae36:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801ae38:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801ae3a:	4b1b      	ldr	r3, [pc, #108]	@ (801aea8 <lfs_fs_ll_init+0xcc>)
 801ae3c:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801ae3e:	4b1b      	ldr	r3, [pc, #108]	@ (801aeac <lfs_fs_ll_init+0xd0>)
 801ae40:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801ae42:	4b1b      	ldr	r3, [pc, #108]	@ (801aeb0 <lfs_fs_ll_init+0xd4>)
 801ae44:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801ae46:	4b1b      	ldr	r3, [pc, #108]	@ (801aeb4 <lfs_fs_ll_init+0xd8>)
 801ae48:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801ae4a:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 801ae4e:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801ae50:	f242 7310 	movw	r3, #10000	@ 0x2710
 801ae54:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801ae56:	4818      	ldr	r0, [pc, #96]	@ (801aeb8 <lfs_fs_ll_init+0xdc>)
 801ae58:	f004 fc5b 	bl	801f712 <lfs_mount>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	db0d      	blt.n	801ae7c <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 801ae60:	4b16      	ldr	r3, [pc, #88]	@ (801aebc <lfs_fs_ll_init+0xe0>)
 801ae62:	2201      	movs	r2, #1
 801ae64:	701a      	strb	r2, [r3, #0]
    	return 0;
 801ae66:	2000      	movs	r0, #0
}
 801ae68:	b010      	add	sp, #64	@ 0x40
 801ae6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801ae6e:	2e00      	cmp	r6, #0
 801ae70:	d1d1      	bne.n	801ae16 <lfs_fs_ll_init+0x3a>
 801ae72:	2800      	cmp	r0, #0
 801ae74:	d1cf      	bne.n	801ae16 <lfs_fs_ll_init+0x3a>
		return -2;
 801ae76:	f06f 0001 	mvn.w	r0, #1
 801ae7a:	e7f5      	b.n	801ae68 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 801ae7c:	4d09      	ldr	r5, [pc, #36]	@ (801aea4 <lfs_fs_ll_init+0xc8>)
 801ae7e:	4c0e      	ldr	r4, [pc, #56]	@ (801aeb8 <lfs_fs_ll_init+0xdc>)
 801ae80:	4629      	mov	r1, r5
 801ae82:	4620      	mov	r0, r4
 801ae84:	f004 fc32 	bl	801f6ec <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801ae88:	4629      	mov	r1, r5
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	f004 fc41 	bl	801f712 <lfs_mount>
 801ae90:	2800      	cmp	r0, #0
 801ae92:	d1e9      	bne.n	801ae68 <lfs_fs_ll_init+0x8c>
 801ae94:	4b09      	ldr	r3, [pc, #36]	@ (801aebc <lfs_fs_ll_init+0xe0>)
 801ae96:	2201      	movs	r2, #1
 801ae98:	701a      	strb	r2, [r3, #0]
    	return err;
 801ae9a:	e7e5      	b.n	801ae68 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801ae9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aea0:	e7e2      	b.n	801ae68 <lfs_fs_ll_init+0x8c>
 801aea2:	bf00      	nop
 801aea4:	20019dfc 	.word	0x20019dfc
 801aea8:	0801ab99 	.word	0x0801ab99
 801aeac:	0801ac09 	.word	0x0801ac09
 801aeb0:	0801abd9 	.word	0x0801abd9
 801aeb4:	0801ab79 	.word	0x0801ab79
 801aeb8:	20019e58 	.word	0x20019e58
 801aebc:	20019df8 	.word	0x20019df8

0801aec0 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aec0:	6803      	ldr	r3, [r0, #0]
 801aec2:	680a      	ldr	r2, [r1, #0]
 801aec4:	4293      	cmp	r3, r2
 801aec6:	d004      	beq.n	801aed2 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aec8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aeca:	428b      	cmp	r3, r1
 801aecc:	d015      	beq.n	801aefa <lfs_pair_issync+0x3a>
 801aece:	2000      	movs	r0, #0
 801aed0:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801aed2:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aed4:	6844      	ldr	r4, [r0, #4]
 801aed6:	684d      	ldr	r5, [r1, #4]
 801aed8:	42ac      	cmp	r4, r5
 801aeda:	d00a      	beq.n	801aef2 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aedc:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aede:	428b      	cmp	r3, r1
 801aee0:	d002      	beq.n	801aee8 <lfs_pair_issync+0x28>
 801aee2:	2000      	movs	r0, #0
}
 801aee4:	bc30      	pop	{r4, r5}
 801aee6:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aee8:	6843      	ldr	r3, [r0, #4]
 801aeea:	429a      	cmp	r2, r3
 801aeec:	d003      	beq.n	801aef6 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aeee:	2000      	movs	r0, #0
 801aef0:	e7f8      	b.n	801aee4 <lfs_pair_issync+0x24>
 801aef2:	2001      	movs	r0, #1
 801aef4:	e7f6      	b.n	801aee4 <lfs_pair_issync+0x24>
 801aef6:	2001      	movs	r0, #1
 801aef8:	e7f4      	b.n	801aee4 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aefa:	6843      	ldr	r3, [r0, #4]
 801aefc:	429a      	cmp	r2, r3
 801aefe:	d001      	beq.n	801af04 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801af00:	2000      	movs	r0, #0
 801af02:	4770      	bx	lr
 801af04:	2001      	movs	r0, #1
}
 801af06:	4770      	bx	lr

0801af08 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801af08:	2300      	movs	r3, #0
 801af0a:	2b02      	cmp	r3, #2
 801af0c:	dc0d      	bgt.n	801af2a <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801af0e:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801af10:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801af14:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801af18:	4062      	eors	r2, r4
 801af1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801af1e:	3301      	adds	r3, #1
 801af20:	2b02      	cmp	r3, #2
 801af22:	ddf5      	ble.n	801af10 <lfs_gstate_xor+0x8>
    }
}
 801af24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af28:	4770      	bx	lr
 801af2a:	4770      	bx	lr

0801af2c <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af2c:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801af2e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af30:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801af34:	d00f      	beq.n	801af56 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801af36:	6843      	ldr	r3, [r0, #4]
 801af38:	680a      	ldr	r2, [r1, #0]
 801af3a:	4293      	cmp	r3, r2
 801af3c:	d00d      	beq.n	801af5a <lfs_gstate_hasmovehere+0x2e>
 801af3e:	6880      	ldr	r0, [r0, #8]
 801af40:	6849      	ldr	r1, [r1, #4]
 801af42:	4288      	cmp	r0, r1
 801af44:	d00b      	beq.n	801af5e <lfs_gstate_hasmovehere+0x32>
 801af46:	428b      	cmp	r3, r1
 801af48:	d00b      	beq.n	801af62 <lfs_gstate_hasmovehere+0x36>
 801af4a:	4282      	cmp	r2, r0
 801af4c:	d001      	beq.n	801af52 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af4e:	2000      	movs	r0, #0
}
 801af50:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af52:	2001      	movs	r0, #1
 801af54:	4770      	bx	lr
 801af56:	2000      	movs	r0, #0
 801af58:	4770      	bx	lr
 801af5a:	2001      	movs	r0, #1
 801af5c:	4770      	bx	lr
 801af5e:	2001      	movs	r0, #1
 801af60:	4770      	bx	lr
 801af62:	2001      	movs	r0, #1
 801af64:	4770      	bx	lr

0801af66 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801af66:	b082      	sub	sp, #8
 801af68:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801af6a:	ab01      	add	r3, sp, #4
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	b11b      	cbz	r3, 801af78 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801af70:	428b      	cmp	r3, r1
 801af72:	d1fb      	bne.n	801af6c <lfs_mlist_isopen+0x6>
            return true;
 801af74:	2001      	movs	r0, #1
 801af76:	e000      	b.n	801af7a <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801af78:	2000      	movs	r0, #0
}
 801af7a:	b002      	add	sp, #8
 801af7c:	4770      	bx	lr

0801af7e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801af7e:	3028      	adds	r0, #40	@ 0x28
 801af80:	e000      	b.n	801af84 <lfs_mlist_remove+0x6>
 801af82:	4618      	mov	r0, r3
 801af84:	6803      	ldr	r3, [r0, #0]
 801af86:	b123      	cbz	r3, 801af92 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801af88:	428b      	cmp	r3, r1
 801af8a:	d1fa      	bne.n	801af82 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	6003      	str	r3, [r0, #0]
            break;
 801af90:	4770      	bx	lr
        }
    }
}
 801af92:	4770      	bx	lr

0801af94 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801af94:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801af96:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801af98:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801af9a:	4770      	bx	lr

0801af9c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801af9c:	4800      	ldr	r0, [pc, #0]	@ (801afa0 <lfs_fs_disk_version+0x4>)
 801af9e:	4770      	bx	lr
 801afa0:	00020001 	.word	0x00020001

0801afa4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801afa4:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801afa6:	f7ff fff9 	bl	801af9c <lfs_fs_disk_version>

}
 801afaa:	0c00      	lsrs	r0, r0, #16
 801afac:	bd08      	pop	{r3, pc}

0801afae <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801afae:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801afb0:	f7ff fff4 	bl	801af9c <lfs_fs_disk_version>
}
 801afb4:	b280      	uxth	r0, r0
 801afb6:	bd08      	pop	{r3, pc}

0801afb8 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801afb8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801afba:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801afbc:	4770      	bx	lr

0801afbe <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801afbe:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801afc0:	2200      	movs	r2, #0
 801afc2:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801afc4:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801afc6:	f7ff fff7 	bl	801afb8 <lfs_alloc_ckpoint>
}
 801afca:	bd08      	pop	{r3, pc}

0801afcc <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801afcc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801afce:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801afd0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801afd2:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801afd4:	fbb1 f2f3 	udiv	r2, r1, r3
 801afd8:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801afdc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801afde:	428b      	cmp	r3, r1
 801afe0:	d90d      	bls.n	801affe <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801afe2:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801afe4:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801afe6:	08c8      	lsrs	r0, r1, #3
 801afe8:	5c23      	ldrb	r3, [r4, r0]
 801afea:	f001 0107 	and.w	r1, r1, #7
 801afee:	2201      	movs	r2, #1
 801aff0:	408a      	lsls	r2, r1
 801aff2:	4313      	orrs	r3, r2
 801aff4:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801aff6:	2000      	movs	r0, #0
 801aff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801affc:	4770      	bx	lr
 801affe:	2000      	movs	r0, #0
 801b000:	4770      	bx	lr
	...

0801b004 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801b004:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b006:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801b00a:	d01c      	beq.n	801b046 <lfs_dir_traverse_filter+0x42>
 801b00c:	4a19      	ldr	r2, [pc, #100]	@ (801b074 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801b00e:	6803      	ldr	r3, [r0, #0]
 801b010:	ea83 0401 	eor.w	r4, r3, r1
 801b014:	4214      	tst	r4, r2
 801b016:	d018      	beq.n	801b04a <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b018:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801b01c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b020:	d013      	beq.n	801b04a <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801b022:	4c14      	ldr	r4, [pc, #80]	@ (801b074 <lfs_dir_traverse_filter+0x70>)
 801b024:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801b026:	4a14      	ldr	r2, [pc, #80]	@ (801b078 <lfs_dir_traverse_filter+0x74>)
 801b028:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b02a:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b02e:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801b032:	4294      	cmp	r4, r2
 801b034:	d009      	beq.n	801b04a <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801b036:	0d0a      	lsrs	r2, r1, #20
 801b038:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b03c:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801b040:	d009      	beq.n	801b056 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801b042:	2000      	movs	r0, #0
 801b044:	e004      	b.n	801b050 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b046:	4a0d      	ldr	r2, [pc, #52]	@ (801b07c <lfs_dir_traverse_filter+0x78>)
 801b048:	e7e1      	b.n	801b00e <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801b04a:	2300      	movs	r3, #0
 801b04c:	6003      	str	r3, [r0, #0]
        return true;
 801b04e:	2001      	movs	r0, #1
}
 801b050:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b054:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801b056:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801b05a:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b05e:	428c      	cmp	r4, r1
 801b060:	d305      	bcc.n	801b06e <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801b062:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b064:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801b068:	6003      	str	r3, [r0, #0]
    return false;
 801b06a:	2000      	movs	r0, #0
 801b06c:	e7f0      	b.n	801b050 <lfs_dir_traverse_filter+0x4c>
 801b06e:	2000      	movs	r0, #0
 801b070:	e7ee      	b.n	801b050 <lfs_dir_traverse_filter+0x4c>
 801b072:	bf00      	nop
 801b074:	7ffffc00 	.word	0x7ffffc00
 801b078:	000ffc00 	.word	0x000ffc00
 801b07c:	700ffc00 	.word	0x700ffc00

0801b080 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b080:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b088:	bf08      	it	eq
 801b08a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801b08c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b090:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801b092:	6803      	ldr	r3, [r0, #0]
 801b094:	440b      	add	r3, r1
 801b096:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b098:	2000      	movs	r0, #0
 801b09a:	4770      	bx	lr

0801b09c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801b09c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	dd0b      	ble.n	801b0bc <lfs_dir_needsrelocation+0x20>
 801b0a4:	688a      	ldr	r2, [r1, #8]
 801b0a6:	3201      	adds	r2, #1
 801b0a8:	3301      	adds	r3, #1
 801b0aa:	f043 0301 	orr.w	r3, r3, #1
 801b0ae:	fbb2 f1f3 	udiv	r1, r2, r3
 801b0b2:	fb03 2211 	mls	r2, r3, r1, r2
 801b0b6:	b11a      	cbz	r2, 801b0c0 <lfs_dir_needsrelocation+0x24>
 801b0b8:	2000      	movs	r0, #0
 801b0ba:	4770      	bx	lr
 801b0bc:	2000      	movs	r0, #0
 801b0be:	4770      	bx	lr
 801b0c0:	2001      	movs	r0, #1
}
 801b0c2:	4770      	bx	lr

0801b0c4 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801b0c4:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801b0c6:	f7ff ff5a 	bl	801af7e <lfs_mlist_remove>

    return 0;
}
 801b0ca:	2000      	movs	r0, #0
 801b0cc:	bd08      	pop	{r3, pc}

0801b0ce <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801b0ce:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b0d0:	4770      	bx	lr

0801b0d2 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801b0d2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b0d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b0d8:	d101      	bne.n	801b0de <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801b0da:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801b0dc:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801b0de:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b0e0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801b0e2:	4298      	cmp	r0, r3
 801b0e4:	bf38      	it	cc
 801b0e6:	4618      	movcc	r0, r3
 801b0e8:	4770      	bx	lr

0801b0ea <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b0ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b0ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801b0f0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b0f4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b0f6:	4770      	bx	lr

0801b0f8 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801b0f8:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b0fa:	4b13      	ldr	r3, [pc, #76]	@ (801b148 <lfs_fs_prepmove+0x50>)
 801b0fc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801b0fe:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b100:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801b104:	4561      	cmp	r1, ip
 801b106:	d017      	beq.n	801b138 <lfs_fs_prepmove+0x40>
 801b108:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801b10c:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801b110:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b114:	ea43 030c 	orr.w	r3, r3, ip
 801b118:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b11a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b11e:	4299      	cmp	r1, r3
 801b120:	d00d      	beq.n	801b13e <lfs_fs_prepmove+0x46>
 801b122:	6813      	ldr	r3, [r2, #0]
 801b124:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b126:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b12a:	4299      	cmp	r1, r3
 801b12c:	d009      	beq.n	801b142 <lfs_fs_prepmove+0x4a>
 801b12e:	6853      	ldr	r3, [r2, #4]
 801b130:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801b132:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b136:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b138:	f04f 0c00 	mov.w	ip, #0
 801b13c:	e7ea      	b.n	801b114 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b13e:	2300      	movs	r3, #0
 801b140:	e7f0      	b.n	801b124 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b142:	2300      	movs	r3, #0
 801b144:	e7f4      	b.n	801b130 <lfs_fs_prepmove+0x38>
 801b146:	bf00      	nop
 801b148:	800003ff 	.word	0x800003ff

0801b14c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801b14c:	6803      	ldr	r3, [r0, #0]
 801b14e:	3301      	adds	r3, #1
 801b150:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b152:	2000      	movs	r0, #0
 801b154:	4770      	bx	lr
	...

0801b158 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801b158:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801b15a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b15c:	428b      	cmp	r3, r1
 801b15e:	d905      	bls.n	801b16c <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b160:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b162:	68c3      	ldr	r3, [r0, #12]
 801b164:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b166:	2800      	cmp	r0, #0
 801b168:	dc07      	bgt.n	801b17a <lfs_bd_erase+0x22>
}
 801b16a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b16c:	4b06      	ldr	r3, [pc, #24]	@ (801b188 <lfs_bd_erase+0x30>)
 801b16e:	4a07      	ldr	r2, [pc, #28]	@ (801b18c <lfs_bd_erase+0x34>)
 801b170:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b174:	4806      	ldr	r0, [pc, #24]	@ (801b190 <lfs_bd_erase+0x38>)
 801b176:	f00e fee1 	bl	8029f3c <__assert_func>
    LFS_ASSERT(err <= 0);
 801b17a:	4b06      	ldr	r3, [pc, #24]	@ (801b194 <lfs_bd_erase+0x3c>)
 801b17c:	4a03      	ldr	r2, [pc, #12]	@ (801b18c <lfs_bd_erase+0x34>)
 801b17e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b182:	4803      	ldr	r0, [pc, #12]	@ (801b190 <lfs_bd_erase+0x38>)
 801b184:	f00e feda 	bl	8029f3c <__assert_func>
 801b188:	080391f0 	.word	0x080391f0
 801b18c:	08039e50 	.word	0x08039e50
 801b190:	08039104 	.word	0x08039104
 801b194:	08039134 	.word	0x08039134

0801b198 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b198:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b19a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b19c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b1a0:	b90a      	cbnz	r2, 801b1a6 <lfs_fs_preporphans+0xe>
 801b1a2:	2900      	cmp	r1, #0
 801b1a4:	db12      	blt.n	801b1cc <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b1a6:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b1aa:	d901      	bls.n	801b1b0 <lfs_fs_preporphans+0x18>
 801b1ac:	2900      	cmp	r1, #0
 801b1ae:	dc14      	bgt.n	801b1da <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b1b0:	4419      	add	r1, r3
 801b1b2:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b1b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b1b8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b1bc:	3900      	subs	r1, #0
 801b1be:	bf18      	it	ne
 801b1c0:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b1c2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b1c6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b1c8:	2000      	movs	r0, #0
 801b1ca:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b1cc:	4b06      	ldr	r3, [pc, #24]	@ (801b1e8 <lfs_fs_preporphans+0x50>)
 801b1ce:	4a07      	ldr	r2, [pc, #28]	@ (801b1ec <lfs_fs_preporphans+0x54>)
 801b1d0:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b1d4:	4806      	ldr	r0, [pc, #24]	@ (801b1f0 <lfs_fs_preporphans+0x58>)
 801b1d6:	f00e feb1 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b1da:	4b06      	ldr	r3, [pc, #24]	@ (801b1f4 <lfs_fs_preporphans+0x5c>)
 801b1dc:	4a03      	ldr	r2, [pc, #12]	@ (801b1ec <lfs_fs_preporphans+0x54>)
 801b1de:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b1e2:	4803      	ldr	r0, [pc, #12]	@ (801b1f0 <lfs_fs_preporphans+0x58>)
 801b1e4:	f00e feaa 	bl	8029f3c <__assert_func>
 801b1e8:	08039140 	.word	0x08039140
 801b1ec:	08039e20 	.word	0x08039e20
 801b1f0:	08039104 	.word	0x08039104
 801b1f4:	08039178 	.word	0x08039178

0801b1f8 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b1f8:	b510      	push	{r4, lr}
 801b1fa:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b1fc:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b1fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b200:	21ff      	movs	r1, #255	@ 0xff
 801b202:	68e0      	ldr	r0, [r4, #12]
 801b204:	f011 fbec 	bl	802c9e0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b20c:	6023      	str	r3, [r4, #0]
}
 801b20e:	bd10      	pop	{r4, pc}

0801b210 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b212:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b214:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b216:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b218:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b21a:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b21e:	42bd      	cmp	r5, r7
 801b220:	d312      	bcc.n	801b248 <lfs_ctz_index+0x38>
 801b222:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b224:	3801      	subs	r0, #1
 801b226:	f7f5 fdaf 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b22a:	1c84      	adds	r4, r0, #2
 801b22c:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b230:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b234:	fb04 5517 	mls	r5, r4, r7, r5
 801b238:	4620      	mov	r0, r4
 801b23a:	f7f5 fda5 	bl	8010d88 <__popcountsi2>
 801b23e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b242:	6035      	str	r5, [r6, #0]
    return i;
 801b244:	4620      	mov	r0, r4
}
 801b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b248:	2000      	movs	r0, #0
 801b24a:	e7fc      	b.n	801b246 <lfs_ctz_index+0x36>

0801b24c <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b250:	b087      	sub	sp, #28
 801b252:	4615      	mov	r5, r2
 801b254:	469b      	mov	fp, r3
 801b256:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b258:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b25a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b25e:	eb04 020a 	add.w	r2, r4, sl
 801b262:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b266:	429a      	cmp	r2, r3
 801b268:	f200 80d0 	bhi.w	801b40c <lfs_bd_read+0x1c0>
 801b26c:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b26e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b270:	2b00      	cmp	r3, #0
 801b272:	f000 80c7 	beq.w	801b404 <lfs_bd_read+0x1b8>
 801b276:	42bb      	cmp	r3, r7
 801b278:	f240 80cb 	bls.w	801b412 <lfs_bd_read+0x1c6>
 801b27c:	9003      	str	r0, [sp, #12]
 801b27e:	e084      	b.n	801b38a <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b280:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b284:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b288:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b28a:	42a1      	cmp	r1, r4
 801b28c:	d91e      	bls.n	801b2cc <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b28e:	42a3      	cmp	r3, r4
 801b290:	d905      	bls.n	801b29e <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b292:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b294:	4553      	cmp	r3, sl
 801b296:	bf28      	it	cs
 801b298:	4653      	movcs	r3, sl
 801b29a:	4698      	mov	r8, r3
 801b29c:	e081      	b.n	801b3a2 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b29e:	1b19      	subs	r1, r3, r4
 801b2a0:	eb02 0801 	add.w	r8, r2, r1
 801b2a4:	45d0      	cmp	r8, sl
 801b2a6:	bf28      	it	cs
 801b2a8:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b2aa:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b2ae:	1ae3      	subs	r3, r4, r3
 801b2b0:	4642      	mov	r2, r8
 801b2b2:	4419      	add	r1, r3
 801b2b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b2b6:	f012 fdcf 	bl	802de58 <memcpy>
                data += diff;
 801b2ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2bc:	4443      	add	r3, r8
 801b2be:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b2c0:	4444      	add	r4, r8
                size -= diff;
 801b2c2:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b2c6:	e060      	b.n	801b38a <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b2c8:	46d0      	mov	r8, sl
 801b2ca:	e06a      	b.n	801b3a2 <lfs_bd_read+0x156>
 801b2cc:	46d0      	mov	r8, sl
 801b2ce:	e068      	b.n	801b3a2 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b2d0:	686b      	ldr	r3, [r5, #4]
 801b2d2:	68aa      	ldr	r2, [r5, #8]
 801b2d4:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b2d6:	42a1      	cmp	r1, r4
 801b2d8:	d966      	bls.n	801b3a8 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b2da:	42a3      	cmp	r3, r4
 801b2dc:	d904      	bls.n	801b2e8 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b2de:	1b1b      	subs	r3, r3, r4
 801b2e0:	4598      	cmp	r8, r3
 801b2e2:	bf28      	it	cs
 801b2e4:	4698      	movcs	r8, r3
 801b2e6:	e05f      	b.n	801b3a8 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b2e8:	1b19      	subs	r1, r3, r4
 801b2ea:	440a      	add	r2, r1
 801b2ec:	4590      	cmp	r8, r2
 801b2ee:	bf28      	it	cs
 801b2f0:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b2f2:	68e9      	ldr	r1, [r5, #12]
 801b2f4:	1ae3      	subs	r3, r4, r3
 801b2f6:	4642      	mov	r2, r8
 801b2f8:	4419      	add	r1, r3
 801b2fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b2fc:	f012 fdac 	bl	802de58 <memcpy>
                data += diff;
 801b300:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b302:	4443      	add	r3, r8
 801b304:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b306:	4444      	add	r4, r8
                size -= diff;
 801b308:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b30c:	e03d      	b.n	801b38a <lfs_bd_read+0x13e>
            data += diff;
 801b30e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b310:	9b04      	ldr	r3, [sp, #16]
 801b312:	441a      	add	r2, r3
 801b314:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801b316:	441c      	add	r4, r3
            size -= diff;
 801b318:	9b05      	ldr	r3, [sp, #20]
 801b31a:	eba3 0308 	sub.w	r3, r3, r8
 801b31e:	449a      	add	sl, r3
            continue;
 801b320:	e033      	b.n	801b38a <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b322:	9b03      	ldr	r3, [sp, #12]
 801b324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b326:	b10b      	cbz	r3, 801b32c <lfs_bd_read+0xe0>
 801b328:	42bb      	cmp	r3, r7
 801b32a:	d95f      	bls.n	801b3ec <lfs_bd_read+0x1a0>
        rcache->block = block;
 801b32c:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b32e:	9e03      	ldr	r6, [sp, #12]
 801b330:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b332:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801b334:	fbb4 f3f2 	udiv	r3, r4, r2
 801b338:	fb02 4313 	mls	r3, r2, r3, r4
 801b33c:	1ae2      	subs	r2, r4, r3
 801b33e:	606a      	str	r2, [r5, #4]
                lfs_min(
 801b340:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801b344:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801b348:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b34c:	4401      	add	r1, r0
 801b34e:	3901      	subs	r1, #1
    return a - (a % alignment);
 801b350:	fbb1 fef0 	udiv	lr, r1, r0
 801b354:	fb00 101e 	mls	r0, r0, lr, r1
 801b358:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801b35a:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801b35e:	1b1b      	subs	r3, r3, r4
 801b360:	4288      	cmp	r0, r1
 801b362:	bf94      	ite	ls
 801b364:	181b      	addls	r3, r3, r0
 801b366:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801b368:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801b36c:	428b      	cmp	r3, r1
 801b36e:	bf28      	it	cs
 801b370:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801b372:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801b374:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801b376:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b37a:	9300      	str	r3, [sp, #0]
 801b37c:	68eb      	ldr	r3, [r5, #12]
 801b37e:	4639      	mov	r1, r7
 801b380:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801b382:	1e03      	subs	r3, r0, #0
 801b384:	dc38      	bgt.n	801b3f8 <lfs_bd_read+0x1ac>
        if (err) {
 801b386:	2b00      	cmp	r3, #0
 801b388:	d146      	bne.n	801b418 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801b38a:	f1ba 0f00 	cmp.w	sl, #0
 801b38e:	d03b      	beq.n	801b408 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801b390:	f1b9 0f00 	cmp.w	r9, #0
 801b394:	d098      	beq.n	801b2c8 <lfs_bd_read+0x7c>
 801b396:	f8d9 3000 	ldr.w	r3, [r9]
 801b39a:	42bb      	cmp	r3, r7
 801b39c:	f43f af70 	beq.w	801b280 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801b3a0:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801b3a2:	682b      	ldr	r3, [r5, #0]
 801b3a4:	42bb      	cmp	r3, r7
 801b3a6:	d093      	beq.n	801b2d0 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801b3a8:	45da      	cmp	sl, fp
 801b3aa:	d3ba      	bcc.n	801b322 <lfs_bd_read+0xd6>
 801b3ac:	9b03      	ldr	r3, [sp, #12]
 801b3ae:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b3b0:	69c2      	ldr	r2, [r0, #28]
 801b3b2:	fbb4 f3f2 	udiv	r3, r4, r2
 801b3b6:	fb02 4313 	mls	r3, r2, r3, r4
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d1b1      	bne.n	801b322 <lfs_bd_read+0xd6>
 801b3be:	4552      	cmp	r2, sl
 801b3c0:	d8af      	bhi.n	801b322 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801b3c2:	fbb8 f3f2 	udiv	r3, r8, r2
 801b3c6:	fb02 8313 	mls	r3, r2, r3, r8
 801b3ca:	9305      	str	r3, [sp, #20]
 801b3cc:	eba8 0203 	sub.w	r2, r8, r3
 801b3d0:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801b3d2:	6842      	ldr	r2, [r0, #4]
 801b3d4:	4616      	mov	r6, r2
 801b3d6:	9304      	str	r3, [sp, #16]
 801b3d8:	9300      	str	r3, [sp, #0]
 801b3da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b3dc:	4622      	mov	r2, r4
 801b3de:	4639      	mov	r1, r7
 801b3e0:	47b0      	blx	r6
            if (err) {
 801b3e2:	2800      	cmp	r0, #0
 801b3e4:	d093      	beq.n	801b30e <lfs_bd_read+0xc2>
}
 801b3e6:	b007      	add	sp, #28
 801b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b3ec:	4b0b      	ldr	r3, [pc, #44]	@ (801b41c <lfs_bd_read+0x1d0>)
 801b3ee:	4a0c      	ldr	r2, [pc, #48]	@ (801b420 <lfs_bd_read+0x1d4>)
 801b3f0:	216b      	movs	r1, #107	@ 0x6b
 801b3f2:	480c      	ldr	r0, [pc, #48]	@ (801b424 <lfs_bd_read+0x1d8>)
 801b3f4:	f00e fda2 	bl	8029f3c <__assert_func>
        LFS_ASSERT(err <= 0);
 801b3f8:	4b0b      	ldr	r3, [pc, #44]	@ (801b428 <lfs_bd_read+0x1dc>)
 801b3fa:	4a09      	ldr	r2, [pc, #36]	@ (801b420 <lfs_bd_read+0x1d4>)
 801b3fc:	2176      	movs	r1, #118	@ 0x76
 801b3fe:	4809      	ldr	r0, [pc, #36]	@ (801b424 <lfs_bd_read+0x1d8>)
 801b400:	f00e fd9c 	bl	8029f3c <__assert_func>
 801b404:	9003      	str	r0, [sp, #12]
 801b406:	e7c0      	b.n	801b38a <lfs_bd_read+0x13e>
    return 0;
 801b408:	2000      	movs	r0, #0
 801b40a:	e7ec      	b.n	801b3e6 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801b40c:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b410:	e7e9      	b.n	801b3e6 <lfs_bd_read+0x19a>
 801b412:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b416:	e7e6      	b.n	801b3e6 <lfs_bd_read+0x19a>
 801b418:	4618      	mov	r0, r3
 801b41a:	e7e4      	b.n	801b3e6 <lfs_bd_read+0x19a>
 801b41c:	080391b0 	.word	0x080391b0
 801b420:	08039e78 	.word	0x08039e78
 801b424:	08039104 	.word	0x08039104
 801b428:	08039134 	.word	0x08039134

0801b42c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b430:	b089      	sub	sp, #36	@ 0x24
 801b432:	4607      	mov	r7, r0
 801b434:	468a      	mov	sl, r1
 801b436:	4690      	mov	r8, r2
 801b438:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801b43a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801b43c:	690b      	ldr	r3, [r1, #16]
 801b43e:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b440:	303c      	adds	r0, #60	@ 0x3c
 801b442:	f7ff fd73 	bl	801af2c <lfs_gstate_hasmovehere>
 801b446:	2800      	cmp	r0, #0
 801b448:	f000 808d 	beq.w	801b566 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801b44c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b450:	2b00      	cmp	r3, #0
 801b452:	f000 808a 	beq.w	801b56a <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b458:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801b45c:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801b460:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801b464:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b468:	404b      	eors	r3, r1
 801b46a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b46e:	2b00      	cmp	r3, #0
 801b470:	f000 8085 	beq.w	801b57e <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801b474:	4282      	cmp	r2, r0
 801b476:	d37a      	bcc.n	801b56e <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801b478:	2600      	movs	r6, #0
 801b47a:	e006      	b.n	801b48a <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801b47c:	9605      	str	r6, [sp, #20]
 801b47e:	ebab 0306 	sub.w	r3, fp, r6
 801b482:	4063      	eors	r3, r4
 801b484:	ea13 0f08 	tst.w	r3, r8
 801b488:	d048      	beq.n	801b51c <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b48a:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b48c:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b490:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b494:	bf14      	ite	ne
 801b496:	4623      	movne	r3, r4
 801b498:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801b49a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b49e:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b4a0:	3308      	adds	r3, #8
 801b4a2:	42ab      	cmp	r3, r5
 801b4a4:	d865      	bhi.n	801b572 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801b4a6:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801b4a8:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801b4ac:	2304      	movs	r3, #4
 801b4ae:	9303      	str	r3, [sp, #12]
 801b4b0:	a907      	add	r1, sp, #28
 801b4b2:	9102      	str	r1, [sp, #8]
 801b4b4:	9501      	str	r5, [sp, #4]
 801b4b6:	9200      	str	r2, [sp, #0]
 801b4b8:	463a      	mov	r2, r7
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	4638      	mov	r0, r7
 801b4be:	f7ff fec5 	bl	801b24c <lfs_bd_read>
        if (err) {
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	2800      	cmp	r0, #0
 801b4c6:	d156      	bne.n	801b576 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801b4c8:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801b4ca:	ba1b      	rev	r3, r3
 801b4cc:	4063      	eors	r3, r4
 801b4ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4d2:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801b4d4:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d0cf      	beq.n	801b47c <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801b4dc:	0d23      	lsrs	r3, r4, #20
 801b4de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801b4e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b4e6:	d1c9      	bne.n	801b47c <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801b4e8:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801b4ec:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801b4f0:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b4f4:	4584      	cmp	ip, r0
 801b4f6:	d3c1      	bcc.n	801b47c <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801b4f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b4fc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b500:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b504:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801b508:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801b50c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b510:	42a2      	cmp	r2, r4
 801b512:	d037      	beq.n	801b584 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801b514:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b516:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801b51a:	e7af      	b.n	801b47c <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801b51c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b520:	d033      	beq.n	801b58a <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801b522:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801b526:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b528:	429e      	cmp	r6, r3
 801b52a:	bf28      	it	cs
 801b52c:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801b52e:	f8da 2000 	ldr.w	r2, [sl]
 801b532:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b534:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801b536:	9603      	str	r6, [sp, #12]
 801b538:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b53a:	9102      	str	r1, [sp, #8]
 801b53c:	3304      	adds	r3, #4
 801b53e:	9301      	str	r3, [sp, #4]
 801b540:	9200      	str	r2, [sp, #0]
 801b542:	4633      	mov	r3, r6
 801b544:	463a      	mov	r2, r7
 801b546:	2100      	movs	r1, #0
 801b548:	4638      	mov	r0, r7
 801b54a:	f7ff fe7f 	bl	801b24c <lfs_bd_read>
            if (err) {
 801b54e:	4603      	mov	r3, r0
 801b550:	b988      	cbnz	r0, 801b576 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801b552:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b554:	1b9a      	subs	r2, r3, r6
 801b556:	2100      	movs	r1, #0
 801b558:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b55a:	1998      	adds	r0, r3, r6
 801b55c:	f011 fa40 	bl	802c9e0 <memset>
            return tag + gdiff;
 801b560:	9b05      	ldr	r3, [sp, #20]
 801b562:	4423      	add	r3, r4
 801b564:	e007      	b.n	801b576 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801b566:	2600      	movs	r6, #0
 801b568:	e78f      	b.n	801b48a <lfs_dir_getslice+0x5e>
 801b56a:	2600      	movs	r6, #0
 801b56c:	e78d      	b.n	801b48a <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801b56e:	4e08      	ldr	r6, [pc, #32]	@ (801b590 <lfs_dir_getslice+0x164>)
 801b570:	e78b      	b.n	801b48a <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801b572:	f06f 0301 	mvn.w	r3, #1
}
 801b576:	4618      	mov	r0, r3
 801b578:	b009      	add	sp, #36	@ 0x24
 801b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801b57e:	f06f 0301 	mvn.w	r3, #1
 801b582:	e7f8      	b.n	801b576 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b584:	f06f 0301 	mvn.w	r3, #1
 801b588:	e7f5      	b.n	801b576 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b58a:	f06f 0301 	mvn.w	r3, #1
 801b58e:	e7f2      	b.n	801b576 <lfs_dir_getslice+0x14a>
 801b590:	fffffc00 	.word	0xfffffc00

0801b594 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801b594:	b510      	push	{r4, lr}
 801b596:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801b598:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801b59c:	9402      	str	r4, [sp, #8]
 801b59e:	9c06      	ldr	r4, [sp, #24]
 801b5a0:	9401      	str	r4, [sp, #4]
 801b5a2:	2400      	movs	r4, #0
 801b5a4:	9400      	str	r4, [sp, #0]
 801b5a6:	f7ff ff41 	bl	801b42c <lfs_dir_getslice>
}
 801b5aa:	b004      	add	sp, #16
 801b5ac:	bd10      	pop	{r4, pc}
	...

0801b5b0 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801b5b0:	b510      	push	{r4, lr}
 801b5b2:	b086      	sub	sp, #24
 801b5b4:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801b5b6:	ab03      	add	r3, sp, #12
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	4b09      	ldr	r3, [pc, #36]	@ (801b5e0 <lfs_dir_getgstate+0x30>)
 801b5bc:	4a09      	ldr	r2, [pc, #36]	@ (801b5e4 <lfs_dir_getgstate+0x34>)
 801b5be:	f7ff ffe9 	bl	801b594 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801b5c2:	2800      	cmp	r0, #0
 801b5c4:	da04      	bge.n	801b5d0 <lfs_dir_getgstate+0x20>
 801b5c6:	f110 0f02 	cmn.w	r0, #2
 801b5ca:	d106      	bne.n	801b5da <lfs_dir_getgstate+0x2a>
    return 0;
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	e004      	b.n	801b5da <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801b5d0:	a903      	add	r1, sp, #12
 801b5d2:	4620      	mov	r0, r4
 801b5d4:	f7ff fc98 	bl	801af08 <lfs_gstate_xor>
    return 0;
 801b5d8:	2000      	movs	r0, #0
}
 801b5da:	b006      	add	sp, #24
 801b5dc:	bd10      	pop	{r4, pc}
 801b5de:	bf00      	nop
 801b5e0:	7ff0000c 	.word	0x7ff0000c
 801b5e4:	7ff00000 	.word	0x7ff00000

0801b5e8 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ec:	b089      	sub	sp, #36	@ 0x24
 801b5ee:	461c      	mov	r4, r3
 801b5f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b5f2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b5f4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801b5f6:	b923      	cbnz	r3, 801b602 <lfs_ctz_traverse+0x1a>
        return 0;
 801b5f8:	2300      	movs	r3, #0
}
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	b009      	add	sp, #36	@ 0x24
 801b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b602:	4680      	mov	r8, r0
 801b604:	4689      	mov	r9, r1
 801b606:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b608:	3b01      	subs	r3, #1
 801b60a:	9307      	str	r3, [sp, #28]
 801b60c:	a907      	add	r1, sp, #28
 801b60e:	f7ff fdff 	bl	801b210 <lfs_ctz_index>
 801b612:	4605      	mov	r5, r0
        int err = cb(data, head);
 801b614:	4621      	mov	r1, r4
 801b616:	4638      	mov	r0, r7
 801b618:	47b0      	blx	r6
        if (err) {
 801b61a:	4603      	mov	r3, r0
 801b61c:	2800      	cmp	r0, #0
 801b61e:	d1ec      	bne.n	801b5fa <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801b620:	2d00      	cmp	r5, #0
 801b622:	d0ea      	beq.n	801b5fa <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801b624:	f005 0b01 	and.w	fp, r5, #1
 801b628:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801b62c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801b62e:	9303      	str	r3, [sp, #12]
 801b630:	aa05      	add	r2, sp, #20
 801b632:	9202      	str	r2, [sp, #8]
 801b634:	2200      	movs	r2, #0
 801b636:	9201      	str	r2, [sp, #4]
 801b638:	9400      	str	r4, [sp, #0]
 801b63a:	4652      	mov	r2, sl
 801b63c:	4649      	mov	r1, r9
 801b63e:	4640      	mov	r0, r8
 801b640:	f7ff fe04 	bl	801b24c <lfs_bd_read>
        if (err) {
 801b644:	4604      	mov	r4, r0
 801b646:	b9c8      	cbnz	r0, 801b67c <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801b648:	43eb      	mvns	r3, r5
 801b64a:	f003 0301 	and.w	r3, r3, #1
 801b64e:	42a3      	cmp	r3, r4
 801b650:	dd0b      	ble.n	801b66a <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801b652:	ab08      	add	r3, sp, #32
 801b654:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b658:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801b65c:	4638      	mov	r0, r7
 801b65e:	47b0      	blx	r6
            if (err) {
 801b660:	4603      	mov	r3, r0
 801b662:	2800      	cmp	r0, #0
 801b664:	d1c9      	bne.n	801b5fa <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801b666:	3401      	adds	r4, #1
 801b668:	e7ee      	b.n	801b648 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801b66a:	aa08      	add	r2, sp, #32
 801b66c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b670:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801b674:	f1ab 0b02 	sub.w	fp, fp, #2
 801b678:	445d      	add	r5, fp
    while (true) {
 801b67a:	e7cb      	b.n	801b614 <lfs_ctz_traverse+0x2c>
            return err;
 801b67c:	4603      	mov	r3, r0
 801b67e:	e7bc      	b.n	801b5fa <lfs_ctz_traverse+0x12>

0801b680 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801b680:	b530      	push	{r4, r5, lr}
 801b682:	b087      	sub	sp, #28
 801b684:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801b686:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801b688:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801b68c:	6811      	ldr	r1, [r2, #0]
 801b68e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801b690:	2508      	movs	r5, #8
 801b692:	9503      	str	r5, [sp, #12]
 801b694:	ad04      	add	r5, sp, #16
 801b696:	9502      	str	r5, [sp, #8]
 801b698:	9201      	str	r2, [sp, #4]
 801b69a:	9100      	str	r1, [sp, #0]
 801b69c:	4602      	mov	r2, r0
 801b69e:	f100 0110 	add.w	r1, r0, #16
 801b6a2:	f7ff fdd3 	bl	801b24c <lfs_bd_read>
    if (err) {
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	b978      	cbnz	r0, 801b6ca <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b6aa:	9a04      	ldr	r2, [sp, #16]
 801b6ac:	6861      	ldr	r1, [r4, #4]
 801b6ae:	4291      	cmp	r1, r2
 801b6b0:	d008      	beq.n	801b6c4 <lfs_fs_parent_match+0x44>
 801b6b2:	9d05      	ldr	r5, [sp, #20]
 801b6b4:	68a0      	ldr	r0, [r4, #8]
 801b6b6:	4285      	cmp	r5, r0
 801b6b8:	d004      	beq.n	801b6c4 <lfs_fs_parent_match+0x44>
 801b6ba:	4282      	cmp	r2, r0
 801b6bc:	d002      	beq.n	801b6c4 <lfs_fs_parent_match+0x44>
 801b6be:	42a9      	cmp	r1, r5
 801b6c0:	d000      	beq.n	801b6c4 <lfs_fs_parent_match+0x44>
 801b6c2:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801b6c4:	3b00      	subs	r3, #0
 801b6c6:	bf18      	it	ne
 801b6c8:	2301      	movne	r3, #1
}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	b007      	add	sp, #28
 801b6ce:	bd30      	pop	{r4, r5, pc}

0801b6d0 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d4:	b0af      	sub	sp, #188	@ 0xbc
 801b6d6:	9007      	str	r0, [sp, #28]
 801b6d8:	460e      	mov	r6, r1
 801b6da:	4617      	mov	r7, r2
 801b6dc:	461c      	mov	r4, r3
 801b6de:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801b6e2:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801b6e6:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801b6ea:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801b6ee:	9304      	str	r3, [sp, #16]
 801b6f0:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801b6f4:	9305      	str	r3, [sp, #20]
 801b6f6:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801b6fa:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801b6fc:	2500      	movs	r5, #0
 801b6fe:	950d      	str	r5, [sp, #52]	@ 0x34
 801b700:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b702:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b70a:	bf14      	ite	ne
 801b70c:	46a1      	movne	r9, r4
 801b70e:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801b712:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b716:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801b71a:	44b9      	add	r9, r7
 801b71c:	68f3      	ldr	r3, [r6, #12]
 801b71e:	4599      	cmp	r9, r3
 801b720:	d35e      	bcc.n	801b7e0 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801b722:	f1bb 0f00 	cmp.w	fp, #0
 801b726:	f340 80fa 	ble.w	801b91e <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801b72a:	f8d8 3000 	ldr.w	r3, [r8]
 801b72e:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801b730:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801b734:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801b738:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801b73c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b73e:	4ba9      	ldr	r3, [pc, #676]	@ (801b9e4 <lfs_dir_traverse+0x314>)
 801b740:	ea0a 0303 	and.w	r3, sl, r3
 801b744:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b746:	404a      	eors	r2, r1
 801b748:	401a      	ands	r2, r3
 801b74a:	d1da      	bne.n	801b702 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801b74c:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801b750:	2b00      	cmp	r3, #0
 801b752:	f000 8116 	beq.w	801b982 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b756:	2d02      	cmp	r5, #2
 801b758:	d862      	bhi.n	801b820 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801b75a:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b75e:	a82e      	add	r0, sp, #184	@ 0xb8
 801b760:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b764:	f843 6c78 	str.w	r6, [r3, #-120]
 801b768:	f843 7c74 	str.w	r7, [r3, #-116]
 801b76c:	f843 4c70 	str.w	r4, [r3, #-112]
 801b770:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b774:	f843 bc68 	str.w	fp, [r3, #-104]
 801b778:	f843 ac64 	str.w	sl, [r3, #-100]
 801b77c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801b77e:	f843 0c60 	str.w	r0, [r3, #-96]
 801b782:	9804      	ldr	r0, [sp, #16]
 801b784:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801b788:	9805      	ldr	r0, [sp, #20]
 801b78a:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801b78e:	9806      	ldr	r0, [sp, #24]
 801b790:	f823 0c58 	strh.w	r0, [r3, #-88]
 801b794:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801b796:	f843 0c54 	str.w	r0, [r3, #-84]
 801b79a:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b79c:	f843 0c50 	str.w	r0, [r3, #-80]
 801b7a0:	f843 1c4c 	str.w	r1, [r3, #-76]
 801b7a4:	f843 9c48 	str.w	r9, [r3, #-72]
 801b7a8:	3b44      	subs	r3, #68	@ 0x44
 801b7aa:	a90d      	add	r1, sp, #52	@ 0x34
 801b7ac:	c903      	ldmia	r1, {r0, r1}
 801b7ae:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801b7b2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b7b6:	009b      	lsls	r3, r3, #2
 801b7b8:	3328      	adds	r3, #40	@ 0x28
 801b7ba:	a910      	add	r1, sp, #64	@ 0x40
 801b7bc:	440b      	add	r3, r1
 801b7be:	3304      	adds	r3, #4
 801b7c0:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801b7c2:	3501      	adds	r5, #1
                ttag = 0;
 801b7c4:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801b7c6:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801b7c8:	4b87      	ldr	r3, [pc, #540]	@ (801b9e8 <lfs_dir_traverse+0x318>)
 801b7ca:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	9306      	str	r3, [sp, #24]
                end = 0;
 801b7d0:	9305      	str	r3, [sp, #20]
                begin = 0;
 801b7d2:	9304      	str	r3, [sp, #16]
 801b7d4:	e795      	b.n	801b702 <lfs_dir_traverse+0x32>
 801b7d6:	9d08      	ldr	r5, [sp, #32]
 801b7d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b7da:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b7dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b7de:	e790      	b.n	801b702 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801b7e0:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801b7e2:	2304      	movs	r3, #4
 801b7e4:	9303      	str	r3, [sp, #12]
 801b7e6:	a90f      	add	r1, sp, #60	@ 0x3c
 801b7e8:	9102      	str	r1, [sp, #8]
 801b7ea:	f8cd 9004 	str.w	r9, [sp, #4]
 801b7ee:	9200      	str	r2, [sp, #0]
 801b7f0:	9a07      	ldr	r2, [sp, #28]
 801b7f2:	2100      	movs	r1, #0
 801b7f4:	4610      	mov	r0, r2
 801b7f6:	f7ff fd29 	bl	801b24c <lfs_bd_read>
                if (err) {
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	2800      	cmp	r0, #0
 801b7fe:	f040 80ec 	bne.w	801b9da <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801b802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801b804:	ba1b      	rev	r3, r3
 801b806:	4063      	eors	r3, r4
 801b808:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801b80c:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801b80e:	6833      	ldr	r3, [r6, #0]
 801b810:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801b812:	f109 0304 	add.w	r3, r9, #4
 801b816:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801b818:	464f      	mov	r7, r9
                buffer = &disk;
 801b81a:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801b81e:	e78d      	b.n	801b73c <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b820:	4b72      	ldr	r3, [pc, #456]	@ (801b9ec <lfs_dir_traverse+0x31c>)
 801b822:	4a73      	ldr	r2, [pc, #460]	@ (801b9f0 <lfs_dir_traverse+0x320>)
 801b824:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801b828:	4872      	ldr	r0, [pc, #456]	@ (801b9f4 <lfs_dir_traverse+0x324>)
 801b82a:	f00e fb87 	bl	8029f3c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801b82e:	4b6e      	ldr	r3, [pc, #440]	@ (801b9e8 <lfs_dir_traverse+0x318>)
 801b830:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b832:	429a      	cmp	r2, r3
 801b834:	f43f af65 	beq.w	801b702 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801b838:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b83c:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b83e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b842:	223c      	movs	r2, #60	@ 0x3c
 801b844:	2100      	movs	r1, #0
 801b846:	9309      	str	r3, [sp, #36]	@ 0x24
 801b848:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801b84c:	f011 f8c8 	bl	802c9e0 <memset>
 801b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b852:	f843 6c78 	str.w	r6, [r3, #-120]
 801b856:	f843 7c74 	str.w	r7, [r3, #-116]
 801b85a:	f843 4c70 	str.w	r4, [r3, #-112]
 801b85e:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b862:	f843 bc68 	str.w	fp, [r3, #-104]
 801b866:	f843 ac64 	str.w	sl, [r3, #-100]
 801b86a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b86c:	f843 2c60 	str.w	r2, [r3, #-96]
 801b870:	9a04      	ldr	r2, [sp, #16]
 801b872:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801b876:	9a05      	ldr	r2, [sp, #20]
 801b878:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801b87c:	9906      	ldr	r1, [sp, #24]
 801b87e:	f823 1c58 	strh.w	r1, [r3, #-88]
 801b882:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b884:	f843 2c54 	str.w	r2, [r3, #-84]
 801b888:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b88a:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801b88e:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801b890:	9b08      	ldr	r3, [sp, #32]
 801b892:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801b896:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801b898:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801b89c:	1c50      	adds	r0, r2, #1
 801b89e:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801b8a0:	1a9b      	subs	r3, r3, r2
 801b8a2:	fa11 f383 	uxtah	r3, r1, r3
 801b8a6:	b21b      	sxth	r3, r3
 801b8a8:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801b8aa:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801b8ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801b8b0:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801b8b2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b9f8 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801b8b6:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801b8ba:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801b8bc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801b8c0:	465f      	mov	r7, fp
 801b8c2:	e71e      	b.n	801b702 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	9508      	str	r5, [sp, #32]
 801b8c8:	9609      	str	r6, [sp, #36]	@ 0x24
 801b8ca:	970a      	str	r7, [sp, #40]	@ 0x28
 801b8cc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b8ce:	461c      	mov	r4, r3
 801b8d0:	9d06      	ldr	r5, [sp, #24]
 801b8d2:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801b8d4:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b8d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801b8d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b8dc:	4294      	cmp	r4, r2
 801b8de:	d219      	bcs.n	801b914 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b8e0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b8e4:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801b8e8:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801b8ec:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801b8f0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b8f4:	442b      	add	r3, r5
 801b8f6:	029b      	lsls	r3, r3, #10
 801b8f8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801b8fc:	6891      	ldr	r1, [r2, #8]
 801b8fe:	6852      	ldr	r2, [r2, #4]
 801b900:	4319      	orrs	r1, r3
 801b902:	4638      	mov	r0, r7
 801b904:	47b0      	blx	r6
                if (res < 0) {
 801b906:	2800      	cmp	r0, #0
 801b908:	db66      	blt.n	801b9d8 <lfs_dir_traverse+0x308>
                if (res) {
 801b90a:	2800      	cmp	r0, #0
 801b90c:	f47f af63 	bne.w	801b7d6 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b910:	3401      	adds	r4, #1
 801b912:	e7e0      	b.n	801b8d6 <lfs_dir_traverse+0x206>
 801b914:	9d08      	ldr	r5, [sp, #32]
 801b916:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b918:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b91a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b91c:	e6f1      	b.n	801b702 <lfs_dir_traverse+0x32>
                res = 0;
 801b91e:	2300      	movs	r3, #0
    if (sp > 0) {
 801b920:	2d00      	cmp	r5, #0
 801b922:	d05a      	beq.n	801b9da <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801b924:	3d01      	subs	r5, #1
 801b926:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b92a:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b92c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b930:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801b934:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801b938:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801b93c:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801b940:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801b944:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801b948:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801b94c:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801b94e:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801b952:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801b954:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801b958:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801b95a:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801b95e:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801b960:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801b964:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801b966:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801b96a:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801b96c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801b970:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801b972:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801b976:	aa0d      	add	r2, sp, #52	@ 0x34
 801b978:	3b44      	subs	r3, #68	@ 0x44
 801b97a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b97e:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801b982:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b986:	b153      	cbz	r3, 801b99e <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801b988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b98a:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b98e:	9a04      	ldr	r2, [sp, #16]
 801b990:	429a      	cmp	r2, r3
 801b992:	f63f aeb6 	bhi.w	801b702 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801b996:	9a05      	ldr	r2, [sp, #20]
 801b998:	429a      	cmp	r2, r3
 801b99a:	f67f aeb2 	bls.w	801b702 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b99e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b9a0:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801b9a2:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	f43f aeab 	beq.w	801b702 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801b9ac:	f240 1201 	movw	r2, #257	@ 0x101
 801b9b0:	4293      	cmp	r3, r2
 801b9b2:	f43f af3c 	beq.w	801b82e <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801b9b6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801b9ba:	d083      	beq.n	801b8c4 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801b9bc:	464a      	mov	r2, r9
 801b9be:	9b08      	ldr	r3, [sp, #32]
 801b9c0:	9906      	ldr	r1, [sp, #24]
 801b9c2:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801b9c6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b9c8:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b9ca:	4798      	blx	r3
            if (res < 0) {
 801b9cc:	1e03      	subs	r3, r0, #0
 801b9ce:	db04      	blt.n	801b9da <lfs_dir_traverse+0x30a>
            if (res) {
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f43f ae96 	beq.w	801b702 <lfs_dir_traverse+0x32>
 801b9d6:	e7a3      	b.n	801b920 <lfs_dir_traverse+0x250>
 801b9d8:	4603      	mov	r3, r0
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	b02f      	add	sp, #188	@ 0xbc
 801b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e2:	bf00      	nop
 801b9e4:	7ff00000 	.word	0x7ff00000
 801b9e8:	0801b005 	.word	0x0801b005
 801b9ec:	080391e0 	.word	0x080391e0
 801b9f0:	08039df0 	.word	0x08039df0
 801b9f4:	08039104 	.word	0x08039104
 801b9f8:	600ffc00 	.word	0x600ffc00

0801b9fc <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba00:	b087      	sub	sp, #28
 801ba02:	4606      	mov	r6, r0
 801ba04:	468a      	mov	sl, r1
 801ba06:	4617      	mov	r7, r2
 801ba08:	461c      	mov	r4, r3
 801ba0a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801ba0e:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801ba12:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ba14:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801ba18:	eb05 0208 	add.w	r2, r5, r8
 801ba1c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ba1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba20:	429a      	cmp	r2, r3
 801ba22:	d94d      	bls.n	801bac0 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801ba24:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ba28:	e076      	b.n	801bb18 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	68ba      	ldr	r2, [r7, #8]
 801ba2e:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801ba30:	42a9      	cmp	r1, r5
 801ba32:	d91c      	bls.n	801ba6e <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801ba34:	42ab      	cmp	r3, r5
 801ba36:	d904      	bls.n	801ba42 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801ba38:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801ba3a:	4543      	cmp	r3, r8
 801ba3c:	bf28      	it	cs
 801ba3e:	4643      	movcs	r3, r8
 801ba40:	e048      	b.n	801bad4 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801ba42:	1b59      	subs	r1, r3, r5
 801ba44:	440a      	add	r2, r1
 801ba46:	4542      	cmp	r2, r8
 801ba48:	bf28      	it	cs
 801ba4a:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801ba4c:	68f9      	ldr	r1, [r7, #12]
 801ba4e:	1aeb      	subs	r3, r5, r3
 801ba50:	9205      	str	r2, [sp, #20]
 801ba52:	4419      	add	r1, r3
 801ba54:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ba56:	f012 f9ff 	bl	802de58 <memcpy>
                data += diff;
 801ba5a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801ba5c:	9b05      	ldr	r3, [sp, #20]
 801ba5e:	4419      	add	r1, r3
 801ba60:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801ba62:	441d      	add	r5, r3
                size -= diff;
 801ba64:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801ba68:	e02a      	b.n	801bac0 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801ba6a:	4643      	mov	r3, r8
 801ba6c:	e032      	b.n	801bad4 <lfs_dir_getread+0xd8>
 801ba6e:	4643      	mov	r3, r8
 801ba70:	e030      	b.n	801bad4 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801ba72:	f06f 0301 	mvn.w	r3, #1
 801ba76:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801ba78:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801ba7a:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801ba7c:	fbb5 f2f3 	udiv	r2, r5, r3
 801ba80:	fb03 5212 	mls	r2, r3, r2, r5
 801ba84:	1aaa      	subs	r2, r5, r2
 801ba86:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801ba88:	eb05 030b 	add.w	r3, r5, fp
 801ba8c:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801ba8e:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ba90:	4403      	add	r3, r0
 801ba92:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ba94:	fbb3 fcf0 	udiv	ip, r3, r0
 801ba98:	fb00 301c 	mls	r0, r0, ip, r3
 801ba9c:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801ba9e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801baa0:	428b      	cmp	r3, r1
 801baa2:	bf28      	it	cs
 801baa4:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801baa6:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801baa8:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801baaa:	9302      	str	r3, [sp, #8]
 801baac:	9101      	str	r1, [sp, #4]
 801baae:	9200      	str	r2, [sp, #0]
 801bab0:	464b      	mov	r3, r9
 801bab2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bab4:	4651      	mov	r1, sl
 801bab6:	4630      	mov	r0, r6
 801bab8:	f7ff fcb8 	bl	801b42c <lfs_dir_getslice>
        if (err < 0) {
 801babc:	2800      	cmp	r0, #0
 801babe:	db2b      	blt.n	801bb18 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801bac0:	f1b8 0f00 	cmp.w	r8, #0
 801bac4:	d027      	beq.n	801bb16 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801bac6:	2f00      	cmp	r7, #0
 801bac8:	d0cf      	beq.n	801ba6a <lfs_dir_getread+0x6e>
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	f113 0f02 	cmn.w	r3, #2
 801bad0:	d0ab      	beq.n	801ba2a <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801bad2:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bad4:	6822      	ldr	r2, [r4, #0]
 801bad6:	f112 0f02 	cmn.w	r2, #2
 801bada:	d1ca      	bne.n	801ba72 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801badc:	6862      	ldr	r2, [r4, #4]
 801bade:	68a1      	ldr	r1, [r4, #8]
 801bae0:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bae2:	42a8      	cmp	r0, r5
 801bae4:	d9c5      	bls.n	801ba72 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801bae6:	42aa      	cmp	r2, r5
 801bae8:	d8c3      	bhi.n	801ba72 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801baea:	1b50      	subs	r0, r2, r5
 801baec:	4401      	add	r1, r0
 801baee:	4608      	mov	r0, r1
 801baf0:	4299      	cmp	r1, r3
 801baf2:	bf28      	it	cs
 801baf4:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801baf6:	68e3      	ldr	r3, [r4, #12]
 801baf8:	1aa9      	subs	r1, r5, r2
 801bafa:	9005      	str	r0, [sp, #20]
 801bafc:	4602      	mov	r2, r0
 801bafe:	4419      	add	r1, r3
 801bb00:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801bb02:	f012 f9a9 	bl	802de58 <memcpy>
                data += diff;
 801bb06:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801bb08:	9b05      	ldr	r3, [sp, #20]
 801bb0a:	4419      	add	r1, r3
 801bb0c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801bb0e:	441d      	add	r5, r3
                size -= diff;
 801bb10:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801bb14:	e7d4      	b.n	801bac0 <lfs_dir_getread+0xc4>
    return 0;
 801bb16:	2000      	movs	r0, #0
}
 801bb18:	b007      	add	sp, #28
 801bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb1e <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801bb1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb22:	b089      	sub	sp, #36	@ 0x24
 801bb24:	4682      	mov	sl, r0
 801bb26:	4689      	mov	r9, r1
 801bb28:	9205      	str	r2, [sp, #20]
 801bb2a:	461f      	mov	r7, r3
 801bb2c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801bb30:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801bb34:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bb36:	2400      	movs	r4, #0
 801bb38:	e002      	b.n	801bb40 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	e023      	b.n	801bb86 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bb3e:	442c      	add	r4, r5
 801bb40:	42b4      	cmp	r4, r6
 801bb42:	d21f      	bcs.n	801bb84 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801bb44:	1b35      	subs	r5, r6, r4
 801bb46:	2d08      	cmp	r5, #8
 801bb48:	bf28      	it	cs
 801bb4a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801bb4c:	9503      	str	r5, [sp, #12]
 801bb4e:	ab06      	add	r3, sp, #24
 801bb50:	9302      	str	r3, [sp, #8]
 801bb52:	eb04 0308 	add.w	r3, r4, r8
 801bb56:	9301      	str	r3, [sp, #4]
 801bb58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bb5a:	9300      	str	r3, [sp, #0]
 801bb5c:	1b3b      	subs	r3, r7, r4
 801bb5e:	9a05      	ldr	r2, [sp, #20]
 801bb60:	4649      	mov	r1, r9
 801bb62:	4650      	mov	r0, sl
 801bb64:	f7ff fb72 	bl	801b24c <lfs_bd_read>
        if (err) {
 801bb68:	4603      	mov	r3, r0
 801bb6a:	b960      	cbnz	r0, 801bb86 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801bb6c:	462a      	mov	r2, r5
 801bb6e:	eb0b 0104 	add.w	r1, fp, r4
 801bb72:	a806      	add	r0, sp, #24
 801bb74:	f010 fea0 	bl	802c8b8 <memcmp>
        if (res) {
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	d0e0      	beq.n	801bb3e <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801bb7c:	2800      	cmp	r0, #0
 801bb7e:	dbdc      	blt.n	801bb3a <lfs_bd_cmp+0x1c>
 801bb80:	2302      	movs	r3, #2
 801bb82:	e000      	b.n	801bb86 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801bb84:	2300      	movs	r3, #0
}
 801bb86:	4618      	mov	r0, r3
 801bb88:	b009      	add	sp, #36	@ 0x24
 801bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bb90 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bb90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb94:	b085      	sub	sp, #20
 801bb96:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801bb98:	6809      	ldr	r1, [r1, #0]
 801bb9a:	f111 0f03 	cmn.w	r1, #3
 801bb9e:	d83f      	bhi.n	801bc20 <lfs_bd_flush+0x90>
 801bba0:	4607      	mov	r7, r0
 801bba2:	4691      	mov	r9, r2
 801bba4:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801bba6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bba8:	4299      	cmp	r1, r3
 801bbaa:	d22d      	bcs.n	801bc08 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801bbac:	68a5      	ldr	r5, [r4, #8]
 801bbae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801bbb0:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801bbb2:	4415      	add	r5, r2
 801bbb4:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801bbb6:	fbb5 f3f2 	udiv	r3, r5, r2
 801bbba:	fb02 5313 	mls	r3, r2, r3, r5
 801bbbe:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801bbc0:	6885      	ldr	r5, [r0, #8]
 801bbc2:	9600      	str	r6, [sp, #0]
 801bbc4:	68e3      	ldr	r3, [r4, #12]
 801bbc6:	6862      	ldr	r2, [r4, #4]
 801bbc8:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801bbca:	1e05      	subs	r5, r0, #0
 801bbcc:	dc22      	bgt.n	801bc14 <lfs_bd_flush+0x84>
        if (err) {
 801bbce:	bb45      	cbnz	r5, 801bc22 <lfs_bd_flush+0x92>
        if (validate) {
 801bbd0:	f1b8 0f00 	cmp.w	r8, #0
 801bbd4:	d013      	beq.n	801bbfe <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801bbd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bbda:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801bbde:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801bbe0:	9603      	str	r6, [sp, #12]
 801bbe2:	9302      	str	r3, [sp, #8]
 801bbe4:	6863      	ldr	r3, [r4, #4]
 801bbe6:	9301      	str	r3, [sp, #4]
 801bbe8:	6823      	ldr	r3, [r4, #0]
 801bbea:	9300      	str	r3, [sp, #0]
 801bbec:	4633      	mov	r3, r6
 801bbee:	464a      	mov	r2, r9
 801bbf0:	2100      	movs	r1, #0
 801bbf2:	4638      	mov	r0, r7
 801bbf4:	f7ff ff93 	bl	801bb1e <lfs_bd_cmp>
            if (res < 0) {
 801bbf8:	2800      	cmp	r0, #0
 801bbfa:	db16      	blt.n	801bc2a <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801bbfc:	b9b8      	cbnz	r0, 801bc2e <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801bbfe:	4621      	mov	r1, r4
 801bc00:	4638      	mov	r0, r7
 801bc02:	f7ff faf9 	bl	801b1f8 <lfs_cache_zero>
 801bc06:	e00c      	b.n	801bc22 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801bc08:	4b0a      	ldr	r3, [pc, #40]	@ (801bc34 <lfs_bd_flush+0xa4>)
 801bc0a:	4a0b      	ldr	r2, [pc, #44]	@ (801bc38 <lfs_bd_flush+0xa8>)
 801bc0c:	21b3      	movs	r1, #179	@ 0xb3
 801bc0e:	480b      	ldr	r0, [pc, #44]	@ (801bc3c <lfs_bd_flush+0xac>)
 801bc10:	f00e f994 	bl	8029f3c <__assert_func>
        LFS_ASSERT(err <= 0);
 801bc14:	4b0a      	ldr	r3, [pc, #40]	@ (801bc40 <lfs_bd_flush+0xb0>)
 801bc16:	4a08      	ldr	r2, [pc, #32]	@ (801bc38 <lfs_bd_flush+0xa8>)
 801bc18:	21b7      	movs	r1, #183	@ 0xb7
 801bc1a:	4808      	ldr	r0, [pc, #32]	@ (801bc3c <lfs_bd_flush+0xac>)
 801bc1c:	f00e f98e 	bl	8029f3c <__assert_func>
    return 0;
 801bc20:	2500      	movs	r5, #0
}
 801bc22:	4628      	mov	r0, r5
 801bc24:	b005      	add	sp, #20
 801bc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801bc2a:	4605      	mov	r5, r0
 801bc2c:	e7f9      	b.n	801bc22 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801bc2e:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801bc32:	e7f6      	b.n	801bc22 <lfs_bd_flush+0x92>
 801bc34:	080391e8 	.word	0x080391e8
 801bc38:	08039e34 	.word	0x08039e34
 801bc3c:	08039104 	.word	0x08039104
 801bc40:	08039134 	.word	0x08039134

0801bc44 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc48:	b083      	sub	sp, #12
 801bc4a:	4607      	mov	r7, r0
 801bc4c:	460c      	mov	r4, r1
 801bc4e:	9201      	str	r2, [sp, #4]
 801bc50:	469b      	mov	fp, r3
 801bc52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc54:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801bc56:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bc5a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bc5e:	f116 0f02 	cmn.w	r6, #2
 801bc62:	d002      	beq.n	801bc6a <lfs_bd_prog+0x26>
 801bc64:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bc66:	42b3      	cmp	r3, r6
 801bc68:	d90b      	bls.n	801bc82 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801bc6a:	eb05 0308 	add.w	r3, r5, r8
 801bc6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bc70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801bc72:	4293      	cmp	r3, r2
 801bc74:	d919      	bls.n	801bcaa <lfs_bd_prog+0x66>
 801bc76:	4b2b      	ldr	r3, [pc, #172]	@ (801bd24 <lfs_bd_prog+0xe0>)
 801bc78:	4a2b      	ldr	r2, [pc, #172]	@ (801bd28 <lfs_bd_prog+0xe4>)
 801bc7a:	21e9      	movs	r1, #233	@ 0xe9
 801bc7c:	482b      	ldr	r0, [pc, #172]	@ (801bd2c <lfs_bd_prog+0xe8>)
 801bc7e:	f00e f95d 	bl	8029f3c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bc82:	4b2b      	ldr	r3, [pc, #172]	@ (801bd30 <lfs_bd_prog+0xec>)
 801bc84:	4a28      	ldr	r2, [pc, #160]	@ (801bd28 <lfs_bd_prog+0xe4>)
 801bc86:	21e8      	movs	r1, #232	@ 0xe8
 801bc88:	4828      	ldr	r0, [pc, #160]	@ (801bd2c <lfs_bd_prog+0xe8>)
 801bc8a:	f00e f957 	bl	8029f3c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bc92:	d13c      	bne.n	801bd0e <lfs_bd_prog+0xca>
        pcache->block = block;
 801bc94:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801bc96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc98:	6a1a      	ldr	r2, [r3, #32]
 801bc9a:	fbb5 f3f2 	udiv	r3, r5, r2
 801bc9e:	fb02 5313 	mls	r3, r2, r3, r5
 801bca2:	1aeb      	subs	r3, r5, r3
 801bca4:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801bca6:	2300      	movs	r3, #0
 801bca8:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801bcaa:	f1b8 0f00 	cmp.w	r8, #0
 801bcae:	d035      	beq.n	801bd1c <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801bcb0:	6823      	ldr	r3, [r4, #0]
 801bcb2:	42b3      	cmp	r3, r6
 801bcb4:	d1eb      	bne.n	801bc8e <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801bcb6:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801bcb8:	42aa      	cmp	r2, r5
 801bcba:	d8e8      	bhi.n	801bc8e <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801bcbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801bcbe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801bcc0:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801bcc2:	42a8      	cmp	r0, r5
 801bcc4:	d9e3      	bls.n	801bc8e <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801bcc6:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801bcc8:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801bccc:	45c1      	cmp	r9, r8
 801bcce:	bf28      	it	cs
 801bcd0:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801bcd2:	68e3      	ldr	r3, [r4, #12]
 801bcd4:	1aa8      	subs	r0, r5, r2
 801bcd6:	464a      	mov	r2, r9
 801bcd8:	4651      	mov	r1, sl
 801bcda:	4418      	add	r0, r3
 801bcdc:	f012 f8bc 	bl	802de58 <memcpy>
            data += diff;
 801bce0:	44ca      	add	sl, r9
            off += diff;
 801bce2:	444d      	add	r5, r9
            size -= diff;
 801bce4:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801bce8:	68a2      	ldr	r2, [r4, #8]
 801bcea:	6863      	ldr	r3, [r4, #4]
 801bcec:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	bf38      	it	cc
 801bcf2:	4613      	movcc	r3, r2
 801bcf4:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801bcf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bcf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	d1d5      	bne.n	801bcaa <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bcfe:	465b      	mov	r3, fp
 801bd00:	9a01      	ldr	r2, [sp, #4]
 801bd02:	4621      	mov	r1, r4
 801bd04:	4638      	mov	r0, r7
 801bd06:	f7ff ff43 	bl	801bb90 <lfs_bd_flush>
                if (err) {
 801bd0a:	b940      	cbnz	r0, 801bd1e <lfs_bd_prog+0xda>
 801bd0c:	e7cd      	b.n	801bcaa <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bd0e:	4b09      	ldr	r3, [pc, #36]	@ (801bd34 <lfs_bd_prog+0xf0>)
 801bd10:	4a05      	ldr	r2, [pc, #20]	@ (801bd28 <lfs_bd_prog+0xe4>)
 801bd12:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801bd16:	4805      	ldr	r0, [pc, #20]	@ (801bd2c <lfs_bd_prog+0xe8>)
 801bd18:	f00e f910 	bl	8029f3c <__assert_func>
    return 0;
 801bd1c:	2000      	movs	r0, #0
}
 801bd1e:	b003      	add	sp, #12
 801bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd24:	08039244 	.word	0x08039244
 801bd28:	08039e44 	.word	0x08039e44
 801bd2c:	08039104 	.word	0x08039104
 801bd30:	0803920c 	.word	0x0803920c
 801bd34:	08039268 	.word	0x08039268

0801bd38 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bd38:	b538      	push	{r3, r4, r5, lr}
 801bd3a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801bd3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bd40:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bd42:	f7ff ff25 	bl	801bb90 <lfs_bd_flush>
    if (err) {
 801bd46:	4603      	mov	r3, r0
 801bd48:	b920      	cbnz	r0, 801bd54 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801bd4a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801bd4c:	6903      	ldr	r3, [r0, #16]
 801bd4e:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801bd50:	1e03      	subs	r3, r0, #0
 801bd52:	dc01      	bgt.n	801bd58 <lfs_bd_sync+0x20>
}
 801bd54:	4618      	mov	r0, r3
 801bd56:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801bd58:	4b02      	ldr	r3, [pc, #8]	@ (801bd64 <lfs_bd_sync+0x2c>)
 801bd5a:	4a03      	ldr	r2, [pc, #12]	@ (801bd68 <lfs_bd_sync+0x30>)
 801bd5c:	21dd      	movs	r1, #221	@ 0xdd
 801bd5e:	4803      	ldr	r0, [pc, #12]	@ (801bd6c <lfs_bd_sync+0x34>)
 801bd60:	f00e f8ec 	bl	8029f3c <__assert_func>
 801bd64:	08039134 	.word	0x08039134
 801bd68:	08039de4 	.word	0x08039de4
 801bd6c:	08039104 	.word	0x08039104

0801bd70 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801bd70:	b570      	push	{r4, r5, r6, lr}
 801bd72:	b084      	sub	sp, #16
 801bd74:	4604      	mov	r4, r0
 801bd76:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801bd78:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801bd7a:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801bd7c:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801bd80:	42ab      	cmp	r3, r5
 801bd82:	bf28      	it	cs
 801bd84:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801bd86:	6812      	ldr	r2, [r2, #0]
 801bd88:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801bd8c:	9303      	str	r3, [sp, #12]
 801bd8e:	6866      	ldr	r6, [r4, #4]
 801bd90:	9602      	str	r6, [sp, #8]
 801bd92:	9101      	str	r1, [sp, #4]
 801bd94:	9200      	str	r2, [sp, #0]
 801bd96:	4602      	mov	r2, r0
 801bd98:	2100      	movs	r1, #0
 801bd9a:	f7ff fec0 	bl	801bb1e <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801bd9e:	b920      	cbnz	r0, 801bdaa <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801bda0:	68a3      	ldr	r3, [r4, #8]
 801bda2:	42ab      	cmp	r3, r5
 801bda4:	d001      	beq.n	801bdaa <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bda6:	d202      	bcs.n	801bdae <lfs_dir_find_match+0x3e>
 801bda8:	2001      	movs	r0, #1
}
 801bdaa:	b004      	add	sp, #16
 801bdac:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bdae:	2002      	movs	r0, #2
 801bdb0:	e7fb      	b.n	801bdaa <lfs_dir_find_match+0x3a>

0801bdb2 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801bdb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bdb6:	b089      	sub	sp, #36	@ 0x24
 801bdb8:	9305      	str	r3, [sp, #20]
 801bdba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801bdbc:	b953      	cbnz	r3, 801bdd4 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801bdbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bdc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bdc4:	6013      	str	r3, [r2, #0]
        *off = 0;
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bdca:	6013      	str	r3, [r2, #0]
}
 801bdcc:	4618      	mov	r0, r3
 801bdce:	b009      	add	sp, #36	@ 0x24
 801bdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdd4:	4607      	mov	r7, r0
 801bdd6:	4688      	mov	r8, r1
 801bdd8:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801bdda:	3b01      	subs	r3, #1
 801bddc:	9307      	str	r3, [sp, #28]
 801bdde:	a907      	add	r1, sp, #28
 801bde0:	f7ff fa16 	bl	801b210 <lfs_ctz_index>
 801bde4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801bde6:	a911      	add	r1, sp, #68	@ 0x44
 801bde8:	4638      	mov	r0, r7
 801bdea:	f7ff fa11 	bl	801b210 <lfs_ctz_index>
 801bdee:	4606      	mov	r6, r0
    while (current > target) {
 801bdf0:	42b5      	cmp	r5, r6
 801bdf2:	d91f      	bls.n	801be34 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801bdf4:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801bdf6:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801bdfa:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801bdfe:	fa95 f3a5 	rbit	r3, r5
 801be02:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801be06:	429c      	cmp	r4, r3
 801be08:	bf28      	it	cs
 801be0a:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801be0c:	2304      	movs	r3, #4
 801be0e:	9303      	str	r3, [sp, #12]
 801be10:	aa05      	add	r2, sp, #20
 801be12:	9202      	str	r2, [sp, #8]
 801be14:	00a2      	lsls	r2, r4, #2
 801be16:	9201      	str	r2, [sp, #4]
 801be18:	9a05      	ldr	r2, [sp, #20]
 801be1a:	9200      	str	r2, [sp, #0]
 801be1c:	464a      	mov	r2, r9
 801be1e:	4641      	mov	r1, r8
 801be20:	4638      	mov	r0, r7
 801be22:	f7ff fa13 	bl	801b24c <lfs_bd_read>
        if (err) {
 801be26:	4603      	mov	r3, r0
 801be28:	2800      	cmp	r0, #0
 801be2a:	d1cf      	bne.n	801bdcc <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801be2c:	2301      	movs	r3, #1
 801be2e:	40a3      	lsls	r3, r4
 801be30:	1aed      	subs	r5, r5, r3
 801be32:	e7dd      	b.n	801bdf0 <lfs_ctz_find+0x3e>
    *block = head;
 801be34:	9b05      	ldr	r3, [sp, #20]
 801be36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801be38:	6013      	str	r3, [r2, #0]
    *off = pos;
 801be3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801be3c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801be3e:	6013      	str	r3, [r2, #0]
    return 0;
 801be40:	2300      	movs	r3, #0
 801be42:	e7c3      	b.n	801bdcc <lfs_ctz_find+0x1a>

0801be44 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801be44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be48:	b087      	sub	sp, #28
 801be4a:	460c      	mov	r4, r1
 801be4c:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801be4e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801be50:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801be52:	4291      	cmp	r1, r2
 801be54:	d272      	bcs.n	801bf3c <lfs_file_flushedread+0xf8>
 801be56:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801be58:	eba2 0901 	sub.w	r9, r2, r1
 801be5c:	4599      	cmp	r9, r3
 801be5e:	bf28      	it	cs
 801be60:	4699      	movcs	r9, r3
    nsize = size;
 801be62:	464e      	mov	r6, r9
    while (nsize > 0) {
 801be64:	e037      	b.n	801bed6 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801be66:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801be6a:	d041      	beq.n	801bef0 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801be6c:	f06f 0301 	mvn.w	r3, #1
 801be70:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801be72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be74:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801be76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801be7c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801be7e:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801be82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be84:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801be86:	1a9d      	subs	r5, r3, r2
 801be88:	42b5      	cmp	r5, r6
 801be8a:	bf28      	it	cs
 801be8c:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801be8e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801be94:	d041      	beq.n	801bf1a <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801be96:	88a1      	ldrh	r1, [r4, #4]
 801be98:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801be9a:	9505      	str	r5, [sp, #20]
 801be9c:	9704      	str	r7, [sp, #16]
 801be9e:	9203      	str	r2, [sp, #12]
 801bea0:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801bea4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801bea8:	9102      	str	r1, [sp, #8]
 801beaa:	4a27      	ldr	r2, [pc, #156]	@ (801bf48 <lfs_file_flushedread+0x104>)
 801beac:	9201      	str	r2, [sp, #4]
 801beae:	9300      	str	r3, [sp, #0]
 801beb0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801beb4:	2200      	movs	r2, #0
 801beb6:	f104 0108 	add.w	r1, r4, #8
 801beba:	4640      	mov	r0, r8
 801bebc:	f7ff fd9e 	bl	801b9fc <lfs_dir_getread>
            if (err) {
 801bec0:	4603      	mov	r3, r0
 801bec2:	2800      	cmp	r0, #0
 801bec4:	d13b      	bne.n	801bf3e <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801bec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bec8:	442b      	add	r3, r5
 801beca:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801becc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bece:	442b      	add	r3, r5
 801bed0:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801bed2:	442f      	add	r7, r5
        nsize -= diff;
 801bed4:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801bed6:	2e00      	cmp	r6, #0
 801bed8:	d02e      	beq.n	801bf38 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801beda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bedc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801bee0:	d0c1      	beq.n	801be66 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801bee2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801bee4:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801bee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801beea:	4291      	cmp	r1, r2
 801beec:	d1c7      	bne.n	801be7e <lfs_file_flushedread+0x3a>
 801beee:	e7ba      	b.n	801be66 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801bef0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801bef4:	9303      	str	r3, [sp, #12]
 801bef6:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801befa:	9302      	str	r3, [sp, #8]
 801befc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801befe:	9301      	str	r3, [sp, #4]
 801bf00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bf06:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bf0a:	2100      	movs	r1, #0
 801bf0c:	4640      	mov	r0, r8
 801bf0e:	f7ff ff50 	bl	801bdb2 <lfs_ctz_find>
                if (err) {
 801bf12:	4603      	mov	r3, r0
 801bf14:	2800      	cmp	r0, #0
 801bf16:	d0ae      	beq.n	801be76 <lfs_file_flushedread+0x32>
 801bf18:	e011      	b.n	801bf3e <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801bf1a:	9503      	str	r5, [sp, #12]
 801bf1c:	9702      	str	r7, [sp, #8]
 801bf1e:	9201      	str	r2, [sp, #4]
 801bf20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801bf22:	9200      	str	r2, [sp, #0]
 801bf24:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bf28:	2100      	movs	r1, #0
 801bf2a:	4640      	mov	r0, r8
 801bf2c:	f7ff f98e 	bl	801b24c <lfs_bd_read>
            if (err) {
 801bf30:	4603      	mov	r3, r0
 801bf32:	2800      	cmp	r0, #0
 801bf34:	d0c7      	beq.n	801bec6 <lfs_file_flushedread+0x82>
 801bf36:	e002      	b.n	801bf3e <lfs_file_flushedread+0xfa>
    return size;
 801bf38:	464b      	mov	r3, r9
 801bf3a:	e000      	b.n	801bf3e <lfs_file_flushedread+0xfa>
        return 0;
 801bf3c:	2300      	movs	r3, #0
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	b007      	add	sp, #28
 801bf42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf46:	bf00      	nop
 801bf48:	fff7fc00 	.word	0xfff7fc00

0801bf4c <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	b089      	sub	sp, #36	@ 0x24
 801bf52:	4683      	mov	fp, r0
 801bf54:	468a      	mov	sl, r1
 801bf56:	9205      	str	r2, [sp, #20]
 801bf58:	4698      	mov	r8, r3
 801bf5a:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801bf5e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bf60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bf62:	2400      	movs	r4, #0
 801bf64:	e006      	b.n	801bf74 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801bf66:	462a      	mov	r2, r5
 801bf68:	a906      	add	r1, sp, #24
 801bf6a:	6838      	ldr	r0, [r7, #0]
 801bf6c:	f003 fd82 	bl	801fa74 <lfs_crc>
 801bf70:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bf72:	442c      	add	r4, r5
 801bf74:	42b4      	cmp	r4, r6
 801bf76:	d216      	bcs.n	801bfa6 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801bf78:	1b35      	subs	r5, r6, r4
 801bf7a:	2d08      	cmp	r5, #8
 801bf7c:	bf28      	it	cs
 801bf7e:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801bf80:	9503      	str	r5, [sp, #12]
 801bf82:	ab06      	add	r3, sp, #24
 801bf84:	9302      	str	r3, [sp, #8]
 801bf86:	eb04 0309 	add.w	r3, r4, r9
 801bf8a:	9301      	str	r3, [sp, #4]
 801bf8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf8e:	9300      	str	r3, [sp, #0]
 801bf90:	eba8 0304 	sub.w	r3, r8, r4
 801bf94:	9a05      	ldr	r2, [sp, #20]
 801bf96:	4651      	mov	r1, sl
 801bf98:	4658      	mov	r0, fp
 801bf9a:	f7ff f957 	bl	801b24c <lfs_bd_read>
        if (err) {
 801bf9e:	4603      	mov	r3, r0
 801bfa0:	2800      	cmp	r0, #0
 801bfa2:	d0e0      	beq.n	801bf66 <lfs_bd_crc+0x1a>
 801bfa4:	e000      	b.n	801bfa8 <lfs_bd_crc+0x5c>
    return 0;
 801bfa6:	2300      	movs	r3, #0
}
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	b009      	add	sp, #36	@ 0x24
 801bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfb0 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	b097      	sub	sp, #92	@ 0x5c
 801bfb6:	4605      	mov	r5, r0
 801bfb8:	460e      	mov	r6, r1
 801bfba:	4617      	mov	r7, r2
 801bfbc:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801bfbe:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bfc0:	b13b      	cbz	r3, 801bfd2 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801bfc2:	6812      	ldr	r2, [r2, #0]
 801bfc4:	4293      	cmp	r3, r2
 801bfc6:	f240 825a 	bls.w	801c47e <lfs_dir_fetchmatch+0x4ce>
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	4293      	cmp	r3, r2
 801bfce:	f240 8259 	bls.w	801c484 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801bfd2:	2400      	movs	r4, #0
 801bfd4:	9412      	str	r4, [sp, #72]	@ 0x48
 801bfd6:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801bfd8:	46a0      	mov	r8, r4
 801bfda:	e010      	b.n	801bffe <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801bfdc:	f118 0301 	adds.w	r3, r8, #1
 801bfe0:	f003 0301 	and.w	r3, r3, #1
 801bfe4:	bf48      	it	mi
 801bfe6:	425b      	negmi	r3, r3
 801bfe8:	a916      	add	r1, sp, #88	@ 0x58
 801bfea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bfee:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801bff2:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801bff4:	2a00      	cmp	r2, #0
 801bff6:	dd00      	ble.n	801bffa <lfs_dir_fetchmatch+0x4a>
            r = i;
 801bff8:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801bffa:	f108 0801 	add.w	r8, r8, #1
 801bffe:	f1b8 0f01 	cmp.w	r8, #1
 801c002:	dc1d      	bgt.n	801c040 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801c004:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801c008:	ab12      	add	r3, sp, #72	@ 0x48
 801c00a:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801c00e:	2304      	movs	r3, #4
 801c010:	9303      	str	r3, [sp, #12]
 801c012:	9202      	str	r2, [sp, #8]
 801c014:	2100      	movs	r1, #0
 801c016:	9101      	str	r1, [sp, #4]
 801c018:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801c01c:	9200      	str	r2, [sp, #0]
 801c01e:	462a      	mov	r2, r5
 801c020:	4628      	mov	r0, r5
 801c022:	f7ff f913 	bl	801b24c <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801c026:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801c02a:	eb0d 0903 	add.w	r9, sp, r3
 801c02e:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801c032:	4683      	mov	fp, r0
 801c034:	2800      	cmp	r0, #0
 801c036:	d0d1      	beq.n	801bfdc <lfs_dir_fetchmatch+0x2c>
 801c038:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c03c:	d0dd      	beq.n	801bffa <lfs_dir_fetchmatch+0x4a>
 801c03e:	e21a      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801c040:	2c00      	cmp	r4, #0
 801c042:	f004 0301 	and.w	r3, r4, #1
 801c046:	bfb8      	it	lt
 801c048:	425b      	neglt	r3, r3
 801c04a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801c04e:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801c050:	f114 0c01 	adds.w	ip, r4, #1
 801c054:	f00c 0c01 	and.w	ip, ip, #1
 801c058:	bf48      	it	mi
 801c05a:	f1cc 0c00 	rsbmi	ip, ip, #0
 801c05e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801c062:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801c064:	aa16      	add	r2, sp, #88	@ 0x58
 801c066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c06a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c06e:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801c070:	2400      	movs	r4, #0
 801c072:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801c074:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c078:	f8cd c01c 	str.w	ip, [sp, #28]
 801c07c:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801c07e:	f1b9 0f01 	cmp.w	r9, #1
 801c082:	f300 81eb 	bgt.w	801c45c <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c086:	4a90      	ldr	r2, [pc, #576]	@ (801c2c8 <lfs_dir_fetchmatch+0x318>)
 801c088:	ab0e      	add	r3, sp, #56	@ 0x38
 801c08a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c08e:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801c092:	2204      	movs	r2, #4
 801c094:	f106 0108 	add.w	r1, r6, #8
 801c098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c09c:	f003 fcea 	bl	801fa74 <lfs_crc>
 801c0a0:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801c0a2:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	461c      	mov	r4, r3
 801c0aa:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801c0ac:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801c0ae:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801c0b2:	461f      	mov	r7, r3
 801c0b4:	e110      	b.n	801c2d8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c0b6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c0ba:	d101      	bne.n	801c0c0 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801c0bc:	2300      	movs	r3, #0
 801c0be:	e01e      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
                return err;
 801c0c0:	4683      	mov	fp, r0
 801c0c2:	e1d8      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801c0c4:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801c0c8:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801c0cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c0d0:	bf14      	ite	ne
 801c0d2:	2300      	movne	r3, #0
 801c0d4:	2301      	moveq	r3, #1
                break;
 801c0d6:	e012      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801c0d8:	2204      	movs	r2, #4
 801c0da:	9203      	str	r2, [sp, #12]
 801c0dc:	aa0d      	add	r2, sp, #52	@ 0x34
 801c0de:	9202      	str	r2, [sp, #8]
 801c0e0:	1d22      	adds	r2, r4, #4
 801c0e2:	9201      	str	r2, [sp, #4]
 801c0e4:	6832      	ldr	r2, [r6, #0]
 801c0e6:	9200      	str	r2, [sp, #0]
 801c0e8:	462a      	mov	r2, r5
 801c0ea:	2100      	movs	r1, #0
 801c0ec:	4628      	mov	r0, r5
 801c0ee:	f7ff f8ad 	bl	801b24c <lfs_bd_read>
                if (err) {
 801c0f2:	bb80      	cbnz	r0, 801c156 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801c0f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c0f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c0f8:	429a      	cmp	r2, r3
 801c0fa:	d031      	beq.n	801c160 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801c0fc:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801c0fe:	68f2      	ldr	r2, [r6, #12]
 801c100:	2a00      	cmp	r2, #0
 801c102:	f000 8165 	beq.w	801c3d0 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801c106:	2100      	movs	r1, #0
 801c108:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801c10a:	b153      	cbz	r3, 801c122 <lfs_dir_fetchmatch+0x172>
 801c10c:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801c10e:	6a01      	ldr	r1, [r0, #32]
 801c110:	fbb2 f3f1 	udiv	r3, r2, r1
 801c114:	fb01 2313 	mls	r3, r1, r3, r2
 801c118:	b91b      	cbnz	r3, 801c122 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801c11a:	9b08      	ldr	r3, [sp, #32]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	f040 8165 	bne.w	801c3ec <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801c122:	4631      	mov	r1, r6
 801c124:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801c128:	f7fe ff00 	bl	801af2c <lfs_gstate_hasmovehere>
 801c12c:	2800      	cmp	r0, #0
 801c12e:	f000 817d 	beq.w	801c42c <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c132:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c134:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c138:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c13c:	429a      	cmp	r2, r3
 801c13e:	f000 8173 	beq.w	801c428 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801c142:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801c146:	f000 8171 	beq.w	801c42c <lfs_dir_fetchmatch+0x47c>
 801c14a:	429a      	cmp	r2, r3
 801c14c:	f240 816e 	bls.w	801c42c <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801c150:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801c154:	e16a      	b.n	801c42c <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801c156:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c15a:	d0cf      	beq.n	801c0fc <lfs_dir_fetchmatch+0x14c>
                    return err;
 801c15c:	4683      	mov	fp, r0
 801c15e:	e18a      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c162:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c166:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c16a:	2204      	movs	r2, #4
 801c16c:	a90b      	add	r1, sp, #44	@ 0x2c
 801c16e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c170:	f003 fc80 	bl	801fa74 <lfs_crc>
 801c174:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c178:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c17c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c180:	bf08      	it	eq
 801c182:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c184:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c188:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c18a:	4423      	add	r3, r4
 801c18c:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c18e:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c192:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c196:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c19a:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c19e:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c1a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c1a4:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c1a6:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c1aa:	e095      	b.n	801c2d8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c1ac:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c1b0:	d101      	bne.n	801c1b6 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	e7a3      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
                return err;
 801c1b6:	4683      	mov	fp, r0
 801c1b8:	e15d      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c1ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c1be:	d021      	beq.n	801c204 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c1c0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c1c4:	d046      	beq.n	801c254 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c1c6:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c1ca:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	f040 80e3 	bne.w	801c39a <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c1d4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c1d8:	2208      	movs	r2, #8
 801c1da:	9203      	str	r2, [sp, #12]
 801c1dc:	aa10      	add	r2, sp, #64	@ 0x40
 801c1de:	9202      	str	r2, [sp, #8]
 801c1e0:	f8cd 8004 	str.w	r8, [sp, #4]
 801c1e4:	6832      	ldr	r2, [r6, #0]
 801c1e6:	9200      	str	r2, [sp, #0]
 801c1e8:	462a      	mov	r2, r5
 801c1ea:	2100      	movs	r1, #0
 801c1ec:	4628      	mov	r0, r5
 801c1ee:	f7ff f82d 	bl	801b24c <lfs_bd_read>
                if (err) {
 801c1f2:	2800      	cmp	r0, #0
 801c1f4:	d04a      	beq.n	801c28c <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c1f6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c1fa:	f000 80e7 	beq.w	801c3cc <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c1fe:	2301      	movs	r3, #1
 801c200:	9308      	str	r3, [sp, #32]
 801c202:	e0ca      	b.n	801c39a <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c204:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c206:	fa17 f280 	uxtah	r2, r7, r0
 801c20a:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c20c:	9a06      	ldr	r2, [sp, #24]
 801c20e:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c210:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c214:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c218:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c21c:	f022 0203 	bic.w	r2, r2, #3
 801c220:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c224:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c228:	4293      	cmp	r3, r2
 801c22a:	d00f      	beq.n	801c24c <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c22c:	9a06      	ldr	r2, [sp, #24]
 801c22e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c232:	f000 80b2 	beq.w	801c39a <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c236:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c23a:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c23e:	429a      	cmp	r2, r3
 801c240:	f0c0 80ab 	bcc.w	801c39a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c244:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c248:	9306      	str	r3, [sp, #24]
 801c24a:	e0a6      	b.n	801c39a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c24c:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c250:	9306      	str	r3, [sp, #24]
 801c252:	e0a2      	b.n	801c39a <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c254:	f000 0301 	and.w	r3, r0, #1
 801c258:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c25a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c25e:	2208      	movs	r2, #8
 801c260:	9203      	str	r2, [sp, #12]
 801c262:	aa0e      	add	r2, sp, #56	@ 0x38
 801c264:	9202      	str	r2, [sp, #8]
 801c266:	f8cd 8004 	str.w	r8, [sp, #4]
 801c26a:	6832      	ldr	r2, [r6, #0]
 801c26c:	9200      	str	r2, [sp, #0]
 801c26e:	462a      	mov	r2, r5
 801c270:	2100      	movs	r1, #0
 801c272:	4628      	mov	r0, r5
 801c274:	f7fe ffea 	bl	801b24c <lfs_bd_read>
                if (err) {
 801c278:	2800      	cmp	r0, #0
 801c27a:	f000 808e 	beq.w	801c39a <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c27e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c282:	d101      	bne.n	801c288 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c284:	2300      	movs	r3, #0
 801c286:	e73a      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c288:	4683      	mov	fp, r0
 801c28a:	e0f4      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c28c:	2301      	movs	r3, #1
 801c28e:	9308      	str	r3, [sp, #32]
 801c290:	e083      	b.n	801c39a <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c292:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c296:	d101      	bne.n	801c29c <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c298:	2300      	movs	r3, #0
 801c29a:	e730      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c29c:	4683      	mov	fp, r0
 801c29e:	e0ea      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c2a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c2a2:	9b06      	ldr	r3, [sp, #24]
 801c2a4:	469c      	mov	ip, r3
 801c2a6:	ea82 0103 	eor.w	r1, r2, r3
 801c2aa:	4b08      	ldr	r3, [pc, #32]	@ (801c2cc <lfs_dir_fetchmatch+0x31c>)
 801c2ac:	400b      	ands	r3, r1
 801c2ae:	b17b      	cbz	r3, 801c2d0 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c2b0:	2802      	cmp	r0, #2
 801c2b2:	d110      	bne.n	801c2d6 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c2b4:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c2b8:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c2bc:	459c      	cmp	ip, r3
 801c2be:	d30a      	bcc.n	801c2d6 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c2c0:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c2c4:	9306      	str	r3, [sp, #24]
 801c2c6:	e006      	b.n	801c2d6 <lfs_dir_fetchmatch+0x326>
 801c2c8:	08035d24 	.word	0x08035d24
 801c2cc:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c2d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c2d4:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c2d6:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c2d8:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c2dc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c2e0:	bf14      	ite	ne
 801c2e2:	4643      	movne	r3, r8
 801c2e4:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c2ec:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c2ee:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c2f0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801c2f4:	2204      	movs	r2, #4
 801c2f6:	9203      	str	r2, [sp, #12]
 801c2f8:	aa0c      	add	r2, sp, #48	@ 0x30
 801c2fa:	9202      	str	r2, [sp, #8]
 801c2fc:	9401      	str	r4, [sp, #4]
 801c2fe:	6832      	ldr	r2, [r6, #0]
 801c300:	9200      	str	r2, [sp, #0]
 801c302:	462a      	mov	r2, r5
 801c304:	2100      	movs	r1, #0
 801c306:	4628      	mov	r0, r5
 801c308:	f7fe ffa0 	bl	801b24c <lfs_bd_read>
            if (err) {
 801c30c:	2800      	cmp	r0, #0
 801c30e:	f47f aed2 	bne.w	801c0b6 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801c312:	2204      	movs	r2, #4
 801c314:	a90c      	add	r1, sp, #48	@ 0x30
 801c316:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c318:	f003 fbac 	bl	801fa74 <lfs_crc>
 801c31c:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801c31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801c320:	ba1b      	rev	r3, r3
 801c322:	ea88 0a03 	eor.w	sl, r8, r3
 801c326:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801c32a:	f1ba 0f00 	cmp.w	sl, #0
 801c32e:	f6ff aec9 	blt.w	801c0c4 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c332:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c33a:	bf14      	ite	ne
 801c33c:	4652      	movne	r2, sl
 801c33e:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801c342:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c346:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801c348:	4421      	add	r1, r4
 801c34a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c34e:	4299      	cmp	r1, r3
 801c350:	d83a      	bhi.n	801c3c8 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801c352:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801c356:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801c35a:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801c35e:	f43f aebb 	beq.w	801c0d8 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801c362:	f104 0804 	add.w	r8, r4, #4
 801c366:	a90b      	add	r1, sp, #44	@ 0x2c
 801c368:	9103      	str	r1, [sp, #12]
 801c36a:	9202      	str	r2, [sp, #8]
 801c36c:	f8cd 8004 	str.w	r8, [sp, #4]
 801c370:	6832      	ldr	r2, [r6, #0]
 801c372:	9200      	str	r2, [sp, #0]
 801c374:	462a      	mov	r2, r5
 801c376:	2100      	movs	r1, #0
 801c378:	4628      	mov	r0, r5
 801c37a:	f7ff fde7 	bl	801bf4c <lfs_bd_crc>
            if (err) {
 801c37e:	2800      	cmp	r0, #0
 801c380:	f47f af14 	bne.w	801c1ac <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801c386:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c388:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801c38c:	f47f af15 	bne.w	801c1ba <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801c390:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801c394:	429f      	cmp	r7, r3
 801c396:	d800      	bhi.n	801c39a <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801c398:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801c39a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c39c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c39e:	404b      	eors	r3, r1
 801c3a0:	9a05      	ldr	r2, [sp, #20]
 801c3a2:	4213      	tst	r3, r2
 801c3a4:	d197      	bne.n	801c2d6 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801c3a6:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801c3a8:	9314      	str	r3, [sp, #80]	@ 0x50
 801c3aa:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801c3ae:	aa14      	add	r2, sp, #80	@ 0x50
 801c3b0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801c3b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c3b4:	4798      	blx	r3
                if (res < 0) {
 801c3b6:	2800      	cmp	r0, #0
 801c3b8:	f6ff af6b 	blt.w	801c292 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801c3bc:	2800      	cmp	r0, #0
 801c3be:	f47f af6f 	bne.w	801c2a0 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801c3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3c4:	9306      	str	r3, [sp, #24]
 801c3c6:	e786      	b.n	801c2d6 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	e698      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	e696      	b.n	801c0fe <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801c3d0:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801c3d2:	6872      	ldr	r2, [r6, #4]
 801c3d4:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801c3d6:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801c3d8:	aa16      	add	r2, sp, #88	@ 0x58
 801c3da:	9b07      	ldr	r3, [sp, #28]
 801c3dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c3e0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c3e4:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801c3e6:	f109 0901 	add.w	r9, r9, #1
 801c3ea:	e648      	b.n	801c07e <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801c3ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c3f0:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c3f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801c3f4:	a90d      	add	r1, sp, #52	@ 0x34
 801c3f6:	9103      	str	r1, [sp, #12]
 801c3f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c3fa:	9102      	str	r1, [sp, #8]
 801c3fc:	9201      	str	r2, [sp, #4]
 801c3fe:	6832      	ldr	r2, [r6, #0]
 801c400:	9200      	str	r2, [sp, #0]
 801c402:	462a      	mov	r2, r5
 801c404:	2100      	movs	r1, #0
 801c406:	4628      	mov	r0, r5
 801c408:	f7ff fda0 	bl	801bf4c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c40c:	b120      	cbz	r0, 801c418 <lfs_dir_fetchmatch+0x468>
 801c40e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c412:	d001      	beq.n	801c418 <lfs_dir_fetchmatch+0x468>
                    return err;
 801c414:	4683      	mov	fp, r0
 801c416:	e02e      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801c418:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c41a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c41c:	4293      	cmp	r3, r2
 801c41e:	bf14      	ite	ne
 801c420:	2300      	movne	r3, #0
 801c422:	2301      	moveq	r3, #1
 801c424:	75b3      	strb	r3, [r6, #22]
 801c426:	e67c      	b.n	801c122 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801c428:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801c42c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c42e:	b13b      	cbz	r3, 801c440 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801c430:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801c434:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801c436:	4293      	cmp	r3, r2
 801c438:	bf28      	it	cs
 801c43a:	4613      	movcs	r3, r2
 801c43c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c43e:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801c440:	f1bb 0f00 	cmp.w	fp, #0
 801c444:	da17      	bge.n	801c476 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801c446:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801c44a:	8ab2      	ldrh	r2, [r6, #20]
 801c44c:	429a      	cmp	r2, r3
 801c44e:	d902      	bls.n	801c456 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801c450:	f06f 0b01 	mvn.w	fp, #1
 801c454:	e00f      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801c456:	f04f 0b00 	mov.w	fp, #0
 801c45a:	e00c      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801c45c:	4b0b      	ldr	r3, [pc, #44]	@ (801c48c <lfs_dir_fetchmatch+0x4dc>)
 801c45e:	9301      	str	r3, [sp, #4]
 801c460:	6873      	ldr	r3, [r6, #4]
 801c462:	9300      	str	r3, [sp, #0]
 801c464:	6833      	ldr	r3, [r6, #0]
 801c466:	f240 5259 	movw	r2, #1369	@ 0x559
 801c46a:	4909      	ldr	r1, [pc, #36]	@ (801c490 <lfs_dir_fetchmatch+0x4e0>)
 801c46c:	4809      	ldr	r0, [pc, #36]	@ (801c494 <lfs_dir_fetchmatch+0x4e4>)
 801c46e:	f00d fd99 	bl	8029fa4 <printf>
    return LFS_ERR_CORRUPT;
 801c472:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801c476:	4658      	mov	r0, fp
 801c478:	b017      	add	sp, #92	@ 0x5c
 801c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801c47e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c482:	e7f8      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
 801c484:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c488:	e7f5      	b.n	801c476 <lfs_dir_fetchmatch+0x4c6>
 801c48a:	bf00      	nop
 801c48c:	08036c80 	.word	0x08036c80
 801c490:	08039104 	.word	0x08039104
 801c494:	0803928c 	.word	0x0803928c

0801c498 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801c498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c49c:	b08a      	sub	sp, #40	@ 0x28
 801c49e:	4681      	mov	r9, r0
 801c4a0:	4688      	mov	r8, r1
 801c4a2:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801c4a8:	2501      	movs	r5, #1
 801c4aa:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c4ac:	4a29      	ldr	r2, [pc, #164]	@ (801c554 <lfs_fs_parent+0xbc>)
 801c4ae:	ab05      	add	r3, sp, #20
 801c4b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c4b4:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c4b8:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801c4ba:	e03a      	b.n	801c532 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801c4bc:	4b26      	ldr	r3, [pc, #152]	@ (801c558 <lfs_fs_parent+0xc0>)
 801c4be:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801c4c2:	4926      	ldr	r1, [pc, #152]	@ (801c55c <lfs_fs_parent+0xc4>)
 801c4c4:	4826      	ldr	r0, [pc, #152]	@ (801c560 <lfs_fs_parent+0xc8>)
 801c4c6:	f00d fd6d 	bl	8029fa4 <printf>
            return LFS_ERR_CORRUPT;
 801c4ca:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c4ce:	e03c      	b.n	801c54a <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801c4d0:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801c4d2:	69e3      	ldr	r3, [r4, #28]
 801c4d4:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801c4d6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c4da:	2500      	movs	r5, #0
 801c4dc:	e00d      	b.n	801c4fa <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c4de:	2301      	movs	r3, #1
 801c4e0:	e000      	b.n	801c4e4 <lfs_fs_parent+0x4c>
 801c4e2:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801c4e4:	bb7b      	cbnz	r3, 801c546 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801c4e6:	f104 0618 	add.w	r6, r4, #24
 801c4ea:	a905      	add	r1, sp, #20
 801c4ec:	4630      	mov	r0, r6
 801c4ee:	f7fe fce7 	bl	801aec0 <lfs_pair_issync>
 801c4f2:	2800      	cmp	r0, #0
 801c4f4:	d1e2      	bne.n	801c4bc <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801c4f6:	4555      	cmp	r5, sl
 801c4f8:	d0ea      	beq.n	801c4d0 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801c4fa:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c4fc:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801c500:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c504:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801c506:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c50a:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801c50c:	ab07      	add	r3, sp, #28
 801c50e:	9303      	str	r3, [sp, #12]
 801c510:	4b14      	ldr	r3, [pc, #80]	@ (801c564 <lfs_fs_parent+0xcc>)
 801c512:	9302      	str	r3, [sp, #8]
 801c514:	2300      	movs	r3, #0
 801c516:	9301      	str	r3, [sp, #4]
 801c518:	4b13      	ldr	r3, [pc, #76]	@ (801c568 <lfs_fs_parent+0xd0>)
 801c51a:	9300      	str	r3, [sp, #0]
 801c51c:	4b13      	ldr	r3, [pc, #76]	@ (801c56c <lfs_fs_parent+0xd4>)
 801c51e:	4632      	mov	r2, r6
 801c520:	4621      	mov	r1, r4
 801c522:	4648      	mov	r0, r9
 801c524:	f7ff fd44 	bl	801bfb0 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801c528:	4603      	mov	r3, r0
 801c52a:	b110      	cbz	r0, 801c532 <lfs_fs_parent+0x9a>
 801c52c:	f110 0f02 	cmn.w	r0, #2
 801c530:	d10b      	bne.n	801c54a <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c532:	69a7      	ldr	r7, [r4, #24]
 801c534:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c538:	d0d3      	beq.n	801c4e2 <lfs_fs_parent+0x4a>
 801c53a:	69e3      	ldr	r3, [r4, #28]
 801c53c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c540:	d0cd      	beq.n	801c4de <lfs_fs_parent+0x46>
 801c542:	2300      	movs	r3, #0
 801c544:	e7ce      	b.n	801c4e4 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801c546:	f06f 0301 	mvn.w	r3, #1
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	b00a      	add	sp, #40	@ 0x28
 801c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c552:	bf00      	nop
 801c554:	08035d24 	.word	0x08035d24
 801c558:	08036c80 	.word	0x08036c80
 801c55c:	08039104 	.word	0x08039104
 801c560:	080392c4 	.word	0x080392c4
 801c564:	0801b681 	.word	0x0801b681
 801c568:	20000008 	.word	0x20000008
 801c56c:	7ff003ff 	.word	0x7ff003ff

0801c570 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801c570:	b500      	push	{lr}
 801c572:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801c574:	2300      	movs	r3, #0
 801c576:	9303      	str	r3, [sp, #12]
 801c578:	9302      	str	r3, [sp, #8]
 801c57a:	9301      	str	r3, [sp, #4]
 801c57c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c580:	9300      	str	r3, [sp, #0]
 801c582:	f7ff fd15 	bl	801bfb0 <lfs_dir_fetchmatch>
}
 801c586:	b005      	add	sp, #20
 801c588:	f85d fb04 	ldr.w	pc, [sp], #4

0801c58c <lfs_fs_traverse_>:
        bool includeorphans) {
 801c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c590:	b093      	sub	sp, #76	@ 0x4c
 801c592:	4606      	mov	r6, r0
 801c594:	460f      	mov	r7, r1
 801c596:	4690      	mov	r8, r2
 801c598:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801c59a:	2220      	movs	r2, #32
 801c59c:	2100      	movs	r1, #0
 801c59e:	a80a      	add	r0, sp, #40	@ 0x28
 801c5a0:	f010 fa1e 	bl	802c9e0 <memset>
 801c5a4:	2501      	movs	r5, #1
 801c5a6:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c5a8:	4a62      	ldr	r2, [pc, #392]	@ (801c734 <lfs_fs_traverse_+0x1a8>)
 801c5aa:	ab08      	add	r3, sp, #32
 801c5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c5b0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c5b4:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c5b6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c5b8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801c5bc:	f000 8081 	beq.w	801c6c2 <lfs_fs_traverse_+0x136>
 801c5c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c5c6:	d07a      	beq.n	801c6be <lfs_fs_traverse_+0x132>
 801c5c8:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d17b      	bne.n	801c6c6 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801c5ce:	a908      	add	r1, sp, #32
 801c5d0:	a810      	add	r0, sp, #64	@ 0x40
 801c5d2:	f7fe fc75 	bl	801aec0 <lfs_pair_issync>
 801c5d6:	b988      	cbnz	r0, 801c5fc <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801c5d8:	4555      	cmp	r5, sl
 801c5da:	d019      	beq.n	801c610 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801c5dc:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801c5de:	2400      	movs	r4, #0
 801c5e0:	2c01      	cmp	r4, #1
 801c5e2:	dc1c      	bgt.n	801c61e <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801c5e4:	1da3      	adds	r3, r4, #6
 801c5e6:	aa12      	add	r2, sp, #72	@ 0x48
 801c5e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c5ec:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801c5f0:	4640      	mov	r0, r8
 801c5f2:	47b8      	blx	r7
            if (err) {
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	b9f8      	cbnz	r0, 801c638 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801c5f8:	3401      	adds	r4, #1
 801c5fa:	e7f1      	b.n	801c5e0 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801c5fc:	4b4e      	ldr	r3, [pc, #312]	@ (801c738 <lfs_fs_traverse_+0x1ac>)
 801c5fe:	f241 2222 	movw	r2, #4642	@ 0x1222
 801c602:	494e      	ldr	r1, [pc, #312]	@ (801c73c <lfs_fs_traverse_+0x1b0>)
 801c604:	484e      	ldr	r0, [pc, #312]	@ (801c740 <lfs_fs_traverse_+0x1b4>)
 801c606:	f00d fccd 	bl	8029fa4 <printf>
            return LFS_ERR_CORRUPT;
 801c60a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c60e:	e013      	b.n	801c638 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801c610:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801c612:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c614:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801c616:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c61a:	2500      	movs	r5, #0
 801c61c:	e7de      	b.n	801c5dc <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801c61e:	aa10      	add	r2, sp, #64	@ 0x40
 801c620:	a90a      	add	r1, sp, #40	@ 0x28
 801c622:	4630      	mov	r0, r6
 801c624:	f7ff ffa4 	bl	801c570 <lfs_dir_fetch>
        if (err) {
 801c628:	9005      	str	r0, [sp, #20]
 801c62a:	2800      	cmp	r0, #0
 801c62c:	d17f      	bne.n	801c72e <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c62e:	2400      	movs	r4, #0
 801c630:	e016      	b.n	801c660 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801c632:	f113 0f02 	cmn.w	r3, #2
 801c636:	d011      	beq.n	801c65c <lfs_fs_traverse_+0xd0>
}
 801c638:	4618      	mov	r0, r3
 801c63a:	b013      	add	sp, #76	@ 0x4c
 801c63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801c640:	f8cd 8008 	str.w	r8, [sp, #8]
 801c644:	9701      	str	r7, [sp, #4]
 801c646:	9b07      	ldr	r3, [sp, #28]
 801c648:	9300      	str	r3, [sp, #0]
 801c64a:	9b06      	ldr	r3, [sp, #24]
 801c64c:	4632      	mov	r2, r6
 801c64e:	2100      	movs	r1, #0
 801c650:	4630      	mov	r0, r6
 801c652:	f7fe ffc9 	bl	801b5e8 <lfs_ctz_traverse>
                if (err) {
 801c656:	4603      	mov	r3, r0
 801c658:	2800      	cmp	r0, #0
 801c65a:	d1ed      	bne.n	801c638 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c65c:	3401      	adds	r4, #1
 801c65e:	b2a4      	uxth	r4, r4
 801c660:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801c664:	42a3      	cmp	r3, r4
 801c666:	d9a6      	bls.n	801c5b6 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801c668:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801c66a:	aa06      	add	r2, sp, #24
 801c66c:	9200      	str	r2, [sp, #0]
 801c66e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801c672:	f043 0308 	orr.w	r3, r3, #8
 801c676:	4a33      	ldr	r2, [pc, #204]	@ (801c744 <lfs_fs_traverse_+0x1b8>)
 801c678:	a90a      	add	r1, sp, #40	@ 0x28
 801c67a:	4630      	mov	r0, r6
 801c67c:	f7fe ff8a 	bl	801b594 <lfs_dir_get>
            if (tag < 0) {
 801c680:	1e03      	subs	r3, r0, #0
 801c682:	dbd6      	blt.n	801c632 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801c684:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801c688:	f240 2202 	movw	r2, #514	@ 0x202
 801c68c:	4293      	cmp	r3, r2
 801c68e:	d0d7      	beq.n	801c640 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801c690:	f1b9 0f00 	cmp.w	r9, #0
 801c694:	d0e2      	beq.n	801c65c <lfs_fs_traverse_+0xd0>
 801c696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c69a:	d1df      	bne.n	801c65c <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801c69c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c6a0:	e001      	b.n	801c6a6 <lfs_fs_traverse_+0x11a>
 801c6a2:	f10b 0b01 	add.w	fp, fp, #1
 801c6a6:	f1bb 0f01 	cmp.w	fp, #1
 801c6aa:	dcd7      	bgt.n	801c65c <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801c6ac:	ab06      	add	r3, sp, #24
 801c6ae:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801c6b2:	4640      	mov	r0, r8
 801c6b4:	47b8      	blx	r7
                    if (err) {
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	2800      	cmp	r0, #0
 801c6ba:	d0f2      	beq.n	801c6a2 <lfs_fs_traverse_+0x116>
 801c6bc:	e7bc      	b.n	801c638 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c6be:	2301      	movs	r3, #1
 801c6c0:	e783      	b.n	801c5ca <lfs_fs_traverse_+0x3e>
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	e781      	b.n	801c5ca <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c6c6:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801c6c8:	e00f      	b.n	801c6ea <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c6ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c6cc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c6d0:	9701      	str	r7, [sp, #4]
 801c6d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c6d4:	9200      	str	r2, [sp, #0]
 801c6d6:	4632      	mov	r2, r6
 801c6d8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c6dc:	4630      	mov	r0, r6
 801c6de:	f7fe ff83 	bl	801b5e8 <lfs_ctz_traverse>
            if (err) {
 801c6e2:	4603      	mov	r3, r0
 801c6e4:	b158      	cbz	r0, 801c6fe <lfs_fs_traverse_+0x172>
 801c6e6:	e7a7      	b.n	801c638 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c6e8:	6824      	ldr	r4, [r4, #0]
 801c6ea:	b1f4      	cbz	r4, 801c72a <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801c6ec:	79a3      	ldrb	r3, [r4, #6]
 801c6ee:	2b01      	cmp	r3, #1
 801c6f0:	d1fa      	bne.n	801c6e8 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801c6f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6f4:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801c6f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c6fc:	d0e5      	beq.n	801c6ca <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801c6fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c700:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801c704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c708:	d1ee      	bne.n	801c6e8 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c70a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c70c:	f8cd 8008 	str.w	r8, [sp, #8]
 801c710:	9701      	str	r7, [sp, #4]
 801c712:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c714:	9200      	str	r2, [sp, #0]
 801c716:	4632      	mov	r2, r6
 801c718:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c71c:	4630      	mov	r0, r6
 801c71e:	f7fe ff63 	bl	801b5e8 <lfs_ctz_traverse>
            if (err) {
 801c722:	4603      	mov	r3, r0
 801c724:	2800      	cmp	r0, #0
 801c726:	d0df      	beq.n	801c6e8 <lfs_fs_traverse_+0x15c>
 801c728:	e786      	b.n	801c638 <lfs_fs_traverse_+0xac>
    return 0;
 801c72a:	2300      	movs	r3, #0
 801c72c:	e784      	b.n	801c638 <lfs_fs_traverse_+0xac>
            return err;
 801c72e:	9b05      	ldr	r3, [sp, #20]
 801c730:	e782      	b.n	801c638 <lfs_fs_traverse_+0xac>
 801c732:	bf00      	nop
 801c734:	08035d24 	.word	0x08035d24
 801c738:	08036c80 	.word	0x08036c80
 801c73c:	08039104 	.word	0x08039104
 801c740:	080392c4 	.word	0x080392c4
 801c744:	700ffc00 	.word	0x700ffc00

0801c748 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801c748:	b538      	push	{r3, r4, r5, lr}
 801c74a:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c74c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c74e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801c750:	4413      	add	r3, r2
            % lfs->block_count;
 801c752:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801c754:	fbb3 f1f2 	udiv	r1, r3, r2
 801c758:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c75c:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801c75e:	2100      	movs	r1, #0
 801c760:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801c762:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c764:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801c766:	00db      	lsls	r3, r3, #3
 801c768:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c76a:	4283      	cmp	r3, r0
 801c76c:	bf28      	it	cs
 801c76e:	4603      	movcs	r3, r0
 801c770:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801c772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801c774:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c776:	f010 f933 	bl	802c9e0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801c77a:	2301      	movs	r3, #1
 801c77c:	4622      	mov	r2, r4
 801c77e:	4906      	ldr	r1, [pc, #24]	@ (801c798 <lfs_alloc_scan+0x50>)
 801c780:	4620      	mov	r0, r4
 801c782:	f7ff ff03 	bl	801c58c <lfs_fs_traverse_>
    if (err) {
 801c786:	4605      	mov	r5, r0
 801c788:	b908      	cbnz	r0, 801c78e <lfs_alloc_scan+0x46>
}
 801c78a:	4628      	mov	r0, r5
 801c78c:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801c78e:	4620      	mov	r0, r4
 801c790:	f7fe fc15 	bl	801afbe <lfs_alloc_drop>
        return err;
 801c794:	e7f9      	b.n	801c78a <lfs_alloc_scan+0x42>
 801c796:	bf00      	nop
 801c798:	0801afcd 	.word	0x0801afcd

0801c79c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801c79c:	b530      	push	{r4, r5, lr}
 801c79e:	b083      	sub	sp, #12
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801c7a4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c7a6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c7a8:	4293      	cmp	r3, r2
 801c7aa:	d22b      	bcs.n	801c804 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7ac:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c7ae:	08da      	lsrs	r2, r3, #3
 801c7b0:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801c7b2:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7b6:	40ca      	lsrs	r2, r1
 801c7b8:	f012 0f01 	tst.w	r2, #1
 801c7bc:	d005      	beq.n	801c7ca <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801c7be:	3301      	adds	r3, #1
 801c7c0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801c7c2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801c7c4:	3b01      	subs	r3, #1
 801c7c6:	6623      	str	r3, [r4, #96]	@ 0x60
 801c7c8:	e7ec      	b.n	801c7a4 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c7ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c7cc:	4413      	add	r3, r2
                        % lfs->block_count;
 801c7ce:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c7d0:	fbb3 f1f2 	udiv	r1, r3, r2
 801c7d4:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c7d8:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801c7da:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c7dc:	3301      	adds	r3, #1
 801c7de:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801c7e0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c7e2:	3a01      	subs	r2, #1
 801c7e4:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801c7e6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c7e8:	4293      	cmp	r3, r2
 801c7ea:	d225      	bcs.n	801c838 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7ec:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c7ee:	08da      	lsrs	r2, r3, #3
 801c7f0:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801c7f2:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7f6:	fa22 f303 	lsr.w	r3, r2, r3
 801c7fa:	f013 0f01 	tst.w	r3, #1
 801c7fe:	d1ec      	bne.n	801c7da <lfs_alloc+0x3e>
                        return 0;
 801c800:	2000      	movs	r0, #0
 801c802:	e01a      	b.n	801c83a <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801c804:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c806:	b12a      	cbz	r2, 801c814 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801c808:	4620      	mov	r0, r4
 801c80a:	f7ff ff9d 	bl	801c748 <lfs_alloc_scan>
        if(err) {
 801c80e:	2800      	cmp	r0, #0
 801c810:	d0c8      	beq.n	801c7a4 <lfs_alloc+0x8>
 801c812:	e012      	b.n	801c83a <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801c814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c816:	4413      	add	r3, r2
 801c818:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c81a:	fbb3 f1f2 	udiv	r1, r3, r2
 801c81e:	4808      	ldr	r0, [pc, #32]	@ (801c840 <lfs_alloc+0xa4>)
 801c820:	9000      	str	r0, [sp, #0]
 801c822:	fb02 3311 	mls	r3, r2, r1, r3
 801c826:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801c82a:	4906      	ldr	r1, [pc, #24]	@ (801c844 <lfs_alloc+0xa8>)
 801c82c:	4806      	ldr	r0, [pc, #24]	@ (801c848 <lfs_alloc+0xac>)
 801c82e:	f00d fbb9 	bl	8029fa4 <printf>
            return LFS_ERR_NOSPC;
 801c832:	f06f 001b 	mvn.w	r0, #27
 801c836:	e000      	b.n	801c83a <lfs_alloc+0x9e>
                        return 0;
 801c838:	2000      	movs	r0, #0
}
 801c83a:	b003      	add	sp, #12
 801c83c:	bd30      	pop	{r4, r5, pc}
 801c83e:	bf00      	nop
 801c840:	08036c80 	.word	0x08036c80
 801c844:	08039104 	.word	0x08039104
 801c848:	080392f0 	.word	0x080392f0

0801c84c <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	b084      	sub	sp, #16
 801c850:	4606      	mov	r6, r0
 801c852:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801c854:	2500      	movs	r5, #0
 801c856:	2d01      	cmp	r5, #1
 801c858:	dc0d      	bgt.n	801c876 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801c85a:	3501      	adds	r5, #1
 801c85c:	f005 0101 	and.w	r1, r5, #1
 801c860:	bf48      	it	mi
 801c862:	4249      	negmi	r1, r1
 801c864:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c868:	4630      	mov	r0, r6
 801c86a:	f7ff ff97 	bl	801c79c <lfs_alloc>
        if (err) {
 801c86e:	4603      	mov	r3, r0
 801c870:	2800      	cmp	r0, #0
 801c872:	d0f0      	beq.n	801c856 <lfs_dir_alloc+0xa>
 801c874:	e02d      	b.n	801c8d2 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801c876:	2100      	movs	r1, #0
 801c878:	4622      	mov	r2, r4
 801c87a:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801c87e:	2304      	movs	r3, #4
 801c880:	9303      	str	r3, [sp, #12]
 801c882:	9202      	str	r2, [sp, #8]
 801c884:	9101      	str	r1, [sp, #4]
 801c886:	6822      	ldr	r2, [r4, #0]
 801c888:	9200      	str	r2, [sp, #0]
 801c88a:	4632      	mov	r2, r6
 801c88c:	4630      	mov	r0, r6
 801c88e:	f7fe fcdd 	bl	801b24c <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801c892:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801c894:	4603      	mov	r3, r0
 801c896:	b110      	cbz	r0, 801c89e <lfs_dir_alloc+0x52>
 801c898:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c89c:	d119      	bne.n	801c8d2 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801c89e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	dd0a      	ble.n	801c8bc <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801c8a6:	3301      	adds	r3, #1
 801c8a8:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801c8ac:	1853      	adds	r3, r2, r1
 801c8ae:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c8b0:	fbb3 f2f1 	udiv	r2, r3, r1
 801c8b4:	fb01 3212 	mls	r2, r1, r2, r3
 801c8b8:	1a9b      	subs	r3, r3, r2
 801c8ba:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801c8bc:	2304      	movs	r3, #4
 801c8be:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801c8c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8c4:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801c8ca:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801c8cc:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801c8ce:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801c8d0:	75e3      	strb	r3, [r4, #23]
}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	b004      	add	sp, #16
 801c8d6:	bd70      	pop	{r4, r5, r6, pc}

0801c8d8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801c8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8da:	b089      	sub	sp, #36	@ 0x24
 801c8dc:	4605      	mov	r5, r0
 801c8de:	460e      	mov	r6, r1
 801c8e0:	e053      	b.n	801c98a <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801c8e2:	2201      	movs	r2, #1
 801c8e4:	9203      	str	r2, [sp, #12]
 801c8e6:	f10d 021b 	add.w	r2, sp, #27
 801c8ea:	9202      	str	r2, [sp, #8]
 801c8ec:	9401      	str	r4, [sp, #4]
 801c8ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801c8f0:	9200      	str	r2, [sp, #0]
 801c8f2:	1b1b      	subs	r3, r3, r4
 801c8f4:	462a      	mov	r2, r5
 801c8f6:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801c8fa:	4628      	mov	r0, r5
 801c8fc:	f7fe fca6 	bl	801b24c <lfs_bd_read>
                if (err) {
 801c900:	2800      	cmp	r0, #0
 801c902:	d152      	bne.n	801c9aa <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801c904:	2301      	movs	r3, #1
 801c906:	9303      	str	r3, [sp, #12]
 801c908:	f10d 021b 	add.w	r2, sp, #27
 801c90c:	9202      	str	r2, [sp, #8]
 801c90e:	9401      	str	r4, [sp, #4]
 801c910:	9a07      	ldr	r2, [sp, #28]
 801c912:	9200      	str	r2, [sp, #0]
 801c914:	462a      	mov	r2, r5
 801c916:	f105 0110 	add.w	r1, r5, #16
 801c91a:	4628      	mov	r0, r5
 801c91c:	f7ff f992 	bl	801bc44 <lfs_bd_prog>
            if (err) {
 801c920:	bb20      	cbnz	r0, 801c96c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c922:	3401      	adds	r4, #1
 801c924:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801c926:	42a3      	cmp	r3, r4
 801c928:	d945      	bls.n	801c9b6 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801c92a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c92c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801c930:	d0d7      	beq.n	801c8e2 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c932:	88b2      	ldrh	r2, [r6, #4]
 801c934:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801c936:	2101      	movs	r1, #1
 801c938:	9105      	str	r1, [sp, #20]
 801c93a:	f10d 011b 	add.w	r1, sp, #27
 801c93e:	9104      	str	r1, [sp, #16]
 801c940:	9403      	str	r4, [sp, #12]
 801c942:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801c946:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c94a:	9202      	str	r2, [sp, #8]
 801c94c:	4a27      	ldr	r2, [pc, #156]	@ (801c9ec <lfs_file_relocate+0x114>)
 801c94e:	9201      	str	r2, [sp, #4]
 801c950:	1b1b      	subs	r3, r3, r4
 801c952:	9300      	str	r3, [sp, #0]
 801c954:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801c958:	2200      	movs	r2, #0
 801c95a:	f106 0108 	add.w	r1, r6, #8
 801c95e:	4628      	mov	r0, r5
 801c960:	f7ff f84c 	bl	801b9fc <lfs_dir_getread>
                if (err) {
 801c964:	2800      	cmp	r0, #0
 801c966:	d0cd      	beq.n	801c904 <lfs_file_relocate+0x2c>
                    return err;
 801c968:	4607      	mov	r7, r0
 801c96a:	e03b      	b.n	801c9e4 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801c96c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c970:	d11d      	bne.n	801c9ae <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c972:	4b1f      	ldr	r3, [pc, #124]	@ (801c9f0 <lfs_file_relocate+0x118>)
 801c974:	9300      	str	r3, [sp, #0]
 801c976:	9b07      	ldr	r3, [sp, #28]
 801c978:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801c97c:	491d      	ldr	r1, [pc, #116]	@ (801c9f4 <lfs_file_relocate+0x11c>)
 801c97e:	481e      	ldr	r0, [pc, #120]	@ (801c9f8 <lfs_file_relocate+0x120>)
 801c980:	f00d fb10 	bl	8029fa4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c988:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801c98a:	a907      	add	r1, sp, #28
 801c98c:	4628      	mov	r0, r5
 801c98e:	f7ff ff05 	bl	801c79c <lfs_alloc>
        if (err) {
 801c992:	4607      	mov	r7, r0
 801c994:	bb30      	cbnz	r0, 801c9e4 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801c996:	9907      	ldr	r1, [sp, #28]
 801c998:	4628      	mov	r0, r5
 801c99a:	f7fe fbdd 	bl	801b158 <lfs_bd_erase>
        if (err) {
 801c99e:	4607      	mov	r7, r0
 801c9a0:	b138      	cbz	r0, 801c9b2 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801c9a2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c9a6:	d0e4      	beq.n	801c972 <lfs_file_relocate+0x9a>
 801c9a8:	e01c      	b.n	801c9e4 <lfs_file_relocate+0x10c>
                    return err;
 801c9aa:	4607      	mov	r7, r0
 801c9ac:	e01a      	b.n	801c9e4 <lfs_file_relocate+0x10c>
                return err;
 801c9ae:	4607      	mov	r7, r0
 801c9b0:	e018      	b.n	801c9e4 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c9b2:	2400      	movs	r4, #0
 801c9b4:	e7b6      	b.n	801c924 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801c9b6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c9b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c9ba:	69e9      	ldr	r1, [r5, #28]
 801c9bc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c9be:	f011 fa4b 	bl	802de58 <memcpy>
        file->cache.block = lfs->pcache.block;
 801c9c2:	692b      	ldr	r3, [r5, #16]
 801c9c4:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801c9c6:	696b      	ldr	r3, [r5, #20]
 801c9c8:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801c9ca:	69ab      	ldr	r3, [r5, #24]
 801c9cc:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801c9ce:	f105 0110 	add.w	r1, r5, #16
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	f7fe fc10 	bl	801b1f8 <lfs_cache_zero>
        file->block = nblock;
 801c9d8:	9b07      	ldr	r3, [sp, #28]
 801c9da:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801c9dc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801c9de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c9e2:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801c9e4:	4638      	mov	r0, r7
 801c9e6:	b009      	add	sp, #36	@ 0x24
 801c9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9ea:	bf00      	nop
 801c9ec:	fff7fc00 	.word	0xfff7fc00
 801c9f0:	08036c80 	.word	0x08036c80
 801c9f4:	08039104 	.word	0x08039104
 801c9f8:	0803931c 	.word	0x0803931c

0801c9fc <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801c9fc:	b538      	push	{r3, r4, r5, lr}
 801c9fe:	4605      	mov	r5, r0
 801ca00:	460c      	mov	r4, r1
    file->off = file->pos;
 801ca02:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801ca04:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801ca06:	f7fe fad7 	bl	801afb8 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	4628      	mov	r0, r5
 801ca0e:	f7ff ff63 	bl	801c8d8 <lfs_file_relocate>
    if (err) {
 801ca12:	b918      	cbnz	r0, 801ca1c <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801ca14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ca16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801ca1a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ca1c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ca20 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca24:	b08b      	sub	sp, #44	@ 0x2c
 801ca26:	4605      	mov	r5, r0
 801ca28:	460f      	mov	r7, r1
 801ca2a:	4616      	mov	r6, r2
 801ca2c:	9305      	str	r3, [sp, #20]
 801ca2e:	e04d      	b.n	801cacc <lfs_ctz_extend+0xac>
            if (size == 0) {
 801ca30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d032      	beq.n	801ca9c <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801ca36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca38:	3b01      	subs	r3, #1
 801ca3a:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801ca3c:	a908      	add	r1, sp, #32
 801ca3e:	4628      	mov	r0, r5
 801ca40:	f7fe fbe6 	bl	801b210 <lfs_ctz_index>
            noff = noff + 1;
 801ca44:	9b08      	ldr	r3, [sp, #32]
 801ca46:	3301      	adds	r3, #1
 801ca48:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801ca4a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ca4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ca4e:	4293      	cmp	r3, r2
 801ca50:	d05b      	beq.n	801cb0a <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801ca52:	2400      	movs	r4, #0
 801ca54:	46b9      	mov	r9, r7
 801ca56:	9f05      	ldr	r7, [sp, #20]
 801ca58:	9b08      	ldr	r3, [sp, #32]
 801ca5a:	42a3      	cmp	r3, r4
 801ca5c:	d94a      	bls.n	801caf4 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801ca5e:	2201      	movs	r2, #1
 801ca60:	9203      	str	r2, [sp, #12]
 801ca62:	aa09      	add	r2, sp, #36	@ 0x24
 801ca64:	9202      	str	r2, [sp, #8]
 801ca66:	9401      	str	r4, [sp, #4]
 801ca68:	9700      	str	r7, [sp, #0]
 801ca6a:	1b1b      	subs	r3, r3, r4
 801ca6c:	4632      	mov	r2, r6
 801ca6e:	2100      	movs	r1, #0
 801ca70:	4628      	mov	r0, r5
 801ca72:	f7fe fbeb 	bl	801b24c <lfs_bd_read>
                    if (err) {
 801ca76:	4603      	mov	r3, r0
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	d139      	bne.n	801caf0 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801ca7c:	2301      	movs	r3, #1
 801ca7e:	9303      	str	r3, [sp, #12]
 801ca80:	aa09      	add	r2, sp, #36	@ 0x24
 801ca82:	9202      	str	r2, [sp, #8]
 801ca84:	9401      	str	r4, [sp, #4]
 801ca86:	9a07      	ldr	r2, [sp, #28]
 801ca88:	9200      	str	r2, [sp, #0]
 801ca8a:	4632      	mov	r2, r6
 801ca8c:	4649      	mov	r1, r9
 801ca8e:	4628      	mov	r0, r5
 801ca90:	f7ff f8d8 	bl	801bc44 <lfs_bd_prog>
                    if (err) {
 801ca94:	4603      	mov	r3, r0
 801ca96:	b948      	cbnz	r0, 801caac <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801ca98:	3401      	adds	r4, #1
 801ca9a:	e7dd      	b.n	801ca58 <lfs_ctz_extend+0x38>
                *block = nblock;
 801ca9c:	4682      	mov	sl, r0
 801ca9e:	9b07      	ldr	r3, [sp, #28]
 801caa0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801caa2:	6013      	str	r3, [r2, #0]
                *off = 0;
 801caa4:	2300      	movs	r3, #0
 801caa6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801caa8:	6013      	str	r3, [r2, #0]
                return 0;
 801caaa:	e02a      	b.n	801cb02 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801caac:	464f      	mov	r7, r9
 801caae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cab2:	d11d      	bne.n	801caf0 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801cab4:	4b36      	ldr	r3, [pc, #216]	@ (801cb90 <lfs_ctz_extend+0x170>)
 801cab6:	9300      	str	r3, [sp, #0]
 801cab8:	9b07      	ldr	r3, [sp, #28]
 801caba:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801cabe:	4935      	ldr	r1, [pc, #212]	@ (801cb94 <lfs_ctz_extend+0x174>)
 801cac0:	4835      	ldr	r0, [pc, #212]	@ (801cb98 <lfs_ctz_extend+0x178>)
 801cac2:	f00d fa6f 	bl	8029fa4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801cac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801caca:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801cacc:	a907      	add	r1, sp, #28
 801cace:	4628      	mov	r0, r5
 801cad0:	f7ff fe64 	bl	801c79c <lfs_alloc>
        if (err) {
 801cad4:	2800      	cmp	r0, #0
 801cad6:	d159      	bne.n	801cb8c <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801cad8:	9907      	ldr	r1, [sp, #28]
 801cada:	4628      	mov	r0, r5
 801cadc:	f7fe fb3c 	bl	801b158 <lfs_bd_erase>
            if (err) {
 801cae0:	4680      	mov	r8, r0
 801cae2:	2800      	cmp	r0, #0
 801cae4:	d0a4      	beq.n	801ca30 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801cae6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801caea:	d0e3      	beq.n	801cab4 <lfs_ctz_extend+0x94>
 801caec:	4682      	mov	sl, r0
 801caee:	e008      	b.n	801cb02 <lfs_ctz_extend+0xe2>
                        return err;
 801caf0:	469a      	mov	sl, r3
 801caf2:	e006      	b.n	801cb02 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801caf4:	46c2      	mov	sl, r8
 801caf6:	9b07      	ldr	r3, [sp, #28]
 801caf8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cafa:	6013      	str	r3, [r2, #0]
                *off = noff;
 801cafc:	9b08      	ldr	r3, [sp, #32]
 801cafe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cb00:	6013      	str	r3, [r2, #0]
}
 801cb02:	4650      	mov	r0, sl
 801cb04:	b00b      	add	sp, #44	@ 0x2c
 801cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801cb0a:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801cb0c:	fa90 f9a0 	rbit	r9, r0
 801cb10:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801cb14:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801cb18:	9b05      	ldr	r3, [sp, #20]
 801cb1a:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801cb1c:	2400      	movs	r4, #0
 801cb1e:	46ab      	mov	fp, r5
 801cb20:	e006      	b.n	801cb30 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801cb22:	465d      	mov	r5, fp
 801cb24:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cb28:	d0c4      	beq.n	801cab4 <lfs_ctz_extend+0x94>
                    return err;
 801cb2a:	4682      	mov	sl, r0
 801cb2c:	e7e9      	b.n	801cb02 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801cb2e:	3401      	adds	r4, #1
 801cb30:	4554      	cmp	r4, sl
 801cb32:	d221      	bcs.n	801cb78 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801cb34:	00a5      	lsls	r5, r4, #2
 801cb36:	2304      	movs	r3, #4
 801cb38:	9303      	str	r3, [sp, #12]
 801cb3a:	ab09      	add	r3, sp, #36	@ 0x24
 801cb3c:	9302      	str	r3, [sp, #8]
 801cb3e:	9501      	str	r5, [sp, #4]
 801cb40:	9b07      	ldr	r3, [sp, #28]
 801cb42:	9300      	str	r3, [sp, #0]
 801cb44:	2301      	movs	r3, #1
 801cb46:	4632      	mov	r2, r6
 801cb48:	4639      	mov	r1, r7
 801cb4a:	4658      	mov	r0, fp
 801cb4c:	f7ff f87a 	bl	801bc44 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801cb50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801cb52:	2800      	cmp	r0, #0
 801cb54:	d1e5      	bne.n	801cb22 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801cb56:	454c      	cmp	r4, r9
 801cb58:	d0e9      	beq.n	801cb2e <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801cb5a:	2304      	movs	r3, #4
 801cb5c:	9303      	str	r3, [sp, #12]
 801cb5e:	a909      	add	r1, sp, #36	@ 0x24
 801cb60:	9102      	str	r1, [sp, #8]
 801cb62:	9501      	str	r5, [sp, #4]
 801cb64:	9200      	str	r2, [sp, #0]
 801cb66:	4632      	mov	r2, r6
 801cb68:	2100      	movs	r1, #0
 801cb6a:	4658      	mov	r0, fp
 801cb6c:	f7fe fb6e 	bl	801b24c <lfs_bd_read>
                    if (err) {
 801cb70:	2800      	cmp	r0, #0
 801cb72:	d0dc      	beq.n	801cb2e <lfs_ctz_extend+0x10e>
                        return err;
 801cb74:	4682      	mov	sl, r0
 801cb76:	e7c4      	b.n	801cb02 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801cb78:	46d1      	mov	r9, sl
 801cb7a:	46c2      	mov	sl, r8
 801cb7c:	9b07      	ldr	r3, [sp, #28]
 801cb7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cb80:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801cb82:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801cb86:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cb88:	6019      	str	r1, [r3, #0]
            return 0;
 801cb8a:	e7ba      	b.n	801cb02 <lfs_ctz_extend+0xe2>
 801cb8c:	4682      	mov	sl, r0
 801cb8e:	e7b8      	b.n	801cb02 <lfs_ctz_extend+0xe2>
 801cb90:	08036c80 	.word	0x08036c80
 801cb94:	08039104 	.word	0x08039104
 801cb98:	0803931c 	.word	0x0803931c

0801cb9c <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801cb9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cba0:	b087      	sub	sp, #28
 801cba2:	4605      	mov	r5, r0
 801cba4:	460c      	mov	r4, r1
 801cba6:	4617      	mov	r7, r2
 801cba8:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801cbaa:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cbac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cbb0:	d008      	beq.n	801cbc4 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801cbb2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801cbb4:	444b      	add	r3, r9
 801cbb6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801cbb8:	4293      	cmp	r3, r2
 801cbba:	bf38      	it	cc
 801cbbc:	4613      	movcc	r3, r2
 801cbbe:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	d32d      	bcc.n	801cc20 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801cbc4:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801cbc6:	f1b8 0f00 	cmp.w	r8, #0
 801cbca:	f000 8094 	beq.w	801ccf6 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801cbce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cbd0:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801cbd4:	d004      	beq.n	801cbe0 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801cbd6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801cbd8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801cbda:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801cbdc:	4288      	cmp	r0, r1
 801cbde:	d150      	bne.n	801cc82 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801cbe0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cbe4:	d144      	bne.n	801cc70 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801cbe6:	b90a      	cbnz	r2, 801cbec <lfs_file_flushedwrite+0x50>
 801cbe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbea:	bb1b      	cbnz	r3, 801cc34 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801cbec:	4628      	mov	r0, r5
 801cbee:	f7fe f9e3 	bl	801afb8 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801cbf2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801cbf6:	9302      	str	r3, [sp, #8]
 801cbf8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801cbfc:	9301      	str	r3, [sp, #4]
 801cbfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cc00:	9300      	str	r3, [sp, #0]
 801cc02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cc04:	462a      	mov	r2, r5
 801cc06:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	f7ff ff08 	bl	801ca20 <lfs_ctz_extend>
                if (err) {
 801cc10:	4601      	mov	r1, r0
 801cc12:	2800      	cmp	r0, #0
 801cc14:	d031      	beq.n	801cc7a <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801cc16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc1c:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801cc1e:	e059      	b.n	801ccd4 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801cc20:	f7ff feec 	bl	801c9fc <lfs_file_outline>
        if (err) {
 801cc24:	4601      	mov	r1, r0
 801cc26:	2800      	cmp	r0, #0
 801cc28:	d0cc      	beq.n	801cbc4 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801cc2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc30:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cc32:	e04f      	b.n	801ccd4 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cc34:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801cc38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801cc3a:	2100      	movs	r1, #0
 801cc3c:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cc3e:	a805      	add	r0, sp, #20
 801cc40:	9003      	str	r0, [sp, #12]
 801cc42:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801cc46:	9002      	str	r0, [sp, #8]
 801cc48:	3b01      	subs	r3, #1
 801cc4a:	9301      	str	r3, [sp, #4]
 801cc4c:	9200      	str	r2, [sp, #0]
 801cc4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801cc50:	4632      	mov	r2, r6
 801cc52:	4628      	mov	r0, r5
 801cc54:	f7ff f8ad 	bl	801bdb2 <lfs_ctz_find>
                    if (err) {
 801cc58:	4601      	mov	r1, r0
 801cc5a:	b920      	cbnz	r0, 801cc66 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801cc5c:	4631      	mov	r1, r6
 801cc5e:	4628      	mov	r0, r5
 801cc60:	f7fe faca 	bl	801b1f8 <lfs_cache_zero>
 801cc64:	e7c2      	b.n	801cbec <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801cc66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc6c:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801cc6e:	e031      	b.n	801ccd4 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801cc70:	f06f 0301 	mvn.w	r3, #1
 801cc74:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801cc76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cc78:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801cc7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc80:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801cc82:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cc84:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801cc86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cc88:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801cc8a:	4546      	cmp	r6, r8
 801cc8c:	bf28      	it	cs
 801cc8e:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801cc90:	9603      	str	r6, [sp, #12]
 801cc92:	9702      	str	r7, [sp, #8]
 801cc94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cc96:	9301      	str	r3, [sp, #4]
 801cc98:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cc9a:	9300      	str	r3, [sp, #0]
 801cc9c:	2301      	movs	r3, #1
 801cc9e:	462a      	mov	r2, r5
 801cca0:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cca4:	4628      	mov	r0, r5
 801cca6:	f7fe ffcd 	bl	801bc44 <lfs_bd_prog>
            if (err) {
 801ccaa:	4601      	mov	r1, r0
 801ccac:	b1b0      	cbz	r0, 801ccdc <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801ccae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ccb2:	d10b      	bne.n	801cccc <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801ccb4:	4621      	mov	r1, r4
 801ccb6:	4628      	mov	r0, r5
 801ccb8:	f7ff fe0e 	bl	801c8d8 <lfs_file_relocate>
            if (err) {
 801ccbc:	4601      	mov	r1, r0
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	d0e6      	beq.n	801cc90 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801ccc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ccc8:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801ccca:	e003      	b.n	801ccd4 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801cccc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ccd2:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ccd4:	4608      	mov	r0, r1
 801ccd6:	b007      	add	sp, #28
 801ccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801ccdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ccde:	4433      	add	r3, r6
 801cce0:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801cce2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cce4:	4433      	add	r3, r6
 801cce6:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801cce8:	4437      	add	r7, r6
        nsize -= diff;
 801ccea:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801ccee:	4628      	mov	r0, r5
 801ccf0:	f7fe f962 	bl	801afb8 <lfs_alloc_ckpoint>
 801ccf4:	e767      	b.n	801cbc6 <lfs_file_flushedwrite+0x2a>
    return size;
 801ccf6:	4649      	mov	r1, r9
 801ccf8:	e7ec      	b.n	801ccd4 <lfs_file_flushedwrite+0x138>
	...

0801ccfc <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801ccfc:	b570      	push	{r4, r5, r6, lr}
 801ccfe:	b098      	sub	sp, #96	@ 0x60
 801cd00:	4605      	mov	r5, r0
 801cd02:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801cd04:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cd06:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cd0a:	d008      	beq.n	801cd1e <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801cd0c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd10:	d102      	bne.n	801cd18 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801cd12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd16:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801cd18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cd1c:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801cd1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd20:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cd24:	d068      	beq.n	801cdf8 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801cd26:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801cd28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd2c:	d151      	bne.n	801cdd2 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801cd2e:	2254      	movs	r2, #84	@ 0x54
 801cd30:	2100      	movs	r1, #0
 801cd32:	a803      	add	r0, sp, #12
 801cd34:	f00f fe54 	bl	802c9e0 <memset>
                .ctz.head = file->ctz.head,
 801cd38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801cd3a:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801cd3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801cd3e:	930e      	str	r3, [sp, #56]	@ 0x38
 801cd40:	2301      	movs	r3, #1
 801cd42:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801cd44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801cd46:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd48:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801cd4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cd50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801cd54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd58:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801cd5a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cd5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cd5e:	429a      	cmp	r2, r3
 801cd60:	d21a      	bcs.n	801cd98 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801cd62:	2301      	movs	r3, #1
 801cd64:	f10d 020b 	add.w	r2, sp, #11
 801cd68:	a903      	add	r1, sp, #12
 801cd6a:	4628      	mov	r0, r5
 801cd6c:	f7ff f86a 	bl	801be44 <lfs_file_flushedread>
                if (res < 0) {
 801cd70:	1e03      	subs	r3, r0, #0
 801cd72:	db42      	blt.n	801cdfa <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801cd74:	2301      	movs	r3, #1
 801cd76:	f10d 020b 	add.w	r2, sp, #11
 801cd7a:	4621      	mov	r1, r4
 801cd7c:	4628      	mov	r0, r5
 801cd7e:	f7ff ff0d 	bl	801cb9c <lfs_file_flushedwrite>
                if (res < 0) {
 801cd82:	1e03      	subs	r3, r0, #0
 801cd84:	db39      	blt.n	801cdfa <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801cd86:	682b      	ldr	r3, [r5, #0]
 801cd88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cd8c:	d0e5      	beq.n	801cd5a <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801cd8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd92:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd94:	602b      	str	r3, [r5, #0]
}
 801cd96:	e7e0      	b.n	801cd5a <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801cd98:	2301      	movs	r3, #1
 801cd9a:	462a      	mov	r2, r5
 801cd9c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cda0:	4628      	mov	r0, r5
 801cda2:	f7fe fef5 	bl	801bb90 <lfs_bd_flush>
                if (err) {
 801cda6:	4603      	mov	r3, r0
 801cda8:	b1c0      	cbz	r0, 801cddc <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801cdaa:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cdae:	d124      	bne.n	801cdfa <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801cdb0:	4b13      	ldr	r3, [pc, #76]	@ (801ce00 <lfs_file_flush+0x104>)
 801cdb2:	9300      	str	r3, [sp, #0]
 801cdb4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cdb6:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801cdba:	4912      	ldr	r1, [pc, #72]	@ (801ce04 <lfs_file_flush+0x108>)
 801cdbc:	4812      	ldr	r0, [pc, #72]	@ (801ce08 <lfs_file_flush+0x10c>)
 801cdbe:	f00d f8f1 	bl	8029fa4 <printf>
                err = lfs_file_relocate(lfs, file);
 801cdc2:	4621      	mov	r1, r4
 801cdc4:	4628      	mov	r0, r5
 801cdc6:	f7ff fd87 	bl	801c8d8 <lfs_file_relocate>
                if (err) {
 801cdca:	4603      	mov	r3, r0
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	d0e3      	beq.n	801cd98 <lfs_file_flush+0x9c>
 801cdd0:	e013      	b.n	801cdfa <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801cdd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801cdd4:	42b3      	cmp	r3, r6
 801cdd6:	bf38      	it	cc
 801cdd8:	4633      	movcc	r3, r6
 801cdda:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801cddc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cdde:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801cde0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cde2:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801cde4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cde6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801cdea:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801cdec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cdf0:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801cdf2:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	e000      	b.n	801cdfa <lfs_file_flush+0xfe>
 801cdf8:	2300      	movs	r3, #0
}
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	b018      	add	sp, #96	@ 0x60
 801cdfe:	bd70      	pop	{r4, r5, r6, pc}
 801ce00:	08036c80 	.word	0x08036c80
 801ce04:	08039104 	.word	0x08039104
 801ce08:	0803931c 	.word	0x0803931c

0801ce0c <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce0e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ce10:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ce12:	f013 0f01 	tst.w	r3, #1
 801ce16:	d00f      	beq.n	801ce38 <lfs_file_read_+0x2c>
 801ce18:	4605      	mov	r5, r0
 801ce1a:	460c      	mov	r4, r1
 801ce1c:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801ce1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801ce22:	d002      	beq.n	801ce2a <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801ce24:	f7ff ff6a 	bl	801ccfc <lfs_file_flush>
        if (err) {
 801ce28:	b928      	cbnz	r0, 801ce36 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801ce2a:	463b      	mov	r3, r7
 801ce2c:	4632      	mov	r2, r6
 801ce2e:	4621      	mov	r1, r4
 801ce30:	4628      	mov	r0, r5
 801ce32:	f7ff f807 	bl	801be44 <lfs_file_flushedread>
}
 801ce36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ce38:	4b03      	ldr	r3, [pc, #12]	@ (801ce48 <lfs_file_read_+0x3c>)
 801ce3a:	4a04      	ldr	r2, [pc, #16]	@ (801ce4c <lfs_file_read_+0x40>)
 801ce3c:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801ce40:	4803      	ldr	r0, [pc, #12]	@ (801ce50 <lfs_file_read_+0x44>)
 801ce42:	f00d f87b 	bl	8029f3c <__assert_func>
 801ce46:	bf00      	nop
 801ce48:	08039340 	.word	0x08039340
 801ce4c:	08039d78 	.word	0x08039d78
 801ce50:	08039104 	.word	0x08039104

0801ce54 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801ce54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce56:	b083      	sub	sp, #12
 801ce58:	4606      	mov	r6, r0
 801ce5a:	460d      	mov	r5, r1
 801ce5c:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801ce5e:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801ce60:	b123      	cbz	r3, 801ce6c <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801ce62:	2b01      	cmp	r3, #1
 801ce64:	d021      	beq.n	801ceaa <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801ce66:	2b02      	cmp	r3, #2
 801ce68:	d023      	beq.n	801ceb2 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801ce6a:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801ce6c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801ce6e:	42a3      	cmp	r3, r4
 801ce70:	d339      	bcc.n	801cee6 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801ce72:	42bc      	cmp	r4, r7
 801ce74:	d023      	beq.n	801cebe <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801ce76:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801ce78:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801ce7c:	d10c      	bne.n	801ce98 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801ce7e:	9701      	str	r7, [sp, #4]
 801ce80:	a901      	add	r1, sp, #4
 801ce82:	4630      	mov	r0, r6
 801ce84:	f7fe f9c4 	bl	801b210 <lfs_ctz_index>
 801ce88:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801ce8a:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801ce8c:	4669      	mov	r1, sp
 801ce8e:	4630      	mov	r0, r6
 801ce90:	f7fe f9be 	bl	801b210 <lfs_ctz_index>
        if (oindex == nindex
 801ce94:	4287      	cmp	r7, r0
 801ce96:	d014      	beq.n	801cec2 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801ce98:	4629      	mov	r1, r5
 801ce9a:	4630      	mov	r0, r6
 801ce9c:	f7ff ff2e 	bl	801ccfc <lfs_file_flush>
    if (err) {
 801cea0:	b908      	cbnz	r0, 801cea6 <lfs_file_seek_+0x52>
    file->pos = npos;
 801cea2:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801cea4:	4620      	mov	r0, r4
}
 801cea6:	b003      	add	sp, #12
 801cea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801ceaa:	42e7      	cmn	r7, r4
 801ceac:	d415      	bmi.n	801ceda <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801ceae:	443c      	add	r4, r7
 801ceb0:	e7dc      	b.n	801ce6c <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801ceb2:	f7fe f90e 	bl	801b0d2 <lfs_file_size_>
        if (res < 0) {
 801ceb6:	1900      	adds	r0, r0, r4
 801ceb8:	d412      	bmi.n	801cee0 <lfs_file_seek_+0x8c>
            npos = res;
 801ceba:	4604      	mov	r4, r0
 801cebc:	e7d6      	b.n	801ce6c <lfs_file_seek_+0x18>
        return npos;
 801cebe:	4620      	mov	r0, r4
 801cec0:	e7f1      	b.n	801cea6 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801cec2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801cec4:	9a00      	ldr	r2, [sp, #0]
 801cec6:	4293      	cmp	r3, r2
 801cec8:	d8e6      	bhi.n	801ce98 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801ceca:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801cecc:	440b      	add	r3, r1
 801cece:	429a      	cmp	r2, r3
 801ced0:	d2e2      	bcs.n	801ce98 <lfs_file_seek_+0x44>
            file->pos = npos;
 801ced2:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801ced4:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801ced6:	4620      	mov	r0, r4
 801ced8:	e7e5      	b.n	801cea6 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801ceda:	f06f 0015 	mvn.w	r0, #21
 801cede:	e7e2      	b.n	801cea6 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801cee0:	f06f 0015 	mvn.w	r0, #21
 801cee4:	e7df      	b.n	801cea6 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801cee6:	f06f 0015 	mvn.w	r0, #21
 801ceea:	e7dc      	b.n	801cea6 <lfs_file_seek_+0x52>

0801ceec <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cef0:	b082      	sub	sp, #8
 801cef2:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cef4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cef6:	f013 0f02 	tst.w	r3, #2
 801cefa:	d02a      	beq.n	801cf52 <lfs_file_write_+0x66>
 801cefc:	4605      	mov	r5, r0
 801cefe:	460c      	mov	r4, r1
 801cf00:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801cf02:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cf06:	d12b      	bne.n	801cf60 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801cf08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf0a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801cf0e:	d004      	beq.n	801cf1a <lfs_file_write_+0x2e>
 801cf10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cf14:	4291      	cmp	r1, r2
 801cf16:	d200      	bcs.n	801cf1a <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801cf18:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801cf1a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801cf1c:	19f1      	adds	r1, r6, r7
 801cf1e:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801cf20:	4291      	cmp	r1, r2
 801cf22:	d831      	bhi.n	801cf88 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801cf24:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cf28:	d11f      	bne.n	801cf6a <lfs_file_write_+0x7e>
 801cf2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cf2c:	429e      	cmp	r6, r3
 801cf2e:	d91c      	bls.n	801cf6a <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801cf30:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801cf32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf34:	428e      	cmp	r6, r1
 801cf36:	d918      	bls.n	801cf6a <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801cf38:	2300      	movs	r3, #0
 801cf3a:	f88d 3007 	strb.w	r3, [sp, #7]
 801cf3e:	2301      	movs	r3, #1
 801cf40:	f10d 0207 	add.w	r2, sp, #7
 801cf44:	4621      	mov	r1, r4
 801cf46:	4628      	mov	r0, r5
 801cf48:	f7ff fe28 	bl	801cb9c <lfs_file_flushedwrite>
            if (res < 0) {
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	daf0      	bge.n	801cf32 <lfs_file_write_+0x46>
 801cf50:	e017      	b.n	801cf82 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cf52:	4b0f      	ldr	r3, [pc, #60]	@ (801cf90 <lfs_file_write_+0xa4>)
 801cf54:	4a0f      	ldr	r2, [pc, #60]	@ (801cf94 <lfs_file_write_+0xa8>)
 801cf56:	f640 6126 	movw	r1, #3622	@ 0xe26
 801cf5a:	480f      	ldr	r0, [pc, #60]	@ (801cf98 <lfs_file_write_+0xac>)
 801cf5c:	f00c ffee 	bl	8029f3c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801cf60:	f7ff fecc 	bl	801ccfc <lfs_file_flush>
        if (err) {
 801cf64:	2800      	cmp	r0, #0
 801cf66:	d0cf      	beq.n	801cf08 <lfs_file_write_+0x1c>
 801cf68:	e00b      	b.n	801cf82 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801cf6a:	463b      	mov	r3, r7
 801cf6c:	4642      	mov	r2, r8
 801cf6e:	4621      	mov	r1, r4
 801cf70:	4628      	mov	r0, r5
 801cf72:	f7ff fe13 	bl	801cb9c <lfs_file_flushedwrite>
    if (nsize < 0) {
 801cf76:	2800      	cmp	r0, #0
 801cf78:	db03      	blt.n	801cf82 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801cf7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf7c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801cf80:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cf82:	b002      	add	sp, #8
 801cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801cf88:	f06f 001a 	mvn.w	r0, #26
 801cf8c:	e7f9      	b.n	801cf82 <lfs_file_write_+0x96>
 801cf8e:	bf00      	nop
 801cf90:	08039370 	.word	0x08039370
 801cf94:	08039d58 	.word	0x08039d58
 801cf98:	08039104 	.word	0x08039104

0801cf9c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801cf9c:	b500      	push	{lr}
 801cf9e:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801cfa4:	aa01      	add	r2, sp, #4
 801cfa6:	4904      	ldr	r1, [pc, #16]	@ (801cfb8 <lfs_fs_size_+0x1c>)
 801cfa8:	f7ff faf0 	bl	801c58c <lfs_fs_traverse_>
    if (err) {
 801cfac:	b900      	cbnz	r0, 801cfb0 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801cfae:	9801      	ldr	r0, [sp, #4]
}
 801cfb0:	b003      	add	sp, #12
 801cfb2:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfb6:	bf00      	nop
 801cfb8:	0801b14d 	.word	0x0801b14d

0801cfbc <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc0:	b082      	sub	sp, #8
 801cfc2:	4680      	mov	r8, r0
 801cfc4:	460e      	mov	r6, r1
 801cfc6:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801cfc8:	2300      	movs	r3, #0
 801cfca:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801cfcc:	2501      	movs	r5, #1
 801cfce:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cfd0:	4b27      	ldr	r3, [pc, #156]	@ (801d070 <lfs_fs_pred+0xb4>)
 801cfd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfd6:	ab02      	add	r3, sp, #8
 801cfd8:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cfdc:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cfde:	69a7      	ldr	r7, [r4, #24]
 801cfe0:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801cfe4:	d035      	beq.n	801d052 <lfs_fs_pred+0x96>
 801cfe6:	69e3      	ldr	r3, [r4, #28]
 801cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cfec:	d02f      	beq.n	801d04e <lfs_fs_pred+0x92>
 801cfee:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801cff0:	bb8b      	cbnz	r3, 801d056 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801cff2:	f104 0a18 	add.w	sl, r4, #24
 801cff6:	4669      	mov	r1, sp
 801cff8:	4650      	mov	r0, sl
 801cffa:	f7fd ff61 	bl	801aec0 <lfs_pair_issync>
 801cffe:	b9a8      	cbnz	r0, 801d02c <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801d000:	454d      	cmp	r5, r9
 801d002:	d01d      	beq.n	801d040 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801d004:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d006:	6833      	ldr	r3, [r6, #0]
 801d008:	42bb      	cmp	r3, r7
 801d00a:	d027      	beq.n	801d05c <lfs_fs_pred+0xa0>
 801d00c:	69e1      	ldr	r1, [r4, #28]
 801d00e:	6872      	ldr	r2, [r6, #4]
 801d010:	4291      	cmp	r1, r2
 801d012:	d027      	beq.n	801d064 <lfs_fs_pred+0xa8>
 801d014:	42ba      	cmp	r2, r7
 801d016:	d027      	beq.n	801d068 <lfs_fs_pred+0xac>
 801d018:	4299      	cmp	r1, r3
 801d01a:	d027      	beq.n	801d06c <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801d01c:	4652      	mov	r2, sl
 801d01e:	4621      	mov	r1, r4
 801d020:	4640      	mov	r0, r8
 801d022:	f7ff faa5 	bl	801c570 <lfs_dir_fetch>
        if (err) {
 801d026:	2800      	cmp	r0, #0
 801d028:	d0d9      	beq.n	801cfde <lfs_fs_pred+0x22>
 801d02a:	e018      	b.n	801d05e <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801d02c:	4b11      	ldr	r3, [pc, #68]	@ (801d074 <lfs_fs_pred+0xb8>)
 801d02e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801d032:	4911      	ldr	r1, [pc, #68]	@ (801d078 <lfs_fs_pred+0xbc>)
 801d034:	4811      	ldr	r0, [pc, #68]	@ (801d07c <lfs_fs_pred+0xc0>)
 801d036:	f00c ffb5 	bl	8029fa4 <printf>
            return LFS_ERR_CORRUPT;
 801d03a:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d03e:	e00e      	b.n	801d05e <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801d040:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801d042:	69e3      	ldr	r3, [r4, #28]
 801d044:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801d046:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801d04a:	2500      	movs	r5, #0
 801d04c:	e7da      	b.n	801d004 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d04e:	2301      	movs	r3, #1
 801d050:	e7ce      	b.n	801cff0 <lfs_fs_pred+0x34>
 801d052:	2301      	movs	r3, #1
 801d054:	e7cc      	b.n	801cff0 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801d056:	f06f 0001 	mvn.w	r0, #1
 801d05a:	e000      	b.n	801d05e <lfs_fs_pred+0xa2>
            return 0;
 801d05c:	2000      	movs	r0, #0
}
 801d05e:	b002      	add	sp, #8
 801d060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801d064:	2000      	movs	r0, #0
 801d066:	e7fa      	b.n	801d05e <lfs_fs_pred+0xa2>
 801d068:	2000      	movs	r0, #0
 801d06a:	e7f8      	b.n	801d05e <lfs_fs_pred+0xa2>
 801d06c:	2000      	movs	r0, #0
 801d06e:	e7f6      	b.n	801d05e <lfs_fs_pred+0xa2>
 801d070:	08035d24 	.word	0x08035d24
 801d074:	08036c80 	.word	0x08036c80
 801d078:	08039104 	.word	0x08039104
 801d07c:	080392c4 	.word	0x080392c4

0801d080 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801d080:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d082:	b085      	sub	sp, #20
 801d084:	460c      	mov	r4, r1
 801d086:	4616      	mov	r6, r2
 801d088:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801d08a:	9303      	str	r3, [sp, #12]
 801d08c:	9202      	str	r2, [sp, #8]
 801d08e:	684b      	ldr	r3, [r1, #4]
 801d090:	9301      	str	r3, [sp, #4]
 801d092:	680b      	ldr	r3, [r1, #0]
 801d094:	9300      	str	r3, [sp, #0]
 801d096:	2300      	movs	r3, #0
 801d098:	4602      	mov	r2, r0
 801d09a:	f100 0110 	add.w	r1, r0, #16
 801d09e:	f7fe fdd1 	bl	801bc44 <lfs_bd_prog>
    if (err) {
 801d0a2:	4607      	mov	r7, r0
 801d0a4:	b110      	cbz	r0, 801d0ac <lfs_dir_commitprog+0x2c>
}
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	b005      	add	sp, #20
 801d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801d0ac:	462a      	mov	r2, r5
 801d0ae:	4631      	mov	r1, r6
 801d0b0:	68e0      	ldr	r0, [r4, #12]
 801d0b2:	f002 fcdf 	bl	801fa74 <lfs_crc>
 801d0b6:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801d0b8:	6863      	ldr	r3, [r4, #4]
 801d0ba:	442b      	add	r3, r5
 801d0bc:	6063      	str	r3, [r4, #4]
    return 0;
 801d0be:	e7f2      	b.n	801d0a6 <lfs_dir_commitprog+0x26>

0801d0c0 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0c4:	b087      	sub	sp, #28
 801d0c6:	4614      	mov	r4, r2
 801d0c8:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d0ca:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d0d2:	bf14      	ite	ne
 801d0d4:	4690      	movne	r8, r2
 801d0d6:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801d0da:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0de:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801d0e2:	684b      	ldr	r3, [r1, #4]
 801d0e4:	444b      	add	r3, r9
 801d0e6:	694a      	ldr	r2, [r1, #20]
 801d0e8:	4293      	cmp	r3, r2
 801d0ea:	d841      	bhi.n	801d170 <lfs_dir_commitattr+0xb0>
 801d0ec:	4605      	mov	r5, r0
 801d0ee:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801d0f0:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801d0f4:	688b      	ldr	r3, [r1, #8]
 801d0f6:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801d0fa:	ba1b      	rev	r3, r3
 801d0fc:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801d0fe:	2304      	movs	r3, #4
 801d100:	aa05      	add	r2, sp, #20
 801d102:	f7ff ffbd 	bl	801d080 <lfs_dir_commitprog>
    if (err) {
 801d106:	4682      	mov	sl, r0
 801d108:	bb60      	cbnz	r0, 801d164 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801d10a:	2c00      	cmp	r4, #0
 801d10c:	da21      	bge.n	801d152 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d10e:	2400      	movs	r4, #0
 801d110:	4544      	cmp	r4, r8
 801d112:	d225      	bcs.n	801d160 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801d114:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801d118:	6839      	ldr	r1, [r7, #0]
 801d11a:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801d11c:	2001      	movs	r0, #1
 801d11e:	9003      	str	r0, [sp, #12]
 801d120:	f10d 0013 	add.w	r0, sp, #19
 801d124:	9002      	str	r0, [sp, #8]
 801d126:	4422      	add	r2, r4
 801d128:	9201      	str	r2, [sp, #4]
 801d12a:	9100      	str	r1, [sp, #0]
 801d12c:	3b04      	subs	r3, #4
 801d12e:	462a      	mov	r2, r5
 801d130:	2100      	movs	r1, #0
 801d132:	4628      	mov	r0, r5
 801d134:	f7fe f88a 	bl	801b24c <lfs_bd_read>
            if (err) {
 801d138:	4603      	mov	r3, r0
 801d13a:	b9b8      	cbnz	r0, 801d16c <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801d13c:	2301      	movs	r3, #1
 801d13e:	f10d 0213 	add.w	r2, sp, #19
 801d142:	4631      	mov	r1, r6
 801d144:	4628      	mov	r0, r5
 801d146:	f7ff ff9b 	bl	801d080 <lfs_dir_commitprog>
            if (err) {
 801d14a:	4603      	mov	r3, r0
 801d14c:	b970      	cbnz	r0, 801d16c <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d14e:	3401      	adds	r4, #1
 801d150:	e7de      	b.n	801d110 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801d152:	4643      	mov	r3, r8
 801d154:	463a      	mov	r2, r7
 801d156:	4631      	mov	r1, r6
 801d158:	4628      	mov	r0, r5
 801d15a:	f7ff ff91 	bl	801d080 <lfs_dir_commitprog>
        if (err) {
 801d15e:	b950      	cbnz	r0, 801d176 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d160:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d164:	4650      	mov	r0, sl
 801d166:	b007      	add	sp, #28
 801d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d16c:	469a      	mov	sl, r3
 801d16e:	e7f9      	b.n	801d164 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d170:	f06f 0a1b 	mvn.w	sl, #27
 801d174:	e7f6      	b.n	801d164 <lfs_dir_commitattr+0xa4>
            return err;
 801d176:	4682      	mov	sl, r0
 801d178:	e7f4      	b.n	801d164 <lfs_dir_commitattr+0xa4>

0801d17a <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d17a:	b508      	push	{r3, lr}
 801d17c:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d17e:	460a      	mov	r2, r1
 801d180:	6841      	ldr	r1, [r0, #4]
 801d182:	6800      	ldr	r0, [r0, #0]
 801d184:	f7ff ff9c 	bl	801d0c0 <lfs_dir_commitattr>
}
 801d188:	bd08      	pop	{r3, pc}
	...

0801d18c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d190:	b08b      	sub	sp, #44	@ 0x2c
 801d192:	4607      	mov	r7, r0
 801d194:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d196:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d198:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d19a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d19c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d19e:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d1a0:	428b      	cmp	r3, r1
 801d1a2:	bf94      	ite	ls
 801d1a4:	eb02 0803 	addls.w	r8, r2, r3
 801d1a8:	eb02 0801 	addhi.w	r8, r2, r1
 801d1ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d1b0:	fbb8 f3f2 	udiv	r3, r8, r2
 801d1b4:	fb02 8313 	mls	r3, r2, r3, r8
 801d1b8:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d1bc:	2300      	movs	r3, #0
 801d1be:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d1c0:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d1c2:	e03c      	b.n	801d23e <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d1c4:	2201      	movs	r2, #1
 801d1c6:	9203      	str	r2, [sp, #12]
 801d1c8:	f10d 021b 	add.w	r2, sp, #27
 801d1cc:	9202      	str	r2, [sp, #8]
 801d1ce:	9401      	str	r4, [sp, #4]
 801d1d0:	6832      	ldr	r2, [r6, #0]
 801d1d2:	9200      	str	r2, [sp, #0]
 801d1d4:	463a      	mov	r2, r7
 801d1d6:	2100      	movs	r1, #0
 801d1d8:	4638      	mov	r0, r7
 801d1da:	f7fe f837 	bl	801b24c <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d1de:	4603      	mov	r3, r0
 801d1e0:	b118      	cbz	r0, 801d1ea <lfs_dir_commitcrc+0x5e>
 801d1e2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1e6:	f040 80c0 	bne.w	801d36a <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d1ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d1ec:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d1ee:	9307      	str	r3, [sp, #28]
 801d1f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1f4:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d1f6:	aa08      	add	r2, sp, #32
 801d1f8:	9203      	str	r2, [sp, #12]
 801d1fa:	9302      	str	r3, [sp, #8]
 801d1fc:	9401      	str	r4, [sp, #4]
 801d1fe:	6832      	ldr	r2, [r6, #0]
 801d200:	9200      	str	r2, [sp, #0]
 801d202:	463a      	mov	r2, r7
 801d204:	2100      	movs	r1, #0
 801d206:	4638      	mov	r0, r7
 801d208:	f7fe fea0 	bl	801bf4c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d20c:	4603      	mov	r3, r0
 801d20e:	b118      	cbz	r0, 801d218 <lfs_dir_commitcrc+0x8c>
 801d210:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d214:	f040 80a9 	bne.w	801d36a <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d218:	ab07      	add	r3, sp, #28
 801d21a:	4a59      	ldr	r2, [pc, #356]	@ (801d380 <lfs_dir_commitcrc+0x1f4>)
 801d21c:	4631      	mov	r1, r6
 801d21e:	4638      	mov	r0, r7
 801d220:	f7ff ff4e 	bl	801d0c0 <lfs_dir_commitattr>
                if (err) {
 801d224:	4603      	mov	r3, r0
 801d226:	b348      	cbz	r0, 801d27c <lfs_dir_commitcrc+0xf0>
 801d228:	e09f      	b.n	801d36a <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d22a:	2300      	movs	r3, #0
 801d22c:	463a      	mov	r2, r7
 801d22e:	4651      	mov	r1, sl
 801d230:	4638      	mov	r0, r7
 801d232:	f7fe fd81 	bl	801bd38 <lfs_bd_sync>
            if (err) {
 801d236:	4603      	mov	r3, r0
 801d238:	2800      	cmp	r0, #0
 801d23a:	f040 8096 	bne.w	801d36a <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d23e:	6874      	ldr	r4, [r6, #4]
 801d240:	4544      	cmp	r4, r8
 801d242:	d268      	bcs.n	801d316 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d244:	eba8 0304 	sub.w	r3, r8, r4
 801d248:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d24a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d24e:	4293      	cmp	r3, r2
 801d250:	bf94      	ite	ls
 801d252:	18e4      	addls	r4, r4, r3
 801d254:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d256:	3404      	adds	r4, #4
        if (noff < end) {
 801d258:	4544      	cmp	r4, r8
 801d25a:	d204      	bcs.n	801d266 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d25c:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d260:	429c      	cmp	r4, r3
 801d262:	bf28      	it	cs
 801d264:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d266:	23ff      	movs	r3, #255	@ 0xff
 801d268:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d26c:	4544      	cmp	r4, r8
 801d26e:	d305      	bcc.n	801d27c <lfs_dir_commitcrc+0xf0>
 801d270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d274:	6a1b      	ldr	r3, [r3, #32]
 801d276:	1ad2      	subs	r2, r2, r3
 801d278:	42a2      	cmp	r2, r4
 801d27a:	d2a3      	bcs.n	801d1c4 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d27c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d280:	43d2      	mvns	r2, r2
 801d282:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d28a:	6873      	ldr	r3, [r6, #4]
 801d28c:	1ae5      	subs	r5, r4, r3
 801d28e:	3d04      	subs	r5, #4
 801d290:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d294:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d298:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d29c:	68b3      	ldr	r3, [r6, #8]
 801d29e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d2a0:	ba1b      	rev	r3, r3
 801d2a2:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d2a4:	f10d 091c 	add.w	r9, sp, #28
 801d2a8:	2204      	movs	r2, #4
 801d2aa:	4649      	mov	r1, r9
 801d2ac:	68f0      	ldr	r0, [r6, #12]
 801d2ae:	f002 fbe1 	bl	801fa74 <lfs_crc>
 801d2b2:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d2b4:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d2b6:	f107 0a10 	add.w	sl, r7, #16
 801d2ba:	2308      	movs	r3, #8
 801d2bc:	9303      	str	r3, [sp, #12]
 801d2be:	f8cd 9008 	str.w	r9, [sp, #8]
 801d2c2:	6873      	ldr	r3, [r6, #4]
 801d2c4:	9301      	str	r3, [sp, #4]
 801d2c6:	6833      	ldr	r3, [r6, #0]
 801d2c8:	9300      	str	r3, [sp, #0]
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	463a      	mov	r2, r7
 801d2ce:	4651      	mov	r1, sl
 801d2d0:	4638      	mov	r0, r7
 801d2d2:	f7fe fcb7 	bl	801bc44 <lfs_bd_prog>
        if (err) {
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	2800      	cmp	r0, #0
 801d2da:	d146      	bne.n	801d36a <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d2dc:	f1bb 0f00 	cmp.w	fp, #0
 801d2e0:	d104      	bne.n	801d2ec <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d2e2:	6873      	ldr	r3, [r6, #4]
 801d2e4:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d2e8:	68f3      	ldr	r3, [r6, #12]
 801d2ea:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d2ec:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d2ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d2f2:	43db      	mvns	r3, r3
 801d2f4:	061b      	lsls	r3, r3, #24
 801d2f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801d2fa:	406b      	eors	r3, r5
 801d2fc:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801d2fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d302:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801d304:	4544      	cmp	r4, r8
 801d306:	d290      	bcs.n	801d22a <lfs_dir_commitcrc+0x9e>
 801d308:	697b      	ldr	r3, [r7, #20]
 801d30a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d30c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d30e:	4413      	add	r3, r2
 801d310:	42a3      	cmp	r3, r4
 801d312:	d894      	bhi.n	801d23e <lfs_dir_commitcrc+0xb2>
 801d314:	e789      	b.n	801d22a <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801d316:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801d318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d31c:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801d31e:	aa09      	add	r2, sp, #36	@ 0x24
 801d320:	9203      	str	r2, [sp, #12]
 801d322:	ebab 0203 	sub.w	r2, fp, r3
 801d326:	9202      	str	r2, [sp, #8]
 801d328:	9301      	str	r3, [sp, #4]
 801d32a:	6833      	ldr	r3, [r6, #0]
 801d32c:	9300      	str	r3, [sp, #0]
 801d32e:	f10b 0304 	add.w	r3, fp, #4
 801d332:	463a      	mov	r2, r7
 801d334:	2100      	movs	r1, #0
 801d336:	4638      	mov	r0, r7
 801d338:	f7fe fe08 	bl	801bf4c <lfs_bd_crc>
    if (err) {
 801d33c:	4603      	mov	r3, r0
 801d33e:	b9a0      	cbnz	r0, 801d36a <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801d340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d342:	9a05      	ldr	r2, [sp, #20]
 801d344:	4293      	cmp	r3, r2
 801d346:	d114      	bne.n	801d372 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801d348:	ab09      	add	r3, sp, #36	@ 0x24
 801d34a:	9303      	str	r3, [sp, #12]
 801d34c:	2304      	movs	r3, #4
 801d34e:	9302      	str	r3, [sp, #8]
 801d350:	f8cd b004 	str.w	fp, [sp, #4]
 801d354:	6832      	ldr	r2, [r6, #0]
 801d356:	9200      	str	r2, [sp, #0]
 801d358:	463a      	mov	r2, r7
 801d35a:	2100      	movs	r1, #0
 801d35c:	4638      	mov	r0, r7
 801d35e:	f7fe fdf5 	bl	801bf4c <lfs_bd_crc>
    if (err) {
 801d362:	4603      	mov	r3, r0
 801d364:	b908      	cbnz	r0, 801d36a <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801d366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d368:	b932      	cbnz	r2, 801d378 <lfs_dir_commitcrc+0x1ec>
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	b00b      	add	sp, #44	@ 0x2c
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d372:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d376:	e7f8      	b.n	801d36a <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801d378:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d37c:	e7f5      	b.n	801d36a <lfs_dir_commitcrc+0x1de>
 801d37e:	bf00      	nop
 801d380:	5ffffc08 	.word	0x5ffffc08

0801d384 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d388:	b09b      	sub	sp, #108	@ 0x6c
 801d38a:	4605      	mov	r5, r0
 801d38c:	460c      	mov	r4, r1
 801d38e:	4616      	mov	r6, r2
 801d390:	461f      	mov	r7, r3
 801d392:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801d396:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801d39a:	f7fd fe7f 	bl	801b09c <lfs_dir_needsrelocation>
    dir->rev += 1;
 801d39e:	68a3      	ldr	r3, [r4, #8]
 801d3a0:	3301      	adds	r3, #1
 801d3a2:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801d3a4:	4681      	mov	r9, r0
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d034      	beq.n	801d414 <lfs_dir_compact+0x90>
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	9314      	str	r3, [sp, #80]	@ 0x50
 801d3ae:	2301      	movs	r3, #1
 801d3b0:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d3b2:	6823      	ldr	r3, [r4, #0]
 801d3b4:	b373      	cbz	r3, 801d414 <lfs_dir_compact+0x90>
 801d3b6:	6862      	ldr	r2, [r4, #4]
 801d3b8:	2a01      	cmp	r2, #1
 801d3ba:	d02b      	beq.n	801d414 <lfs_dir_compact+0x90>
 801d3bc:	2b01      	cmp	r3, #1
 801d3be:	d029      	beq.n	801d414 <lfs_dir_compact+0x90>
 801d3c0:	b342      	cbz	r2, 801d414 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801d3c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d3c6:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801d3c8:	f1b9 0f00 	cmp.w	r9, #0
 801d3cc:	f000 810d 	beq.w	801d5ea <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	9318      	str	r3, [sp, #96]	@ 0x60
 801d3d4:	2301      	movs	r3, #1
 801d3d6:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d3d8:	6823      	ldr	r3, [r4, #0]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	f000 810f 	beq.w	801d5fe <lfs_dir_compact+0x27a>
 801d3e0:	6862      	ldr	r2, [r4, #4]
 801d3e2:	2a01      	cmp	r2, #1
 801d3e4:	f000 810b 	beq.w	801d5fe <lfs_dir_compact+0x27a>
 801d3e8:	2b01      	cmp	r3, #1
 801d3ea:	f000 8108 	beq.w	801d5fe <lfs_dir_compact+0x27a>
 801d3ee:	2a00      	cmp	r2, #0
 801d3f0:	f000 8105 	beq.w	801d5fe <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801d3f4:	1d21      	adds	r1, r4, #4
 801d3f6:	4628      	mov	r0, r5
 801d3f8:	f7ff f9d0 	bl	801c79c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	b330      	cbz	r0, 801d44e <lfs_dir_compact+0xca>
 801d400:	f110 0f1c 	cmn.w	r0, #28
 801d404:	d11f      	bne.n	801d446 <lfs_dir_compact+0xc2>
 801d406:	f1b9 0f00 	cmp.w	r9, #0
 801d40a:	d01c      	beq.n	801d446 <lfs_dir_compact+0xc2>
        relocated = true;
 801d40c:	46cb      	mov	fp, r9
        tired = false;
 801d40e:	f04f 0900 	mov.w	r9, #0
 801d412:	e001      	b.n	801d418 <lfs_dir_compact+0x94>
    bool relocated = false;
 801d414:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801d418:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801d41a:	930e      	str	r3, [sp, #56]	@ 0x38
 801d41c:	2300      	movs	r3, #0
 801d41e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d424:	9210      	str	r2, [sp, #64]	@ 0x40
 801d426:	9211      	str	r2, [sp, #68]	@ 0x44
 801d428:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801d42a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d42c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d42e:	b19b      	cbz	r3, 801d458 <lfs_dir_compact+0xd4>
 801d430:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801d432:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801d434:	6861      	ldr	r1, [r4, #4]
 801d436:	4628      	mov	r0, r5
 801d438:	f7fd fe8e 	bl	801b158 <lfs_bd_erase>
            if (err) {
 801d43c:	4603      	mov	r3, r0
 801d43e:	b170      	cbz	r0, 801d45e <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801d440:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d444:	d0bd      	beq.n	801d3c2 <lfs_dir_compact+0x3e>
}
 801d446:	4618      	mov	r0, r3
 801d448:	b01b      	add	sp, #108	@ 0x6c
 801d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801d44e:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801d452:	f04f 0b01 	mov.w	fp, #1
 801d456:	e7df      	b.n	801d418 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d458:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d45a:	3b08      	subs	r3, #8
 801d45c:	e7e9      	b.n	801d432 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801d45e:	2304      	movs	r3, #4
 801d460:	f104 0208 	add.w	r2, r4, #8
 801d464:	a90e      	add	r1, sp, #56	@ 0x38
 801d466:	4628      	mov	r0, r5
 801d468:	f7ff fe0a 	bl	801d080 <lfs_dir_commitprog>
            if (err) {
 801d46c:	4603      	mov	r3, r0
 801d46e:	b118      	cbz	r0, 801d478 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801d470:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d474:	d1e7      	bne.n	801d446 <lfs_dir_compact+0xc2>
 801d476:	e7a4      	b.n	801d3c2 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d478:	9516      	str	r5, [sp, #88]	@ 0x58
 801d47a:	ab0e      	add	r3, sp, #56	@ 0x38
 801d47c:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801d47e:	ab16      	add	r3, sp, #88	@ 0x58
 801d480:	9308      	str	r3, [sp, #32]
 801d482:	4b65      	ldr	r3, [pc, #404]	@ (801d618 <lfs_dir_compact+0x294>)
 801d484:	9307      	str	r3, [sp, #28]
 801d486:	f1c8 0300 	rsb	r3, r8, #0
 801d48a:	b21b      	sxth	r3, r3
 801d48c:	9306      	str	r3, [sp, #24]
 801d48e:	f8cd a014 	str.w	sl, [sp, #20]
 801d492:	f8cd 8010 	str.w	r8, [sp, #16]
 801d496:	2200      	movs	r2, #0
 801d498:	9203      	str	r2, [sp, #12]
 801d49a:	4b60      	ldr	r3, [pc, #384]	@ (801d61c <lfs_dir_compact+0x298>)
 801d49c:	9302      	str	r3, [sp, #8]
 801d49e:	9701      	str	r7, [sp, #4]
 801d4a0:	9600      	str	r6, [sp, #0]
 801d4a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d4a6:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801d4a8:	4628      	mov	r0, r5
 801d4aa:	f7fe f911 	bl	801b6d0 <lfs_dir_traverse>
            if (err) {
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	b118      	cbz	r0, 801d4ba <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801d4b2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d4b6:	d1c6      	bne.n	801d446 <lfs_dir_compact+0xc2>
 801d4b8:	e783      	b.n	801d3c2 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d4ba:	69a2      	ldr	r2, [r4, #24]
 801d4bc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d4c0:	d02c      	beq.n	801d51c <lfs_dir_compact+0x198>
 801d4c2:	69e2      	ldr	r2, [r4, #28]
 801d4c4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d4c8:	d026      	beq.n	801d518 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801d4ca:	f013 0f01 	tst.w	r3, #1
 801d4ce:	d027      	beq.n	801d520 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d4d6:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801d4d8:	f1bb 0f00 	cmp.w	fp, #0
 801d4dc:	d033      	beq.n	801d546 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801d4de:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801d4e2:	a80b      	add	r0, sp, #44	@ 0x2c
 801d4e4:	f7fd fd10 	bl	801af08 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d4e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d4ee:	f023 0303 	bic.w	r3, r3, #3
 801d4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d4f4:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d4f6:	4621      	mov	r1, r4
 801d4f8:	4628      	mov	r0, r5
 801d4fa:	f7fe f859 	bl	801b5b0 <lfs_dir_getgstate>
            if (err) {
 801d4fe:	4603      	mov	r3, r0
 801d500:	2800      	cmp	r0, #0
 801d502:	d1a0      	bne.n	801d446 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801d504:	2b02      	cmp	r3, #2
 801d506:	dc29      	bgt.n	801d55c <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801d508:	aa1a      	add	r2, sp, #104	@ 0x68
 801d50a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d50e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801d512:	bb92      	cbnz	r2, 801d57a <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801d514:	3301      	adds	r3, #1
 801d516:	e7f5      	b.n	801d504 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d518:	2301      	movs	r3, #1
 801d51a:	e7d6      	b.n	801d4ca <lfs_dir_compact+0x146>
 801d51c:	2301      	movs	r3, #1
 801d51e:	e7d4      	b.n	801d4ca <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801d520:	7de2      	ldrb	r2, [r4, #23]
 801d522:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801d526:	f104 0318 	add.w	r3, r4, #24
 801d52a:	493d      	ldr	r1, [pc, #244]	@ (801d620 <lfs_dir_compact+0x29c>)
 801d52c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801d530:	a90e      	add	r1, sp, #56	@ 0x38
 801d532:	4628      	mov	r0, r5
 801d534:	f7ff fdc4 	bl	801d0c0 <lfs_dir_commitattr>
                if (err) {
 801d538:	4603      	mov	r3, r0
 801d53a:	2800      	cmp	r0, #0
 801d53c:	d0c8      	beq.n	801d4d0 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801d53e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d542:	d180      	bne.n	801d446 <lfs_dir_compact+0xc2>
 801d544:	e73d      	b.n	801d3c2 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801d546:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801d54a:	a80b      	add	r0, sp, #44	@ 0x2c
 801d54c:	f7fd fcdc 	bl	801af08 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801d550:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801d554:	a80b      	add	r0, sp, #44	@ 0x2c
 801d556:	f7fd fcd7 	bl	801af08 <lfs_gstate_xor>
 801d55a:	e7c0      	b.n	801d4de <lfs_dir_compact+0x15a>
    return true;
 801d55c:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801d55e:	b973      	cbnz	r3, 801d57e <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801d560:	ab0b      	add	r3, sp, #44	@ 0x2c
 801d562:	4a30      	ldr	r2, [pc, #192]	@ (801d624 <lfs_dir_compact+0x2a0>)
 801d564:	a90e      	add	r1, sp, #56	@ 0x38
 801d566:	4628      	mov	r0, r5
 801d568:	f7ff fdaa 	bl	801d0c0 <lfs_dir_commitattr>
                if (err) {
 801d56c:	4603      	mov	r3, r0
 801d56e:	b130      	cbz	r0, 801d57e <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801d570:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d574:	f47f af67 	bne.w	801d446 <lfs_dir_compact+0xc2>
 801d578:	e723      	b.n	801d3c2 <lfs_dir_compact+0x3e>
            return false;
 801d57a:	2300      	movs	r3, #0
 801d57c:	e7ef      	b.n	801d55e <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801d57e:	a90e      	add	r1, sp, #56	@ 0x38
 801d580:	4628      	mov	r0, r5
 801d582:	f7ff fe03 	bl	801d18c <lfs_dir_commitcrc>
            if (err) {
 801d586:	4603      	mov	r3, r0
 801d588:	b120      	cbz	r0, 801d594 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801d58a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d58e:	f47f af5a 	bne.w	801d446 <lfs_dir_compact+0xc2>
 801d592:	e716      	b.n	801d3c2 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d596:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d598:	6a12      	ldr	r2, [r2, #32]
 801d59a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d59e:	fb02 3311 	mls	r3, r2, r1, r3
 801d5a2:	b9db      	cbnz	r3, 801d5dc <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801d5a4:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801d5a6:	6862      	ldr	r2, [r4, #4]
 801d5a8:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801d5aa:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801d5ac:	ebaa 0808 	sub.w	r8, sl, r8
 801d5b0:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801d5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5b6:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801d5b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5ba:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801d5bc:	2200      	movs	r2, #0
 801d5be:	64aa      	str	r2, [r5, #72]	@ 0x48
 801d5c0:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801d5c2:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801d5c4:	f1bb 0f00 	cmp.w	fp, #0
 801d5c8:	d106      	bne.n	801d5d8 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801d5ca:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801d5ce:	3530      	adds	r5, #48	@ 0x30
 801d5d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d5d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801d5d8:	465b      	mov	r3, fp
 801d5da:	e734      	b.n	801d446 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d5dc:	4b12      	ldr	r3, [pc, #72]	@ (801d628 <lfs_dir_compact+0x2a4>)
 801d5de:	4a13      	ldr	r2, [pc, #76]	@ (801d62c <lfs_dir_compact+0x2a8>)
 801d5e0:	f640 0106 	movw	r1, #2054	@ 0x806
 801d5e4:	4812      	ldr	r0, [pc, #72]	@ (801d630 <lfs_dir_compact+0x2ac>)
 801d5e6:	f00c fca9 	bl	8029f3c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801d5ea:	4b12      	ldr	r3, [pc, #72]	@ (801d634 <lfs_dir_compact+0x2b0>)
 801d5ec:	9300      	str	r3, [sp, #0]
 801d5ee:	6863      	ldr	r3, [r4, #4]
 801d5f0:	f640 0218 	movw	r2, #2072	@ 0x818
 801d5f4:	490e      	ldr	r1, [pc, #56]	@ (801d630 <lfs_dir_compact+0x2ac>)
 801d5f6:	4810      	ldr	r0, [pc, #64]	@ (801d638 <lfs_dir_compact+0x2b4>)
 801d5f8:	f00c fcd4 	bl	8029fa4 <printf>
 801d5fc:	e6e8      	b.n	801d3d0 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801d5fe:	4b0d      	ldr	r3, [pc, #52]	@ (801d634 <lfs_dir_compact+0x2b0>)
 801d600:	9300      	str	r3, [sp, #0]
 801d602:	6863      	ldr	r3, [r4, #4]
 801d604:	f640 021d 	movw	r2, #2077	@ 0x81d
 801d608:	4909      	ldr	r1, [pc, #36]	@ (801d630 <lfs_dir_compact+0x2ac>)
 801d60a:	480c      	ldr	r0, [pc, #48]	@ (801d63c <lfs_dir_compact+0x2b8>)
 801d60c:	f00c fcca 	bl	8029fa4 <printf>
            return LFS_ERR_NOSPC;
 801d610:	f06f 031b 	mvn.w	r3, #27
 801d614:	e717      	b.n	801d446 <lfs_dir_compact+0xc2>
 801d616:	bf00      	nop
 801d618:	0801d17b 	.word	0x0801d17b
 801d61c:	400ffc00 	.word	0x400ffc00
 801d620:	000ffc08 	.word	0x000ffc08
 801d624:	7ffffc0c 	.word	0x7ffffc0c
 801d628:	080393a0 	.word	0x080393a0
 801d62c:	08039dd4 	.word	0x08039dd4
 801d630:	08039104 	.word	0x08039104
 801d634:	08036c80 	.word	0x08036c80
 801d638:	0803931c 	.word	0x0803931c
 801d63c:	080393c8 	.word	0x080393c8

0801d640 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801d640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d644:	b08d      	sub	sp, #52	@ 0x34
 801d646:	4605      	mov	r5, r0
 801d648:	460c      	mov	r4, r1
 801d64a:	4691      	mov	r9, r2
 801d64c:	461e      	mov	r6, r3
 801d64e:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801d652:	a904      	add	r1, sp, #16
 801d654:	f7ff f8fa 	bl	801c84c <lfs_dir_alloc>
    if (err) {
 801d658:	4607      	mov	r7, r0
 801d65a:	b118      	cbz	r0, 801d664 <lfs_dir_split+0x24>
}
 801d65c:	4638      	mov	r0, r7
 801d65e:	b00d      	add	sp, #52	@ 0x34
 801d660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801d664:	7de3      	ldrb	r3, [r4, #23]
 801d666:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801d66a:	69a3      	ldr	r3, [r4, #24]
 801d66c:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801d66e:	69e3      	ldr	r3, [r4, #28]
 801d670:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801d672:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d676:	9302      	str	r3, [sp, #8]
 801d678:	f8cd 8004 	str.w	r8, [sp, #4]
 801d67c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d67e:	9300      	str	r3, [sp, #0]
 801d680:	4633      	mov	r3, r6
 801d682:	464a      	mov	r2, r9
 801d684:	a904      	add	r1, sp, #16
 801d686:	4628      	mov	r0, r5
 801d688:	f7ff fe7c 	bl	801d384 <lfs_dir_compact>
    if (res < 0) {
 801d68c:	2800      	cmp	r0, #0
 801d68e:	db17      	blt.n	801d6c0 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801d690:	9904      	ldr	r1, [sp, #16]
 801d692:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801d694:	9a05      	ldr	r2, [sp, #20]
 801d696:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801d698:	2301      	movs	r3, #1
 801d69a:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d69c:	6823      	ldr	r3, [r4, #0]
 801d69e:	6a28      	ldr	r0, [r5, #32]
 801d6a0:	4283      	cmp	r3, r0
 801d6a2:	d007      	beq.n	801d6b4 <lfs_dir_split+0x74>
 801d6a4:	6866      	ldr	r6, [r4, #4]
 801d6a6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801d6a8:	42a6      	cmp	r6, r4
 801d6aa:	d003      	beq.n	801d6b4 <lfs_dir_split+0x74>
 801d6ac:	42a3      	cmp	r3, r4
 801d6ae:	d001      	beq.n	801d6b4 <lfs_dir_split+0x74>
 801d6b0:	42b0      	cmp	r0, r6
 801d6b2:	d1d3      	bne.n	801d65c <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801d6b4:	f1b8 0f00 	cmp.w	r8, #0
 801d6b8:	d1d0      	bne.n	801d65c <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801d6ba:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801d6bc:	626a      	str	r2, [r5, #36]	@ 0x24
 801d6be:	e7cd      	b.n	801d65c <lfs_dir_split+0x1c>
        return res;
 801d6c0:	4607      	mov	r7, r0
 801d6c2:	e7cb      	b.n	801d65c <lfs_dir_split+0x1c>

0801d6c4 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c8:	b091      	sub	sp, #68	@ 0x44
 801d6ca:	4607      	mov	r7, r0
 801d6cc:	4615      	mov	r5, r2
 801d6ce:	4699      	mov	r9, r3
 801d6d0:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d6d4:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801d6d8:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801d6dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d6de:	e04c      	b.n	801d77a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801d6e0:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801d6e2:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d6e4:	4403      	add	r3, r0
 801d6e6:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d6e8:	fbb3 f1f0 	udiv	r1, r3, r0
 801d6ec:	fb00 3111 	mls	r1, r0, r1, r3
 801d6f0:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801d6f2:	4293      	cmp	r3, r2
 801d6f4:	bf28      	it	cs
 801d6f6:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801d6f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d6fa:	429a      	cmp	r2, r3
 801d6fc:	d92d      	bls.n	801d75a <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801d6fe:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801d702:	eba6 0804 	sub.w	r8, r6, r4
 801d706:	f1b8 0f01 	cmp.w	r8, #1
 801d70a:	d926      	bls.n	801d75a <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801d70c:	2200      	movs	r2, #0
 801d70e:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801d710:	b2a1      	uxth	r1, r4
 801d712:	ab0d      	add	r3, sp, #52	@ 0x34
 801d714:	9308      	str	r3, [sp, #32]
 801d716:	4b4d      	ldr	r3, [pc, #308]	@ (801d84c <lfs_dir_splittingcompact+0x188>)
 801d718:	9307      	str	r3, [sp, #28]
 801d71a:	424b      	negs	r3, r1
 801d71c:	b21b      	sxth	r3, r3
 801d71e:	9306      	str	r3, [sp, #24]
 801d720:	9605      	str	r6, [sp, #20]
 801d722:	9104      	str	r1, [sp, #16]
 801d724:	9203      	str	r2, [sp, #12]
 801d726:	4b4a      	ldr	r3, [pc, #296]	@ (801d850 <lfs_dir_splittingcompact+0x18c>)
 801d728:	9302      	str	r3, [sp, #8]
 801d72a:	f8cd 9004 	str.w	r9, [sp, #4]
 801d72e:	9500      	str	r5, [sp, #0]
 801d730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d734:	4651      	mov	r1, sl
 801d736:	4638      	mov	r0, r7
 801d738:	f7fd ffca 	bl	801b6d0 <lfs_dir_traverse>
            if (err) {
 801d73c:	4603      	mov	r3, r0
 801d73e:	2800      	cmp	r0, #0
 801d740:	d15b      	bne.n	801d7fa <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801d742:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801d746:	d8da      	bhi.n	801d6fe <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801d748:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d74a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801d74c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801d750:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801d752:	2800      	cmp	r0, #0
 801d754:	d0c4      	beq.n	801d6e0 <lfs_dir_splittingcompact+0x1c>
 801d756:	0843      	lsrs	r3, r0, #1
 801d758:	e7c3      	b.n	801d6e2 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801d75a:	455c      	cmp	r4, fp
 801d75c:	d022      	beq.n	801d7a4 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d75e:	b2a4      	uxth	r4, r4
 801d760:	9602      	str	r6, [sp, #8]
 801d762:	9401      	str	r4, [sp, #4]
 801d764:	f8cd a000 	str.w	sl, [sp]
 801d768:	464b      	mov	r3, r9
 801d76a:	462a      	mov	r2, r5
 801d76c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d76e:	4638      	mov	r0, r7
 801d770:	f7ff ff66 	bl	801d640 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801d774:	4603      	mov	r3, r0
 801d776:	b910      	cbnz	r0, 801d77e <lfs_dir_splittingcompact+0xba>
            end = split;
 801d778:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801d77a:	465c      	mov	r4, fp
        while (end - split > 1) {
 801d77c:	e7c1      	b.n	801d702 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801d77e:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801d782:	f110 0f1c 	cmn.w	r0, #28
 801d786:	d138      	bne.n	801d7fa <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801d788:	4b32      	ldr	r3, [pc, #200]	@ (801d854 <lfs_dir_splittingcompact+0x190>)
 801d78a:	9301      	str	r3, [sp, #4]
 801d78c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d790:	9300      	str	r3, [sp, #0]
 801d792:	f8d8 3000 	ldr.w	r3, [r8]
 801d796:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801d79a:	492f      	ldr	r1, [pc, #188]	@ (801d858 <lfs_dir_splittingcompact+0x194>)
 801d79c:	482f      	ldr	r0, [pc, #188]	@ (801d85c <lfs_dir_splittingcompact+0x198>)
 801d79e:	f00c fc01 	bl	8029fa4 <printf>
            break;
 801d7a2:	e001      	b.n	801d7a8 <lfs_dir_splittingcompact+0xe4>
 801d7a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801d7a8:	4641      	mov	r1, r8
 801d7aa:	4638      	mov	r0, r7
 801d7ac:	f7fd fc76 	bl	801b09c <lfs_dir_needsrelocation>
 801d7b0:	b1b8      	cbz	r0, 801d7e2 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d7b6:	2301      	movs	r3, #1
 801d7b8:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d7ba:	f8d8 2000 	ldr.w	r2, [r8]
 801d7be:	b132      	cbz	r2, 801d7ce <lfs_dir_splittingcompact+0x10a>
 801d7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d7c4:	2b01      	cmp	r3, #1
 801d7c6:	d002      	beq.n	801d7ce <lfs_dir_splittingcompact+0x10a>
 801d7c8:	2a01      	cmp	r2, #1
 801d7ca:	d000      	beq.n	801d7ce <lfs_dir_splittingcompact+0x10a>
 801d7cc:	b94b      	cbnz	r3, 801d7e2 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801d7ce:	4638      	mov	r0, r7
 801d7d0:	f7ff fbe4 	bl	801cf9c <lfs_fs_size_>
        if (size < 0) {
 801d7d4:	1e03      	subs	r3, r0, #0
 801d7d6:	db10      	blt.n	801d7fa <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801d7d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801d7da:	1ad3      	subs	r3, r2, r3
 801d7dc:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801d7e0:	d80f      	bhi.n	801d802 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801d7e2:	9602      	str	r6, [sp, #8]
 801d7e4:	f8cd b004 	str.w	fp, [sp, #4]
 801d7e8:	f8cd a000 	str.w	sl, [sp]
 801d7ec:	464b      	mov	r3, r9
 801d7ee:	462a      	mov	r2, r5
 801d7f0:	4641      	mov	r1, r8
 801d7f2:	4638      	mov	r0, r7
 801d7f4:	f7ff fdc6 	bl	801d384 <lfs_dir_compact>
 801d7f8:	4603      	mov	r3, r0
}
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	b011      	add	sp, #68	@ 0x44
 801d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801d802:	4b14      	ldr	r3, [pc, #80]	@ (801d854 <lfs_dir_splittingcompact+0x190>)
 801d804:	9300      	str	r3, [sp, #0]
 801d806:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d80a:	f640 0286 	movw	r2, #2182	@ 0x886
 801d80e:	4912      	ldr	r1, [pc, #72]	@ (801d858 <lfs_dir_splittingcompact+0x194>)
 801d810:	4813      	ldr	r0, [pc, #76]	@ (801d860 <lfs_dir_splittingcompact+0x19c>)
 801d812:	f00c fbc7 	bl	8029fa4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d816:	9602      	str	r6, [sp, #8]
 801d818:	f8cd b004 	str.w	fp, [sp, #4]
 801d81c:	f8cd a000 	str.w	sl, [sp]
 801d820:	464b      	mov	r3, r9
 801d822:	462a      	mov	r2, r5
 801d824:	4641      	mov	r1, r8
 801d826:	4638      	mov	r0, r7
 801d828:	f7ff ff0a 	bl	801d640 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801d82c:	4603      	mov	r3, r0
 801d82e:	b150      	cbz	r0, 801d846 <lfs_dir_splittingcompact+0x182>
 801d830:	f110 0f1c 	cmn.w	r0, #28
 801d834:	d1e1      	bne.n	801d7fa <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801d836:	4b07      	ldr	r3, [pc, #28]	@ (801d854 <lfs_dir_splittingcompact+0x190>)
 801d838:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801d83c:	4906      	ldr	r1, [pc, #24]	@ (801d858 <lfs_dir_splittingcompact+0x194>)
 801d83e:	4809      	ldr	r0, [pc, #36]	@ (801d864 <lfs_dir_splittingcompact+0x1a0>)
 801d840:	f00c fbb0 	bl	8029fa4 <printf>
 801d844:	e7cd      	b.n	801d7e2 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801d846:	2601      	movs	r6, #1
 801d848:	e7cb      	b.n	801d7e2 <lfs_dir_splittingcompact+0x11e>
 801d84a:	bf00      	nop
 801d84c:	0801b081 	.word	0x0801b081
 801d850:	400ffc00 	.word	0x400ffc00
 801d854:	08036c80 	.word	0x08036c80
 801d858:	08039104 	.word	0x08039104
 801d85c:	08039400 	.word	0x08039400
 801d860:	08039430 	.word	0x08039430
 801d864:	08039460 	.word	0x08039460

0801d868 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d86c:	b09b      	sub	sp, #108	@ 0x6c
 801d86e:	4607      	mov	r7, r0
 801d870:	460e      	mov	r6, r1
 801d872:	4691      	mov	r9, r2
 801d874:	461d      	mov	r5, r3
 801d876:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801d87a:	2300      	movs	r3, #0
    bool hasdelete = false;
 801d87c:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801d87e:	e003      	b.n	801d888 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801d880:	8ab2      	ldrh	r2, [r6, #20]
 801d882:	3201      	adds	r2, #1
 801d884:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801d886:	3301      	adds	r3, #1
 801d888:	4543      	cmp	r3, r8
 801d88a:	da2d      	bge.n	801d8e8 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d88c:	00d8      	lsls	r0, r3, #3
 801d88e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801d892:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d896:	0d11      	lsrs	r1, r2, #20
 801d898:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d89c:	f240 4e01 	movw	lr, #1025	@ 0x401
 801d8a0:	4572      	cmp	r2, lr
 801d8a2:	d0ed      	beq.n	801d880 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801d8a4:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801d8a8:	4572      	cmp	r2, lr
 801d8aa:	d00f      	beq.n	801d8cc <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801d8ac:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801d8b0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d8b4:	d1e7      	bne.n	801d886 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801d8b6:	6862      	ldr	r2, [r4, #4]
 801d8b8:	6812      	ldr	r2, [r2, #0]
 801d8ba:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801d8bc:	6862      	ldr	r2, [r4, #4]
 801d8be:	6852      	ldr	r2, [r2, #4]
 801d8c0:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801d8c2:	582a      	ldr	r2, [r5, r0]
 801d8c4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801d8c8:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801d8ca:	e7dc      	b.n	801d886 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d8cc:	8ab2      	ldrh	r2, [r6, #20]
 801d8ce:	b122      	cbz	r2, 801d8da <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801d8d0:	3a01      	subs	r2, #1
 801d8d2:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801d8d4:	f04f 0c01 	mov.w	ip, #1
 801d8d8:	e7d5      	b.n	801d886 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d8da:	4ba0      	ldr	r3, [pc, #640]	@ (801db5c <lfs_dir_relocatingcommit+0x2f4>)
 801d8dc:	4aa0      	ldr	r2, [pc, #640]	@ (801db60 <lfs_dir_relocatingcommit+0x2f8>)
 801d8de:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801d8e2:	48a0      	ldr	r0, [pc, #640]	@ (801db64 <lfs_dir_relocatingcommit+0x2fc>)
 801d8e4:	f00c fb2a 	bl	8029f3c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801d8e8:	f1bc 0f00 	cmp.w	ip, #0
 801d8ec:	d01b      	beq.n	801d926 <lfs_dir_relocatingcommit+0xbe>
 801d8ee:	8ab3      	ldrh	r3, [r6, #20]
 801d8f0:	b9cb      	cbnz	r3, 801d926 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d8f2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d8f4:	b15b      	cbz	r3, 801d90e <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801d8f6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d8f8:	4631      	mov	r1, r6
 801d8fa:	4638      	mov	r0, r7
 801d8fc:	f7ff fb5e 	bl	801cfbc <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d900:	4682      	mov	sl, r0
 801d902:	b158      	cbz	r0, 801d91c <lfs_dir_relocatingcommit+0xb4>
 801d904:	f110 0f02 	cmn.w	r0, #2
 801d908:	f040 8159 	bne.w	801dbbe <lfs_dir_relocatingcommit+0x356>
 801d90c:	e00b      	b.n	801d926 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d90e:	4b96      	ldr	r3, [pc, #600]	@ (801db68 <lfs_dir_relocatingcommit+0x300>)
 801d910:	4a93      	ldr	r2, [pc, #588]	@ (801db60 <lfs_dir_relocatingcommit+0x2f8>)
 801d912:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801d916:	4893      	ldr	r0, [pc, #588]	@ (801db64 <lfs_dir_relocatingcommit+0x2fc>)
 801d918:	f00c fb10 	bl	8029f3c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801d91c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d91e:	7ddb      	ldrb	r3, [r3, #23]
 801d920:	2b00      	cmp	r3, #0
 801d922:	f040 80bf 	bne.w	801daa4 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801d926:	7db4      	ldrb	r4, [r6, #22]
 801d928:	2c00      	cmp	r4, #0
 801d92a:	d02e      	beq.n	801d98a <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801d92c:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801d92e:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801d930:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801d932:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801d934:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801d936:	9212      	str	r2, [sp, #72]	@ 0x48
 801d938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d93c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d93e:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801d940:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d942:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d944:	2b00      	cmp	r3, #0
 801d946:	d03c      	beq.n	801d9c2 <lfs_dir_relocatingcommit+0x15a>
 801d948:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801d94a:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d94c:	9718      	str	r7, [sp, #96]	@ 0x60
 801d94e:	ab10      	add	r3, sp, #64	@ 0x40
 801d950:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801d952:	ab18      	add	r3, sp, #96	@ 0x60
 801d954:	9308      	str	r3, [sp, #32]
 801d956:	4b85      	ldr	r3, [pc, #532]	@ (801db6c <lfs_dir_relocatingcommit+0x304>)
 801d958:	9307      	str	r3, [sp, #28]
 801d95a:	2300      	movs	r3, #0
 801d95c:	9306      	str	r3, [sp, #24]
 801d95e:	9305      	str	r3, [sp, #20]
 801d960:	9304      	str	r3, [sp, #16]
 801d962:	9303      	str	r3, [sp, #12]
 801d964:	9302      	str	r3, [sp, #8]
 801d966:	f8cd 8004 	str.w	r8, [sp, #4]
 801d96a:	9500      	str	r5, [sp, #0]
 801d96c:	6933      	ldr	r3, [r6, #16]
 801d96e:	68f2      	ldr	r2, [r6, #12]
 801d970:	4631      	mov	r1, r6
 801d972:	4638      	mov	r0, r7
 801d974:	f7fd feac 	bl	801b6d0 <lfs_dir_traverse>
        if (err) {
 801d978:	4682      	mov	sl, r0
 801d97a:	b328      	cbz	r0, 801d9c8 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d97c:	f110 0f1c 	cmn.w	r0, #28
 801d980:	d003      	beq.n	801d98a <lfs_dir_relocatingcommit+0x122>
 801d982:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d986:	f040 811a 	bne.w	801dbbe <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801d98a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d98e:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801d990:	8ab3      	ldrh	r3, [r6, #20]
 801d992:	9302      	str	r3, [sp, #8]
 801d994:	2300      	movs	r3, #0
 801d996:	9301      	str	r3, [sp, #4]
 801d998:	9600      	str	r6, [sp, #0]
 801d99a:	4643      	mov	r3, r8
 801d99c:	462a      	mov	r2, r5
 801d99e:	4631      	mov	r1, r6
 801d9a0:	4638      	mov	r0, r7
 801d9a2:	f7ff fe8f 	bl	801d6c4 <lfs_dir_splittingcompact>
    if (state < 0) {
 801d9a6:	1e01      	subs	r1, r0, #0
 801d9a8:	f2c0 8106 	blt.w	801dbb8 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801d9ac:	f8d9 b000 	ldr.w	fp, [r9]
 801d9b0:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801d9b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d9b8:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d9ba:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801d9bc:	4692      	mov	sl, r2
 801d9be:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d9c0:	e0db      	b.n	801db7a <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d9c2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d9c4:	3b08      	subs	r3, #8
 801d9c6:	e7c0      	b.n	801d94a <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	930d      	str	r3, [sp, #52]	@ 0x34
 801d9cc:	930e      	str	r3, [sp, #56]	@ 0x38
 801d9ce:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801d9d0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d9d4:	a80d      	add	r0, sp, #52	@ 0x34
 801d9d6:	f7fd fa97 	bl	801af08 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801d9da:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801d9de:	a80d      	add	r0, sp, #52	@ 0x34
 801d9e0:	f7fd fa92 	bl	801af08 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801d9e4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d9e8:	a80d      	add	r0, sp, #52	@ 0x34
 801d9ea:	f7fd fa8d 	bl	801af08 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d9ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9f0:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d9f4:	f023 0303 	bic.w	r3, r3, #3
 801d9f8:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801d9fa:	e001      	b.n	801da00 <lfs_dir_relocatingcommit+0x198>
 801d9fc:	f10a 0a01 	add.w	sl, sl, #1
 801da00:	f1ba 0f02 	cmp.w	sl, #2
 801da04:	dc07      	bgt.n	801da16 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801da06:	ab1a      	add	r3, sp, #104	@ 0x68
 801da08:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801da0c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d0f3      	beq.n	801d9fc <lfs_dir_relocatingcommit+0x194>
            return false;
 801da14:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801da16:	b9c4      	cbnz	r4, 801da4a <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801da18:	aa0d      	add	r2, sp, #52	@ 0x34
 801da1a:	4631      	mov	r1, r6
 801da1c:	4638      	mov	r0, r7
 801da1e:	f7fd fdc7 	bl	801b5b0 <lfs_dir_getgstate>
            if (err) {
 801da22:	4682      	mov	sl, r0
 801da24:	2800      	cmp	r0, #0
 801da26:	f040 80ca 	bne.w	801dbbe <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801da2a:	ab0d      	add	r3, sp, #52	@ 0x34
 801da2c:	4a50      	ldr	r2, [pc, #320]	@ (801db70 <lfs_dir_relocatingcommit+0x308>)
 801da2e:	a910      	add	r1, sp, #64	@ 0x40
 801da30:	4638      	mov	r0, r7
 801da32:	f7ff fb45 	bl	801d0c0 <lfs_dir_commitattr>
            if (err) {
 801da36:	4682      	mov	sl, r0
 801da38:	b138      	cbz	r0, 801da4a <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801da3a:	f110 0f1c 	cmn.w	r0, #28
 801da3e:	d0a4      	beq.n	801d98a <lfs_dir_relocatingcommit+0x122>
 801da40:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da44:	f040 80bb 	bne.w	801dbbe <lfs_dir_relocatingcommit+0x356>
 801da48:	e79f      	b.n	801d98a <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801da4a:	a910      	add	r1, sp, #64	@ 0x40
 801da4c:	4638      	mov	r0, r7
 801da4e:	f7ff fb9d 	bl	801d18c <lfs_dir_commitcrc>
        if (err) {
 801da52:	4682      	mov	sl, r0
 801da54:	b138      	cbz	r0, 801da66 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801da56:	f110 0f1c 	cmn.w	r0, #28
 801da5a:	d096      	beq.n	801d98a <lfs_dir_relocatingcommit+0x122>
 801da5c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da60:	f040 80ad 	bne.w	801dbbe <lfs_dir_relocatingcommit+0x356>
 801da64:	e791      	b.n	801d98a <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801da66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801da6a:	6a11      	ldr	r1, [r2, #32]
 801da6c:	fbb3 f2f1 	udiv	r2, r3, r1
 801da70:	fb01 3212 	mls	r2, r1, r2, r3
 801da74:	b97a      	cbnz	r2, 801da96 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801da76:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801da78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801da7a:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801da7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801da80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801da84:	ca07      	ldmia	r2, {r0, r1, r2}
 801da86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801da8a:	2200      	movs	r2, #0
 801da8c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801da8e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801da90:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801da92:	4651      	mov	r1, sl
 801da94:	e78a      	b.n	801d9ac <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801da96:	4b37      	ldr	r3, [pc, #220]	@ (801db74 <lfs_dir_relocatingcommit+0x30c>)
 801da98:	4a31      	ldr	r2, [pc, #196]	@ (801db60 <lfs_dir_relocatingcommit+0x2f8>)
 801da9a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801da9e:	4831      	ldr	r0, [pc, #196]	@ (801db64 <lfs_dir_relocatingcommit+0x2fc>)
 801daa0:	f00c fa4c 	bl	8029f3c <__assert_func>
            state = LFS_OK_DROPPED;
 801daa4:	2102      	movs	r1, #2
 801daa6:	e781      	b.n	801d9ac <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801daa8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801daac:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dab0:	4584      	cmp	ip, r0
 801dab2:	d10e      	bne.n	801dad2 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801dab4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dab8:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801daba:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801dabc:	3301      	adds	r3, #1
 801dabe:	4543      	cmp	r3, r8
 801dac0:	da34      	bge.n	801db2c <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dac2:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801dac6:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801daca:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dace:	4282      	cmp	r2, r0
 801dad0:	d0ea      	beq.n	801daa8 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dad2:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dad6:	4282      	cmp	r2, r0
 801dad8:	d011      	beq.n	801dafe <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801dada:	f240 4001 	movw	r0, #1025	@ 0x401
 801dade:	4282      	cmp	r2, r0
 801dae0:	d1ec      	bne.n	801dabc <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801dae2:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801dae4:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801dae8:	428a      	cmp	r2, r1
 801daea:	d3e7      	bcc.n	801dabc <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801daec:	3201      	adds	r2, #1
 801daee:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801daf0:	79a2      	ldrb	r2, [r4, #6]
 801daf2:	2a02      	cmp	r2, #2
 801daf4:	d1e2      	bne.n	801dabc <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801daf6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801daf8:	3201      	adds	r2, #1
 801dafa:	62a2      	str	r2, [r4, #40]	@ 0x28
 801dafc:	e7de      	b.n	801dabc <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801dafe:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801db00:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801db04:	4560      	cmp	r0, ip
 801db06:	d9e8      	bls.n	801dada <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801db08:	3801      	subs	r0, #1
 801db0a:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801db0c:	79a2      	ldrb	r2, [r4, #6]
 801db0e:	2a02      	cmp	r2, #2
 801db10:	d1d4      	bne.n	801dabc <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801db12:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801db14:	3a01      	subs	r2, #1
 801db16:	62a2      	str	r2, [r4, #40]	@ 0x28
 801db18:	e7d0      	b.n	801dabc <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801db1a:	f104 0220 	add.w	r2, r4, #32
 801db1e:	f104 0108 	add.w	r1, r4, #8
 801db22:	4638      	mov	r0, r7
 801db24:	f7fe fd24 	bl	801c570 <lfs_dir_fetch>
                if (err) {
 801db28:	2800      	cmp	r0, #0
 801db2a:	d147      	bne.n	801dbbc <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801db2c:	88a3      	ldrh	r3, [r4, #4]
 801db2e:	8ba1      	ldrh	r1, [r4, #28]
 801db30:	428b      	cmp	r3, r1
 801db32:	d321      	bcc.n	801db78 <lfs_dir_relocatingcommit+0x310>
 801db34:	7fe2      	ldrb	r2, [r4, #31]
 801db36:	b1fa      	cbz	r2, 801db78 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801db38:	6a22      	ldr	r2, [r4, #32]
 801db3a:	6a38      	ldr	r0, [r7, #32]
 801db3c:	4282      	cmp	r2, r0
 801db3e:	d0ec      	beq.n	801db1a <lfs_dir_relocatingcommit+0x2b2>
 801db40:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801db44:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801db48:	45e6      	cmp	lr, ip
 801db4a:	d0e6      	beq.n	801db1a <lfs_dir_relocatingcommit+0x2b2>
 801db4c:	4562      	cmp	r2, ip
 801db4e:	d0e4      	beq.n	801db1a <lfs_dir_relocatingcommit+0x2b2>
 801db50:	4570      	cmp	r0, lr
 801db52:	d0e2      	beq.n	801db1a <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801db54:	1a5b      	subs	r3, r3, r1
 801db56:	80a3      	strh	r3, [r4, #4]
 801db58:	e7df      	b.n	801db1a <lfs_dir_relocatingcommit+0x2b2>
 801db5a:	bf00      	nop
 801db5c:	0803948c 	.word	0x0803948c
 801db60:	08039e04 	.word	0x08039e04
 801db64:	08039104 	.word	0x08039104
 801db68:	0803949c 	.word	0x0803949c
 801db6c:	0801d17b 	.word	0x0801d17b
 801db70:	7ffffc0c 	.word	0x7ffffc0c
 801db74:	080393a0 	.word	0x080393a0
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801db78:	6824      	ldr	r4, [r4, #0]
 801db7a:	b1d4      	cbz	r4, 801dbb2 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801db7c:	68a3      	ldr	r3, [r4, #8]
 801db7e:	459b      	cmp	fp, r3
 801db80:	d006      	beq.n	801db90 <lfs_dir_relocatingcommit+0x328>
 801db82:	68e2      	ldr	r2, [r4, #12]
 801db84:	4592      	cmp	sl, r2
 801db86:	d003      	beq.n	801db90 <lfs_dir_relocatingcommit+0x328>
 801db88:	459a      	cmp	sl, r3
 801db8a:	d001      	beq.n	801db90 <lfs_dir_relocatingcommit+0x328>
 801db8c:	4593      	cmp	fp, r2
 801db8e:	d1f3      	bne.n	801db78 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801db90:	f104 0c08 	add.w	ip, r4, #8
 801db94:	46b6      	mov	lr, r6
 801db96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801db9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db9e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801dba2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801dba6:	f104 0308 	add.w	r3, r4, #8
 801dbaa:	454b      	cmp	r3, r9
 801dbac:	d0be      	beq.n	801db2c <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801dbae:	2300      	movs	r3, #0
 801dbb0:	e785      	b.n	801dabe <lfs_dir_relocatingcommit+0x256>
    return state;
 801dbb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dbb4:	468a      	mov	sl, r1
 801dbb6:	e002      	b.n	801dbbe <lfs_dir_relocatingcommit+0x356>
        return state;
 801dbb8:	468a      	mov	sl, r1
 801dbba:	e000      	b.n	801dbbe <lfs_dir_relocatingcommit+0x356>
 801dbbc:	4682      	mov	sl, r0
}
 801dbbe:	4650      	mov	r0, sl
 801dbc0:	b01b      	add	sp, #108	@ 0x6c
 801dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbc6:	bf00      	nop

0801dbc8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801dbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbcc:	b0a3      	sub	sp, #140	@ 0x8c
 801dbce:	4605      	mov	r5, r0
 801dbd0:	460e      	mov	r6, r1
 801dbd2:	4690      	mov	r8, r2
 801dbd4:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dbd6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801dbd8:	e003      	b.n	801dbe2 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dbda:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801dbdc:	2b01      	cmp	r3, #1
 801dbde:	d012      	beq.n	801dc06 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dbe0:	6824      	ldr	r4, [r4, #0]
 801dbe2:	b34c      	cbz	r4, 801dc38 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801dbe4:	f104 0108 	add.w	r1, r4, #8
 801dbe8:	42b1      	cmp	r1, r6
 801dbea:	d0f9      	beq.n	801dbe0 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dbec:	68a1      	ldr	r1, [r4, #8]
 801dbee:	6833      	ldr	r3, [r6, #0]
 801dbf0:	428b      	cmp	r3, r1
 801dbf2:	d0f2      	beq.n	801dbda <lfs_dir_orphaningcommit+0x12>
 801dbf4:	68e0      	ldr	r0, [r4, #12]
 801dbf6:	6872      	ldr	r2, [r6, #4]
 801dbf8:	4282      	cmp	r2, r0
 801dbfa:	d0ee      	beq.n	801dbda <lfs_dir_orphaningcommit+0x12>
 801dbfc:	428a      	cmp	r2, r1
 801dbfe:	d0ec      	beq.n	801dbda <lfs_dir_orphaningcommit+0x12>
 801dc00:	4298      	cmp	r0, r3
 801dc02:	d1ed      	bne.n	801dbe0 <lfs_dir_orphaningcommit+0x18>
 801dc04:	e7e9      	b.n	801dbda <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dc06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dc08:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801dc0c:	d0e8      	beq.n	801dbe0 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801dc0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801dc10:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801dc12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dc14:	429a      	cmp	r2, r3
 801dc16:	d9e3      	bls.n	801dbe0 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801dc18:	4621      	mov	r1, r4
 801dc1a:	4628      	mov	r0, r5
 801dc1c:	f7fe feee 	bl	801c9fc <lfs_file_outline>
            if (err) {
 801dc20:	4607      	mov	r7, r0
 801dc22:	2800      	cmp	r0, #0
 801dc24:	f040 81bc 	bne.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801dc28:	4621      	mov	r1, r4
 801dc2a:	4628      	mov	r0, r5
 801dc2c:	f7ff f866 	bl	801ccfc <lfs_file_flush>
            if (err) {
 801dc30:	4607      	mov	r7, r0
 801dc32:	2800      	cmp	r0, #0
 801dc34:	d0d4      	beq.n	801dbe0 <lfs_dir_orphaningcommit+0x18>
 801dc36:	e1b3      	b.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801dc38:	6833      	ldr	r3, [r6, #0]
 801dc3a:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc3c:	6873      	ldr	r3, [r6, #4]
 801dc3e:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801dc40:	ac0e      	add	r4, sp, #56	@ 0x38
 801dc42:	4637      	mov	r7, r6
 801dc44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801dc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc48:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801dc4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801dc50:	ab06      	add	r3, sp, #24
 801dc52:	9301      	str	r3, [sp, #4]
 801dc54:	f8cd 9000 	str.w	r9, [sp]
 801dc58:	4643      	mov	r3, r8
 801dc5a:	4632      	mov	r2, r6
 801dc5c:	a90e      	add	r1, sp, #56	@ 0x38
 801dc5e:	4628      	mov	r0, r5
 801dc60:	f7ff fe02 	bl	801d868 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801dc64:	1e07      	subs	r7, r0, #0
 801dc66:	f2c0 819b 	blt.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dc6a:	6833      	ldr	r3, [r6, #0]
 801dc6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dc6e:	429a      	cmp	r2, r3
 801dc70:	d007      	beq.n	801dc82 <lfs_dir_orphaningcommit+0xba>
 801dc72:	6870      	ldr	r0, [r6, #4]
 801dc74:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dc76:	4281      	cmp	r1, r0
 801dc78:	d003      	beq.n	801dc82 <lfs_dir_orphaningcommit+0xba>
 801dc7a:	4299      	cmp	r1, r3
 801dc7c:	d001      	beq.n	801dc82 <lfs_dir_orphaningcommit+0xba>
 801dc7e:	4290      	cmp	r0, r2
 801dc80:	d109      	bne.n	801dc96 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801dc82:	4634      	mov	r4, r6
 801dc84:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801dc88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801dc8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc8e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801dc92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801dc96:	2f02      	cmp	r7, #2
 801dc98:	d001      	beq.n	801dc9e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801dc9a:	2600      	movs	r6, #0
 801dc9c:	e0b8      	b.n	801de10 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801dc9e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801dca2:	4631      	mov	r1, r6
 801dca4:	4628      	mov	r0, r5
 801dca6:	f7fd fc83 	bl	801b5b0 <lfs_dir_getgstate>
        if (err) {
 801dcaa:	4607      	mov	r7, r0
 801dcac:	2800      	cmp	r0, #0
 801dcae:	f040 8177 	bne.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801dcb2:	9b06      	ldr	r3, [sp, #24]
 801dcb4:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801dcb6:	9b07      	ldr	r3, [sp, #28]
 801dcb8:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801dcba:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801dcbe:	7df2      	ldrb	r2, [r6, #23]
 801dcc0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801dcc4:	4ba2      	ldr	r3, [pc, #648]	@ (801df50 <lfs_dir_orphaningcommit+0x388>)
 801dcc6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801dcca:	9318      	str	r3, [sp, #96]	@ 0x60
 801dccc:	9119      	str	r1, [sp, #100]	@ 0x64
 801dcce:	2300      	movs	r3, #0
 801dcd0:	9301      	str	r3, [sp, #4]
 801dcd2:	2301      	movs	r3, #1
 801dcd4:	9300      	str	r3, [sp, #0]
 801dcd6:	ab18      	add	r3, sp, #96	@ 0x60
 801dcd8:	aa16      	add	r2, sp, #88	@ 0x58
 801dcda:	a906      	add	r1, sp, #24
 801dcdc:	4628      	mov	r0, r5
 801dcde:	f7ff fdc3 	bl	801d868 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801dce2:	1e07      	subs	r7, r0, #0
 801dce4:	f2c0 815c 	blt.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801dce8:	ac0e      	add	r4, sp, #56	@ 0x38
 801dcea:	ae06      	add	r6, sp, #24
 801dcec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801dcee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dcf0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801dcf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dcf8:	e7cf      	b.n	801dc9a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801dcfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dcfc:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801dcfe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dd00:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801dd02:	799a      	ldrb	r2, [r3, #6]
 801dd04:	2a02      	cmp	r2, #2
 801dd06:	d00d      	beq.n	801dd24 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	b1db      	cbz	r3, 801dd44 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dd0c:	689a      	ldr	r2, [r3, #8]
 801dd0e:	4291      	cmp	r1, r2
 801dd10:	d0f3      	beq.n	801dcfa <lfs_dir_orphaningcommit+0x132>
 801dd12:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dd14:	68dc      	ldr	r4, [r3, #12]
 801dd16:	4284      	cmp	r4, r0
 801dd18:	d0ef      	beq.n	801dcfa <lfs_dir_orphaningcommit+0x132>
 801dd1a:	428c      	cmp	r4, r1
 801dd1c:	d0ed      	beq.n	801dcfa <lfs_dir_orphaningcommit+0x132>
 801dd1e:	4290      	cmp	r0, r2
 801dd20:	d1ef      	bne.n	801dd02 <lfs_dir_orphaningcommit+0x13a>
 801dd22:	e7ea      	b.n	801dcfa <lfs_dir_orphaningcommit+0x132>
 801dd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dd26:	428a      	cmp	r2, r1
 801dd28:	d007      	beq.n	801dd3a <lfs_dir_orphaningcommit+0x172>
 801dd2a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dd2c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801dd2e:	42a0      	cmp	r0, r4
 801dd30:	d003      	beq.n	801dd3a <lfs_dir_orphaningcommit+0x172>
 801dd32:	4288      	cmp	r0, r1
 801dd34:	d001      	beq.n	801dd3a <lfs_dir_orphaningcommit+0x172>
 801dd36:	4294      	cmp	r4, r2
 801dd38:	d1e6      	bne.n	801dd08 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801dd3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd3c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801dd3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dd40:	631a      	str	r2, [r3, #48]	@ 0x30
 801dd42:	e7e1      	b.n	801dd08 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801dd44:	aa06      	add	r2, sp, #24
 801dd46:	a916      	add	r1, sp, #88	@ 0x58
 801dd48:	4628      	mov	r0, r5
 801dd4a:	f7fe fba5 	bl	801c498 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dd4e:	1e04      	subs	r4, r0, #0
 801dd50:	f280 8082 	bge.w	801de58 <lfs_dir_orphaningcommit+0x290>
 801dd54:	f114 0f02 	cmn.w	r4, #2
 801dd58:	f040 8128 	bne.w	801dfac <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801dd5c:	f114 0802 	adds.w	r8, r4, #2
 801dd60:	bf18      	it	ne
 801dd62:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801dd66:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801dd68:	aa06      	add	r2, sp, #24
 801dd6a:	a916      	add	r1, sp, #88	@ 0x58
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f7ff f925 	bl	801cfbc <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801dd72:	4603      	mov	r3, r0
 801dd74:	b118      	cbz	r0, 801dd7e <lfs_dir_orphaningcommit+0x1b6>
 801dd76:	f110 0f02 	cmn.w	r0, #2
 801dd7a:	f040 8119 	bne.w	801dfb0 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801dd7e:	f114 0f02 	cmn.w	r4, #2
 801dd82:	f000 80d6 	beq.w	801df32 <lfs_dir_orphaningcommit+0x36a>
 801dd86:	f113 0f02 	cmn.w	r3, #2
 801dd8a:	f000 80cb 	beq.w	801df24 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801dd8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801dd90:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	f040 80d1 	bne.w	801df3c <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801dd9a:	a906      	add	r1, sp, #24
 801dd9c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801dda0:	f7fd f8c4 	bl	801af2c <lfs_gstate_hasmovehere>
 801dda4:	2800      	cmp	r0, #0
 801dda6:	f040 80e1 	bne.w	801df6c <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801ddaa:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801ddae:	9b06      	ldr	r3, [sp, #24]
 801ddb0:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801ddb2:	9b07      	ldr	r3, [sp, #28]
 801ddb4:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801ddb6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ddba:	429c      	cmp	r4, r3
 801ddbc:	f000 80ec 	beq.w	801df98 <lfs_dir_orphaningcommit+0x3d0>
 801ddc0:	02a3      	lsls	r3, r4, #10
 801ddc2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801ddc6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ddca:	931e      	str	r3, [sp, #120]	@ 0x78
 801ddcc:	2100      	movs	r1, #0
 801ddce:	911f      	str	r1, [sp, #124]	@ 0x7c
 801ddd0:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801ddd4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ddd8:	4b5d      	ldr	r3, [pc, #372]	@ (801df50 <lfs_dir_orphaningcommit+0x388>)
 801ddda:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ddde:	9320      	str	r3, [sp, #128]	@ 0x80
 801dde0:	ab0e      	add	r3, sp, #56	@ 0x38
 801dde2:	9321      	str	r3, [sp, #132]	@ 0x84
 801dde4:	9101      	str	r1, [sp, #4]
 801dde6:	2302      	movs	r3, #2
 801dde8:	9300      	str	r3, [sp, #0]
 801ddea:	ab1e      	add	r3, sp, #120	@ 0x78
 801ddec:	aa16      	add	r2, sp, #88	@ 0x58
 801ddee:	a906      	add	r1, sp, #24
 801ddf0:	4628      	mov	r0, r5
 801ddf2:	f7ff fd39 	bl	801d868 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801ddf6:	1e07      	subs	r7, r0, #0
 801ddf8:	f2c0 80d2 	blt.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801ddfc:	ac0e      	add	r4, sp, #56	@ 0x38
 801ddfe:	f10d 0c18 	add.w	ip, sp, #24
 801de02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801de06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801de08:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801de0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801de10:	2f01      	cmp	r7, #1
 801de12:	f040 80c3 	bne.w	801df9c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801de16:	4b4f      	ldr	r3, [pc, #316]	@ (801df54 <lfs_dir_orphaningcommit+0x38c>)
 801de18:	9303      	str	r3, [sp, #12]
 801de1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de1c:	9302      	str	r3, [sp, #8]
 801de1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de20:	9301      	str	r3, [sp, #4]
 801de22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801de24:	9300      	str	r3, [sp, #0]
 801de26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801de28:	f640 128c 	movw	r2, #2444	@ 0x98c
 801de2c:	494a      	ldr	r1, [pc, #296]	@ (801df58 <lfs_dir_orphaningcommit+0x390>)
 801de2e:	484b      	ldr	r0, [pc, #300]	@ (801df5c <lfs_dir_orphaningcommit+0x394>)
 801de30:	f00c f8b8 	bl	8029fa4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801de34:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801de36:	6a2b      	ldr	r3, [r5, #32]
 801de38:	428b      	cmp	r3, r1
 801de3a:	d007      	beq.n	801de4c <lfs_dir_orphaningcommit+0x284>
 801de3c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801de3e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801de40:	4282      	cmp	r2, r0
 801de42:	d003      	beq.n	801de4c <lfs_dir_orphaningcommit+0x284>
 801de44:	428a      	cmp	r2, r1
 801de46:	d001      	beq.n	801de4c <lfs_dir_orphaningcommit+0x284>
 801de48:	4298      	cmp	r0, r3
 801de4a:	d103      	bne.n	801de54 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801de4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de4e:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801de50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de52:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801de54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801de56:	e758      	b.n	801dd0a <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801de58:	f114 0802 	adds.w	r8, r4, #2
 801de5c:	bf18      	it	ne
 801de5e:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801de62:	2101      	movs	r1, #1
 801de64:	4628      	mov	r0, r5
 801de66:	f7fd f997 	bl	801b198 <lfs_fs_preporphans>
            if (err) {
 801de6a:	4607      	mov	r7, r0
 801de6c:	2800      	cmp	r0, #0
 801de6e:	f040 8097 	bne.w	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801de72:	a906      	add	r1, sp, #24
 801de74:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801de78:	f7fd f858 	bl	801af2c <lfs_gstate_hasmovehere>
 801de7c:	2800      	cmp	r0, #0
 801de7e:	d131      	bne.n	801dee4 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801de80:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801de82:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801de86:	9b06      	ldr	r3, [sp, #24]
 801de88:	9304      	str	r3, [sp, #16]
 801de8a:	9b07      	ldr	r3, [sp, #28]
 801de8c:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801de8e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801de92:	429f      	cmp	r7, r3
 801de94:	d044      	beq.n	801df20 <lfs_dir_orphaningcommit+0x358>
 801de96:	02bb      	lsls	r3, r7, #10
 801de98:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801de9c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801dea0:	931a      	str	r3, [sp, #104]	@ 0x68
 801dea2:	2300      	movs	r3, #0
 801dea4:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dea6:	921c      	str	r2, [sp, #112]	@ 0x70
 801dea8:	aa0e      	add	r2, sp, #56	@ 0x38
 801deaa:	921d      	str	r2, [sp, #116]	@ 0x74
 801deac:	9301      	str	r3, [sp, #4]
 801deae:	2302      	movs	r3, #2
 801deb0:	9300      	str	r3, [sp, #0]
 801deb2:	ab1a      	add	r3, sp, #104	@ 0x68
 801deb4:	aa04      	add	r2, sp, #16
 801deb6:	a906      	add	r1, sp, #24
 801deb8:	4628      	mov	r0, r5
 801deba:	f7ff fcd5 	bl	801d868 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801debe:	1e07      	subs	r7, r0, #0
 801dec0:	db6e      	blt.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801dec2:	2f01      	cmp	r7, #1
 801dec4:	f47f af50 	bne.w	801dd68 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801dec8:	9b04      	ldr	r3, [sp, #16]
 801deca:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801decc:	9b05      	ldr	r3, [sp, #20]
 801dece:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801ded0:	ac0e      	add	r4, sp, #56	@ 0x38
 801ded2:	ae06      	add	r6, sp, #24
 801ded4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ded6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ded8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801dedc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801dee0:	2601      	movs	r6, #1
 801dee2:	e795      	b.n	801de10 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801dee4:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801dee6:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801deea:	4b1a      	ldr	r3, [pc, #104]	@ (801df54 <lfs_dir_orphaningcommit+0x38c>)
 801deec:	9302      	str	r3, [sp, #8]
 801deee:	9701      	str	r7, [sp, #4]
 801def0:	9b07      	ldr	r3, [sp, #28]
 801def2:	9300      	str	r3, [sp, #0]
 801def4:	9b06      	ldr	r3, [sp, #24]
 801def6:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801defa:	4917      	ldr	r1, [pc, #92]	@ (801df58 <lfs_dir_orphaningcommit+0x390>)
 801defc:	4818      	ldr	r0, [pc, #96]	@ (801df60 <lfs_dir_orphaningcommit+0x398>)
 801defe:	f00c f851 	bl	8029fa4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801df02:	2200      	movs	r2, #0
 801df04:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801df08:	4628      	mov	r0, r5
 801df0a:	f7fd f8f5 	bl	801b0f8 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801df0e:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801df12:	42bb      	cmp	r3, r7
 801df14:	d902      	bls.n	801df1c <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801df16:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801df1a:	e7b4      	b.n	801de86 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801df1c:	4622      	mov	r2, r4
 801df1e:	e7b2      	b.n	801de86 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801df20:	2300      	movs	r3, #0
 801df22:	e7bd      	b.n	801dea0 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801df24:	4b0f      	ldr	r3, [pc, #60]	@ (801df64 <lfs_dir_orphaningcommit+0x39c>)
 801df26:	4a10      	ldr	r2, [pc, #64]	@ (801df68 <lfs_dir_orphaningcommit+0x3a0>)
 801df28:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801df2c:	480a      	ldr	r0, [pc, #40]	@ (801df58 <lfs_dir_orphaningcommit+0x390>)
 801df2e:	f00c f805 	bl	8029f3c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801df32:	f113 0f02 	cmn.w	r3, #2
 801df36:	f47f af2a 	bne.w	801dd8e <lfs_dir_orphaningcommit+0x1c6>
 801df3a:	e769      	b.n	801de10 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801df3c:	f1c8 0100 	rsb	r1, r8, #0
 801df40:	4628      	mov	r0, r5
 801df42:	f7fd f929 	bl	801b198 <lfs_fs_preporphans>
                if (err) {
 801df46:	4607      	mov	r7, r0
 801df48:	2800      	cmp	r0, #0
 801df4a:	f43f af26 	beq.w	801dd9a <lfs_dir_orphaningcommit+0x1d2>
 801df4e:	e027      	b.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
 801df50:	000ffc08 	.word	0x000ffc08
 801df54:	08036c80 	.word	0x08036c80
 801df58:	08039104 	.word	0x08039104
 801df5c:	080394a4 	.word	0x080394a4
 801df60:	080394e0 	.word	0x080394e0
 801df64:	08039524 	.word	0x08039524
 801df68:	08039e60 	.word	0x08039e60
                moveid = lfs_tag_id(lfs->gstate.tag);
 801df6c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801df6e:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801df72:	4b10      	ldr	r3, [pc, #64]	@ (801dfb4 <lfs_dir_orphaningcommit+0x3ec>)
 801df74:	9302      	str	r3, [sp, #8]
 801df76:	9401      	str	r4, [sp, #4]
 801df78:	9b07      	ldr	r3, [sp, #28]
 801df7a:	9300      	str	r3, [sp, #0]
 801df7c:	9b06      	ldr	r3, [sp, #24]
 801df7e:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801df82:	490d      	ldr	r1, [pc, #52]	@ (801dfb8 <lfs_dir_orphaningcommit+0x3f0>)
 801df84:	480d      	ldr	r0, [pc, #52]	@ (801dfbc <lfs_dir_orphaningcommit+0x3f4>)
 801df86:	f00c f80d 	bl	8029fa4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801df8a:	2200      	movs	r2, #0
 801df8c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801df90:	4628      	mov	r0, r5
 801df92:	f7fd f8b1 	bl	801b0f8 <lfs_fs_prepmove>
 801df96:	e70a      	b.n	801ddae <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801df98:	2300      	movs	r3, #0
 801df9a:	e716      	b.n	801ddca <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801df9c:	b926      	cbnz	r6, 801dfa8 <lfs_dir_orphaningcommit+0x3e0>
 801df9e:	2700      	movs	r7, #0
}
 801dfa0:	4638      	mov	r0, r7
 801dfa2:	b023      	add	sp, #140	@ 0x8c
 801dfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801dfa8:	2703      	movs	r7, #3
 801dfaa:	e7f9      	b.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801dfac:	4627      	mov	r7, r4
 801dfae:	e7f7      	b.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801dfb0:	4607      	mov	r7, r0
 801dfb2:	e7f5      	b.n	801dfa0 <lfs_dir_orphaningcommit+0x3d8>
 801dfb4:	08036c80 	.word	0x08036c80
 801dfb8:	08039104 	.word	0x08039104
 801dfbc:	080394e0 	.word	0x080394e0

0801dfc0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfc4:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801dfc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801dfc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	f000 80ea 	beq.w	801e1a6 <lfs_fs_deorphan+0x1e6>
 801dfd2:	4605      	mov	r5, r0
 801dfd4:	460f      	mov	r7, r1
    int pass = 0;
 801dfd6:	2600      	movs	r6, #0
    while (pass < 2) {
 801dfd8:	2e01      	cmp	r6, #1
 801dfda:	f300 80db 	bgt.w	801e194 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801dfde:	2220      	movs	r2, #32
 801dfe0:	2100      	movs	r1, #0
 801dfe2:	a806      	add	r0, sp, #24
 801dfe4:	f00e fcfc 	bl	802c9e0 <memset>
 801dfe8:	2301      	movs	r3, #1
 801dfea:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801dfee:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801dff0:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801dff4:	e0bd      	b.n	801e172 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801dff6:	aa16      	add	r2, sp, #88	@ 0x58
 801dff8:	a90c      	add	r1, sp, #48	@ 0x30
 801dffa:	4628      	mov	r0, r5
 801dffc:	f7fe fa4c 	bl	801c498 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e000:	1e04      	subs	r4, r0, #0
 801e002:	db39      	blt.n	801e078 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801e004:	b916      	cbnz	r6, 801e00c <lfs_fs_deorphan+0x4c>
 801e006:	f114 0f02 	cmn.w	r4, #2
 801e00a:	d139      	bne.n	801e080 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801e00c:	2e01      	cmp	r6, #1
 801e00e:	f040 80a4 	bne.w	801e15a <lfs_fs_deorphan+0x19a>
 801e012:	f114 0f02 	cmn.w	r4, #2
 801e016:	f040 80a0 	bne.w	801e15a <lfs_fs_deorphan+0x19a>
 801e01a:	2f00      	cmp	r7, #0
 801e01c:	f000 809d 	beq.w	801e15a <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801e020:	4b63      	ldr	r3, [pc, #396]	@ (801e1b0 <lfs_fs_deorphan+0x1f0>)
 801e022:	9301      	str	r3, [sp, #4]
 801e024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e026:	9300      	str	r3, [sp, #0]
 801e028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e02a:	f241 329c 	movw	r2, #5020	@ 0x139c
 801e02e:	4961      	ldr	r1, [pc, #388]	@ (801e1b4 <lfs_fs_deorphan+0x1f4>)
 801e030:	4861      	ldr	r0, [pc, #388]	@ (801e1b8 <lfs_fs_deorphan+0x1f8>)
 801e032:	f00b ffb7 	bl	8029fa4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801e036:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e03a:	a90e      	add	r1, sp, #56	@ 0x38
 801e03c:	4628      	mov	r0, r5
 801e03e:	f7fd fab7 	bl	801b5b0 <lfs_dir_getgstate>
                    if (err) {
 801e042:	4604      	mov	r4, r0
 801e044:	2800      	cmp	r0, #0
 801e046:	f040 80af 	bne.w	801e1a8 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e04a:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801e04e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e052:	4b5a      	ldr	r3, [pc, #360]	@ (801e1bc <lfs_fs_deorphan+0x1fc>)
 801e054:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e058:	9322      	str	r3, [sp, #136]	@ 0x88
 801e05a:	ab14      	add	r3, sp, #80	@ 0x50
 801e05c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e05e:	2301      	movs	r3, #1
 801e060:	aa22      	add	r2, sp, #136	@ 0x88
 801e062:	a906      	add	r1, sp, #24
 801e064:	4628      	mov	r0, r5
 801e066:	f7ff fdaf 	bl	801dbc8 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801e06a:	1e04      	subs	r4, r0, #0
 801e06c:	f2c0 809c 	blt.w	801e1a8 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801e070:	2c03      	cmp	r4, #3
 801e072:	d17e      	bne.n	801e172 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801e074:	46b8      	mov	r8, r7
                    continue;
 801e076:	e07c      	b.n	801e172 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e078:	f114 0f02 	cmn.w	r4, #2
 801e07c:	d0c2      	beq.n	801e004 <lfs_fs_deorphan+0x44>
 801e07e:	e093      	b.n	801e1a8 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801e080:	ab04      	add	r3, sp, #16
 801e082:	9300      	str	r3, [sp, #0]
 801e084:	4623      	mov	r3, r4
 801e086:	4a4e      	ldr	r2, [pc, #312]	@ (801e1c0 <lfs_fs_deorphan+0x200>)
 801e088:	a916      	add	r1, sp, #88	@ 0x58
 801e08a:	4628      	mov	r0, r5
 801e08c:	f7fd fa82 	bl	801b594 <lfs_dir_get>
                    if (state < 0) {
 801e090:	2800      	cmp	r0, #0
 801e092:	db50      	blt.n	801e136 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801e094:	a90c      	add	r1, sp, #48	@ 0x30
 801e096:	a804      	add	r0, sp, #16
 801e098:	f7fc ff12 	bl	801aec0 <lfs_pair_issync>
 801e09c:	2800      	cmp	r0, #0
 801e09e:	d1b5      	bne.n	801e00c <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801e0a0:	4b43      	ldr	r3, [pc, #268]	@ (801e1b0 <lfs_fs_deorphan+0x1f0>)
 801e0a2:	9303      	str	r3, [sp, #12]
 801e0a4:	9b05      	ldr	r3, [sp, #20]
 801e0a6:	9302      	str	r3, [sp, #8]
 801e0a8:	9b04      	ldr	r3, [sp, #16]
 801e0aa:	9301      	str	r3, [sp, #4]
 801e0ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e0ae:	9300      	str	r3, [sp, #0]
 801e0b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0b2:	f241 3271 	movw	r2, #4977	@ 0x1371
 801e0b6:	493f      	ldr	r1, [pc, #252]	@ (801e1b4 <lfs_fs_deorphan+0x1f4>)
 801e0b8:	4842      	ldr	r0, [pc, #264]	@ (801e1c4 <lfs_fs_deorphan+0x204>)
 801e0ba:	f00b ff73 	bl	8029fa4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e0be:	a906      	add	r1, sp, #24
 801e0c0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e0c4:	f7fc ff32 	bl	801af2c <lfs_gstate_hasmovehere>
 801e0c8:	b9a0      	cbnz	r0, 801e0f4 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	931e      	str	r3, [sp, #120]	@ 0x78
 801e0ce:	2300      	movs	r3, #0
 801e0d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e0d2:	4b3d      	ldr	r3, [pc, #244]	@ (801e1c8 <lfs_fs_deorphan+0x208>)
 801e0d4:	9320      	str	r3, [sp, #128]	@ 0x80
 801e0d6:	ab04      	add	r3, sp, #16
 801e0d8:	9321      	str	r3, [sp, #132]	@ 0x84
 801e0da:	2302      	movs	r3, #2
 801e0dc:	aa1e      	add	r2, sp, #120	@ 0x78
 801e0de:	a906      	add	r1, sp, #24
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	f7ff fd71 	bl	801dbc8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801e0e6:	1e04      	subs	r4, r0, #0
 801e0e8:	db5e      	blt.n	801e1a8 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801e0ea:	2c03      	cmp	r4, #3
 801e0ec:	d141      	bne.n	801e172 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801e0ee:	f04f 0801 	mov.w	r8, #1
                        continue;
 801e0f2:	e03e      	b.n	801e172 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801e0f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e0f6:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801e0fa:	4b2d      	ldr	r3, [pc, #180]	@ (801e1b0 <lfs_fs_deorphan+0x1f0>)
 801e0fc:	9302      	str	r3, [sp, #8]
 801e0fe:	9401      	str	r4, [sp, #4]
 801e100:	9b07      	ldr	r3, [sp, #28]
 801e102:	9300      	str	r3, [sp, #0]
 801e104:	9b06      	ldr	r3, [sp, #24]
 801e106:	f241 327c 	movw	r2, #4988	@ 0x137c
 801e10a:	492a      	ldr	r1, [pc, #168]	@ (801e1b4 <lfs_fs_deorphan+0x1f4>)
 801e10c:	482f      	ldr	r0, [pc, #188]	@ (801e1cc <lfs_fs_deorphan+0x20c>)
 801e10e:	f00b ff49 	bl	8029fa4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e112:	2200      	movs	r2, #0
 801e114:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e118:	4628      	mov	r0, r5
 801e11a:	f7fc ffed 	bl	801b0f8 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e11e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e122:	429c      	cmp	r4, r3
 801e124:	d005      	beq.n	801e132 <lfs_fs_deorphan+0x172>
 801e126:	02a3      	lsls	r3, r4, #10
 801e128:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e12c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e130:	e7cc      	b.n	801e0cc <lfs_fs_deorphan+0x10c>
 801e132:	2300      	movs	r3, #0
 801e134:	e7ca      	b.n	801e0cc <lfs_fs_deorphan+0x10c>
                        return state;
 801e136:	4604      	mov	r4, r0
 801e138:	e036      	b.n	801e1a8 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e13a:	2301      	movs	r3, #1
 801e13c:	e000      	b.n	801e140 <lfs_fs_deorphan+0x180>
 801e13e:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801e140:	bb0b      	cbnz	r3, 801e186 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801e142:	aa0c      	add	r2, sp, #48	@ 0x30
 801e144:	a90e      	add	r1, sp, #56	@ 0x38
 801e146:	4628      	mov	r0, r5
 801e148:	f7fe fa12 	bl	801c570 <lfs_dir_fetch>
            if (err) {
 801e14c:	4604      	mov	r4, r0
 801e14e:	bb58      	cbnz	r0, 801e1a8 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801e150:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801e154:	2b00      	cmp	r3, #0
 801e156:	f43f af4e 	beq.w	801dff6 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801e15a:	f10d 0c18 	add.w	ip, sp, #24
 801e15e:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e162:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e16a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e16e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e172:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e178:	d0e1      	beq.n	801e13e <lfs_fs_deorphan+0x17e>
 801e17a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e17c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e180:	d0db      	beq.n	801e13a <lfs_fs_deorphan+0x17a>
 801e182:	2300      	movs	r3, #0
 801e184:	e7dc      	b.n	801e140 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e186:	f1b8 0f00 	cmp.w	r8, #0
 801e18a:	d101      	bne.n	801e190 <lfs_fs_deorphan+0x1d0>
 801e18c:	3601      	adds	r6, #1
 801e18e:	e723      	b.n	801dfd8 <lfs_fs_deorphan+0x18>
 801e190:	2600      	movs	r6, #0
 801e192:	e721      	b.n	801dfd8 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e194:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e198:	4249      	negs	r1, r1
 801e19a:	b249      	sxtb	r1, r1
 801e19c:	4628      	mov	r0, r5
 801e19e:	f7fc fffb 	bl	801b198 <lfs_fs_preporphans>
 801e1a2:	4604      	mov	r4, r0
 801e1a4:	e000      	b.n	801e1a8 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e1a6:	2400      	movs	r4, #0
}
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	b024      	add	sp, #144	@ 0x90
 801e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b0:	08036c80 	.word	0x08036c80
 801e1b4:	08039104 	.word	0x08039104
 801e1b8:	080395d8 	.word	0x080395d8
 801e1bc:	000ffc08 	.word	0x000ffc08
 801e1c0:	7ffffc00 	.word	0x7ffffc00
 801e1c4:	0803954c 	.word	0x0803954c
 801e1c8:	600ffc08 	.word	0x600ffc08
 801e1cc:	08039590 	.word	0x08039590

0801e1d0 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e1d0:	b510      	push	{r4, lr}
 801e1d2:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e1d4:	f7ff fcf8 	bl	801dbc8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	db00      	blt.n	801e1de <lfs_dir_commit+0xe>
    if (orphans) {
 801e1dc:	b900      	cbnz	r0, 801e1e0 <lfs_dir_commit+0x10>
}
 801e1de:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e1e0:	2100      	movs	r1, #0
 801e1e2:	4620      	mov	r0, r4
 801e1e4:	f7ff feec 	bl	801dfc0 <lfs_fs_deorphan>
        if (err) {
 801e1e8:	e7f9      	b.n	801e1de <lfs_dir_commit+0xe>
	...

0801e1ec <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e1ec:	b530      	push	{r4, r5, lr}
 801e1ee:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e1f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e1f2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e1f6:	d103      	bne.n	801e200 <lfs_fs_desuperblock+0x14>
        return 0;
 801e1f8:	2500      	movs	r5, #0
}
 801e1fa:	4628      	mov	r0, r5
 801e1fc:	b013      	add	sp, #76	@ 0x4c
 801e1fe:	bd30      	pop	{r4, r5, pc}
 801e200:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e202:	4b1a      	ldr	r3, [pc, #104]	@ (801e26c <lfs_fs_desuperblock+0x80>)
 801e204:	9301      	str	r3, [sp, #4]
 801e206:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e208:	9300      	str	r3, [sp, #0]
 801e20a:	6a03      	ldr	r3, [r0, #32]
 801e20c:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e210:	4917      	ldr	r1, [pc, #92]	@ (801e270 <lfs_fs_desuperblock+0x84>)
 801e212:	4818      	ldr	r0, [pc, #96]	@ (801e274 <lfs_fs_desuperblock+0x88>)
 801e214:	f00b fec6 	bl	8029fa4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e218:	f104 0220 	add.w	r2, r4, #32
 801e21c:	a908      	add	r1, sp, #32
 801e21e:	4620      	mov	r0, r4
 801e220:	f7fe f9a6 	bl	801c570 <lfs_dir_fetch>
    if (err) {
 801e224:	4605      	mov	r5, r0
 801e226:	2800      	cmp	r0, #0
 801e228:	d1e7      	bne.n	801e1fa <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e22a:	4620      	mov	r0, r4
 801e22c:	f7fc feb6 	bl	801af9c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e230:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e232:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e236:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e238:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e23a:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e23c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e23e:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e240:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e242:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e244:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e246:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e248:	4b0b      	ldr	r3, [pc, #44]	@ (801e278 <lfs_fs_desuperblock+0x8c>)
 801e24a:	9310      	str	r3, [sp, #64]	@ 0x40
 801e24c:	ab02      	add	r3, sp, #8
 801e24e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e250:	2301      	movs	r3, #1
 801e252:	aa10      	add	r2, sp, #64	@ 0x40
 801e254:	a908      	add	r1, sp, #32
 801e256:	4620      	mov	r0, r4
 801e258:	f7ff ffba 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801e25c:	4605      	mov	r5, r0
 801e25e:	2800      	cmp	r0, #0
 801e260:	d1cb      	bne.n	801e1fa <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e262:	2100      	movs	r1, #0
 801e264:	4620      	mov	r0, r4
 801e266:	f7fc ff40 	bl	801b0ea <lfs_fs_prepsuperblock>
    return 0;
 801e26a:	e7c6      	b.n	801e1fa <lfs_fs_desuperblock+0xe>
 801e26c:	08036c80 	.word	0x08036c80
 801e270:	08039104 	.word	0x08039104
 801e274:	08039608 	.word	0x08039608
 801e278:	20100018 	.word	0x20100018

0801e27c <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e27c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e27e:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e280:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e284:	d101      	bne.n	801e28a <lfs_fs_demove+0xe>
        return 0;
 801e286:	2000      	movs	r0, #0
}
 801e288:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e28a:	b530      	push	{r4, r5, lr}
 801e28c:	b08f      	sub	sp, #60	@ 0x3c
 801e28e:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e290:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e294:	4a1d      	ldr	r2, [pc, #116]	@ (801e30c <lfs_fs_demove+0x90>)
 801e296:	9202      	str	r2, [sp, #8]
 801e298:	9301      	str	r3, [sp, #4]
 801e29a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e29c:	9300      	str	r3, [sp, #0]
 801e29e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e2a0:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e2a4:	491a      	ldr	r1, [pc, #104]	@ (801e310 <lfs_fs_demove+0x94>)
 801e2a6:	481b      	ldr	r0, [pc, #108]	@ (801e314 <lfs_fs_demove+0x98>)
 801e2a8:	f00b fe7c 	bl	8029fa4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e2ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e2ae:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e2b2:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e2b6:	4293      	cmp	r3, r2
 801e2b8:	d108      	bne.n	801e2cc <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e2ba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e2be:	a904      	add	r1, sp, #16
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f7fe f955 	bl	801c570 <lfs_dir_fetch>
    if (err) {
 801e2c6:	b140      	cbz	r0, 801e2da <lfs_fs_demove+0x5e>
}
 801e2c8:	b00f      	add	sp, #60	@ 0x3c
 801e2ca:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e2cc:	4b12      	ldr	r3, [pc, #72]	@ (801e318 <lfs_fs_demove+0x9c>)
 801e2ce:	4a13      	ldr	r2, [pc, #76]	@ (801e31c <lfs_fs_demove+0xa0>)
 801e2d0:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e2d4:	480e      	ldr	r0, [pc, #56]	@ (801e310 <lfs_fs_demove+0x94>)
 801e2d6:	f00b fe31 	bl	8029f3c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e2da:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e2dc:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e2e0:	2200      	movs	r2, #0
 801e2e2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	f7fc ff06 	bl	801b0f8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e2ec:	02ab      	lsls	r3, r5, #10
 801e2ee:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e2f2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e2f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2fc:	2301      	movs	r3, #1
 801e2fe:	aa0c      	add	r2, sp, #48	@ 0x30
 801e300:	a904      	add	r1, sp, #16
 801e302:	4620      	mov	r0, r4
 801e304:	f7ff ff64 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801e308:	e7de      	b.n	801e2c8 <lfs_fs_demove+0x4c>
 801e30a:	bf00      	nop
 801e30c:	08036c80 	.word	0x08036c80
 801e310:	08039104 	.word	0x08039104
 801e314:	0803963c 	.word	0x0803963c
 801e318:	08039670 	.word	0x08039670
 801e31c:	08039dc4 	.word	0x08039dc4

0801e320 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801e320:	b510      	push	{r4, lr}
 801e322:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801e324:	f7ff ff62 	bl	801e1ec <lfs_fs_desuperblock>
    if (err) {
 801e328:	4603      	mov	r3, r0
 801e32a:	b108      	cbz	r0, 801e330 <lfs_fs_forceconsistency+0x10>
}
 801e32c:	4618      	mov	r0, r3
 801e32e:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801e330:	4620      	mov	r0, r4
 801e332:	f7ff ffa3 	bl	801e27c <lfs_fs_demove>
    if (err) {
 801e336:	4603      	mov	r3, r0
 801e338:	2800      	cmp	r0, #0
 801e33a:	d1f7      	bne.n	801e32c <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801e33c:	2101      	movs	r1, #1
 801e33e:	4620      	mov	r0, r4
 801e340:	f7ff fe3e 	bl	801dfc0 <lfs_fs_deorphan>
 801e344:	4603      	mov	r3, r0
    if (err) {
 801e346:	e7f1      	b.n	801e32c <lfs_fs_forceconsistency+0xc>

0801e348 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801e348:	b570      	push	{r4, r5, r6, lr}
 801e34a:	b082      	sub	sp, #8
 801e34c:	4605      	mov	r5, r0
 801e34e:	460e      	mov	r6, r1
 801e350:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801e352:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801e356:	4621      	mov	r1, r4
 801e358:	f7fd f92a 	bl	801b5b0 <lfs_dir_getgstate>
    if (err) {
 801e35c:	b108      	cbz	r0, 801e362 <lfs_dir_drop+0x1a>
}
 801e35e:	b002      	add	sp, #8
 801e360:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801e362:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801e366:	7de2      	ldrb	r2, [r4, #23]
 801e368:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e36c:	4b05      	ldr	r3, [pc, #20]	@ (801e384 <lfs_dir_drop+0x3c>)
 801e36e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e372:	9300      	str	r3, [sp, #0]
 801e374:	9101      	str	r1, [sp, #4]
 801e376:	2301      	movs	r3, #1
 801e378:	466a      	mov	r2, sp
 801e37a:	4631      	mov	r1, r6
 801e37c:	4628      	mov	r0, r5
 801e37e:	f7ff ff27 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801e382:	e7ec      	b.n	801e35e <lfs_dir_drop+0x16>
 801e384:	000ffc08 	.word	0x000ffc08

0801e388 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801e388:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e38a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801e38e:	d001      	beq.n	801e394 <lfs_file_sync_+0xc>
        return 0;
 801e390:	2000      	movs	r0, #0
}
 801e392:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801e394:	b530      	push	{r4, r5, lr}
 801e396:	b087      	sub	sp, #28
 801e398:	4605      	mov	r5, r0
 801e39a:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801e39c:	f7fe fcae 	bl	801ccfc <lfs_file_flush>
    if (err) {
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d136      	bne.n	801e412 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801e3a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3a6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801e3aa:	d036      	beq.n	801e41a <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e3ac:	68a2      	ldr	r2, [r4, #8]
 801e3ae:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3b2:	d036      	beq.n	801e422 <lfs_file_sync_+0x9a>
 801e3b4:	68e2      	ldr	r2, [r4, #12]
 801e3b6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3ba:	d030      	beq.n	801e41e <lfs_file_sync_+0x96>
 801e3bc:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801e3be:	f012 0f01 	tst.w	r2, #1
 801e3c2:	d12a      	bne.n	801e41a <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801e3c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3c8:	d02d      	beq.n	801e426 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801e3ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3d0:	d033      	beq.n	801e43a <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801e3d2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801e3d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801e3d6:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e3da:	88a3      	ldrh	r3, [r4, #4]
 801e3dc:	029b      	lsls	r3, r3, #10
 801e3de:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801e3e2:	4302      	orrs	r2, r0
 801e3e4:	9202      	str	r2, [sp, #8]
 801e3e6:	9103      	str	r1, [sp, #12]
 801e3e8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e3ea:	6891      	ldr	r1, [r2, #8]
 801e3ec:	430b      	orrs	r3, r1
 801e3ee:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801e3f2:	9304      	str	r3, [sp, #16]
 801e3f4:	6853      	ldr	r3, [r2, #4]
 801e3f6:	9305      	str	r3, [sp, #20]
 801e3f8:	2302      	movs	r3, #2
 801e3fa:	aa02      	add	r2, sp, #8
 801e3fc:	f104 0108 	add.w	r1, r4, #8
 801e400:	4628      	mov	r0, r5
 801e402:	f7ff fee5 	bl	801e1d0 <lfs_dir_commit>
        if (err) {
 801e406:	bb20      	cbnz	r0, 801e452 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801e408:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e40a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e40e:	6323      	str	r3, [r4, #48]	@ 0x30
 801e410:	e003      	b.n	801e41a <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801e412:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e414:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e418:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e41a:	b007      	add	sp, #28
 801e41c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e41e:	2201      	movs	r2, #1
 801e420:	e7cd      	b.n	801e3be <lfs_file_sync_+0x36>
 801e422:	2201      	movs	r2, #1
 801e424:	e7cb      	b.n	801e3be <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e426:	2300      	movs	r3, #0
 801e428:	462a      	mov	r2, r5
 801e42a:	f105 0110 	add.w	r1, r5, #16
 801e42e:	4628      	mov	r0, r5
 801e430:	f7fd fc82 	bl	801bd38 <lfs_bd_sync>
            if (err) {
 801e434:	2800      	cmp	r0, #0
 801e436:	d0c8      	beq.n	801e3ca <lfs_file_sync_+0x42>
 801e438:	e7ef      	b.n	801e41a <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801e43a:	466b      	mov	r3, sp
 801e43c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801e440:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e444:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801e448:	2008      	movs	r0, #8
            buffer = &ctz;
 801e44a:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801e44c:	f240 2202 	movw	r2, #514	@ 0x202
 801e450:	e7c3      	b.n	801e3da <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801e452:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e454:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e458:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801e45a:	e7de      	b.n	801e41a <lfs_file_sync_+0x92>

0801e45c <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801e45c:	b510      	push	{r4, lr}
 801e45e:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801e460:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e464:	b13b      	cbz	r3, 801e476 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801e466:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e46a:	b143      	cbz	r3, 801e47e <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801e46c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e46e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e470:	b14b      	cbz	r3, 801e486 <lfs_deinit+0x2a>
}
 801e472:	2000      	movs	r0, #0
 801e474:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801e476:	68c0      	ldr	r0, [r0, #12]
 801e478:	f7fc fb00 	bl	801aa7c <vPortFree>
#else
    (void)p;
#endif
}
 801e47c:	e7f3      	b.n	801e466 <lfs_deinit+0xa>
    free(p);
 801e47e:	69e0      	ldr	r0, [r4, #28]
 801e480:	f7fc fafc 	bl	801aa7c <vPortFree>
}
 801e484:	e7f2      	b.n	801e46c <lfs_deinit+0x10>
    free(p);
 801e486:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e488:	f7fc faf8 	bl	801aa7c <vPortFree>
}
 801e48c:	e7f1      	b.n	801e472 <lfs_deinit+0x16>
	...

0801e490 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801e490:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801e492:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801e494:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801e496:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e498:	69cb      	ldr	r3, [r1, #28]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	f000 80b1 	beq.w	801e602 <lfs_init+0x172>
 801e4a0:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e4a2:	6a0a      	ldr	r2, [r1, #32]
 801e4a4:	2a00      	cmp	r2, #0
 801e4a6:	f000 80b3 	beq.w	801e610 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e4aa:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801e4ac:	2800      	cmp	r0, #0
 801e4ae:	f000 80b6 	beq.w	801e61e <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e4b2:	fbb0 fcf3 	udiv	ip, r0, r3
 801e4b6:	fb03 031c 	mls	r3, r3, ip, r0
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	f040 80b6 	bne.w	801e62c <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e4c0:	fbb0 f3f2 	udiv	r3, r0, r2
 801e4c4:	fb02 0313 	mls	r3, r2, r3, r0
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	f040 80b6 	bne.w	801e63a <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e4ce:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801e4d0:	fbb2 f3f0 	udiv	r3, r2, r0
 801e4d4:	fb00 2313 	mls	r3, r0, r3, r2
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	f040 80b5 	bne.w	801e648 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e4de:	2a7f      	cmp	r2, #127	@ 0x7f
 801e4e0:	f240 80b9 	bls.w	801e656 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e4e4:	f1a2 0c08 	sub.w	ip, r2, #8
 801e4e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e4ec:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801e4f0:	3b01      	subs	r3, #1
 801e4f2:	fab3 f383 	clz	r3, r3
 801e4f6:	f1c3 0320 	rsb	r3, r3, #32
 801e4fa:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801e4fe:	f0c0 80b1 	bcc.w	801e664 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e502:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801e504:	2b00      	cmp	r3, #0
 801e506:	f000 80b4 	beq.w	801e672 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e50a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801e50c:	b11b      	cbz	r3, 801e516 <lfs_init+0x86>
 801e50e:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801e512:	f0c0 80b5 	bcc.w	801e680 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e51a:	d002      	beq.n	801e522 <lfs_init+0x92>
 801e51c:	429a      	cmp	r2, r3
 801e51e:	f0c0 80b6 	bcc.w	801e68e <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801e522:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e524:	2b00      	cmp	r3, #0
 801e526:	f000 80b9 	beq.w	801e69c <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801e52a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801e52c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e52e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801e530:	2b00      	cmp	r3, #0
 801e532:	f000 80bf 	beq.w	801e6b4 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801e536:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801e538:	4621      	mov	r1, r4
 801e53a:	4620      	mov	r0, r4
 801e53c:	f7fc fe5c 	bl	801b1f8 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801e540:	f104 0110 	add.w	r1, r4, #16
 801e544:	4620      	mov	r0, r4
 801e546:	f7fc fe57 	bl	801b1f8 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e54a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e54c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801e54e:	2800      	cmp	r0, #0
 801e550:	f000 80b8 	beq.w	801e6c4 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801e554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e556:	2b00      	cmp	r3, #0
 801e558:	f000 80bb 	beq.w	801e6d2 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801e55c:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e55e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e560:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801e562:	2bff      	cmp	r3, #255	@ 0xff
 801e564:	f200 80bc 	bhi.w	801e6e0 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801e568:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801e56a:	b90b      	cbnz	r3, 801e570 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801e56c:	23ff      	movs	r3, #255	@ 0xff
 801e56e:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e570:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801e572:	2b00      	cmp	r3, #0
 801e574:	f2c0 80bb 	blt.w	801e6ee <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801e578:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801e57a:	b913      	cbnz	r3, 801e582 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801e57c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e580:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e582:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801e584:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801e588:	428b      	cmp	r3, r1
 801e58a:	f200 80b7 	bhi.w	801e6fc <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801e58e:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801e590:	b913      	cbnz	r3, 801e598 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801e592:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e596:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e598:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801e59a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801e59c:	4288      	cmp	r0, r1
 801e59e:	f200 80b4 	bhi.w	801e70a <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5a2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801e5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5a8:	d003      	beq.n	801e5b2 <lfs_init+0x122>
 801e5aa:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801e5ac:	42ab      	cmp	r3, r5
 801e5ae:	f200 80b3 	bhi.w	801e718 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5b6:	d003      	beq.n	801e5c0 <lfs_init+0x130>
 801e5b8:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801e5ba:	42ab      	cmp	r3, r5
 801e5bc:	f200 80b3 	bhi.w	801e726 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5c4:	d006      	beq.n	801e5d4 <lfs_init+0x144>
 801e5c6:	2800      	cmp	r0, #0
 801e5c8:	f000 80b4 	beq.w	801e734 <lfs_init+0x2a4>
 801e5cc:	08c1      	lsrs	r1, r0, #3
 801e5ce:	428b      	cmp	r3, r1
 801e5d0:	f200 80b2 	bhi.w	801e738 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801e5d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801e5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5da:	f000 80b4 	beq.w	801e746 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	f040 80b3 	bne.w	801e74a <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801e5e4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801e5e6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801e5e8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	f000 80be 	beq.w	801e76c <lfs_init+0x2dc>
 801e5f0:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801e5f2:	4283      	cmp	r3, r0
 801e5f4:	bf28      	it	cs
 801e5f6:	4603      	movcs	r3, r0
 801e5f8:	428b      	cmp	r3, r1
 801e5fa:	bf28      	it	cs
 801e5fc:	460b      	movcs	r3, r1
 801e5fe:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801e600:	e0a3      	b.n	801e74a <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e602:	4b5c      	ldr	r3, [pc, #368]	@ (801e774 <lfs_init+0x2e4>)
 801e604:	4a5c      	ldr	r2, [pc, #368]	@ (801e778 <lfs_init+0x2e8>)
 801e606:	f241 0152 	movw	r1, #4178	@ 0x1052
 801e60a:	485c      	ldr	r0, [pc, #368]	@ (801e77c <lfs_init+0x2ec>)
 801e60c:	f00b fc96 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e610:	4b5b      	ldr	r3, [pc, #364]	@ (801e780 <lfs_init+0x2f0>)
 801e612:	4a59      	ldr	r2, [pc, #356]	@ (801e778 <lfs_init+0x2e8>)
 801e614:	f241 0153 	movw	r1, #4179	@ 0x1053
 801e618:	4858      	ldr	r0, [pc, #352]	@ (801e77c <lfs_init+0x2ec>)
 801e61a:	f00b fc8f 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e61e:	4b59      	ldr	r3, [pc, #356]	@ (801e784 <lfs_init+0x2f4>)
 801e620:	4a55      	ldr	r2, [pc, #340]	@ (801e778 <lfs_init+0x2e8>)
 801e622:	f241 0154 	movw	r1, #4180	@ 0x1054
 801e626:	4855      	ldr	r0, [pc, #340]	@ (801e77c <lfs_init+0x2ec>)
 801e628:	f00b fc88 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e62c:	4b56      	ldr	r3, [pc, #344]	@ (801e788 <lfs_init+0x2f8>)
 801e62e:	4a52      	ldr	r2, [pc, #328]	@ (801e778 <lfs_init+0x2e8>)
 801e630:	f241 0158 	movw	r1, #4184	@ 0x1058
 801e634:	4851      	ldr	r0, [pc, #324]	@ (801e77c <lfs_init+0x2ec>)
 801e636:	f00b fc81 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e63a:	4b54      	ldr	r3, [pc, #336]	@ (801e78c <lfs_init+0x2fc>)
 801e63c:	4a4e      	ldr	r2, [pc, #312]	@ (801e778 <lfs_init+0x2e8>)
 801e63e:	f241 0159 	movw	r1, #4185	@ 0x1059
 801e642:	484e      	ldr	r0, [pc, #312]	@ (801e77c <lfs_init+0x2ec>)
 801e644:	f00b fc7a 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e648:	4b51      	ldr	r3, [pc, #324]	@ (801e790 <lfs_init+0x300>)
 801e64a:	4a4b      	ldr	r2, [pc, #300]	@ (801e778 <lfs_init+0x2e8>)
 801e64c:	f241 015a 	movw	r1, #4186	@ 0x105a
 801e650:	484a      	ldr	r0, [pc, #296]	@ (801e77c <lfs_init+0x2ec>)
 801e652:	f00b fc73 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e656:	4b4f      	ldr	r3, [pc, #316]	@ (801e794 <lfs_init+0x304>)
 801e658:	4a47      	ldr	r2, [pc, #284]	@ (801e778 <lfs_init+0x2e8>)
 801e65a:	f241 015d 	movw	r1, #4189	@ 0x105d
 801e65e:	4847      	ldr	r0, [pc, #284]	@ (801e77c <lfs_init+0x2ec>)
 801e660:	f00b fc6c 	bl	8029f3c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e664:	4b4c      	ldr	r3, [pc, #304]	@ (801e798 <lfs_init+0x308>)
 801e666:	4a44      	ldr	r2, [pc, #272]	@ (801e778 <lfs_init+0x2e8>)
 801e668:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801e66c:	4843      	ldr	r0, [pc, #268]	@ (801e77c <lfs_init+0x2ec>)
 801e66e:	f00b fc65 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e672:	4b4a      	ldr	r3, [pc, #296]	@ (801e79c <lfs_init+0x30c>)
 801e674:	4a40      	ldr	r2, [pc, #256]	@ (801e778 <lfs_init+0x2e8>)
 801e676:	f241 0169 	movw	r1, #4201	@ 0x1069
 801e67a:	4840      	ldr	r0, [pc, #256]	@ (801e77c <lfs_init+0x2ec>)
 801e67c:	f00b fc5e 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e680:	4b47      	ldr	r3, [pc, #284]	@ (801e7a0 <lfs_init+0x310>)
 801e682:	4a3d      	ldr	r2, [pc, #244]	@ (801e778 <lfs_init+0x2e8>)
 801e684:	f241 016f 	movw	r1, #4207	@ 0x106f
 801e688:	483c      	ldr	r0, [pc, #240]	@ (801e77c <lfs_init+0x2ec>)
 801e68a:	f00b fc57 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e68e:	4b45      	ldr	r3, [pc, #276]	@ (801e7a4 <lfs_init+0x314>)
 801e690:	4a39      	ldr	r2, [pc, #228]	@ (801e778 <lfs_init+0x2e8>)
 801e692:	f241 0171 	movw	r1, #4209	@ 0x1071
 801e696:	4839      	ldr	r0, [pc, #228]	@ (801e77c <lfs_init+0x2ec>)
 801e698:	f00b fc50 	bl	8029f3c <__assert_func>
    return malloc(size);
 801e69c:	f7fc f96c 	bl	801a978 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e6a0:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801e6a2:	2800      	cmp	r0, #0
 801e6a4:	f47f af42 	bne.w	801e52c <lfs_init+0x9c>
    lfs_deinit(lfs);
 801e6a8:	4620      	mov	r0, r4
 801e6aa:	f7ff fed7 	bl	801e45c <lfs_deinit>
    return err;
 801e6ae:	f06f 000b 	mvn.w	r0, #11
 801e6b2:	e05a      	b.n	801e76a <lfs_init+0x2da>
 801e6b4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801e6b6:	f7fc f95f 	bl	801a978 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e6ba:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801e6bc:	2800      	cmp	r0, #0
 801e6be:	f47f af3b 	bne.w	801e538 <lfs_init+0xa8>
 801e6c2:	e7f1      	b.n	801e6a8 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e6c4:	4b38      	ldr	r3, [pc, #224]	@ (801e7a8 <lfs_init+0x318>)
 801e6c6:	4a2c      	ldr	r2, [pc, #176]	@ (801e778 <lfs_init+0x2e8>)
 801e6c8:	f241 0190 	movw	r1, #4240	@ 0x1090
 801e6cc:	482b      	ldr	r0, [pc, #172]	@ (801e77c <lfs_init+0x2ec>)
 801e6ce:	f00b fc35 	bl	8029f3c <__assert_func>
 801e6d2:	f7fc f951 	bl	801a978 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801e6d6:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801e6d8:	2800      	cmp	r0, #0
 801e6da:	f47f af40 	bne.w	801e55e <lfs_init+0xce>
 801e6de:	e7e3      	b.n	801e6a8 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e6e0:	4b32      	ldr	r3, [pc, #200]	@ (801e7ac <lfs_init+0x31c>)
 801e6e2:	4a25      	ldr	r2, [pc, #148]	@ (801e778 <lfs_init+0x2e8>)
 801e6e4:	f241 019c 	movw	r1, #4252	@ 0x109c
 801e6e8:	4824      	ldr	r0, [pc, #144]	@ (801e77c <lfs_init+0x2ec>)
 801e6ea:	f00b fc27 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e6ee:	4b30      	ldr	r3, [pc, #192]	@ (801e7b0 <lfs_init+0x320>)
 801e6f0:	4a21      	ldr	r2, [pc, #132]	@ (801e778 <lfs_init+0x2e8>)
 801e6f2:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801e6f6:	4821      	ldr	r0, [pc, #132]	@ (801e77c <lfs_init+0x2ec>)
 801e6f8:	f00b fc20 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e6fc:	4b2d      	ldr	r3, [pc, #180]	@ (801e7b4 <lfs_init+0x324>)
 801e6fe:	4a1e      	ldr	r2, [pc, #120]	@ (801e778 <lfs_init+0x2e8>)
 801e700:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801e704:	481d      	ldr	r0, [pc, #116]	@ (801e77c <lfs_init+0x2ec>)
 801e706:	f00b fc19 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e70a:	4b2b      	ldr	r3, [pc, #172]	@ (801e7b8 <lfs_init+0x328>)
 801e70c:	4a1a      	ldr	r2, [pc, #104]	@ (801e778 <lfs_init+0x2e8>)
 801e70e:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801e712:	481a      	ldr	r0, [pc, #104]	@ (801e77c <lfs_init+0x2ec>)
 801e714:	f00b fc12 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e718:	4b28      	ldr	r3, [pc, #160]	@ (801e7bc <lfs_init+0x32c>)
 801e71a:	4a17      	ldr	r2, [pc, #92]	@ (801e778 <lfs_init+0x2e8>)
 801e71c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801e720:	4816      	ldr	r0, [pc, #88]	@ (801e77c <lfs_init+0x2ec>)
 801e722:	f00b fc0b 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e726:	4b26      	ldr	r3, [pc, #152]	@ (801e7c0 <lfs_init+0x330>)
 801e728:	4a13      	ldr	r2, [pc, #76]	@ (801e778 <lfs_init+0x2e8>)
 801e72a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801e72e:	4813      	ldr	r0, [pc, #76]	@ (801e77c <lfs_init+0x2ec>)
 801e730:	f00b fc04 	bl	8029f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e734:	08c9      	lsrs	r1, r1, #3
 801e736:	e74a      	b.n	801e5ce <lfs_init+0x13e>
 801e738:	4b22      	ldr	r3, [pc, #136]	@ (801e7c4 <lfs_init+0x334>)
 801e73a:	4a0f      	ldr	r2, [pc, #60]	@ (801e778 <lfs_init+0x2e8>)
 801e73c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801e740:	480e      	ldr	r0, [pc, #56]	@ (801e77c <lfs_init+0x2ec>)
 801e742:	f00b fbfb 	bl	8029f3c <__assert_func>
        lfs->inline_max = 0;
 801e746:	2300      	movs	r3, #0
 801e748:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801e74a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e74e:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801e750:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801e752:	2000      	movs	r0, #0
 801e754:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801e756:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801e758:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801e75a:	6420      	str	r0, [r4, #64]	@ 0x40
 801e75c:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801e75e:	6320      	str	r0, [r4, #48]	@ 0x30
 801e760:	6360      	str	r0, [r4, #52]	@ 0x34
 801e762:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801e764:	64a0      	str	r0, [r4, #72]	@ 0x48
 801e766:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801e768:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801e76a:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801e76c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801e76e:	08db      	lsrs	r3, r3, #3
 801e770:	e73f      	b.n	801e5f2 <lfs_init+0x162>
 801e772:	bf00      	nop
 801e774:	080396a4 	.word	0x080396a4
 801e778:	08039e84 	.word	0x08039e84
 801e77c:	08039104 	.word	0x08039104
 801e780:	080396c0 	.word	0x080396c0
 801e784:	080396dc 	.word	0x080396dc
 801e788:	080396f8 	.word	0x080396f8
 801e78c:	08039728 	.word	0x08039728
 801e790:	08039758 	.word	0x08039758
 801e794:	0803978c 	.word	0x0803978c
 801e798:	080397a8 	.word	0x080397a8
 801e79c:	080397f4 	.word	0x080397f4
 801e7a0:	08039810 	.word	0x08039810
 801e7a4:	08039864 	.word	0x08039864
 801e7a8:	080398c4 	.word	0x080398c4
 801e7ac:	080398e4 	.word	0x080398e4
 801e7b0:	08039900 	.word	0x08039900
 801e7b4:	08039924 	.word	0x08039924
 801e7b8:	08039940 	.word	0x08039940
 801e7bc:	08039970 	.word	0x08039970
 801e7c0:	080399c8 	.word	0x080399c8
 801e7c4:	08039a18 	.word	0x08039a18

0801e7c8 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e7c8:	b570      	push	{r4, r5, r6, lr}
 801e7ca:	b096      	sub	sp, #88	@ 0x58
 801e7cc:	4604      	mov	r4, r0
 801e7ce:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801e7d0:	f7ff fe5e 	bl	801e490 <lfs_init>
        if (err) {
 801e7d4:	4606      	mov	r6, r0
 801e7d6:	b9f0      	cbnz	r0, 801e816 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801e7d8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e7da:	b1fb      	cbz	r3, 801e81c <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e7dc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e7e0:	2100      	movs	r1, #0
 801e7e2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e7e4:	f00e f8fc 	bl	802c9e0 <memset>
        lfs->lookahead.start = 0;
 801e7e8:	2200      	movs	r2, #0
 801e7ea:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801e7ec:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e7f0:	00db      	lsls	r3, r3, #3
 801e7f2:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801e7f4:	428b      	cmp	r3, r1
 801e7f6:	bf28      	it	cs
 801e7f8:	460b      	movcs	r3, r1
 801e7fa:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801e7fc:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801e7fe:	4620      	mov	r0, r4
 801e800:	f7fc fbda 	bl	801afb8 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801e804:	a906      	add	r1, sp, #24
 801e806:	4620      	mov	r0, r4
 801e808:	f7fe f820 	bl	801c84c <lfs_dir_alloc>
        if (err) {
 801e80c:	4606      	mov	r6, r0
 801e80e:	b160      	cbz	r0, 801e82a <lfs_format_+0x62>
    lfs_deinit(lfs);
 801e810:	4620      	mov	r0, r4
 801e812:	f7ff fe23 	bl	801e45c <lfs_deinit>
}
 801e816:	4630      	mov	r0, r6
 801e818:	b016      	add	sp, #88	@ 0x58
 801e81a:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801e81c:	4b20      	ldr	r3, [pc, #128]	@ (801e8a0 <lfs_format_+0xd8>)
 801e81e:	4a21      	ldr	r2, [pc, #132]	@ (801e8a4 <lfs_format_+0xdc>)
 801e820:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801e824:	4820      	ldr	r0, [pc, #128]	@ (801e8a8 <lfs_format_+0xe0>)
 801e826:	f00b fb89 	bl	8029f3c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801e82a:	4620      	mov	r0, r4
 801e82c:	f7fc fbb6 	bl	801af9c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801e830:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801e832:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801e836:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801e838:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801e83a:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801e83c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801e83e:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801e840:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801e842:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801e844:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801e846:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e848:	4b18      	ldr	r3, [pc, #96]	@ (801e8ac <lfs_format_+0xe4>)
 801e84a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e84c:	2300      	movs	r3, #0
 801e84e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e850:	4b17      	ldr	r3, [pc, #92]	@ (801e8b0 <lfs_format_+0xe8>)
 801e852:	9310      	str	r3, [sp, #64]	@ 0x40
 801e854:	4b17      	ldr	r3, [pc, #92]	@ (801e8b4 <lfs_format_+0xec>)
 801e856:	9311      	str	r3, [sp, #68]	@ 0x44
 801e858:	4b17      	ldr	r3, [pc, #92]	@ (801e8b8 <lfs_format_+0xf0>)
 801e85a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e85c:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801e860:	2303      	movs	r3, #3
 801e862:	aa0e      	add	r2, sp, #56	@ 0x38
 801e864:	a906      	add	r1, sp, #24
 801e866:	4620      	mov	r0, r4
 801e868:	f7ff fcb2 	bl	801e1d0 <lfs_dir_commit>
        if (err) {
 801e86c:	4606      	mov	r6, r0
 801e86e:	2800      	cmp	r0, #0
 801e870:	d1ce      	bne.n	801e810 <lfs_format_+0x48>
        root.erased = false;
 801e872:	2200      	movs	r2, #0
 801e874:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801e878:	4613      	mov	r3, r2
 801e87a:	a906      	add	r1, sp, #24
 801e87c:	4620      	mov	r0, r4
 801e87e:	f7ff fca7 	bl	801e1d0 <lfs_dir_commit>
        if (err) {
 801e882:	4606      	mov	r6, r0
 801e884:	2800      	cmp	r0, #0
 801e886:	d1c3      	bne.n	801e810 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801e888:	2300      	movs	r3, #0
 801e88a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e88c:	2301      	movs	r3, #1
 801e88e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e890:	aa14      	add	r2, sp, #80	@ 0x50
 801e892:	a906      	add	r1, sp, #24
 801e894:	4620      	mov	r0, r4
 801e896:	f7fd fe6b 	bl	801c570 <lfs_dir_fetch>
 801e89a:	4606      	mov	r6, r0
        if (err) {
 801e89c:	e7b8      	b.n	801e810 <lfs_format_+0x48>
 801e89e:	bf00      	nop
 801e8a0:	08039aa8 	.word	0x08039aa8
 801e8a4:	08039e90 	.word	0x08039e90
 801e8a8:	08039104 	.word	0x08039104
 801e8ac:	40100000 	.word	0x40100000
 801e8b0:	0ff00008 	.word	0x0ff00008
 801e8b4:	08039ac0 	.word	0x08039ac0
 801e8b8:	20100018 	.word	0x20100018

0801e8bc <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801e8bc:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801e8be:	f7ff fdcd 	bl	801e45c <lfs_deinit>
}
 801e8c2:	bd08      	pop	{r3, pc}

0801e8c4 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c8:	b09b      	sub	sp, #108	@ 0x6c
 801e8ca:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801e8cc:	f7ff fde0 	bl	801e490 <lfs_init>
    if (err) {
 801e8d0:	9005      	str	r0, [sp, #20]
 801e8d2:	b9d8      	cbnz	r0, 801e90c <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801e8d4:	2220      	movs	r2, #32
 801e8d6:	2100      	movs	r1, #0
 801e8d8:	a80f      	add	r0, sp, #60	@ 0x3c
 801e8da:	f00e f881 	bl	802c9e0 <memset>
 801e8de:	2501      	movs	r5, #1
 801e8e0:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e8e2:	4aa1      	ldr	r2, [pc, #644]	@ (801eb68 <lfs_mount_+0x2a4>)
 801e8e4:	ab0d      	add	r3, sp, #52	@ 0x34
 801e8e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e8ea:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e8ee:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801e8f0:	e073      	b.n	801e9da <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801e8f2:	4b9e      	ldr	r3, [pc, #632]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e8f4:	f241 123d 	movw	r2, #4413	@ 0x113d
 801e8f8:	499d      	ldr	r1, [pc, #628]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e8fa:	489e      	ldr	r0, [pc, #632]	@ (801eb74 <lfs_mount_+0x2b0>)
 801e8fc:	f00b fb52 	bl	8029fa4 <printf>
            err = LFS_ERR_CORRUPT;
 801e900:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e904:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801e906:	4620      	mov	r0, r4
 801e908:	f7ff ffd8 	bl	801e8bc <lfs_unmount_>
}
 801e90c:	9805      	ldr	r0, [sp, #20]
 801e90e:	b01b      	add	sp, #108	@ 0x6c
 801e910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801e914:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801e916:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e918:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801e91a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801e91c:	2500      	movs	r5, #0
 801e91e:	e075      	b.n	801ea0c <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801e920:	4620      	mov	r0, r4
 801e922:	f7fc fb44 	bl	801afae <lfs_fs_disk_version_minor>
 801e926:	4b91      	ldr	r3, [pc, #580]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e928:	9303      	str	r3, [sp, #12]
 801e92a:	9002      	str	r0, [sp, #8]
 801e92c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e930:	b2bf      	uxth	r7, r7
 801e932:	9700      	str	r7, [sp, #0]
 801e934:	4643      	mov	r3, r8
 801e936:	f241 126b 	movw	r2, #4459	@ 0x116b
 801e93a:	498d      	ldr	r1, [pc, #564]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e93c:	488e      	ldr	r0, [pc, #568]	@ (801eb78 <lfs_mount_+0x2b4>)
 801e93e:	f00b fb31 	bl	8029fa4 <printf>
                err = LFS_ERR_INVAL;
 801e942:	f06f 0315 	mvn.w	r3, #21
 801e946:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e948:	e7dd      	b.n	801e906 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801e94a:	4b88      	ldr	r3, [pc, #544]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e94c:	9303      	str	r3, [sp, #12]
 801e94e:	9002      	str	r0, [sp, #8]
 801e950:	f8cd 9004 	str.w	r9, [sp, #4]
 801e954:	b2bf      	uxth	r7, r7
 801e956:	9700      	str	r7, [sp, #0]
 801e958:	4643      	mov	r3, r8
 801e95a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801e95e:	4984      	ldr	r1, [pc, #528]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e960:	4886      	ldr	r0, [pc, #536]	@ (801eb7c <lfs_mount_+0x2b8>)
 801e962:	f00b fb1f 	bl	8029fa4 <printf>
                needssuperblock = true;
 801e966:	2301      	movs	r3, #1
 801e968:	9304      	str	r3, [sp, #16]
 801e96a:	e08f      	b.n	801ea8c <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801e96c:	497f      	ldr	r1, [pc, #508]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e96e:	9101      	str	r1, [sp, #4]
 801e970:	9200      	str	r2, [sp, #0]
 801e972:	f241 1289 	movw	r2, #4489	@ 0x1189
 801e976:	497e      	ldr	r1, [pc, #504]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e978:	4881      	ldr	r0, [pc, #516]	@ (801eb80 <lfs_mount_+0x2bc>)
 801e97a:	f00b fb13 	bl	8029fa4 <printf>
                    err = LFS_ERR_INVAL;
 801e97e:	f06f 0315 	mvn.w	r3, #21
 801e982:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e984:	e7bf      	b.n	801e906 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801e986:	4979      	ldr	r1, [pc, #484]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e988:	9101      	str	r1, [sp, #4]
 801e98a:	9200      	str	r2, [sp, #0]
 801e98c:	f241 1294 	movw	r2, #4500	@ 0x1194
 801e990:	4977      	ldr	r1, [pc, #476]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e992:	487c      	ldr	r0, [pc, #496]	@ (801eb84 <lfs_mount_+0x2c0>)
 801e994:	f00b fb06 	bl	8029fa4 <printf>
                    err = LFS_ERR_INVAL;
 801e998:	f06f 0315 	mvn.w	r3, #21
 801e99c:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e99e:	e7b2      	b.n	801e906 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801e9a0:	4972      	ldr	r1, [pc, #456]	@ (801eb6c <lfs_mount_+0x2a8>)
 801e9a2:	9101      	str	r1, [sp, #4]
 801e9a4:	9200      	str	r2, [sp, #0]
 801e9a6:	f241 129f 	movw	r2, #4511	@ 0x119f
 801e9aa:	4971      	ldr	r1, [pc, #452]	@ (801eb70 <lfs_mount_+0x2ac>)
 801e9ac:	4876      	ldr	r0, [pc, #472]	@ (801eb88 <lfs_mount_+0x2c4>)
 801e9ae:	f00b faf9 	bl	8029fa4 <printf>
                    err = LFS_ERR_INVAL;
 801e9b2:	f06f 0315 	mvn.w	r3, #21
 801e9b6:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e9b8:	e7a5      	b.n	801e906 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801e9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9bc:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801e9be:	9b08      	ldr	r3, [sp, #32]
 801e9c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	f040 8096 	bne.w	801eaf4 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e9c8:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e9cc:	a90f      	add	r1, sp, #60	@ 0x3c
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	f7fc fdee 	bl	801b5b0 <lfs_dir_getgstate>
        if (err) {
 801e9d4:	2800      	cmp	r0, #0
 801e9d6:	f040 809e 	bne.w	801eb16 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e9da:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e9dc:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e9e0:	f000 809d 	beq.w	801eb1e <lfs_mount_+0x25a>
 801e9e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e9ea:	f000 8096 	beq.w	801eb1a <lfs_mount_+0x256>
 801e9ee:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801e9f0:	f013 0301 	ands.w	r3, r3, #1
 801e9f4:	f040 8095 	bne.w	801eb22 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801e9f8:	a90d      	add	r1, sp, #52	@ 0x34
 801e9fa:	a815      	add	r0, sp, #84	@ 0x54
 801e9fc:	f7fc fa60 	bl	801aec0 <lfs_pair_issync>
 801ea00:	9004      	str	r0, [sp, #16]
 801ea02:	2800      	cmp	r0, #0
 801ea04:	f47f af75 	bne.w	801e8f2 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801ea08:	42b5      	cmp	r5, r6
 801ea0a:	d083      	beq.n	801e914 <lfs_mount_+0x50>
        tortoise_i += 1;
 801ea0c:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ea0e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ea10:	4b5e      	ldr	r3, [pc, #376]	@ (801eb8c <lfs_mount_+0x2c8>)
 801ea12:	9318      	str	r3, [sp, #96]	@ 0x60
 801ea14:	2308      	movs	r3, #8
 801ea16:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801ea18:	ab17      	add	r3, sp, #92	@ 0x5c
 801ea1a:	9303      	str	r3, [sp, #12]
 801ea1c:	4b5c      	ldr	r3, [pc, #368]	@ (801eb90 <lfs_mount_+0x2cc>)
 801ea1e:	9302      	str	r3, [sp, #8]
 801ea20:	2300      	movs	r3, #0
 801ea22:	9301      	str	r3, [sp, #4]
 801ea24:	4b5b      	ldr	r3, [pc, #364]	@ (801eb94 <lfs_mount_+0x2d0>)
 801ea26:	9300      	str	r3, [sp, #0]
 801ea28:	4b5b      	ldr	r3, [pc, #364]	@ (801eb98 <lfs_mount_+0x2d4>)
 801ea2a:	aa15      	add	r2, sp, #84	@ 0x54
 801ea2c:	a90f      	add	r1, sp, #60	@ 0x3c
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f7fd fabe 	bl	801bfb0 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801ea34:	2800      	cmp	r0, #0
 801ea36:	db6c      	blt.n	801eb12 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801ea38:	2800      	cmp	r0, #0
 801ea3a:	d0c5      	beq.n	801e9c8 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ea3c:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801ea40:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801ea44:	d0c0      	beq.n	801e9c8 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801ea46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea48:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801ea4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea4c:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801ea4e:	ab07      	add	r3, sp, #28
 801ea50:	9300      	str	r3, [sp, #0]
 801ea52:	4b52      	ldr	r3, [pc, #328]	@ (801eb9c <lfs_mount_+0x2d8>)
 801ea54:	4a50      	ldr	r2, [pc, #320]	@ (801eb98 <lfs_mount_+0x2d4>)
 801ea56:	a90f      	add	r1, sp, #60	@ 0x3c
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f7fc fd9b 	bl	801b594 <lfs_dir_get>
            if (tag < 0) {
 801ea5e:	2800      	cmp	r0, #0
 801ea60:	db55      	blt.n	801eb0e <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801ea62:	9f07      	ldr	r7, [sp, #28]
 801ea64:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801ea68:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801ea6c:	4620      	mov	r0, r4
 801ea6e:	f7fc fa99 	bl	801afa4 <lfs_fs_disk_version_major>
 801ea72:	4681      	mov	r9, r0
 801ea74:	4540      	cmp	r0, r8
 801ea76:	f47f af53 	bne.w	801e920 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801ea7a:	4620      	mov	r0, r4
 801ea7c:	f7fc fa97 	bl	801afae <lfs_fs_disk_version_minor>
 801ea80:	4550      	cmp	r0, sl
 801ea82:	f4ff af4d 	bcc.w	801e920 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801ea86:	4550      	cmp	r0, sl
 801ea88:	f63f af5f 	bhi.w	801e94a <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801ea8c:	9904      	ldr	r1, [sp, #16]
 801ea8e:	4620      	mov	r0, r4
 801ea90:	f7fc fb2b 	bl	801b0ea <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801ea94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea96:	b123      	cbz	r3, 801eaa2 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801ea98:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801ea9a:	4293      	cmp	r3, r2
 801ea9c:	f63f af66 	bhi.w	801e96c <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801eaa0:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801eaa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eaa4:	b123      	cbz	r3, 801eab0 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801eaa6:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801eaa8:	4293      	cmp	r3, r2
 801eaaa:	f63f af6c 	bhi.w	801e986 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801eaae:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801eab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eab2:	b14b      	cbz	r3, 801eac8 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801eab4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eab6:	4293      	cmp	r3, r2
 801eab8:	f63f af72 	bhi.w	801e9a0 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801eabc:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801eabe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801eac0:	4293      	cmp	r3, r2
 801eac2:	bf28      	it	cs
 801eac4:	4613      	movcs	r3, r2
 801eac6:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801eac8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801eaca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801eacc:	2900      	cmp	r1, #0
 801eace:	f43f af74 	beq.w	801e9ba <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801ead2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ead4:	4299      	cmp	r1, r3
 801ead6:	f43f af70 	beq.w	801e9ba <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801eada:	4a24      	ldr	r2, [pc, #144]	@ (801eb6c <lfs_mount_+0x2a8>)
 801eadc:	9201      	str	r2, [sp, #4]
 801eade:	9100      	str	r1, [sp, #0]
 801eae0:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801eae4:	4922      	ldr	r1, [pc, #136]	@ (801eb70 <lfs_mount_+0x2ac>)
 801eae6:	482e      	ldr	r0, [pc, #184]	@ (801eba0 <lfs_mount_+0x2dc>)
 801eae8:	f00b fa5c 	bl	8029fa4 <printf>
                err = LFS_ERR_INVAL;
 801eaec:	f06f 0315 	mvn.w	r3, #21
 801eaf0:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801eaf2:	e708      	b.n	801e906 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801eaf4:	491d      	ldr	r1, [pc, #116]	@ (801eb6c <lfs_mount_+0x2a8>)
 801eaf6:	9101      	str	r1, [sp, #4]
 801eaf8:	9200      	str	r2, [sp, #0]
 801eafa:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801eafe:	491c      	ldr	r1, [pc, #112]	@ (801eb70 <lfs_mount_+0x2ac>)
 801eb00:	4828      	ldr	r0, [pc, #160]	@ (801eba4 <lfs_mount_+0x2e0>)
 801eb02:	f00b fa4f 	bl	8029fa4 <printf>
                err = LFS_ERR_INVAL;
 801eb06:	f06f 0315 	mvn.w	r3, #21
 801eb0a:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801eb0c:	e6fb      	b.n	801e906 <lfs_mount_+0x42>
                err = tag;
 801eb0e:	9005      	str	r0, [sp, #20]
 801eb10:	e6f9      	b.n	801e906 <lfs_mount_+0x42>
            err = tag;
 801eb12:	9005      	str	r0, [sp, #20]
 801eb14:	e6f7      	b.n	801e906 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801eb16:	9005      	str	r0, [sp, #20]
 801eb18:	e6f5      	b.n	801e906 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	e768      	b.n	801e9f0 <lfs_mount_+0x12c>
 801eb1e:	2301      	movs	r3, #1
 801eb20:	e766      	b.n	801e9f0 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801eb22:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801eb26:	9a05      	ldr	r2, [sp, #20]
 801eb28:	2a02      	cmp	r2, #2
 801eb2a:	dc05      	bgt.n	801eb38 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801eb2c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801eb30:	b909      	cbnz	r1, 801eb36 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801eb32:	3201      	adds	r2, #1
 801eb34:	e7f8      	b.n	801eb28 <lfs_mount_+0x264>
            return false;
 801eb36:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801eb38:	b3b3      	cbz	r3, 801eba8 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801eb3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb3c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801eb40:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801eb42:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801eb46:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801eb4a:	ca07      	ldmia	r2, {r0, r1, r2}
 801eb4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801eb50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801eb52:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801eb54:	fbb3 f1f2 	udiv	r1, r3, r2
 801eb58:	fb02 3311 	mls	r3, r2, r1, r3
 801eb5c:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801eb5e:	4620      	mov	r0, r4
 801eb60:	f7fc fa2d 	bl	801afbe <lfs_alloc_drop>
    return 0;
 801eb64:	e6d2      	b.n	801e90c <lfs_mount_+0x48>
 801eb66:	bf00      	nop
 801eb68:	08035d24 	.word	0x08035d24
 801eb6c:	08036c80 	.word	0x08036c80
 801eb70:	08039104 	.word	0x08039104
 801eb74:	080392c4 	.word	0x080392c4
 801eb78:	08039acc 	.word	0x08039acc
 801eb7c:	08039b04 	.word	0x08039b04
 801eb80:	08039b44 	.word	0x08039b44
 801eb84:	08039b78 	.word	0x08039b78
 801eb88:	08039bac 	.word	0x08039bac
 801eb8c:	08039ac0 	.word	0x08039ac0
 801eb90:	0801bd71 	.word	0x0801bd71
 801eb94:	0ff00008 	.word	0x0ff00008
 801eb98:	7ffffc00 	.word	0x7ffffc00
 801eb9c:	20100018 	.word	0x20100018
 801eba0:	08039be0 	.word	0x08039be0
 801eba4:	08039c14 	.word	0x08039c14
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801eba8:	4b06      	ldr	r3, [pc, #24]	@ (801ebc4 <lfs_mount_+0x300>)
 801ebaa:	9302      	str	r3, [sp, #8]
 801ebac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ebae:	9301      	str	r3, [sp, #4]
 801ebb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ebb2:	9300      	str	r3, [sp, #0]
 801ebb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ebb6:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801ebba:	4903      	ldr	r1, [pc, #12]	@ (801ebc8 <lfs_mount_+0x304>)
 801ebbc:	4803      	ldr	r0, [pc, #12]	@ (801ebcc <lfs_mount_+0x308>)
 801ebbe:	f00b f9f1 	bl	8029fa4 <printf>
 801ebc2:	e7ba      	b.n	801eb3a <lfs_mount_+0x276>
 801ebc4:	08036c80 	.word	0x08036c80
 801ebc8:	08039104 	.word	0x08039104
 801ebcc:	08039c44 	.word	0x08039c44

0801ebd0 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801ebd0:	b570      	push	{r4, r5, r6, lr}
 801ebd2:	4606      	mov	r6, r0
 801ebd4:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801ebd6:	f7ff fbd7 	bl	801e388 <lfs_file_sync_>
 801ebda:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801ebdc:	4621      	mov	r1, r4
 801ebde:	4630      	mov	r0, r6
 801ebe0:	f7fc f9cd 	bl	801af7e <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801ebe4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	b10b      	cbz	r3, 801ebee <lfs_file_close_+0x1e>
}
 801ebea:	4628      	mov	r0, r5
 801ebec:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801ebee:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801ebf0:	f7fb ff44 	bl	801aa7c <vPortFree>
    return err;
 801ebf4:	e7f9      	b.n	801ebea <lfs_file_close_+0x1a>
	...

0801ebf8 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebfc:	b08d      	sub	sp, #52	@ 0x34
 801ebfe:	4682      	mov	sl, r0
 801ec00:	4688      	mov	r8, r1
 801ec02:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801ec04:	6812      	ldr	r2, [r2, #0]
 801ec06:	9205      	str	r2, [sp, #20]
    if (id) {
 801ec08:	9306      	str	r3, [sp, #24]
 801ec0a:	b11b      	cbz	r3, 801ec14 <lfs_dir_find+0x1c>
 801ec0c:	461a      	mov	r2, r3
        *id = 0x3ff;
 801ec0e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ec12:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801ec14:	f8da 3020 	ldr.w	r3, [sl, #32]
 801ec18:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801ec1c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801ec20:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801ec24:	4e4d      	ldr	r6, [pc, #308]	@ (801ed5c <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801ec26:	4d4e      	ldr	r5, [pc, #312]	@ (801ed60 <lfs_dir_find+0x168>)
 801ec28:	4629      	mov	r1, r5
 801ec2a:	9f05      	ldr	r7, [sp, #20]
 801ec2c:	4638      	mov	r0, r7
 801ec2e:	f00d ff47 	bl	802cac0 <strspn>
 801ec32:	4604      	mov	r4, r0
 801ec34:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801ec38:	4629      	mov	r1, r5
 801ec3a:	4648      	mov	r0, r9
 801ec3c:	f00d fef4 	bl	802ca28 <strcspn>
 801ec40:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ec42:	2801      	cmp	r0, #1
 801ec44:	d00a      	beq.n	801ec5c <lfs_dir_find+0x64>
 801ec46:	2d02      	cmp	r5, #2
 801ec48:	d00c      	beq.n	801ec64 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801ec4a:	eb09 0305 	add.w	r3, r9, r5
 801ec4e:	9305      	str	r3, [sp, #20]
 801ec50:	469b      	mov	fp, r3
        int depth = 1;
 801ec52:	2701      	movs	r7, #1
 801ec54:	e013      	b.n	801ec7e <lfs_dir_find+0x86>
 801ec56:	46b2      	mov	sl, r6
 801ec58:	4606      	mov	r6, r0
 801ec5a:	e7e4      	b.n	801ec26 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ec5c:	5d3b      	ldrb	r3, [r7, r4]
 801ec5e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ec60:	d1f1      	bne.n	801ec46 <lfs_dir_find+0x4e>
 801ec62:	e006      	b.n	801ec72 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801ec64:	2202      	movs	r2, #2
 801ec66:	493f      	ldr	r1, [pc, #252]	@ (801ed64 <lfs_dir_find+0x16c>)
 801ec68:	4648      	mov	r0, r9
 801ec6a:	f00d fe25 	bl	802c8b8 <memcmp>
 801ec6e:	2800      	cmp	r0, #0
 801ec70:	d1eb      	bne.n	801ec4a <lfs_dir_find+0x52>
            name += namelen;
 801ec72:	eb09 0305 	add.w	r3, r9, r5
 801ec76:	9305      	str	r3, [sp, #20]
            goto nextname;
 801ec78:	e7d5      	b.n	801ec26 <lfs_dir_find+0x2e>
                depth += 1;
 801ec7a:	3701      	adds	r7, #1
            suffix += sufflen;
 801ec7c:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801ec7e:	4c38      	ldr	r4, [pc, #224]	@ (801ed60 <lfs_dir_find+0x168>)
 801ec80:	4621      	mov	r1, r4
 801ec82:	4658      	mov	r0, fp
 801ec84:	f00d ff1c 	bl	802cac0 <strspn>
 801ec88:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801ec8a:	4621      	mov	r1, r4
 801ec8c:	4658      	mov	r0, fp
 801ec8e:	f00d fecb 	bl	802ca28 <strcspn>
            if (sufflen == 0) {
 801ec92:	4604      	mov	r4, r0
 801ec94:	b170      	cbz	r0, 801ecb4 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801ec96:	2802      	cmp	r0, #2
 801ec98:	d1ef      	bne.n	801ec7a <lfs_dir_find+0x82>
 801ec9a:	2202      	movs	r2, #2
 801ec9c:	4931      	ldr	r1, [pc, #196]	@ (801ed64 <lfs_dir_find+0x16c>)
 801ec9e:	4658      	mov	r0, fp
 801eca0:	f00d fe0a 	bl	802c8b8 <memcmp>
 801eca4:	2800      	cmp	r0, #0
 801eca6:	d1e8      	bne.n	801ec7a <lfs_dir_find+0x82>
                if (depth == 0) {
 801eca8:	3f01      	subs	r7, #1
 801ecaa:	d1e7      	bne.n	801ec7c <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801ecac:	eb0b 0304 	add.w	r3, fp, r4
 801ecb0:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801ecb2:	e7b8      	b.n	801ec26 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801ecb4:	f899 3000 	ldrb.w	r3, [r9]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	d04a      	beq.n	801ed52 <lfs_dir_find+0x15a>
        *path = name;
 801ecbc:	9b07      	ldr	r3, [sp, #28]
 801ecbe:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801ecc2:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ecc6:	2b02      	cmp	r3, #2
 801ecc8:	d13f      	bne.n	801ed4a <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801ecca:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801ecce:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ecd2:	429e      	cmp	r6, r3
 801ecd4:	d102      	bne.n	801ecdc <lfs_dir_find+0xe4>
 801ecd6:	464c      	mov	r4, r9
 801ecd8:	4656      	mov	r6, sl
 801ecda:	e029      	b.n	801ed30 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801ecdc:	02b6      	lsls	r6, r6, #10
 801ecde:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ece2:	9300      	str	r3, [sp, #0]
 801ece4:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801ece8:	f043 0308 	orr.w	r3, r3, #8
 801ecec:	4a1e      	ldr	r2, [pc, #120]	@ (801ed68 <lfs_dir_find+0x170>)
 801ecee:	4641      	mov	r1, r8
 801ecf0:	4650      	mov	r0, sl
 801ecf2:	f7fc fc4f 	bl	801b594 <lfs_dir_get>
            if (res < 0) {
 801ecf6:	1e06      	subs	r6, r0, #0
 801ecf8:	db2b      	blt.n	801ed52 <lfs_dir_find+0x15a>
 801ecfa:	464c      	mov	r4, r9
 801ecfc:	4656      	mov	r6, sl
 801ecfe:	e017      	b.n	801ed30 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed00:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ed02:	9609      	str	r6, [sp, #36]	@ 0x24
 801ed04:	940a      	str	r4, [sp, #40]	@ 0x28
 801ed06:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed08:	aa09      	add	r2, sp, #36	@ 0x24
 801ed0a:	9203      	str	r2, [sp, #12]
 801ed0c:	4a17      	ldr	r2, [pc, #92]	@ (801ed6c <lfs_dir_find+0x174>)
 801ed0e:	9202      	str	r2, [sp, #8]
 801ed10:	9301      	str	r3, [sp, #4]
 801ed12:	9500      	str	r5, [sp, #0]
 801ed14:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801ed18:	463a      	mov	r2, r7
 801ed1a:	4641      	mov	r1, r8
 801ed1c:	4630      	mov	r0, r6
 801ed1e:	f7fd f947 	bl	801bfb0 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801ed22:	2800      	cmp	r0, #0
 801ed24:	db14      	blt.n	801ed50 <lfs_dir_find+0x158>
            if (tag) {
 801ed26:	2800      	cmp	r0, #0
 801ed28:	d195      	bne.n	801ec56 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801ed2a:	f898 3017 	ldrb.w	r3, [r8, #23]
 801ed2e:	b14b      	cbz	r3, 801ed44 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed30:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801ed34:	212f      	movs	r1, #47	@ 0x2f
 801ed36:	4620      	mov	r0, r4
 801ed38:	f00d fe69 	bl	802ca0e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed3c:	2800      	cmp	r0, #0
 801ed3e:	d0df      	beq.n	801ed00 <lfs_dir_find+0x108>
 801ed40:	2300      	movs	r3, #0
 801ed42:	e7de      	b.n	801ed02 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801ed44:	f06f 0601 	mvn.w	r6, #1
 801ed48:	e003      	b.n	801ed52 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801ed4a:	f06f 0613 	mvn.w	r6, #19
 801ed4e:	e000      	b.n	801ed52 <lfs_dir_find+0x15a>
 801ed50:	4606      	mov	r6, r0
}
 801ed52:	4630      	mov	r0, r6
 801ed54:	b00d      	add	sp, #52	@ 0x34
 801ed56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed5a:	bf00      	nop
 801ed5c:	002ffc00 	.word	0x002ffc00
 801ed60:	0803a4bc 	.word	0x0803a4bc
 801ed64:	08039c7c 	.word	0x08039c7c
 801ed68:	700ffc00 	.word	0x700ffc00
 801ed6c:	0801bd71 	.word	0x0801bd71

0801ed70 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801ed70:	b570      	push	{r4, r5, r6, lr}
 801ed72:	b09a      	sub	sp, #104	@ 0x68
 801ed74:	4604      	mov	r4, r0
 801ed76:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801ed78:	f7ff fad2 	bl	801e320 <lfs_fs_forceconsistency>
    if (err) {
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	b110      	cbz	r0, 801ed86 <lfs_remove_+0x16>
}
 801ed80:	4618      	mov	r0, r3
 801ed82:	b01a      	add	sp, #104	@ 0x68
 801ed84:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801ed86:	2300      	movs	r3, #0
 801ed88:	aa03      	add	r2, sp, #12
 801ed8a:	a910      	add	r1, sp, #64	@ 0x40
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	f7ff ff33 	bl	801ebf8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ed92:	1e03      	subs	r3, r0, #0
 801ed94:	dbf4      	blt.n	801ed80 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801ed96:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ed9a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801ed9e:	4295      	cmp	r5, r2
 801eda0:	d031      	beq.n	801ee06 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801eda2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801eda4:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801eda6:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801edaa:	2e02      	cmp	r6, #2
 801edac:	d02e      	beq.n	801ee0c <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801edae:	02ad      	lsls	r5, r5, #10
 801edb0:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801edb4:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801edb8:	9518      	str	r5, [sp, #96]	@ 0x60
 801edba:	2300      	movs	r3, #0
 801edbc:	9319      	str	r3, [sp, #100]	@ 0x64
 801edbe:	2301      	movs	r3, #1
 801edc0:	aa18      	add	r2, sp, #96	@ 0x60
 801edc2:	a910      	add	r1, sp, #64	@ 0x40
 801edc4:	4620      	mov	r0, r4
 801edc6:	f7ff fa03 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801edca:	4603      	mov	r3, r0
 801edcc:	2800      	cmp	r0, #0
 801edce:	d142      	bne.n	801ee56 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801edd0:	9a06      	ldr	r2, [sp, #24]
 801edd2:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801edd4:	2e02      	cmp	r6, #2
 801edd6:	d1d3      	bne.n	801ed80 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801edd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801eddc:	4620      	mov	r0, r4
 801edde:	f7fc f9db 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801ede2:	4603      	mov	r3, r0
 801ede4:	2800      	cmp	r0, #0
 801ede6:	d1cb      	bne.n	801ed80 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801ede8:	aa10      	add	r2, sp, #64	@ 0x40
 801edea:	a908      	add	r1, sp, #32
 801edec:	4620      	mov	r0, r4
 801edee:	f7fe f8e5 	bl	801cfbc <lfs_fs_pred>
        if (err) {
 801edf2:	4603      	mov	r3, r0
 801edf4:	2800      	cmp	r0, #0
 801edf6:	d1c3      	bne.n	801ed80 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801edf8:	aa08      	add	r2, sp, #32
 801edfa:	a910      	add	r1, sp, #64	@ 0x40
 801edfc:	4620      	mov	r0, r4
 801edfe:	f7ff faa3 	bl	801e348 <lfs_dir_drop>
 801ee02:	4603      	mov	r3, r0
        if (err) {
 801ee04:	e7bc      	b.n	801ed80 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801ee06:	f06f 0315 	mvn.w	r3, #21
 801ee0a:	e7b9      	b.n	801ed80 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801ee0c:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801ee0e:	aa04      	add	r2, sp, #16
 801ee10:	9200      	str	r2, [sp, #0]
 801ee12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ee16:	f043 0308 	orr.w	r3, r3, #8
 801ee1a:	4a10      	ldr	r2, [pc, #64]	@ (801ee5c <lfs_remove_+0xec>)
 801ee1c:	a910      	add	r1, sp, #64	@ 0x40
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f7fc fbb8 	bl	801b594 <lfs_dir_get>
        if (res < 0) {
 801ee24:	1e03      	subs	r3, r0, #0
 801ee26:	dbab      	blt.n	801ed80 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801ee28:	aa04      	add	r2, sp, #16
 801ee2a:	a908      	add	r1, sp, #32
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	f7fd fb9f 	bl	801c570 <lfs_dir_fetch>
        if (err) {
 801ee32:	4603      	mov	r3, r0
 801ee34:	2800      	cmp	r0, #0
 801ee36:	d1a3      	bne.n	801ed80 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801ee38:	2101      	movs	r1, #1
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	f7fc f9ac 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801ee40:	4603      	mov	r3, r0
 801ee42:	2800      	cmp	r0, #0
 801ee44:	d19c      	bne.n	801ed80 <lfs_remove_+0x10>
        dir.type = 0;
 801ee46:	2300      	movs	r3, #0
 801ee48:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801ee4c:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801ee50:	ab06      	add	r3, sp, #24
 801ee52:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ee54:	e7ab      	b.n	801edae <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801ee56:	9a06      	ldr	r2, [sp, #24]
 801ee58:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801ee5a:	e791      	b.n	801ed80 <lfs_remove_+0x10>
 801ee5c:	700ffc00 	.word	0x700ffc00

0801ee60 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee62:	b087      	sub	sp, #28
 801ee64:	4607      	mov	r7, r0
 801ee66:	460d      	mov	r5, r1
 801ee68:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801ee6a:	f101 0608 	add.w	r6, r1, #8
 801ee6e:	2300      	movs	r3, #0
 801ee70:	aa03      	add	r2, sp, #12
 801ee72:	4631      	mov	r1, r6
 801ee74:	f7ff fec0 	bl	801ebf8 <lfs_dir_find>
    if (tag < 0) {
 801ee78:	1e04      	subs	r4, r0, #0
 801ee7a:	db14      	blt.n	801eea6 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801ee7c:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ee80:	2b02      	cmp	r3, #2
 801ee82:	d130      	bne.n	801eee6 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801ee84:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801ee88:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ee8c:	429c      	cmp	r4, r3
 801ee8e:	d10d      	bne.n	801eeac <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801ee90:	6a3b      	ldr	r3, [r7, #32]
 801ee92:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801ee94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee96:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801ee98:	aa04      	add	r2, sp, #16
 801ee9a:	4631      	mov	r1, r6
 801ee9c:	4638      	mov	r0, r7
 801ee9e:	f7fd fb67 	bl	801c570 <lfs_dir_fetch>
    if (err) {
 801eea2:	4604      	mov	r4, r0
 801eea4:	b188      	cbz	r0, 801eeca <lfs_dir_open_+0x6a>
}
 801eea6:	4620      	mov	r0, r4
 801eea8:	b007      	add	sp, #28
 801eeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801eeac:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801eeae:	ab04      	add	r3, sp, #16
 801eeb0:	9300      	str	r3, [sp, #0]
 801eeb2:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801eeb6:	f043 0308 	orr.w	r3, r3, #8
 801eeba:	4a0c      	ldr	r2, [pc, #48]	@ (801eeec <lfs_dir_open_+0x8c>)
 801eebc:	4631      	mov	r1, r6
 801eebe:	4638      	mov	r0, r7
 801eec0:	f7fc fb68 	bl	801b594 <lfs_dir_get>
        if (res < 0) {
 801eec4:	1e04      	subs	r4, r0, #0
 801eec6:	dae7      	bge.n	801ee98 <lfs_dir_open_+0x38>
 801eec8:	e7ed      	b.n	801eea6 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801eeca:	68ab      	ldr	r3, [r5, #8]
 801eecc:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801eece:	68eb      	ldr	r3, [r5, #12]
 801eed0:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801eed2:	2300      	movs	r3, #0
 801eed4:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801eed6:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801eed8:	2302      	movs	r3, #2
 801eeda:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801eedc:	4629      	mov	r1, r5
 801eede:	4638      	mov	r0, r7
 801eee0:	f7fc f858 	bl	801af94 <lfs_mlist_append>
    return 0;
 801eee4:	e7df      	b.n	801eea6 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801eee6:	f06f 0413 	mvn.w	r4, #19
 801eeea:	e7dc      	b.n	801eea6 <lfs_dir_open_+0x46>
 801eeec:	700ffc00 	.word	0x700ffc00

0801eef0 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eef4:	b0ad      	sub	sp, #180	@ 0xb4
 801eef6:	4604      	mov	r4, r0
 801eef8:	9103      	str	r1, [sp, #12]
 801eefa:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801eefc:	f7ff fa10 	bl	801e320 <lfs_fs_forceconsistency>
    if (err) {
 801ef00:	4606      	mov	r6, r0
 801ef02:	b118      	cbz	r0, 801ef0c <lfs_rename_+0x1c>
}
 801ef04:	4630      	mov	r0, r6
 801ef06:	b02d      	add	sp, #180	@ 0xb4
 801ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801ef0c:	2300      	movs	r3, #0
 801ef0e:	aa03      	add	r2, sp, #12
 801ef10:	a922      	add	r1, sp, #136	@ 0x88
 801ef12:	4620      	mov	r0, r4
 801ef14:	f7ff fe70 	bl	801ebf8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801ef18:	2800      	cmp	r0, #0
 801ef1a:	f2c0 809e 	blt.w	801f05a <lfs_rename_+0x16a>
 801ef1e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801ef20:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801ef24:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef28:	429d      	cmp	r5, r3
 801ef2a:	f000 8094 	beq.w	801f056 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801ef2e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801ef32:	aa02      	add	r2, sp, #8
 801ef34:	a91a      	add	r1, sp, #104	@ 0x68
 801ef36:	4620      	mov	r0, r4
 801ef38:	f7ff fe5e 	bl	801ebf8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ef3c:	f1b0 0900 	subs.w	r9, r0, #0
 801ef40:	f2c0 808d 	blt.w	801f05e <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801ef44:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ef48:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef4c:	429a      	cmp	r2, r3
 801ef4e:	f000 8086 	beq.w	801f05e <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ef52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ef54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ef56:	429a      	cmp	r2, r3
 801ef58:	d008      	beq.n	801ef6c <lfs_rename_+0x7c>
 801ef5a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801ef5c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801ef5e:	4281      	cmp	r1, r0
 801ef60:	d004      	beq.n	801ef6c <lfs_rename_+0x7c>
 801ef62:	4299      	cmp	r1, r3
 801ef64:	d002      	beq.n	801ef6c <lfs_rename_+0x7c>
 801ef66:	4290      	cmp	r0, r2
 801ef68:	d000      	beq.n	801ef6c <lfs_rename_+0x7c>
 801ef6a:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801ef6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ef6e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801ef70:	f119 0f02 	cmn.w	r9, #2
 801ef74:	f000 8085 	beq.w	801f082 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801ef78:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801ef7c:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801ef80:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801ef84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	f040 808a 	bne.w	801f0a2 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801ef8e:	b91e      	cbnz	r6, 801ef98 <lfs_rename_+0xa8>
 801ef90:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ef94:	42ab      	cmp	r3, r5
 801ef96:	d0b5      	beq.n	801ef04 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801ef98:	2a02      	cmp	r2, #2
 801ef9a:	f000 808a 	beq.w	801f0b2 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801ef9e:	46aa      	mov	sl, r5
    if (!samepair) {
 801efa0:	b126      	cbz	r6, 801efac <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801efa2:	aa22      	add	r2, sp, #136	@ 0x88
 801efa4:	4651      	mov	r1, sl
 801efa6:	4620      	mov	r0, r4
 801efa8:	f7fc f8a6 	bl	801b0f8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801efac:	f119 0f02 	cmn.w	r9, #2
 801efb0:	f000 80b4 	beq.w	801f11c <lfs_rename_+0x22c>
 801efb4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801efb8:	029b      	lsls	r3, r3, #10
 801efba:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801efbe:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801efc2:	9305      	str	r3, [sp, #20]
 801efc4:	2200      	movs	r2, #0
 801efc6:	9206      	str	r2, [sp, #24]
 801efc8:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801efcc:	02bf      	lsls	r7, r7, #10
 801efce:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801efd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efd6:	9307      	str	r3, [sp, #28]
 801efd8:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801efda:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801efde:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801efe2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801efe6:	4658      	mov	r0, fp
 801efe8:	f7f1 f95a 	bl	80102a0 <strlen>
 801efec:	ea48 0000 	orr.w	r0, r8, r0
 801eff0:	9009      	str	r0, [sp, #36]	@ 0x24
 801eff2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801eff6:	432f      	orrs	r7, r5
 801eff8:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801effc:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801f000:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f002:	ab22      	add	r3, sp, #136	@ 0x88
 801f004:	930c      	str	r3, [sp, #48]	@ 0x30
 801f006:	2e00      	cmp	r6, #0
 801f008:	f040 808a 	bne.w	801f120 <lfs_rename_+0x230>
 801f00c:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801f010:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801f014:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f018:	930d      	str	r3, [sp, #52]	@ 0x34
 801f01a:	2300      	movs	r3, #0
 801f01c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f01e:	2305      	movs	r3, #5
 801f020:	aa05      	add	r2, sp, #20
 801f022:	a91a      	add	r1, sp, #104	@ 0x68
 801f024:	4620      	mov	r0, r4
 801f026:	f7ff f8d3 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801f02a:	4607      	mov	r7, r0
 801f02c:	2800      	cmp	r0, #0
 801f02e:	d179      	bne.n	801f124 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f030:	b126      	cbz	r6, 801f03c <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801f032:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801f034:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f036:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801f03a:	d177      	bne.n	801f12c <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801f03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f03e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801f040:	f119 0f02 	cmn.w	r9, #2
 801f044:	f000 80a9 	beq.w	801f19a <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801f048:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f04c:	2802      	cmp	r0, #2
 801f04e:	f000 8088 	beq.w	801f162 <lfs_rename_+0x272>
    return 0;
 801f052:	463e      	mov	r6, r7
 801f054:	e756      	b.n	801ef04 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801f056:	f06f 0015 	mvn.w	r0, #21
 801f05a:	4606      	mov	r6, r0
 801f05c:	e752      	b.n	801ef04 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f05e:	f119 0f02 	cmn.w	r9, #2
 801f062:	d106      	bne.n	801f072 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801f064:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801f068:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f06c:	429a      	cmp	r2, r3
 801f06e:	f47f af70 	bne.w	801ef52 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801f072:	f1b9 0f00 	cmp.w	r9, #0
 801f076:	db02      	blt.n	801f07e <lfs_rename_+0x18e>
 801f078:	f06f 0615 	mvn.w	r6, #21
 801f07c:	e742      	b.n	801ef04 <lfs_rename_+0x14>
 801f07e:	464e      	mov	r6, r9
 801f080:	e740      	b.n	801ef04 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801f082:	9802      	ldr	r0, [sp, #8]
 801f084:	f7f1 f90c 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f088:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f08a:	4283      	cmp	r3, r0
 801f08c:	f0c0 8082 	bcc.w	801f194 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801f090:	2e00      	cmp	r6, #0
 801f092:	d141      	bne.n	801f118 <lfs_rename_+0x228>
 801f094:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f098:	42ab      	cmp	r3, r5
 801f09a:	d83b      	bhi.n	801f114 <lfs_rename_+0x224>
            newoldid += 1;
 801f09c:	f105 0a01 	add.w	sl, r5, #1
 801f0a0:	e77e      	b.n	801efa0 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801f0a2:	2a02      	cmp	r2, #2
 801f0a4:	d002      	beq.n	801f0ac <lfs_rename_+0x1bc>
 801f0a6:	f06f 0613 	mvn.w	r6, #19
 801f0aa:	e72b      	b.n	801ef04 <lfs_rename_+0x14>
 801f0ac:	f06f 0614 	mvn.w	r6, #20
 801f0b0:	e728      	b.n	801ef04 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801f0b2:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f0b6:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f0b8:	aa05      	add	r2, sp, #20
 801f0ba:	9200      	str	r2, [sp, #0]
 801f0bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f0c0:	f043 0308 	orr.w	r3, r3, #8
 801f0c4:	4a36      	ldr	r2, [pc, #216]	@ (801f1a0 <lfs_rename_+0x2b0>)
 801f0c6:	a91a      	add	r1, sp, #104	@ 0x68
 801f0c8:	4620      	mov	r0, r4
 801f0ca:	f7fc fa63 	bl	801b594 <lfs_dir_get>
        if (res < 0) {
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	db1a      	blt.n	801f108 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801f0d2:	aa05      	add	r2, sp, #20
 801f0d4:	a911      	add	r1, sp, #68	@ 0x44
 801f0d6:	4620      	mov	r0, r4
 801f0d8:	f7fd fa4a 	bl	801c570 <lfs_dir_fetch>
        if (err) {
 801f0dc:	b9b0      	cbnz	r0, 801f10c <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801f0de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f0e0:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801f0e4:	d002      	beq.n	801f0ec <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801f0e6:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801f0ea:	e70b      	b.n	801ef04 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801f0ec:	2101      	movs	r1, #1
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f7fc f852 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801f0f4:	b960      	cbnz	r0, 801f110 <lfs_rename_+0x220>
        prevdir.type = 0;
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801f0fc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801f100:	ab0f      	add	r3, sp, #60	@ 0x3c
 801f102:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f104:	46aa      	mov	sl, r5
 801f106:	e74b      	b.n	801efa0 <lfs_rename_+0xb0>
            return (int)res;
 801f108:	4606      	mov	r6, r0
 801f10a:	e6fb      	b.n	801ef04 <lfs_rename_+0x14>
            return err;
 801f10c:	4606      	mov	r6, r0
 801f10e:	e6f9      	b.n	801ef04 <lfs_rename_+0x14>
            return err;
 801f110:	4606      	mov	r6, r0
 801f112:	e6f7      	b.n	801ef04 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f114:	46aa      	mov	sl, r5
 801f116:	e743      	b.n	801efa0 <lfs_rename_+0xb0>
 801f118:	46aa      	mov	sl, r5
 801f11a:	e742      	b.n	801efa2 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f11c:	2300      	movs	r3, #0
 801f11e:	e750      	b.n	801efc2 <lfs_rename_+0xd2>
 801f120:	2300      	movs	r3, #0
 801f122:	e779      	b.n	801f018 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801f124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f126:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801f128:	4606      	mov	r6, r0
 801f12a:	e6eb      	b.n	801ef04 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f12c:	2200      	movs	r2, #0
 801f12e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f132:	4620      	mov	r0, r4
 801f134:	f7fb ffe0 	bl	801b0f8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801f138:	02ab      	lsls	r3, r5, #10
 801f13a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f13e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f142:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f144:	2300      	movs	r3, #0
 801f146:	932b      	str	r3, [sp, #172]	@ 0xac
 801f148:	2301      	movs	r3, #1
 801f14a:	aa2a      	add	r2, sp, #168	@ 0xa8
 801f14c:	a922      	add	r1, sp, #136	@ 0x88
 801f14e:	4620      	mov	r0, r4
 801f150:	f7ff f83e 	bl	801e1d0 <lfs_dir_commit>
        if (err) {
 801f154:	4606      	mov	r6, r0
 801f156:	2800      	cmp	r0, #0
 801f158:	f43f af70 	beq.w	801f03c <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801f15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f15e:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f160:	e6d0      	b.n	801ef04 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f162:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f166:	4620      	mov	r0, r4
 801f168:	f7fc f816 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801f16c:	4606      	mov	r6, r0
 801f16e:	2800      	cmp	r0, #0
 801f170:	f47f aec8 	bne.w	801ef04 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f174:	aa1a      	add	r2, sp, #104	@ 0x68
 801f176:	a911      	add	r1, sp, #68	@ 0x44
 801f178:	4620      	mov	r0, r4
 801f17a:	f7fd ff1f 	bl	801cfbc <lfs_fs_pred>
        if (err) {
 801f17e:	4606      	mov	r6, r0
 801f180:	2800      	cmp	r0, #0
 801f182:	f47f aebf 	bne.w	801ef04 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f186:	aa11      	add	r2, sp, #68	@ 0x44
 801f188:	a91a      	add	r1, sp, #104	@ 0x68
 801f18a:	4620      	mov	r0, r4
 801f18c:	f7ff f8dc 	bl	801e348 <lfs_dir_drop>
 801f190:	4606      	mov	r6, r0
        if (err) {
 801f192:	e6b7      	b.n	801ef04 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f194:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f198:	e6b4      	b.n	801ef04 <lfs_rename_+0x14>
    return 0;
 801f19a:	463e      	mov	r6, r7
 801f19c:	e6b2      	b.n	801ef04 <lfs_rename_+0x14>
 801f19e:	bf00      	nop
 801f1a0:	700ffc00 	.word	0x700ffc00

0801f1a4 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f1a8:	b08b      	sub	sp, #44	@ 0x2c
 801f1aa:	4607      	mov	r7, r0
 801f1ac:	460c      	mov	r4, r1
 801f1ae:	9203      	str	r2, [sp, #12]
 801f1b0:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f1b2:	f013 0f02 	tst.w	r3, #2
 801f1b6:	d005      	beq.n	801f1c4 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f1b8:	f7ff f8b2 	bl	801e320 <lfs_fs_forceconsistency>
        if (err) {
 801f1bc:	4606      	mov	r6, r0
 801f1be:	2800      	cmp	r0, #0
 801f1c0:	f040 8109 	bne.w	801f3d6 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f1c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f1c6:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f1c8:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f1ca:	2300      	movs	r3, #0
 801f1cc:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f1ce:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f1d0:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f1d2:	f104 0808 	add.w	r8, r4, #8
 801f1d6:	1d23      	adds	r3, r4, #4
 801f1d8:	aa03      	add	r2, sp, #12
 801f1da:	4641      	mov	r1, r8
 801f1dc:	4638      	mov	r0, r7
 801f1de:	f7ff fd0b 	bl	801ebf8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f1e2:	1e06      	subs	r6, r0, #0
 801f1e4:	da09      	bge.n	801f1fa <lfs_file_opencfg_+0x56>
 801f1e6:	f116 0f02 	cmn.w	r6, #2
 801f1ea:	f040 80ec 	bne.w	801f3c6 <lfs_file_opencfg_+0x222>
 801f1ee:	88a2      	ldrh	r2, [r4, #4]
 801f1f0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f1f4:	429a      	cmp	r2, r3
 801f1f6:	f000 80e6 	beq.w	801f3c6 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f1fa:	2301      	movs	r3, #1
 801f1fc:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f1fe:	4621      	mov	r1, r4
 801f200:	4638      	mov	r0, r7
 801f202:	f7fb fec7 	bl	801af94 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f206:	f116 0f02 	cmn.w	r6, #2
 801f20a:	d019      	beq.n	801f240 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f20c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f210:	f040 80d7 	bne.w	801f3c2 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f214:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f218:	2e01      	cmp	r6, #1
 801f21a:	f040 80e0 	bne.w	801f3de <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f21e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f222:	d042      	beq.n	801f2aa <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f224:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f228:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f22c:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f230:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f234:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f23a:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f23c:	2500      	movs	r5, #0
 801f23e:	e064      	b.n	801f30a <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f240:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f244:	f000 80bf 	beq.w	801f3c6 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f248:	9d03      	ldr	r5, [sp, #12]
 801f24a:	4628      	mov	r0, r5
 801f24c:	f7f1 f828 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f252:	4283      	cmp	r3, r0
 801f254:	d202      	bcs.n	801f25c <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f256:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f25a:	e0b4      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f25c:	88a3      	ldrh	r3, [r4, #4]
 801f25e:	029b      	lsls	r3, r3, #10
 801f260:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f264:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f268:	9204      	str	r2, [sp, #16]
 801f26a:	2200      	movs	r2, #0
 801f26c:	9205      	str	r2, [sp, #20]
 801f26e:	4318      	orrs	r0, r3
 801f270:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f274:	9006      	str	r0, [sp, #24]
 801f276:	9507      	str	r5, [sp, #28]
 801f278:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f27c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f280:	9308      	str	r3, [sp, #32]
 801f282:	9209      	str	r2, [sp, #36]	@ 0x24
 801f284:	2303      	movs	r3, #3
 801f286:	aa04      	add	r2, sp, #16
 801f288:	4641      	mov	r1, r8
 801f28a:	4638      	mov	r0, r7
 801f28c:	f7fe ffa0 	bl	801e1d0 <lfs_dir_commit>
 801f290:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f292:	f110 0f1c 	cmn.w	r0, #28
 801f296:	d005      	beq.n	801f2a4 <lfs_file_opencfg_+0x100>
        if (err) {
 801f298:	2800      	cmp	r0, #0
 801f29a:	f040 8094 	bne.w	801f3c6 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f29e:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801f3f4 <lfs_file_opencfg_+0x250>
 801f2a2:	e7cb      	b.n	801f23c <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f2a4:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f2a8:	e08d      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f2aa:	88a3      	ldrh	r3, [r4, #4]
 801f2ac:	029b      	lsls	r3, r3, #10
 801f2ae:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f2b2:	9200      	str	r2, [sp, #0]
 801f2b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f2b8:	f043 0308 	orr.w	r3, r3, #8
 801f2bc:	4a4b      	ldr	r2, [pc, #300]	@ (801f3ec <lfs_file_opencfg_+0x248>)
 801f2be:	4641      	mov	r1, r8
 801f2c0:	4638      	mov	r0, r7
 801f2c2:	f7fc f967 	bl	801b594 <lfs_dir_get>
        if (tag < 0) {
 801f2c6:	f1b0 0900 	subs.w	r9, r0, #0
 801f2ca:	dab7      	bge.n	801f23c <lfs_file_opencfg_+0x98>
            err = tag;
 801f2cc:	464e      	mov	r6, r9
 801f2ce:	e07a      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f2d0:	685b      	ldr	r3, [r3, #4]
 801f2d2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f2d6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f2da:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f2de:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f2e2:	88a3      	ldrh	r3, [r4, #4]
 801f2e4:	029b      	lsls	r3, r3, #10
 801f2e6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f2ea:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f2ec:	6849      	ldr	r1, [r1, #4]
 801f2ee:	9100      	str	r1, [sp, #0]
 801f2f0:	4313      	orrs	r3, r2
 801f2f2:	4a3f      	ldr	r2, [pc, #252]	@ (801f3f0 <lfs_file_opencfg_+0x24c>)
 801f2f4:	4641      	mov	r1, r8
 801f2f6:	4638      	mov	r0, r7
 801f2f8:	f7fc f94c 	bl	801b594 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801f2fc:	1e06      	subs	r6, r0, #0
 801f2fe:	da0c      	bge.n	801f31a <lfs_file_opencfg_+0x176>
 801f300:	f116 0f02 	cmn.w	r6, #2
 801f304:	d009      	beq.n	801f31a <lfs_file_opencfg_+0x176>
 801f306:	e05e      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f308:	3501      	adds	r5, #1
 801f30a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f30c:	689a      	ldr	r2, [r3, #8]
 801f30e:	42aa      	cmp	r2, r5
 801f310:	d915      	bls.n	801f33e <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801f312:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f314:	f012 0f01 	tst.w	r2, #1
 801f318:	d1da      	bne.n	801f2d0 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f31a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f31c:	f013 0f02 	tst.w	r3, #2
 801f320:	d0f2      	beq.n	801f308 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801f322:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f324:	6852      	ldr	r2, [r2, #4]
 801f326:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f32a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f32e:	6891      	ldr	r1, [r2, #8]
 801f330:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f332:	4291      	cmp	r1, r2
 801f334:	d856      	bhi.n	801f3e4 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801f336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f33a:	6323      	str	r3, [r4, #48]	@ 0x30
 801f33c:	e7e4      	b.n	801f308 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	b16b      	cbz	r3, 801f35e <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801f342:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801f344:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801f348:	4638      	mov	r0, r7
 801f34a:	f7fb ff55 	bl	801b1f8 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801f34e:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f352:	f240 2301 	movw	r3, #513	@ 0x201
 801f356:	429a      	cmp	r2, r3
 801f358:	d00b      	beq.n	801f372 <lfs_file_opencfg_+0x1ce>
    return 0;
 801f35a:	2600      	movs	r6, #0
 801f35c:	e03b      	b.n	801f3d6 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f35e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801f360:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f362:	f7fb fb09 	bl	801a978 <pvPortMalloc>
 801f366:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801f368:	2800      	cmp	r0, #0
 801f36a:	d1eb      	bne.n	801f344 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801f36c:	f06f 060b 	mvn.w	r6, #11
 801f370:	e029      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801f372:	f06f 0101 	mvn.w	r1, #1
 801f376:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801f378:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801f37c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801f37e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f384:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801f386:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801f388:	2300      	movs	r3, #0
 801f38a:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801f38c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f390:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801f392:	b90a      	cbnz	r2, 801f398 <lfs_file_opencfg_+0x1f4>
    return 0;
 801f394:	2600      	movs	r6, #0
 801f396:	e01e      	b.n	801f3d6 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801f398:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801f39a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801f39e:	4293      	cmp	r3, r2
 801f3a0:	bf28      	it	cs
 801f3a2:	4613      	movcs	r3, r2
 801f3a4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801f3a8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f3aa:	9200      	str	r2, [sp, #0]
 801f3ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f3b0:	4a0e      	ldr	r2, [pc, #56]	@ (801f3ec <lfs_file_opencfg_+0x248>)
 801f3b2:	4641      	mov	r1, r8
 801f3b4:	4638      	mov	r0, r7
 801f3b6:	f7fc f8ed 	bl	801b594 <lfs_dir_get>
            if (res < 0) {
 801f3ba:	1e06      	subs	r6, r0, #0
 801f3bc:	db03      	blt.n	801f3c6 <lfs_file_opencfg_+0x222>
    return 0;
 801f3be:	2600      	movs	r6, #0
 801f3c0:	e009      	b.n	801f3d6 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801f3c2:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801f3c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f3c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f3cc:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801f3ce:	4621      	mov	r1, r4
 801f3d0:	4638      	mov	r0, r7
 801f3d2:	f7ff fbfd 	bl	801ebd0 <lfs_file_close_>
}
 801f3d6:	4630      	mov	r0, r6
 801f3d8:	b00b      	add	sp, #44	@ 0x2c
 801f3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801f3de:	f06f 0614 	mvn.w	r6, #20
 801f3e2:	e7f0      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801f3e4:	f06f 061b 	mvn.w	r6, #27
 801f3e8:	e7ed      	b.n	801f3c6 <lfs_file_opencfg_+0x222>
 801f3ea:	bf00      	nop
 801f3ec:	700ffc00 	.word	0x700ffc00
 801f3f0:	7ffffc00 	.word	0x7ffffc00
 801f3f4:	20100000 	.word	0x20100000

0801f3f8 <lfs_file_open_>:
        const char *path, int flags) {
 801f3f8:	b510      	push	{r4, lr}
 801f3fa:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801f3fc:	4c02      	ldr	r4, [pc, #8]	@ (801f408 <lfs_file_open_+0x10>)
 801f3fe:	9400      	str	r4, [sp, #0]
 801f400:	f7ff fed0 	bl	801f1a4 <lfs_file_opencfg_>
}
 801f404:	b002      	add	sp, #8
 801f406:	bd10      	pop	{r4, pc}
 801f408:	08039da8 	.word	0x08039da8

0801f40c <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801f40c:	b530      	push	{r4, r5, lr}
 801f40e:	b0ab      	sub	sp, #172	@ 0xac
 801f410:	4604      	mov	r4, r0
 801f412:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801f414:	f7fe ff84 	bl	801e320 <lfs_fs_forceconsistency>
    if (err) {
 801f418:	4603      	mov	r3, r0
 801f41a:	b110      	cbz	r0, 801f422 <lfs_mkdir_+0x16>
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	b02b      	add	sp, #172	@ 0xac
 801f420:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801f422:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f424:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801f426:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801f42a:	aa01      	add	r2, sp, #4
 801f42c:	a91e      	add	r1, sp, #120	@ 0x78
 801f42e:	4620      	mov	r0, r4
 801f430:	f7ff fbe2 	bl	801ebf8 <lfs_dir_find>
 801f434:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801f436:	f110 0f02 	cmn.w	r0, #2
 801f43a:	d12f      	bne.n	801f49c <lfs_mkdir_+0x90>
 801f43c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801f440:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f444:	4291      	cmp	r1, r2
 801f446:	d029      	beq.n	801f49c <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801f448:	9801      	ldr	r0, [sp, #4]
 801f44a:	f7f0 ff29 	bl	80102a0 <strlen>
 801f44e:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801f450:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f452:	4283      	cmp	r3, r0
 801f454:	f0c0 8089 	bcc.w	801f56a <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801f458:	4620      	mov	r0, r4
 801f45a:	f7fb fdad 	bl	801afb8 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801f45e:	a913      	add	r1, sp, #76	@ 0x4c
 801f460:	4620      	mov	r0, r4
 801f462:	f7fd f9f3 	bl	801c84c <lfs_dir_alloc>
    if (err) {
 801f466:	4603      	mov	r3, r0
 801f468:	2800      	cmp	r0, #0
 801f46a:	d1d7      	bne.n	801f41c <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801f46c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801f470:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801f474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f47c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f480:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801f484:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801f488:	b16b      	cbz	r3, 801f4a6 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801f48a:	aa11      	add	r2, sp, #68	@ 0x44
 801f48c:	a90b      	add	r1, sp, #44	@ 0x2c
 801f48e:	4620      	mov	r0, r4
 801f490:	f7fd f86e 	bl	801c570 <lfs_dir_fetch>
        if (err) {
 801f494:	4603      	mov	r3, r0
 801f496:	2800      	cmp	r0, #0
 801f498:	d0f4      	beq.n	801f484 <lfs_mkdir_+0x78>
 801f49a:	e7bf      	b.n	801f41c <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	dbbd      	blt.n	801f41c <lfs_mkdir_+0x10>
 801f4a0:	f06f 0310 	mvn.w	r3, #16
 801f4a4:	e7ba      	b.n	801f41c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801f4a6:	4b32      	ldr	r3, [pc, #200]	@ (801f570 <lfs_mkdir_+0x164>)
 801f4a8:	9326      	str	r3, [sp, #152]	@ 0x98
 801f4aa:	ab11      	add	r3, sp, #68	@ 0x44
 801f4ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f4ae:	2301      	movs	r3, #1
 801f4b0:	aa26      	add	r2, sp, #152	@ 0x98
 801f4b2:	a913      	add	r1, sp, #76	@ 0x4c
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	f7fe fe8b 	bl	801e1d0 <lfs_dir_commit>
    if (err) {
 801f4ba:	4603      	mov	r3, r0
 801f4bc:	2800      	cmp	r0, #0
 801f4be:	d1ad      	bne.n	801f41c <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801f4c0:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f4c4:	bb33      	cbnz	r3, 801f514 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f4c6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801f4ca:	029b      	lsls	r3, r3, #10
 801f4cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f4d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f4d4:	9203      	str	r2, [sp, #12]
 801f4d6:	2200      	movs	r2, #0
 801f4d8:	9204      	str	r2, [sp, #16]
 801f4da:	431d      	orrs	r5, r3
 801f4dc:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f4e0:	9505      	str	r5, [sp, #20]
 801f4e2:	9a01      	ldr	r2, [sp, #4]
 801f4e4:	9206      	str	r2, [sp, #24]
 801f4e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f4ea:	f043 0308 	orr.w	r3, r3, #8
 801f4ee:	9307      	str	r3, [sp, #28]
 801f4f0:	ab13      	add	r3, sp, #76	@ 0x4c
 801f4f2:	9308      	str	r3, [sp, #32]
 801f4f4:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d134      	bne.n	801f566 <lfs_mkdir_+0x15a>
 801f4fc:	4b1c      	ldr	r3, [pc, #112]	@ (801f570 <lfs_mkdir_+0x164>)
 801f4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801f500:	ab13      	add	r3, sp, #76	@ 0x4c
 801f502:	930a      	str	r3, [sp, #40]	@ 0x28
 801f504:	2304      	movs	r3, #4
 801f506:	aa03      	add	r2, sp, #12
 801f508:	a91e      	add	r1, sp, #120	@ 0x78
 801f50a:	4620      	mov	r0, r4
 801f50c:	f7fe fe60 	bl	801e1d0 <lfs_dir_commit>
 801f510:	4603      	mov	r3, r0
    if (err) {
 801f512:	e783      	b.n	801f41c <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f514:	2101      	movs	r1, #1
 801f516:	4620      	mov	r0, r4
 801f518:	f7fb fe3e 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801f51c:	4603      	mov	r3, r0
 801f51e:	2800      	cmp	r0, #0
 801f520:	f47f af7c 	bne.w	801f41c <lfs_mkdir_+0x10>
        cwd.type = 0;
 801f524:	2300      	movs	r3, #0
 801f526:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801f52a:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801f52e:	ab1c      	add	r3, sp, #112	@ 0x70
 801f530:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801f532:	4b0f      	ldr	r3, [pc, #60]	@ (801f570 <lfs_mkdir_+0x164>)
 801f534:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f536:	ab13      	add	r3, sp, #76	@ 0x4c
 801f538:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f53a:	2301      	movs	r3, #1
 801f53c:	aa28      	add	r2, sp, #160	@ 0xa0
 801f53e:	a90b      	add	r1, sp, #44	@ 0x2c
 801f540:	4620      	mov	r0, r4
 801f542:	f7fe fe45 	bl	801e1d0 <lfs_dir_commit>
        if (err) {
 801f546:	4603      	mov	r3, r0
 801f548:	b110      	cbz	r0, 801f550 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801f54a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f54c:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801f54e:	e765      	b.n	801f41c <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801f550:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f552:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801f554:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f558:	4620      	mov	r0, r4
 801f55a:	f7fb fe1d 	bl	801b198 <lfs_fs_preporphans>
        if (err) {
 801f55e:	4603      	mov	r3, r0
 801f560:	2800      	cmp	r0, #0
 801f562:	d0b0      	beq.n	801f4c6 <lfs_mkdir_+0xba>
 801f564:	e75a      	b.n	801f41c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f566:	2300      	movs	r3, #0
 801f568:	e7c9      	b.n	801f4fe <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801f56a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801f56e:	e755      	b.n	801f41c <lfs_mkdir_+0x10>
 801f570:	600ffc08 	.word	0x600ffc08

0801f574 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801f574:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f576:	b085      	sub	sp, #20
 801f578:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801f57a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f57e:	429a      	cmp	r2, r3
 801f580:	d02b      	beq.n	801f5da <lfs_dir_getinfo+0x66>
 801f582:	4604      	mov	r4, r0
 801f584:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f586:	0297      	lsls	r7, r2, #10
 801f588:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801f58a:	3301      	adds	r3, #1
 801f58c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f590:	9100      	str	r1, [sp, #0]
 801f592:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801f596:	4a19      	ldr	r2, [pc, #100]	@ (801f5fc <lfs_dir_getinfo+0x88>)
 801f598:	4631      	mov	r1, r6
 801f59a:	f7fb fffb 	bl	801b594 <lfs_dir_get>
    if (tag < 0) {
 801f59e:	2800      	cmp	r0, #0
 801f5a0:	db21      	blt.n	801f5e6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f5a2:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801f5a6:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f5a8:	ab02      	add	r3, sp, #8
 801f5aa:	9300      	str	r3, [sp, #0]
 801f5ac:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801f5b0:	f043 0308 	orr.w	r3, r3, #8
 801f5b4:	4a12      	ldr	r2, [pc, #72]	@ (801f600 <lfs_dir_getinfo+0x8c>)
 801f5b6:	4631      	mov	r1, r6
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f7fb ffeb 	bl	801b594 <lfs_dir_get>
    if (tag < 0) {
 801f5be:	2800      	cmp	r0, #0
 801f5c0:	db11      	blt.n	801f5e6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f5c2:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f5c6:	f240 2202 	movw	r2, #514	@ 0x202
 801f5ca:	4293      	cmp	r3, r2
 801f5cc:	d00d      	beq.n	801f5ea <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f5ce:	f240 2201 	movw	r2, #513	@ 0x201
 801f5d2:	4293      	cmp	r3, r2
 801f5d4:	d00d      	beq.n	801f5f2 <lfs_dir_getinfo+0x7e>
    return 0;
 801f5d6:	2000      	movs	r0, #0
 801f5d8:	e005      	b.n	801f5e6 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801f5da:	4b0a      	ldr	r3, [pc, #40]	@ (801f604 <lfs_dir_getinfo+0x90>)
 801f5dc:	881b      	ldrh	r3, [r3, #0]
 801f5de:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801f5e0:	2302      	movs	r3, #2
 801f5e2:	702b      	strb	r3, [r5, #0]
        return 0;
 801f5e4:	2000      	movs	r0, #0
}
 801f5e6:	b005      	add	sp, #20
 801f5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801f5ea:	9b03      	ldr	r3, [sp, #12]
 801f5ec:	606b      	str	r3, [r5, #4]
    return 0;
 801f5ee:	2000      	movs	r0, #0
 801f5f0:	e7f9      	b.n	801f5e6 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801f5f2:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801f5f6:	6068      	str	r0, [r5, #4]
    return 0;
 801f5f8:	2000      	movs	r0, #0
 801f5fa:	e7f4      	b.n	801f5e6 <lfs_dir_getinfo+0x72>
 801f5fc:	780ffc00 	.word	0x780ffc00
 801f600:	700ffc00 	.word	0x700ffc00
 801f604:	0803a4bc 	.word	0x0803a4bc

0801f608 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f608:	b530      	push	{r4, r5, lr}
 801f60a:	b08b      	sub	sp, #44	@ 0x2c
 801f60c:	4604      	mov	r4, r0
 801f60e:	9101      	str	r1, [sp, #4]
 801f610:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f612:	2300      	movs	r3, #0
 801f614:	aa01      	add	r2, sp, #4
 801f616:	a902      	add	r1, sp, #8
 801f618:	f7ff faee 	bl	801ebf8 <lfs_dir_find>
    if (tag < 0) {
 801f61c:	2800      	cmp	r0, #0
 801f61e:	db06      	blt.n	801f62e <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801f620:	462b      	mov	r3, r5
 801f622:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801f626:	a902      	add	r1, sp, #8
 801f628:	4620      	mov	r0, r4
 801f62a:	f7ff ffa3 	bl	801f574 <lfs_dir_getinfo>
}
 801f62e:	b00b      	add	sp, #44	@ 0x2c
 801f630:	bd30      	pop	{r4, r5, pc}
	...

0801f634 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f634:	b570      	push	{r4, r5, r6, lr}
 801f636:	4605      	mov	r5, r0
 801f638:	460c      	mov	r4, r1
 801f63a:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801f63c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801f640:	2100      	movs	r1, #0
 801f642:	4630      	mov	r0, r6
 801f644:	f00d f9cc 	bl	802c9e0 <memset>
    if (dir->pos == 0) {
 801f648:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f64a:	b183      	cbz	r3, 801f66e <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801f64c:	2b01      	cmp	r3, #1
 801f64e:	d11f      	bne.n	801f690 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801f650:	4633      	mov	r3, r6
 801f652:	2202      	movs	r2, #2
 801f654:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801f658:	4a22      	ldr	r2, [pc, #136]	@ (801f6e4 <lfs_dir_read_+0xb0>)
 801f65a:	8811      	ldrh	r1, [r2, #0]
 801f65c:	7892      	ldrb	r2, [r2, #2]
 801f65e:	8131      	strh	r1, [r6, #8]
 801f660:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801f662:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f664:	3301      	adds	r3, #1
 801f666:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f668:	f04f 0c01 	mov.w	ip, #1
 801f66c:	e034      	b.n	801f6d8 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801f66e:	2302      	movs	r3, #2
 801f670:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801f672:	4b1d      	ldr	r3, [pc, #116]	@ (801f6e8 <lfs_dir_read_+0xb4>)
 801f674:	881b      	ldrh	r3, [r3, #0]
 801f676:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801f678:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f67a:	3301      	adds	r3, #1
 801f67c:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f67e:	f04f 0c01 	mov.w	ip, #1
 801f682:	e029      	b.n	801f6d8 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801f684:	88a1      	ldrh	r1, [r4, #4]
 801f686:	3101      	adds	r1, #1
 801f688:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801f68a:	f11c 0f02 	cmn.w	ip, #2
 801f68e:	d11e      	bne.n	801f6ce <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801f690:	88a3      	ldrh	r3, [r4, #4]
 801f692:	8ba1      	ldrh	r1, [r4, #28]
 801f694:	428b      	cmp	r3, r1
 801f696:	d10c      	bne.n	801f6b2 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801f698:	7fe3      	ldrb	r3, [r4, #31]
 801f69a:	b1fb      	cbz	r3, 801f6dc <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801f69c:	f104 0220 	add.w	r2, r4, #32
 801f6a0:	f104 0108 	add.w	r1, r4, #8
 801f6a4:	4628      	mov	r0, r5
 801f6a6:	f7fc ff63 	bl	801c570 <lfs_dir_fetch>
            if (err) {
 801f6aa:	4684      	mov	ip, r0
 801f6ac:	b9a0      	cbnz	r0, 801f6d8 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801f6b2:	4633      	mov	r3, r6
 801f6b4:	88a2      	ldrh	r2, [r4, #4]
 801f6b6:	f104 0108 	add.w	r1, r4, #8
 801f6ba:	4628      	mov	r0, r5
 801f6bc:	f7ff ff5a 	bl	801f574 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801f6c0:	4684      	mov	ip, r0
 801f6c2:	2800      	cmp	r0, #0
 801f6c4:	d0de      	beq.n	801f684 <lfs_dir_read_+0x50>
 801f6c6:	f110 0f02 	cmn.w	r0, #2
 801f6ca:	d0db      	beq.n	801f684 <lfs_dir_read_+0x50>
 801f6cc:	e004      	b.n	801f6d8 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801f6ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f6d0:	3301      	adds	r3, #1
 801f6d2:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801f6d4:	f04f 0c01 	mov.w	ip, #1
}
 801f6d8:	4660      	mov	r0, ip
 801f6da:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801f6dc:	f04f 0c00 	mov.w	ip, #0
 801f6e0:	e7fa      	b.n	801f6d8 <lfs_dir_read_+0xa4>
 801f6e2:	bf00      	nop
 801f6e4:	08039c7c 	.word	0x08039c7c
 801f6e8:	080360d0 	.word	0x080360d0

0801f6ec <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801f6ec:	b570      	push	{r4, r5, r6, lr}
 801f6ee:	4605      	mov	r5, r0
 801f6f0:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f6f2:	694b      	ldr	r3, [r1, #20]
 801f6f4:	4608      	mov	r0, r1
 801f6f6:	4798      	blx	r3
    if (err) {
 801f6f8:	4606      	mov	r6, r0
 801f6fa:	b108      	cbz	r0, 801f700 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f6fc:	4630      	mov	r0, r6
 801f6fe:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801f700:	4621      	mov	r1, r4
 801f702:	4628      	mov	r0, r5
 801f704:	f7ff f860 	bl	801e7c8 <lfs_format_>
 801f708:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f70a:	69a3      	ldr	r3, [r4, #24]
 801f70c:	4620      	mov	r0, r4
 801f70e:	4798      	blx	r3
    return err;
 801f710:	e7f4      	b.n	801f6fc <lfs_format+0x10>

0801f712 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801f712:	b570      	push	{r4, r5, r6, lr}
 801f714:	4605      	mov	r5, r0
 801f716:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f718:	694b      	ldr	r3, [r1, #20]
 801f71a:	4608      	mov	r0, r1
 801f71c:	4798      	blx	r3
    if (err) {
 801f71e:	4606      	mov	r6, r0
 801f720:	b108      	cbz	r0, 801f726 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f722:	4630      	mov	r0, r6
 801f724:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801f726:	4621      	mov	r1, r4
 801f728:	4628      	mov	r0, r5
 801f72a:	f7ff f8cb 	bl	801e8c4 <lfs_mount_>
 801f72e:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f730:	69a3      	ldr	r3, [r4, #24]
 801f732:	4620      	mov	r0, r4
 801f734:	4798      	blx	r3
    return err;
 801f736:	e7f4      	b.n	801f722 <lfs_mount+0x10>

0801f738 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801f738:	b570      	push	{r4, r5, r6, lr}
 801f73a:	4604      	mov	r4, r0
 801f73c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f73e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f740:	6943      	ldr	r3, [r0, #20]
 801f742:	4798      	blx	r3
    if (err) {
 801f744:	4606      	mov	r6, r0
 801f746:	b108      	cbz	r0, 801f74c <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f748:	4630      	mov	r0, r6
 801f74a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801f74c:	4629      	mov	r1, r5
 801f74e:	4620      	mov	r0, r4
 801f750:	f7ff fb0e 	bl	801ed70 <lfs_remove_>
 801f754:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f756:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f758:	6983      	ldr	r3, [r0, #24]
 801f75a:	4798      	blx	r3
    return err;
 801f75c:	e7f4      	b.n	801f748 <lfs_remove+0x10>

0801f75e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f760:	4604      	mov	r4, r0
 801f762:	460d      	mov	r5, r1
 801f764:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f766:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f768:	6943      	ldr	r3, [r0, #20]
 801f76a:	4798      	blx	r3
    if (err) {
 801f76c:	4607      	mov	r7, r0
 801f76e:	b108      	cbz	r0, 801f774 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f770:	4638      	mov	r0, r7
 801f772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801f774:	4632      	mov	r2, r6
 801f776:	4629      	mov	r1, r5
 801f778:	4620      	mov	r0, r4
 801f77a:	f7ff fbb9 	bl	801eef0 <lfs_rename_>
 801f77e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f780:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f782:	6983      	ldr	r3, [r0, #24]
 801f784:	4798      	blx	r3
    return err;
 801f786:	e7f3      	b.n	801f770 <lfs_rename+0x12>

0801f788 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f78a:	4604      	mov	r4, r0
 801f78c:	460d      	mov	r5, r1
 801f78e:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f790:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f792:	6943      	ldr	r3, [r0, #20]
 801f794:	4798      	blx	r3
    if (err) {
 801f796:	4607      	mov	r7, r0
 801f798:	b108      	cbz	r0, 801f79e <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f79a:	4638      	mov	r0, r7
 801f79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801f79e:	4632      	mov	r2, r6
 801f7a0:	4629      	mov	r1, r5
 801f7a2:	4620      	mov	r0, r4
 801f7a4:	f7ff ff30 	bl	801f608 <lfs_stat_>
 801f7a8:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f7aa:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f7ac:	6983      	ldr	r3, [r0, #24]
 801f7ae:	4798      	blx	r3
    return err;
 801f7b0:	e7f3      	b.n	801f79a <lfs_stat+0x12>
	...

0801f7b4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7b8:	4604      	mov	r4, r0
 801f7ba:	460d      	mov	r5, r1
 801f7bc:	4616      	mov	r6, r2
 801f7be:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f7c0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f7c2:	6942      	ldr	r2, [r0, #20]
 801f7c4:	4790      	blx	r2
    if (err) {
 801f7c6:	4607      	mov	r7, r0
 801f7c8:	b110      	cbz	r0, 801f7d0 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f7ca:	4638      	mov	r0, r7
 801f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7d0:	4629      	mov	r1, r5
 801f7d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f7d4:	f7fb fbc7 	bl	801af66 <lfs_mlist_isopen>
 801f7d8:	b950      	cbnz	r0, 801f7f0 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801f7da:	4643      	mov	r3, r8
 801f7dc:	4632      	mov	r2, r6
 801f7de:	4629      	mov	r1, r5
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	f7ff fe09 	bl	801f3f8 <lfs_file_open_>
 801f7e6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f7e8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f7ea:	6983      	ldr	r3, [r0, #24]
 801f7ec:	4798      	blx	r3
    return err;
 801f7ee:	e7ec      	b.n	801f7ca <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7f0:	4b03      	ldr	r3, [pc, #12]	@ (801f800 <lfs_file_open+0x4c>)
 801f7f2:	4a04      	ldr	r2, [pc, #16]	@ (801f804 <lfs_file_open+0x50>)
 801f7f4:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801f7f8:	4803      	ldr	r0, [pc, #12]	@ (801f808 <lfs_file_open+0x54>)
 801f7fa:	f00a fb9f 	bl	8029f3c <__assert_func>
 801f7fe:	bf00      	nop
 801f800:	08039c80 	.word	0x08039c80
 801f804:	08039db4 	.word	0x08039db4
 801f808:	08039104 	.word	0x08039104

0801f80c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801f80c:	b570      	push	{r4, r5, r6, lr}
 801f80e:	4604      	mov	r4, r0
 801f810:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f812:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f814:	6943      	ldr	r3, [r0, #20]
 801f816:	4798      	blx	r3
    if (err) {
 801f818:	4606      	mov	r6, r0
 801f81a:	b108      	cbz	r0, 801f820 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f81c:	4630      	mov	r0, r6
 801f81e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f820:	4629      	mov	r1, r5
 801f822:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f824:	f7fb fb9f 	bl	801af66 <lfs_mlist_isopen>
 801f828:	b140      	cbz	r0, 801f83c <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801f82a:	4629      	mov	r1, r5
 801f82c:	4620      	mov	r0, r4
 801f82e:	f7ff f9cf 	bl	801ebd0 <lfs_file_close_>
 801f832:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f834:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f836:	6983      	ldr	r3, [r0, #24]
 801f838:	4798      	blx	r3
    return err;
 801f83a:	e7ef      	b.n	801f81c <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f83c:	4b03      	ldr	r3, [pc, #12]	@ (801f84c <lfs_file_close+0x40>)
 801f83e:	4a04      	ldr	r2, [pc, #16]	@ (801f850 <lfs_file_close+0x44>)
 801f840:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801f844:	4803      	ldr	r0, [pc, #12]	@ (801f854 <lfs_file_close+0x48>)
 801f846:	f00a fb79 	bl	8029f3c <__assert_func>
 801f84a:	bf00      	nop
 801f84c:	08039cb8 	.word	0x08039cb8
 801f850:	08039d98 	.word	0x08039d98
 801f854:	08039104 	.word	0x08039104

0801f858 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801f858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f85c:	4604      	mov	r4, r0
 801f85e:	460d      	mov	r5, r1
 801f860:	4616      	mov	r6, r2
 801f862:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f864:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f866:	6942      	ldr	r2, [r0, #20]
 801f868:	4790      	blx	r2
    if (err) {
 801f86a:	4607      	mov	r7, r0
 801f86c:	b110      	cbz	r0, 801f874 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f86e:	4638      	mov	r0, r7
 801f870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f874:	4629      	mov	r1, r5
 801f876:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f878:	f7fb fb75 	bl	801af66 <lfs_mlist_isopen>
 801f87c:	b150      	cbz	r0, 801f894 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801f87e:	4643      	mov	r3, r8
 801f880:	4632      	mov	r2, r6
 801f882:	4629      	mov	r1, r5
 801f884:	4620      	mov	r0, r4
 801f886:	f7fd fac1 	bl	801ce0c <lfs_file_read_>
 801f88a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f88c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f88e:	6983      	ldr	r3, [r0, #24]
 801f890:	4798      	blx	r3
    return res;
 801f892:	e7ec      	b.n	801f86e <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f894:	4b03      	ldr	r3, [pc, #12]	@ (801f8a4 <lfs_file_read+0x4c>)
 801f896:	4a04      	ldr	r2, [pc, #16]	@ (801f8a8 <lfs_file_read+0x50>)
 801f898:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801f89c:	4803      	ldr	r0, [pc, #12]	@ (801f8ac <lfs_file_read+0x54>)
 801f89e:	f00a fb4d 	bl	8029f3c <__assert_func>
 801f8a2:	bf00      	nop
 801f8a4:	08039cb8 	.word	0x08039cb8
 801f8a8:	08039d88 	.word	0x08039d88
 801f8ac:	08039104 	.word	0x08039104

0801f8b0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8b4:	4604      	mov	r4, r0
 801f8b6:	460d      	mov	r5, r1
 801f8b8:	4616      	mov	r6, r2
 801f8ba:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f8bc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f8be:	6942      	ldr	r2, [r0, #20]
 801f8c0:	4790      	blx	r2
    if (err) {
 801f8c2:	4607      	mov	r7, r0
 801f8c4:	b110      	cbz	r0, 801f8cc <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f8c6:	4638      	mov	r0, r7
 801f8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f8cc:	4629      	mov	r1, r5
 801f8ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f8d0:	f7fb fb49 	bl	801af66 <lfs_mlist_isopen>
 801f8d4:	b150      	cbz	r0, 801f8ec <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801f8d6:	4643      	mov	r3, r8
 801f8d8:	4632      	mov	r2, r6
 801f8da:	4629      	mov	r1, r5
 801f8dc:	4620      	mov	r0, r4
 801f8de:	f7fd fb05 	bl	801ceec <lfs_file_write_>
 801f8e2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f8e4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f8e6:	6983      	ldr	r3, [r0, #24]
 801f8e8:	4798      	blx	r3
    return res;
 801f8ea:	e7ec      	b.n	801f8c6 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f8ec:	4b03      	ldr	r3, [pc, #12]	@ (801f8fc <lfs_file_write+0x4c>)
 801f8ee:	4a04      	ldr	r2, [pc, #16]	@ (801f900 <lfs_file_write+0x50>)
 801f8f0:	f641 0105 	movw	r1, #6149	@ 0x1805
 801f8f4:	4803      	ldr	r0, [pc, #12]	@ (801f904 <lfs_file_write+0x54>)
 801f8f6:	f00a fb21 	bl	8029f3c <__assert_func>
 801f8fa:	bf00      	nop
 801f8fc:	08039cb8 	.word	0x08039cb8
 801f900:	08039d68 	.word	0x08039d68
 801f904:	08039104 	.word	0x08039104

0801f908 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801f908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f90c:	4604      	mov	r4, r0
 801f90e:	460d      	mov	r5, r1
 801f910:	4616      	mov	r6, r2
 801f912:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f914:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f916:	6942      	ldr	r2, [r0, #20]
 801f918:	4790      	blx	r2
    if (err) {
 801f91a:	4607      	mov	r7, r0
 801f91c:	b110      	cbz	r0, 801f924 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f91e:	4638      	mov	r0, r7
 801f920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f924:	4629      	mov	r1, r5
 801f926:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f928:	f7fb fb1d 	bl	801af66 <lfs_mlist_isopen>
 801f92c:	b150      	cbz	r0, 801f944 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801f92e:	4643      	mov	r3, r8
 801f930:	4632      	mov	r2, r6
 801f932:	4629      	mov	r1, r5
 801f934:	4620      	mov	r0, r4
 801f936:	f7fd fa8d 	bl	801ce54 <lfs_file_seek_>
 801f93a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f93c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f93e:	6983      	ldr	r3, [r0, #24]
 801f940:	4798      	blx	r3
    return res;
 801f942:	e7ec      	b.n	801f91e <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f944:	4b03      	ldr	r3, [pc, #12]	@ (801f954 <lfs_file_seek+0x4c>)
 801f946:	4a04      	ldr	r2, [pc, #16]	@ (801f958 <lfs_file_seek+0x50>)
 801f948:	f641 0117 	movw	r1, #6167	@ 0x1817
 801f94c:	4803      	ldr	r0, [pc, #12]	@ (801f95c <lfs_file_seek+0x54>)
 801f94e:	f00a faf5 	bl	8029f3c <__assert_func>
 801f952:	bf00      	nop
 801f954:	08039cb8 	.word	0x08039cb8
 801f958:	08039d48 	.word	0x08039d48
 801f95c:	08039104 	.word	0x08039104

0801f960 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801f960:	b570      	push	{r4, r5, r6, lr}
 801f962:	4604      	mov	r4, r0
 801f964:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f966:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f968:	6943      	ldr	r3, [r0, #20]
 801f96a:	4798      	blx	r3
    if (err) {
 801f96c:	4606      	mov	r6, r0
 801f96e:	b108      	cbz	r0, 801f974 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f970:	4630      	mov	r0, r6
 801f972:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f974:	4629      	mov	r1, r5
 801f976:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f978:	f7fb faf5 	bl	801af66 <lfs_mlist_isopen>
 801f97c:	b140      	cbz	r0, 801f990 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801f97e:	4629      	mov	r1, r5
 801f980:	4620      	mov	r0, r4
 801f982:	f7fb fba4 	bl	801b0ce <lfs_file_tell_>
 801f986:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f988:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f98a:	6983      	ldr	r3, [r0, #24]
 801f98c:	4798      	blx	r3
    return res;
 801f98e:	e7ef      	b.n	801f970 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f990:	4b03      	ldr	r3, [pc, #12]	@ (801f9a0 <lfs_file_tell+0x40>)
 801f992:	4a04      	ldr	r2, [pc, #16]	@ (801f9a4 <lfs_file_tell+0x44>)
 801f994:	f641 0138 	movw	r1, #6200	@ 0x1838
 801f998:	4803      	ldr	r0, [pc, #12]	@ (801f9a8 <lfs_file_tell+0x48>)
 801f99a:	f00a facf 	bl	8029f3c <__assert_func>
 801f99e:	bf00      	nop
 801f9a0:	08039cb8 	.word	0x08039cb8
 801f9a4:	08039d38 	.word	0x08039d38
 801f9a8:	08039104 	.word	0x08039104

0801f9ac <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801f9ac:	b570      	push	{r4, r5, r6, lr}
 801f9ae:	4604      	mov	r4, r0
 801f9b0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f9b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9b4:	6943      	ldr	r3, [r0, #20]
 801f9b6:	4798      	blx	r3
    if (err) {
 801f9b8:	4606      	mov	r6, r0
 801f9ba:	b108      	cbz	r0, 801f9c0 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9bc:	4630      	mov	r0, r6
 801f9be:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801f9c0:	4629      	mov	r1, r5
 801f9c2:	4620      	mov	r0, r4
 801f9c4:	f7ff fd22 	bl	801f40c <lfs_mkdir_>
 801f9c8:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f9ca:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f9cc:	6983      	ldr	r3, [r0, #24]
 801f9ce:	4798      	blx	r3
    return err;
 801f9d0:	e7f4      	b.n	801f9bc <lfs_mkdir+0x10>
	...

0801f9d4 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	460f      	mov	r7, r1
 801f9da:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801f9dc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9de:	6943      	ldr	r3, [r0, #20]
 801f9e0:	4798      	blx	r3
    if (err) {
 801f9e2:	4606      	mov	r6, r0
 801f9e4:	b108      	cbz	r0, 801f9ea <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9e6:	4630      	mov	r0, r6
 801f9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f9ea:	4639      	mov	r1, r7
 801f9ec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f9ee:	f7fb faba 	bl	801af66 <lfs_mlist_isopen>
 801f9f2:	b948      	cbnz	r0, 801fa08 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801f9f4:	462a      	mov	r2, r5
 801f9f6:	4639      	mov	r1, r7
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	f7ff fa31 	bl	801ee60 <lfs_dir_open_>
 801f9fe:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fa00:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa02:	6983      	ldr	r3, [r0, #24]
 801fa04:	4798      	blx	r3
    return err;
 801fa06:	e7ee      	b.n	801f9e6 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801fa08:	4b03      	ldr	r3, [pc, #12]	@ (801fa18 <lfs_dir_open+0x44>)
 801fa0a:	4a04      	ldr	r2, [pc, #16]	@ (801fa1c <lfs_dir_open+0x48>)
 801fa0c:	f641 0174 	movw	r1, #6260	@ 0x1874
 801fa10:	4803      	ldr	r0, [pc, #12]	@ (801fa20 <lfs_dir_open+0x4c>)
 801fa12:	f00a fa93 	bl	8029f3c <__assert_func>
 801fa16:	bf00      	nop
 801fa18:	08039cf0 	.word	0x08039cf0
 801fa1c:	08039d28 	.word	0x08039d28
 801fa20:	08039104 	.word	0x08039104

0801fa24 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801fa24:	b570      	push	{r4, r5, r6, lr}
 801fa26:	4604      	mov	r4, r0
 801fa28:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fa2a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa2c:	6943      	ldr	r3, [r0, #20]
 801fa2e:	4798      	blx	r3
    if (err) {
 801fa30:	4606      	mov	r6, r0
 801fa32:	b108      	cbz	r0, 801fa38 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa34:	4630      	mov	r0, r6
 801fa36:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801fa38:	4629      	mov	r1, r5
 801fa3a:	4620      	mov	r0, r4
 801fa3c:	f7fb fb42 	bl	801b0c4 <lfs_dir_close_>
 801fa40:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fa42:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa44:	6983      	ldr	r3, [r0, #24]
 801fa46:	4798      	blx	r3
    return err;
 801fa48:	e7f4      	b.n	801fa34 <lfs_dir_close+0x10>

0801fa4a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801fa4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa4c:	4604      	mov	r4, r0
 801fa4e:	460d      	mov	r5, r1
 801fa50:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fa52:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa54:	6943      	ldr	r3, [r0, #20]
 801fa56:	4798      	blx	r3
    if (err) {
 801fa58:	4607      	mov	r7, r0
 801fa5a:	b108      	cbz	r0, 801fa60 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa5c:	4638      	mov	r0, r7
 801fa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801fa60:	4632      	mov	r2, r6
 801fa62:	4629      	mov	r1, r5
 801fa64:	4620      	mov	r0, r4
 801fa66:	f7ff fde5 	bl	801f634 <lfs_dir_read_>
 801fa6a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fa6c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa6e:	6983      	ldr	r3, [r0, #24]
 801fa70:	4798      	blx	r3
    return err;
 801fa72:	e7f3      	b.n	801fa5c <lfs_dir_read+0x12>

0801fa74 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801fa74:	f04f 0c00 	mov.w	ip, #0
 801fa78:	4594      	cmp	ip, r2
 801fa7a:	d218      	bcs.n	801faae <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801fa7c:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801fa7e:	f811 300c 	ldrb.w	r3, [r1, ip]
 801fa82:	ea83 0e00 	eor.w	lr, r3, r0
 801fa86:	f00e 0e0f 	and.w	lr, lr, #15
 801fa8a:	4c09      	ldr	r4, [pc, #36]	@ (801fab0 <lfs_crc+0x3c>)
 801fa8c:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801fa90:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801fa94:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801fa98:	f003 030f 	and.w	r3, r3, #15
 801fa9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801faa0:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801faa4:	f10c 0c01 	add.w	ip, ip, #1
 801faa8:	4594      	cmp	ip, r2
 801faaa:	d3e8      	bcc.n	801fa7e <lfs_crc+0xa>
    }

    return crc;
}
 801faac:	bd30      	pop	{r4, r5, pc}
 801faae:	4770      	bx	lr
 801fab0:	08039e9c 	.word	0x08039e9c

0801fab4 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801fab4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801fab8:	2b19      	cmp	r3, #25
 801faba:	d913      	bls.n	801fae4 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801fabc:	283d      	cmp	r0, #61	@ 0x3d
 801fabe:	dc18      	bgt.n	801faf2 <mg_base64_decode_single+0x3e>
 801fac0:	282b      	cmp	r0, #43	@ 0x2b
 801fac2:	db20      	blt.n	801fb06 <mg_base64_decode_single+0x52>
 801fac4:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801fac8:	2b12      	cmp	r3, #18
 801faca:	d80f      	bhi.n	801faec <mg_base64_decode_single+0x38>
 801facc:	e8df f003 	tbb	[pc, r3]
 801fad0:	0e0e0e0c 	.word	0x0e0e0e0c
 801fad4:	1717171e 	.word	0x1717171e
 801fad8:	17171717 	.word	0x17171717
 801fadc:	0e171717 	.word	0x0e171717
 801fae0:	0e0e      	.short	0x0e0e
 801fae2:	19          	.byte	0x19
 801fae3:	00          	.byte	0x00
    return c - 'A';
 801fae4:	4618      	mov	r0, r3
 801fae6:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801fae8:	203e      	movs	r0, #62	@ 0x3e
 801faea:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801faec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801faf0:	4770      	bx	lr
 801faf2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801faf6:	2b19      	cmp	r3, #25
 801faf8:	d80a      	bhi.n	801fb10 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801fafa:	3847      	subs	r0, #71	@ 0x47
 801fafc:	4770      	bx	lr
    return c + 52 - '0';
 801fafe:	3004      	adds	r0, #4
 801fb00:	4770      	bx	lr
    return 64;
 801fb02:	2040      	movs	r0, #64	@ 0x40
 801fb04:	4770      	bx	lr
    return -1;
 801fb06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb0a:	4770      	bx	lr
    return 63;
 801fb0c:	203f      	movs	r0, #63	@ 0x3f
 801fb0e:	4770      	bx	lr
    return -1;
 801fb10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801fb14:	4770      	bx	lr

0801fb16 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801fb16:	3830      	subs	r0, #48	@ 0x30
}
 801fb18:	2809      	cmp	r0, #9
 801fb1a:	bf8c      	ite	hi
 801fb1c:	2000      	movhi	r0, #0
 801fb1e:	2001      	movls	r0, #1
 801fb20:	4770      	bx	lr
	...

0801fb24 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801fb24:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801fb26:	2365      	movs	r3, #101	@ 0x65
 801fb28:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801fb2a:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801fb2c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801fb30:	dc2c      	bgt.n	801fb8c <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801fb32:	2909      	cmp	r1, #9
 801fb34:	dc03      	bgt.n	801fb3e <addexp+0x1a>
 801fb36:	2330      	movs	r3, #48	@ 0x30
 801fb38:	7083      	strb	r3, [r0, #2]
 801fb3a:	2303      	movs	r3, #3
 801fb3c:	e000      	b.n	801fb40 <addexp+0x1c>
  buf[n++] = (char) sign;
 801fb3e:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801fb40:	2963      	cmp	r1, #99	@ 0x63
 801fb42:	dd0d      	ble.n	801fb60 <addexp+0x3c>
 801fb44:	4812      	ldr	r0, [pc, #72]	@ (801fb90 <addexp+0x6c>)
 801fb46:	fb80 2001 	smull	r2, r0, r0, r1
 801fb4a:	17ca      	asrs	r2, r1, #31
 801fb4c:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801fb50:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fb54:	f80c 0003 	strb.w	r0, [ip, r3]
 801fb58:	2064      	movs	r0, #100	@ 0x64
 801fb5a:	fb00 1112 	mls	r1, r0, r2, r1
 801fb5e:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801fb60:	2909      	cmp	r1, #9
 801fb62:	dd0e      	ble.n	801fb82 <addexp+0x5e>
 801fb64:	480b      	ldr	r0, [pc, #44]	@ (801fb94 <addexp+0x70>)
 801fb66:	fb80 2001 	smull	r2, r0, r0, r1
 801fb6a:	17ca      	asrs	r2, r1, #31
 801fb6c:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801fb70:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fb74:	f80c 0003 	strb.w	r0, [ip, r3]
 801fb78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fb7c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801fb80:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801fb82:	1c58      	adds	r0, r3, #1
 801fb84:	3130      	adds	r1, #48	@ 0x30
 801fb86:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801fb8a:	4770      	bx	lr
  if (e > 400) return 0;
 801fb8c:	2000      	movs	r0, #0
}
 801fb8e:	4770      	bx	lr
 801fb90:	51eb851f 	.word	0x51eb851f
 801fb94:	66666667 	.word	0x66666667

0801fb98 <xisinf>:

static int xisinf(double x) {
 801fb98:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801fb9c:	4611      	mov	r1, r2
 801fb9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fba2:	4a05      	ldr	r2, [pc, #20]	@ (801fbb8 <xisinf+0x20>)
 801fba4:	4293      	cmp	r3, r2
 801fba6:	d001      	beq.n	801fbac <xisinf+0x14>
 801fba8:	2000      	movs	r0, #0
 801fbaa:	4770      	bx	lr
 801fbac:	b109      	cbz	r1, 801fbb2 <xisinf+0x1a>
 801fbae:	2000      	movs	r0, #0
 801fbb0:	4770      	bx	lr
 801fbb2:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801fbb4:	4770      	bx	lr
 801fbb6:	bf00      	nop
 801fbb8:	7ff00000 	.word	0x7ff00000

0801fbbc <xisnan>:

static int xisnan(double x) {
 801fbbc:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801fbc0:	4602      	mov	r2, r0
 801fbc2:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801fbc6:	2a00      	cmp	r2, #0
 801fbc8:	bf18      	it	ne
 801fbca:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801fbcc:	4b02      	ldr	r3, [pc, #8]	@ (801fbd8 <xisnan+0x1c>)
 801fbce:	4298      	cmp	r0, r3
 801fbd0:	bf94      	ite	ls
 801fbd2:	2000      	movls	r0, #0
 801fbd4:	2001      	movhi	r0, #1
 801fbd6:	4770      	bx	lr
 801fbd8:	7ff00000 	.word	0x7ff00000

0801fbdc <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801fbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbe0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801fbe4:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801fbe8:	4694      	mov	ip, r2
 801fbea:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fbec:	b15c      	cbz	r4, 801fc06 <mg_lld+0x2a>
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	db01      	blt.n	801fbf6 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801fbf2:	2500      	movs	r5, #0
 801fbf4:	e008      	b.n	801fc08 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fbf6:	242d      	movs	r4, #45	@ 0x2d
 801fbf8:	7004      	strb	r4, [r0, #0]
 801fbfa:	f1d2 0c00 	rsbs	ip, r2, #0
 801fbfe:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801fc02:	2501      	movs	r5, #1
 801fc04:	e000      	b.n	801fc08 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801fc06:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801fc08:	b909      	cbnz	r1, 801fc0e <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fc0a:	2400      	movs	r4, #0
 801fc0c:	e02f      	b.n	801fc6e <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801fc0e:	2400      	movs	r4, #0
 801fc10:	ea5c 010e 	orrs.w	r1, ip, lr
 801fc14:	d05a      	beq.n	801fccc <mg_lld+0xf0>
 801fc16:	f00c 060f 	and.w	r6, ip, #15
 801fc1a:	1929      	adds	r1, r5, r4
 801fc1c:	4f38      	ldr	r7, [pc, #224]	@ (801fd00 <mg_lld+0x124>)
 801fc1e:	5dbe      	ldrb	r6, [r7, r6]
 801fc20:	5446      	strb	r6, [r0, r1]
 801fc22:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801fc26:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801fc2a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801fc2e:	3401      	adds	r4, #1
 801fc30:	e7ee      	b.n	801fc10 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fc32:	2601      	movs	r6, #1
 801fc34:	e022      	b.n	801fc7c <mg_lld+0xa0>
 801fc36:	4421      	add	r1, r4
 801fc38:	4f32      	ldr	r7, [pc, #200]	@ (801fd04 <mg_lld+0x128>)
 801fc3a:	fba7 4801 	umull	r4, r8, r7, r1
 801fc3e:	f028 0403 	bic.w	r4, r8, #3
 801fc42:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801fc46:	1b09      	subs	r1, r1, r4
 801fc48:	ebbc 0101 	subs.w	r1, ip, r1
 801fc4c:	f16e 0e00 	sbc.w	lr, lr, #0
 801fc50:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801fc54:	fb01 f404 	mul.w	r4, r1, r4
 801fc58:	fb07 440e 	mla	r4, r7, lr, r4
 801fc5c:	fba1 1707 	umull	r1, r7, r1, r7
 801fc60:	443c      	add	r4, r7
 801fc62:	0849      	lsrs	r1, r1, #1
 801fc64:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801fc68:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801fc6c:	4634      	mov	r4, r6
 801fc6e:	ea5c 010e 	orrs.w	r1, ip, lr
 801fc72:	d02b      	beq.n	801fccc <mg_lld+0xf0>
 801fc74:	2600      	movs	r6, #0
 801fc76:	eb1c 010e 	adds.w	r1, ip, lr
 801fc7a:	d2da      	bcs.n	801fc32 <mg_lld+0x56>
 801fc7c:	4431      	add	r1, r6
 801fc7e:	4f21      	ldr	r7, [pc, #132]	@ (801fd04 <mg_lld+0x128>)
 801fc80:	fba7 6801 	umull	r6, r8, r7, r1
 801fc84:	f028 0603 	bic.w	r6, r8, #3
 801fc88:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801fc8c:	1b89      	subs	r1, r1, r6
 801fc8e:	ebbc 0101 	subs.w	r1, ip, r1
 801fc92:	f16e 0800 	sbc.w	r8, lr, #0
 801fc96:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801fc9a:	fb01 f606 	mul.w	r6, r1, r6
 801fc9e:	fb07 6608 	mla	r6, r7, r8, r6
 801fca2:	fba1 1707 	umull	r1, r7, r1, r7
 801fca6:	443e      	add	r6, r7
 801fca8:	0849      	lsrs	r1, r1, #1
 801fcaa:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801fcae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801fcb2:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801fcb6:	1c66      	adds	r6, r4, #1
 801fcb8:	442c      	add	r4, r5
 801fcba:	4f11      	ldr	r7, [pc, #68]	@ (801fd00 <mg_lld+0x124>)
 801fcbc:	5c79      	ldrb	r1, [r7, r1]
 801fcbe:	5501      	strb	r1, [r0, r4]
 801fcc0:	2400      	movs	r4, #0
 801fcc2:	eb1c 010e 	adds.w	r1, ip, lr
 801fcc6:	d3b6      	bcc.n	801fc36 <mg_lld+0x5a>
 801fcc8:	2401      	movs	r4, #1
 801fcca:	e7b4      	b.n	801fc36 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801fccc:	2600      	movs	r6, #0
 801fcce:	e00c      	b.n	801fcea <mg_lld+0x10e>
    char t = buf[s + i];
 801fcd0:	19af      	adds	r7, r5, r6
 801fcd2:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801fcd6:	1929      	adds	r1, r5, r4
 801fcd8:	1b89      	subs	r1, r1, r6
 801fcda:	3901      	subs	r1, #1
 801fcdc:	f810 e001 	ldrb.w	lr, [r0, r1]
 801fce0:	f800 e007 	strb.w	lr, [r0, r7]
 801fce4:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801fce8:	3601      	adds	r6, #1
 801fcea:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801fcee:	d3ef      	bcc.n	801fcd0 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801fcf0:	4313      	orrs	r3, r2
 801fcf2:	d102      	bne.n	801fcfa <mg_lld+0x11e>
 801fcf4:	2330      	movs	r3, #48	@ 0x30
 801fcf6:	5503      	strb	r3, [r0, r4]
 801fcf8:	3401      	adds	r4, #1
  return n + s;
}
 801fcfa:	1928      	adds	r0, r5, r4
 801fcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd00:	08039edc 	.word	0x08039edc
 801fd04:	cccccccd 	.word	0xcccccccd

0801fd08 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd0c:	4680      	mov	r8, r0
 801fd0e:	460f      	mov	r7, r1
 801fd10:	4616      	mov	r6, r2
 801fd12:	461d      	mov	r5, r3
  size_t i = 0;
 801fd14:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801fd16:	e002      	b.n	801fd1e <scpy+0x16>
 801fd18:	3401      	adds	r4, #1
 801fd1a:	4639      	mov	r1, r7
 801fd1c:	47c0      	blx	r8
 801fd1e:	42ac      	cmp	r4, r5
 801fd20:	d202      	bcs.n	801fd28 <scpy+0x20>
 801fd22:	5d30      	ldrb	r0, [r6, r4]
 801fd24:	2800      	cmp	r0, #0
 801fd26:	d1f7      	bne.n	801fd18 <scpy+0x10>
  return i;
}
 801fd28:	4620      	mov	r0, r4
 801fd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fd2e <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801fd2e:	2000      	movs	r0, #0
 801fd30:	4770      	bx	lr

0801fd32 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801fd32:	4770      	bx	lr

0801fd34 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801fd34:	2000      	movs	r0, #0
 801fd36:	4770      	bx	lr

0801fd38 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801fd38:	4770      	bx	lr

0801fd3a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fd3a:	2000      	movs	r0, #0
 801fd3c:	4770      	bx	lr

0801fd3e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fd3e:	2000      	movs	r0, #0
 801fd40:	4770      	bx	lr

0801fd42 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801fd42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fd46:	4770      	bx	lr

0801fd48 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801fd48:	2000      	movs	r0, #0
 801fd4a:	4770      	bx	lr

0801fd4c <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801fd4c:	2000      	movs	r0, #0
 801fd4e:	4770      	bx	lr

0801fd50 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801fd50:	2000      	movs	r0, #0
 801fd52:	4770      	bx	lr

0801fd54 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801fd54:	b530      	push	{r4, r5, lr}
 801fd56:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801fd58:	4614      	mov	r4, r2
 801fd5a:	b94a      	cbnz	r2, 801fd70 <mg_ncasecmp+0x1c>
  int diff = 0;
 801fd5c:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801fd5e:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fd60:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801fd64:	1a18      	subs	r0, r3, r0
 801fd66:	d1fa      	bne.n	801fd5e <mg_ncasecmp+0xa>
 801fd68:	2a00      	cmp	r2, #0
 801fd6a:	d0f8      	beq.n	801fd5e <mg_ncasecmp+0xa>
 801fd6c:	3c01      	subs	r4, #1
 801fd6e:	d0f6      	beq.n	801fd5e <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801fd70:	f89e 2000 	ldrb.w	r2, [lr]
 801fd74:	f10e 0e01 	add.w	lr, lr, #1
 801fd78:	4613      	mov	r3, r2
 801fd7a:	f891 c000 	ldrb.w	ip, [r1]
 801fd7e:	3101      	adds	r1, #1
 801fd80:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801fd82:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801fd86:	2d19      	cmp	r5, #25
 801fd88:	d801      	bhi.n	801fd8e <mg_ncasecmp+0x3a>
 801fd8a:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fd8e:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801fd92:	2d19      	cmp	r5, #25
 801fd94:	d8e6      	bhi.n	801fd64 <mg_ncasecmp+0x10>
 801fd96:	e7e3      	b.n	801fd60 <mg_ncasecmp+0xc>

0801fd98 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fd98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801fd9c:	2b09      	cmp	r3, #9
 801fd9e:	d908      	bls.n	801fdb2 <isx+0x1a>
 801fda0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fda4:	2b05      	cmp	r3, #5
 801fda6:	d906      	bls.n	801fdb6 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801fda8:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fdaa:	2805      	cmp	r0, #5
 801fdac:	d805      	bhi.n	801fdba <isx+0x22>
 801fdae:	2001      	movs	r0, #1
 801fdb0:	4770      	bx	lr
 801fdb2:	2001      	movs	r0, #1
 801fdb4:	4770      	bx	lr
 801fdb6:	2001      	movs	r0, #1
 801fdb8:	4770      	bx	lr
 801fdba:	2000      	movs	r0, #0
}
 801fdbc:	4770      	bx	lr

0801fdbe <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801fdbe:	280a      	cmp	r0, #10
 801fdc0:	d007      	beq.n	801fdd2 <isok+0x14>
 801fdc2:	280d      	cmp	r0, #13
 801fdc4:	d007      	beq.n	801fdd6 <isok+0x18>
 801fdc6:	2809      	cmp	r0, #9
 801fdc8:	d007      	beq.n	801fdda <isok+0x1c>
 801fdca:	281f      	cmp	r0, #31
 801fdcc:	d907      	bls.n	801fdde <isok+0x20>
 801fdce:	2001      	movs	r0, #1
 801fdd0:	4770      	bx	lr
 801fdd2:	2001      	movs	r0, #1
 801fdd4:	4770      	bx	lr
 801fdd6:	2001      	movs	r0, #1
 801fdd8:	4770      	bx	lr
 801fdda:	2001      	movs	r0, #1
 801fddc:	4770      	bx	lr
 801fdde:	2000      	movs	r0, #0
}
 801fde0:	4770      	bx	lr

0801fde2 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801fde2:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801fde6:	2880      	cmp	r0, #128	@ 0x80
 801fde8:	bf14      	ite	ne
 801fdea:	2000      	movne	r0, #0
 801fdec:	2001      	moveq	r0, #1
 801fdee:	4770      	bx	lr

0801fdf0 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801fdf0:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801fdf2:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801fdf4:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fdf6:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801fdfa:	b2db      	uxtb	r3, r3
 801fdfc:	2b5c      	cmp	r3, #92	@ 0x5c
 801fdfe:	d936      	bls.n	801fe6e <clen+0x7e>
 801fe00:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fe02:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801fe06:	2bc0      	cmp	r3, #192	@ 0xc0
 801fe08:	d009      	beq.n	801fe1e <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fe0a:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801fe0e:	2be0      	cmp	r3, #224	@ 0xe0
 801fe10:	d00e      	beq.n	801fe30 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fe12:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fe16:	2df0      	cmp	r5, #240	@ 0xf0
 801fe18:	d018      	beq.n	801fe4c <clen+0x5c>
    return 4;
  return 0;
 801fe1a:	2000      	movs	r0, #0
}
 801fe1c:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fe1e:	2e01      	cmp	r6, #1
 801fe20:	ddf3      	ble.n	801fe0a <clen+0x1a>
 801fe22:	7840      	ldrb	r0, [r0, #1]
 801fe24:	f7ff ffdd 	bl	801fde2 <vcb>
 801fe28:	2800      	cmp	r0, #0
 801fe2a:	d0ee      	beq.n	801fe0a <clen+0x1a>
 801fe2c:	2002      	movs	r0, #2
 801fe2e:	e7f5      	b.n	801fe1c <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fe30:	2e02      	cmp	r6, #2
 801fe32:	ddee      	ble.n	801fe12 <clen+0x22>
 801fe34:	7860      	ldrb	r0, [r4, #1]
 801fe36:	f7ff ffd4 	bl	801fde2 <vcb>
 801fe3a:	2800      	cmp	r0, #0
 801fe3c:	d0e9      	beq.n	801fe12 <clen+0x22>
 801fe3e:	78a0      	ldrb	r0, [r4, #2]
 801fe40:	f7ff ffcf 	bl	801fde2 <vcb>
 801fe44:	2800      	cmp	r0, #0
 801fe46:	d0e4      	beq.n	801fe12 <clen+0x22>
 801fe48:	2003      	movs	r0, #3
 801fe4a:	e7e7      	b.n	801fe1c <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fe4c:	2e03      	cmp	r6, #3
 801fe4e:	dd10      	ble.n	801fe72 <clen+0x82>
 801fe50:	7860      	ldrb	r0, [r4, #1]
 801fe52:	f7ff ffc6 	bl	801fde2 <vcb>
 801fe56:	b170      	cbz	r0, 801fe76 <clen+0x86>
 801fe58:	78a0      	ldrb	r0, [r4, #2]
 801fe5a:	f7ff ffc2 	bl	801fde2 <vcb>
 801fe5e:	b160      	cbz	r0, 801fe7a <clen+0x8a>
 801fe60:	78e0      	ldrb	r0, [r4, #3]
 801fe62:	f7ff ffbe 	bl	801fde2 <vcb>
 801fe66:	2800      	cmp	r0, #0
 801fe68:	d0d8      	beq.n	801fe1c <clen+0x2c>
    return 4;
 801fe6a:	2004      	movs	r0, #4
 801fe6c:	e7d6      	b.n	801fe1c <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fe6e:	2001      	movs	r0, #1
 801fe70:	e7d4      	b.n	801fe1c <clen+0x2c>
  return 0;
 801fe72:	2000      	movs	r0, #0
 801fe74:	e7d2      	b.n	801fe1c <clen+0x2c>
 801fe76:	2000      	movs	r0, #0
 801fe78:	e7d0      	b.n	801fe1c <clen+0x2c>
 801fe7a:	2000      	movs	r0, #0
 801fe7c:	e7ce      	b.n	801fe1c <clen+0x2c>

0801fe7e <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801fe7e:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801fe80:	e003      	b.n	801fe8a <skiptorn+0xc>
 801fe82:	3001      	adds	r0, #1
 801fe84:	6853      	ldr	r3, [r2, #4]
 801fe86:	3301      	adds	r3, #1
 801fe88:	6053      	str	r3, [r2, #4]
 801fe8a:	4288      	cmp	r0, r1
 801fe8c:	d204      	bcs.n	801fe98 <skiptorn+0x1a>
 801fe8e:	7803      	ldrb	r3, [r0, #0]
 801fe90:	2b0a      	cmp	r3, #10
 801fe92:	d001      	beq.n	801fe98 <skiptorn+0x1a>
 801fe94:	2b0d      	cmp	r3, #13
 801fe96:	d1f4      	bne.n	801fe82 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fe98:	4288      	cmp	r0, r1
 801fe9a:	d212      	bcs.n	801fec2 <skiptorn+0x44>
 801fe9c:	7803      	ldrb	r3, [r0, #0]
 801fe9e:	2b0d      	cmp	r3, #13
 801fea0:	d008      	beq.n	801feb4 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801fea2:	2b0d      	cmp	r3, #13
 801fea4:	d00b      	beq.n	801febe <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801fea6:	4288      	cmp	r0, r1
 801fea8:	d20d      	bcs.n	801fec6 <skiptorn+0x48>
 801feaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 801feae:	2b0a      	cmp	r3, #10
 801feb0:	d10b      	bne.n	801feca <skiptorn+0x4c>
  return s;
}
 801feb2:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801feb4:	7842      	ldrb	r2, [r0, #1]
 801feb6:	2a0a      	cmp	r2, #10
 801feb8:	d0f3      	beq.n	801fea2 <skiptorn+0x24>
 801feba:	2000      	movs	r0, #0
 801febc:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801febe:	3001      	adds	r0, #1
 801fec0:	e7f1      	b.n	801fea6 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fec2:	2000      	movs	r0, #0
 801fec4:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801fec6:	2000      	movs	r0, #0
 801fec8:	4770      	bx	lr
 801feca:	2000      	movs	r0, #0
 801fecc:	e7f1      	b.n	801feb2 <skiptorn+0x34>

0801fece <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801fece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fed2:	b084      	sub	sp, #16
 801fed4:	4604      	mov	r4, r0
 801fed6:	460d      	mov	r5, r1
 801fed8:	4690      	mov	r8, r2
 801feda:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801fedc:	2600      	movs	r6, #0
 801fede:	e04d      	b.n	801ff7c <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801fee0:	7863      	ldrb	r3, [r4, #1]
 801fee2:	2b0a      	cmp	r3, #10
 801fee4:	d158      	bne.n	801ff98 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801fee6:	2001      	movs	r0, #1
 801fee8:	e01e      	b.n	801ff28 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801feea:	4414      	add	r4, r2
 801feec:	9b01      	ldr	r3, [sp, #4]
 801feee:	4413      	add	r3, r2
 801fef0:	9301      	str	r3, [sp, #4]
 801fef2:	42ac      	cmp	r4, r5
 801fef4:	d209      	bcs.n	801ff0a <mg_http_parse_headers+0x3c>
 801fef6:	7823      	ldrb	r3, [r4, #0]
 801fef8:	2b3a      	cmp	r3, #58	@ 0x3a
 801fefa:	d006      	beq.n	801ff0a <mg_http_parse_headers+0x3c>
 801fefc:	4629      	mov	r1, r5
 801fefe:	4620      	mov	r0, r4
 801ff00:	f7ff ff76 	bl	801fdf0 <clen>
 801ff04:	4602      	mov	r2, r0
 801ff06:	2800      	cmp	r0, #0
 801ff08:	d1ef      	bne.n	801feea <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801ff0a:	9b01      	ldr	r3, [sp, #4]
 801ff0c:	b15b      	cbz	r3, 801ff26 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801ff0e:	42ac      	cmp	r4, r5
 801ff10:	d209      	bcs.n	801ff26 <mg_http_parse_headers+0x58>
 801ff12:	4629      	mov	r1, r5
 801ff14:	4620      	mov	r0, r4
 801ff16:	f7ff ff6b 	bl	801fdf0 <clen>
 801ff1a:	b120      	cbz	r0, 801ff26 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801ff1c:	4620      	mov	r0, r4
 801ff1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ff22:	2b3a      	cmp	r3, #58	@ 0x3a
 801ff24:	d004      	beq.n	801ff30 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801ff26:	2000      	movs	r0, #0
}
 801ff28:	b004      	add	sp, #16
 801ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801ff2e:	3001      	adds	r0, #1
 801ff30:	42a8      	cmp	r0, r5
 801ff32:	d204      	bcs.n	801ff3e <mg_http_parse_headers+0x70>
 801ff34:	7803      	ldrb	r3, [r0, #0]
 801ff36:	2b20      	cmp	r3, #32
 801ff38:	d0f9      	beq.n	801ff2e <mg_http_parse_headers+0x60>
 801ff3a:	2b09      	cmp	r3, #9
 801ff3c:	d0f7      	beq.n	801ff2e <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801ff3e:	aa02      	add	r2, sp, #8
 801ff40:	4629      	mov	r1, r5
 801ff42:	f7ff ff9c 	bl	801fe7e <skiptorn>
 801ff46:	4604      	mov	r4, r0
 801ff48:	b908      	cbnz	r0, 801ff4e <mg_http_parse_headers+0x80>
 801ff4a:	e7ec      	b.n	801ff26 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801ff4c:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801ff4e:	9803      	ldr	r0, [sp, #12]
 801ff50:	b130      	cbz	r0, 801ff60 <mg_http_parse_headers+0x92>
 801ff52:	3801      	subs	r0, #1
 801ff54:	9b02      	ldr	r3, [sp, #8]
 801ff56:	5c1b      	ldrb	r3, [r3, r0]
 801ff58:	2b20      	cmp	r3, #32
 801ff5a:	d0f7      	beq.n	801ff4c <mg_http_parse_headers+0x7e>
 801ff5c:	2b09      	cmp	r3, #9
 801ff5e:	d0f5      	beq.n	801ff4c <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801ff60:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801ff64:	466a      	mov	r2, sp
 801ff66:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ff6a:	e883 0003 	stmia.w	r3, {r0, r1}
 801ff6e:	3308      	adds	r3, #8
 801ff70:	aa04      	add	r2, sp, #16
 801ff72:	e912 0003 	ldmdb	r2, {r0, r1}
 801ff76:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801ff7a:	3601      	adds	r6, #1
 801ff7c:	42be      	cmp	r6, r7
 801ff7e:	d20d      	bcs.n	801ff9c <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801ff80:	2300      	movs	r3, #0
 801ff82:	9300      	str	r3, [sp, #0]
 801ff84:	9301      	str	r3, [sp, #4]
 801ff86:	9302      	str	r3, [sp, #8]
 801ff88:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801ff8a:	42ac      	cmp	r4, r5
 801ff8c:	d2cb      	bcs.n	801ff26 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801ff8e:	7823      	ldrb	r3, [r4, #0]
 801ff90:	2b0a      	cmp	r3, #10
 801ff92:	d0a8      	beq.n	801fee6 <mg_http_parse_headers+0x18>
 801ff94:	2b0d      	cmp	r3, #13
 801ff96:	d0a3      	beq.n	801fee0 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801ff98:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801ff9a:	e7aa      	b.n	801fef2 <mg_http_parse_headers+0x24>
  return true;
 801ff9c:	2001      	movs	r0, #1
 801ff9e:	e7c3      	b.n	801ff28 <mg_http_parse_headers+0x5a>

0801ffa0 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801ffa0:	3864      	subs	r0, #100	@ 0x64
 801ffa2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801ffa6:	4298      	cmp	r0, r3
 801ffa8:	f200 8272 	bhi.w	8020490 <mg_http_status_code_str+0x4f0>
 801ffac:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ffb0:	027201f4 	.word	0x027201f4
 801ffb4:	027001f6 	.word	0x027001f6
 801ffb8:	02700270 	.word	0x02700270
 801ffbc:	02700270 	.word	0x02700270
 801ffc0:	02700270 	.word	0x02700270
 801ffc4:	02700270 	.word	0x02700270
 801ffc8:	02700270 	.word	0x02700270
 801ffcc:	02700270 	.word	0x02700270
 801ffd0:	02700270 	.word	0x02700270
 801ffd4:	02700270 	.word	0x02700270
 801ffd8:	02700270 	.word	0x02700270
 801ffdc:	02700270 	.word	0x02700270
 801ffe0:	02700270 	.word	0x02700270
 801ffe4:	02700270 	.word	0x02700270
 801ffe8:	02700270 	.word	0x02700270
 801ffec:	02700270 	.word	0x02700270
 801fff0:	02700270 	.word	0x02700270
 801fff4:	02700270 	.word	0x02700270
 801fff8:	02700270 	.word	0x02700270
 801fffc:	02700270 	.word	0x02700270
 8020000:	02700270 	.word	0x02700270
 8020004:	02700270 	.word	0x02700270
 8020008:	02700270 	.word	0x02700270
 802000c:	02700270 	.word	0x02700270
 8020010:	02700270 	.word	0x02700270
 8020014:	02700270 	.word	0x02700270
 8020018:	02700270 	.word	0x02700270
 802001c:	02700270 	.word	0x02700270
 8020020:	02700270 	.word	0x02700270
 8020024:	02700270 	.word	0x02700270
 8020028:	02700270 	.word	0x02700270
 802002c:	02700270 	.word	0x02700270
 8020030:	02700270 	.word	0x02700270
 8020034:	02700270 	.word	0x02700270
 8020038:	02700270 	.word	0x02700270
 802003c:	02700270 	.word	0x02700270
 8020040:	02700270 	.word	0x02700270
 8020044:	02700270 	.word	0x02700270
 8020048:	02700270 	.word	0x02700270
 802004c:	02700270 	.word	0x02700270
 8020050:	02700270 	.word	0x02700270
 8020054:	02700270 	.word	0x02700270
 8020058:	02700270 	.word	0x02700270
 802005c:	02700270 	.word	0x02700270
 8020060:	02700270 	.word	0x02700270
 8020064:	02700270 	.word	0x02700270
 8020068:	02700270 	.word	0x02700270
 802006c:	02700270 	.word	0x02700270
 8020070:	02700270 	.word	0x02700270
 8020074:	02700270 	.word	0x02700270
 8020078:	01fa01f8 	.word	0x01fa01f8
 802007c:	01fe01fc 	.word	0x01fe01fc
 8020080:	02020200 	.word	0x02020200
 8020084:	02060204 	.word	0x02060204
 8020088:	02700208 	.word	0x02700208
 802008c:	02700270 	.word	0x02700270
 8020090:	02700270 	.word	0x02700270
 8020094:	02700270 	.word	0x02700270
 8020098:	02700270 	.word	0x02700270
 802009c:	02700270 	.word	0x02700270
 80200a0:	02700270 	.word	0x02700270
 80200a4:	02700270 	.word	0x02700270
 80200a8:	02700270 	.word	0x02700270
 80200ac:	0270020a 	.word	0x0270020a
 80200b0:	02700270 	.word	0x02700270
 80200b4:	02700270 	.word	0x02700270
 80200b8:	02700270 	.word	0x02700270
 80200bc:	02700270 	.word	0x02700270
 80200c0:	02700270 	.word	0x02700270
 80200c4:	02700270 	.word	0x02700270
 80200c8:	02700270 	.word	0x02700270
 80200cc:	02700270 	.word	0x02700270
 80200d0:	02700270 	.word	0x02700270
 80200d4:	02700270 	.word	0x02700270
 80200d8:	02700270 	.word	0x02700270
 80200dc:	02700270 	.word	0x02700270
 80200e0:	02700270 	.word	0x02700270
 80200e4:	02700270 	.word	0x02700270
 80200e8:	02700270 	.word	0x02700270
 80200ec:	02700270 	.word	0x02700270
 80200f0:	02700270 	.word	0x02700270
 80200f4:	02700270 	.word	0x02700270
 80200f8:	02700270 	.word	0x02700270
 80200fc:	02700270 	.word	0x02700270
 8020100:	02700270 	.word	0x02700270
 8020104:	02700270 	.word	0x02700270
 8020108:	02700270 	.word	0x02700270
 802010c:	02700270 	.word	0x02700270
 8020110:	02700270 	.word	0x02700270
 8020114:	02700270 	.word	0x02700270
 8020118:	02700270 	.word	0x02700270
 802011c:	02700270 	.word	0x02700270
 8020120:	02700270 	.word	0x02700270
 8020124:	02700270 	.word	0x02700270
 8020128:	02700270 	.word	0x02700270
 802012c:	02700270 	.word	0x02700270
 8020130:	02700270 	.word	0x02700270
 8020134:	02700270 	.word	0x02700270
 8020138:	02700270 	.word	0x02700270
 802013c:	02700270 	.word	0x02700270
 8020140:	020e020c 	.word	0x020e020c
 8020144:	02120210 	.word	0x02120210
 8020148:	02160214 	.word	0x02160214
 802014c:	02180270 	.word	0x02180270
 8020150:	0270021a 	.word	0x0270021a
 8020154:	02700270 	.word	0x02700270
 8020158:	02700270 	.word	0x02700270
 802015c:	02700270 	.word	0x02700270
 8020160:	02700270 	.word	0x02700270
 8020164:	02700270 	.word	0x02700270
 8020168:	02700270 	.word	0x02700270
 802016c:	02700270 	.word	0x02700270
 8020170:	02700270 	.word	0x02700270
 8020174:	02700270 	.word	0x02700270
 8020178:	02700270 	.word	0x02700270
 802017c:	02700270 	.word	0x02700270
 8020180:	02700270 	.word	0x02700270
 8020184:	02700270 	.word	0x02700270
 8020188:	02700270 	.word	0x02700270
 802018c:	02700270 	.word	0x02700270
 8020190:	02700270 	.word	0x02700270
 8020194:	02700270 	.word	0x02700270
 8020198:	02700270 	.word	0x02700270
 802019c:	02700270 	.word	0x02700270
 80201a0:	02700270 	.word	0x02700270
 80201a4:	02700270 	.word	0x02700270
 80201a8:	02700270 	.word	0x02700270
 80201ac:	02700270 	.word	0x02700270
 80201b0:	02700270 	.word	0x02700270
 80201b4:	02700270 	.word	0x02700270
 80201b8:	02700270 	.word	0x02700270
 80201bc:	02700270 	.word	0x02700270
 80201c0:	02700270 	.word	0x02700270
 80201c4:	02700270 	.word	0x02700270
 80201c8:	02700270 	.word	0x02700270
 80201cc:	02700270 	.word	0x02700270
 80201d0:	02700270 	.word	0x02700270
 80201d4:	02700270 	.word	0x02700270
 80201d8:	02700270 	.word	0x02700270
 80201dc:	02700270 	.word	0x02700270
 80201e0:	02700270 	.word	0x02700270
 80201e4:	02700270 	.word	0x02700270
 80201e8:	02700270 	.word	0x02700270
 80201ec:	02700270 	.word	0x02700270
 80201f0:	02700270 	.word	0x02700270
 80201f4:	02700270 	.word	0x02700270
 80201f8:	02700270 	.word	0x02700270
 80201fc:	02700270 	.word	0x02700270
 8020200:	02700270 	.word	0x02700270
 8020204:	02700270 	.word	0x02700270
 8020208:	021e021c 	.word	0x021e021c
 802020c:	02220220 	.word	0x02220220
 8020210:	02260224 	.word	0x02260224
 8020214:	022a0228 	.word	0x022a0228
 8020218:	022e022c 	.word	0x022e022c
 802021c:	02320230 	.word	0x02320230
 8020220:	02360234 	.word	0x02360234
 8020224:	023a0238 	.word	0x023a0238
 8020228:	023e023c 	.word	0x023e023c
 802022c:	02700240 	.word	0x02700240
 8020230:	02420270 	.word	0x02420270
 8020234:	02460244 	.word	0x02460244
 8020238:	02700248 	.word	0x02700248
 802023c:	0270024a 	.word	0x0270024a
 8020240:	024e024c 	.word	0x024e024c
 8020244:	02500270 	.word	0x02500270
 8020248:	02700270 	.word	0x02700270
 802024c:	02700270 	.word	0x02700270
 8020250:	02700270 	.word	0x02700270
 8020254:	02700270 	.word	0x02700270
 8020258:	02700270 	.word	0x02700270
 802025c:	02700270 	.word	0x02700270
 8020260:	02700252 	.word	0x02700252
 8020264:	02700270 	.word	0x02700270
 8020268:	02700270 	.word	0x02700270
 802026c:	02540270 	.word	0x02540270
 8020270:	02700270 	.word	0x02700270
 8020274:	02700270 	.word	0x02700270
 8020278:	02700270 	.word	0x02700270
 802027c:	02700270 	.word	0x02700270
 8020280:	02700270 	.word	0x02700270
 8020284:	02700270 	.word	0x02700270
 8020288:	02700270 	.word	0x02700270
 802028c:	02700270 	.word	0x02700270
 8020290:	02700270 	.word	0x02700270
 8020294:	02700270 	.word	0x02700270
 8020298:	02700270 	.word	0x02700270
 802029c:	02700270 	.word	0x02700270
 80202a0:	02700270 	.word	0x02700270
 80202a4:	02700270 	.word	0x02700270
 80202a8:	02700270 	.word	0x02700270
 80202ac:	02700270 	.word	0x02700270
 80202b0:	02700270 	.word	0x02700270
 80202b4:	02700270 	.word	0x02700270
 80202b8:	02700270 	.word	0x02700270
 80202bc:	02700270 	.word	0x02700270
 80202c0:	02700270 	.word	0x02700270
 80202c4:	02700270 	.word	0x02700270
 80202c8:	02700270 	.word	0x02700270
 80202cc:	02560270 	.word	0x02560270
 80202d0:	025a0258 	.word	0x025a0258
 80202d4:	025e025c 	.word	0x025e025c
 80202d8:	02620260 	.word	0x02620260
 80202dc:	02660264 	.word	0x02660264
 80202e0:	02700268 	.word	0x02700268
 80202e4:	026c026a 	.word	0x026c026a
 80202e8:	02700270 	.word	0x02700270
 80202ec:	02700270 	.word	0x02700270
 80202f0:	02700270 	.word	0x02700270
 80202f4:	02700270 	.word	0x02700270
 80202f8:	02700270 	.word	0x02700270
 80202fc:	02700270 	.word	0x02700270
 8020300:	02700270 	.word	0x02700270
 8020304:	02700270 	.word	0x02700270
 8020308:	02700270 	.word	0x02700270
 802030c:	02700270 	.word	0x02700270
 8020310:	02700270 	.word	0x02700270
 8020314:	02700270 	.word	0x02700270
 8020318:	02700270 	.word	0x02700270
 802031c:	02700270 	.word	0x02700270
 8020320:	02700270 	.word	0x02700270
 8020324:	02700270 	.word	0x02700270
 8020328:	02700270 	.word	0x02700270
 802032c:	02700270 	.word	0x02700270
 8020330:	02700270 	.word	0x02700270
 8020334:	02700270 	.word	0x02700270
 8020338:	02700270 	.word	0x02700270
 802033c:	02700270 	.word	0x02700270
 8020340:	02700270 	.word	0x02700270
 8020344:	02700270 	.word	0x02700270
 8020348:	02700270 	.word	0x02700270
 802034c:	02700270 	.word	0x02700270
 8020350:	02700270 	.word	0x02700270
 8020354:	02700270 	.word	0x02700270
 8020358:	02700270 	.word	0x02700270
 802035c:	02700270 	.word	0x02700270
 8020360:	02700270 	.word	0x02700270
 8020364:	02700270 	.word	0x02700270
 8020368:	02700270 	.word	0x02700270
 802036c:	02700270 	.word	0x02700270
 8020370:	02700270 	.word	0x02700270
 8020374:	02700270 	.word	0x02700270
 8020378:	02700270 	.word	0x02700270
 802037c:	02700270 	.word	0x02700270
 8020380:	02700270 	.word	0x02700270
 8020384:	02700270 	.word	0x02700270
 8020388:	02700270 	.word	0x02700270
 802038c:	02700270 	.word	0x02700270
 8020390:	02700270 	.word	0x02700270
 8020394:	026e0270 	.word	0x026e0270
 8020398:	483f      	ldr	r0, [pc, #252]	@ (8020498 <mg_http_status_code_str+0x4f8>)
 802039a:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 802039c:	483f      	ldr	r0, [pc, #252]	@ (802049c <mg_http_status_code_str+0x4fc>)
 802039e:	4770      	bx	lr
    case 200: return "OK";
 80203a0:	483f      	ldr	r0, [pc, #252]	@ (80204a0 <mg_http_status_code_str+0x500>)
 80203a2:	4770      	bx	lr
    case 201: return "Created";
 80203a4:	483f      	ldr	r0, [pc, #252]	@ (80204a4 <mg_http_status_code_str+0x504>)
 80203a6:	4770      	bx	lr
    case 202: return "Accepted";
 80203a8:	483f      	ldr	r0, [pc, #252]	@ (80204a8 <mg_http_status_code_str+0x508>)
 80203aa:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 80203ac:	483f      	ldr	r0, [pc, #252]	@ (80204ac <mg_http_status_code_str+0x50c>)
 80203ae:	4770      	bx	lr
    case 204: return "No Content";
 80203b0:	483f      	ldr	r0, [pc, #252]	@ (80204b0 <mg_http_status_code_str+0x510>)
 80203b2:	4770      	bx	lr
    case 205: return "Reset Content";
 80203b4:	483f      	ldr	r0, [pc, #252]	@ (80204b4 <mg_http_status_code_str+0x514>)
 80203b6:	4770      	bx	lr
    case 206: return "Partial Content";
 80203b8:	483f      	ldr	r0, [pc, #252]	@ (80204b8 <mg_http_status_code_str+0x518>)
 80203ba:	4770      	bx	lr
    case 207: return "Multi-Status";
 80203bc:	483f      	ldr	r0, [pc, #252]	@ (80204bc <mg_http_status_code_str+0x51c>)
 80203be:	4770      	bx	lr
    case 208: return "Already Reported";
 80203c0:	483f      	ldr	r0, [pc, #252]	@ (80204c0 <mg_http_status_code_str+0x520>)
 80203c2:	4770      	bx	lr
    case 226: return "IM Used";
 80203c4:	483f      	ldr	r0, [pc, #252]	@ (80204c4 <mg_http_status_code_str+0x524>)
 80203c6:	4770      	bx	lr
    case 300: return "Multiple Choices";
 80203c8:	483f      	ldr	r0, [pc, #252]	@ (80204c8 <mg_http_status_code_str+0x528>)
 80203ca:	4770      	bx	lr
    case 301: return "Moved Permanently";
 80203cc:	483f      	ldr	r0, [pc, #252]	@ (80204cc <mg_http_status_code_str+0x52c>)
 80203ce:	4770      	bx	lr
    case 302: return "Found";
 80203d0:	483f      	ldr	r0, [pc, #252]	@ (80204d0 <mg_http_status_code_str+0x530>)
 80203d2:	4770      	bx	lr
    case 303: return "See Other";
 80203d4:	483f      	ldr	r0, [pc, #252]	@ (80204d4 <mg_http_status_code_str+0x534>)
 80203d6:	4770      	bx	lr
    case 304: return "Not Modified";
 80203d8:	483f      	ldr	r0, [pc, #252]	@ (80204d8 <mg_http_status_code_str+0x538>)
 80203da:	4770      	bx	lr
    case 305: return "Use Proxy";
 80203dc:	483f      	ldr	r0, [pc, #252]	@ (80204dc <mg_http_status_code_str+0x53c>)
 80203de:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 80203e0:	483f      	ldr	r0, [pc, #252]	@ (80204e0 <mg_http_status_code_str+0x540>)
 80203e2:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 80203e4:	483f      	ldr	r0, [pc, #252]	@ (80204e4 <mg_http_status_code_str+0x544>)
 80203e6:	4770      	bx	lr
    case 400: return "Bad Request";
 80203e8:	483f      	ldr	r0, [pc, #252]	@ (80204e8 <mg_http_status_code_str+0x548>)
 80203ea:	4770      	bx	lr
    case 401: return "Unauthorized";
 80203ec:	483f      	ldr	r0, [pc, #252]	@ (80204ec <mg_http_status_code_str+0x54c>)
 80203ee:	4770      	bx	lr
    case 402: return "Payment Required";
 80203f0:	483f      	ldr	r0, [pc, #252]	@ (80204f0 <mg_http_status_code_str+0x550>)
 80203f2:	4770      	bx	lr
    case 403: return "Forbidden";
 80203f4:	483f      	ldr	r0, [pc, #252]	@ (80204f4 <mg_http_status_code_str+0x554>)
 80203f6:	4770      	bx	lr
    case 404: return "Not Found";
 80203f8:	483f      	ldr	r0, [pc, #252]	@ (80204f8 <mg_http_status_code_str+0x558>)
 80203fa:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 80203fc:	483f      	ldr	r0, [pc, #252]	@ (80204fc <mg_http_status_code_str+0x55c>)
 80203fe:	4770      	bx	lr
    case 406: return "Not Acceptable";
 8020400:	483f      	ldr	r0, [pc, #252]	@ (8020500 <mg_http_status_code_str+0x560>)
 8020402:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8020404:	483f      	ldr	r0, [pc, #252]	@ (8020504 <mg_http_status_code_str+0x564>)
 8020406:	4770      	bx	lr
    case 408: return "Request Timeout";
 8020408:	483f      	ldr	r0, [pc, #252]	@ (8020508 <mg_http_status_code_str+0x568>)
 802040a:	4770      	bx	lr
    case 409: return "Conflict";
 802040c:	483f      	ldr	r0, [pc, #252]	@ (802050c <mg_http_status_code_str+0x56c>)
 802040e:	4770      	bx	lr
    case 410: return "Gone";
 8020410:	483f      	ldr	r0, [pc, #252]	@ (8020510 <mg_http_status_code_str+0x570>)
 8020412:	4770      	bx	lr
    case 411: return "Length Required";
 8020414:	483f      	ldr	r0, [pc, #252]	@ (8020514 <mg_http_status_code_str+0x574>)
 8020416:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8020418:	483f      	ldr	r0, [pc, #252]	@ (8020518 <mg_http_status_code_str+0x578>)
 802041a:	4770      	bx	lr
    case 413: return "Payload Too Large";
 802041c:	483f      	ldr	r0, [pc, #252]	@ (802051c <mg_http_status_code_str+0x57c>)
 802041e:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 8020420:	483f      	ldr	r0, [pc, #252]	@ (8020520 <mg_http_status_code_str+0x580>)
 8020422:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8020424:	483f      	ldr	r0, [pc, #252]	@ (8020524 <mg_http_status_code_str+0x584>)
 8020426:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8020428:	483f      	ldr	r0, [pc, #252]	@ (8020528 <mg_http_status_code_str+0x588>)
 802042a:	4770      	bx	lr
    case 417: return "Expectation Failed";
 802042c:	483f      	ldr	r0, [pc, #252]	@ (802052c <mg_http_status_code_str+0x58c>)
 802042e:	4770      	bx	lr
    case 418: return "I'm a teapot";
 8020430:	483f      	ldr	r0, [pc, #252]	@ (8020530 <mg_http_status_code_str+0x590>)
 8020432:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8020434:	483f      	ldr	r0, [pc, #252]	@ (8020534 <mg_http_status_code_str+0x594>)
 8020436:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8020438:	483f      	ldr	r0, [pc, #252]	@ (8020538 <mg_http_status_code_str+0x598>)
 802043a:	4770      	bx	lr
    case 423: return "Locked";
 802043c:	483f      	ldr	r0, [pc, #252]	@ (802053c <mg_http_status_code_str+0x59c>)
 802043e:	4770      	bx	lr
    case 424: return "Failed Dependency";
 8020440:	483f      	ldr	r0, [pc, #252]	@ (8020540 <mg_http_status_code_str+0x5a0>)
 8020442:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8020444:	483f      	ldr	r0, [pc, #252]	@ (8020544 <mg_http_status_code_str+0x5a4>)
 8020446:	4770      	bx	lr
    case 428: return "Precondition Required";
 8020448:	483f      	ldr	r0, [pc, #252]	@ (8020548 <mg_http_status_code_str+0x5a8>)
 802044a:	4770      	bx	lr
    case 429: return "Too Many Requests";
 802044c:	483f      	ldr	r0, [pc, #252]	@ (802054c <mg_http_status_code_str+0x5ac>)
 802044e:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 8020450:	483f      	ldr	r0, [pc, #252]	@ (8020550 <mg_http_status_code_str+0x5b0>)
 8020452:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8020454:	483f      	ldr	r0, [pc, #252]	@ (8020554 <mg_http_status_code_str+0x5b4>)
 8020456:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8020458:	483f      	ldr	r0, [pc, #252]	@ (8020558 <mg_http_status_code_str+0x5b8>)
 802045a:	4770      	bx	lr
    case 499: return "Client Closed Request";
 802045c:	483f      	ldr	r0, [pc, #252]	@ (802055c <mg_http_status_code_str+0x5bc>)
 802045e:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8020460:	483f      	ldr	r0, [pc, #252]	@ (8020560 <mg_http_status_code_str+0x5c0>)
 8020462:	4770      	bx	lr
    case 501: return "Not Implemented";
 8020464:	483f      	ldr	r0, [pc, #252]	@ (8020564 <mg_http_status_code_str+0x5c4>)
 8020466:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8020468:	483f      	ldr	r0, [pc, #252]	@ (8020568 <mg_http_status_code_str+0x5c8>)
 802046a:	4770      	bx	lr
    case 503: return "Service Unavailable";
 802046c:	483f      	ldr	r0, [pc, #252]	@ (802056c <mg_http_status_code_str+0x5cc>)
 802046e:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8020470:	483f      	ldr	r0, [pc, #252]	@ (8020570 <mg_http_status_code_str+0x5d0>)
 8020472:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020474:	483f      	ldr	r0, [pc, #252]	@ (8020574 <mg_http_status_code_str+0x5d4>)
 8020476:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020478:	483f      	ldr	r0, [pc, #252]	@ (8020578 <mg_http_status_code_str+0x5d8>)
 802047a:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 802047c:	483f      	ldr	r0, [pc, #252]	@ (802057c <mg_http_status_code_str+0x5dc>)
 802047e:	4770      	bx	lr
    case 508: return "Loop Detected";
 8020480:	483f      	ldr	r0, [pc, #252]	@ (8020580 <mg_http_status_code_str+0x5e0>)
 8020482:	4770      	bx	lr
    case 510: return "Not Extended";
 8020484:	483f      	ldr	r0, [pc, #252]	@ (8020584 <mg_http_status_code_str+0x5e4>)
 8020486:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020488:	483f      	ldr	r0, [pc, #252]	@ (8020588 <mg_http_status_code_str+0x5e8>)
 802048a:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 802048c:	483f      	ldr	r0, [pc, #252]	@ (802058c <mg_http_status_code_str+0x5ec>)
 802048e:	4770      	bx	lr
    default: return "";
 8020490:	483f      	ldr	r0, [pc, #252]	@ (8020590 <mg_http_status_code_str+0x5f0>)
 8020492:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020494:	483f      	ldr	r0, [pc, #252]	@ (8020594 <mg_http_status_code_str+0x5f4>)
  }
}
 8020496:	4770      	bx	lr
 8020498:	08039ef0 	.word	0x08039ef0
 802049c:	08039f10 	.word	0x08039f10
 80204a0:	08039f1c 	.word	0x08039f1c
 80204a4:	08039f20 	.word	0x08039f20
 80204a8:	08039f28 	.word	0x08039f28
 80204ac:	08039f34 	.word	0x08039f34
 80204b0:	08039f54 	.word	0x08039f54
 80204b4:	08039f60 	.word	0x08039f60
 80204b8:	08039f70 	.word	0x08039f70
 80204bc:	08039f80 	.word	0x08039f80
 80204c0:	08039f90 	.word	0x08039f90
 80204c4:	08039fa4 	.word	0x08039fa4
 80204c8:	08039fac 	.word	0x08039fac
 80204cc:	08039fc0 	.word	0x08039fc0
 80204d0:	0803a064 	.word	0x0803a064
 80204d4:	08039fd4 	.word	0x08039fd4
 80204d8:	08039fe0 	.word	0x08039fe0
 80204dc:	08039ff0 	.word	0x08039ff0
 80204e0:	08039ffc 	.word	0x08039ffc
 80204e4:	0803a010 	.word	0x0803a010
 80204e8:	0803a024 	.word	0x0803a024
 80204ec:	0803a030 	.word	0x0803a030
 80204f0:	0803a040 	.word	0x0803a040
 80204f4:	0803a054 	.word	0x0803a054
 80204f8:	0803a060 	.word	0x0803a060
 80204fc:	0803a06c 	.word	0x0803a06c
 8020500:	0803a080 	.word	0x0803a080
 8020504:	0803a090 	.word	0x0803a090
 8020508:	0803a0b0 	.word	0x0803a0b0
 802050c:	0803a0c0 	.word	0x0803a0c0
 8020510:	0803a0cc 	.word	0x0803a0cc
 8020514:	0803a0d4 	.word	0x0803a0d4
 8020518:	0803a0e4 	.word	0x0803a0e4
 802051c:	0803a0f8 	.word	0x0803a0f8
 8020520:	0803a10c 	.word	0x0803a10c
 8020524:	0803a124 	.word	0x0803a124
 8020528:	0803a13c 	.word	0x0803a13c
 802052c:	0803a15c 	.word	0x0803a15c
 8020530:	0803a170 	.word	0x0803a170
 8020534:	0803a180 	.word	0x0803a180
 8020538:	0803a194 	.word	0x0803a194
 802053c:	0803a1ac 	.word	0x0803a1ac
 8020540:	0803a1b4 	.word	0x0803a1b4
 8020544:	0803a1c8 	.word	0x0803a1c8
 8020548:	0803a1dc 	.word	0x0803a1dc
 802054c:	0803a1f4 	.word	0x0803a1f4
 8020550:	0803a208 	.word	0x0803a208
 8020554:	0803a228 	.word	0x0803a228
 8020558:	0803a24c 	.word	0x0803a24c
 802055c:	0803a26c 	.word	0x0803a26c
 8020560:	0803a284 	.word	0x0803a284
 8020564:	0803a29c 	.word	0x0803a29c
 8020568:	0803a2ac 	.word	0x0803a2ac
 802056c:	0803a2b8 	.word	0x0803a2b8
 8020570:	0803a2cc 	.word	0x0803a2cc
 8020574:	0803a2dc 	.word	0x0803a2dc
 8020578:	0803a2f8 	.word	0x0803a2f8
 802057c:	0803a310 	.word	0x0803a310
 8020580:	0803a328 	.word	0x0803a328
 8020584:	0803a338 	.word	0x0803a338
 8020588:	0803a348 	.word	0x0803a348
 802058c:	0803a368 	.word	0x0803a368
 8020590:	08036c80 	.word	0x08036c80
 8020594:	08039efc 	.word	0x08039efc

08020598 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020598:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 802059c:	2b09      	cmp	r3, #9
 802059e:	d91c      	bls.n	80205da <mg_is_url_safe+0x42>
 80205a0:	285f      	cmp	r0, #95	@ 0x5f
 80205a2:	d01c      	beq.n	80205de <mg_is_url_safe+0x46>
 80205a4:	dc0d      	bgt.n	80205c2 <mg_is_url_safe+0x2a>
 80205a6:	282e      	cmp	r0, #46	@ 0x2e
 80205a8:	d01b      	beq.n	80205e2 <mg_is_url_safe+0x4a>
 80205aa:	dd04      	ble.n	80205b6 <mg_is_url_safe+0x1e>
 80205ac:	3841      	subs	r0, #65	@ 0x41
 80205ae:	2819      	cmp	r0, #25
 80205b0:	d805      	bhi.n	80205be <mg_is_url_safe+0x26>
 80205b2:	2001      	movs	r0, #1
 80205b4:	4770      	bx	lr
 80205b6:	282d      	cmp	r0, #45	@ 0x2d
 80205b8:	d115      	bne.n	80205e6 <mg_is_url_safe+0x4e>
 80205ba:	2001      	movs	r0, #1
 80205bc:	4770      	bx	lr
 80205be:	2000      	movs	r0, #0
 80205c0:	4770      	bx	lr
 80205c2:	287a      	cmp	r0, #122	@ 0x7a
 80205c4:	dd03      	ble.n	80205ce <mg_is_url_safe+0x36>
 80205c6:	287e      	cmp	r0, #126	@ 0x7e
 80205c8:	d10f      	bne.n	80205ea <mg_is_url_safe+0x52>
 80205ca:	2001      	movs	r0, #1
 80205cc:	4770      	bx	lr
 80205ce:	2861      	cmp	r0, #97	@ 0x61
 80205d0:	da01      	bge.n	80205d6 <mg_is_url_safe+0x3e>
 80205d2:	2000      	movs	r0, #0
 80205d4:	4770      	bx	lr
 80205d6:	2001      	movs	r0, #1
 80205d8:	4770      	bx	lr
 80205da:	2001      	movs	r0, #1
 80205dc:	4770      	bx	lr
 80205de:	2001      	movs	r0, #1
 80205e0:	4770      	bx	lr
 80205e2:	2001      	movs	r0, #1
 80205e4:	4770      	bx	lr
 80205e6:	2000      	movs	r0, #0
 80205e8:	4770      	bx	lr
 80205ea:	2000      	movs	r0, #0
}
 80205ec:	4770      	bx	lr

080205ee <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80205ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80205f2:	2b09      	cmp	r3, #9
 80205f4:	d908      	bls.n	8020608 <is_hex_digit+0x1a>
 80205f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80205fa:	2b05      	cmp	r3, #5
 80205fc:	d906      	bls.n	802060c <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 80205fe:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020600:	2805      	cmp	r0, #5
 8020602:	d805      	bhi.n	8020610 <is_hex_digit+0x22>
 8020604:	2001      	movs	r0, #1
 8020606:	4770      	bx	lr
 8020608:	2001      	movs	r0, #1
 802060a:	4770      	bx	lr
 802060c:	2001      	movs	r0, #1
 802060e:	4770      	bx	lr
 8020610:	2000      	movs	r0, #0
}
 8020612:	4770      	bx	lr

08020614 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8020614:	b129      	cbz	r1, 8020622 <roundup+0xe>
 8020616:	4408      	add	r0, r1
 8020618:	3801      	subs	r0, #1
 802061a:	fbb0 f0f1 	udiv	r0, r0, r1
 802061e:	fb01 f000 	mul.w	r0, r1, r0
}
 8020622:	4770      	bx	lr

08020624 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8020624:	b108      	cbz	r0, 802062a <escapeseq+0x6>
 8020626:	4802      	ldr	r0, [pc, #8]	@ (8020630 <escapeseq+0xc>)
 8020628:	4770      	bx	lr
 802062a:	4802      	ldr	r0, [pc, #8]	@ (8020634 <escapeseq+0x10>)
}
 802062c:	4770      	bx	lr
 802062e:	bf00      	nop
 8020630:	0803a388 	.word	0x0803a388
 8020634:	0803a390 	.word	0x0803a390

08020638 <json_esc>:

static char json_esc(int c, int esc) {
 8020638:	b570      	push	{r4, r5, r6, lr}
 802063a:	4604      	mov	r4, r0
 802063c:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802063e:	4608      	mov	r0, r1
 8020640:	f7ff fff0 	bl	8020624 <escapeseq>
 8020644:	4606      	mov	r6, r0
 8020646:	fab5 f085 	clz	r0, r5
 802064a:	0940      	lsrs	r0, r0, #5
 802064c:	f7ff ffea 	bl	8020624 <escapeseq>
 8020650:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8020652:	4633      	mov	r3, r6
 8020654:	e000      	b.n	8020658 <json_esc+0x20>
 8020656:	3301      	adds	r3, #1
 8020658:	7818      	ldrb	r0, [r3, #0]
 802065a:	b118      	cbz	r0, 8020664 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 802065c:	42a0      	cmp	r0, r4
 802065e:	d1fa      	bne.n	8020656 <json_esc+0x1e>
 8020660:	1b9b      	subs	r3, r3, r6
 8020662:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020664:	bd70      	pop	{r4, r5, r6, pc}

08020666 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802066a:	4607      	mov	r7, r0
 802066c:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 802066e:	2400      	movs	r4, #0
 8020670:	e003      	b.n	802067a <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020672:	b1d5      	cbz	r5, 80206aa <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020674:	2d22      	cmp	r5, #34	@ 0x22
 8020676:	d015      	beq.n	80206a4 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020678:	3401      	adds	r4, #1
 802067a:	42b4      	cmp	r4, r6
 802067c:	da10      	bge.n	80206a0 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802067e:	4623      	mov	r3, r4
 8020680:	5d3d      	ldrb	r5, [r7, r4]
 8020682:	2d5c      	cmp	r5, #92	@ 0x5c
 8020684:	d1f5      	bne.n	8020672 <mg_pass_string+0xc>
 8020686:	f104 0801 	add.w	r8, r4, #1
 802068a:	45b0      	cmp	r8, r6
 802068c:	daf1      	bge.n	8020672 <mg_pass_string+0xc>
 802068e:	443b      	add	r3, r7
 8020690:	2101      	movs	r1, #1
 8020692:	7858      	ldrb	r0, [r3, #1]
 8020694:	f7ff ffd0 	bl	8020638 <json_esc>
 8020698:	2800      	cmp	r0, #0
 802069a:	d0ea      	beq.n	8020672 <mg_pass_string+0xc>
      i++;
 802069c:	4644      	mov	r4, r8
 802069e:	e7eb      	b.n	8020678 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 80206a0:	f06f 0401 	mvn.w	r4, #1
}
 80206a4:	4620      	mov	r0, r4
 80206a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 80206aa:	f06f 0401 	mvn.w	r4, #1
 80206ae:	e7f9      	b.n	80206a4 <mg_pass_string+0x3e>

080206b0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80206b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206b4:	ed2d 8b02 	vpush	{d8}
 80206b8:	b085      	sub	sp, #20
 80206ba:	4681      	mov	r9, r0
 80206bc:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 80206be:	f1b1 0800 	subs.w	r8, r1, #0
 80206c2:	dd49      	ble.n	8020758 <mg_atod+0xa8>
 80206c4:	7803      	ldrb	r3, [r0, #0]
 80206c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80206c8:	d04c      	beq.n	8020764 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 80206ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80206cc:	d04e      	beq.n	802076c <mg_atod+0xbc>
  int i = 0, sign = 1;
 80206ce:	f04f 0a01 	mov.w	sl, #1
 80206d2:	2400      	movs	r4, #0
 80206d4:	e043      	b.n	802075e <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 80206d6:	2200      	movs	r2, #0
 80206d8:	4b71      	ldr	r3, [pc, #452]	@ (80208a0 <mg_atod+0x1f0>)
 80206da:	4630      	mov	r0, r6
 80206dc:	4639      	mov	r1, r7
 80206de:	f7ef ffa3 	bl	8010628 <__aeabi_dmul>
 80206e2:	4606      	mov	r6, r0
 80206e4:	460f      	mov	r7, r1
    d += p[i] - '0';
 80206e6:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 80206ea:	f7ef ff33 	bl	8010554 <__aeabi_i2d>
 80206ee:	4632      	mov	r2, r6
 80206f0:	463b      	mov	r3, r7
 80206f2:	f7ef fde3 	bl	80102bc <__adddf3>
 80206f6:	4606      	mov	r6, r0
 80206f8:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80206fa:	3401      	adds	r4, #1
 80206fc:	4544      	cmp	r4, r8
 80206fe:	da05      	bge.n	802070c <mg_atod+0x5c>
 8020700:	f819 5004 	ldrb.w	r5, [r9, r4]
 8020704:	2d2f      	cmp	r5, #47	@ 0x2f
 8020706:	d901      	bls.n	802070c <mg_atod+0x5c>
 8020708:	2d39      	cmp	r5, #57	@ 0x39
 802070a:	d9e4      	bls.n	80206d6 <mg_atod+0x26>
  }
  d *= sign;
 802070c:	4650      	mov	r0, sl
 802070e:	f7ef ff21 	bl	8010554 <__aeabi_i2d>
 8020712:	4602      	mov	r2, r0
 8020714:	460b      	mov	r3, r1
 8020716:	ec43 2b18 	vmov	d8, r2, r3
 802071a:	4632      	mov	r2, r6
 802071c:	463b      	mov	r3, r7
 802071e:	f7ef ff83 	bl	8010628 <__aeabi_dmul>
 8020722:	4606      	mov	r6, r0
 8020724:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8020726:	4544      	cmp	r4, r8
 8020728:	da03      	bge.n	8020732 <mg_atod+0x82>
 802072a:	f819 3004 	ldrb.w	r3, [r9, r4]
 802072e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020730:	d020      	beq.n	8020774 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8020732:	4544      	cmp	r4, r8
 8020734:	f280 80a1 	bge.w	802087a <mg_atod+0x1ca>
 8020738:	f819 3004 	ldrb.w	r3, [r9, r4]
 802073c:	2b65      	cmp	r3, #101	@ 0x65
 802073e:	d002      	beq.n	8020746 <mg_atod+0x96>
 8020740:	2b45      	cmp	r3, #69	@ 0x45
 8020742:	f040 809a 	bne.w	802087a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8020746:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8020748:	4598      	cmp	r8, r3
 802074a:	dd58      	ble.n	80207fe <mg_atod+0x14e>
 802074c:	f819 2003 	ldrb.w	r2, [r9, r3]
 8020750:	2a2d      	cmp	r2, #45	@ 0x2d
 8020752:	d051      	beq.n	80207f8 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8020754:	2200      	movs	r2, #0
 8020756:	e053      	b.n	8020800 <mg_atod+0x150>
  int i = 0, sign = 1;
 8020758:	f04f 0a01 	mov.w	sl, #1
 802075c:	2400      	movs	r4, #0
    i++;
 802075e:	2600      	movs	r6, #0
 8020760:	2700      	movs	r7, #0
 8020762:	e7cb      	b.n	80206fc <mg_atod+0x4c>
    sign = -1, i++;
 8020764:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020768:	2401      	movs	r4, #1
 802076a:	e7f8      	b.n	802075e <mg_atod+0xae>
  int i = 0, sign = 1;
 802076c:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020770:	4654      	mov	r4, sl
 8020772:	e7f4      	b.n	802075e <mg_atod+0xae>
    i++;
 8020774:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020776:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 802077a:	e9db ab00 	ldrd	sl, fp, [fp]
 802077e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020898 <mg_atod+0x1e8>
 8020782:	ec53 2b17 	vmov	r2, r3, d7
 8020786:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802078a:	464f      	mov	r7, r9
 802078c:	4645      	mov	r5, r8
 802078e:	4690      	mov	r8, r2
 8020790:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020792:	e017      	b.n	80207c4 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020794:	3830      	subs	r0, #48	@ 0x30
 8020796:	f7ef fedd 	bl	8010554 <__aeabi_i2d>
 802079a:	4652      	mov	r2, sl
 802079c:	465b      	mov	r3, fp
 802079e:	f7ef ff43 	bl	8010628 <__aeabi_dmul>
 80207a2:	4602      	mov	r2, r0
 80207a4:	460b      	mov	r3, r1
 80207a6:	4640      	mov	r0, r8
 80207a8:	4649      	mov	r1, r9
 80207aa:	f7ef fd87 	bl	80102bc <__adddf3>
 80207ae:	4680      	mov	r8, r0
 80207b0:	4689      	mov	r9, r1
      base /= 10.0;
 80207b2:	2200      	movs	r2, #0
 80207b4:	4b3a      	ldr	r3, [pc, #232]	@ (80208a0 <mg_atod+0x1f0>)
 80207b6:	4650      	mov	r0, sl
 80207b8:	4659      	mov	r1, fp
 80207ba:	f7f0 f85f 	bl	801087c <__aeabi_ddiv>
 80207be:	4682      	mov	sl, r0
 80207c0:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80207c2:	3401      	adds	r4, #1
 80207c4:	42ac      	cmp	r4, r5
 80207c6:	da04      	bge.n	80207d2 <mg_atod+0x122>
 80207c8:	5d38      	ldrb	r0, [r7, r4]
 80207ca:	282f      	cmp	r0, #47	@ 0x2f
 80207cc:	d901      	bls.n	80207d2 <mg_atod+0x122>
 80207ce:	2839      	cmp	r0, #57	@ 0x39
 80207d0:	d9e0      	bls.n	8020794 <mg_atod+0xe4>
    d += frac * sign;
 80207d2:	4642      	mov	r2, r8
 80207d4:	464b      	mov	r3, r9
 80207d6:	46b9      	mov	r9, r7
 80207d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80207dc:	46a8      	mov	r8, r5
 80207de:	ec51 0b18 	vmov	r0, r1, d8
 80207e2:	f7ef ff21 	bl	8010628 <__aeabi_dmul>
 80207e6:	4602      	mov	r2, r0
 80207e8:	460b      	mov	r3, r1
 80207ea:	4630      	mov	r0, r6
 80207ec:	4639      	mov	r1, r7
 80207ee:	f7ef fd65 	bl	80102bc <__adddf3>
 80207f2:	4606      	mov	r6, r0
 80207f4:	460f      	mov	r7, r1
 80207f6:	e79c      	b.n	8020732 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 80207f8:	1ca3      	adds	r3, r4, #2
 80207fa:	2201      	movs	r2, #1
 80207fc:	e000      	b.n	8020800 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 80207fe:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8020800:	4543      	cmp	r3, r8
 8020802:	da03      	bge.n	802080c <mg_atod+0x15c>
 8020804:	f819 1003 	ldrb.w	r1, [r9, r3]
 8020808:	292b      	cmp	r1, #43	@ 0x2b
 802080a:	d013      	beq.n	8020834 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 802080c:	461c      	mov	r4, r3
 802080e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020810:	4544      	cmp	r4, r8
 8020812:	da11      	bge.n	8020838 <mg_atod+0x188>
 8020814:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020818:	2b2f      	cmp	r3, #47	@ 0x2f
 802081a:	d90d      	bls.n	8020838 <mg_atod+0x188>
 802081c:	2b39      	cmp	r3, #57	@ 0x39
 802081e:	d80b      	bhi.n	8020838 <mg_atod+0x188>
 8020820:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020824:	da08      	bge.n	8020838 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020826:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802082a:	3401      	adds	r4, #1
 802082c:	3b30      	subs	r3, #48	@ 0x30
 802082e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020832:	e7ed      	b.n	8020810 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020834:	3301      	adds	r3, #1
 8020836:	e7e9      	b.n	802080c <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020838:	b102      	cbz	r2, 802083c <mg_atod+0x18c>
 802083a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 802083c:	f04f 0800 	mov.w	r8, #0
 8020840:	e009      	b.n	8020856 <mg_atod+0x1a6>
 8020842:	2200      	movs	r2, #0
 8020844:	4b16      	ldr	r3, [pc, #88]	@ (80208a0 <mg_atod+0x1f0>)
 8020846:	4630      	mov	r0, r6
 8020848:	4639      	mov	r1, r7
 802084a:	f7ef feed 	bl	8010628 <__aeabi_dmul>
 802084e:	4606      	mov	r6, r0
 8020850:	460f      	mov	r7, r1
 8020852:	f108 0801 	add.w	r8, r8, #1
 8020856:	45a8      	cmp	r8, r5
 8020858:	dbf3      	blt.n	8020842 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802085a:	f04f 0800 	mov.w	r8, #0
 802085e:	e009      	b.n	8020874 <mg_atod+0x1c4>
 8020860:	2200      	movs	r2, #0
 8020862:	4b0f      	ldr	r3, [pc, #60]	@ (80208a0 <mg_atod+0x1f0>)
 8020864:	4630      	mov	r0, r6
 8020866:	4639      	mov	r1, r7
 8020868:	f7f0 f808 	bl	801087c <__aeabi_ddiv>
 802086c:	4606      	mov	r6, r0
 802086e:	460f      	mov	r7, r1
 8020870:	f108 0801 	add.w	r8, r8, #1
 8020874:	426b      	negs	r3, r5
 8020876:	4543      	cmp	r3, r8
 8020878:	dcf2      	bgt.n	8020860 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 802087a:	9b01      	ldr	r3, [sp, #4]
 802087c:	b103      	cbz	r3, 8020880 <mg_atod+0x1d0>
 802087e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020880:	ec47 6b10 	vmov	d0, r6, r7
 8020884:	b005      	add	sp, #20
 8020886:	ecbd 8b02 	vpop	{d8}
 802088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802088e:	bf00      	nop
 8020890:	9999999a 	.word	0x9999999a
 8020894:	3fb99999 	.word	0x3fb99999
	...
 80208a0:	40240000 	.word	0x40240000

080208a4 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 80208a4:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 80208a6:	4b03      	ldr	r3, [pc, #12]	@ (80208b4 <logc+0x10>)
 80208a8:	681b      	ldr	r3, [r3, #0]
 80208aa:	4a03      	ldr	r2, [pc, #12]	@ (80208b8 <logc+0x14>)
 80208ac:	6811      	ldr	r1, [r2, #0]
 80208ae:	4798      	blx	r3
}
 80208b0:	bd08      	pop	{r3, pc}
 80208b2:	bf00      	nop
 80208b4:	20000128 	.word	0x20000128
 80208b8:	20019ee0 	.word	0x20019ee0

080208bc <logs>:

static void logs(const char *buf, size_t len) {
 80208bc:	b570      	push	{r4, r5, r6, lr}
 80208be:	4606      	mov	r6, r0
 80208c0:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80208c2:	2400      	movs	r4, #0
 80208c4:	e003      	b.n	80208ce <logs+0x12>
 80208c6:	5d30      	ldrb	r0, [r6, r4]
 80208c8:	f7ff ffec 	bl	80208a4 <logc>
 80208cc:	3401      	adds	r4, #1
 80208ce:	42ac      	cmp	r4, r5
 80208d0:	d3f9      	bcc.n	80208c6 <logs+0xa>
}
 80208d2:	bd70      	pop	{r4, r5, r6, pc}

080208d4 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80208d4:	2809      	cmp	r0, #9
 80208d6:	d803      	bhi.n	80208e0 <nibble+0xc>
 80208d8:	b2c0      	uxtb	r0, r0
 80208da:	3030      	adds	r0, #48	@ 0x30
 80208dc:	b2c0      	uxtb	r0, r0
 80208de:	4770      	bx	lr
 80208e0:	b2c0      	uxtb	r0, r0
 80208e2:	3057      	adds	r0, #87	@ 0x57
 80208e4:	b2c0      	uxtb	r0, r0
}
 80208e6:	4770      	bx	lr

080208e8 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 80208e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208ec:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 80208ee:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 80208f0:	6883      	ldr	r3, [r0, #8]
 80208f2:	68c2      	ldr	r2, [r0, #12]
 80208f4:	4053      	eors	r3, r2
 80208f6:	4033      	ands	r3, r6
 80208f8:	4053      	eors	r3, r2
 80208fa:	f8d1 a000 	ldr.w	sl, [r1]
 80208fe:	4453      	add	r3, sl
 8020900:	6802      	ldr	r2, [r0, #0]
 8020902:	4413      	add	r3, r2
 8020904:	4ae0      	ldr	r2, [pc, #896]	@ (8020c88 <mg_md5_transform+0x3a0>)
 8020906:	441a      	add	r2, r3
 8020908:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802090c:	6883      	ldr	r3, [r0, #8]
 802090e:	ea86 0503 	eor.w	r5, r6, r3
 8020912:	4015      	ands	r5, r2
 8020914:	405d      	eors	r5, r3
 8020916:	684b      	ldr	r3, [r1, #4]
 8020918:	9301      	str	r3, [sp, #4]
 802091a:	441d      	add	r5, r3
 802091c:	68c4      	ldr	r4, [r0, #12]
 802091e:	4425      	add	r5, r4
 8020920:	4bda      	ldr	r3, [pc, #872]	@ (8020c8c <mg_md5_transform+0x3a4>)
 8020922:	442b      	add	r3, r5
 8020924:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020928:	ea86 0502 	eor.w	r5, r6, r2
 802092c:	401d      	ands	r5, r3
 802092e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020930:	4075      	eors	r5, r6
 8020932:	688c      	ldr	r4, [r1, #8]
 8020934:	4425      	add	r5, r4
 8020936:	6886      	ldr	r6, [r0, #8]
 8020938:	4435      	add	r5, r6
 802093a:	4ed5      	ldr	r6, [pc, #852]	@ (8020c90 <mg_md5_transform+0x3a8>)
 802093c:	442e      	add	r6, r5
 802093e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8020942:	ea82 0703 	eor.w	r7, r2, r3
 8020946:	ea07 070c 	and.w	r7, r7, ip
 802094a:	4057      	eors	r7, r2
 802094c:	68cd      	ldr	r5, [r1, #12]
 802094e:	950a      	str	r5, [sp, #40]	@ 0x28
 8020950:	442f      	add	r7, r5
 8020952:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020954:	4437      	add	r7, r6
 8020956:	4dcf      	ldr	r5, [pc, #828]	@ (8020c94 <mg_md5_transform+0x3ac>)
 8020958:	443d      	add	r5, r7
 802095a:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802095e:	ea83 070c 	eor.w	r7, r3, ip
 8020962:	402f      	ands	r7, r5
 8020964:	405f      	eors	r7, r3
 8020966:	690e      	ldr	r6, [r1, #16]
 8020968:	9602      	str	r6, [sp, #8]
 802096a:	4437      	add	r7, r6
 802096c:	4417      	add	r7, r2
 802096e:	4aca      	ldr	r2, [pc, #808]	@ (8020c98 <mg_md5_transform+0x3b0>)
 8020970:	443a      	add	r2, r7
 8020972:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020976:	ea8c 0705 	eor.w	r7, ip, r5
 802097a:	4017      	ands	r7, r2
 802097c:	ea87 070c 	eor.w	r7, r7, ip
 8020980:	694e      	ldr	r6, [r1, #20]
 8020982:	9603      	str	r6, [sp, #12]
 8020984:	4437      	add	r7, r6
 8020986:	441f      	add	r7, r3
 8020988:	4bc4      	ldr	r3, [pc, #784]	@ (8020c9c <mg_md5_transform+0x3b4>)
 802098a:	443b      	add	r3, r7
 802098c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8020990:	ea85 0702 	eor.w	r7, r5, r2
 8020994:	401f      	ands	r7, r3
 8020996:	406f      	eors	r7, r5
 8020998:	698e      	ldr	r6, [r1, #24]
 802099a:	9604      	str	r6, [sp, #16]
 802099c:	4437      	add	r7, r6
 802099e:	eb0c 0607 	add.w	r6, ip, r7
 80209a2:	4fbf      	ldr	r7, [pc, #764]	@ (8020ca0 <mg_md5_transform+0x3b8>)
 80209a4:	4437      	add	r7, r6
 80209a6:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 80209aa:	ea82 0603 	eor.w	r6, r2, r3
 80209ae:	ea06 060c 	and.w	r6, r6, ip
 80209b2:	4056      	eors	r6, r2
 80209b4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80209b8:	444e      	add	r6, r9
 80209ba:	4435      	add	r5, r6
 80209bc:	4fb9      	ldr	r7, [pc, #740]	@ (8020ca4 <mg_md5_transform+0x3bc>)
 80209be:	442f      	add	r7, r5
 80209c0:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 80209c4:	ea83 050c 	eor.w	r5, r3, ip
 80209c8:	403d      	ands	r5, r7
 80209ca:	405d      	eors	r5, r3
 80209cc:	6a0e      	ldr	r6, [r1, #32]
 80209ce:	9605      	str	r6, [sp, #20]
 80209d0:	4435      	add	r5, r6
 80209d2:	442a      	add	r2, r5
 80209d4:	4eb4      	ldr	r6, [pc, #720]	@ (8020ca8 <mg_md5_transform+0x3c0>)
 80209d6:	4416      	add	r6, r2
 80209d8:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 80209dc:	ea8c 0207 	eor.w	r2, ip, r7
 80209e0:	4032      	ands	r2, r6
 80209e2:	ea82 020c 	eor.w	r2, r2, ip
 80209e6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80209e8:	9506      	str	r5, [sp, #24]
 80209ea:	442a      	add	r2, r5
 80209ec:	4413      	add	r3, r2
 80209ee:	4daf      	ldr	r5, [pc, #700]	@ (8020cac <mg_md5_transform+0x3c4>)
 80209f0:	441d      	add	r5, r3
 80209f2:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 80209f6:	ea87 0306 	eor.w	r3, r7, r6
 80209fa:	402b      	ands	r3, r5
 80209fc:	407b      	eors	r3, r7
 80209fe:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8020a00:	9207      	str	r2, [sp, #28]
 8020a02:	4413      	add	r3, r2
 8020a04:	4463      	add	r3, ip
 8020a06:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 8020a0a:	3b4f      	subs	r3, #79	@ 0x4f
 8020a0c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8020a10:	ea86 0c05 	eor.w	ip, r6, r5
 8020a14:	ea0c 0c03 	and.w	ip, ip, r3
 8020a18:	ea8c 0c06 	eor.w	ip, ip, r6
 8020a1c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020a1e:	9208      	str	r2, [sp, #32]
 8020a20:	4494      	add	ip, r2
 8020a22:	4467      	add	r7, ip
 8020a24:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8020cd0 <mg_md5_transform+0x3e8>
 8020a28:	44be      	add	lr, r7
 8020a2a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 8020a2e:	ea85 0c03 	eor.w	ip, r5, r3
 8020a32:	ea0c 0c0e 	and.w	ip, ip, lr
 8020a36:	ea8c 0c05 	eor.w	ip, ip, r5
 8020a3a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8020a3c:	44bc      	add	ip, r7
 8020a3e:	4466      	add	r6, ip
 8020a40:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8020cd4 <mg_md5_transform+0x3ec>
 8020a44:	44b4      	add	ip, r6
 8020a46:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 8020a4a:	ea83 080e 	eor.w	r8, r3, lr
 8020a4e:	ea08 080c 	and.w	r8, r8, ip
 8020a52:	ea88 0803 	eor.w	r8, r8, r3
 8020a56:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8020a58:	44b0      	add	r8, r6
 8020a5a:	44a8      	add	r8, r5
 8020a5c:	4d94      	ldr	r5, [pc, #592]	@ (8020cb0 <mg_md5_transform+0x3c8>)
 8020a5e:	4445      	add	r5, r8
 8020a60:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8020a64:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020a68:	ea0b 0b05 	and.w	fp, fp, r5
 8020a6c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020a70:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8020a74:	44c3      	add	fp, r8
 8020a76:	449b      	add	fp, r3
 8020a78:	4b8e      	ldr	r3, [pc, #568]	@ (8020cb4 <mg_md5_transform+0x3cc>)
 8020a7a:	445b      	add	r3, fp
 8020a7c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8020a80:	ea8c 0b05 	eor.w	fp, ip, r5
 8020a84:	ea0b 0b03 	and.w	fp, fp, r3
 8020a88:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020a8c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8020a8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020a90:	448b      	add	fp, r1
 8020a92:	44f3      	add	fp, lr
 8020a94:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8020cd8 <mg_md5_transform+0x3f0>
 8020a98:	44de      	add	lr, fp
 8020a9a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 8020a9e:	ea83 0b0e 	eor.w	fp, r3, lr
 8020aa2:	ea0b 0b05 	and.w	fp, fp, r5
 8020aa6:	ea8b 0b03 	eor.w	fp, fp, r3
 8020aaa:	9a01      	ldr	r2, [sp, #4]
 8020aac:	4493      	add	fp, r2
 8020aae:	44e3      	add	fp, ip
 8020ab0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020cdc <mg_md5_transform+0x3f4>
 8020ab4:	44dc      	add	ip, fp
 8020ab6:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 8020aba:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020abe:	ea0b 0b03 	and.w	fp, fp, r3
 8020ac2:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020ac6:	9a04      	ldr	r2, [sp, #16]
 8020ac8:	4493      	add	fp, r2
 8020aca:	44ab      	add	fp, r5
 8020acc:	4d7a      	ldr	r5, [pc, #488]	@ (8020cb8 <mg_md5_transform+0x3d0>)
 8020ace:	445d      	add	r5, fp
 8020ad0:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8020ad4:	ea8c 0b05 	eor.w	fp, ip, r5
 8020ad8:	ea0b 0b0e 	and.w	fp, fp, lr
 8020adc:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020ae0:	9908      	ldr	r1, [sp, #32]
 8020ae2:	448b      	add	fp, r1
 8020ae4:	445b      	add	r3, fp
 8020ae6:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8020ce0 <mg_md5_transform+0x3f8>
 8020aea:	449b      	add	fp, r3
 8020aec:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8020af0:	ea85 030b 	eor.w	r3, r5, fp
 8020af4:	ea03 030c 	and.w	r3, r3, ip
 8020af8:	406b      	eors	r3, r5
 8020afa:	4453      	add	r3, sl
 8020afc:	4473      	add	r3, lr
 8020afe:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8020ce4 <mg_md5_transform+0x3fc>
 8020b02:	449e      	add	lr, r3
 8020b04:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8020b08:	ea8b 030e 	eor.w	r3, fp, lr
 8020b0c:	402b      	ands	r3, r5
 8020b0e:	ea83 030b 	eor.w	r3, r3, fp
 8020b12:	9a03      	ldr	r2, [sp, #12]
 8020b14:	4413      	add	r3, r2
 8020b16:	449c      	add	ip, r3
 8020b18:	4b68      	ldr	r3, [pc, #416]	@ (8020cbc <mg_md5_transform+0x3d4>)
 8020b1a:	4463      	add	r3, ip
 8020b1c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8020b20:	ea8e 0c03 	eor.w	ip, lr, r3
 8020b24:	ea0c 0c0b 	and.w	ip, ip, fp
 8020b28:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020b2c:	9a07      	ldr	r2, [sp, #28]
 8020b2e:	4494      	add	ip, r2
 8020b30:	4465      	add	r5, ip
 8020b32:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020ce8 <mg_md5_transform+0x400>
 8020b36:	44ac      	add	ip, r5
 8020b38:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 8020b3c:	ea83 050c 	eor.w	r5, r3, ip
 8020b40:	ea05 050e 	and.w	r5, r5, lr
 8020b44:	405d      	eors	r5, r3
 8020b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020b48:	440d      	add	r5, r1
 8020b4a:	445d      	add	r5, fp
 8020b4c:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8020cec <mg_md5_transform+0x404>
 8020b50:	44ab      	add	fp, r5
 8020b52:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8020b56:	ea8c 050b 	eor.w	r5, ip, fp
 8020b5a:	401d      	ands	r5, r3
 8020b5c:	ea85 050c 	eor.w	r5, r5, ip
 8020b60:	9a02      	ldr	r2, [sp, #8]
 8020b62:	4415      	add	r5, r2
 8020b64:	44ae      	add	lr, r5
 8020b66:	4d56      	ldr	r5, [pc, #344]	@ (8020cc0 <mg_md5_transform+0x3d8>)
 8020b68:	4475      	add	r5, lr
 8020b6a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8020b6e:	ea8b 0e05 	eor.w	lr, fp, r5
 8020b72:	ea0e 0e0c 	and.w	lr, lr, ip
 8020b76:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020b7a:	9906      	ldr	r1, [sp, #24]
 8020b7c:	448e      	add	lr, r1
 8020b7e:	4473      	add	r3, lr
 8020b80:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8020cf0 <mg_md5_transform+0x408>
 8020b84:	449e      	add	lr, r3
 8020b86:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8020b8a:	ea85 030e 	eor.w	r3, r5, lr
 8020b8e:	ea03 030b 	and.w	r3, r3, fp
 8020b92:	406b      	eors	r3, r5
 8020b94:	4443      	add	r3, r8
 8020b96:	4463      	add	r3, ip
 8020b98:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8020cf4 <mg_md5_transform+0x40c>
 8020b9c:	449c      	add	ip, r3
 8020b9e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020ba2:	ea8e 030c 	eor.w	r3, lr, ip
 8020ba6:	402b      	ands	r3, r5
 8020ba8:	ea83 030e 	eor.w	r3, r3, lr
 8020bac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020bae:	4413      	add	r3, r2
 8020bb0:	449b      	add	fp, r3
 8020bb2:	4b44      	ldr	r3, [pc, #272]	@ (8020cc4 <mg_md5_transform+0x3dc>)
 8020bb4:	445b      	add	r3, fp
 8020bb6:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8020bba:	ea8c 0b03 	eor.w	fp, ip, r3
 8020bbe:	ea0b 0b0e 	and.w	fp, fp, lr
 8020bc2:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020bc6:	9905      	ldr	r1, [sp, #20]
 8020bc8:	448b      	add	fp, r1
 8020bca:	445d      	add	r5, fp
 8020bcc:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8020cf8 <mg_md5_transform+0x410>
 8020bd0:	44ab      	add	fp, r5
 8020bd2:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8020bd6:	ea83 050b 	eor.w	r5, r3, fp
 8020bda:	ea05 050c 	and.w	r5, r5, ip
 8020bde:	405d      	eors	r5, r3
 8020be0:	4435      	add	r5, r6
 8020be2:	4475      	add	r5, lr
 8020be4:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8020cfc <mg_md5_transform+0x414>
 8020be8:	44ae      	add	lr, r5
 8020bea:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8020bee:	ea8b 050e 	eor.w	r5, fp, lr
 8020bf2:	401d      	ands	r5, r3
 8020bf4:	ea85 050b 	eor.w	r5, r5, fp
 8020bf8:	4425      	add	r5, r4
 8020bfa:	44ac      	add	ip, r5
 8020bfc:	4d32      	ldr	r5, [pc, #200]	@ (8020cc8 <mg_md5_transform+0x3e0>)
 8020bfe:	4465      	add	r5, ip
 8020c00:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8020c04:	ea8e 0c05 	eor.w	ip, lr, r5
 8020c08:	ea0c 0c0b 	and.w	ip, ip, fp
 8020c0c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020c10:	44cc      	add	ip, r9
 8020c12:	4463      	add	r3, ip
 8020c14:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8020d00 <mg_md5_transform+0x418>
 8020c18:	449c      	add	ip, r3
 8020c1a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8020c1e:	ea85 030c 	eor.w	r3, r5, ip
 8020c22:	ea03 030e 	and.w	r3, r3, lr
 8020c26:	406b      	eors	r3, r5
 8020c28:	443b      	add	r3, r7
 8020c2a:	445b      	add	r3, fp
 8020c2c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8020d04 <mg_md5_transform+0x41c>
 8020c30:	449b      	add	fp, r3
 8020c32:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020c36:	ea8c 030b 	eor.w	r3, ip, fp
 8020c3a:	406b      	eors	r3, r5
 8020c3c:	9a03      	ldr	r2, [sp, #12]
 8020c3e:	4413      	add	r3, r2
 8020c40:	4473      	add	r3, lr
 8020c42:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8020c46:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 8020c4a:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 8020c4e:	ea8b 0e03 	eor.w	lr, fp, r3
 8020c52:	ea8e 0e0c 	eor.w	lr, lr, ip
 8020c56:	448e      	add	lr, r1
 8020c58:	44ae      	add	lr, r5
 8020c5a:	4d1c      	ldr	r5, [pc, #112]	@ (8020ccc <mg_md5_transform+0x3e4>)
 8020c5c:	4475      	add	r5, lr
 8020c5e:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8020c62:	ea83 0e05 	eor.w	lr, r3, r5
 8020c66:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020c6a:	9908      	ldr	r1, [sp, #32]
 8020c6c:	448e      	add	lr, r1
 8020c6e:	44f4      	add	ip, lr
 8020c70:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8020d08 <mg_md5_transform+0x420>
 8020c74:	44e6      	add	lr, ip
 8020c76:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 8020c7a:	ea85 0c0e 	eor.w	ip, r5, lr
 8020c7e:	ea8c 0c03 	eor.w	ip, ip, r3
 8020c82:	44c4      	add	ip, r8
 8020c84:	44e3      	add	fp, ip
 8020c86:	e041      	b.n	8020d0c <mg_md5_transform+0x424>
 8020c88:	d76aa478 	.word	0xd76aa478
 8020c8c:	e8c7b756 	.word	0xe8c7b756
 8020c90:	242070db 	.word	0x242070db
 8020c94:	c1bdceee 	.word	0xc1bdceee
 8020c98:	f57c0faf 	.word	0xf57c0faf
 8020c9c:	4787c62a 	.word	0x4787c62a
 8020ca0:	a8304613 	.word	0xa8304613
 8020ca4:	fd469501 	.word	0xfd469501
 8020ca8:	698098d8 	.word	0x698098d8
 8020cac:	8b44f7af 	.word	0x8b44f7af
 8020cb0:	fd987193 	.word	0xfd987193
 8020cb4:	a679438e 	.word	0xa679438e
 8020cb8:	c040b340 	.word	0xc040b340
 8020cbc:	d62f105d 	.word	0xd62f105d
 8020cc0:	e7d3fbc8 	.word	0xe7d3fbc8
 8020cc4:	f4d50d87 	.word	0xf4d50d87
 8020cc8:	fcefa3f8 	.word	0xfcefa3f8
 8020ccc:	8771f681 	.word	0x8771f681
 8020cd0:	895cd7be 	.word	0x895cd7be
 8020cd4:	6b901122 	.word	0x6b901122
 8020cd8:	49b40821 	.word	0x49b40821
 8020cdc:	f61e2562 	.word	0xf61e2562
 8020ce0:	265e5a51 	.word	0x265e5a51
 8020ce4:	e9b6c7aa 	.word	0xe9b6c7aa
 8020ce8:	02441453 	.word	0x02441453
 8020cec:	d8a1e681 	.word	0xd8a1e681
 8020cf0:	21e1cde6 	.word	0x21e1cde6
 8020cf4:	c33707d6 	.word	0xc33707d6
 8020cf8:	455a14ed 	.word	0x455a14ed
 8020cfc:	a9e3e905 	.word	0xa9e3e905
 8020d00:	676f02d9 	.word	0x676f02d9
 8020d04:	8d2a4c8a 	.word	0x8d2a4c8a
 8020d08:	6d9d6122 	.word	0x6d9d6122
 8020d0c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8020fd4 <mg_md5_transform+0x6ec>
 8020d10:	44dc      	add	ip, fp
 8020d12:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020d16:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020d1a:	ea8b 0b05 	eor.w	fp, fp, r5
 8020d1e:	9a01      	ldr	r2, [sp, #4]
 8020d20:	4493      	add	fp, r2
 8020d22:	449b      	add	fp, r3
 8020d24:	4b99      	ldr	r3, [pc, #612]	@ (8020f8c <mg_md5_transform+0x6a4>)
 8020d26:	445b      	add	r3, fp
 8020d28:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 8020d2c:	ea8c 0b03 	eor.w	fp, ip, r3
 8020d30:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020d34:	9a02      	ldr	r2, [sp, #8]
 8020d36:	4493      	add	fp, r2
 8020d38:	445d      	add	r5, fp
 8020d3a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8020fd8 <mg_md5_transform+0x6f0>
 8020d3e:	44ab      	add	fp, r5
 8020d40:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8020d44:	ea83 050b 	eor.w	r5, r3, fp
 8020d48:	ea85 050c 	eor.w	r5, r5, ip
 8020d4c:	444d      	add	r5, r9
 8020d4e:	44ae      	add	lr, r5
 8020d50:	4d8f      	ldr	r5, [pc, #572]	@ (8020f90 <mg_md5_transform+0x6a8>)
 8020d52:	4475      	add	r5, lr
 8020d54:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8020d58:	ea8b 0e05 	eor.w	lr, fp, r5
 8020d5c:	ea8e 0e03 	eor.w	lr, lr, r3
 8020d60:	9a07      	ldr	r2, [sp, #28]
 8020d62:	4496      	add	lr, r2
 8020d64:	44e6      	add	lr, ip
 8020d66:	f8df c274 	ldr.w	ip, [pc, #628]	@ 8020fdc <mg_md5_transform+0x6f4>
 8020d6a:	44f4      	add	ip, lr
 8020d6c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8020d70:	ea85 0e0c 	eor.w	lr, r5, ip
 8020d74:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020d78:	44b6      	add	lr, r6
 8020d7a:	4473      	add	r3, lr
 8020d7c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8020fe0 <mg_md5_transform+0x6f8>
 8020d80:	449e      	add	lr, r3
 8020d82:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8020d86:	ea8c 030e 	eor.w	r3, ip, lr
 8020d8a:	406b      	eors	r3, r5
 8020d8c:	4453      	add	r3, sl
 8020d8e:	449b      	add	fp, r3
 8020d90:	4b80      	ldr	r3, [pc, #512]	@ (8020f94 <mg_md5_transform+0x6ac>)
 8020d92:	445b      	add	r3, fp
 8020d94:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8020d98:	ea8e 0b03 	eor.w	fp, lr, r3
 8020d9c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020da0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020da2:	4493      	add	fp, r2
 8020da4:	445d      	add	r5, fp
 8020da6:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8020fe4 <mg_md5_transform+0x6fc>
 8020daa:	44ab      	add	fp, r5
 8020dac:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8020db0:	ea83 050b 	eor.w	r5, r3, fp
 8020db4:	ea85 050e 	eor.w	r5, r5, lr
 8020db8:	9904      	ldr	r1, [sp, #16]
 8020dba:	440d      	add	r5, r1
 8020dbc:	4465      	add	r5, ip
 8020dbe:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020fe8 <mg_md5_transform+0x700>
 8020dc2:	44ac      	add	ip, r5
 8020dc4:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8020dc8:	ea8b 050c 	eor.w	r5, fp, ip
 8020dcc:	405d      	eors	r5, r3
 8020dce:	9906      	ldr	r1, [sp, #24]
 8020dd0:	440d      	add	r5, r1
 8020dd2:	44ae      	add	lr, r5
 8020dd4:	4d70      	ldr	r5, [pc, #448]	@ (8020f98 <mg_md5_transform+0x6b0>)
 8020dd6:	4475      	add	r5, lr
 8020dd8:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8020ddc:	ea8c 0e05 	eor.w	lr, ip, r5
 8020de0:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020de4:	44be      	add	lr, r7
 8020de6:	4473      	add	r3, lr
 8020de8:	f8df e200 	ldr.w	lr, [pc, #512]	@ 8020fec <mg_md5_transform+0x704>
 8020dec:	449e      	add	lr, r3
 8020dee:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8020df2:	ea85 030e 	eor.w	r3, r5, lr
 8020df6:	ea83 030c 	eor.w	r3, r3, ip
 8020dfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020dfc:	440b      	add	r3, r1
 8020dfe:	445b      	add	r3, fp
 8020e00:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8020ff0 <mg_md5_transform+0x708>
 8020e04:	449b      	add	fp, r3
 8020e06:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 8020e0a:	ea8e 030b 	eor.w	r3, lr, fp
 8020e0e:	406b      	eors	r3, r5
 8020e10:	940a      	str	r4, [sp, #40]	@ 0x28
 8020e12:	4423      	add	r3, r4
 8020e14:	449c      	add	ip, r3
 8020e16:	4b61      	ldr	r3, [pc, #388]	@ (8020f9c <mg_md5_transform+0x6b4>)
 8020e18:	4463      	add	r3, ip
 8020e1a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 8020e1e:	ea63 0c0e 	orn	ip, r3, lr
 8020e22:	ea8c 0c0b 	eor.w	ip, ip, fp
 8020e26:	44e2      	add	sl, ip
 8020e28:	44aa      	add	sl, r5
 8020e2a:	4d5d      	ldr	r5, [pc, #372]	@ (8020fa0 <mg_md5_transform+0x6b8>)
 8020e2c:	4455      	add	r5, sl
 8020e2e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8020e32:	ea65 0c0b 	orn	ip, r5, fp
 8020e36:	ea8c 0c03 	eor.w	ip, ip, r3
 8020e3a:	44e1      	add	r9, ip
 8020e3c:	44f1      	add	r9, lr
 8020e3e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020ff4 <mg_md5_transform+0x70c>
 8020e42:	44cc      	add	ip, r9
 8020e44:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8020e48:	ea6c 0e03 	orn	lr, ip, r3
 8020e4c:	ea8e 0e05 	eor.w	lr, lr, r5
 8020e50:	44f0      	add	r8, lr
 8020e52:	44d8      	add	r8, fp
 8020e54:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8020ff8 <mg_md5_transform+0x710>
 8020e58:	44c6      	add	lr, r8
 8020e5a:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 8020e5e:	ea6e 0805 	orn	r8, lr, r5
 8020e62:	ea88 080c 	eor.w	r8, r8, ip
 8020e66:	9c03      	ldr	r4, [sp, #12]
 8020e68:	44a0      	add	r8, r4
 8020e6a:	4498      	add	r8, r3
 8020e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8020fa4 <mg_md5_transform+0x6bc>)
 8020e6e:	4443      	add	r3, r8
 8020e70:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8020e74:	ea63 080c 	orn	r8, r3, ip
 8020e78:	ea88 080e 	eor.w	r8, r8, lr
 8020e7c:	4447      	add	r7, r8
 8020e7e:	442f      	add	r7, r5
 8020e80:	4d49      	ldr	r5, [pc, #292]	@ (8020fa8 <mg_md5_transform+0x6c0>)
 8020e82:	443d      	add	r5, r7
 8020e84:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8020e88:	ea65 070e 	orn	r7, r5, lr
 8020e8c:	405f      	eors	r7, r3
 8020e8e:	4417      	add	r7, r2
 8020e90:	44bc      	add	ip, r7
 8020e92:	4f46      	ldr	r7, [pc, #280]	@ (8020fac <mg_md5_transform+0x6c4>)
 8020e94:	4467      	add	r7, ip
 8020e96:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8020e9a:	ea67 0c03 	orn	ip, r7, r3
 8020e9e:	ea8c 0c05 	eor.w	ip, ip, r5
 8020ea2:	9a07      	ldr	r2, [sp, #28]
 8020ea4:	4462      	add	r2, ip
 8020ea6:	4472      	add	r2, lr
 8020ea8:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8020eac:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8020eb0:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8020eb4:	ea62 0c05 	orn	ip, r2, r5
 8020eb8:	ea8c 0c07 	eor.w	ip, ip, r7
 8020ebc:	9c01      	ldr	r4, [sp, #4]
 8020ebe:	44a4      	add	ip, r4
 8020ec0:	449c      	add	ip, r3
 8020ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8020fb0 <mg_md5_transform+0x6c8>)
 8020ec4:	4463      	add	r3, ip
 8020ec6:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8020eca:	ea63 0c07 	orn	ip, r3, r7
 8020ece:	ea8c 0c02 	eor.w	ip, ip, r2
 8020ed2:	9905      	ldr	r1, [sp, #20]
 8020ed4:	448c      	add	ip, r1
 8020ed6:	44ac      	add	ip, r5
 8020ed8:	4d36      	ldr	r5, [pc, #216]	@ (8020fb4 <mg_md5_transform+0x6cc>)
 8020eda:	4465      	add	r5, ip
 8020edc:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8020ee0:	ea65 0c02 	orn	ip, r5, r2
 8020ee4:	ea8c 0c03 	eor.w	ip, ip, r3
 8020ee8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020eea:	4461      	add	r1, ip
 8020eec:	440f      	add	r7, r1
 8020eee:	4932      	ldr	r1, [pc, #200]	@ (8020fb8 <mg_md5_transform+0x6d0>)
 8020ef0:	4439      	add	r1, r7
 8020ef2:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8020ef6:	ea61 0703 	orn	r7, r1, r3
 8020efa:	406f      	eors	r7, r5
 8020efc:	9c04      	ldr	r4, [sp, #16]
 8020efe:	4427      	add	r7, r4
 8020f00:	4417      	add	r7, r2
 8020f02:	4a2e      	ldr	r2, [pc, #184]	@ (8020fbc <mg_md5_transform+0x6d4>)
 8020f04:	443a      	add	r2, r7
 8020f06:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8020f0a:	ea62 0705 	orn	r7, r2, r5
 8020f0e:	404f      	eors	r7, r1
 8020f10:	443e      	add	r6, r7
 8020f12:	4433      	add	r3, r6
 8020f14:	4e2a      	ldr	r6, [pc, #168]	@ (8020fc0 <mg_md5_transform+0x6d8>)
 8020f16:	441e      	add	r6, r3
 8020f18:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8020f1c:	ea66 0301 	orn	r3, r6, r1
 8020f20:	4053      	eors	r3, r2
 8020f22:	9f02      	ldr	r7, [sp, #8]
 8020f24:	443b      	add	r3, r7
 8020f26:	441d      	add	r5, r3
 8020f28:	4b26      	ldr	r3, [pc, #152]	@ (8020fc4 <mg_md5_transform+0x6dc>)
 8020f2a:	442b      	add	r3, r5
 8020f2c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8020f30:	ea63 0502 	orn	r5, r3, r2
 8020f34:	4075      	eors	r5, r6
 8020f36:	9f08      	ldr	r7, [sp, #32]
 8020f38:	443d      	add	r5, r7
 8020f3a:	440d      	add	r5, r1
 8020f3c:	4922      	ldr	r1, [pc, #136]	@ (8020fc8 <mg_md5_transform+0x6e0>)
 8020f3e:	4429      	add	r1, r5
 8020f40:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8020f44:	ea61 0506 	orn	r5, r1, r6
 8020f48:	405d      	eors	r5, r3
 8020f4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020f4c:	4425      	add	r5, r4
 8020f4e:	442a      	add	r2, r5
 8020f50:	4d1e      	ldr	r5, [pc, #120]	@ (8020fcc <mg_md5_transform+0x6e4>)
 8020f52:	4415      	add	r5, r2
 8020f54:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8020f58:	ea65 0203 	orn	r2, r5, r3
 8020f5c:	404a      	eors	r2, r1
 8020f5e:	9c06      	ldr	r4, [sp, #24]
 8020f60:	4422      	add	r2, r4
 8020f62:	4432      	add	r2, r6
 8020f64:	4e1a      	ldr	r6, [pc, #104]	@ (8020fd0 <mg_md5_transform+0x6e8>)
 8020f66:	4416      	add	r6, r2
 8020f68:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 8020f6c:	6802      	ldr	r2, [r0, #0]
 8020f6e:	4413      	add	r3, r2
 8020f70:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8020f72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020f74:	4434      	add	r4, r6
 8020f76:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8020f78:	6883      	ldr	r3, [r0, #8]
 8020f7a:	441d      	add	r5, r3
 8020f7c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 8020f7e:	68c3      	ldr	r3, [r0, #12]
 8020f80:	4419      	add	r1, r3
 8020f82:	60c1      	str	r1, [r0, #12]
}
 8020f84:	b00d      	add	sp, #52	@ 0x34
 8020f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f8a:	bf00      	nop
 8020f8c:	a4beea44 	.word	0xa4beea44
 8020f90:	f6bb4b60 	.word	0xf6bb4b60
 8020f94:	eaa127fa 	.word	0xeaa127fa
 8020f98:	d9d4d039 	.word	0xd9d4d039
 8020f9c:	c4ac5665 	.word	0xc4ac5665
 8020fa0:	f4292244 	.word	0xf4292244
 8020fa4:	fc93a039 	.word	0xfc93a039
 8020fa8:	655b59c3 	.word	0x655b59c3
 8020fac:	8f0ccc92 	.word	0x8f0ccc92
 8020fb0:	85845dd1 	.word	0x85845dd1
 8020fb4:	6fa87e4f 	.word	0x6fa87e4f
 8020fb8:	fe2ce6e0 	.word	0xfe2ce6e0
 8020fbc:	a3014314 	.word	0xa3014314
 8020fc0:	4e0811a1 	.word	0x4e0811a1
 8020fc4:	f7537e82 	.word	0xf7537e82
 8020fc8:	bd3af235 	.word	0xbd3af235
 8020fcc:	2ad7d2bb 	.word	0x2ad7d2bb
 8020fd0:	eb86d391 	.word	0xeb86d391
 8020fd4:	fde5380c 	.word	0xfde5380c
 8020fd8:	4bdecfa9 	.word	0x4bdecfa9
 8020fdc:	bebfbc70 	.word	0xbebfbc70
 8020fe0:	289b7ec6 	.word	0x289b7ec6
 8020fe4:	d4ef3085 	.word	0xd4ef3085
 8020fe8:	04881d05 	.word	0x04881d05
 8020fec:	e6db99e5 	.word	0xe6db99e5
 8020ff0:	1fa27cf8 	.word	0x1fa27cf8
 8020ff4:	432aff97 	.word	0x432aff97
 8020ff8:	ab9423a7 	.word	0xab9423a7

08020ffc <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 8020ffc:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 8020ffe:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8021000:	3001      	adds	r0, #1
 8021002:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8021004:	2a7f      	cmp	r2, #127	@ 0x7f
 8021006:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802100a:	d8f9      	bhi.n	8021000 <varint_size+0x4>
  return bytes_needed;
}
 802100c:	4770      	bx	lr

0802100e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802100e:	b500      	push	{lr}
 8021010:	4686      	mov	lr, r0
  size_t len = 0;
 8021012:	2300      	movs	r3, #0
 8021014:	e007      	b.n	8021026 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8021016:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802101a:	1c58      	adds	r0, r3, #1
 802101c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8021020:	2a7f      	cmp	r2, #127	@ 0x7f
 8021022:	d907      	bls.n	8021034 <encode_varint+0x26>
    buf[len++] = b;
 8021024:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8021026:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 802102a:	460a      	mov	r2, r1
 802102c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 802102e:	2a7f      	cmp	r2, #127	@ 0x7f
 8021030:	d9f3      	bls.n	802101a <encode_varint+0xc>
 8021032:	e7f0      	b.n	8021016 <encode_varint+0x8>

  return len;
}
 8021034:	f85d fb04 	ldr.w	pc, [sp], #4

08021038 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8021038:	2300      	movs	r3, #0
 802103a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 802103c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021040:	2b03      	cmp	r3, #3
 8021042:	d81d      	bhi.n	8021080 <decode_varint+0x48>
 8021044:	428b      	cmp	r3, r1
 8021046:	d219      	bcs.n	802107c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8021048:	b530      	push	{r4, r5, lr}
 802104a:	e003      	b.n	8021054 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 802104c:	1c58      	adds	r0, r3, #1
 802104e:	e012      	b.n	8021076 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021050:	428b      	cmp	r3, r1
 8021052:	d211      	bcs.n	8021078 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8021054:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8021058:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 802105c:	6815      	ldr	r5, [r2, #0]
 802105e:	fb0c 5404 	mla	r4, ip, r4, r5
 8021062:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8021064:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8021068:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 802106c:	d0ee      	beq.n	802104c <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 802106e:	3301      	adds	r3, #1
 8021070:	2b03      	cmp	r3, #3
 8021072:	d9ed      	bls.n	8021050 <decode_varint+0x18>
  }

  return 0;
 8021074:	2000      	movs	r0, #0
}
 8021076:	bd30      	pop	{r4, r5, pc}
  return 0;
 8021078:	2000      	movs	r0, #0
 802107a:	e7fc      	b.n	8021076 <decode_varint+0x3e>
 802107c:	2000      	movs	r0, #0
 802107e:	4770      	bx	lr
 8021080:	2000      	movs	r0, #0
}
 8021082:	4770      	bx	lr

08021084 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021084:	2300      	movs	r3, #0
 8021086:	2b1a      	cmp	r3, #26
 8021088:	d80b      	bhi.n	80210a2 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802108a:	4a07      	ldr	r2, [pc, #28]	@ (80210a8 <mqtt_prop_type_by_id+0x24>)
 802108c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8021090:	4282      	cmp	r2, r0
 8021092:	d001      	beq.n	8021098 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8021094:	3301      	adds	r3, #1
 8021096:	e7f6      	b.n	8021086 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021098:	4a03      	ldr	r2, [pc, #12]	@ (80210a8 <mqtt_prop_type_by_id+0x24>)
 802109a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802109e:	7858      	ldrb	r0, [r3, #1]
 80210a0:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 80210a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80210a6:	4770      	bx	lr
 80210a8:	0803b750 	.word	0x0803b750

080210ac <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80210ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210b0:	4606      	mov	r6, r0
 80210b2:	4688      	mov	r8, r1
  size_t i, size = 0;
 80210b4:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 80210b6:	462c      	mov	r4, r5
 80210b8:	e005      	b.n	80210c6 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 80210ba:	697d      	ldr	r5, [r7, #20]
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	441d      	add	r5, r3
 80210c0:	444d      	add	r5, r9
 80210c2:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 80210c4:	3401      	adds	r4, #1
 80210c6:	4544      	cmp	r4, r8
 80210c8:	d231      	bcs.n	802112e <get_properties_length+0x82>
    size++;  // identifier
 80210ca:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80210ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80210d2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 80210d6:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 80210da:	f7ff ffd3 	bl	8021084 <mqtt_prop_type_by_id>
 80210de:	2806      	cmp	r0, #6
 80210e0:	d824      	bhi.n	802112c <get_properties_length+0x80>
 80210e2:	a301      	add	r3, pc, #4	@ (adr r3, 80210e8 <get_properties_length+0x3c>)
 80210e4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80210e8:	08021129 	.word	0x08021129
 80210ec:	08021105 	.word	0x08021105
 80210f0:	080210bb 	.word	0x080210bb
 80210f4:	0802110d 	.word	0x0802110d
 80210f8:	08021115 	.word	0x08021115
 80210fc:	08021121 	.word	0x08021121
 8021100:	08021125 	.word	0x08021125
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8021104:	697d      	ldr	r5, [r7, #20]
 8021106:	444d      	add	r5, r9
 8021108:	3502      	adds	r5, #2
        break;
 802110a:	e7db      	b.n	80210c4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802110c:	697d      	ldr	r5, [r7, #20]
 802110e:	444d      	add	r5, r9
 8021110:	3502      	adds	r5, #2
        break;
 8021112:	e7d7      	b.n	80210c4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8021114:	6878      	ldr	r0, [r7, #4]
 8021116:	f7ff ff71 	bl	8020ffc <varint_size>
 802111a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802111e:	e7d1      	b.n	80210c4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8021120:	3505      	adds	r5, #5
        break;
 8021122:	e7cf      	b.n	80210c4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8021124:	3503      	adds	r5, #3
        break;
 8021126:	e7cd      	b.n	80210c4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8021128:	3502      	adds	r5, #2
        break;
 802112a:	e7cb      	b.n	80210c4 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802112c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802112e:	4628      	mov	r0, r5
 8021130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021134 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8021134:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8021136:	f7ff ffb9 	bl	80210ac <get_properties_length>
 802113a:	4604      	mov	r4, r0
  size += varint_size(size);
 802113c:	f7ff ff5e 	bl	8020ffc <varint_size>
  return size;
}
 8021140:	4420      	add	r0, r4
 8021142:	bd10      	pop	{r4, pc}

08021144 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8021144:	b410      	push	{r4}
 8021146:	b085      	sub	sp, #20
 8021148:	466b      	mov	r3, sp
 802114a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 802114e:	2300      	movs	r3, #0
 8021150:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8021152:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8021154:	9901      	ldr	r1, [sp, #4]
 8021156:	4299      	cmp	r1, r3
 8021158:	d92c      	bls.n	80211b4 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802115a:	9c00      	ldr	r4, [sp, #0]
 802115c:	5ce1      	ldrb	r1, [r4, r3]
 802115e:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8021162:	b2c0      	uxtb	r0, r0
 8021164:	2809      	cmp	r0, #9
 8021166:	d812      	bhi.n	802118e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8021168:	f10c 0010 	add.w	r0, ip, #16
 802116c:	4468      	add	r0, sp
 802116e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8021172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021176:	3930      	subs	r1, #48	@ 0x30
 8021178:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 802117c:	29ff      	cmp	r1, #255	@ 0xff
 802117e:	dc28      	bgt.n	80211d2 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021180:	f10c 0010 	add.w	r0, ip, #16
 8021184:	4468      	add	r0, sp
 8021186:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802118a:	3301      	adds	r3, #1
 802118c:	e7e2      	b.n	8021154 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802118e:	292e      	cmp	r1, #46	@ 0x2e
 8021190:	d121      	bne.n	80211d6 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021192:	f1bc 0f02 	cmp.w	ip, #2
 8021196:	d820      	bhi.n	80211da <mg_aton4+0x96>
 8021198:	b923      	cbnz	r3, 80211a4 <mg_aton4+0x60>
 802119a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802119c:	b005      	add	sp, #20
 802119e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80211a2:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80211a4:	441c      	add	r4, r3
 80211a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80211aa:	292e      	cmp	r1, #46	@ 0x2e
 80211ac:	d017      	beq.n	80211de <mg_aton4+0x9a>
      num_dots++;
 80211ae:	f10c 0c01 	add.w	ip, ip, #1
 80211b2:	e7ea      	b.n	802118a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80211b4:	f1bc 0f03 	cmp.w	ip, #3
 80211b8:	d113      	bne.n	80211e2 <mg_aton4+0x9e>
 80211ba:	9900      	ldr	r1, [sp, #0]
 80211bc:	4419      	add	r1, r3
 80211be:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80211c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80211c4:	d00f      	beq.n	80211e6 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 80211c6:	9b03      	ldr	r3, [sp, #12]
 80211c8:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 80211ca:	2300      	movs	r3, #0
 80211cc:	74d3      	strb	r3, [r2, #19]
  return true;
 80211ce:	2001      	movs	r0, #1
 80211d0:	e7e4      	b.n	802119c <mg_aton4+0x58>
      if (octet > 255) return false;
 80211d2:	2000      	movs	r0, #0
 80211d4:	e7e2      	b.n	802119c <mg_aton4+0x58>
      return false;
 80211d6:	2000      	movs	r0, #0
 80211d8:	e7e0      	b.n	802119c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80211da:	2000      	movs	r0, #0
 80211dc:	e7de      	b.n	802119c <mg_aton4+0x58>
 80211de:	2000      	movs	r0, #0
 80211e0:	e7dc      	b.n	802119c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80211e2:	2000      	movs	r0, #0
 80211e4:	e7da      	b.n	802119c <mg_aton4+0x58>
 80211e6:	2000      	movs	r0, #0
 80211e8:	e7d8      	b.n	802119c <mg_aton4+0x58>

080211ea <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 80211ea:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 80211ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80211ee:	b103      	cbz	r3, 80211f2 <mg_tcpip_call+0x8>
 80211f0:	4798      	blx	r3
}
 80211f2:	bd08      	pop	{r3, pc}

080211f4 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80211f4:	2300      	movs	r3, #0
 80211f6:	e005      	b.n	8021204 <csumup+0x10>
 80211f8:	f811 c003 	ldrb.w	ip, [r1, r3]
 80211fc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8021200:	4460      	add	r0, ip
 8021202:	3301      	adds	r3, #1
 8021204:	4293      	cmp	r3, r2
 8021206:	d205      	bcs.n	8021214 <csumup+0x20>
 8021208:	f013 0f01 	tst.w	r3, #1
 802120c:	d0f4      	beq.n	80211f8 <csumup+0x4>
 802120e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8021212:	e7f5      	b.n	8021200 <csumup+0xc>
  return sum;
}
 8021214:	4770      	bx	lr

08021216 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8021216:	b538      	push	{r3, r4, r5, lr}
 8021218:	4604      	mov	r4, r0
 802121a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802121c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	4602      	mov	r2, r0
 8021222:	6940      	ldr	r0, [r0, #20]
 8021224:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8021226:	4285      	cmp	r5, r0
 8021228:	d000      	beq.n	802122c <ether_output+0x16>
  return n;
}
 802122a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802122c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802122e:	3301      	adds	r3, #1
 8021230:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8021232:	e7fa      	b.n	802122a <ether_output+0x14>

08021234 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8021234:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021238:	f013 0f28 	tst.w	r3, #40	@ 0x28
 802123c:	d106      	bne.n	802124c <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 802123e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8021240:	b132      	cbz	r2, 8021250 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021242:	f013 0f90 	tst.w	r3, #144	@ 0x90
 8021246:	d005      	beq.n	8021254 <can_write+0x20>
 8021248:	2000      	movs	r0, #0
 802124a:	4770      	bx	lr
 802124c:	2000      	movs	r0, #0
 802124e:	4770      	bx	lr
 8021250:	2000      	movs	r0, #0
 8021252:	4770      	bx	lr
 8021254:	2001      	movs	r0, #1
}
 8021256:	4770      	bx	lr

08021258 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 8021258:	b410      	push	{r4}
 802125a:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 802125c:	460c      	mov	r4, r1
 802125e:	b109      	cbz	r1, 8021264 <mg_esc+0xc>
 8021260:	4b0b      	ldr	r3, [pc, #44]	@ (8021290 <mg_esc+0x38>)
 8021262:	e007      	b.n	8021274 <mg_esc+0x1c>
 8021264:	4b0b      	ldr	r3, [pc, #44]	@ (8021294 <mg_esc+0x3c>)
 8021266:	e005      	b.n	8021274 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021268:	4a0a      	ldr	r2, [pc, #40]	@ (8021294 <mg_esc+0x3c>)
 802126a:	1a9b      	subs	r3, r3, r2
 802126c:	4a08      	ldr	r2, [pc, #32]	@ (8021290 <mg_esc+0x38>)
 802126e:	5cd0      	ldrb	r0, [r2, r3]
 8021270:	e00a      	b.n	8021288 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8021272:	3301      	adds	r3, #1
 8021274:	7818      	ldrb	r0, [r3, #0]
 8021276:	b138      	cbz	r0, 8021288 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021278:	4290      	cmp	r0, r2
 802127a:	d1fa      	bne.n	8021272 <mg_esc+0x1a>
 802127c:	2c00      	cmp	r4, #0
 802127e:	d0f3      	beq.n	8021268 <mg_esc+0x10>
 8021280:	4a03      	ldr	r2, [pc, #12]	@ (8021290 <mg_esc+0x38>)
 8021282:	1a9b      	subs	r3, r3, r2
 8021284:	4a03      	ldr	r2, [pc, #12]	@ (8021294 <mg_esc+0x3c>)
 8021286:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021288:	f85d 4b04 	ldr.w	r4, [sp], #4
 802128c:	4770      	bx	lr
 802128e:	bf00      	nop
 8021290:	0803a388 	.word	0x0803a388
 8021294:	0803a390 	.word	0x0803a390

08021298 <mg_escape>:

static char mg_escape(int c) {
 8021298:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802129a:	2101      	movs	r1, #1
 802129c:	f7ff ffdc 	bl	8021258 <mg_esc>
}
 80212a0:	bd08      	pop	{r3, pc}

080212a2 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 80212a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a6:	4607      	mov	r7, r0
 80212a8:	460e      	mov	r6, r1
 80212aa:	4692      	mov	sl, r2
 80212ac:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 80212ae:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80212b2:	465c      	mov	r4, fp
 80212b4:	e003      	b.n	80212be <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 80212b6:	4631      	mov	r1, r6
 80212b8:	4628      	mov	r0, r5
 80212ba:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80212bc:	3401      	adds	r4, #1
 80212be:	454c      	cmp	r4, r9
 80212c0:	d211      	bcs.n	80212e6 <qcpy+0x44>
 80212c2:	f81a 5004 	ldrb.w	r5, [sl, r4]
 80212c6:	b175      	cbz	r5, 80212e6 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 80212c8:	4628      	mov	r0, r5
 80212ca:	f7ff ffe5 	bl	8021298 <mg_escape>
    if (c) {
 80212ce:	4680      	mov	r8, r0
 80212d0:	2800      	cmp	r0, #0
 80212d2:	d0f0      	beq.n	80212b6 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 80212d4:	4631      	mov	r1, r6
 80212d6:	205c      	movs	r0, #92	@ 0x5c
 80212d8:	47b8      	blx	r7
 80212da:	4631      	mov	r1, r6
 80212dc:	4640      	mov	r0, r8
 80212de:	47b8      	blx	r7
 80212e0:	f10b 0b01 	add.w	fp, fp, #1
 80212e4:	e7ea      	b.n	80212bc <qcpy+0x1a>
    }
  }
  return i + extra;
}
 80212e6:	eb04 000b 	add.w	r0, r4, fp
 80212ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080212f0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80212f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212f4:	4607      	mov	r7, r0
 80212f6:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 80212f8:	6811      	ldr	r1, [r2, #0]
 80212fa:	1d0b      	adds	r3, r1, #4
 80212fc:	6013      	str	r3, [r2, #0]
 80212fe:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021302:	f101 0308 	add.w	r3, r1, #8
 8021306:	6013      	str	r3, [r2, #0]
 8021308:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 802130c:	2400      	movs	r4, #0
 802130e:	e00e      	b.n	802132e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8021310:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021314:	091b      	lsrs	r3, r3, #4
 8021316:	4d09      	ldr	r5, [pc, #36]	@ (802133c <mg_print_hex+0x4c>)
 8021318:	4631      	mov	r1, r6
 802131a:	5ce8      	ldrb	r0, [r5, r3]
 802131c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 802131e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021322:	f003 030f 	and.w	r3, r3, #15
 8021326:	4631      	mov	r1, r6
 8021328:	5ce8      	ldrb	r0, [r5, r3]
 802132a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 802132c:	3401      	adds	r4, #1
 802132e:	454c      	cmp	r4, r9
 8021330:	d3ee      	bcc.n	8021310 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8021332:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8021336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802133a:	bf00      	nop
 802133c:	08039edc 	.word	0x08039edc

08021340 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8021340:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021342:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8021346:	ea4f 2332 	mov.w	r3, r2, ror #8
 802134a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 802134e:	ea4f 6232 	mov.w	r2, r2, ror #24
 8021352:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021356:	ea43 0002 	orr.w	r0, r3, r2
 802135a:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 802135e:	4770      	bx	lr

08021360 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8021360:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021364:	b2db      	uxtb	r3, r3
 8021366:	2b19      	cmp	r3, #25
 8021368:	d800      	bhi.n	802136c <mg_tolc+0xc>
 802136a:	3020      	adds	r0, #32
}
 802136c:	4770      	bx	lr

0802136e <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 802136e:	28ff      	cmp	r0, #255	@ 0xff
 8021370:	bf8c      	ite	hi
 8021372:	2000      	movhi	r0, #0
 8021374:	2001      	movls	r0, #1
 8021376:	4770      	bx	lr

08021378 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802137c:	b082      	sub	sp, #8
 802137e:	4605      	mov	r5, r0
 8021380:	9e08      	ldr	r6, [sp, #32]
 8021382:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021384:	0a10      	lsrs	r0, r2, #8
 8021386:	f88d 0004 	strb.w	r0, [sp, #4]
 802138a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 802138e:	00c9      	lsls	r1, r1, #3
 8021390:	b249      	sxtb	r1, r1
 8021392:	4698      	mov	r8, r3
 8021394:	b143      	cbz	r3, 80213a8 <w5500_txn+0x30>
 8021396:	2304      	movs	r3, #4
 8021398:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802139a:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 802139e:	686b      	ldr	r3, [r5, #4]
 80213a0:	6828      	ldr	r0, [r5, #0]
 80213a2:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 80213a4:	2400      	movs	r4, #0
 80213a6:	e00a      	b.n	80213be <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80213a8:	2300      	movs	r3, #0
 80213aa:	e7f5      	b.n	8021398 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 80213ac:	68eb      	ldr	r3, [r5, #12]
 80213ae:	f104 0208 	add.w	r2, r4, #8
 80213b2:	446a      	add	r2, sp
 80213b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80213b8:	6828      	ldr	r0, [r5, #0]
 80213ba:	4798      	blx	r3
 80213bc:	3401      	adds	r4, #1
 80213be:	2c02      	cmp	r4, #2
 80213c0:	d9f4      	bls.n	80213ac <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 80213c2:	2400      	movs	r4, #0
 80213c4:	e000      	b.n	80213c8 <w5500_txn+0x50>
 80213c6:	3401      	adds	r4, #1
 80213c8:	42bc      	cmp	r4, r7
 80213ca:	d208      	bcs.n	80213de <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 80213cc:	68eb      	ldr	r3, [r5, #12]
 80213ce:	5d31      	ldrb	r1, [r6, r4]
 80213d0:	6828      	ldr	r0, [r5, #0]
 80213d2:	4798      	blx	r3
    if (!wr) p[i] = r;
 80213d4:	f1b8 0f00 	cmp.w	r8, #0
 80213d8:	d1f5      	bne.n	80213c6 <w5500_txn+0x4e>
 80213da:	5530      	strb	r0, [r6, r4]
 80213dc:	e7f3      	b.n	80213c6 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 80213de:	68ab      	ldr	r3, [r5, #8]
 80213e0:	6828      	ldr	r0, [r5, #0]
 80213e2:	4798      	blx	r3
}
 80213e4:	b002      	add	sp, #8
 80213e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080213ea <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 80213ea:	b510      	push	{r4, lr}
 80213ec:	b082      	sub	sp, #8
 80213ee:	9c04      	ldr	r4, [sp, #16]
 80213f0:	9401      	str	r4, [sp, #4]
 80213f2:	9300      	str	r3, [sp, #0]
 80213f4:	2301      	movs	r3, #1
 80213f6:	f7ff ffbf 	bl	8021378 <w5500_txn>
 80213fa:	b002      	add	sp, #8
 80213fc:	bd10      	pop	{r4, pc}

080213fe <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 80213fe:	b500      	push	{lr}
 8021400:	b085      	sub	sp, #20
 8021402:	f88d 300f 	strb.w	r3, [sp, #15]
 8021406:	2301      	movs	r3, #1
 8021408:	9300      	str	r3, [sp, #0]
 802140a:	f10d 030f 	add.w	r3, sp, #15
 802140e:	f7ff ffec 	bl	80213ea <w5500_wn>
 8021412:	b005      	add	sp, #20
 8021414:	f85d fb04 	ldr.w	pc, [sp], #4

08021418 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8021418:	b500      	push	{lr}
 802141a:	b085      	sub	sp, #20
 802141c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8021420:	f88d c00c 	strb.w	ip, [sp, #12]
 8021424:	f88d 300d 	strb.w	r3, [sp, #13]
 8021428:	2302      	movs	r3, #2
 802142a:	9300      	str	r3, [sp, #0]
 802142c:	ab03      	add	r3, sp, #12
 802142e:	f7ff ffdc 	bl	80213ea <w5500_wn>
 8021432:	b005      	add	sp, #20
 8021434:	f85d fb04 	ldr.w	pc, [sp], #4

08021438 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8021438:	b510      	push	{r4, lr}
 802143a:	b082      	sub	sp, #8
 802143c:	9c04      	ldr	r4, [sp, #16]
 802143e:	9401      	str	r4, [sp, #4]
 8021440:	9300      	str	r3, [sp, #0]
 8021442:	2300      	movs	r3, #0
 8021444:	f7ff ff98 	bl	8021378 <w5500_txn>
 8021448:	b002      	add	sp, #8
 802144a:	bd10      	pop	{r4, pc}

0802144c <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 802144c:	b500      	push	{lr}
 802144e:	b085      	sub	sp, #20
 8021450:	2300      	movs	r3, #0
 8021452:	f88d 300f 	strb.w	r3, [sp, #15]
 8021456:	2301      	movs	r3, #1
 8021458:	9300      	str	r3, [sp, #0]
 802145a:	f10d 030f 	add.w	r3, sp, #15
 802145e:	f7ff ffeb 	bl	8021438 <w5500_rn>
 8021462:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8021466:	b005      	add	sp, #20
 8021468:	f85d fb04 	ldr.w	pc, [sp], #4

0802146c <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 802146c:	b500      	push	{lr}
 802146e:	b085      	sub	sp, #20
 8021470:	2300      	movs	r3, #0
 8021472:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021476:	2302      	movs	r3, #2
 8021478:	9300      	str	r3, [sp, #0]
 802147a:	ab03      	add	r3, sp, #12
 802147c:	f7ff ffdc 	bl	8021438 <w5500_rn>
 8021480:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021484:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021488:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 802148c:	b005      	add	sp, #20
 802148e:	f85d fb04 	ldr.w	pc, [sp], #4

08021492 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021496:	b083      	sub	sp, #12
 8021498:	4606      	mov	r6, r0
 802149a:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802149c:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802149e:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 80214a0:	4604      	mov	r4, r0
 80214a2:	2226      	movs	r2, #38	@ 0x26
 80214a4:	2101      	movs	r1, #1
 80214a6:	4628      	mov	r0, r5
 80214a8:	f7ff ffe0 	bl	802146c <w5500_r2>
 80214ac:	4284      	cmp	r4, r0
 80214ae:	d3f7      	bcc.n	80214a0 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 80214b0:	b91c      	cbnz	r4, 80214ba <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 80214b2:	4620      	mov	r0, r4
 80214b4:	b003      	add	sp, #12
 80214b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 80214ba:	2228      	movs	r2, #40	@ 0x28
 80214bc:	2101      	movs	r1, #1
 80214be:	4628      	mov	r0, r5
 80214c0:	f7ff ffd4 	bl	802146c <w5500_r2>
 80214c4:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 80214c6:	4602      	mov	r2, r0
 80214c8:	2103      	movs	r1, #3
 80214ca:	4628      	mov	r0, r5
 80214cc:	f7ff ffce 	bl	802146c <w5500_r2>
 80214d0:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 80214d2:	fa1f f188 	uxth.w	r1, r8
 80214d6:	3102      	adds	r1, #2
 80214d8:	4288      	cmp	r0, r1
 80214da:	dc0e      	bgt.n	80214fa <w5500_rx+0x68>
 80214dc:	2801      	cmp	r0, #1
 80214de:	d801      	bhi.n	80214e4 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 80214e0:	2400      	movs	r4, #0
 80214e2:	e00b      	b.n	80214fc <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 80214e4:	1e84      	subs	r4, r0, #2
 80214e6:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 80214e8:	1cba      	adds	r2, r7, #2
 80214ea:	9400      	str	r4, [sp, #0]
 80214ec:	4633      	mov	r3, r6
 80214ee:	b292      	uxth	r2, r2
 80214f0:	2103      	movs	r1, #3
 80214f2:	4628      	mov	r0, r5
 80214f4:	f7ff ffa0 	bl	8021438 <w5500_rn>
 80214f8:	e000      	b.n	80214fc <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 80214fa:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 80214fc:	eb07 0309 	add.w	r3, r7, r9
 8021500:	b29b      	uxth	r3, r3
 8021502:	2228      	movs	r2, #40	@ 0x28
 8021504:	2101      	movs	r1, #1
 8021506:	4628      	mov	r0, r5
 8021508:	f7ff ff86 	bl	8021418 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 802150c:	2340      	movs	r3, #64	@ 0x40
 802150e:	2201      	movs	r2, #1
 8021510:	4611      	mov	r1, r2
 8021512:	4628      	mov	r0, r5
 8021514:	f7ff ff73 	bl	80213fe <w5500_w1>
 8021518:	e7cb      	b.n	80214b2 <w5500_rx+0x20>

0802151a <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 802151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802151e:	b082      	sub	sp, #8
 8021520:	4680      	mov	r8, r0
 8021522:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021524:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8021526:	b28f      	uxth	r7, r1
 8021528:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 802152a:	e004      	b.n	8021536 <w5500_tx+0x1c>
 802152c:	2220      	movs	r2, #32
 802152e:	2101      	movs	r1, #1
 8021530:	4630      	mov	r0, r6
 8021532:	f7ff ff9b 	bl	802146c <w5500_r2>
 8021536:	42b8      	cmp	r0, r7
 8021538:	d3f8      	bcc.n	802152c <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 802153a:	2224      	movs	r2, #36	@ 0x24
 802153c:	2101      	movs	r1, #1
 802153e:	4630      	mov	r0, r6
 8021540:	f7ff ff94 	bl	802146c <w5500_r2>
 8021544:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8021546:	b2ad      	uxth	r5, r5
 8021548:	9500      	str	r5, [sp, #0]
 802154a:	4643      	mov	r3, r8
 802154c:	4602      	mov	r2, r0
 802154e:	2102      	movs	r1, #2
 8021550:	4630      	mov	r0, r6
 8021552:	f7ff ff4a 	bl	80213ea <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8021556:	193b      	adds	r3, r7, r4
 8021558:	b29b      	uxth	r3, r3
 802155a:	2224      	movs	r2, #36	@ 0x24
 802155c:	2101      	movs	r1, #1
 802155e:	4630      	mov	r0, r6
 8021560:	f7ff ff5a 	bl	8021418 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8021564:	2320      	movs	r3, #32
 8021566:	2201      	movs	r2, #1
 8021568:	4611      	mov	r1, r2
 802156a:	4630      	mov	r0, r6
 802156c:	f7ff ff47 	bl	80213fe <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021570:	2400      	movs	r4, #0
 8021572:	e004      	b.n	802157e <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021574:	f015 0f18 	tst.w	r5, #24
 8021578:	d116      	bne.n	80215a8 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 802157a:	3401      	adds	r4, #1
 802157c:	b2a4      	uxth	r4, r4
 802157e:	2c27      	cmp	r4, #39	@ 0x27
 8021580:	d812      	bhi.n	80215a8 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021582:	2202      	movs	r2, #2
 8021584:	2101      	movs	r1, #1
 8021586:	4630      	mov	r0, r6
 8021588:	f7ff ff60 	bl	802144c <w5500_r1>
    if (ir == 0) continue;
 802158c:	4605      	mov	r5, r0
 802158e:	2800      	cmp	r0, #0
 8021590:	d0f3      	beq.n	802157a <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021592:	4603      	mov	r3, r0
 8021594:	2202      	movs	r2, #2
 8021596:	2101      	movs	r1, #1
 8021598:	4630      	mov	r0, r6
 802159a:	f7ff ff30 	bl	80213fe <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 802159e:	f015 0f08 	tst.w	r5, #8
 80215a2:	d0e7      	beq.n	8021574 <w5500_tx+0x5a>
 80215a4:	2700      	movs	r7, #0
 80215a6:	e7e5      	b.n	8021574 <w5500_tx+0x5a>
  }
  return len;
}
 80215a8:	4638      	mov	r0, r7
 80215aa:	b002      	add	sp, #8
 80215ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080215b0 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 80215b0:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80215b2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 80215b4:	68a3      	ldr	r3, [r4, #8]
 80215b6:	6820      	ldr	r0, [r4, #0]
 80215b8:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 80215ba:	2380      	movs	r3, #128	@ 0x80
 80215bc:	2200      	movs	r2, #0
 80215be:	4611      	mov	r1, r2
 80215c0:	4620      	mov	r0, r4
 80215c2:	f7ff ff1c 	bl	80213fe <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 80215c6:	2300      	movs	r3, #0
 80215c8:	222e      	movs	r2, #46	@ 0x2e
 80215ca:	4619      	mov	r1, r3
 80215cc:	4620      	mov	r0, r4
 80215ce:	f7ff ff16 	bl	80213fe <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 80215d2:	23f8      	movs	r3, #248	@ 0xf8
 80215d4:	222e      	movs	r2, #46	@ 0x2e
 80215d6:	2100      	movs	r1, #0
 80215d8:	4620      	mov	r0, r4
 80215da:	f7ff ff10 	bl	80213fe <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 80215de:	2310      	movs	r3, #16
 80215e0:	221e      	movs	r2, #30
 80215e2:	2101      	movs	r1, #1
 80215e4:	4620      	mov	r0, r4
 80215e6:	f7ff ff0a 	bl	80213fe <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 80215ea:	2310      	movs	r3, #16
 80215ec:	221f      	movs	r2, #31
 80215ee:	2101      	movs	r1, #1
 80215f0:	4620      	mov	r0, r4
 80215f2:	f7ff ff04 	bl	80213fe <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 80215f6:	2304      	movs	r3, #4
 80215f8:	2200      	movs	r2, #0
 80215fa:	2101      	movs	r1, #1
 80215fc:	4620      	mov	r0, r4
 80215fe:	f7ff fefe 	bl	80213fe <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8021602:	2301      	movs	r3, #1
 8021604:	461a      	mov	r2, r3
 8021606:	4619      	mov	r1, r3
 8021608:	4620      	mov	r0, r4
 802160a:	f7ff fef8 	bl	80213fe <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 802160e:	2203      	movs	r2, #3
 8021610:	2101      	movs	r1, #1
 8021612:	4620      	mov	r0, r4
 8021614:	f7ff ff1a 	bl	802144c <w5500_r1>
}
 8021618:	2842      	cmp	r0, #66	@ 0x42
 802161a:	bf14      	ite	ne
 802161c:	2000      	movne	r0, #0
 802161e:	2001      	moveq	r0, #1
 8021620:	bd10      	pop	{r4, pc}

08021622 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8021622:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8021624:	222e      	movs	r2, #46	@ 0x2e
 8021626:	2100      	movs	r1, #0
 8021628:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 802162a:	f7ff ff0f 	bl	802144c <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 802162e:	f000 0001 	and.w	r0, r0, #1
 8021632:	bd08      	pop	{r3, pc}

08021634 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8021634:	b508      	push	{r3, lr}
 8021636:	4602      	mov	r2, r0
 8021638:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 802163a:	e000      	b.n	802163e <mg_dns_free+0xa>
 802163c:	461a      	mov	r2, r3
 802163e:	6813      	ldr	r3, [r2, #0]
 8021640:	4283      	cmp	r3, r0
 8021642:	d1fb      	bne.n	802163c <mg_dns_free+0x8>
 8021644:	6803      	ldr	r3, [r0, #0]
 8021646:	6013      	str	r3, [r2, #0]
  free(d);
 8021648:	f7f9 fa18 	bl	801aa7c <vPortFree>
}
 802164c:	bd08      	pop	{r3, pc}

0802164e <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 802164e:	b082      	sub	sp, #8
 8021650:	ab02      	add	r3, sp, #8
 8021652:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8021656:	b111      	cbz	r1, 802165e <mg_atone+0x10>
 8021658:	2000      	movs	r0, #0
}
 802165a:	b002      	add	sp, #8
 802165c:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 802165e:	6011      	str	r1, [r2, #0]
 8021660:	6051      	str	r1, [r2, #4]
 8021662:	6091      	str	r1, [r2, #8]
 8021664:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8021666:	74d1      	strb	r1, [r2, #19]
  return true;
 8021668:	2001      	movs	r0, #1
 802166a:	e7f6      	b.n	802165a <mg_atone+0xc>

0802166c <urlparse>:
static struct url urlparse(const char *url) {
 802166c:	b510      	push	{r4, lr}
 802166e:	b088      	sub	sp, #32
 8021670:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021672:	2200      	movs	r2, #0
 8021674:	9201      	str	r2, [sp, #4]
 8021676:	9202      	str	r2, [sp, #8]
 8021678:	9203      	str	r2, [sp, #12]
 802167a:	9204      	str	r2, [sp, #16]
 802167c:	9205      	str	r2, [sp, #20]
 802167e:	9206      	str	r2, [sp, #24]
 8021680:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021682:	e00f      	b.n	80216a4 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021684:	b19a      	cbz	r2, 80216ae <urlparse+0x42>
 8021686:	9804      	ldr	r0, [sp, #16]
 8021688:	b988      	cbnz	r0, 80216ae <urlparse+0x42>
 802168a:	1888      	adds	r0, r1, r2
 802168c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021690:	282f      	cmp	r0, #47	@ 0x2f
 8021692:	d10c      	bne.n	80216ae <urlparse+0x42>
      u.host = i + 1;
 8021694:	1c53      	adds	r3, r2, #1
 8021696:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021698:	2300      	movs	r3, #0
 802169a:	9305      	str	r3, [sp, #20]
 802169c:	e001      	b.n	80216a2 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 802169e:	2300      	movs	r3, #0
 80216a0:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 80216a2:	3201      	adds	r2, #1
 80216a4:	5c8b      	ldrb	r3, [r1, r2]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	d02c      	beq.n	8021704 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80216aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80216ac:	d0ea      	beq.n	8021684 <urlparse+0x18>
    } else if (url[i] == ']') {
 80216ae:	2b5d      	cmp	r3, #93	@ 0x5d
 80216b0:	d0f5      	beq.n	802169e <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80216b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80216b4:	d00b      	beq.n	80216ce <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80216b6:	2b40      	cmp	r3, #64	@ 0x40
 80216b8:	d012      	beq.n	80216e0 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80216ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80216bc:	d1f1      	bne.n	80216a2 <urlparse+0x36>
 80216be:	9b04      	ldr	r3, [sp, #16]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d0ee      	beq.n	80216a2 <urlparse+0x36>
 80216c4:	9b06      	ldr	r3, [sp, #24]
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	d1eb      	bne.n	80216a2 <urlparse+0x36>
      u.uri = i;
 80216ca:	9206      	str	r2, [sp, #24]
 80216cc:	e7e9      	b.n	80216a2 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80216ce:	9805      	ldr	r0, [sp, #20]
 80216d0:	2800      	cmp	r0, #0
 80216d2:	d1f0      	bne.n	80216b6 <urlparse+0x4a>
 80216d4:	9806      	ldr	r0, [sp, #24]
 80216d6:	2800      	cmp	r0, #0
 80216d8:	d1ed      	bne.n	80216b6 <urlparse+0x4a>
      u.port = i + 1;
 80216da:	1c53      	adds	r3, r2, #1
 80216dc:	9305      	str	r3, [sp, #20]
 80216de:	e7e0      	b.n	80216a2 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80216e0:	9802      	ldr	r0, [sp, #8]
 80216e2:	2800      	cmp	r0, #0
 80216e4:	d1e9      	bne.n	80216ba <urlparse+0x4e>
 80216e6:	9803      	ldr	r0, [sp, #12]
 80216e8:	2800      	cmp	r0, #0
 80216ea:	d1e6      	bne.n	80216ba <urlparse+0x4e>
 80216ec:	9806      	ldr	r0, [sp, #24]
 80216ee:	2800      	cmp	r0, #0
 80216f0:	d1e3      	bne.n	80216ba <urlparse+0x4e>
      u.user = u.host;
 80216f2:	9b04      	ldr	r3, [sp, #16]
 80216f4:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 80216f6:	9b05      	ldr	r3, [sp, #20]
 80216f8:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 80216fa:	1c53      	adds	r3, r2, #1
 80216fc:	9304      	str	r3, [sp, #16]
      u.port = 0;
 80216fe:	2300      	movs	r3, #0
 8021700:	9305      	str	r3, [sp, #20]
 8021702:	e7ce      	b.n	80216a2 <urlparse+0x36>
  u.end = i;
 8021704:	9207      	str	r2, [sp, #28]
  return u;
 8021706:	46a4      	mov	ip, r4
 8021708:	f10d 0e04 	add.w	lr, sp, #4
 802170c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021710:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021714:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8021718:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 802171c:	4620      	mov	r0, r4
 802171e:	b008      	add	sp, #32
 8021720:	bd10      	pop	{r4, pc}

08021722 <mg_dns_parse_name_depth>:
                                      int depth) {
 8021722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021726:	b085      	sub	sp, #20
 8021728:	4681      	mov	r9, r0
 802172a:	4688      	mov	r8, r1
 802172c:	4693      	mov	fp, r2
 802172e:	469a      	mov	sl, r3
 8021730:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021732:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8021734:	b11f      	cbz	r7, 802173e <mg_dns_parse_name_depth+0x1c>
 8021736:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021738:	b90b      	cbnz	r3, 802173e <mg_dns_parse_name_depth+0x1c>
 802173a:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 802173e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021740:	2b05      	cmp	r3, #5
 8021742:	dc4f      	bgt.n	80217e4 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8021744:	2600      	movs	r6, #0
 8021746:	e02f      	b.n	80217a8 <mg_dns_parse_name_depth+0x86>
      i++;
 8021748:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 802174a:	2f00      	cmp	r7, #0
 802174c:	d04b      	beq.n	80217e6 <mg_dns_parse_name_depth+0xc4>
 802174e:	3f01      	subs	r7, #1
 8021750:	2300      	movs	r3, #0
 8021752:	f80a 3007 	strb.w	r3, [sl, r7]
 8021756:	e046      	b.n	80217e6 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8021758:	0222      	lsls	r2, r4, #8
 802175a:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 802175e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021762:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021764:	1c53      	adds	r3, r2, #1
 8021766:	4543      	cmp	r3, r8
 8021768:	d203      	bcs.n	8021772 <mg_dns_parse_name_depth+0x50>
 802176a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802176e:	2b3f      	cmp	r3, #63	@ 0x3f
 8021770:	d901      	bls.n	8021776 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021772:	3602      	adds	r6, #2
      break;
 8021774:	e7e9      	b.n	802174a <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021776:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021778:	3301      	adds	r3, #1
 802177a:	9302      	str	r3, [sp, #8]
 802177c:	9501      	str	r5, [sp, #4]
 802177e:	9700      	str	r7, [sp, #0]
 8021780:	4653      	mov	r3, sl
 8021782:	4641      	mov	r1, r8
 8021784:	4648      	mov	r0, r9
 8021786:	f7ff ffcc 	bl	8021722 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 802178a:	2800      	cmp	r0, #0
 802178c:	d1f1      	bne.n	8021772 <mg_dns_parse_name_depth+0x50>
        return 0;
 802178e:	4606      	mov	r6, r0
 8021790:	e029      	b.n	80217e6 <mg_dns_parse_name_depth+0xc4>
 8021792:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021794:	1905      	adds	r5, r0, r4
 8021796:	42bd      	cmp	r5, r7
 8021798:	d31e      	bcc.n	80217d8 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 802179a:	4426      	add	r6, r4
 802179c:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 802179e:	42bd      	cmp	r5, r7
 80217a0:	d202      	bcs.n	80217a8 <mg_dns_parse_name_depth+0x86>
 80217a2:	2300      	movs	r3, #0
 80217a4:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 80217a8:	eb06 030b 	add.w	r3, r6, fp
 80217ac:	1c59      	adds	r1, r3, #1
 80217ae:	4541      	cmp	r1, r8
 80217b0:	d2cb      	bcs.n	802174a <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 80217b2:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 80217b6:	2c00      	cmp	r4, #0
 80217b8:	d0c6      	beq.n	8021748 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 80217ba:	2c3f      	cmp	r4, #63	@ 0x3f
 80217bc:	d8cc      	bhi.n	8021758 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 80217be:	4423      	add	r3, r4
 80217c0:	3301      	adds	r3, #1
 80217c2:	4543      	cmp	r3, r8
 80217c4:	d213      	bcs.n	80217ee <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 80217c6:	2d00      	cmp	r5, #0
 80217c8:	d0e3      	beq.n	8021792 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 80217ca:	42bd      	cmp	r5, r7
 80217cc:	d202      	bcs.n	80217d4 <mg_dns_parse_name_depth+0xb2>
 80217ce:	232e      	movs	r3, #46	@ 0x2e
 80217d0:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 80217d4:	1c68      	adds	r0, r5, #1
 80217d6:	e7dd      	b.n	8021794 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80217d8:	4622      	mov	r2, r4
 80217da:	4449      	add	r1, r9
 80217dc:	4450      	add	r0, sl
 80217de:	f00c fb3b 	bl	802de58 <memcpy>
 80217e2:	e7da      	b.n	802179a <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 80217e4:	2600      	movs	r6, #0
}
 80217e6:	4630      	mov	r0, r6
 80217e8:	b005      	add	sp, #20
 80217ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 80217ee:	2600      	movs	r6, #0
 80217f0:	e7f9      	b.n	80217e6 <mg_dns_parse_name_depth+0xc4>

080217f2 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 80217f2:	b510      	push	{r4, lr}
 80217f4:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80217f6:	2400      	movs	r4, #0
 80217f8:	9402      	str	r4, [sp, #8]
 80217fa:	9401      	str	r4, [sp, #4]
 80217fc:	9c06      	ldr	r4, [sp, #24]
 80217fe:	9400      	str	r4, [sp, #0]
 8021800:	f7ff ff8f 	bl	8021722 <mg_dns_parse_name_depth>
}
 8021804:	b004      	add	sp, #16
 8021806:	bd10      	pop	{r4, pc}

08021808 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8021808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802180c:	b09f      	sub	sp, #124	@ 0x7c
 802180e:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8021810:	460c      	mov	r4, r1
 8021812:	af0e      	add	r7, sp, #56	@ 0x38
 8021814:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021818:	463e      	mov	r6, r7
 802181a:	6820      	ldr	r0, [r4, #0]
 802181c:	6861      	ldr	r1, [r4, #4]
 802181e:	68a2      	ldr	r2, [r4, #8]
 8021820:	68e3      	ldr	r3, [r4, #12]
 8021822:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021824:	3410      	adds	r4, #16
 8021826:	4637      	mov	r7, r6
 8021828:	42ac      	cmp	r4, r5
 802182a:	d1f5      	bne.n	8021818 <mg_sha1_transform+0x10>
  a = state[0];
 802182c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802182e:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021830:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8021832:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8021834:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021838:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 802183c:	ea84 0608 	eor.w	r6, r4, r8
 8021840:	403e      	ands	r6, r7
 8021842:	ea86 0608 	eor.w	r6, r6, r8
 8021846:	2100      	movs	r1, #0
 8021848:	a80e      	add	r0, sp, #56	@ 0x38
 802184a:	f7ff fd79 	bl	8021340 <blk0>
 802184e:	1833      	adds	r3, r6, r0
 8021850:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8021854:	4ee4      	ldr	r6, [pc, #912]	@ (8021be8 <mg_sha1_transform+0x3e0>)
 8021856:	4433      	add	r3, r6
 8021858:	4499      	add	r9, r3
 802185a:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 802185e:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021862:	402f      	ands	r7, r5
 8021864:	4067      	eors	r7, r4
 8021866:	2101      	movs	r1, #1
 8021868:	a80e      	add	r0, sp, #56	@ 0x38
 802186a:	f7ff fd69 	bl	8021340 <blk0>
 802186e:	4407      	add	r7, r0
 8021870:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021874:	4437      	add	r7, r6
 8021876:	4447      	add	r7, r8
 8021878:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 802187c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021880:	ea05 0509 	and.w	r5, r5, r9
 8021884:	ea85 050a 	eor.w	r5, r5, sl
 8021888:	2102      	movs	r1, #2
 802188a:	a80e      	add	r0, sp, #56	@ 0x38
 802188c:	f7ff fd58 	bl	8021340 <blk0>
 8021890:	4405      	add	r5, r0
 8021892:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021896:	4435      	add	r5, r6
 8021898:	442c      	add	r4, r5
 802189a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 802189e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80218a2:	ea09 0907 	and.w	r9, r9, r7
 80218a6:	ea89 0908 	eor.w	r9, r9, r8
 80218aa:	2103      	movs	r1, #3
 80218ac:	a80e      	add	r0, sp, #56	@ 0x38
 80218ae:	f7ff fd47 	bl	8021340 <blk0>
 80218b2:	4481      	add	r9, r0
 80218b4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80218b8:	44b1      	add	r9, r6
 80218ba:	44ca      	add	sl, r9
 80218bc:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 80218c0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80218c4:	4027      	ands	r7, r4
 80218c6:	406f      	eors	r7, r5
 80218c8:	2104      	movs	r1, #4
 80218ca:	a80e      	add	r0, sp, #56	@ 0x38
 80218cc:	f7ff fd38 	bl	8021340 <blk0>
 80218d0:	4407      	add	r7, r0
 80218d2:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80218d6:	4437      	add	r7, r6
 80218d8:	44b8      	add	r8, r7
 80218da:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 80218de:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80218e2:	ea04 040a 	and.w	r4, r4, sl
 80218e6:	ea84 0409 	eor.w	r4, r4, r9
 80218ea:	2105      	movs	r1, #5
 80218ec:	a80e      	add	r0, sp, #56	@ 0x38
 80218ee:	f7ff fd27 	bl	8021340 <blk0>
 80218f2:	4404      	add	r4, r0
 80218f4:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80218f8:	4434      	add	r4, r6
 80218fa:	4425      	add	r5, r4
 80218fc:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8021900:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8021904:	ea0a 0a08 	and.w	sl, sl, r8
 8021908:	ea8a 0a07 	eor.w	sl, sl, r7
 802190c:	2106      	movs	r1, #6
 802190e:	a80e      	add	r0, sp, #56	@ 0x38
 8021910:	f7ff fd16 	bl	8021340 <blk0>
 8021914:	4482      	add	sl, r0
 8021916:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802191a:	44b2      	add	sl, r6
 802191c:	44d1      	add	r9, sl
 802191e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8021922:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021926:	ea08 0805 	and.w	r8, r8, r5
 802192a:	ea88 0804 	eor.w	r8, r8, r4
 802192e:	2107      	movs	r1, #7
 8021930:	a80e      	add	r0, sp, #56	@ 0x38
 8021932:	f7ff fd05 	bl	8021340 <blk0>
 8021936:	4480      	add	r8, r0
 8021938:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802193c:	44b0      	add	r8, r6
 802193e:	4447      	add	r7, r8
 8021940:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8021944:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021948:	ea05 0509 	and.w	r5, r5, r9
 802194c:	ea85 050a 	eor.w	r5, r5, sl
 8021950:	2108      	movs	r1, #8
 8021952:	a80e      	add	r0, sp, #56	@ 0x38
 8021954:	f7ff fcf4 	bl	8021340 <blk0>
 8021958:	4405      	add	r5, r0
 802195a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802195e:	4435      	add	r5, r6
 8021960:	442c      	add	r4, r5
 8021962:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8021966:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802196a:	ea09 0907 	and.w	r9, r9, r7
 802196e:	ea89 0908 	eor.w	r9, r9, r8
 8021972:	2109      	movs	r1, #9
 8021974:	a80e      	add	r0, sp, #56	@ 0x38
 8021976:	f7ff fce3 	bl	8021340 <blk0>
 802197a:	4481      	add	r9, r0
 802197c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021980:	44b1      	add	r9, r6
 8021982:	44ca      	add	sl, r9
 8021984:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8021988:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802198c:	4027      	ands	r7, r4
 802198e:	406f      	eors	r7, r5
 8021990:	210a      	movs	r1, #10
 8021992:	a80e      	add	r0, sp, #56	@ 0x38
 8021994:	f7ff fcd4 	bl	8021340 <blk0>
 8021998:	4407      	add	r7, r0
 802199a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 802199e:	4437      	add	r7, r6
 80219a0:	44b8      	add	r8, r7
 80219a2:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 80219a6:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80219aa:	ea04 040a 	and.w	r4, r4, sl
 80219ae:	ea84 0409 	eor.w	r4, r4, r9
 80219b2:	210b      	movs	r1, #11
 80219b4:	a80e      	add	r0, sp, #56	@ 0x38
 80219b6:	f7ff fcc3 	bl	8021340 <blk0>
 80219ba:	4404      	add	r4, r0
 80219bc:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80219c0:	4434      	add	r4, r6
 80219c2:	4425      	add	r5, r4
 80219c4:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 80219c8:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80219cc:	ea0a 0a08 	and.w	sl, sl, r8
 80219d0:	ea8a 0a07 	eor.w	sl, sl, r7
 80219d4:	210c      	movs	r1, #12
 80219d6:	a80e      	add	r0, sp, #56	@ 0x38
 80219d8:	f7ff fcb2 	bl	8021340 <blk0>
 80219dc:	4482      	add	sl, r0
 80219de:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 80219e2:	44b2      	add	sl, r6
 80219e4:	44d1      	add	r9, sl
 80219e6:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 80219ea:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 80219ee:	ea08 0805 	and.w	r8, r8, r5
 80219f2:	ea88 0804 	eor.w	r8, r8, r4
 80219f6:	210d      	movs	r1, #13
 80219f8:	a80e      	add	r0, sp, #56	@ 0x38
 80219fa:	f7ff fca1 	bl	8021340 <blk0>
 80219fe:	4480      	add	r8, r0
 8021a00:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021a04:	44b0      	add	r8, r6
 8021a06:	4447      	add	r7, r8
 8021a08:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 8021a0c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021a10:	ea05 0509 	and.w	r5, r5, r9
 8021a14:	ea85 050a 	eor.w	r5, r5, sl
 8021a18:	210e      	movs	r1, #14
 8021a1a:	a80e      	add	r0, sp, #56	@ 0x38
 8021a1c:	f7ff fc90 	bl	8021340 <blk0>
 8021a20:	4405      	add	r5, r0
 8021a22:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021a26:	4435      	add	r5, r6
 8021a28:	442c      	add	r4, r5
 8021a2a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8021a2e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021a32:	ea09 0907 	and.w	r9, r9, r7
 8021a36:	ea89 0908 	eor.w	r9, r9, r8
 8021a3a:	210f      	movs	r1, #15
 8021a3c:	a80e      	add	r0, sp, #56	@ 0x38
 8021a3e:	f7ff fc7f 	bl	8021340 <blk0>
 8021a42:	4481      	add	r9, r0
 8021a44:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021a48:	44b1      	add	r9, r6
 8021a4a:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 8021a4e:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8021a52:	4023      	ands	r3, r4
 8021a54:	ea83 0205 	eor.w	r2, r3, r5
 8021a58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021a5a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021a5c:	4043      	eors	r3, r0
 8021a5e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021a60:	ea83 0c00 	eor.w	ip, r3, r0
 8021a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a66:	ea8c 0303 	eor.w	r3, ip, r3
 8021a6a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021a6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a70:	9300      	str	r3, [sp, #0]
 8021a72:	18d3      	adds	r3, r2, r3
 8021a74:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021a78:	4433      	add	r3, r6
 8021a7a:	eb08 0203 	add.w	r2, r8, r3
 8021a7e:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8021a82:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8021a86:	ea0c 0c01 	and.w	ip, ip, r1
 8021a8a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021a8e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a90:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021a92:	ea83 0e04 	eor.w	lr, r3, r4
 8021a96:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8021a9a:	ea8e 0e09 	eor.w	lr, lr, r9
 8021a9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021aa0:	ea8e 0e03 	eor.w	lr, lr, r3
 8021aa4:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021aa8:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021aaa:	9401      	str	r4, [sp, #4]
 8021aac:	44a4      	add	ip, r4
 8021aae:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8021ab2:	44b4      	add	ip, r6
 8021ab4:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8021ab6:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8021aba:	4015      	ands	r5, r2
 8021abc:	ea85 0508 	eor.w	r5, r5, r8
 8021ac0:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8021ac2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021ac4:	ea84 0e03 	eor.w	lr, r4, r3
 8021ac8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021aca:	ea8e 0e03 	eor.w	lr, lr, r3
 8021ace:	ea80 000e 	eor.w	r0, r0, lr
 8021ad2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021ad6:	9010      	str	r0, [sp, #64]	@ 0x40
 8021ad8:	9002      	str	r0, [sp, #8]
 8021ada:	4405      	add	r5, r0
 8021adc:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8021ae0:	4435      	add	r5, r6
 8021ae2:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8021ae6:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8021aea:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021aee:	ea00 000c 	and.w	r0, r0, ip
 8021af2:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8021af6:	9f00      	ldr	r7, [sp, #0]
 8021af8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8021afa:	4067      	eors	r7, r4
 8021afc:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8021b00:	ea87 070e 	eor.w	r7, r7, lr
 8021b04:	ea89 0907 	eor.w	r9, r9, r7
 8021b08:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021b0c:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8021b10:	4448      	add	r0, r9
 8021b12:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8021b16:	4430      	add	r0, r6
 8021b18:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8021b1c:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8021b20:	4050      	eors	r0, r2
 8021b22:	9e01      	ldr	r6, [sp, #4]
 8021b24:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021b26:	ea86 0807 	eor.w	r8, r6, r7
 8021b2a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8021b2e:	ea88 080a 	eor.w	r8, r8, sl
 8021b32:	ea83 0808 	eor.w	r8, r3, r8
 8021b36:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8021b3a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021b3e:	4440      	add	r0, r8
 8021b40:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021b44:	4b29      	ldr	r3, [pc, #164]	@ (8021bec <mg_sha1_transform+0x3e4>)
 8021b46:	4418      	add	r0, r3
 8021b48:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8021b4c:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021b50:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8021b54:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8021b56:	9f02      	ldr	r7, [sp, #8]
 8021b58:	4077      	eors	r7, r6
 8021b5a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8021b5c:	4077      	eors	r7, r6
 8021b5e:	ea8e 0707 	eor.w	r7, lr, r7
 8021b62:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021b66:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021b68:	9703      	str	r7, [sp, #12]
 8021b6a:	4439      	add	r1, r7
 8021b6c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021b70:	4419      	add	r1, r3
 8021b72:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8021b74:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8021b78:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8021b7c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021b7e:	ea87 0e09 	eor.w	lr, r7, r9
 8021b82:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8021b84:	ea87 0e0e 	eor.w	lr, r7, lr
 8021b88:	ea8a 0e0e 	eor.w	lr, sl, lr
 8021b8c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021b90:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021b94:	4471      	add	r1, lr
 8021b96:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8021b9a:	4419      	add	r1, r3
 8021b9c:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8021ba0:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8021ba4:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021ba8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021baa:	ea87 0c08 	eor.w	ip, r7, r8
 8021bae:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021bb0:	ea87 0c0c 	eor.w	ip, r7, ip
 8021bb4:	ea86 0c0c 	eor.w	ip, r6, ip
 8021bb8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021bbc:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021bc0:	44e3      	add	fp, ip
 8021bc2:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8021bc6:	449b      	add	fp, r3
 8021bc8:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8021bcc:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8021bd0:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8021bd4:	9d00      	ldr	r5, [sp, #0]
 8021bd6:	9e03      	ldr	r6, [sp, #12]
 8021bd8:	406e      	eors	r6, r5
 8021bda:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8021bdc:	406e      	eors	r6, r5
 8021bde:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021be0:	406e      	eors	r6, r5
 8021be2:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021be6:	e003      	b.n	8021bf0 <mg_sha1_transform+0x3e8>
 8021be8:	5a827999 	.word	0x5a827999
 8021bec:	6ed9eba1 	.word	0x6ed9eba1
 8021bf0:	9716      	str	r7, [sp, #88]	@ 0x58
 8021bf2:	9704      	str	r7, [sp, #16]
 8021bf4:	44ba      	add	sl, r7
 8021bf6:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8021bfa:	449a      	add	sl, r3
 8021bfc:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8021c00:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8021c04:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8021c08:	9e01      	ldr	r6, [sp, #4]
 8021c0a:	ea86 040e 	eor.w	r4, r6, lr
 8021c0e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021c10:	407c      	eors	r4, r7
 8021c12:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021c14:	407c      	eors	r4, r7
 8021c16:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021c1a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021c1c:	9405      	str	r4, [sp, #20]
 8021c1e:	4425      	add	r5, r4
 8021c20:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021c24:	441d      	add	r5, r3
 8021c26:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021c2a:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021c2e:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021c32:	9e02      	ldr	r6, [sp, #8]
 8021c34:	ea86 000c 	eor.w	r0, r6, ip
 8021c38:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021c3a:	4078      	eors	r0, r7
 8021c3c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021c3e:	4078      	eors	r0, r7
 8021c40:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021c44:	4606      	mov	r6, r0
 8021c46:	9018      	str	r0, [sp, #96]	@ 0x60
 8021c48:	4404      	add	r4, r0
 8021c4a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021c4e:	441c      	add	r4, r3
 8021c50:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8021c54:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021c58:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8021c5c:	9f04      	ldr	r7, [sp, #16]
 8021c5e:	ea89 0207 	eor.w	r2, r9, r7
 8021c62:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021c64:	407a      	eors	r2, r7
 8021c66:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021c68:	407a      	eors	r2, r7
 8021c6a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021c6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8021c70:	9206      	str	r2, [sp, #24]
 8021c72:	4410      	add	r0, r2
 8021c74:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021c78:	4418      	add	r0, r3
 8021c7a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8021c7e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021c82:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021c86:	9a05      	ldr	r2, [sp, #20]
 8021c88:	ea88 0202 	eor.w	r2, r8, r2
 8021c8c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021c8e:	407a      	eors	r2, r7
 8021c90:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021c92:	407a      	eors	r2, r7
 8021c94:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021c98:	921a      	str	r2, [sp, #104]	@ 0x68
 8021c9a:	9207      	str	r2, [sp, #28]
 8021c9c:	4411      	add	r1, r2
 8021c9e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021ca2:	4419      	add	r1, r3
 8021ca4:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021ca8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021cac:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021cb0:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021cb2:	9f03      	ldr	r7, [sp, #12]
 8021cb4:	ea87 0b06 	eor.w	fp, r7, r6
 8021cb8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021cba:	ea87 0b0b 	eor.w	fp, r7, fp
 8021cbe:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021cc0:	ea87 0b0b 	eor.w	fp, r7, fp
 8021cc4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021cc8:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8021ccc:	f8cd b020 	str.w	fp, [sp, #32]
 8021cd0:	445a      	add	r2, fp
 8021cd2:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021cd6:	441a      	add	r2, r3
 8021cd8:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8021cdc:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8021ce0:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8021ce4:	9e06      	ldr	r6, [sp, #24]
 8021ce6:	ea8e 0b06 	eor.w	fp, lr, r6
 8021cea:	9e00      	ldr	r6, [sp, #0]
 8021cec:	ea86 0b0b 	eor.w	fp, r6, fp
 8021cf0:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021cf2:	ea87 0b0b 	eor.w	fp, r7, fp
 8021cf6:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021cfa:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8021cfe:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8021d02:	44da      	add	sl, fp
 8021d04:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8021d08:	449a      	add	sl, r3
 8021d0a:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8021d0e:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021d12:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021d16:	9e07      	ldr	r6, [sp, #28]
 8021d18:	ea8c 0b06 	eor.w	fp, ip, r6
 8021d1c:	9e01      	ldr	r6, [sp, #4]
 8021d1e:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d22:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021d24:	ea87 0b0b 	eor.w	fp, r7, fp
 8021d28:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d2c:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021d30:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8021d34:	445d      	add	r5, fp
 8021d36:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021d3a:	441d      	add	r5, r3
 8021d3c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021d40:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8021d44:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021d48:	9e08      	ldr	r6, [sp, #32]
 8021d4a:	9f04      	ldr	r7, [sp, #16]
 8021d4c:	ea87 0b06 	eor.w	fp, r7, r6
 8021d50:	9e02      	ldr	r6, [sp, #8]
 8021d52:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d56:	9e00      	ldr	r6, [sp, #0]
 8021d58:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d5c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d60:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021d64:	f8cd b000 	str.w	fp, [sp]
 8021d68:	445c      	add	r4, fp
 8021d6a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021d6e:	441c      	add	r4, r3
 8021d70:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8021d74:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021d78:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021d7c:	9e05      	ldr	r6, [sp, #20]
 8021d7e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021d80:	ea86 0b07 	eor.w	fp, r6, r7
 8021d84:	ea89 0b0b 	eor.w	fp, r9, fp
 8021d88:	9e01      	ldr	r6, [sp, #4]
 8021d8a:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d8e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d92:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8021d96:	f8cd b004 	str.w	fp, [sp, #4]
 8021d9a:	4458      	add	r0, fp
 8021d9c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021da0:	4418      	add	r0, r3
 8021da2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8021da6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021daa:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021dae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021db0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021db2:	ea86 0b07 	eor.w	fp, r6, r7
 8021db6:	ea88 0b0b 	eor.w	fp, r8, fp
 8021dba:	9e02      	ldr	r6, [sp, #8]
 8021dbc:	ea86 0b0b 	eor.w	fp, r6, fp
 8021dc0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021dc4:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8021dc8:	f8cd b008 	str.w	fp, [sp, #8]
 8021dcc:	4459      	add	r1, fp
 8021dce:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021dd2:	4419      	add	r1, r3
 8021dd4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8021dd8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021ddc:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021de0:	9e06      	ldr	r6, [sp, #24]
 8021de2:	9f00      	ldr	r7, [sp, #0]
 8021de4:	ea86 0b07 	eor.w	fp, r6, r7
 8021de8:	9e03      	ldr	r6, [sp, #12]
 8021dea:	ea86 0b0b 	eor.w	fp, r6, fp
 8021dee:	ea89 090b 	eor.w	r9, r9, fp
 8021df2:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8021df6:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8021dfa:	445a      	add	r2, fp
 8021dfc:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021e00:	441a      	add	r2, r3
 8021e02:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8021e06:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8021e0a:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8021e0e:	9e07      	ldr	r6, [sp, #28]
 8021e10:	9f01      	ldr	r7, [sp, #4]
 8021e12:	ea86 0a07 	eor.w	sl, r6, r7
 8021e16:	ea8e 0a0a 	eor.w	sl, lr, sl
 8021e1a:	ea88 080a 	eor.w	r8, r8, sl
 8021e1e:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8021e22:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8021e26:	44d1      	add	r9, sl
 8021e28:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8021e2c:	4499      	add	r9, r3
 8021e2e:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8021e32:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021e36:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021e3a:	9e08      	ldr	r6, [sp, #32]
 8021e3c:	9f02      	ldr	r7, [sp, #8]
 8021e3e:	ea86 0907 	eor.w	r9, r6, r7
 8021e42:	ea8c 0909 	eor.w	r9, ip, r9
 8021e46:	9e03      	ldr	r6, [sp, #12]
 8021e48:	ea86 0709 	eor.w	r7, r6, r9
 8021e4c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021e50:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021e54:	444d      	add	r5, r9
 8021e56:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8021e5a:	441d      	add	r5, r3
 8021e5c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8021e60:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8021e64:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021e68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021e6a:	ea87 070b 	eor.w	r7, r7, fp
 8021e6e:	9e04      	ldr	r6, [sp, #16]
 8021e70:	4077      	eors	r7, r6
 8021e72:	ea8e 0e07 	eor.w	lr, lr, r7
 8021e76:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021e7a:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021e7e:	4474      	add	r4, lr
 8021e80:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021e84:	441c      	add	r4, r3
 8021e86:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8021e8a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8021e8e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021e92:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021e94:	ea87 070a 	eor.w	r7, r7, sl
 8021e98:	9e05      	ldr	r6, [sp, #20]
 8021e9a:	4077      	eors	r7, r6
 8021e9c:	ea8c 0c07 	eor.w	ip, ip, r7
 8021ea0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021ea4:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021ea8:	f8cd c00c 	str.w	ip, [sp, #12]
 8021eac:	4460      	add	r0, ip
 8021eae:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021eb2:	4418      	add	r0, r3
 8021eb4:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8021eb8:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8021ebc:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8021ec0:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8021ec4:	4319      	orrs	r1, r3
 8021ec6:	9b00      	ldr	r3, [sp, #0]
 8021ec8:	ea83 0309 	eor.w	r3, r3, r9
 8021ecc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021ece:	4073      	eors	r3, r6
 8021ed0:	9e04      	ldr	r6, [sp, #16]
 8021ed2:	405e      	eors	r6, r3
 8021ed4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021ed8:	9316      	str	r3, [sp, #88]	@ 0x58
 8021eda:	9304      	str	r3, [sp, #16]
 8021edc:	4419      	add	r1, r3
 8021ede:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021ee2:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021ee6:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021eea:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021eee:	311c      	adds	r1, #28
 8021ef0:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8021ef4:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8021ef8:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8021efc:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8021f00:	4332      	orrs	r2, r6
 8021f02:	9b01      	ldr	r3, [sp, #4]
 8021f04:	ea83 060e 	eor.w	r6, r3, lr
 8021f08:	9b06      	ldr	r3, [sp, #24]
 8021f0a:	405e      	eors	r6, r3
 8021f0c:	9f05      	ldr	r7, [sp, #20]
 8021f0e:	407e      	eors	r6, r7
 8021f10:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021f14:	9717      	str	r7, [sp, #92]	@ 0x5c
 8021f16:	9705      	str	r7, [sp, #20]
 8021f18:	443a      	add	r2, r7
 8021f1a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021f1e:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021f22:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021f26:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021f2a:	321c      	adds	r2, #28
 8021f2c:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021f30:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 8021f34:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8021f38:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8021f3c:	433e      	orrs	r6, r7
 8021f3e:	9f02      	ldr	r7, [sp, #8]
 8021f40:	4663      	mov	r3, ip
 8021f42:	405f      	eors	r7, r3
 8021f44:	9b07      	ldr	r3, [sp, #28]
 8021f46:	405f      	eors	r7, r3
 8021f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f4a:	405f      	eors	r7, r3
 8021f4c:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021f50:	9718      	str	r7, [sp, #96]	@ 0x60
 8021f52:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021f54:	443e      	add	r6, r7
 8021f56:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021f5a:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021f5e:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021f62:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021f66:	361c      	adds	r6, #28
 8021f68:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 8021f6c:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8021f70:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8021f74:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8021f78:	432f      	orrs	r7, r5
 8021f7a:	9d04      	ldr	r5, [sp, #16]
 8021f7c:	ea8b 0505 	eor.w	r5, fp, r5
 8021f80:	9b08      	ldr	r3, [sp, #32]
 8021f82:	405d      	eors	r5, r3
 8021f84:	9b06      	ldr	r3, [sp, #24]
 8021f86:	405d      	eors	r5, r3
 8021f88:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021f8c:	9519      	str	r5, [sp, #100]	@ 0x64
 8021f8e:	9506      	str	r5, [sp, #24]
 8021f90:	442f      	add	r7, r5
 8021f92:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8021f96:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021f9a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021f9e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8021fa2:	371c      	adds	r7, #28
 8021fa4:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021fa8:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021fac:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021fb0:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8021fb4:	ea4c 0c04 	orr.w	ip, ip, r4
 8021fb8:	9c05      	ldr	r4, [sp, #20]
 8021fba:	ea8a 0404 	eor.w	r4, sl, r4
 8021fbe:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021fc0:	406c      	eors	r4, r5
 8021fc2:	9b07      	ldr	r3, [sp, #28]
 8021fc4:	405c      	eors	r4, r3
 8021fc6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021fca:	941a      	str	r4, [sp, #104]	@ 0x68
 8021fcc:	9407      	str	r4, [sp, #28]
 8021fce:	44a4      	add	ip, r4
 8021fd0:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8021fd4:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8021fd8:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8021fdc:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8021fe0:	f10c 0c1c 	add.w	ip, ip, #28
 8021fe4:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8021fe8:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8021fec:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8021ff0:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8021ff4:	4320      	orrs	r0, r4
 8021ff6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021ff8:	ea89 0404 	eor.w	r4, r9, r4
 8021ffc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021ffe:	406c      	eors	r4, r5
 8022000:	9b08      	ldr	r3, [sp, #32]
 8022002:	405c      	eors	r4, r3
 8022004:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022008:	941b      	str	r4, [sp, #108]	@ 0x6c
 802200a:	9408      	str	r4, [sp, #32]
 802200c:	4420      	add	r0, r4
 802200e:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8022012:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022016:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802201a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802201e:	301c      	adds	r0, #28
 8022020:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8022024:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8022028:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 802202c:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8022030:	430d      	orrs	r5, r1
 8022032:	9906      	ldr	r1, [sp, #24]
 8022034:	ea8e 0101 	eor.w	r1, lr, r1
 8022038:	9c00      	ldr	r4, [sp, #0]
 802203a:	4061      	eors	r1, r4
 802203c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802203e:	4059      	eors	r1, r3
 8022040:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022044:	911c      	str	r1, [sp, #112]	@ 0x70
 8022046:	9109      	str	r1, [sp, #36]	@ 0x24
 8022048:	440d      	add	r5, r1
 802204a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802204e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8022052:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8022056:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802205a:	351c      	adds	r5, #28
 802205c:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8022060:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8022064:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8022068:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 802206c:	4314      	orrs	r4, r2
 802206e:	9903      	ldr	r1, [sp, #12]
 8022070:	9a07      	ldr	r2, [sp, #28]
 8022072:	404a      	eors	r2, r1
 8022074:	9901      	ldr	r1, [sp, #4]
 8022076:	404a      	eors	r2, r1
 8022078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802207a:	405a      	eors	r2, r3
 802207c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022080:	921d      	str	r2, [sp, #116]	@ 0x74
 8022082:	920a      	str	r2, [sp, #40]	@ 0x28
 8022084:	4414      	add	r4, r2
 8022086:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802208a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802208e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022092:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022096:	341c      	adds	r4, #28
 8022098:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 802209c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 80220a0:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 80220a4:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 80220a8:	4311      	orrs	r1, r2
 80220aa:	9a04      	ldr	r2, [sp, #16]
 80220ac:	9e08      	ldr	r6, [sp, #32]
 80220ae:	4072      	eors	r2, r6
 80220b0:	9e02      	ldr	r6, [sp, #8]
 80220b2:	4072      	eors	r2, r6
 80220b4:	9b00      	ldr	r3, [sp, #0]
 80220b6:	405a      	eors	r2, r3
 80220b8:	ea4f 76f2 	mov.w	r6, r2, ror #31
 80220bc:	960e      	str	r6, [sp, #56]	@ 0x38
 80220be:	9600      	str	r6, [sp, #0]
 80220c0:	4431      	add	r1, r6
 80220c2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80220c6:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80220ca:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80220ce:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80220d2:	311c      	adds	r1, #28
 80220d4:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 80220d8:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80220dc:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80220e0:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 80220e4:	4332      	orrs	r2, r6
 80220e6:	9f05      	ldr	r7, [sp, #20]
 80220e8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80220ea:	407e      	eors	r6, r7
 80220ec:	ea8b 0606 	eor.w	r6, fp, r6
 80220f0:	9b01      	ldr	r3, [sp, #4]
 80220f2:	405e      	eors	r6, r3
 80220f4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80220f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80220fa:	9301      	str	r3, [sp, #4]
 80220fc:	441a      	add	r2, r3
 80220fe:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022102:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022106:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802210a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802210e:	321c      	adds	r2, #28
 8022110:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8022114:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8022118:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 802211c:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8022120:	433e      	orrs	r6, r7
 8022122:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022126:	405f      	eors	r7, r3
 8022128:	ea8a 0707 	eor.w	r7, sl, r7
 802212c:	9b02      	ldr	r3, [sp, #8]
 802212e:	405f      	eors	r7, r3
 8022130:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022134:	9710      	str	r7, [sp, #64]	@ 0x40
 8022136:	9702      	str	r7, [sp, #8]
 8022138:	443e      	add	r6, r7
 802213a:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 802213e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022142:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022146:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802214a:	361c      	adds	r6, #28
 802214c:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8022150:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8022154:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022158:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 802215c:	4338      	orrs	r0, r7
 802215e:	9b06      	ldr	r3, [sp, #24]
 8022160:	9f00      	ldr	r7, [sp, #0]
 8022162:	405f      	eors	r7, r3
 8022164:	ea89 0707 	eor.w	r7, r9, r7
 8022168:	ea8b 0b07 	eor.w	fp, fp, r7
 802216c:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8022170:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8022174:	4460      	add	r0, ip
 8022176:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 802217a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802217e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022182:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022186:	301c      	adds	r0, #28
 8022188:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802218c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8022190:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8022194:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8022198:	433d      	orrs	r5, r7
 802219a:	9f07      	ldr	r7, [sp, #28]
 802219c:	9b01      	ldr	r3, [sp, #4]
 802219e:	405f      	eors	r7, r3
 80221a0:	ea8e 0707 	eor.w	r7, lr, r7
 80221a4:	ea8a 0a07 	eor.w	sl, sl, r7
 80221a8:	ea4f 78fa 	mov.w	r8, sl, ror #31
 80221ac:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80221b0:	4445      	add	r5, r8
 80221b2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80221b6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80221ba:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80221be:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80221c2:	351c      	adds	r5, #28
 80221c4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 80221c8:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 80221cc:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80221d0:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 80221d4:	433c      	orrs	r4, r7
 80221d6:	9b08      	ldr	r3, [sp, #32]
 80221d8:	9f02      	ldr	r7, [sp, #8]
 80221da:	405f      	eors	r7, r3
 80221dc:	9b03      	ldr	r3, [sp, #12]
 80221de:	405f      	eors	r7, r3
 80221e0:	ea89 0707 	eor.w	r7, r9, r7
 80221e4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80221e8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80221ec:	444c      	add	r4, r9
 80221ee:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80221f2:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80221f6:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80221fa:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80221fe:	341c      	adds	r4, #28
 8022200:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8022204:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022208:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 802220c:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8022210:	4339      	orrs	r1, r7
 8022212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022214:	ea83 070c 	eor.w	r7, r3, ip
 8022218:	9b04      	ldr	r3, [sp, #16]
 802221a:	405f      	eors	r7, r3
 802221c:	ea8e 0707 	eor.w	r7, lr, r7
 8022220:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022224:	9714      	str	r7, [sp, #80]	@ 0x50
 8022226:	970c      	str	r7, [sp, #48]	@ 0x30
 8022228:	4439      	add	r1, r7
 802222a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802222e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022232:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8022236:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802223a:	311c      	adds	r1, #28
 802223c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8022240:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8022244:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8022248:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 802224c:	433a      	orrs	r2, r7
 802224e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022250:	ea87 0708 	eor.w	r7, r7, r8
 8022254:	9b05      	ldr	r3, [sp, #20]
 8022256:	405f      	eors	r7, r3
 8022258:	9b03      	ldr	r3, [sp, #12]
 802225a:	405f      	eors	r7, r3
 802225c:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8022260:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8022264:	445a      	add	r2, fp
 8022266:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802226a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802226e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022272:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022276:	321c      	adds	r2, #28
 8022278:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 802227c:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022280:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022284:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022288:	4337      	orrs	r7, r6
 802228a:	9e00      	ldr	r6, [sp, #0]
 802228c:	ea86 0609 	eor.w	r6, r6, r9
 8022290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022292:	405e      	eors	r6, r3
 8022294:	9b04      	ldr	r3, [sp, #16]
 8022296:	405e      	eors	r6, r3
 8022298:	ea4f 7af6 	mov.w	sl, r6, ror #31
 802229c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 80222a0:	4457      	add	r7, sl
 80222a2:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 80222a6:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 80222aa:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 80222ae:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80222b2:	371c      	adds	r7, #28
 80222b4:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 80222b8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80222bc:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80222c0:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 80222c4:	4330      	orrs	r0, r6
 80222c6:	9e01      	ldr	r6, [sp, #4]
 80222c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222ca:	405e      	eors	r6, r3
 80222cc:	9b06      	ldr	r3, [sp, #24]
 80222ce:	405e      	eors	r6, r3
 80222d0:	9b05      	ldr	r3, [sp, #20]
 80222d2:	405e      	eors	r6, r3
 80222d4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80222d8:	9617      	str	r6, [sp, #92]	@ 0x5c
 80222da:	9603      	str	r6, [sp, #12]
 80222dc:	4430      	add	r0, r6
 80222de:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 80222e2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80222e6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80222ea:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80222ee:	301c      	adds	r0, #28
 80222f0:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 80222f4:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 80222f8:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 80222fc:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8022300:	432e      	orrs	r6, r5
 8022302:	9d02      	ldr	r5, [sp, #8]
 8022304:	ea85 050b 	eor.w	r5, r5, fp
 8022308:	9b07      	ldr	r3, [sp, #28]
 802230a:	405d      	eors	r5, r3
 802230c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802230e:	405d      	eors	r5, r3
 8022310:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022314:	9518      	str	r5, [sp, #96]	@ 0x60
 8022316:	9504      	str	r5, [sp, #16]
 8022318:	442e      	add	r6, r5
 802231a:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 802231e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022322:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022326:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802232a:	361c      	adds	r6, #28
 802232c:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8022330:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8022334:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022338:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 802233c:	432c      	orrs	r4, r5
 802233e:	ea8c 050a 	eor.w	r5, ip, sl
 8022342:	9b08      	ldr	r3, [sp, #32]
 8022344:	405d      	eors	r5, r3
 8022346:	9b06      	ldr	r3, [sp, #24]
 8022348:	405d      	eors	r5, r3
 802234a:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802234e:	9519      	str	r5, [sp, #100]	@ 0x64
 8022350:	9505      	str	r5, [sp, #20]
 8022352:	442c      	add	r4, r5
 8022354:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8022358:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802235c:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022360:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022364:	341c      	adds	r4, #28
 8022366:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 802236a:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 802236e:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8022372:	9d03      	ldr	r5, [sp, #12]
 8022374:	ea88 0305 	eor.w	r3, r8, r5
 8022378:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802237a:	406b      	eors	r3, r5
 802237c:	9d07      	ldr	r5, [sp, #28]
 802237e:	406b      	eors	r3, r5
 8022380:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022384:	931a      	str	r3, [sp, #104]	@ 0x68
 8022386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022388:	4419      	add	r1, r3
 802238a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802238e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 802278c <mg_sha1_transform+0xf84>
 8022392:	4471      	add	r1, lr
 8022394:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022398:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 802239c:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80223a0:	9b04      	ldr	r3, [sp, #16]
 80223a2:	ea89 0303 	eor.w	r3, r9, r3
 80223a6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80223a8:	406b      	eors	r3, r5
 80223aa:	9d08      	ldr	r5, [sp, #32]
 80223ac:	406b      	eors	r3, r5
 80223ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80223b2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80223b4:	9306      	str	r3, [sp, #24]
 80223b6:	441a      	add	r2, r3
 80223b8:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80223bc:	4472      	add	r2, lr
 80223be:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 80223c2:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 80223c6:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 80223ca:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80223cc:	9d05      	ldr	r5, [sp, #20]
 80223ce:	406f      	eors	r7, r5
 80223d0:	9d00      	ldr	r5, [sp, #0]
 80223d2:	406f      	eors	r7, r5
 80223d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80223d6:	406f      	eors	r7, r5
 80223d8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80223dc:	971c      	str	r7, [sp, #112]	@ 0x70
 80223de:	9707      	str	r7, [sp, #28]
 80223e0:	443b      	add	r3, r7
 80223e2:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80223e6:	4473      	add	r3, lr
 80223e8:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 80223ec:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 80223f0:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 80223f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80223f6:	ea8b 0707 	eor.w	r7, fp, r7
 80223fa:	9d01      	ldr	r5, [sp, #4]
 80223fc:	406f      	eors	r7, r5
 80223fe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022400:	406f      	eors	r7, r5
 8022402:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022406:	971d      	str	r7, [sp, #116]	@ 0x74
 8022408:	9708      	str	r7, [sp, #32]
 802240a:	4438      	add	r0, r7
 802240c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8022410:	4470      	add	r0, lr
 8022412:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8022416:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 802241a:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 802241e:	9e06      	ldr	r6, [sp, #24]
 8022420:	ea8a 0606 	eor.w	r6, sl, r6
 8022424:	9d02      	ldr	r5, [sp, #8]
 8022426:	406e      	eors	r6, r5
 8022428:	9d00      	ldr	r5, [sp, #0]
 802242a:	406e      	eors	r6, r5
 802242c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022430:	960e      	str	r6, [sp, #56]	@ 0x38
 8022432:	9600      	str	r6, [sp, #0]
 8022434:	4437      	add	r7, r6
 8022436:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 802243a:	4477      	add	r7, lr
 802243c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8022440:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8022444:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8022448:	9c03      	ldr	r4, [sp, #12]
 802244a:	9d07      	ldr	r5, [sp, #28]
 802244c:	406c      	eors	r4, r5
 802244e:	ea8c 0404 	eor.w	r4, ip, r4
 8022452:	9d01      	ldr	r5, [sp, #4]
 8022454:	406c      	eors	r4, r5
 8022456:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802245a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802245c:	9401      	str	r4, [sp, #4]
 802245e:	4426      	add	r6, r4
 8022460:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022464:	4476      	add	r6, lr
 8022466:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 802246a:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 802246e:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022472:	9904      	ldr	r1, [sp, #16]
 8022474:	9c08      	ldr	r4, [sp, #32]
 8022476:	4061      	eors	r1, r4
 8022478:	ea88 0101 	eor.w	r1, r8, r1
 802247c:	9c02      	ldr	r4, [sp, #8]
 802247e:	4061      	eors	r1, r4
 8022480:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022484:	9110      	str	r1, [sp, #64]	@ 0x40
 8022486:	440d      	add	r5, r1
 8022488:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802248c:	4475      	add	r5, lr
 802248e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022492:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022496:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 802249a:	9a05      	ldr	r2, [sp, #20]
 802249c:	9c00      	ldr	r4, [sp, #0]
 802249e:	4062      	eors	r2, r4
 80224a0:	ea89 0202 	eor.w	r2, r9, r2
 80224a4:	ea8c 0202 	eor.w	r2, ip, r2
 80224a8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80224ac:	9211      	str	r2, [sp, #68]	@ 0x44
 80224ae:	4496      	add	lr, r2
 80224b0:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 80224b4:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 80224b8:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 80224bc:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 80224c0:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 80224c4:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 80224c8:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 80224cc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80224d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224d2:	9c01      	ldr	r4, [sp, #4]
 80224d4:	4063      	eors	r3, r4
 80224d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80224d8:	4063      	eors	r3, r4
 80224da:	ea88 0303 	eor.w	r3, r8, r3
 80224de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80224e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80224e4:	449c      	add	ip, r3
 80224e6:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 80224ea:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 80224ee:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 80224f2:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 80224f6:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 80224fa:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 80224fe:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022502:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8022506:	9806      	ldr	r0, [sp, #24]
 8022508:	4048      	eors	r0, r1
 802250a:	ea8b 0000 	eor.w	r0, fp, r0
 802250e:	ea89 0000 	eor.w	r0, r9, r0
 8022512:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022516:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022518:	4480      	add	r8, r0
 802251a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 802251e:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022522:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022526:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 802252a:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 802252e:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8022532:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022536:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 802253a:	9702      	str	r7, [sp, #8]
 802253c:	9f07      	ldr	r7, [sp, #28]
 802253e:	ea87 0902 	eor.w	r9, r7, r2
 8022542:	ea8a 0909 	eor.w	r9, sl, r9
 8022546:	ea84 0909 	eor.w	r9, r4, r9
 802254a:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802254e:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8022552:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8022556:	9c02      	ldr	r4, [sp, #8]
 8022558:	444c      	add	r4, r9
 802255a:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 802255e:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022562:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022566:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802256a:	3756      	adds	r7, #86	@ 0x56
 802256c:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022570:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022574:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022578:	9c08      	ldr	r4, [sp, #32]
 802257a:	ea84 0903 	eor.w	r9, r4, r3
 802257e:	9c03      	ldr	r4, [sp, #12]
 8022580:	ea84 0909 	eor.w	r9, r4, r9
 8022584:	ea8b 0909 	eor.w	r9, fp, r9
 8022588:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802258c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022590:	444e      	add	r6, r9
 8022592:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022596:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 802259a:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 802259e:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 80225a2:	3656      	adds	r6, #86	@ 0x56
 80225a4:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 80225a8:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 80225ac:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 80225b0:	9c00      	ldr	r4, [sp, #0]
 80225b2:	ea84 0b00 	eor.w	fp, r4, r0
 80225b6:	9c04      	ldr	r4, [sp, #16]
 80225b8:	ea84 0b0b 	eor.w	fp, r4, fp
 80225bc:	ea8a 0b0b 	eor.w	fp, sl, fp
 80225c0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80225c4:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 80225c8:	445d      	add	r5, fp
 80225ca:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80225ce:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 80225d2:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 80225d6:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 80225da:	3556      	adds	r5, #86	@ 0x56
 80225dc:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 80225e0:	9602      	str	r6, [sp, #8]
 80225e2:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 80225e6:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 80225ea:	9c01      	ldr	r4, [sp, #4]
 80225ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80225ee:	ea84 0a06 	eor.w	sl, r4, r6
 80225f2:	9c05      	ldr	r4, [sp, #20]
 80225f4:	ea84 0a0a 	eor.w	sl, r4, sl
 80225f8:	9c03      	ldr	r4, [sp, #12]
 80225fa:	ea84 0a0a 	eor.w	sl, r4, sl
 80225fe:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8022602:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8022606:	44d6      	add	lr, sl
 8022608:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 802260c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022610:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022614:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022618:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 802261c:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8022620:	9e02      	ldr	r6, [sp, #8]
 8022622:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022626:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802262a:	ea81 0109 	eor.w	r1, r1, r9
 802262e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022630:	4071      	eors	r1, r6
 8022632:	9c04      	ldr	r4, [sp, #16]
 8022634:	4061      	eors	r1, r4
 8022636:	ea4f 71f1 	mov.w	r1, r1, ror #31
 802263a:	9118      	str	r1, [sp, #96]	@ 0x60
 802263c:	448c      	add	ip, r1
 802263e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022642:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022646:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 802264a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 802264e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022652:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8022656:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 802265a:	9c02      	ldr	r4, [sp, #8]
 802265c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022660:	ea82 020b 	eor.w	r2, r2, fp
 8022664:	9c06      	ldr	r4, [sp, #24]
 8022666:	4062      	eors	r2, r4
 8022668:	9c05      	ldr	r4, [sp, #20]
 802266a:	4062      	eors	r2, r4
 802266c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022670:	9219      	str	r2, [sp, #100]	@ 0x64
 8022672:	4490      	add	r8, r2
 8022674:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022678:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 802267c:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022680:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022684:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022688:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 802268c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022690:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022694:	ea83 030a 	eor.w	r3, r3, sl
 8022698:	9c07      	ldr	r4, [sp, #28]
 802269a:	4063      	eors	r3, r4
 802269c:	4073      	eors	r3, r6
 802269e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80226a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80226a4:	441f      	add	r7, r3
 80226a6:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 80226aa:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 80226ae:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 80226b2:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 80226b6:	3756      	adds	r7, #86	@ 0x56
 80226b8:	9e02      	ldr	r6, [sp, #8]
 80226ba:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 80226be:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80226c2:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80226c6:	4048      	eors	r0, r1
 80226c8:	9908      	ldr	r1, [sp, #32]
 80226ca:	4048      	eors	r0, r1
 80226cc:	9c06      	ldr	r4, [sp, #24]
 80226ce:	4060      	eors	r0, r4
 80226d0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80226d4:	901b      	str	r0, [sp, #108]	@ 0x6c
 80226d6:	4406      	add	r6, r0
 80226d8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80226dc:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 80226e0:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 80226e4:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 80226e8:	3656      	adds	r6, #86	@ 0x56
 80226ea:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 80226ee:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 80226f2:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80226f6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80226f8:	406a      	eors	r2, r5
 80226fa:	9d00      	ldr	r5, [sp, #0]
 80226fc:	406a      	eors	r2, r5
 80226fe:	9c07      	ldr	r4, [sp, #28]
 8022700:	4062      	eors	r2, r4
 8022702:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022706:	921c      	str	r2, [sp, #112]	@ 0x70
 8022708:	4411      	add	r1, r2
 802270a:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 802270e:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8022712:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8022716:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 802271a:	3156      	adds	r1, #86	@ 0x56
 802271c:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8022720:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8022724:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8022728:	ea89 0903 	eor.w	r9, r9, r3
 802272c:	9b01      	ldr	r3, [sp, #4]
 802272e:	ea83 0909 	eor.w	r9, r3, r9
 8022732:	9c08      	ldr	r4, [sp, #32]
 8022734:	ea84 0309 	eor.w	r3, r4, r9
 8022738:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802273c:	931d      	str	r3, [sp, #116]	@ 0x74
 802273e:	4413      	add	r3, r2
 8022740:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8022744:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8022748:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 802274c:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8022750:	3356      	adds	r3, #86	@ 0x56
 8022752:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8022756:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022758:	6802      	ldr	r2, [r0, #0]
 802275a:	441a      	add	r2, r3
 802275c:	6002      	str	r2, [r0, #0]
  state[1] += b;
 802275e:	6843      	ldr	r3, [r0, #4]
 8022760:	440b      	add	r3, r1
 8022762:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8022764:	6883      	ldr	r3, [r0, #8]
 8022766:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 802276a:	6083      	str	r3, [r0, #8]
  state[3] += d;
 802276c:	68c3      	ldr	r3, [r0, #12]
 802276e:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022772:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022774:	6903      	ldr	r3, [r0, #16]
 8022776:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 802277a:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 802277c:	2240      	movs	r2, #64	@ 0x40
 802277e:	2100      	movs	r1, #0
 8022780:	a80e      	add	r0, sp, #56	@ 0x38
 8022782:	f00a f92d 	bl	802c9e0 <memset>
}
 8022786:	b01f      	add	sp, #124	@ 0x7c
 8022788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802278c:	ca62c1d6 	.word	0xca62c1d6

08022790 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022790:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022792:	fb01 f400 	mul.w	r4, r1, r0
 8022796:	4620      	mov	r0, r4
 8022798:	f7f8 f8ee 	bl	801a978 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 802279c:	4605      	mov	r5, r0
 802279e:	b118      	cbz	r0, 80227a8 <mg_calloc+0x18>
 80227a0:	4622      	mov	r2, r4
 80227a2:	2100      	movs	r1, #0
 80227a4:	f00a f91c 	bl	802c9e0 <memset>
}
 80227a8:	4628      	mov	r0, r5
 80227aa:	bd38      	pop	{r3, r4, r5, pc}

080227ac <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80227ac:	b570      	push	{r4, r5, r6, lr}
 80227ae:	4605      	mov	r5, r0
 80227b0:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 80227b2:	6811      	ldr	r1, [r2, #0]
 80227b4:	1d0c      	adds	r4, r1, #4
 80227b6:	6014      	str	r4, [r2, #0]
 80227b8:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 80227ba:	f101 0408 	add.w	r4, r1, #8
 80227be:	6014      	str	r4, [r2, #0]
 80227c0:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80227c2:	b923      	cbnz	r3, 80227ce <mg_print_esc+0x22>
 80227c4:	b11c      	cbz	r4, 80227ce <mg_print_esc+0x22>
 80227c6:	4620      	mov	r0, r4
 80227c8:	f7ed fd6a 	bl	80102a0 <strlen>
 80227cc:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 80227ce:	4622      	mov	r2, r4
 80227d0:	4631      	mov	r1, r6
 80227d2:	4628      	mov	r0, r5
 80227d4:	f7fe fd65 	bl	80212a2 <qcpy>
}
 80227d8:	bd70      	pop	{r4, r5, r6, pc}

080227da <getpeer>:
                                     bool lsn) {
 80227da:	b570      	push	{r4, r5, r6, lr}
 80227dc:	460d      	mov	r5, r1
 80227de:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 80227e0:	6804      	ldr	r4, [r0, #0]
 80227e2:	e000      	b.n	80227e6 <getpeer+0xc>
 80227e4:	6824      	ldr	r4, [r4, #0]
 80227e6:	b364      	cbz	r4, 8022842 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 80227e8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80227ec:	f013 0f10 	tst.w	r3, #16
 80227f0:	d008      	beq.n	8022804 <getpeer+0x2a>
 80227f2:	69a8      	ldr	r0, [r5, #24]
 80227f4:	b130      	cbz	r0, 8022804 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 80227f6:	2204      	movs	r2, #4
 80227f8:	f104 011c 	add.w	r1, r4, #28
 80227fc:	300e      	adds	r0, #14
 80227fe:	f00a f85b 	bl	802c8b8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8022802:	b1f0      	cbz	r0, 8022842 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8022804:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022808:	f013 0301 	ands.w	r3, r3, #1
 802280c:	d005      	beq.n	802281a <getpeer+0x40>
 802280e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8022810:	b11a      	cbz	r2, 802281a <getpeer+0x40>
 8022812:	8b21      	ldrh	r1, [r4, #24]
 8022814:	8852      	ldrh	r2, [r2, #2]
 8022816:	4291      	cmp	r1, r2
 8022818:	d013      	beq.n	8022842 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802281a:	2b00      	cmp	r3, #0
 802281c:	d1e2      	bne.n	80227e4 <getpeer+0xa>
 802281e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022820:	2b00      	cmp	r3, #0
 8022822:	d0df      	beq.n	80227e4 <getpeer+0xa>
 8022824:	8b21      	ldrh	r1, [r4, #24]
 8022826:	885a      	ldrh	r2, [r3, #2]
 8022828:	4291      	cmp	r1, r2
 802282a:	d1db      	bne.n	80227e4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802282c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022830:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022834:	42b2      	cmp	r2, r6
 8022836:	d1d5      	bne.n	80227e4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022838:	b91e      	cbnz	r6, 8022842 <getpeer+0x68>
 802283a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 802283c:	881b      	ldrh	r3, [r3, #0]
 802283e:	429a      	cmp	r2, r3
 8022840:	d1d0      	bne.n	80227e4 <getpeer+0xa>
}
 8022842:	4620      	mov	r0, r4
 8022844:	bd70      	pop	{r4, r5, r6, pc}

08022846 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8022846:	b508      	push	{r3, lr}
  putchar(c);
 8022848:	f009 fb24 	bl	802be94 <putchar>
}
 802284c:	bd08      	pop	{r3, pc}

0802284e <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 802284e:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8022852:	6802      	ldr	r2, [r0, #0]
 8022854:	6883      	ldr	r3, [r0, #8]
}
 8022856:	58d0      	ldr	r0, [r2, r3]
 8022858:	4770      	bx	lr
	...

0802285c <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 802285c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022860:	b08b      	sub	sp, #44	@ 0x2c
 8022862:	4604      	mov	r4, r0
 8022864:	460e      	mov	r6, r1
 8022866:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022868:	2320      	movs	r3, #32
 802286a:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802286c:	ab09      	add	r3, sp, #36	@ 0x24
 802286e:	9303      	str	r3, [sp, #12]
 8022870:	ab04      	add	r3, sp, #16
 8022872:	9302      	str	r3, [sp, #8]
 8022874:	ab05      	add	r3, sp, #20
 8022876:	9301      	str	r3, [sp, #4]
 8022878:	ab06      	add	r3, sp, #24
 802287a:	9300      	str	r3, [sp, #0]
 802287c:	ab07      	add	r3, sp, #28
 802287e:	aa08      	add	r2, sp, #32
 8022880:	4928      	ldr	r1, [pc, #160]	@ (8022924 <parse_net+0xc8>)
 8022882:	f009 fd0b 	bl	802c29c <sscanf>
 8022886:	2805      	cmp	r0, #5
 8022888:	d133      	bne.n	80228f2 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 802288a:	9c08      	ldr	r4, [sp, #32]
 802288c:	4620      	mov	r0, r4
 802288e:	f7fe fd6e 	bl	802136e <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022892:	4603      	mov	r3, r0
 8022894:	2800      	cmp	r0, #0
 8022896:	d03b      	beq.n	8022910 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022898:	9f07      	ldr	r7, [sp, #28]
 802289a:	4638      	mov	r0, r7
 802289c:	f7fe fd67 	bl	802136e <isbyte>
 80228a0:	4603      	mov	r3, r0
 80228a2:	2800      	cmp	r0, #0
 80228a4:	d034      	beq.n	8022910 <parse_net+0xb4>
 80228a6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80228aa:	4648      	mov	r0, r9
 80228ac:	f7fe fd5f 	bl	802136e <isbyte>
 80228b0:	4603      	mov	r3, r0
 80228b2:	b368      	cbz	r0, 8022910 <parse_net+0xb4>
 80228b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80228b8:	4640      	mov	r0, r8
 80228ba:	f7fe fd58 	bl	802136e <isbyte>
 80228be:	4603      	mov	r3, r0
 80228c0:	b330      	cbz	r0, 8022910 <parse_net+0xb4>
 80228c2:	9b04      	ldr	r3, [sp, #16]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	db29      	blt.n	802291c <parse_net+0xc0>
 80228c8:	2b20      	cmp	r3, #32
 80228ca:	dc29      	bgt.n	8022920 <parse_net+0xc4>
    len = n;
 80228cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 80228ce:	043a      	lsls	r2, r7, #16
 80228d0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80228d4:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 80228d8:	ea42 0208 	orr.w	r2, r2, r8
 80228dc:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 80228de:	9a04      	ldr	r2, [sp, #16]
 80228e0:	b1d2      	cbz	r2, 8022918 <parse_net+0xbc>
 80228e2:	f1c2 0220 	rsb	r2, r2, #32
 80228e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80228ea:	fa01 f202 	lsl.w	r2, r1, r2
 80228ee:	602a      	str	r2, [r5, #0]
 80228f0:	e00e      	b.n	8022910 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 80228f2:	ab09      	add	r3, sp, #36	@ 0x24
 80228f4:	9302      	str	r3, [sp, #8]
 80228f6:	ab05      	add	r3, sp, #20
 80228f8:	9301      	str	r3, [sp, #4]
 80228fa:	ab06      	add	r3, sp, #24
 80228fc:	9300      	str	r3, [sp, #0]
 80228fe:	ab07      	add	r3, sp, #28
 8022900:	aa08      	add	r2, sp, #32
 8022902:	4909      	ldr	r1, [pc, #36]	@ (8022928 <parse_net+0xcc>)
 8022904:	4620      	mov	r0, r4
 8022906:	f009 fcc9 	bl	802c29c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802290a:	2804      	cmp	r0, #4
 802290c:	d0bd      	beq.n	802288a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 802290e:	2300      	movs	r3, #0
}
 8022910:	4618      	mov	r0, r3
 8022912:	b00b      	add	sp, #44	@ 0x2c
 8022914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022918:	2200      	movs	r2, #0
 802291a:	e7e8      	b.n	80228ee <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 802291c:	2300      	movs	r3, #0
 802291e:	e7f7      	b.n	8022910 <parse_net+0xb4>
 8022920:	2300      	movs	r3, #0
  return len;
 8022922:	e7f5      	b.n	8022910 <parse_net+0xb4>
 8022924:	0803a398 	.word	0x0803a398
 8022928:	0803a3ac 	.word	0x0803a3ac

0802292c <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 802292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022930:	4691      	mov	r9, r2
 8022932:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022934:	4604      	mov	r4, r0
 8022936:	b150      	cbz	r0, 802294e <mg_base64_decode+0x22>
 8022938:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 802293c:	0889      	lsrs	r1, r1, #2
 802293e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022942:	3101      	adds	r1, #1
 8022944:	4559      	cmp	r1, fp
 8022946:	d847      	bhi.n	80229d8 <mg_base64_decode+0xac>
  size_t len = 0;
 8022948:	f04f 0800 	mov.w	r8, #0
 802294c:	e003      	b.n	8022956 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 802294e:	4682      	mov	sl, r0
 8022950:	e7f4      	b.n	802293c <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022952:	4690      	mov	r8, r2
    src += 4;
 8022954:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8022956:	2c00      	cmp	r4, #0
 8022958:	d03a      	beq.n	80229d0 <mg_base64_decode+0xa4>
 802295a:	1ce3      	adds	r3, r4, #3
 802295c:	4553      	cmp	r3, sl
 802295e:	d237      	bcs.n	80229d0 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022960:	7820      	ldrb	r0, [r4, #0]
 8022962:	f7fd f8a7 	bl	801fab4 <mg_base64_decode_single>
 8022966:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8022968:	7860      	ldrb	r0, [r4, #1]
 802296a:	f7fd f8a3 	bl	801fab4 <mg_base64_decode_single>
 802296e:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022970:	78a0      	ldrb	r0, [r4, #2]
 8022972:	f7fd f89f 	bl	801fab4 <mg_base64_decode_single>
 8022976:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8022978:	78e0      	ldrb	r0, [r4, #3]
 802297a:	f7fd f89b 	bl	801fab4 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 802297e:	2e40      	cmp	r6, #64	@ 0x40
 8022980:	d02a      	beq.n	80229d8 <mg_base64_decode+0xac>
 8022982:	2e00      	cmp	r6, #0
 8022984:	db28      	blt.n	80229d8 <mg_base64_decode+0xac>
 8022986:	2d40      	cmp	r5, #64	@ 0x40
 8022988:	d026      	beq.n	80229d8 <mg_base64_decode+0xac>
 802298a:	2d00      	cmp	r5, #0
 802298c:	db24      	blt.n	80229d8 <mg_base64_decode+0xac>
 802298e:	2f00      	cmp	r7, #0
 8022990:	db22      	blt.n	80229d8 <mg_base64_decode+0xac>
 8022992:	2800      	cmp	r0, #0
 8022994:	db20      	blt.n	80229d8 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022996:	112b      	asrs	r3, r5, #4
 8022998:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 802299c:	f108 0201 	add.w	r2, r8, #1
 80229a0:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 80229a4:	78a3      	ldrb	r3, [r4, #2]
 80229a6:	2b3d      	cmp	r3, #61	@ 0x3d
 80229a8:	d0d3      	beq.n	8022952 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80229aa:	10bb      	asrs	r3, r7, #2
 80229ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80229b0:	f108 0102 	add.w	r1, r8, #2
 80229b4:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80229b8:	78e3      	ldrb	r3, [r4, #3]
 80229ba:	2b3d      	cmp	r3, #61	@ 0x3d
 80229bc:	d006      	beq.n	80229cc <mg_base64_decode+0xa0>
 80229be:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 80229c2:	f108 0803 	add.w	r8, r8, #3
 80229c6:	f809 0001 	strb.w	r0, [r9, r1]
 80229ca:	e7c3      	b.n	8022954 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80229cc:	4688      	mov	r8, r1
 80229ce:	e7c1      	b.n	8022954 <mg_base64_decode+0x28>
  dst[len] = '\0';
 80229d0:	2300      	movs	r3, #0
 80229d2:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 80229d6:	e006      	b.n	80229e6 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 80229d8:	f1bb 0f00 	cmp.w	fp, #0
 80229dc:	d006      	beq.n	80229ec <mg_base64_decode+0xc0>
 80229de:	f04f 0800 	mov.w	r8, #0
 80229e2:	f889 8000 	strb.w	r8, [r9]
}
 80229e6:	4640      	mov	r0, r8
 80229e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 80229ec:	46d8      	mov	r8, fp
 80229ee:	e7fa      	b.n	80229e6 <mg_base64_decode+0xba>

080229f0 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 80229f0:	b570      	push	{r4, r5, r6, lr}
 80229f2:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80229f4:	6843      	ldr	r3, [r0, #4]
 80229f6:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 80229fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80229fc:	e000      	b.n	8022a00 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 80229fe:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8022a00:	b139      	cbz	r1, 8022a12 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8022a02:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8022a04:	684b      	ldr	r3, [r1, #4]
 8022a06:	42ab      	cmp	r3, r5
 8022a08:	d1f9      	bne.n	80229fe <mg_resolve_cancel+0xe>
 8022a0a:	4630      	mov	r0, r6
 8022a0c:	f7fe fe12 	bl	8021634 <mg_dns_free>
 8022a10:	e7f5      	b.n	80229fe <mg_resolve_cancel+0xe>
}
 8022a12:	bd70      	pop	{r4, r5, r6, pc}

08022a14 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8022a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a16:	b083      	sub	sp, #12
 8022a18:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8022a1a:	1886      	adds	r6, r0, r2
 8022a1c:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8022a1e:	f04f 0c00 	mov.w	ip, #0
 8022a22:	f8c4 c000 	str.w	ip, [r4]
 8022a26:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022a2a:	290b      	cmp	r1, #11
 8022a2c:	d934      	bls.n	8022a98 <mg_dns_parse_rr+0x84>
 8022a2e:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022a30:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022a34:	d833      	bhi.n	8022a9e <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8022a36:	42be      	cmp	r6, r7
 8022a38:	d301      	bcc.n	8022a3e <mg_dns_parse_rr+0x2a>
 8022a3a:	2000      	movs	r0, #0
 8022a3c:	e02d      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8022a3e:	4663      	mov	r3, ip
 8022a40:	f8cd c000 	str.w	ip, [sp]
 8022a44:	f7fe fed5 	bl	80217f2 <mg_dns_parse_name>
 8022a48:	b283      	uxth	r3, r0
 8022a4a:	8023      	strh	r3, [r4, #0]
 8022a4c:	b34b      	cbz	r3, 8022aa2 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 8022a4e:	3304      	adds	r3, #4
 8022a50:	441e      	add	r6, r3
  if (s > e) return 0;
 8022a52:	42b7      	cmp	r7, r6
 8022a54:	d327      	bcc.n	8022aa6 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8022a56:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 8022a5a:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8022a5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022a62:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022a64:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8022a68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022a70:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8022a72:	b975      	cbnz	r5, 8022a92 <mg_dns_parse_rr+0x7e>
  s += 6;
 8022a74:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8022a76:	429f      	cmp	r7, r3
 8022a78:	d317      	bcc.n	8022aaa <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022a7a:	7931      	ldrb	r1, [r6, #4]
 8022a7c:	7972      	ldrb	r2, [r6, #5]
 8022a7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022a82:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8022a84:	4413      	add	r3, r2
 8022a86:	42bb      	cmp	r3, r7
 8022a88:	d811      	bhi.n	8022aae <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8022a8a:	fa12 f080 	uxtah	r0, r2, r0
 8022a8e:	300a      	adds	r0, #10
 8022a90:	e003      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8022a92:	b280      	uxth	r0, r0
 8022a94:	3004      	adds	r0, #4
 8022a96:	e000      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022a98:	2000      	movs	r0, #0
}
 8022a9a:	b003      	add	sp, #12
 8022a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022a9e:	2000      	movs	r0, #0
 8022aa0:	e7fb      	b.n	8022a9a <mg_dns_parse_rr+0x86>
    return 0;
 8022aa2:	2000      	movs	r0, #0
 8022aa4:	e7f9      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022aa6:	2000      	movs	r0, #0
 8022aa8:	e7f7      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022aaa:	2000      	movs	r0, #0
 8022aac:	e7f5      	b.n	8022a9a <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8022aae:	2000      	movs	r0, #0
 8022ab0:	e7f3      	b.n	8022a9a <mg_dns_parse_rr+0x86>

08022ab2 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8022ab2:	b570      	push	{r4, r5, r6, lr}
 8022ab4:	4604      	mov	r4, r0
 8022ab6:	460d      	mov	r5, r1
 8022ab8:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8022aba:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8022abe:	b103      	cbz	r3, 8022ac2 <mg_call+0x10>
 8022ac0:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8022ac2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022ac4:	b11b      	cbz	r3, 8022ace <mg_call+0x1c>
 8022ac6:	4632      	mov	r2, r6
 8022ac8:	4629      	mov	r1, r5
 8022aca:	4620      	mov	r0, r4
 8022acc:	4798      	blx	r3
}
 8022ace:	bd70      	pop	{r4, r5, r6, pc}

08022ad0 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8022ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ad2:	4604      	mov	r4, r0
 8022ad4:	460d      	mov	r5, r1
 8022ad6:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8022ad8:	2108      	movs	r1, #8
 8022ada:	2001      	movs	r0, #1
 8022adc:	f7ff fe58 	bl	8022790 <mg_calloc>
  if (fd != NULL) {
 8022ae0:	4607      	mov	r7, r0
 8022ae2:	b138      	cbz	r0, 8022af4 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8022ae4:	68a3      	ldr	r3, [r4, #8]
 8022ae6:	4631      	mov	r1, r6
 8022ae8:	4628      	mov	r0, r5
 8022aea:	4798      	blx	r3
 8022aec:	4605      	mov	r5, r0
 8022aee:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022af0:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022af2:	b108      	cbz	r0, 8022af8 <mg_fs_open+0x28>
}
 8022af4:	4638      	mov	r0, r7
 8022af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8022af8:	4638      	mov	r0, r7
 8022afa:	f7f7 ffbf 	bl	801aa7c <vPortFree>
      fd = NULL;
 8022afe:	462f      	mov	r7, r5
  return fd;
 8022b00:	e7f8      	b.n	8022af4 <mg_fs_open+0x24>

08022b02 <mg_fs_close>:
  if (fd != NULL) {
 8022b02:	b148      	cbz	r0, 8022b18 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8022b04:	b510      	push	{r4, lr}
 8022b06:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8022b08:	6843      	ldr	r3, [r0, #4]
 8022b0a:	68db      	ldr	r3, [r3, #12]
 8022b0c:	6800      	ldr	r0, [r0, #0]
 8022b0e:	4798      	blx	r3
    free(fd);
 8022b10:	4620      	mov	r0, r4
 8022b12:	f7f7 ffb3 	bl	801aa7c <vPortFree>
}
 8022b16:	bd10      	pop	{r4, pc}
 8022b18:	4770      	bx	lr
	...

08022b1c <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8022b1c:	b510      	push	{r4, lr}
 8022b1e:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8022b20:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022b24:	f7ff ffed 	bl	8022b02 <mg_fs_close>
  c->pfn_data = NULL;
 8022b28:	2200      	movs	r2, #0
 8022b2a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8022b2e:	4b05      	ldr	r3, [pc, #20]	@ (8022b44 <restore_http_cb+0x28>)
 8022b30:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8022b34:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022b38:	f362 13c7 	bfi	r3, r2, #7, #1
 8022b3c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8022b40:	bd10      	pop	{r4, pc}
 8022b42:	bf00      	nop
 8022b44:	0802646d 	.word	0x0802646d

08022b48 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8022b48:	b470      	push	{r4, r5, r6}
 8022b4a:	b083      	sub	sp, #12
 8022b4c:	ab02      	add	r3, sp, #8
 8022b4e:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8022b52:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022b54:	e000      	b.n	8022b58 <mg_to_size_t+0x10>
 8022b56:	3301      	adds	r3, #1
 8022b58:	9c01      	ldr	r4, [sp, #4]
 8022b5a:	429c      	cmp	r4, r3
 8022b5c:	d905      	bls.n	8022b6a <mg_to_size_t+0x22>
 8022b5e:	9900      	ldr	r1, [sp, #0]
 8022b60:	5cc9      	ldrb	r1, [r1, r3]
 8022b62:	2920      	cmp	r1, #32
 8022b64:	d0f7      	beq.n	8022b56 <mg_to_size_t+0xe>
 8022b66:	2909      	cmp	r1, #9
 8022b68:	d0f5      	beq.n	8022b56 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8022b6a:	429c      	cmp	r4, r3
 8022b6c:	d906      	bls.n	8022b7c <mg_to_size_t+0x34>
 8022b6e:	9900      	ldr	r1, [sp, #0]
 8022b70:	5cc9      	ldrb	r1, [r1, r3]
 8022b72:	292d      	cmp	r1, #45	@ 0x2d
 8022b74:	d02c      	beq.n	8022bd0 <mg_to_size_t+0x88>
 8022b76:	2500      	movs	r5, #0
 8022b78:	4628      	mov	r0, r5
 8022b7a:	e001      	b.n	8022b80 <mg_to_size_t+0x38>
 8022b7c:	2500      	movs	r5, #0
 8022b7e:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022b80:	429c      	cmp	r4, r3
 8022b82:	d917      	bls.n	8022bb4 <mg_to_size_t+0x6c>
 8022b84:	9900      	ldr	r1, [sp, #0]
 8022b86:	5cc9      	ldrb	r1, [r1, r3]
 8022b88:	292f      	cmp	r1, #47	@ 0x2f
 8022b8a:	d913      	bls.n	8022bb4 <mg_to_size_t+0x6c>
 8022b8c:	2939      	cmp	r1, #57	@ 0x39
 8022b8e:	d811      	bhi.n	8022bb4 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8022b90:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8022b92:	4e15      	ldr	r6, [pc, #84]	@ (8022be8 <mg_to_size_t+0xa0>)
 8022b94:	42b0      	cmp	r0, r6
 8022b96:	d81d      	bhi.n	8022bd4 <mg_to_size_t+0x8c>
    result *= 10;
 8022b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022b9c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8022ba0:	43ce      	mvns	r6, r1
 8022ba2:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8022ba6:	d317      	bcc.n	8022bd8 <mg_to_size_t+0x90>
    result += digit;
 8022ba8:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8022bac:	3301      	adds	r3, #1
 8022bae:	3501      	adds	r5, #1
 8022bb0:	e7e6      	b.n	8022b80 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022bb2:	3301      	adds	r3, #1
 8022bb4:	429c      	cmp	r4, r3
 8022bb6:	d905      	bls.n	8022bc4 <mg_to_size_t+0x7c>
 8022bb8:	9900      	ldr	r1, [sp, #0]
 8022bba:	5cc9      	ldrb	r1, [r1, r3]
 8022bbc:	2920      	cmp	r1, #32
 8022bbe:	d0f8      	beq.n	8022bb2 <mg_to_size_t+0x6a>
 8022bc0:	2909      	cmp	r1, #9
 8022bc2:	d0f6      	beq.n	8022bb2 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022bc4:	b155      	cbz	r5, 8022bdc <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8022bc6:	429c      	cmp	r4, r3
 8022bc8:	d10c      	bne.n	8022be4 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8022bca:	6010      	str	r0, [r2, #0]
  return true;
 8022bcc:	2001      	movs	r0, #1
 8022bce:	e006      	b.n	8022bde <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8022bd0:	2000      	movs	r0, #0
 8022bd2:	e004      	b.n	8022bde <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8022bd4:	2000      	movs	r0, #0
 8022bd6:	e002      	b.n	8022bde <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8022bd8:	2000      	movs	r0, #0
 8022bda:	e000      	b.n	8022bde <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022bdc:	2000      	movs	r0, #0
}
 8022bde:	b003      	add	sp, #12
 8022be0:	bc70      	pop	{r4, r5, r6}
 8022be2:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8022be4:	2000      	movs	r0, #0
 8022be6:	e7fa      	b.n	8022bde <mg_to_size_t+0x96>
 8022be8:	19999999 	.word	0x19999999

08022bec <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bee:	4606      	mov	r6, r0
 8022bf0:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022bf2:	2400      	movs	r4, #0
 8022bf4:	e007      	b.n	8022c06 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022bf6:	1933      	adds	r3, r6, r4
 8022bf8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022bfc:	2b0a      	cmp	r3, #10
 8022bfe:	d10d      	bne.n	8022c1c <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022c00:	1c60      	adds	r0, r4, #1
 8022c02:	e01b      	b.n	8022c3c <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022c04:	3401      	adds	r4, #1
 8022c06:	42bc      	cmp	r4, r7
 8022c08:	d217      	bcs.n	8022c3a <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8022c0a:	5d35      	ldrb	r5, [r6, r4]
 8022c0c:	4628      	mov	r0, r5
 8022c0e:	f7fd f8d6 	bl	801fdbe <isok>
 8022c12:	b1a0      	cbz	r0, 8022c3e <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022c14:	2c00      	cmp	r4, #0
 8022c16:	d0f5      	beq.n	8022c04 <mg_http_get_request_len+0x18>
 8022c18:	2d0a      	cmp	r5, #10
 8022c1a:	d0ec      	beq.n	8022bf6 <mg_http_get_request_len+0xa>
 8022c1c:	2c03      	cmp	r4, #3
 8022c1e:	d9f1      	bls.n	8022c04 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8022c20:	2d0a      	cmp	r5, #10
 8022c22:	d1ef      	bne.n	8022c04 <mg_http_get_request_len+0x18>
 8022c24:	1933      	adds	r3, r6, r4
 8022c26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022c2a:	2b0d      	cmp	r3, #13
 8022c2c:	d1ea      	bne.n	8022c04 <mg_http_get_request_len+0x18>
 8022c2e:	1933      	adds	r3, r6, r4
 8022c30:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8022c34:	2b0a      	cmp	r3, #10
 8022c36:	d1e5      	bne.n	8022c04 <mg_http_get_request_len+0x18>
 8022c38:	e7e2      	b.n	8022c00 <mg_http_get_request_len+0x14>
  return 0;
 8022c3a:	2000      	movs	r0, #0
}
 8022c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8022c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022c42:	e7fb      	b.n	8022c3c <mg_http_get_request_len+0x50>

08022c44 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8022c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c48:	4605      	mov	r5, r0
 8022c4a:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8022c4c:	4608      	mov	r0, r1
 8022c4e:	f7ed fb27 	bl	80102a0 <strlen>
 8022c52:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8022c54:	2400      	movs	r4, #0
 8022c56:	e000      	b.n	8022c5a <mg_http_get_header+0x16>
 8022c58:	3401      	adds	r4, #1
 8022c5a:	2c1d      	cmp	r4, #29
 8022c5c:	d819      	bhi.n	8022c92 <mg_http_get_header+0x4e>
 8022c5e:	1ca3      	adds	r3, r4, #2
 8022c60:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022c64:	685a      	ldr	r2, [r3, #4]
 8022c66:	b17a      	cbz	r2, 8022c88 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8022c68:	0123      	lsls	r3, r4, #4
 8022c6a:	3328      	adds	r3, #40	@ 0x28
 8022c6c:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8022c70:	42b2      	cmp	r2, r6
 8022c72:	d1f1      	bne.n	8022c58 <mg_http_get_header+0x14>
 8022c74:	1ca3      	adds	r3, r4, #2
 8022c76:	011b      	lsls	r3, r3, #4
 8022c78:	4632      	mov	r2, r6
 8022c7a:	4639      	mov	r1, r7
 8022c7c:	58e8      	ldr	r0, [r5, r3]
 8022c7e:	f7fd f869 	bl	801fd54 <mg_ncasecmp>
 8022c82:	2800      	cmp	r0, #0
 8022c84:	d1e8      	bne.n	8022c58 <mg_http_get_header+0x14>
 8022c86:	e001      	b.n	8022c8c <mg_http_get_header+0x48>
  return NULL;
 8022c88:	f04f 0800 	mov.w	r8, #0
}
 8022c8c:	4640      	mov	r0, r8
 8022c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8022c92:	f04f 0800 	mov.w	r8, #0
 8022c96:	e7f9      	b.n	8022c8c <mg_http_get_header+0x48>

08022c98 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8022c98:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8022c9a:	6880      	ldr	r0, [r0, #8]
 8022c9c:	f007 f96c 	bl	8029f78 <atoi>
}
 8022ca0:	bd08      	pop	{r3, pc}
	...

08022ca4 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8022ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ca8:	b095      	sub	sp, #84	@ 0x54
 8022caa:	ac08      	add	r4, sp, #32
 8022cac:	e884 0003 	stmia.w	r4, {r0, r1}
 8022cb0:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8022cb2:	4606      	mov	r6, r0
  int len = (int) json.len;
 8022cb4:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8022cb6:	469a      	mov	sl, r3
 8022cb8:	b113      	cbz	r3, 8022cc0 <mg_json_get+0x1c>
 8022cba:	2300      	movs	r3, #0
 8022cbc:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8022cc0:	9b02      	ldr	r3, [sp, #8]
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	2b24      	cmp	r3, #36	@ 0x24
 8022cc6:	f040 8232 	bne.w	802312e <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8022cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022cce:	9303      	str	r3, [sp, #12]
 8022cd0:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8022cd2:	2301      	movs	r3, #1
 8022cd4:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8022cd6:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8022cda:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8022cdc:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8022ce0:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8022ce2:	465b      	mov	r3, fp
 8022ce4:	f8cd a018 	str.w	sl, [sp, #24]
 8022ce8:	e190      	b.n	802300c <mg_json_get+0x368>
        if (depth == ed) j = i;
 8022cea:	455f      	cmp	r7, fp
 8022cec:	d029      	beq.n	8022d42 <mg_json_get+0x9e>
        if (c == '{') {
 8022cee:	2d7b      	cmp	r5, #123	@ 0x7b
 8022cf0:	d029      	beq.n	8022d46 <mg_json_get+0xa2>
        } else if (c == '[') {
 8022cf2:	2d5b      	cmp	r5, #91	@ 0x5b
 8022cf4:	d047      	beq.n	8022d86 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022cf6:	2d5d      	cmp	r5, #93	@ 0x5d
 8022cf8:	d07a      	beq.n	8022df0 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022cfa:	2d74      	cmp	r5, #116	@ 0x74
 8022cfc:	f000 80a4 	beq.w	8022e48 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022d00:	2d6e      	cmp	r5, #110	@ 0x6e
 8022d02:	f000 80b0 	beq.w	8022e66 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022d06:	2d66      	cmp	r5, #102	@ 0x66
 8022d08:	f000 80bc 	beq.w	8022e84 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022d0c:	2d2d      	cmp	r5, #45	@ 0x2d
 8022d0e:	d005      	beq.n	8022d1c <mg_json_get+0x78>
 8022d10:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022d14:	b2db      	uxtb	r3, r3
 8022d16:	2b09      	cmp	r3, #9
 8022d18:	f200 80c3 	bhi.w	8022ea2 <mg_json_get+0x1fe>
          int numlen = 0;
 8022d1c:	2300      	movs	r3, #0
 8022d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8022d20:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022d22:	eba8 0104 	sub.w	r1, r8, r4
 8022d26:	4648      	mov	r0, r9
 8022d28:	f7fd fcc2 	bl	80206b0 <mg_atod>
          i += numlen - 1;
 8022d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d2e:	3b01      	subs	r3, #1
 8022d30:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8022d32:	455f      	cmp	r7, fp
 8022d34:	f000 80c6 	beq.w	8022ec4 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8022d38:	455f      	cmp	r7, fp
 8022d3a:	f000 80da 	beq.w	8022ef2 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8022d3e:	2303      	movs	r3, #3
 8022d40:	e163      	b.n	802300a <mg_json_get+0x366>
        if (depth == ed) j = i;
 8022d42:	9405      	str	r4, [sp, #20]
 8022d44:	e7d3      	b.n	8022cee <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022d46:	2f1d      	cmp	r7, #29
 8022d48:	f300 81f4 	bgt.w	8023134 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022d4c:	455f      	cmp	r7, fp
 8022d4e:	d007      	beq.n	8022d60 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8022d50:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022d54:	446b      	add	r3, sp
 8022d56:	f803 5c20 	strb.w	r5, [r3, #-32]
 8022d5a:	3701      	adds	r7, #1
          expecting = S_KEY;
 8022d5c:	2301      	movs	r3, #1
          break;
 8022d5e:	e154      	b.n	802300a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022d60:	9b02      	ldr	r3, [sp, #8]
 8022d62:	9a04      	ldr	r2, [sp, #16]
 8022d64:	5c9b      	ldrb	r3, [r3, r2]
 8022d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d68:	d1f2      	bne.n	8022d50 <mg_json_get+0xac>
 8022d6a:	9b01      	ldr	r3, [sp, #4]
 8022d6c:	9a03      	ldr	r2, [sp, #12]
 8022d6e:	4293      	cmp	r3, r2
 8022d70:	d1ee      	bne.n	8022d50 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8022d72:	f10b 0b01 	add.w	fp, fp, #1
 8022d76:	9b04      	ldr	r3, [sp, #16]
 8022d78:	3301      	adds	r3, #1
 8022d7a:	9304      	str	r3, [sp, #16]
 8022d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022d80:	9303      	str	r3, [sp, #12]
 8022d82:	9301      	str	r3, [sp, #4]
 8022d84:	e7e4      	b.n	8022d50 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022d86:	2f1d      	cmp	r7, #29
 8022d88:	f300 81d7 	bgt.w	802313a <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022d8c:	455f      	cmp	r7, fp
 8022d8e:	d006      	beq.n	8022d9e <mg_json_get+0xfa>
          nesting[depth++] = c;
 8022d90:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022d94:	446a      	add	r2, sp
 8022d96:	f802 5c20 	strb.w	r5, [r2, #-32]
 8022d9a:	3701      	adds	r7, #1
          break;
 8022d9c:	e135      	b.n	802300a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022d9e:	9a02      	ldr	r2, [sp, #8]
 8022da0:	9904      	ldr	r1, [sp, #16]
 8022da2:	5c52      	ldrb	r2, [r2, r1]
 8022da4:	2a5b      	cmp	r2, #91	@ 0x5b
 8022da6:	d1f3      	bne.n	8022d90 <mg_json_get+0xec>
 8022da8:	9a01      	ldr	r2, [sp, #4]
 8022daa:	9903      	ldr	r1, [sp, #12]
 8022dac:	428a      	cmp	r2, r1
 8022dae:	d1ef      	bne.n	8022d90 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8022db0:	f10b 0b01 	add.w	fp, fp, #1
 8022db4:	9804      	ldr	r0, [sp, #16]
 8022db6:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022db8:	2100      	movs	r1, #0
 8022dba:	f8dd c008 	ldr.w	ip, [sp, #8]
 8022dbe:	e005      	b.n	8022dcc <mg_json_get+0x128>
              ei *= 10;
 8022dc0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8022dc4:	3a30      	subs	r2, #48	@ 0x30
 8022dc6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022dca:	3001      	adds	r0, #1
 8022dcc:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8022dd0:	2a5d      	cmp	r2, #93	@ 0x5d
 8022dd2:	d001      	beq.n	8022dd8 <mg_json_get+0x134>
 8022dd4:	2a00      	cmp	r2, #0
 8022dd6:	d1f3      	bne.n	8022dc0 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8022dd8:	9004      	str	r0, [sp, #16]
 8022dda:	9103      	str	r1, [sp, #12]
 8022ddc:	b12a      	cbz	r2, 8022dea <mg_json_get+0x146>
 8022dde:	4602      	mov	r2, r0
 8022de0:	3201      	adds	r2, #1
 8022de2:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8022de4:	2200      	movs	r2, #0
 8022de6:	9201      	str	r2, [sp, #4]
 8022de8:	e7d2      	b.n	8022d90 <mg_json_get+0xec>
 8022dea:	2200      	movs	r2, #0
 8022dec:	9201      	str	r2, [sp, #4]
 8022dee:	e7cf      	b.n	8022d90 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022df0:	2f00      	cmp	r7, #0
 8022df2:	dd82      	ble.n	8022cfa <mg_json_get+0x56>
          MG_EOO(']');
 8022df4:	455f      	cmp	r7, fp
 8022df6:	d020      	beq.n	8022e3a <mg_json_get+0x196>
 8022df8:	3f01      	subs	r7, #1
 8022dfa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022dfe:	446b      	add	r3, sp
 8022e00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022e04:	3302      	adds	r3, #2
 8022e06:	429d      	cmp	r5, r3
 8022e08:	f040 819a 	bne.w	8023140 <mg_json_get+0x49c>
 8022e0c:	455f      	cmp	r7, fp
 8022e0e:	d190      	bne.n	8022d32 <mg_json_get+0x8e>
 8022e10:	9b02      	ldr	r3, [sp, #8]
 8022e12:	9a04      	ldr	r2, [sp, #16]
 8022e14:	5c9b      	ldrb	r3, [r3, r2]
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d18b      	bne.n	8022d32 <mg_json_get+0x8e>
 8022e1a:	9b01      	ldr	r3, [sp, #4]
 8022e1c:	9a03      	ldr	r2, [sp, #12]
 8022e1e:	4293      	cmp	r3, r2
 8022e20:	d187      	bne.n	8022d32 <mg_json_get+0x8e>
 8022e22:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022e26:	f1ba 0f00 	cmp.w	sl, #0
 8022e2a:	d004      	beq.n	8022e36 <mg_json_get+0x192>
 8022e2c:	9b05      	ldr	r3, [sp, #20]
 8022e2e:	1ae3      	subs	r3, r4, r3
 8022e30:	3301      	adds	r3, #1
 8022e32:	f8ca 3000 	str.w	r3, [sl]
 8022e36:	9d05      	ldr	r5, [sp, #20]
 8022e38:	e175      	b.n	8023126 <mg_json_get+0x482>
 8022e3a:	9b01      	ldr	r3, [sp, #4]
 8022e3c:	9a03      	ldr	r2, [sp, #12]
 8022e3e:	4293      	cmp	r3, r2
 8022e40:	d0da      	beq.n	8022df8 <mg_json_get+0x154>
 8022e42:	f06f 0502 	mvn.w	r5, #2
 8022e46:	e16e      	b.n	8023126 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022e48:	1ce3      	adds	r3, r4, #3
 8022e4a:	9307      	str	r3, [sp, #28]
 8022e4c:	4543      	cmp	r3, r8
 8022e4e:	f6bf af57 	bge.w	8022d00 <mg_json_get+0x5c>
 8022e52:	2204      	movs	r2, #4
 8022e54:	49a3      	ldr	r1, [pc, #652]	@ (80230e4 <mg_json_get+0x440>)
 8022e56:	4648      	mov	r0, r9
 8022e58:	f009 fd2e 	bl	802c8b8 <memcmp>
 8022e5c:	2800      	cmp	r0, #0
 8022e5e:	f47f af4f 	bne.w	8022d00 <mg_json_get+0x5c>
          i += 3;
 8022e62:	9c07      	ldr	r4, [sp, #28]
 8022e64:	e765      	b.n	8022d32 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022e66:	1ce3      	adds	r3, r4, #3
 8022e68:	9307      	str	r3, [sp, #28]
 8022e6a:	4543      	cmp	r3, r8
 8022e6c:	f6bf af4b 	bge.w	8022d06 <mg_json_get+0x62>
 8022e70:	2204      	movs	r2, #4
 8022e72:	499d      	ldr	r1, [pc, #628]	@ (80230e8 <mg_json_get+0x444>)
 8022e74:	4648      	mov	r0, r9
 8022e76:	f009 fd1f 	bl	802c8b8 <memcmp>
 8022e7a:	2800      	cmp	r0, #0
 8022e7c:	f47f af43 	bne.w	8022d06 <mg_json_get+0x62>
          i += 3;
 8022e80:	9c07      	ldr	r4, [sp, #28]
 8022e82:	e756      	b.n	8022d32 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022e84:	1d23      	adds	r3, r4, #4
 8022e86:	9307      	str	r3, [sp, #28]
 8022e88:	4543      	cmp	r3, r8
 8022e8a:	f6bf af3f 	bge.w	8022d0c <mg_json_get+0x68>
 8022e8e:	2205      	movs	r2, #5
 8022e90:	4996      	ldr	r1, [pc, #600]	@ (80230ec <mg_json_get+0x448>)
 8022e92:	4648      	mov	r0, r9
 8022e94:	f009 fd10 	bl	802c8b8 <memcmp>
 8022e98:	2800      	cmp	r0, #0
 8022e9a:	f47f af37 	bne.w	8022d0c <mg_json_get+0x68>
          i += 4;
 8022e9e:	9c07      	ldr	r4, [sp, #28]
 8022ea0:	e747      	b.n	8022d32 <mg_json_get+0x8e>
        } else if (c == '"') {
 8022ea2:	2d22      	cmp	r5, #34	@ 0x22
 8022ea4:	f040 814f 	bne.w	8023146 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022ea8:	f10a 0001 	add.w	r0, sl, #1
 8022eac:	eba8 0104 	sub.w	r1, r8, r4
 8022eb0:	3901      	subs	r1, #1
 8022eb2:	4430      	add	r0, r6
 8022eb4:	f7fd fbd7 	bl	8020666 <mg_pass_string>
          if (n < 0) return n;
 8022eb8:	1e05      	subs	r5, r0, #0
 8022eba:	f2c0 8134 	blt.w	8023126 <mg_json_get+0x482>
          i += n + 1;
 8022ebe:	3501      	adds	r5, #1
 8022ec0:	442c      	add	r4, r5
 8022ec2:	e736      	b.n	8022d32 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8022ec4:	9b02      	ldr	r3, [sp, #8]
 8022ec6:	9a04      	ldr	r2, [sp, #16]
 8022ec8:	5c9b      	ldrb	r3, [r3, r2]
 8022eca:	2b00      	cmp	r3, #0
 8022ecc:	f47f af34 	bne.w	8022d38 <mg_json_get+0x94>
 8022ed0:	9b01      	ldr	r3, [sp, #4]
 8022ed2:	9a03      	ldr	r2, [sp, #12]
 8022ed4:	4293      	cmp	r3, r2
 8022ed6:	f47f af2f 	bne.w	8022d38 <mg_json_get+0x94>
 8022eda:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022ede:	f1ba 0f00 	cmp.w	sl, #0
 8022ee2:	d004      	beq.n	8022eee <mg_json_get+0x24a>
 8022ee4:	9b05      	ldr	r3, [sp, #20]
 8022ee6:	1ae3      	subs	r3, r4, r3
 8022ee8:	3301      	adds	r3, #1
 8022eea:	f8ca 3000 	str.w	r3, [sl]
 8022eee:	9d05      	ldr	r5, [sp, #20]
 8022ef0:	e119      	b.n	8023126 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8022ef2:	9b03      	ldr	r3, [sp, #12]
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	f2c0 8110 	blt.w	802311a <mg_json_get+0x476>
 8022efa:	9b01      	ldr	r3, [sp, #4]
 8022efc:	3301      	adds	r3, #1
 8022efe:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8022f00:	2303      	movs	r3, #3
 8022f02:	e082      	b.n	802300a <mg_json_get+0x366>
        if (c == '"') {
 8022f04:	2d22      	cmp	r5, #34	@ 0x22
 8022f06:	d014      	beq.n	8022f32 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8022f08:	2d7d      	cmp	r5, #125	@ 0x7d
 8022f0a:	f040 8125 	bne.w	8023158 <mg_json_get+0x4b4>
          MG_EOO('}');
 8022f0e:	455f      	cmp	r7, fp
 8022f10:	d053      	beq.n	8022fba <mg_json_get+0x316>
 8022f12:	3f01      	subs	r7, #1
 8022f14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022f18:	446b      	add	r3, sp
 8022f1a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022f1e:	3302      	adds	r3, #2
 8022f20:	429d      	cmp	r5, r3
 8022f22:	f040 811c 	bne.w	802315e <mg_json_get+0x4ba>
 8022f26:	455f      	cmp	r7, fp
 8022f28:	d04e      	beq.n	8022fc8 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8022f2a:	455f      	cmp	r7, fp
 8022f2c:	d061      	beq.n	8022ff2 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8022f2e:	2303      	movs	r3, #3
 8022f30:	e06b      	b.n	802300a <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022f32:	f104 0901 	add.w	r9, r4, #1
 8022f36:	44b1      	add	r9, r6
 8022f38:	eba8 0104 	sub.w	r1, r8, r4
 8022f3c:	3901      	subs	r1, #1
 8022f3e:	4648      	mov	r0, r9
 8022f40:	f7fd fb91 	bl	8020666 <mg_pass_string>
          if (n < 0) return n;
 8022f44:	1e05      	subs	r5, r0, #0
 8022f46:	f2c0 80ee 	blt.w	8023126 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8022f4a:	1c63      	adds	r3, r4, #1
 8022f4c:	442b      	add	r3, r5
 8022f4e:	4543      	cmp	r3, r8
 8022f50:	f280 80fc 	bge.w	802314c <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022f54:	455f      	cmp	r7, fp
 8022f56:	f2c0 80fc 	blt.w	8023152 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022f5a:	d005      	beq.n	8022f68 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f5c:	455f      	cmp	r7, fp
 8022f5e:	d00d      	beq.n	8022f7c <mg_json_get+0x2d8>
          i += n + 1;
 8022f60:	3501      	adds	r5, #1
 8022f62:	442c      	add	r4, r5
          expecting = S_COLON;
 8022f64:	2302      	movs	r3, #2
 8022f66:	e050      	b.n	802300a <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022f68:	9b02      	ldr	r3, [sp, #8]
 8022f6a:	9a04      	ldr	r2, [sp, #16]
 8022f6c:	4413      	add	r3, r2
 8022f6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f74:	d0f2      	beq.n	8022f5c <mg_json_get+0x2b8>
 8022f76:	f06f 0502 	mvn.w	r5, #2
 8022f7a:	e0d4      	b.n	8023126 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f7c:	9b02      	ldr	r3, [sp, #8]
 8022f7e:	9a04      	ldr	r2, [sp, #16]
 8022f80:	4413      	add	r3, r2
 8022f82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f88:	d1ea      	bne.n	8022f60 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022f8a:	462a      	mov	r2, r5
 8022f8c:	9b02      	ldr	r3, [sp, #8]
 8022f8e:	9904      	ldr	r1, [sp, #16]
 8022f90:	1859      	adds	r1, r3, r1
 8022f92:	4648      	mov	r0, r9
 8022f94:	f009 fd59 	bl	802ca4a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f98:	2800      	cmp	r0, #0
 8022f9a:	d1e1      	bne.n	8022f60 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022f9c:	9904      	ldr	r1, [sp, #16]
 8022f9e:	194b      	adds	r3, r1, r5
 8022fa0:	9a02      	ldr	r2, [sp, #8]
 8022fa2:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022fa4:	b12a      	cbz	r2, 8022fb2 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022fa6:	2a2e      	cmp	r2, #46	@ 0x2e
 8022fa8:	d005      	beq.n	8022fb6 <mg_json_get+0x312>
 8022faa:	2a5b      	cmp	r2, #91	@ 0x5b
 8022fac:	d1d8      	bne.n	8022f60 <mg_json_get+0x2bc>
            pos += n;
 8022fae:	9304      	str	r3, [sp, #16]
 8022fb0:	e7d6      	b.n	8022f60 <mg_json_get+0x2bc>
 8022fb2:	9304      	str	r3, [sp, #16]
 8022fb4:	e7d4      	b.n	8022f60 <mg_json_get+0x2bc>
 8022fb6:	9304      	str	r3, [sp, #16]
 8022fb8:	e7d2      	b.n	8022f60 <mg_json_get+0x2bc>
          MG_EOO('}');
 8022fba:	9b01      	ldr	r3, [sp, #4]
 8022fbc:	9a03      	ldr	r2, [sp, #12]
 8022fbe:	4293      	cmp	r3, r2
 8022fc0:	d0a7      	beq.n	8022f12 <mg_json_get+0x26e>
 8022fc2:	f06f 0502 	mvn.w	r5, #2
 8022fc6:	e0ae      	b.n	8023126 <mg_json_get+0x482>
 8022fc8:	9b02      	ldr	r3, [sp, #8]
 8022fca:	9a04      	ldr	r2, [sp, #16]
 8022fcc:	5c9b      	ldrb	r3, [r3, r2]
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	d1ab      	bne.n	8022f2a <mg_json_get+0x286>
 8022fd2:	9b01      	ldr	r3, [sp, #4]
 8022fd4:	9a03      	ldr	r2, [sp, #12]
 8022fd6:	4293      	cmp	r3, r2
 8022fd8:	d1a7      	bne.n	8022f2a <mg_json_get+0x286>
 8022fda:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022fde:	f1ba 0f00 	cmp.w	sl, #0
 8022fe2:	d004      	beq.n	8022fee <mg_json_get+0x34a>
 8022fe4:	9b05      	ldr	r3, [sp, #20]
 8022fe6:	1ae3      	subs	r3, r4, r3
 8022fe8:	3301      	adds	r3, #1
 8022fea:	f8ca 3000 	str.w	r3, [sl]
 8022fee:	9d05      	ldr	r5, [sp, #20]
 8022ff0:	e099      	b.n	8023126 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022ff2:	9b03      	ldr	r3, [sp, #12]
 8022ff4:	2b00      	cmp	r3, #0
 8022ff6:	f2c0 8092 	blt.w	802311e <mg_json_get+0x47a>
 8022ffa:	9b01      	ldr	r3, [sp, #4]
 8022ffc:	3301      	adds	r3, #1
 8022ffe:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8023000:	2303      	movs	r3, #3
 8023002:	e002      	b.n	802300a <mg_json_get+0x366>
        if (c == ':') {
 8023004:	2d3a      	cmp	r5, #58	@ 0x3a
 8023006:	d11d      	bne.n	8023044 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8023008:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802300a:	3401      	adds	r4, #1
 802300c:	4544      	cmp	r4, r8
 802300e:	f280 8088 	bge.w	8023122 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8023012:	46a2      	mov	sl, r4
 8023014:	eb06 0904 	add.w	r9, r6, r4
 8023018:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802301a:	2d20      	cmp	r5, #32
 802301c:	d0f5      	beq.n	802300a <mg_json_get+0x366>
 802301e:	2d09      	cmp	r5, #9
 8023020:	d0f3      	beq.n	802300a <mg_json_get+0x366>
 8023022:	2d0a      	cmp	r5, #10
 8023024:	d0f1      	beq.n	802300a <mg_json_get+0x366>
 8023026:	2d0d      	cmp	r5, #13
 8023028:	d0ef      	beq.n	802300a <mg_json_get+0x366>
    switch (expecting) {
 802302a:	2b03      	cmp	r3, #3
 802302c:	d8ed      	bhi.n	802300a <mg_json_get+0x366>
 802302e:	a201      	add	r2, pc, #4	@ (adr r2, 8023034 <mg_json_get+0x390>)
 8023030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023034:	08022ceb 	.word	0x08022ceb
 8023038:	08022f05 	.word	0x08022f05
 802303c:	08023005 	.word	0x08023005
 8023040:	0802304b 	.word	0x0802304b
          return MG_JSON_INVALID;
 8023044:	f06f 0501 	mvn.w	r5, #1
 8023048:	e06d      	b.n	8023126 <mg_json_get+0x482>
        if (depth <= 0) {
 802304a:	2f00      	cmp	r7, #0
 802304c:	f340 808a 	ble.w	8023164 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8023050:	2d2c      	cmp	r5, #44	@ 0x2c
 8023052:	d01e      	beq.n	8023092 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8023054:	2d5d      	cmp	r5, #93	@ 0x5d
 8023056:	d002      	beq.n	802305e <mg_json_get+0x3ba>
 8023058:	2d7d      	cmp	r5, #125	@ 0x7d
 802305a:	f040 8086 	bne.w	802316a <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802305e:	455f      	cmp	r7, fp
 8023060:	d021      	beq.n	80230a6 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8023062:	455f      	cmp	r7, fp
 8023064:	d02b      	beq.n	80230be <mg_json_get+0x41a>
          MG_EOO('O');
 8023066:	455f      	cmp	r7, fp
 8023068:	d035      	beq.n	80230d6 <mg_json_get+0x432>
 802306a:	3f01      	subs	r7, #1
 802306c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023070:	446a      	add	r2, sp
 8023072:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8023076:	3202      	adds	r2, #2
 8023078:	4295      	cmp	r5, r2
 802307a:	d179      	bne.n	8023170 <mg_json_get+0x4cc>
 802307c:	455f      	cmp	r7, fp
 802307e:	d037      	beq.n	80230f0 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023080:	455f      	cmp	r7, fp
 8023082:	d1c2      	bne.n	802300a <mg_json_get+0x366>
 8023084:	9a03      	ldr	r2, [sp, #12]
 8023086:	2a00      	cmp	r2, #0
 8023088:	dbbf      	blt.n	802300a <mg_json_get+0x366>
 802308a:	9a01      	ldr	r2, [sp, #4]
 802308c:	3201      	adds	r2, #1
 802308e:	9201      	str	r2, [sp, #4]
 8023090:	e7bb      	b.n	802300a <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8023092:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8023096:	446b      	add	r3, sp
 8023098:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802309c:	2b7b      	cmp	r3, #123	@ 0x7b
 802309e:	bf14      	ite	ne
 80230a0:	2300      	movne	r3, #0
 80230a2:	2301      	moveq	r3, #1
 80230a4:	e7b1      	b.n	802300a <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80230a6:	2d7d      	cmp	r5, #125	@ 0x7d
 80230a8:	d1db      	bne.n	8023062 <mg_json_get+0x3be>
 80230aa:	9a02      	ldr	r2, [sp, #8]
 80230ac:	9904      	ldr	r1, [sp, #16]
 80230ae:	440a      	add	r2, r1
 80230b0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80230b4:	2a2e      	cmp	r2, #46	@ 0x2e
 80230b6:	d1d4      	bne.n	8023062 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 80230b8:	f06f 0502 	mvn.w	r5, #2
 80230bc:	e033      	b.n	8023126 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80230be:	2d5d      	cmp	r5, #93	@ 0x5d
 80230c0:	d1d1      	bne.n	8023066 <mg_json_get+0x3c2>
 80230c2:	9a02      	ldr	r2, [sp, #8]
 80230c4:	9904      	ldr	r1, [sp, #16]
 80230c6:	440a      	add	r2, r1
 80230c8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80230cc:	2a2c      	cmp	r2, #44	@ 0x2c
 80230ce:	d1ca      	bne.n	8023066 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 80230d0:	f06f 0502 	mvn.w	r5, #2
 80230d4:	e027      	b.n	8023126 <mg_json_get+0x482>
          MG_EOO('O');
 80230d6:	9a01      	ldr	r2, [sp, #4]
 80230d8:	9903      	ldr	r1, [sp, #12]
 80230da:	428a      	cmp	r2, r1
 80230dc:	d0c5      	beq.n	802306a <mg_json_get+0x3c6>
 80230de:	f06f 0502 	mvn.w	r5, #2
 80230e2:	e020      	b.n	8023126 <mg_json_get+0x482>
 80230e4:	08036dd0 	.word	0x08036dd0
 80230e8:	0803a3bc 	.word	0x0803a3bc
 80230ec:	08036dd8 	.word	0x08036dd8
 80230f0:	9a02      	ldr	r2, [sp, #8]
 80230f2:	9904      	ldr	r1, [sp, #16]
 80230f4:	5c52      	ldrb	r2, [r2, r1]
 80230f6:	2a00      	cmp	r2, #0
 80230f8:	d1c2      	bne.n	8023080 <mg_json_get+0x3dc>
 80230fa:	9a01      	ldr	r2, [sp, #4]
 80230fc:	9903      	ldr	r1, [sp, #12]
 80230fe:	428a      	cmp	r2, r1
 8023100:	d1be      	bne.n	8023080 <mg_json_get+0x3dc>
 8023102:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023106:	f1ba 0f00 	cmp.w	sl, #0
 802310a:	d004      	beq.n	8023116 <mg_json_get+0x472>
 802310c:	9b05      	ldr	r3, [sp, #20]
 802310e:	1ae3      	subs	r3, r4, r3
 8023110:	3301      	adds	r3, #1
 8023112:	f8ca 3000 	str.w	r3, [sl]
 8023116:	9d05      	ldr	r5, [sp, #20]
 8023118:	e005      	b.n	8023126 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802311a:	2303      	movs	r3, #3
 802311c:	e775      	b.n	802300a <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 802311e:	2303      	movs	r3, #3
 8023120:	e773      	b.n	802300a <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8023122:	f06f 0502 	mvn.w	r5, #2
}
 8023126:	4628      	mov	r0, r5
 8023128:	b015      	add	sp, #84	@ 0x54
 802312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 802312e:	f06f 0501 	mvn.w	r5, #1
 8023132:	e7f8      	b.n	8023126 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023134:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8023138:	e7f5      	b.n	8023126 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802313a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802313e:	e7f2      	b.n	8023126 <mg_json_get+0x482>
          MG_EOO(']');
 8023140:	f06f 0501 	mvn.w	r5, #1
 8023144:	e7ef      	b.n	8023126 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023146:	f06f 0501 	mvn.w	r5, #1
 802314a:	e7ec      	b.n	8023126 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802314c:	f06f 0502 	mvn.w	r5, #2
 8023150:	e7e9      	b.n	8023126 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8023152:	f06f 0502 	mvn.w	r5, #2
 8023156:	e7e6      	b.n	8023126 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023158:	f06f 0501 	mvn.w	r5, #1
 802315c:	e7e3      	b.n	8023126 <mg_json_get+0x482>
          MG_EOO('}');
 802315e:	f06f 0501 	mvn.w	r5, #1
 8023162:	e7e0      	b.n	8023126 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023164:	f06f 0501 	mvn.w	r5, #1
 8023168:	e7dd      	b.n	8023126 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802316a:	f06f 0501 	mvn.w	r5, #1
 802316e:	e7da      	b.n	8023126 <mg_json_get+0x482>
          MG_EOO('O');
 8023170:	f06f 0501 	mvn.w	r5, #1
 8023174:	e7d7      	b.n	8023126 <mg_json_get+0x482>
 8023176:	bf00      	nop

08023178 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8023178:	b510      	push	{r4, lr}
 802317a:	b084      	sub	sp, #16
 802317c:	46ec      	mov	ip, sp
 802317e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023182:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023184:	ab03      	add	r3, sp, #12
 8023186:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802318a:	f7ff fd8b 	bl	8022ca4 <mg_json_get>
 802318e:	1e02      	subs	r2, r0, #0
 8023190:	db11      	blt.n	80231b6 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8023192:	9b00      	ldr	r3, [sp, #0]
 8023194:	1898      	adds	r0, r3, r2
 8023196:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023198:	2a2d      	cmp	r2, #45	@ 0x2d
 802319a:	d003      	beq.n	80231a4 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802319c:	3a30      	subs	r2, #48	@ 0x30
 802319e:	b2d2      	uxtb	r2, r2
 80231a0:	2a09      	cmp	r2, #9
 80231a2:	d80b      	bhi.n	80231bc <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 80231a4:	b164      	cbz	r4, 80231c0 <mg_json_get_num+0x48>
 80231a6:	2200      	movs	r2, #0
 80231a8:	9903      	ldr	r1, [sp, #12]
 80231aa:	f7fd fa81 	bl	80206b0 <mg_atod>
 80231ae:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 80231b2:	2001      	movs	r0, #1
 80231b4:	e000      	b.n	80231b8 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 80231b6:	2000      	movs	r0, #0
}
 80231b8:	b004      	add	sp, #16
 80231ba:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 80231bc:	2000      	movs	r0, #0
 80231be:	e7fb      	b.n	80231b8 <mg_json_get_num+0x40>
    found = 1;
 80231c0:	2001      	movs	r0, #1
 80231c2:	e7f9      	b.n	80231b8 <mg_json_get_num+0x40>

080231c4 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 80231c4:	b510      	push	{r4, lr}
 80231c6:	b082      	sub	sp, #8
 80231c8:	46ec      	mov	ip, sp
 80231ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80231ce:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 80231d0:	2300      	movs	r3, #0
 80231d2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80231d6:	f7ff fd65 	bl	8022ca4 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 80231da:	2800      	cmp	r0, #0
 80231dc:	db0f      	blt.n	80231fe <mg_json_get_bool+0x3a>
 80231de:	9b00      	ldr	r3, [sp, #0]
 80231e0:	5c1b      	ldrb	r3, [r3, r0]
 80231e2:	2b74      	cmp	r3, #116	@ 0x74
 80231e4:	d003      	beq.n	80231ee <mg_json_get_bool+0x2a>
 80231e6:	2b66      	cmp	r3, #102	@ 0x66
 80231e8:	d001      	beq.n	80231ee <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 80231ea:	2000      	movs	r0, #0
 80231ec:	e008      	b.n	8023200 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 80231ee:	b14c      	cbz	r4, 8023204 <mg_json_get_bool+0x40>
 80231f0:	2b74      	cmp	r3, #116	@ 0x74
 80231f2:	bf14      	ite	ne
 80231f4:	2300      	movne	r3, #0
 80231f6:	2301      	moveq	r3, #1
 80231f8:	7023      	strb	r3, [r4, #0]
    found = 1;
 80231fa:	2001      	movs	r0, #1
 80231fc:	e000      	b.n	8023200 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 80231fe:	2000      	movs	r0, #0
}
 8023200:	b002      	add	sp, #8
 8023202:	bd10      	pop	{r4, pc}
    found = 1;
 8023204:	2001      	movs	r0, #1
 8023206:	e7fb      	b.n	8023200 <mg_json_get_bool+0x3c>

08023208 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8023208:	b5f0      	push	{r4, r5, r6, r7, lr}
 802320a:	b085      	sub	sp, #20
 802320c:	4606      	mov	r6, r0
 802320e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8023210:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8023212:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8023214:	e038      	b.n	8023288 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8023216:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802321a:	f7fd fb5b 	bl	80208d4 <nibble>
 802321e:	f7fd fb41 	bl	80208a4 <logc>
 8023222:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8023226:	f7fd fb55 	bl	80208d4 <nibble>
 802322a:	f7fd fb3b 	bl	80208a4 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802322e:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8023232:	f7fd fb4f 	bl	80208d4 <nibble>
 8023236:	f7fd fb35 	bl	80208a4 <logc>
 802323a:	2030      	movs	r0, #48	@ 0x30
 802323c:	f7fd fb32 	bl	80208a4 <logc>
 8023240:	2103      	movs	r1, #3
 8023242:	4829      	ldr	r0, [pc, #164]	@ (80232e8 <mg_hexdump+0xe0>)
 8023244:	f7fd fb3a 	bl	80208bc <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8023248:	5d70      	ldrb	r0, [r6, r5]
 802324a:	0900      	lsrs	r0, r0, #4
 802324c:	f7fd fb42 	bl	80208d4 <nibble>
 8023250:	f7fd fb28 	bl	80208a4 <logc>
 8023254:	5d70      	ldrb	r0, [r6, r5]
 8023256:	f000 000f 	and.w	r0, r0, #15
 802325a:	f7fd fb3b 	bl	80208d4 <nibble>
 802325e:	f7fd fb21 	bl	80208a4 <logc>
    logc(' ');                                         // Space after hex number
 8023262:	2020      	movs	r0, #32
 8023264:	f7fd fb1e 	bl	80208a4 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023268:	5d72      	ldrb	r2, [r6, r5]
 802326a:	f1a2 0320 	sub.w	r3, r2, #32
 802326e:	b2db      	uxtb	r3, r3
 8023270:	2b5e      	cmp	r3, #94	@ 0x5e
 8023272:	d900      	bls.n	8023276 <mg_hexdump+0x6e>
 8023274:	222e      	movs	r2, #46	@ 0x2e
 8023276:	1c63      	adds	r3, r4, #1
 8023278:	f104 0110 	add.w	r1, r4, #16
 802327c:	eb0d 0401 	add.w	r4, sp, r1
 8023280:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023284:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023286:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023288:	42bd      	cmp	r5, r7
 802328a:	d21e      	bcs.n	80232ca <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802328c:	f015 0f0f 	tst.w	r5, #15
 8023290:	d1da      	bne.n	8023248 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8023292:	2d00      	cmp	r5, #0
 8023294:	d0bf      	beq.n	8023216 <mg_hexdump+0xe>
 8023296:	2102      	movs	r1, #2
 8023298:	4814      	ldr	r0, [pc, #80]	@ (80232ec <mg_hexdump+0xe4>)
 802329a:	f7fd fb0f 	bl	80208bc <logs>
 802329e:	2110      	movs	r1, #16
 80232a0:	4668      	mov	r0, sp
 80232a2:	f7fd fb0b 	bl	80208bc <logs>
 80232a6:	200a      	movs	r0, #10
 80232a8:	f7fd fafc 	bl	80208a4 <logc>
 80232ac:	2400      	movs	r4, #0
 80232ae:	e7b2      	b.n	8023216 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80232b0:	2103      	movs	r1, #3
 80232b2:	480d      	ldr	r0, [pc, #52]	@ (80232e8 <mg_hexdump+0xe0>)
 80232b4:	f7fd fb02 	bl	80208bc <logs>
 80232b8:	1c63      	adds	r3, r4, #1
 80232ba:	f104 0210 	add.w	r2, r4, #16
 80232be:	eb0d 0402 	add.w	r4, sp, r2
 80232c2:	2220      	movs	r2, #32
 80232c4:	f804 2c10 	strb.w	r2, [r4, #-16]
 80232c8:	b2dc      	uxtb	r4, r3
 80232ca:	2c0f      	cmp	r4, #15
 80232cc:	d9f0      	bls.n	80232b0 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80232ce:	2102      	movs	r1, #2
 80232d0:	4806      	ldr	r0, [pc, #24]	@ (80232ec <mg_hexdump+0xe4>)
 80232d2:	f7fd faf3 	bl	80208bc <logs>
 80232d6:	2110      	movs	r1, #16
 80232d8:	4668      	mov	r0, sp
 80232da:	f7fd faef 	bl	80208bc <logs>
 80232de:	200a      	movs	r0, #10
 80232e0:	f7fd fae0 	bl	80208a4 <logc>
}
 80232e4:	b005      	add	sp, #20
 80232e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232e8:	0803a3c8 	.word	0x0803a3c8
 80232ec:	0803a3c4 	.word	0x0803a3c4

080232f0 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 80232f0:	4b09      	ldr	r3, [pc, #36]	@ (8023318 <mg_md5_init+0x28>)
 80232f2:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 80232f4:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80232f8:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 80232fa:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80232fe:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023302:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8023306:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8023308:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 802330c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 802330e:	2300      	movs	r3, #0
 8023310:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8023312:	6143      	str	r3, [r0, #20]
}
 8023314:	4770      	bx	lr
 8023316:	bf00      	nop
 8023318:	67452301 	.word	0x67452301

0802331c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023320:	4606      	mov	r6, r0
 8023322:	460c      	mov	r4, r1
 8023324:	4615      	mov	r5, r2
  t = ctx->bits[0];
 8023326:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8023328:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802332c:	6102      	str	r2, [r0, #16]
 802332e:	429a      	cmp	r2, r3
 8023330:	d202      	bcs.n	8023338 <mg_md5_update+0x1c>
 8023332:	6942      	ldr	r2, [r0, #20]
 8023334:	3201      	adds	r2, #1
 8023336:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8023338:	6972      	ldr	r2, [r6, #20]
 802333a:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 802333e:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8023340:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 8023344:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8023348:	d035      	beq.n	80233b6 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 802334a:	f106 0918 	add.w	r9, r6, #24
 802334e:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 8023352:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 8023356:	4545      	cmp	r5, r8
 8023358:	d30b      	bcc.n	8023372 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 802335a:	4642      	mov	r2, r8
 802335c:	4621      	mov	r1, r4
 802335e:	f00a fd7b 	bl	802de58 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023362:	4649      	mov	r1, r9
 8023364:	4630      	mov	r0, r6
 8023366:	f7fd fabf 	bl	80208e8 <mg_md5_transform>
    buf += t;
 802336a:	4444      	add	r4, r8
    len -= t;
 802336c:	3f40      	subs	r7, #64	@ 0x40
 802336e:	443d      	add	r5, r7
 8023370:	e021      	b.n	80233b6 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8023372:	462a      	mov	r2, r5
 8023374:	4621      	mov	r1, r4
 8023376:	f00a fd6f 	bl	802de58 <memcpy>
      return;
 802337a:	e024      	b.n	80233c6 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 802337c:	f106 0118 	add.w	r1, r6, #24
 8023380:	4623      	mov	r3, r4
 8023382:	468c      	mov	ip, r1
 8023384:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023388:	681f      	ldr	r7, [r3, #0]
 802338a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 802338e:	6898      	ldr	r0, [r3, #8]
 8023390:	68da      	ldr	r2, [r3, #12]
 8023392:	f8cc 7000 	str.w	r7, [ip]
 8023396:	f8cc e004 	str.w	lr, [ip, #4]
 802339a:	f8cc 0008 	str.w	r0, [ip, #8]
 802339e:	f8cc 200c 	str.w	r2, [ip, #12]
 80233a2:	3310      	adds	r3, #16
 80233a4:	f10c 0c10 	add.w	ip, ip, #16
 80233a8:	4543      	cmp	r3, r8
 80233aa:	d1ed      	bne.n	8023388 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80233ac:	4630      	mov	r0, r6
 80233ae:	f7fd fa9b 	bl	80208e8 <mg_md5_transform>
    buf += 64;
 80233b2:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 80233b4:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 80233b6:	2d3f      	cmp	r5, #63	@ 0x3f
 80233b8:	d8e0      	bhi.n	802337c <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 80233ba:	462a      	mov	r2, r5
 80233bc:	4621      	mov	r1, r4
 80233be:	f106 0018 	add.w	r0, r6, #24
 80233c2:	f00a fd49 	bl	802de58 <memcpy>
}
 80233c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080233ca <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 80233ca:	b570      	push	{r4, r5, r6, lr}
 80233cc:	4604      	mov	r4, r0
 80233ce:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 80233d0:	6903      	ldr	r3, [r0, #16]
 80233d2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 80233d6:	f100 0618 	add.w	r6, r0, #24
 80233da:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 80233dc:	3001      	adds	r0, #1
 80233de:	2280      	movs	r2, #128	@ 0x80
 80233e0:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 80233e2:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 80233e6:	2a07      	cmp	r2, #7
 80233e8:	d821      	bhi.n	802342e <mg_md5_final+0x64>
    memset(p, 0, count);
 80233ea:	2100      	movs	r1, #0
 80233ec:	f009 faf8 	bl	802c9e0 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80233f0:	4631      	mov	r1, r6
 80233f2:	4620      	mov	r0, r4
 80233f4:	f7fd fa78 	bl	80208e8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 80233f8:	2238      	movs	r2, #56	@ 0x38
 80233fa:	2100      	movs	r1, #0
 80233fc:	4630      	mov	r0, r6
 80233fe:	f009 faef 	bl	802c9e0 <memset>
  a[14] = ctx->bits[0];
 8023402:	6923      	ldr	r3, [r4, #16]
 8023404:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8023406:	6963      	ldr	r3, [r4, #20]
 8023408:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802340a:	4631      	mov	r1, r6
 802340c:	4620      	mov	r0, r4
 802340e:	f7fd fa6b 	bl	80208e8 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8023412:	6820      	ldr	r0, [r4, #0]
 8023414:	6861      	ldr	r1, [r4, #4]
 8023416:	68a2      	ldr	r2, [r4, #8]
 8023418:	68e3      	ldr	r3, [r4, #12]
 802341a:	6028      	str	r0, [r5, #0]
 802341c:	6069      	str	r1, [r5, #4]
 802341e:	60aa      	str	r2, [r5, #8]
 8023420:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8023422:	2258      	movs	r2, #88	@ 0x58
 8023424:	2100      	movs	r1, #0
 8023426:	4620      	mov	r0, r4
 8023428:	f009 fada 	bl	802c9e0 <memset>
}
 802342c:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 802342e:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8023432:	2100      	movs	r1, #0
 8023434:	f009 fad4 	bl	802c9e0 <memset>
 8023438:	e7e3      	b.n	8023402 <mg_md5_final+0x38>

0802343a <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 802343a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802343e:	4604      	mov	r4, r0
 8023440:	460d      	mov	r5, r1
 8023442:	4617      	mov	r7, r2
 8023444:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8023446:	2228      	movs	r2, #40	@ 0x28
 8023448:	2100      	movs	r1, #0
 802344a:	4618      	mov	r0, r3
 802344c:	f009 fac8 	bl	802c9e0 <memset>
  m->dgram.buf = (char *) buf;
 8023450:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8023452:	2d01      	cmp	r5, #1
 8023454:	f240 8088 	bls.w	8023568 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8023458:	7820      	ldrb	r0, [r4, #0]
 802345a:	0900      	lsrs	r0, r0, #4
 802345c:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 802345e:	46a4      	mov	ip, r4
 8023460:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8023464:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8023468:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 802346c:	2300      	movs	r3, #0
 802346e:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023470:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023472:	ebac 0e04 	sub.w	lr, ip, r4
 8023476:	45ae      	cmp	lr, r5
 8023478:	d211      	bcs.n	802349e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 802347a:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802347e:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023482:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023486:	fa0e fe08 	lsl.w	lr, lr, r8
 802348a:	4471      	add	r1, lr
    len_len++;
 802348c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 802348e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023492:	d004      	beq.n	802349e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023494:	2b03      	cmp	r3, #3
 8023496:	d9ec      	bls.n	8023472 <mg_mqtt_parse+0x38>
 8023498:	2002      	movs	r0, #2
}
 802349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 802349e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 80234a2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80234a6:	d161      	bne.n	802356c <mg_mqtt_parse+0x132>
 80234a8:	4425      	add	r5, r4
 80234aa:	4545      	cmp	r5, r8
 80234ac:	d360      	bcc.n	8023570 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 80234ae:	eba8 0304 	sub.w	r3, r8, r4
 80234b2:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 80234b4:	2803      	cmp	r0, #3
 80234b6:	d01c      	beq.n	80234f2 <mg_mqtt_parse+0xb8>
 80234b8:	d80a      	bhi.n	80234d0 <mg_mqtt_parse+0x96>
 80234ba:	2802      	cmp	r0, #2
 80234bc:	d106      	bne.n	80234cc <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 80234be:	2901      	cmp	r1, #1
 80234c0:	dd5a      	ble.n	8023578 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 80234c2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234c6:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 80234c8:	2000      	movs	r0, #0
      break;
 80234ca:	e7e6      	b.n	802349a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 80234cc:	2000      	movs	r0, #0
 80234ce:	e7e4      	b.n	802349a <mg_mqtt_parse+0x60>
 80234d0:	3804      	subs	r0, #4
 80234d2:	b2c0      	uxtb	r0, r0
 80234d4:	2807      	cmp	r0, #7
 80234d6:	d84d      	bhi.n	8023574 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 80234d8:	f10c 0302 	add.w	r3, ip, #2
 80234dc:	4543      	cmp	r3, r8
 80234de:	d84d      	bhi.n	802357c <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80234e0:	f89c 2000 	ldrb.w	r2, [ip]
 80234e4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80234ec:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 80234ee:	2000      	movs	r0, #0
      break;
 80234f0:	e7d3      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80234f2:	f10c 0202 	add.w	r2, ip, #2
 80234f6:	4542      	cmp	r2, r8
 80234f8:	d842      	bhi.n	8023580 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80234fa:	f89c 1000 	ldrb.w	r1, [ip]
 80234fe:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023506:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8023508:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 802350a:	3302      	adds	r3, #2
 802350c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8023510:	45a8      	cmp	r8, r5
 8023512:	d337      	bcc.n	8023584 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8023514:	f1b9 0f00 	cmp.w	r9, #0
 8023518:	d008      	beq.n	802352c <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 802351a:	1caa      	adds	r2, r5, #2
 802351c:	4542      	cmp	r2, r8
 802351e:	d833      	bhi.n	8023588 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023520:	7829      	ldrb	r1, [r5, #0]
 8023522:	786b      	ldrb	r3, [r5, #1]
 8023524:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023528:	8333      	strh	r3, [r6, #24]
        p += 2;
 802352a:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 802352c:	4545      	cmp	r5, r8
 802352e:	d82d      	bhi.n	802358c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8023530:	2f05      	cmp	r7, #5
 8023532:	d007      	beq.n	8023544 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8023534:	4545      	cmp	r5, r8
 8023536:	d82d      	bhi.n	8023594 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8023538:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 802353a:	eba8 0505 	sub.w	r5, r8, r5
 802353e:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8023540:	2000      	movs	r0, #0
      break;
 8023542:	e7aa      	b.n	802349a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8023544:	1cab      	adds	r3, r5, #2
 8023546:	4543      	cmp	r3, r8
 8023548:	d2f4      	bcs.n	8023534 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 802354a:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 802354e:	eba8 0105 	sub.w	r1, r8, r5
 8023552:	4628      	mov	r0, r5
 8023554:	f7fd fd70 	bl	8021038 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8023558:	b1d0      	cbz	r0, 8023590 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 802355a:	182b      	adds	r3, r5, r0
 802355c:	1b1b      	subs	r3, r3, r4
 802355e:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8023560:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8023562:	4403      	add	r3, r0
 8023564:	441d      	add	r5, r3
 8023566:	e7e5      	b.n	8023534 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8023568:	2001      	movs	r0, #1
 802356a:	e796      	b.n	802349a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802356c:	2001      	movs	r0, #1
 802356e:	e794      	b.n	802349a <mg_mqtt_parse+0x60>
 8023570:	2001      	movs	r0, #1
 8023572:	e792      	b.n	802349a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023574:	2000      	movs	r0, #0
 8023576:	e790      	b.n	802349a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023578:	2002      	movs	r0, #2
 802357a:	e78e      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 802357c:	2002      	movs	r0, #2
 802357e:	e78c      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023580:	2002      	movs	r0, #2
 8023582:	e78a      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023584:	2002      	movs	r0, #2
 8023586:	e788      	b.n	802349a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023588:	2002      	movs	r0, #2
 802358a:	e786      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 802358c:	2002      	movs	r0, #2
 802358e:	e784      	b.n	802349a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023590:	2002      	movs	r0, #2
 8023592:	e782      	b.n	802349a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023594:	2002      	movs	r0, #2
 8023596:	e780      	b.n	802349a <mg_mqtt_parse+0x60>

08023598 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023598:	b510      	push	{r4, lr}
 802359a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802359c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802359e:	31b0      	adds	r1, #176	@ 0xb0
 80235a0:	2001      	movs	r0, #1
 80235a2:	f7ff f8f5 	bl	8022790 <mg_calloc>
  if (c != NULL) {
 80235a6:	4603      	mov	r3, r0
 80235a8:	b148      	cbz	r0, 80235be <mg_alloc_conn+0x26>
    c->mgr = mgr;
 80235aa:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 80235ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80235b0:	6742      	str	r2, [r0, #116]	@ 0x74
 80235b2:	6442      	str	r2, [r0, #68]	@ 0x44
 80235b4:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 80235b6:	69e2      	ldr	r2, [r4, #28]
 80235b8:	3201      	adds	r2, #1
 80235ba:	61e2      	str	r2, [r4, #28]
 80235bc:	6342      	str	r2, [r0, #52]	@ 0x34
}
 80235be:	4618      	mov	r0, r3
 80235c0:	bd10      	pop	{r4, pc}
	...

080235c4 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 80235c4:	b510      	push	{r4, lr}
 80235c6:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 80235c8:	2248      	movs	r2, #72	@ 0x48
 80235ca:	2100      	movs	r1, #0
 80235cc:	f009 fa08 	bl	802c9e0 <memset>
  mgr->epoll_fd = -1;
 80235d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80235d4:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 80235d6:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 80235d8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80235dc:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80235de:	4b02      	ldr	r3, [pc, #8]	@ (80235e8 <mg_mgr_init+0x24>)
 80235e0:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80235e2:	4b02      	ldr	r3, [pc, #8]	@ (80235ec <mg_mgr_init+0x28>)
 80235e4:	60e3      	str	r3, [r4, #12]
}
 80235e6:	bd10      	pop	{r4, pc}
 80235e8:	0803a3cc 	.word	0x0803a3cc
 80235ec:	0803a3e0 	.word	0x0803a3e0

080235f0 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80235f0:	b40c      	push	{r2, r3}
 80235f2:	b500      	push	{lr}
 80235f4:	b083      	sub	sp, #12
 80235f6:	ab04      	add	r3, sp, #16
 80235f8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80235fc:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80235fe:	ab01      	add	r3, sp, #4
 8023600:	f000 fcde 	bl	8023fc0 <mg_vsnprintf>
}
 8023604:	b003      	add	sp, #12
 8023606:	f85d eb04 	ldr.w	lr, [sp], #4
 802360a:	b002      	add	sp, #8
 802360c:	4770      	bx	lr
	...

08023610 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8023610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023614:	b093      	sub	sp, #76	@ 0x4c
 8023616:	9005      	str	r0, [sp, #20]
 8023618:	9106      	str	r1, [sp, #24]
 802361a:	ec51 0b10 	vmov	r0, r1, d0
 802361e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023622:	4690      	mov	r8, r2
 8023624:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023626:	2200      	movs	r2, #0
 8023628:	2300      	movs	r3, #0
 802362a:	f7ed fa65 	bl	8010af8 <__aeabi_dcmpeq>
 802362e:	b9c8      	cbnz	r0, 8023664 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023630:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023634:	f7fc fab0 	bl	801fb98 <xisinf>
 8023638:	b9d8      	cbnz	r0, 8023672 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 802363a:	ed9d 0b02 	vldr	d0, [sp, #8]
 802363e:	f7fc fabd 	bl	801fbbc <xisnan>
 8023642:	4606      	mov	r6, r0
 8023644:	bb28      	cbnz	r0, 8023692 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023646:	2200      	movs	r2, #0
 8023648:	2300      	movs	r3, #0
 802364a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802364e:	4620      	mov	r0, r4
 8023650:	4629      	mov	r1, r5
 8023652:	f7ed fa5b 	bl	8010b0c <__aeabi_dcmplt>
 8023656:	bb18      	cbnz	r0, 80236a0 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8023658:	4637      	mov	r7, r6
  mul = 1.0;
 802365a:	2400      	movs	r4, #0
 802365c:	4dba      	ldr	r5, [pc, #744]	@ (8023948 <mg_dtoa+0x338>)
 802365e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023662:	e02f      	b.n	80236c4 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023664:	4bb9      	ldr	r3, [pc, #740]	@ (802394c <mg_dtoa+0x33c>)
 8023666:	4aba      	ldr	r2, [pc, #744]	@ (8023950 <mg_dtoa+0x340>)
 8023668:	9906      	ldr	r1, [sp, #24]
 802366a:	9805      	ldr	r0, [sp, #20]
 802366c:	f7ff ffc0 	bl	80235f0 <mg_snprintf>
 8023670:	e1d3      	b.n	8023a1a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023672:	2200      	movs	r2, #0
 8023674:	2300      	movs	r3, #0
 8023676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802367a:	f7ed fa65 	bl	8010b48 <__aeabi_dcmpgt>
 802367e:	b130      	cbz	r0, 802368e <mg_dtoa+0x7e>
 8023680:	4bb4      	ldr	r3, [pc, #720]	@ (8023954 <mg_dtoa+0x344>)
 8023682:	4ab3      	ldr	r2, [pc, #716]	@ (8023950 <mg_dtoa+0x340>)
 8023684:	9906      	ldr	r1, [sp, #24]
 8023686:	9805      	ldr	r0, [sp, #20]
 8023688:	f7ff ffb2 	bl	80235f0 <mg_snprintf>
 802368c:	e1c5      	b.n	8023a1a <mg_dtoa+0x40a>
 802368e:	4bb2      	ldr	r3, [pc, #712]	@ (8023958 <mg_dtoa+0x348>)
 8023690:	e7f7      	b.n	8023682 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023692:	4bb2      	ldr	r3, [pc, #712]	@ (802395c <mg_dtoa+0x34c>)
 8023694:	4aae      	ldr	r2, [pc, #696]	@ (8023950 <mg_dtoa+0x340>)
 8023696:	9906      	ldr	r1, [sp, #24]
 8023698:	9805      	ldr	r0, [sp, #20]
 802369a:	f7ff ffa9 	bl	80235f0 <mg_snprintf>
 802369e:	e1bc      	b.n	8023a1a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80236a0:	4622      	mov	r2, r4
 80236a2:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80236a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80236aa:	232d      	movs	r3, #45	@ 0x2d
 80236ac:	f88d 3020 	strb.w	r3, [sp, #32]
 80236b0:	2701      	movs	r7, #1
 80236b2:	e7d2      	b.n	802365a <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80236b4:	2200      	movs	r2, #0
 80236b6:	4baa      	ldr	r3, [pc, #680]	@ (8023960 <mg_dtoa+0x350>)
 80236b8:	4620      	mov	r0, r4
 80236ba:	4629      	mov	r1, r5
 80236bc:	f7ec ffb4 	bl	8010628 <__aeabi_dmul>
 80236c0:	4604      	mov	r4, r0
 80236c2:	460d      	mov	r5, r1
 80236c4:	2200      	movs	r2, #0
 80236c6:	4ba6      	ldr	r3, [pc, #664]	@ (8023960 <mg_dtoa+0x350>)
 80236c8:	4650      	mov	r0, sl
 80236ca:	4659      	mov	r1, fp
 80236cc:	f7ed fa32 	bl	8010b34 <__aeabi_dcmpge>
 80236d0:	b1b0      	cbz	r0, 8023700 <mg_dtoa+0xf0>
 80236d2:	4622      	mov	r2, r4
 80236d4:	462b      	mov	r3, r5
 80236d6:	4650      	mov	r0, sl
 80236d8:	4659      	mov	r1, fp
 80236da:	f7ed f8cf 	bl	801087c <__aeabi_ddiv>
 80236de:	2200      	movs	r2, #0
 80236e0:	4b9f      	ldr	r3, [pc, #636]	@ (8023960 <mg_dtoa+0x350>)
 80236e2:	f7ed fa27 	bl	8010b34 <__aeabi_dcmpge>
 80236e6:	2800      	cmp	r0, #0
 80236e8:	d1e4      	bne.n	80236b4 <mg_dtoa+0xa4>
 80236ea:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80236ee:	e007      	b.n	8023700 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80236f0:	2200      	movs	r2, #0
 80236f2:	4b9b      	ldr	r3, [pc, #620]	@ (8023960 <mg_dtoa+0x350>)
 80236f4:	4620      	mov	r0, r4
 80236f6:	4629      	mov	r1, r5
 80236f8:	f7ed f8c0 	bl	801087c <__aeabi_ddiv>
 80236fc:	4604      	mov	r4, r0
 80236fe:	460d      	mov	r5, r1
 8023700:	2200      	movs	r2, #0
 8023702:	4b91      	ldr	r3, [pc, #580]	@ (8023948 <mg_dtoa+0x338>)
 8023704:	4650      	mov	r0, sl
 8023706:	4659      	mov	r1, fp
 8023708:	f7ed fa0a 	bl	8010b20 <__aeabi_dcmple>
 802370c:	b158      	cbz	r0, 8023726 <mg_dtoa+0x116>
 802370e:	4622      	mov	r2, r4
 8023710:	462b      	mov	r3, r5
 8023712:	4650      	mov	r0, sl
 8023714:	4659      	mov	r1, fp
 8023716:	f7ed f8b1 	bl	801087c <__aeabi_ddiv>
 802371a:	2200      	movs	r2, #0
 802371c:	4b8a      	ldr	r3, [pc, #552]	@ (8023948 <mg_dtoa+0x338>)
 802371e:	f7ed f9ff 	bl	8010b20 <__aeabi_dcmple>
 8023722:	2800      	cmp	r0, #0
 8023724:	d1e4      	bne.n	80236f0 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8023726:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802372a:	2200      	movs	r2, #0
 802372c:	4b8d      	ldr	r3, [pc, #564]	@ (8023964 <mg_dtoa+0x354>)
 802372e:	4620      	mov	r0, r4
 8023730:	4629      	mov	r1, r5
 8023732:	f7ec ff79 	bl	8010628 <__aeabi_dmul>
 8023736:	4634      	mov	r4, r6
 8023738:	e004      	b.n	8023744 <mg_dtoa+0x134>
 802373a:	2200      	movs	r2, #0
 802373c:	4b88      	ldr	r3, [pc, #544]	@ (8023960 <mg_dtoa+0x350>)
 802373e:	f7ed f89d 	bl	801087c <__aeabi_ddiv>
 8023742:	3401      	adds	r4, #1
 8023744:	4544      	cmp	r4, r8
 8023746:	dbf8      	blt.n	802373a <mg_dtoa+0x12a>
  d += t;
 8023748:	4602      	mov	r2, r0
 802374a:	460b      	mov	r3, r1
 802374c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023750:	f7ec fdb4 	bl	80102bc <__adddf3>
 8023754:	4682      	mov	sl, r0
 8023756:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8023758:	46b1      	mov	r9, r6
  mul = 1.0;
 802375a:	2400      	movs	r4, #0
 802375c:	4d7a      	ldr	r5, [pc, #488]	@ (8023948 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 802375e:	e009      	b.n	8023774 <mg_dtoa+0x164>
 8023760:	2200      	movs	r2, #0
 8023762:	4b7f      	ldr	r3, [pc, #508]	@ (8023960 <mg_dtoa+0x350>)
 8023764:	4620      	mov	r0, r4
 8023766:	4629      	mov	r1, r5
 8023768:	f7ec ff5e 	bl	8010628 <__aeabi_dmul>
 802376c:	4604      	mov	r4, r0
 802376e:	460d      	mov	r5, r1
 8023770:	f109 0901 	add.w	r9, r9, #1
 8023774:	2200      	movs	r2, #0
 8023776:	4b7a      	ldr	r3, [pc, #488]	@ (8023960 <mg_dtoa+0x350>)
 8023778:	4650      	mov	r0, sl
 802377a:	4659      	mov	r1, fp
 802377c:	f7ed f9da 	bl	8010b34 <__aeabi_dcmpge>
 8023780:	b1b0      	cbz	r0, 80237b0 <mg_dtoa+0x1a0>
 8023782:	4622      	mov	r2, r4
 8023784:	462b      	mov	r3, r5
 8023786:	4650      	mov	r0, sl
 8023788:	4659      	mov	r1, fp
 802378a:	f7ed f877 	bl	801087c <__aeabi_ddiv>
 802378e:	2200      	movs	r2, #0
 8023790:	4b73      	ldr	r3, [pc, #460]	@ (8023960 <mg_dtoa+0x350>)
 8023792:	f7ed f9cf 	bl	8010b34 <__aeabi_dcmpge>
 8023796:	2800      	cmp	r0, #0
 8023798:	d1e2      	bne.n	8023760 <mg_dtoa+0x150>
 802379a:	e009      	b.n	80237b0 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 802379c:	2200      	movs	r2, #0
 802379e:	4b70      	ldr	r3, [pc, #448]	@ (8023960 <mg_dtoa+0x350>)
 80237a0:	4620      	mov	r0, r4
 80237a2:	4629      	mov	r1, r5
 80237a4:	f7ed f86a 	bl	801087c <__aeabi_ddiv>
 80237a8:	4604      	mov	r4, r0
 80237aa:	460d      	mov	r5, r1
 80237ac:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80237b0:	2200      	movs	r2, #0
 80237b2:	4b65      	ldr	r3, [pc, #404]	@ (8023948 <mg_dtoa+0x338>)
 80237b4:	4650      	mov	r0, sl
 80237b6:	4659      	mov	r1, fp
 80237b8:	f7ed f9a8 	bl	8010b0c <__aeabi_dcmplt>
 80237bc:	b158      	cbz	r0, 80237d6 <mg_dtoa+0x1c6>
 80237be:	4622      	mov	r2, r4
 80237c0:	462b      	mov	r3, r5
 80237c2:	4650      	mov	r0, sl
 80237c4:	4659      	mov	r1, fp
 80237c6:	f7ed f859 	bl	801087c <__aeabi_ddiv>
 80237ca:	2200      	movs	r2, #0
 80237cc:	4b5e      	ldr	r3, [pc, #376]	@ (8023948 <mg_dtoa+0x338>)
 80237ce:	f7ed f99d 	bl	8010b0c <__aeabi_dcmplt>
 80237d2:	2800      	cmp	r0, #0
 80237d4:	d1e2      	bne.n	802379c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 80237d6:	45c1      	cmp	r9, r8
 80237d8:	db02      	blt.n	80237e0 <mg_dtoa+0x1d0>
 80237da:	f1b8 0f01 	cmp.w	r8, #1
 80237de:	dc25      	bgt.n	802382c <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 80237e0:	f1c8 0300 	rsb	r3, r8, #0
 80237e4:	454b      	cmp	r3, r9
 80237e6:	db5e      	blt.n	80238a6 <mg_dtoa+0x296>
 80237e8:	f1b8 0f01 	cmp.w	r8, #1
 80237ec:	dd5b      	ble.n	80238a6 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80237ee:	4622      	mov	r2, r4
 80237f0:	462b      	mov	r3, r5
 80237f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80237f6:	f7ed f841 	bl	801087c <__aeabi_ddiv>
 80237fa:	ad08      	add	r5, sp, #32
 80237fc:	9b07      	ldr	r3, [sp, #28]
 80237fe:	4642      	mov	r2, r8
 8023800:	ec41 0b10 	vmov	d0, r0, r1
 8023804:	2128      	movs	r1, #40	@ 0x28
 8023806:	4628      	mov	r0, r5
 8023808:	f7ff ff02 	bl	8023610 <mg_dtoa>
 802380c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 802380e:	1838      	adds	r0, r7, r0
 8023810:	222d      	movs	r2, #45	@ 0x2d
 8023812:	f1c9 0100 	rsb	r1, r9, #0
 8023816:	4428      	add	r0, r5
 8023818:	f7fc f984 	bl	801fb24 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 802381c:	9500      	str	r5, [sp, #0]
 802381e:	1823      	adds	r3, r4, r0
 8023820:	4a51      	ldr	r2, [pc, #324]	@ (8023968 <mg_dtoa+0x358>)
 8023822:	9906      	ldr	r1, [sp, #24]
 8023824:	9805      	ldr	r0, [sp, #20]
 8023826:	f7ff fee3 	bl	80235f0 <mg_snprintf>
 802382a:	e0f6      	b.n	8023a1a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 802382c:	4622      	mov	r2, r4
 802382e:	462b      	mov	r3, r5
 8023830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023834:	f7ed f822 	bl	801087c <__aeabi_ddiv>
 8023838:	ad08      	add	r5, sp, #32
 802383a:	9b07      	ldr	r3, [sp, #28]
 802383c:	4642      	mov	r2, r8
 802383e:	ec41 0b10 	vmov	d0, r0, r1
 8023842:	2128      	movs	r1, #40	@ 0x28
 8023844:	4628      	mov	r0, r5
 8023846:	f7ff fee3 	bl	8023610 <mg_dtoa>
 802384a:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 802384c:	1838      	adds	r0, r7, r0
 802384e:	222b      	movs	r2, #43	@ 0x2b
 8023850:	4649      	mov	r1, r9
 8023852:	4428      	add	r0, r5
 8023854:	f7fc f966 	bl	801fb24 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023858:	9500      	str	r5, [sp, #0]
 802385a:	1823      	adds	r3, r4, r0
 802385c:	4a42      	ldr	r2, [pc, #264]	@ (8023968 <mg_dtoa+0x358>)
 802385e:	9906      	ldr	r1, [sp, #24]
 8023860:	9805      	ldr	r0, [sp, #20]
 8023862:	f7ff fec5 	bl	80235f0 <mg_snprintf>
 8023866:	e0d8      	b.n	8023a1a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023868:	3601      	adds	r6, #1
 802386a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802386e:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023872:	eb0d 0902 	add.w	r9, sp, r2
 8023876:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802387a:	f7ec fe6b 	bl	8010554 <__aeabi_i2d>
 802387e:	4622      	mov	r2, r4
 8023880:	462b      	mov	r3, r5
 8023882:	f7ec fed1 	bl	8010628 <__aeabi_dmul>
 8023886:	4602      	mov	r2, r0
 8023888:	460b      	mov	r3, r1
 802388a:	4650      	mov	r0, sl
 802388c:	4659      	mov	r1, fp
 802388e:	f7ec fd13 	bl	80102b8 <__aeabi_dsub>
 8023892:	4682      	mov	sl, r0
 8023894:	468b      	mov	fp, r1
      t /= 10.0;
 8023896:	2200      	movs	r2, #0
 8023898:	4b31      	ldr	r3, [pc, #196]	@ (8023960 <mg_dtoa+0x350>)
 802389a:	4620      	mov	r0, r4
 802389c:	4629      	mov	r1, r5
 802389e:	f7ec ffed 	bl	801087c <__aeabi_ddiv>
 80238a2:	4604      	mov	r4, r0
 80238a4:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80238a6:	2200      	movs	r2, #0
 80238a8:	4b27      	ldr	r3, [pc, #156]	@ (8023948 <mg_dtoa+0x338>)
 80238aa:	4620      	mov	r0, r4
 80238ac:	4629      	mov	r1, r5
 80238ae:	f7ed f941 	bl	8010b34 <__aeabi_dcmpge>
 80238b2:	b188      	cbz	r0, 80238d8 <mg_dtoa+0x2c8>
 80238b4:	eb07 0906 	add.w	r9, r7, r6
 80238b8:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80238bc:	dc0c      	bgt.n	80238d8 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 80238be:	4622      	mov	r2, r4
 80238c0:	462b      	mov	r3, r5
 80238c2:	4650      	mov	r0, sl
 80238c4:	4659      	mov	r1, fp
 80238c6:	f7ec ffd9 	bl	801087c <__aeabi_ddiv>
 80238ca:	f7ed f95d 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80238ce:	2e00      	cmp	r6, #0
 80238d0:	dcca      	bgt.n	8023868 <mg_dtoa+0x258>
 80238d2:	2800      	cmp	r0, #0
 80238d4:	dcc8      	bgt.n	8023868 <mg_dtoa+0x258>
 80238d6:	e7d0      	b.n	802387a <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 80238d8:	b9ce      	cbnz	r6, 802390e <mg_dtoa+0x2fe>
 80238da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80238de:	446b      	add	r3, sp
 80238e0:	2230      	movs	r2, #48	@ 0x30
 80238e2:	f803 2c28 	strb.w	r2, [r3, #-40]
 80238e6:	3701      	adds	r7, #1
 80238e8:	e011      	b.n	802390e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80238ea:	f106 0901 	add.w	r9, r6, #1
 80238ee:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 80238f2:	eb0d 0603 	add.w	r6, sp, r3
 80238f6:	2330      	movs	r3, #48	@ 0x30
 80238f8:	f806 3c28 	strb.w	r3, [r6, #-40]
 80238fc:	2200      	movs	r2, #0
 80238fe:	4b18      	ldr	r3, [pc, #96]	@ (8023960 <mg_dtoa+0x350>)
 8023900:	4620      	mov	r0, r4
 8023902:	4629      	mov	r1, r5
 8023904:	f7ec ffba 	bl	801087c <__aeabi_ddiv>
 8023908:	4604      	mov	r4, r0
 802390a:	460d      	mov	r5, r1
 802390c:	464e      	mov	r6, r9
 802390e:	2200      	movs	r2, #0
 8023910:	4b0d      	ldr	r3, [pc, #52]	@ (8023948 <mg_dtoa+0x338>)
 8023912:	4620      	mov	r0, r4
 8023914:	4629      	mov	r1, r5
 8023916:	f7ed f90d 	bl	8010b34 <__aeabi_dcmpge>
 802391a:	b110      	cbz	r0, 8023922 <mg_dtoa+0x312>
 802391c:	19f3      	adds	r3, r6, r7
 802391e:	2b27      	cmp	r3, #39	@ 0x27
 8023920:	dde3      	ble.n	80238ea <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8023922:	19f3      	adds	r3, r6, r7
 8023924:	2b27      	cmp	r3, #39	@ 0x27
 8023926:	dc05      	bgt.n	8023934 <mg_dtoa+0x324>
 8023928:	3701      	adds	r7, #1
 802392a:	3348      	adds	r3, #72	@ 0x48
 802392c:	446b      	add	r3, sp
 802392e:	222e      	movs	r2, #46	@ 0x2e
 8023930:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023934:	a502      	add	r5, pc, #8	@ (adr r5, 8023940 <mg_dtoa+0x330>)
 8023936:	e9d5 4500 	ldrd	r4, r5, [r5]
 802393a:	e03e      	b.n	80239ba <mg_dtoa+0x3aa>
 802393c:	f3af 8000 	nop.w
 8023940:	9999999a 	.word	0x9999999a
 8023944:	3fb99999 	.word	0x3fb99999
 8023948:	3ff00000 	.word	0x3ff00000
 802394c:	080396f4 	.word	0x080396f4
 8023950:	0803afd8 	.word	0x0803afd8
 8023954:	0803a400 	.word	0x0803a400
 8023958:	0803a404 	.word	0x0803a404
 802395c:	0803a40c 	.word	0x0803a40c
 8023960:	40240000 	.word	0x40240000
 8023964:	40140000 	.word	0x40140000
 8023968:	0803a410 	.word	0x0803a410
      int ch = (int) (d / t);
 802396c:	4622      	mov	r2, r4
 802396e:	462b      	mov	r3, r5
 8023970:	4650      	mov	r0, sl
 8023972:	4659      	mov	r1, fp
 8023974:	f7ec ff82 	bl	801087c <__aeabi_ddiv>
 8023978:	f7ed f906 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 802397c:	3601      	adds	r6, #1
 802397e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023982:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023986:	eb0d 0902 	add.w	r9, sp, r2
 802398a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802398e:	f7ec fde1 	bl	8010554 <__aeabi_i2d>
 8023992:	4622      	mov	r2, r4
 8023994:	462b      	mov	r3, r5
 8023996:	f7ec fe47 	bl	8010628 <__aeabi_dmul>
 802399a:	4602      	mov	r2, r0
 802399c:	460b      	mov	r3, r1
 802399e:	4650      	mov	r0, sl
 80239a0:	4659      	mov	r1, fp
 80239a2:	f7ec fc89 	bl	80102b8 <__aeabi_dsub>
 80239a6:	4682      	mov	sl, r0
 80239a8:	468b      	mov	fp, r1
      t /= 10.0;
 80239aa:	2200      	movs	r2, #0
 80239ac:	4b1d      	ldr	r3, [pc, #116]	@ (8023a24 <mg_dtoa+0x414>)
 80239ae:	4620      	mov	r0, r4
 80239b0:	4629      	mov	r1, r5
 80239b2:	f7ec ff63 	bl	801087c <__aeabi_ddiv>
 80239b6:	4604      	mov	r4, r0
 80239b8:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80239ba:	eb07 0906 	add.w	r9, r7, r6
 80239be:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80239c2:	dc03      	bgt.n	80239cc <mg_dtoa+0x3bc>
 80239c4:	4546      	cmp	r6, r8
 80239c6:	dbd1      	blt.n	802396c <mg_dtoa+0x35c>
 80239c8:	9a07      	ldr	r2, [sp, #28]
 80239ca:	e000      	b.n	80239ce <mg_dtoa+0x3be>
 80239cc:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80239ce:	b152      	cbz	r2, 80239e6 <mg_dtoa+0x3d6>
 80239d0:	2e00      	cmp	r6, #0
 80239d2:	dd08      	ble.n	80239e6 <mg_dtoa+0x3d6>
 80239d4:	19bb      	adds	r3, r7, r6
 80239d6:	3347      	adds	r3, #71	@ 0x47
 80239d8:	446b      	add	r3, sp
 80239da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80239de:	2b30      	cmp	r3, #48	@ 0x30
 80239e0:	d101      	bne.n	80239e6 <mg_dtoa+0x3d6>
 80239e2:	3e01      	subs	r6, #1
 80239e4:	e7f3      	b.n	80239ce <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80239e6:	2e00      	cmp	r6, #0
 80239e8:	dd06      	ble.n	80239f8 <mg_dtoa+0x3e8>
 80239ea:	19bb      	adds	r3, r7, r6
 80239ec:	3347      	adds	r3, #71	@ 0x47
 80239ee:	446b      	add	r3, sp
 80239f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80239f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80239f6:	d013      	beq.n	8023a20 <mg_dtoa+0x410>
  n += s;
 80239f8:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80239fa:	2f27      	cmp	r7, #39	@ 0x27
 80239fc:	dd00      	ble.n	8023a00 <mg_dtoa+0x3f0>
 80239fe:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8023a00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023a04:	eb0d 0703 	add.w	r7, sp, r3
 8023a08:	2300      	movs	r3, #0
 8023a0a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8023a0e:	ab08      	add	r3, sp, #32
 8023a10:	4a05      	ldr	r2, [pc, #20]	@ (8023a28 <mg_dtoa+0x418>)
 8023a12:	9906      	ldr	r1, [sp, #24]
 8023a14:	9805      	ldr	r0, [sp, #20]
 8023a16:	f7ff fdeb 	bl	80235f0 <mg_snprintf>
}
 8023a1a:	b013      	add	sp, #76	@ 0x4c
 8023a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023a20:	3e01      	subs	r6, #1
 8023a22:	e7e9      	b.n	80239f8 <mg_dtoa+0x3e8>
 8023a24:	40240000 	.word	0x40240000
 8023a28:	0803afd8 	.word	0x0803afd8

08023a2c <mg_vxprintf>:
                   va_list *ap) {
 8023a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a30:	b093      	sub	sp, #76	@ 0x4c
 8023a32:	4681      	mov	r9, r0
 8023a34:	468a      	mov	sl, r1
 8023a36:	4693      	mov	fp, r2
 8023a38:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8023a3a:	2700      	movs	r7, #0
 8023a3c:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8023a3e:	e1bc      	b.n	8023dba <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023a40:	2320      	movs	r3, #32
 8023a42:	f88d 301f 	strb.w	r3, [sp, #31]
 8023a46:	1c66      	adds	r6, r4, #1
 8023a48:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8023a4c:	2d23      	cmp	r5, #35	@ 0x23
 8023a4e:	d00c      	beq.n	8023a6a <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023a50:	2300      	movs	r3, #0
 8023a52:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8023a54:	2d2d      	cmp	r5, #45	@ 0x2d
 8023a56:	d10e      	bne.n	8023a76 <mg_vxprintf+0x4a>
 8023a58:	3601      	adds	r6, #1
 8023a5a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a5e:	2301      	movs	r3, #1
 8023a60:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8023a62:	2d30      	cmp	r5, #48	@ 0x30
 8023a64:	d00a      	beq.n	8023a7c <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8023a66:	2400      	movs	r4, #0
 8023a68:	e017      	b.n	8023a9a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8023a6a:	1ca6      	adds	r6, r4, #2
 8023a6c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a70:	2301      	movs	r3, #1
 8023a72:	9302      	str	r3, [sp, #8]
 8023a74:	e7ee      	b.n	8023a54 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023a76:	2300      	movs	r3, #0
 8023a78:	9304      	str	r3, [sp, #16]
 8023a7a:	e7f2      	b.n	8023a62 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8023a7c:	2330      	movs	r3, #48	@ 0x30
 8023a7e:	f88d 301f 	strb.w	r3, [sp, #31]
 8023a82:	3601      	adds	r6, #1
 8023a84:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a88:	e7ed      	b.n	8023a66 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8023a8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8023a8e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8023a92:	3c30      	subs	r4, #48	@ 0x30
 8023a94:	3601      	adds	r6, #1
 8023a96:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a9a:	4628      	mov	r0, r5
 8023a9c:	f7fc f83b 	bl	801fb16 <is_digit>
 8023aa0:	4601      	mov	r1, r0
 8023aa2:	2800      	cmp	r0, #0
 8023aa4:	d1f1      	bne.n	8023a8a <mg_vxprintf+0x5e>
      if (c == '.') {
 8023aa6:	2d2e      	cmp	r5, #46	@ 0x2e
 8023aa8:	d002      	beq.n	8023ab0 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023aaa:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8023aae:	e026      	b.n	8023afe <mg_vxprintf+0xd2>
        c = fmt[++i];
 8023ab0:	1c73      	adds	r3, r6, #1
 8023ab2:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8023ab6:	2d2a      	cmp	r5, #42	@ 0x2a
 8023ab8:	d119      	bne.n	8023aee <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8023aba:	9803      	ldr	r0, [sp, #12]
 8023abc:	6803      	ldr	r3, [r0, #0]
 8023abe:	1d1a      	adds	r2, r3, #4
 8023ac0:	6002      	str	r2, [r0, #0]
 8023ac2:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8023ac6:	3602      	adds	r6, #2
 8023ac8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023acc:	e017      	b.n	8023afe <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8023ace:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8023ad2:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8023ad6:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8023ada:	3601      	adds	r6, #1
 8023adc:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023ae0:	4628      	mov	r0, r5
 8023ae2:	f7fc f818 	bl	801fb16 <is_digit>
 8023ae6:	2800      	cmp	r0, #0
 8023ae8:	d1f1      	bne.n	8023ace <mg_vxprintf+0xa2>
 8023aea:	9905      	ldr	r1, [sp, #20]
 8023aec:	e007      	b.n	8023afe <mg_vxprintf+0xd2>
          pr = 0;
 8023aee:	f04f 0800 	mov.w	r8, #0
 8023af2:	461e      	mov	r6, r3
 8023af4:	9005      	str	r0, [sp, #20]
 8023af6:	e7f3      	b.n	8023ae0 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023af8:	3601      	adds	r6, #1
 8023afa:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023afe:	2d68      	cmp	r5, #104	@ 0x68
 8023b00:	d0fa      	beq.n	8023af8 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8023b02:	2d6c      	cmp	r5, #108	@ 0x6c
 8023b04:	d05f      	beq.n	8023bc6 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023b06:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8023b08:	2d70      	cmp	r5, #112	@ 0x70
 8023b0a:	d069      	beq.n	8023be0 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023b0c:	2d64      	cmp	r5, #100	@ 0x64
 8023b0e:	d06a      	beq.n	8023be6 <mg_vxprintf+0x1ba>
 8023b10:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8023b14:	2b53      	cmp	r3, #83	@ 0x53
 8023b16:	f200 81bc 	bhi.w	8023e92 <mg_vxprintf+0x466>
 8023b1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023b1e:	01b5      	.short	0x01b5
 8023b20:	01ba01ba 	.word	0x01ba01ba
 8023b24:	01ba01ba 	.word	0x01ba01ba
 8023b28:	01ba01ba 	.word	0x01ba01ba
 8023b2c:	01ba01ba 	.word	0x01ba01ba
 8023b30:	01ba01ba 	.word	0x01ba01ba
 8023b34:	01ba01ba 	.word	0x01ba01ba
 8023b38:	01ba01ba 	.word	0x01ba01ba
 8023b3c:	01ba01ba 	.word	0x01ba01ba
 8023b40:	01ba01ba 	.word	0x01ba01ba
 8023b44:	01ba01ba 	.word	0x01ba01ba
 8023b48:	01ba01ba 	.word	0x01ba01ba
 8023b4c:	01ba01ba 	.word	0x01ba01ba
 8023b50:	01ba01ba 	.word	0x01ba01ba
 8023b54:	01ba01ba 	.word	0x01ba01ba
 8023b58:	01ba01ba 	.word	0x01ba01ba
 8023b5c:	01ba01ba 	.word	0x01ba01ba
 8023b60:	01ba01ba 	.word	0x01ba01ba
 8023b64:	01ba01ba 	.word	0x01ba01ba
 8023b68:	01ba01ba 	.word	0x01ba01ba
 8023b6c:	014101ba 	.word	0x014101ba
 8023b70:	01ba01ba 	.word	0x01ba01ba
 8023b74:	01ba01ba 	.word	0x01ba01ba
 8023b78:	01ba01ba 	.word	0x01ba01ba
 8023b7c:	01ba01ba 	.word	0x01ba01ba
 8023b80:	01ba01ba 	.word	0x01ba01ba
 8023b84:	01ba0065 	.word	0x01ba0065
 8023b88:	01ba01ba 	.word	0x01ba01ba
 8023b8c:	01ba01ba 	.word	0x01ba01ba
 8023b90:	01ba01ba 	.word	0x01ba01ba
 8023b94:	01ba01ba 	.word	0x01ba01ba
 8023b98:	016801ba 	.word	0x016801ba
 8023b9c:	01ba01ba 	.word	0x01ba01ba
 8023ba0:	00650065 	.word	0x00650065
 8023ba4:	01ba01ba 	.word	0x01ba01ba
 8023ba8:	01ba01ba 	.word	0x01ba01ba
 8023bac:	015a01ba 	.word	0x015a01ba
 8023bb0:	01ba01ba 	.word	0x01ba01ba
 8023bb4:	01ba0065 	.word	0x01ba0065
 8023bb8:	017101ba 	.word	0x017101ba
 8023bbc:	006501ba 	.word	0x006501ba
 8023bc0:	01ba01ba 	.word	0x01ba01ba
 8023bc4:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8023bc6:	1c73      	adds	r3, r6, #1
 8023bc8:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8023bcc:	2d6c      	cmp	r5, #108	@ 0x6c
 8023bce:	d002      	beq.n	8023bd6 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8023bd0:	461e      	mov	r6, r3
 8023bd2:	2201      	movs	r2, #1
 8023bd4:	e798      	b.n	8023b08 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8023bd6:	3602      	adds	r6, #2
 8023bd8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023bdc:	2202      	movs	r2, #2
 8023bde:	e793      	b.n	8023b08 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8023be0:	2201      	movs	r2, #1
 8023be2:	9202      	str	r2, [sp, #8]
 8023be4:	e792      	b.n	8023b0c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023be6:	2101      	movs	r1, #1
 8023be8:	2d58      	cmp	r5, #88	@ 0x58
 8023bea:	d027      	beq.n	8023c3c <mg_vxprintf+0x210>
 8023bec:	2d70      	cmp	r5, #112	@ 0x70
 8023bee:	d021      	beq.n	8023c34 <mg_vxprintf+0x208>
 8023bf0:	2300      	movs	r3, #0
 8023bf2:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8023bf4:	9b02      	ldr	r3, [sp, #8]
 8023bf6:	b10b      	cbz	r3, 8023bfc <mg_vxprintf+0x1d0>
 8023bf8:	2302      	movs	r3, #2
 8023bfa:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023bfc:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023c00:	b2db      	uxtb	r3, r3
 8023c02:	2b01      	cmp	r3, #1
 8023c04:	d91c      	bls.n	8023c40 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8023c06:	2a02      	cmp	r2, #2
 8023c08:	d037      	beq.n	8023c7a <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023c0a:	2a01      	cmp	r2, #1
 8023c0c:	d046      	beq.n	8023c9c <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023c0e:	9b03      	ldr	r3, [sp, #12]
 8023c10:	f8d3 c000 	ldr.w	ip, [r3]
 8023c14:	f10c 0204 	add.w	r2, ip, #4
 8023c18:	601a      	str	r2, [r3, #0]
 8023c1a:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023c1e:	2d64      	cmp	r5, #100	@ 0x64
 8023c20:	d052      	beq.n	8023cc8 <mg_vxprintf+0x29c>
 8023c22:	461a      	mov	r2, r3
 8023c24:	2300      	movs	r3, #0
 8023c26:	9001      	str	r0, [sp, #4]
 8023c28:	9100      	str	r1, [sp, #0]
 8023c2a:	a808      	add	r0, sp, #32
 8023c2c:	f7fb ffd6 	bl	801fbdc <mg_lld>
 8023c30:	4605      	mov	r5, r0
 8023c32:	e01c      	b.n	8023c6e <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023c34:	2301      	movs	r3, #1
 8023c36:	e7dc      	b.n	8023bf2 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023c38:	2301      	movs	r3, #1
 8023c3a:	e7da      	b.n	8023bf2 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023c3c:	2301      	movs	r3, #1
 8023c3e:	e7d8      	b.n	8023bf2 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8023c40:	9903      	ldr	r1, [sp, #12]
 8023c42:	680b      	ldr	r3, [r1, #0]
 8023c44:	3307      	adds	r3, #7
 8023c46:	f023 0307 	bic.w	r3, r3, #7
 8023c4a:	f103 0208 	add.w	r2, r3, #8
 8023c4e:	600a      	str	r2, [r1, #0]
 8023c50:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8023c54:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023c58:	d00c      	beq.n	8023c74 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8023c5a:	2d67      	cmp	r5, #103	@ 0x67
 8023c5c:	bf14      	ite	ne
 8023c5e:	2300      	movne	r3, #0
 8023c60:	2301      	moveq	r3, #1
 8023c62:	4642      	mov	r2, r8
 8023c64:	2128      	movs	r1, #40	@ 0x28
 8023c66:	a808      	add	r0, sp, #32
 8023c68:	f7ff fcd2 	bl	8023610 <mg_dtoa>
 8023c6c:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8023c6e:	2300      	movs	r3, #0
 8023c70:	9a02      	ldr	r2, [sp, #8]
 8023c72:	e02e      	b.n	8023cd2 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8023c74:	f04f 0806 	mov.w	r8, #6
 8023c78:	e7ef      	b.n	8023c5a <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023c7a:	9d03      	ldr	r5, [sp, #12]
 8023c7c:	682b      	ldr	r3, [r5, #0]
 8023c7e:	3307      	adds	r3, #7
 8023c80:	f023 0307 	bic.w	r3, r3, #7
 8023c84:	f103 0208 	add.w	r2, r3, #8
 8023c88:	602a      	str	r2, [r5, #0]
 8023c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8023c8e:	9001      	str	r0, [sp, #4]
 8023c90:	9100      	str	r1, [sp, #0]
 8023c92:	a808      	add	r0, sp, #32
 8023c94:	f7fb ffa2 	bl	801fbdc <mg_lld>
 8023c98:	4605      	mov	r5, r0
 8023c9a:	e7e8      	b.n	8023c6e <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8023c9c:	9b03      	ldr	r3, [sp, #12]
 8023c9e:	f8d3 c000 	ldr.w	ip, [r3]
 8023ca2:	f10c 0204 	add.w	r2, ip, #4
 8023ca6:	601a      	str	r2, [r3, #0]
 8023ca8:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8023cac:	2d64      	cmp	r5, #100	@ 0x64
 8023cae:	d008      	beq.n	8023cc2 <mg_vxprintf+0x296>
 8023cb0:	461a      	mov	r2, r3
 8023cb2:	2300      	movs	r3, #0
 8023cb4:	9001      	str	r0, [sp, #4]
 8023cb6:	9100      	str	r1, [sp, #0]
 8023cb8:	a808      	add	r0, sp, #32
 8023cba:	f7fb ff8f 	bl	801fbdc <mg_lld>
 8023cbe:	4605      	mov	r5, r0
 8023cc0:	e7d5      	b.n	8023c6e <mg_vxprintf+0x242>
 8023cc2:	461a      	mov	r2, r3
 8023cc4:	17db      	asrs	r3, r3, #31
 8023cc6:	e7f5      	b.n	8023cb4 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023cc8:	461a      	mov	r2, r3
 8023cca:	17db      	asrs	r3, r3, #31
 8023ccc:	e7ab      	b.n	8023c26 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8023cce:	3c01      	subs	r4, #1
 8023cd0:	3301      	adds	r3, #1
 8023cd2:	4293      	cmp	r3, r2
 8023cd4:	d225      	bcs.n	8023d22 <mg_vxprintf+0x2f6>
 8023cd6:	2c00      	cmp	r4, #0
 8023cd8:	d1f9      	bne.n	8023cce <mg_vxprintf+0x2a2>
 8023cda:	46a0      	mov	r8, r4
 8023cdc:	9605      	str	r6, [sp, #20]
 8023cde:	9e04      	ldr	r6, [sp, #16]
 8023ce0:	e009      	b.n	8023cf6 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023ce2:	2301      	movs	r3, #1
 8023ce4:	f10d 021f 	add.w	r2, sp, #31
 8023ce8:	4651      	mov	r1, sl
 8023cea:	4648      	mov	r0, r9
 8023cec:	f7fc f80c 	bl	801fd08 <scpy>
 8023cf0:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8023cf2:	f108 0801 	add.w	r8, r8, #1
 8023cf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023cfa:	2b20      	cmp	r3, #32
 8023cfc:	d106      	bne.n	8023d0c <mg_vxprintf+0x2e0>
 8023cfe:	b92e      	cbnz	r6, 8023d0c <mg_vxprintf+0x2e0>
 8023d00:	42a5      	cmp	r5, r4
 8023d02:	d203      	bcs.n	8023d0c <mg_vxprintf+0x2e0>
 8023d04:	eb08 0305 	add.w	r3, r8, r5
 8023d08:	42a3      	cmp	r3, r4
 8023d0a:	d3ea      	bcc.n	8023ce2 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023d0c:	9e05      	ldr	r6, [sp, #20]
 8023d0e:	9b02      	ldr	r3, [sp, #8]
 8023d10:	4a6b      	ldr	r2, [pc, #428]	@ (8023ec0 <mg_vxprintf+0x494>)
 8023d12:	4651      	mov	r1, sl
 8023d14:	4648      	mov	r0, r9
 8023d16:	f7fb fff7 	bl	801fd08 <scpy>
 8023d1a:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023d1e:	2700      	movs	r7, #0
 8023d20:	e00d      	b.n	8023d3e <mg_vxprintf+0x312>
 8023d22:	f04f 0800 	mov.w	r8, #0
 8023d26:	9605      	str	r6, [sp, #20]
 8023d28:	9e04      	ldr	r6, [sp, #16]
 8023d2a:	e7e4      	b.n	8023cf6 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023d2c:	2301      	movs	r3, #1
 8023d2e:	f10d 021f 	add.w	r2, sp, #31
 8023d32:	4651      	mov	r1, sl
 8023d34:	4648      	mov	r0, r9
 8023d36:	f7fb ffe7 	bl	801fd08 <scpy>
 8023d3a:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023d3c:	3701      	adds	r7, #1
 8023d3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023d42:	2b30      	cmp	r3, #48	@ 0x30
 8023d44:	d104      	bne.n	8023d50 <mg_vxprintf+0x324>
 8023d46:	42a5      	cmp	r5, r4
 8023d48:	d202      	bcs.n	8023d50 <mg_vxprintf+0x324>
 8023d4a:	197b      	adds	r3, r7, r5
 8023d4c:	42a3      	cmp	r3, r4
 8023d4e:	d3ed      	bcc.n	8023d2c <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8023d50:	462b      	mov	r3, r5
 8023d52:	aa08      	add	r2, sp, #32
 8023d54:	4651      	mov	r1, sl
 8023d56:	4648      	mov	r0, r9
 8023d58:	f7fb ffd6 	bl	801fd08 <scpy>
 8023d5c:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023d60:	f04f 0800 	mov.w	r8, #0
 8023d64:	9602      	str	r6, [sp, #8]
 8023d66:	9e04      	ldr	r6, [sp, #16]
 8023d68:	e009      	b.n	8023d7e <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8023d6a:	2301      	movs	r3, #1
 8023d6c:	f10d 021f 	add.w	r2, sp, #31
 8023d70:	4651      	mov	r1, sl
 8023d72:	4648      	mov	r0, r9
 8023d74:	f7fb ffc8 	bl	801fd08 <scpy>
 8023d78:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023d7a:	f108 0801 	add.w	r8, r8, #1
 8023d7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023d82:	2b20      	cmp	r3, #32
 8023d84:	f040 808d 	bne.w	8023ea2 <mg_vxprintf+0x476>
 8023d88:	2e00      	cmp	r6, #0
 8023d8a:	f000 808c 	beq.w	8023ea6 <mg_vxprintf+0x47a>
 8023d8e:	42a5      	cmp	r5, r4
 8023d90:	f080 808b 	bcs.w	8023eaa <mg_vxprintf+0x47e>
 8023d94:	eb08 0305 	add.w	r3, r8, r5
 8023d98:	42a3      	cmp	r3, r4
 8023d9a:	d3e6      	bcc.n	8023d6a <mg_vxprintf+0x33e>
 8023d9c:	9e02      	ldr	r6, [sp, #8]
 8023d9e:	e00b      	b.n	8023db8 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023da0:	9903      	ldr	r1, [sp, #12]
 8023da2:	680b      	ldr	r3, [r1, #0]
 8023da4:	1d1a      	adds	r2, r3, #4
 8023da6:	600a      	str	r2, [r1, #0]
 8023da8:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8023daa:	9a03      	ldr	r2, [sp, #12]
 8023dac:	4651      	mov	r1, sl
 8023dae:	4648      	mov	r0, r9
 8023db0:	47a0      	blx	r4
 8023db2:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8023db4:	2d6d      	cmp	r5, #109	@ 0x6d
 8023db6:	d015      	beq.n	8023de4 <mg_vxprintf+0x3b8>
      i++;
 8023db8:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8023dba:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8023dbe:	2800      	cmp	r0, #0
 8023dc0:	d079      	beq.n	8023eb6 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8023dc2:	2825      	cmp	r0, #37	@ 0x25
 8023dc4:	f43f ae3c 	beq.w	8023a40 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8023dc8:	4651      	mov	r1, sl
 8023dca:	47c8      	blx	r9
 8023dcc:	3701      	adds	r7, #1
 8023dce:	3401      	adds	r4, #1
 8023dd0:	e7f3      	b.n	8023dba <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023dd2:	9903      	ldr	r1, [sp, #12]
 8023dd4:	680b      	ldr	r3, [r1, #0]
 8023dd6:	1d1a      	adds	r2, r3, #4
 8023dd8:	600a      	str	r2, [r1, #0]
 8023dda:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8023ddc:	4651      	mov	r1, sl
 8023dde:	2022      	movs	r0, #34	@ 0x22
 8023de0:	47c8      	blx	r9
 8023de2:	e7e2      	b.n	8023daa <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8023de4:	3702      	adds	r7, #2
 8023de6:	4651      	mov	r1, sl
 8023de8:	2022      	movs	r0, #34	@ 0x22
 8023dea:	47c8      	blx	r9
 8023dec:	e7e4      	b.n	8023db8 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8023dee:	9903      	ldr	r1, [sp, #12]
 8023df0:	680b      	ldr	r3, [r1, #0]
 8023df2:	1d1a      	adds	r2, r3, #4
 8023df4:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8023df6:	4651      	mov	r1, sl
 8023df8:	7818      	ldrb	r0, [r3, #0]
 8023dfa:	47c8      	blx	r9
        n++;
 8023dfc:	3701      	adds	r7, #1
 8023dfe:	e7db      	b.n	8023db8 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8023e00:	9903      	ldr	r1, [sp, #12]
 8023e02:	680b      	ldr	r3, [r1, #0]
 8023e04:	1d1a      	adds	r2, r3, #4
 8023e06:	600a      	str	r2, [r1, #0]
 8023e08:	681b      	ldr	r3, [r3, #0]
 8023e0a:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023e0c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023e10:	d003      	beq.n	8023e1a <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023e12:	2500      	movs	r5, #0
 8023e14:	9605      	str	r6, [sp, #20]
 8023e16:	9e04      	ldr	r6, [sp, #16]
 8023e18:	e011      	b.n	8023e3e <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023e1a:	4618      	mov	r0, r3
 8023e1c:	b11b      	cbz	r3, 8023e26 <mg_vxprintf+0x3fa>
 8023e1e:	f7ec fa3f 	bl	80102a0 <strlen>
 8023e22:	4680      	mov	r8, r0
 8023e24:	e7f5      	b.n	8023e12 <mg_vxprintf+0x3e6>
 8023e26:	f04f 0800 	mov.w	r8, #0
 8023e2a:	e7f2      	b.n	8023e12 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8023e2c:	2301      	movs	r3, #1
 8023e2e:	f10d 021f 	add.w	r2, sp, #31
 8023e32:	4651      	mov	r1, sl
 8023e34:	4648      	mov	r0, r9
 8023e36:	f7fb ff67 	bl	801fd08 <scpy>
 8023e3a:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023e3c:	3501      	adds	r5, #1
 8023e3e:	b92e      	cbnz	r6, 8023e4c <mg_vxprintf+0x420>
 8023e40:	4544      	cmp	r4, r8
 8023e42:	d903      	bls.n	8023e4c <mg_vxprintf+0x420>
 8023e44:	eb05 0308 	add.w	r3, r5, r8
 8023e48:	42a3      	cmp	r3, r4
 8023e4a:	d3ef      	bcc.n	8023e2c <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8023e4c:	9e05      	ldr	r6, [sp, #20]
 8023e4e:	4643      	mov	r3, r8
 8023e50:	9a02      	ldr	r2, [sp, #8]
 8023e52:	4651      	mov	r1, sl
 8023e54:	4648      	mov	r0, r9
 8023e56:	f7fb ff57 	bl	801fd08 <scpy>
 8023e5a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023e5c:	2500      	movs	r5, #0
 8023e5e:	9602      	str	r6, [sp, #8]
 8023e60:	9e04      	ldr	r6, [sp, #16]
 8023e62:	e008      	b.n	8023e76 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8023e64:	2301      	movs	r3, #1
 8023e66:	f10d 021f 	add.w	r2, sp, #31
 8023e6a:	4651      	mov	r1, sl
 8023e6c:	4648      	mov	r0, r9
 8023e6e:	f7fb ff4b 	bl	801fd08 <scpy>
 8023e72:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023e74:	3501      	adds	r5, #1
 8023e76:	b1d6      	cbz	r6, 8023eae <mg_vxprintf+0x482>
 8023e78:	4544      	cmp	r4, r8
 8023e7a:	d91a      	bls.n	8023eb2 <mg_vxprintf+0x486>
 8023e7c:	eb05 0308 	add.w	r3, r5, r8
 8023e80:	42a3      	cmp	r3, r4
 8023e82:	d3ef      	bcc.n	8023e64 <mg_vxprintf+0x438>
 8023e84:	9e02      	ldr	r6, [sp, #8]
 8023e86:	e797      	b.n	8023db8 <mg_vxprintf+0x38c>
        out('%', param);
 8023e88:	4651      	mov	r1, sl
 8023e8a:	2025      	movs	r0, #37	@ 0x25
 8023e8c:	47c8      	blx	r9
        n++;
 8023e8e:	3701      	adds	r7, #1
 8023e90:	e792      	b.n	8023db8 <mg_vxprintf+0x38c>
        out('%', param);
 8023e92:	4651      	mov	r1, sl
 8023e94:	2025      	movs	r0, #37	@ 0x25
 8023e96:	47c8      	blx	r9
        out(c, param);
 8023e98:	4651      	mov	r1, sl
 8023e9a:	4628      	mov	r0, r5
 8023e9c:	47c8      	blx	r9
        n += 2;
 8023e9e:	3702      	adds	r7, #2
 8023ea0:	e78a      	b.n	8023db8 <mg_vxprintf+0x38c>
 8023ea2:	9e02      	ldr	r6, [sp, #8]
 8023ea4:	e788      	b.n	8023db8 <mg_vxprintf+0x38c>
 8023ea6:	9e02      	ldr	r6, [sp, #8]
 8023ea8:	e786      	b.n	8023db8 <mg_vxprintf+0x38c>
 8023eaa:	9e02      	ldr	r6, [sp, #8]
 8023eac:	e784      	b.n	8023db8 <mg_vxprintf+0x38c>
 8023eae:	9e02      	ldr	r6, [sp, #8]
 8023eb0:	e782      	b.n	8023db8 <mg_vxprintf+0x38c>
 8023eb2:	9e02      	ldr	r6, [sp, #8]
 8023eb4:	e780      	b.n	8023db8 <mg_vxprintf+0x38c>
}
 8023eb6:	4638      	mov	r0, r7
 8023eb8:	b013      	add	sp, #76	@ 0x4c
 8023eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ebe:	bf00      	nop
 8023ec0:	0803a418 	.word	0x0803a418

08023ec4 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8023ec4:	b40c      	push	{r2, r3}
 8023ec6:	b500      	push	{lr}
 8023ec8:	b083      	sub	sp, #12
 8023eca:	ab04      	add	r3, sp, #16
 8023ecc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023ed0:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8023ed2:	ab01      	add	r3, sp, #4
 8023ed4:	f7ff fdaa 	bl	8023a2c <mg_vxprintf>
}
 8023ed8:	b003      	add	sp, #12
 8023eda:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ede:	b002      	add	sp, #8
 8023ee0:	4770      	bx	lr
	...

08023ee4 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8023ee4:	b530      	push	{r4, r5, lr}
 8023ee6:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8023ee8:	7853      	ldrb	r3, [r2, #1]
 8023eea:	7894      	ldrb	r4, [r2, #2]
 8023eec:	78d5      	ldrb	r5, [r2, #3]
 8023eee:	9502      	str	r5, [sp, #8]
 8023ef0:	9401      	str	r4, [sp, #4]
 8023ef2:	9300      	str	r3, [sp, #0]
 8023ef4:	7813      	ldrb	r3, [r2, #0]
 8023ef6:	4a02      	ldr	r2, [pc, #8]	@ (8023f00 <print_ip4+0x1c>)
 8023ef8:	f7ff ffe4 	bl	8023ec4 <mg_xprintf>
}
 8023efc:	b005      	add	sp, #20
 8023efe:	bd30      	pop	{r4, r5, pc}
 8023f00:	0803a41c 	.word	0x0803a41c

08023f04 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8023f04:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023f06:	6813      	ldr	r3, [r2, #0]
 8023f08:	1d1c      	adds	r4, r3, #4
 8023f0a:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8023f0c:	681a      	ldr	r2, [r3, #0]
 8023f0e:	f7ff ffe9 	bl	8023ee4 <print_ip4>
}
 8023f12:	bd10      	pop	{r4, pc}

08023f14 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8023f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f16:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023f18:	6813      	ldr	r3, [r2, #0]
 8023f1a:	1d1c      	adds	r4, r3, #4
 8023f1c:	6014      	str	r4, [r2, #0]
 8023f1e:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023f20:	7813      	ldrb	r3, [r2, #0]
 8023f22:	7854      	ldrb	r4, [r2, #1]
 8023f24:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8023f26:	78d6      	ldrb	r6, [r2, #3]
 8023f28:	7917      	ldrb	r7, [r2, #4]
 8023f2a:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023f2c:	9204      	str	r2, [sp, #16]
 8023f2e:	9703      	str	r7, [sp, #12]
 8023f30:	9602      	str	r6, [sp, #8]
 8023f32:	9501      	str	r5, [sp, #4]
 8023f34:	9400      	str	r4, [sp, #0]
 8023f36:	4a02      	ldr	r2, [pc, #8]	@ (8023f40 <mg_print_mac+0x2c>)
 8023f38:	f7ff ffc4 	bl	8023ec4 <mg_xprintf>
}
 8023f3c:	b007      	add	sp, #28
 8023f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f40:	0803a428 	.word	0x0803a428

08023f44 <mg_log>:
void mg_log(const char *fmt, ...) {
 8023f44:	b40f      	push	{r0, r1, r2, r3}
 8023f46:	b500      	push	{lr}
 8023f48:	b083      	sub	sp, #12
 8023f4a:	ab04      	add	r3, sp, #16
 8023f4c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023f50:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8023f52:	ab01      	add	r3, sp, #4
 8023f54:	4907      	ldr	r1, [pc, #28]	@ (8023f74 <mg_log+0x30>)
 8023f56:	6809      	ldr	r1, [r1, #0]
 8023f58:	4807      	ldr	r0, [pc, #28]	@ (8023f78 <mg_log+0x34>)
 8023f5a:	6800      	ldr	r0, [r0, #0]
 8023f5c:	f7ff fd66 	bl	8023a2c <mg_vxprintf>
  logs("\r\n", 2);
 8023f60:	2102      	movs	r1, #2
 8023f62:	4806      	ldr	r0, [pc, #24]	@ (8023f7c <mg_log+0x38>)
 8023f64:	f7fc fcaa 	bl	80208bc <logs>
}
 8023f68:	b003      	add	sp, #12
 8023f6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f6e:	b004      	add	sp, #16
 8023f70:	4770      	bx	lr
 8023f72:	bf00      	nop
 8023f74:	20019ee0 	.word	0x20019ee0
 8023f78:	20000128 	.word	0x20000128
 8023f7c:	0803ae3c 	.word	0x0803ae3c

08023f80 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023f80:	b538      	push	{r3, r4, r5, lr}
 8023f82:	4604      	mov	r4, r0
 8023f84:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8023f86:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8023f88:	460a      	mov	r2, r1
 8023f8a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8023f8e:	4803      	ldr	r0, [pc, #12]	@ (8023f9c <mg_vprintf+0x1c>)
 8023f90:	f7ff fd4c 	bl	8023a2c <mg_vxprintf>
  return c->send.len - old;
 8023f94:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8023f96:	1b40      	subs	r0, r0, r5
 8023f98:	bd38      	pop	{r3, r4, r5, pc}
 8023f9a:	bf00      	nop
 8023f9c:	080270b7 	.word	0x080270b7

08023fa0 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8023fa0:	b40e      	push	{r1, r2, r3}
 8023fa2:	b500      	push	{lr}
 8023fa4:	b082      	sub	sp, #8
 8023fa6:	ab03      	add	r3, sp, #12
 8023fa8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8023fac:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8023fae:	aa01      	add	r2, sp, #4
 8023fb0:	f7ff ffe6 	bl	8023f80 <mg_vprintf>
}
 8023fb4:	b002      	add	sp, #8
 8023fb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8023fba:	b003      	add	sp, #12
 8023fbc:	4770      	bx	lr
	...

08023fc0 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8023fc0:	b530      	push	{r4, r5, lr}
 8023fc2:	b085      	sub	sp, #20
 8023fc4:	4605      	mov	r5, r0
 8023fc6:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8023fc8:	9000      	str	r0, [sp, #0]
 8023fca:	9101      	str	r1, [sp, #4]
 8023fcc:	2100      	movs	r1, #0
 8023fce:	9102      	str	r1, [sp, #8]
 8023fd0:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8023fd2:	4669      	mov	r1, sp
 8023fd4:	4804      	ldr	r0, [pc, #16]	@ (8023fe8 <mg_vsnprintf+0x28>)
 8023fd6:	f7ff fd29 	bl	8023a2c <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8023fda:	4284      	cmp	r4, r0
 8023fdc:	d901      	bls.n	8023fe2 <mg_vsnprintf+0x22>
 8023fde:	2300      	movs	r3, #0
 8023fe0:	542b      	strb	r3, [r5, r0]
}
 8023fe2:	b005      	add	sp, #20
 8023fe4:	bd30      	pop	{r4, r5, pc}
 8023fe6:	bf00      	nop
 8023fe8:	080270c1 	.word	0x080270c1

08023fec <mg_http_reply>:
                   const char *fmt, ...) {
 8023fec:	b408      	push	{r3}
 8023fee:	b570      	push	{r4, r5, r6, lr}
 8023ff0:	b085      	sub	sp, #20
 8023ff2:	4604      	mov	r4, r0
 8023ff4:	460e      	mov	r6, r1
 8023ff6:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023ff8:	4608      	mov	r0, r1
 8023ffa:	f7fb ffd1 	bl	801ffa0 <mg_http_status_code_str>
 8023ffe:	4603      	mov	r3, r0
 8024000:	b1ed      	cbz	r5, 802403e <mg_http_reply+0x52>
 8024002:	9500      	str	r5, [sp, #0]
 8024004:	4632      	mov	r2, r6
 8024006:	4916      	ldr	r1, [pc, #88]	@ (8024060 <mg_http_reply+0x74>)
 8024008:	4620      	mov	r0, r4
 802400a:	f7ff ffc9 	bl	8023fa0 <mg_printf>
  len = c->send.len;
 802400e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8024010:	ab0a      	add	r3, sp, #40	@ 0x28
 8024012:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8024014:	ab03      	add	r3, sp, #12
 8024016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024018:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 802401c:	4811      	ldr	r0, [pc, #68]	@ (8024064 <mg_http_reply+0x78>)
 802401e:	f7ff fd05 	bl	8023a2c <mg_vxprintf>
  if (c->send.len > 16) {
 8024022:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024024:	2b10      	cmp	r3, #16
 8024026:	d80c      	bhi.n	8024042 <mg_http_reply+0x56>
  c->is_resp = 0;
 8024028:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802402c:	f36f 13c7 	bfc	r3, #7, #1
 8024030:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8024034:	b005      	add	sp, #20
 8024036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802403a:	b001      	add	sp, #4
 802403c:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 802403e:	4d0a      	ldr	r5, [pc, #40]	@ (8024068 <mg_http_reply+0x7c>)
 8024040:	e7df      	b.n	8024002 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8024042:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8024044:	f1a5 000f 	sub.w	r0, r5, #15
 8024048:	1b5b      	subs	r3, r3, r5
 802404a:	4a08      	ldr	r2, [pc, #32]	@ (802406c <mg_http_reply+0x80>)
 802404c:	210b      	movs	r1, #11
 802404e:	4430      	add	r0, r6
 8024050:	f7ff face 	bl	80235f0 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8024054:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8024056:	4405      	add	r5, r0
 8024058:	3d0f      	subs	r5, #15
 802405a:	2220      	movs	r2, #32
 802405c:	555a      	strb	r2, [r3, r5]
 802405e:	e7e3      	b.n	8024028 <mg_http_reply+0x3c>
 8024060:	0803a448 	.word	0x0803a448
 8024064:	080270b7 	.word	0x080270b7
 8024068:	08036c80 	.word	0x08036c80
 802406c:	0803a47c 	.word	0x0803a47c

08024070 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8024070:	b510      	push	{r4, lr}
 8024072:	b084      	sub	sp, #16
 8024074:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8024076:	9202      	str	r2, [sp, #8]
 8024078:	2300      	movs	r3, #0
 802407a:	9303      	str	r3, [sp, #12]
 802407c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024080:	e9cd 2300 	strd	r2, r3, [sp]
 8024084:	4a02      	ldr	r2, [pc, #8]	@ (8024090 <mg_http_etag+0x20>)
 8024086:	f7ff fab3 	bl	80235f0 <mg_snprintf>
}
 802408a:	4620      	mov	r0, r4
 802408c:	b004      	add	sp, #16
 802408e:	bd10      	pop	{r4, pc}
 8024090:	0803a484 	.word	0x0803a484

08024094 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8024094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024098:	b083      	sub	sp, #12
 802409a:	4607      	mov	r7, r0
 802409c:	4689      	mov	r9, r1
 802409e:	4692      	mov	sl, r2
 80240a0:	4698      	mov	r8, r3
  size_t i, n = 0;
 80240a2:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 80240a4:	462c      	mov	r4, r5
 80240a6:	e00c      	b.n	80240c2 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80240a8:	f8cd b004 	str.w	fp, [sp, #4]
 80240ac:	2301      	movs	r3, #1
 80240ae:	9300      	str	r3, [sp, #0]
 80240b0:	4b16      	ldr	r3, [pc, #88]	@ (802410c <mg_url_encode+0x78>)
 80240b2:	4a17      	ldr	r2, [pc, #92]	@ (8024110 <mg_url_encode+0x7c>)
 80240b4:	2104      	movs	r1, #4
 80240b6:	eb0a 0005 	add.w	r0, sl, r5
 80240ba:	f7ff fa99 	bl	80235f0 <mg_snprintf>
      n += 3;
 80240be:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 80240c0:	3401      	adds	r4, #1
 80240c2:	454c      	cmp	r4, r9
 80240c4:	d20e      	bcs.n	80240e4 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 80240c6:	eb07 0b04 	add.w	fp, r7, r4
 80240ca:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 80240cc:	1d2b      	adds	r3, r5, #4
 80240ce:	4543      	cmp	r3, r8
 80240d0:	d216      	bcs.n	8024100 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 80240d2:	4630      	mov	r0, r6
 80240d4:	f7fc fa60 	bl	8020598 <mg_is_url_safe>
 80240d8:	2800      	cmp	r0, #0
 80240da:	d0e5      	beq.n	80240a8 <mg_url_encode+0x14>
      buf[n++] = s[i];
 80240dc:	f80a 6005 	strb.w	r6, [sl, r5]
 80240e0:	3501      	adds	r5, #1
 80240e2:	e7ed      	b.n	80240c0 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80240e4:	f1b8 0f00 	cmp.w	r8, #0
 80240e8:	d00b      	beq.n	8024102 <mg_url_encode+0x6e>
 80240ea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80240ee:	45a8      	cmp	r8, r5
 80240f0:	d902      	bls.n	80240f8 <mg_url_encode+0x64>
 80240f2:	2300      	movs	r3, #0
 80240f4:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80240f8:	2300      	movs	r3, #0
 80240fa:	f80a 3008 	strb.w	r3, [sl, r8]
 80240fe:	e000      	b.n	8024102 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8024100:	2500      	movs	r5, #0
}
 8024102:	4628      	mov	r0, r5
 8024104:	b003      	add	sp, #12
 8024106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802410a:	bf00      	nop
 802410c:	080212f1 	.word	0x080212f1
 8024110:	0803a490 	.word	0x0803a490

08024114 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8024114:	b510      	push	{r4, lr}
 8024116:	b084      	sub	sp, #16
 8024118:	4602      	mov	r2, r0
 802411a:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 802411c:	2400      	movs	r4, #0
 802411e:	9400      	str	r4, [sp, #0]
 8024120:	9401      	str	r4, [sp, #4]
 8024122:	9402      	str	r4, [sp, #8]
 8024124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024128:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 802412a:	4669      	mov	r1, sp
 802412c:	4802      	ldr	r0, [pc, #8]	@ (8024138 <mg_vmprintf+0x24>)
 802412e:	f7ff fc7d 	bl	8023a2c <mg_vxprintf>
}
 8024132:	9800      	ldr	r0, [sp, #0]
 8024134:	b004      	add	sp, #16
 8024136:	bd10      	pop	{r4, pc}
 8024138:	080270b7 	.word	0x080270b7

0802413c <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 802413c:	b40f      	push	{r0, r1, r2, r3}
 802413e:	b500      	push	{lr}
 8024140:	b083      	sub	sp, #12
 8024142:	ab04      	add	r3, sp, #16
 8024144:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8024148:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 802414a:	a901      	add	r1, sp, #4
 802414c:	f7ff ffe2 	bl	8024114 <mg_vmprintf>
}
 8024150:	b003      	add	sp, #12
 8024152:	f85d eb04 	ldr.w	lr, [sp], #4
 8024156:	b004      	add	sp, #16
 8024158:	4770      	bx	lr

0802415a <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 802415a:	b538      	push	{r3, r4, r5, lr}
 802415c:	4604      	mov	r4, r0
 802415e:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8024160:	6882      	ldr	r2, [r0, #8]
 8024162:	68c3      	ldr	r3, [r0, #12]
 8024164:	429a      	cmp	r2, r3
 8024166:	d107      	bne.n	8024178 <mg_queue_next+0x1e>
  size_t len = 0;
 8024168:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 802416a:	b125      	cbz	r5, 8024176 <mg_queue_next+0x1c>
 802416c:	6823      	ldr	r3, [r4, #0]
 802416e:	68a2      	ldr	r2, [r4, #8]
 8024170:	3204      	adds	r2, #4
 8024172:	4413      	add	r3, r2
 8024174:	602b      	str	r3, [r5, #0]
}
 8024176:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8024178:	f7fe fb69 	bl	802284e <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 802417c:	2800      	cmp	r0, #0
 802417e:	d1f4      	bne.n	802416a <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024180:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024182:	68e2      	ldr	r2, [r4, #12]
 8024184:	68a3      	ldr	r3, [r4, #8]
 8024186:	429a      	cmp	r2, r3
 8024188:	d9ef      	bls.n	802416a <mg_queue_next+0x10>
 802418a:	4620      	mov	r0, r4
 802418c:	f7fe fb5f 	bl	802284e <mg_queue_read_len>
 8024190:	e7eb      	b.n	802416a <mg_queue_next+0x10>

08024192 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8024192:	6883      	ldr	r3, [r0, #8]
 8024194:	440b      	add	r3, r1
 8024196:	3304      	adds	r3, #4
 8024198:	6083      	str	r3, [r0, #8]
}
 802419a:	4770      	bx	lr

0802419c <mg_sha1_init>:
  context->state[0] = 0x67452301;
 802419c:	4b0a      	ldr	r3, [pc, #40]	@ (80241c8 <mg_sha1_init+0x2c>)
 802419e:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 80241a0:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80241a4:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 80241a6:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80241aa:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80241ae:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80241b2:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 80241b4:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80241b8:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 80241ba:	4b04      	ldr	r3, [pc, #16]	@ (80241cc <mg_sha1_init+0x30>)
 80241bc:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 80241be:	2300      	movs	r3, #0
 80241c0:	6183      	str	r3, [r0, #24]
 80241c2:	6143      	str	r3, [r0, #20]
}
 80241c4:	4770      	bx	lr
 80241c6:	bf00      	nop
 80241c8:	67452301 	.word	0x67452301
 80241cc:	c3d2e1f0 	.word	0xc3d2e1f0

080241d0 <mg_sha1_update>:
                    size_t len) {
 80241d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241d2:	4604      	mov	r4, r0
 80241d4:	460f      	mov	r7, r1
 80241d6:	4616      	mov	r6, r2
  j = context->count[0];
 80241d8:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 80241da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80241de:	6142      	str	r2, [r0, #20]
 80241e0:	429a      	cmp	r2, r3
 80241e2:	d202      	bcs.n	80241ea <mg_sha1_update+0x1a>
 80241e4:	6982      	ldr	r2, [r0, #24]
 80241e6:	3201      	adds	r2, #1
 80241e8:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80241ea:	69a2      	ldr	r2, [r4, #24]
 80241ec:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 80241f0:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 80241f2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 80241f6:	18f2      	adds	r2, r6, r3
 80241f8:	2a3f      	cmp	r2, #63	@ 0x3f
 80241fa:	d808      	bhi.n	802420e <mg_sha1_update+0x3e>
    i = 0;
 80241fc:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 80241fe:	3318      	adds	r3, #24
 8024200:	18e0      	adds	r0, r4, r3
 8024202:	1b72      	subs	r2, r6, r5
 8024204:	1979      	adds	r1, r7, r5
 8024206:	3004      	adds	r0, #4
 8024208:	f009 fe26 	bl	802de58 <memcpy>
}
 802420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 802420e:	f103 0018 	add.w	r0, r3, #24
 8024212:	4420      	add	r0, r4
 8024214:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8024218:	462a      	mov	r2, r5
 802421a:	4639      	mov	r1, r7
 802421c:	3004      	adds	r0, #4
 802421e:	f009 fe1b 	bl	802de58 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8024222:	f104 011c 	add.w	r1, r4, #28
 8024226:	4620      	mov	r0, r4
 8024228:	f7fd faee 	bl	8021808 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 802422c:	e004      	b.n	8024238 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 802422e:	1979      	adds	r1, r7, r5
 8024230:	4620      	mov	r0, r4
 8024232:	f7fd fae9 	bl	8021808 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8024236:	3540      	adds	r5, #64	@ 0x40
 8024238:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 802423c:	42b3      	cmp	r3, r6
 802423e:	d3f6      	bcc.n	802422e <mg_sha1_update+0x5e>
    j = 0;
 8024240:	2300      	movs	r3, #0
 8024242:	e7dc      	b.n	80241fe <mg_sha1_update+0x2e>

08024244 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8024244:	b570      	push	{r4, r5, r6, lr}
 8024246:	b084      	sub	sp, #16
 8024248:	4606      	mov	r6, r0
 802424a:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 802424c:	2300      	movs	r3, #0
 802424e:	e013      	b.n	8024278 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024250:	2b03      	cmp	r3, #3
 8024252:	bf8c      	ite	hi
 8024254:	2200      	movhi	r2, #0
 8024256:	2201      	movls	r2, #1
 8024258:	3204      	adds	r2, #4
 802425a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802425e:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8024260:	43da      	mvns	r2, r3
 8024262:	f002 0203 	and.w	r2, r2, #3
 8024266:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024268:	fa21 f202 	lsr.w	r2, r1, r2
 802426c:	f103 0110 	add.w	r1, r3, #16
 8024270:	4469      	add	r1, sp
 8024272:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8024276:	3301      	adds	r3, #1
 8024278:	2b07      	cmp	r3, #7
 802427a:	d9e9      	bls.n	8024250 <mg_sha1_final+0xc>
  c = 0200;
 802427c:	2380      	movs	r3, #128	@ 0x80
 802427e:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024282:	2201      	movs	r2, #1
 8024284:	f10d 0107 	add.w	r1, sp, #7
 8024288:	4628      	mov	r0, r5
 802428a:	f7ff ffa1 	bl	80241d0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802428e:	e008      	b.n	80242a2 <mg_sha1_final+0x5e>
    c = 0000;
 8024290:	2300      	movs	r3, #0
 8024292:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8024296:	2201      	movs	r2, #1
 8024298:	f10d 0107 	add.w	r1, sp, #7
 802429c:	4628      	mov	r0, r5
 802429e:	f7ff ff97 	bl	80241d0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80242a2:	696b      	ldr	r3, [r5, #20]
 80242a4:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 80242a8:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80242ac:	d1f0      	bne.n	8024290 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 80242ae:	2208      	movs	r2, #8
 80242b0:	eb0d 0102 	add.w	r1, sp, r2
 80242b4:	4628      	mov	r0, r5
 80242b6:	f7ff ff8b 	bl	80241d0 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80242ba:	2300      	movs	r3, #0
 80242bc:	e00a      	b.n	80242d4 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80242be:	089a      	lsrs	r2, r3, #2
 80242c0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 80242c4:	43da      	mvns	r2, r3
 80242c6:	f002 0203 	and.w	r2, r2, #3
 80242ca:	00d2      	lsls	r2, r2, #3
 80242cc:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 80242d0:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 80242d2:	3301      	adds	r3, #1
 80242d4:	2b13      	cmp	r3, #19
 80242d6:	d9f2      	bls.n	80242be <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 80242d8:	225c      	movs	r2, #92	@ 0x5c
 80242da:	2100      	movs	r1, #0
 80242dc:	4628      	mov	r0, r5
 80242de:	f008 fb7f 	bl	802c9e0 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 80242e2:	2300      	movs	r3, #0
 80242e4:	9302      	str	r3, [sp, #8]
 80242e6:	9303      	str	r3, [sp, #12]
}
 80242e8:	b004      	add	sp, #16
 80242ea:	bd70      	pop	{r4, r5, r6, pc}

080242ec <mg_http_serve_ssi>:
                       const char *fullpath) {
 80242ec:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 80242ee:	4b03      	ldr	r3, [pc, #12]	@ (80242fc <mg_http_serve_ssi+0x10>)
 80242f0:	2200      	movs	r2, #0
 80242f2:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80242f6:	f7ff fe79 	bl	8023fec <mg_http_reply>
}
 80242fa:	bd08      	pop	{r3, pc}
 80242fc:	0803a498 	.word	0x0803a498

08024300 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8024300:	b510      	push	{r4, lr}
 8024302:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024304:	6001      	str	r1, [r0, #0]
 8024306:	b129      	cbz	r1, 8024314 <mg_str_s+0x14>
 8024308:	4608      	mov	r0, r1
 802430a:	f7eb ffc9 	bl	80102a0 <strlen>
 802430e:	6060      	str	r0, [r4, #4]
}
 8024310:	4620      	mov	r0, r4
 8024312:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024314:	2000      	movs	r0, #0
 8024316:	e7fa      	b.n	802430e <mg_str_s+0xe>

08024318 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8024318:	6001      	str	r1, [r0, #0]
 802431a:	6042      	str	r2, [r0, #4]
}
 802431c:	4770      	bx	lr

0802431e <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 802431e:	b510      	push	{r4, lr}
 8024320:	b082      	sub	sp, #8
 8024322:	4604      	mov	r4, r0
 8024324:	ab02      	add	r3, sp, #8
 8024326:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 802432a:	2a01      	cmp	r2, #1
 802432c:	d902      	bls.n	8024334 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 802432e:	780b      	ldrb	r3, [r1, #0]
 8024330:	2b22      	cmp	r3, #34	@ 0x22
 8024332:	d007      	beq.n	8024344 <stripquotes+0x26>
             : s;
 8024334:	ab02      	add	r3, sp, #8
 8024336:	e913 0003 	ldmdb	r3, {r0, r1}
 802433a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802433e:	4620      	mov	r0, r4
 8024340:	b002      	add	sp, #8
 8024342:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8024344:	188b      	adds	r3, r1, r2
 8024346:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802434a:	2b22      	cmp	r3, #34	@ 0x22
 802434c:	d1f2      	bne.n	8024334 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 802434e:	3a02      	subs	r2, #2
 8024350:	3101      	adds	r1, #1
 8024352:	f7ff ffe1 	bl	8024318 <mg_str_n>
             : s;
 8024356:	e7f2      	b.n	802433e <stripquotes+0x20>

08024358 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8024358:	b082      	sub	sp, #8
 802435a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802435e:	b084      	sub	sp, #16
 8024360:	4680      	mov	r8, r0
 8024362:	4668      	mov	r0, sp
 8024364:	e880 0006 	stmia.w	r0, {r1, r2}
 8024368:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802436a:	2400      	movs	r4, #0
 802436c:	e01f      	b.n	80243ae <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 802436e:	2201      	movs	r2, #1
 8024370:	e037      	b.n	80243e2 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024372:	7818      	ldrb	r0, [r3, #0]
 8024374:	283b      	cmp	r0, #59	@ 0x3b
 8024376:	d00d      	beq.n	8024394 <mg_http_get_header_var+0x3c>
 8024378:	2820      	cmp	r0, #32
 802437a:	d00b      	beq.n	8024394 <mg_http_get_header_var+0x3c>
 802437c:	282c      	cmp	r0, #44	@ 0x2c
 802437e:	d009      	beq.n	8024394 <mg_http_get_header_var+0x3c>
        p++;
 8024380:	3301      	adds	r3, #1
      while (p < x &&
 8024382:	42bb      	cmp	r3, r7
 8024384:	d206      	bcs.n	8024394 <mg_http_get_header_var+0x3c>
 8024386:	2a00      	cmp	r2, #0
 8024388:	d0f3      	beq.n	8024372 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 802438a:	428b      	cmp	r3, r1
 802438c:	d0f8      	beq.n	8024380 <mg_http_get_header_var+0x28>
 802438e:	7818      	ldrb	r0, [r3, #0]
 8024390:	2822      	cmp	r0, #34	@ 0x22
 8024392:	d1f5      	bne.n	8024380 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024394:	1a5b      	subs	r3, r3, r1
 8024396:	ac02      	add	r4, sp, #8
 8024398:	441a      	add	r2, r3
 802439a:	4620      	mov	r0, r4
 802439c:	f7ff ffbc 	bl	8024318 <mg_str_n>
 80243a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80243a4:	4640      	mov	r0, r8
 80243a6:	f7ff ffba 	bl	802431e <stripquotes>
 80243aa:	e021      	b.n	80243f0 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80243ac:	3401      	adds	r4, #1
 80243ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80243b0:	b1ca      	cbz	r2, 80243e6 <mg_http_get_header_var+0x8e>
 80243b2:	1915      	adds	r5, r2, r4
 80243b4:	1cab      	adds	r3, r5, #2
 80243b6:	9f01      	ldr	r7, [sp, #4]
 80243b8:	42bb      	cmp	r3, r7
 80243ba:	d214      	bcs.n	80243e6 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 80243bc:	9e00      	ldr	r6, [sp, #0]
 80243be:	5d73      	ldrb	r3, [r6, r5]
 80243c0:	2b3d      	cmp	r3, #61	@ 0x3d
 80243c2:	d1f3      	bne.n	80243ac <mg_http_get_header_var+0x54>
 80243c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243c6:	1930      	adds	r0, r6, r4
 80243c8:	f008 fa76 	bl	802c8b8 <memcmp>
 80243cc:	4602      	mov	r2, r0
 80243ce:	2800      	cmp	r0, #0
 80243d0:	d1ec      	bne.n	80243ac <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80243d2:	3501      	adds	r5, #1
 80243d4:	1971      	adds	r1, r6, r5
 80243d6:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 80243d8:	42b9      	cmp	r1, r7
 80243da:	d202      	bcs.n	80243e2 <mg_http_get_header_var+0x8a>
 80243dc:	5d73      	ldrb	r3, [r6, r5]
 80243de:	2b22      	cmp	r3, #34	@ 0x22
 80243e0:	d0c5      	beq.n	802436e <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80243e2:	460b      	mov	r3, r1
      while (p < x &&
 80243e4:	e7cd      	b.n	8024382 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 80243e6:	2200      	movs	r2, #0
 80243e8:	4611      	mov	r1, r2
 80243ea:	4640      	mov	r0, r8
 80243ec:	f7ff ff94 	bl	8024318 <mg_str_n>
}
 80243f0:	4640      	mov	r0, r8
 80243f2:	b004      	add	sp, #16
 80243f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243f8:	b002      	add	sp, #8
 80243fa:	4770      	bx	lr

080243fc <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80243fc:	b530      	push	{r4, r5, lr}
 80243fe:	b085      	sub	sp, #20
 8024400:	466b      	mov	r3, sp
 8024402:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8024406:	290d      	cmp	r1, #13
 8024408:	d930      	bls.n	802446c <mg_v4mapped+0x70>
 802440a:	4614      	mov	r4, r2
 802440c:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802440e:	4601      	mov	r1, r0
 8024410:	7802      	ldrb	r2, [r0, #0]
 8024412:	2a3a      	cmp	r2, #58	@ 0x3a
 8024414:	d12d      	bne.n	8024472 <mg_v4mapped+0x76>
 8024416:	7842      	ldrb	r2, [r0, #1]
 8024418:	2a3a      	cmp	r2, #58	@ 0x3a
 802441a:	d12c      	bne.n	8024476 <mg_v4mapped+0x7a>
 802441c:	7982      	ldrb	r2, [r0, #6]
 802441e:	2a3a      	cmp	r2, #58	@ 0x3a
 8024420:	d12b      	bne.n	802447a <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8024422:	2202      	movs	r2, #2
 8024424:	e000      	b.n	8024428 <mg_v4mapped+0x2c>
 8024426:	3201      	adds	r2, #1
 8024428:	2a05      	cmp	r2, #5
 802442a:	dc06      	bgt.n	802443a <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 802442c:	5c88      	ldrb	r0, [r1, r2]
 802442e:	2866      	cmp	r0, #102	@ 0x66
 8024430:	d0f9      	beq.n	8024426 <mg_v4mapped+0x2a>
 8024432:	2846      	cmp	r0, #70	@ 0x46
 8024434:	d0f7      	beq.n	8024426 <mg_v4mapped+0x2a>
 8024436:	2000      	movs	r0, #0
 8024438:	e019      	b.n	802446e <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 802443a:	ad02      	add	r5, sp, #8
 802443c:	1fda      	subs	r2, r3, #7
 802443e:	3107      	adds	r1, #7
 8024440:	4628      	mov	r0, r5
 8024442:	f7ff ff69 	bl	8024318 <mg_str_n>
 8024446:	4622      	mov	r2, r4
 8024448:	e895 0003 	ldmia.w	r5, {r0, r1}
 802444c:	f7fc fe7a 	bl	8021144 <mg_aton4>
 8024450:	b168      	cbz	r0, 802446e <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8024452:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8024454:	2300      	movs	r3, #0
 8024456:	6023      	str	r3, [r4, #0]
 8024458:	6063      	str	r3, [r4, #4]
 802445a:	60a3      	str	r3, [r4, #8]
 802445c:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 802445e:	23ff      	movs	r3, #255	@ 0xff
 8024460:	72e3      	strb	r3, [r4, #11]
 8024462:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8024464:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8024466:	2301      	movs	r3, #1
 8024468:	74e3      	strb	r3, [r4, #19]
  return true;
 802446a:	e000      	b.n	802446e <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 802446c:	2000      	movs	r0, #0
}
 802446e:	b005      	add	sp, #20
 8024470:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024472:	2000      	movs	r0, #0
 8024474:	e7fb      	b.n	802446e <mg_v4mapped+0x72>
 8024476:	2000      	movs	r0, #0
 8024478:	e7f9      	b.n	802446e <mg_v4mapped+0x72>
 802447a:	2000      	movs	r0, #0
 802447c:	e7f7      	b.n	802446e <mg_v4mapped+0x72>

0802447e <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 802447e:	b530      	push	{r4, r5, lr}
 8024480:	b083      	sub	sp, #12
 8024482:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024484:	6803      	ldr	r3, [r0, #0]
 8024486:	6842      	ldr	r2, [r0, #4]
 8024488:	441a      	add	r2, r3
 802448a:	466d      	mov	r5, sp
 802448c:	1a52      	subs	r2, r2, r1
 802448e:	4628      	mov	r0, r5
 8024490:	f7ff ff42 	bl	8024318 <mg_str_n>
 8024494:	3408      	adds	r4, #8
 8024496:	e895 0003 	ldmia.w	r5, {r0, r1}
 802449a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802449e:	b003      	add	sp, #12
 80244a0:	bd30      	pop	{r4, r5, pc}

080244a2 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80244a2:	b084      	sub	sp, #16
 80244a4:	f10d 0c10 	add.w	ip, sp, #16
 80244a8:	e90c 0003 	stmdb	ip, {r0, r1}
 80244ac:	4669      	mov	r1, sp
 80244ae:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80244b2:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 80244b4:	9a03      	ldr	r2, [sp, #12]
 80244b6:	429a      	cmp	r2, r3
 80244b8:	d90b      	bls.n	80244d2 <mg_strcmp+0x30>
 80244ba:	9901      	ldr	r1, [sp, #4]
 80244bc:	4299      	cmp	r1, r3
 80244be:	d908      	bls.n	80244d2 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 80244c0:	9a02      	ldr	r2, [sp, #8]
 80244c2:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 80244c4:	9a00      	ldr	r2, [sp, #0]
 80244c6:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 80244c8:	4291      	cmp	r1, r2
 80244ca:	db09      	blt.n	80244e0 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 80244cc:	dc0c      	bgt.n	80244e8 <mg_strcmp+0x46>
    i++;
 80244ce:	3301      	adds	r3, #1
 80244d0:	e7f0      	b.n	80244b4 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 80244d2:	429a      	cmp	r2, r3
 80244d4:	d80a      	bhi.n	80244ec <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 80244d6:	9a01      	ldr	r2, [sp, #4]
 80244d8:	429a      	cmp	r2, r3
 80244da:	d809      	bhi.n	80244f0 <mg_strcmp+0x4e>
  return 0;
 80244dc:	2000      	movs	r0, #0
 80244de:	e001      	b.n	80244e4 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 80244e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80244e4:	b004      	add	sp, #16
 80244e6:	4770      	bx	lr
    if (c1 > c2) return 1;
 80244e8:	2001      	movs	r0, #1
 80244ea:	e7fb      	b.n	80244e4 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 80244ec:	2001      	movs	r0, #1
 80244ee:	e7f9      	b.n	80244e4 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 80244f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244f4:	e7f6      	b.n	80244e4 <mg_strcmp+0x42>

080244f6 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 80244f6:	b530      	push	{r4, r5, lr}
 80244f8:	b085      	sub	sp, #20
 80244fa:	ac04      	add	r4, sp, #16
 80244fc:	e904 0003 	stmdb	r4, {r0, r1}
 8024500:	4669      	mov	r1, sp
 8024502:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024506:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8024508:	9b03      	ldr	r3, [sp, #12]
 802450a:	42a3      	cmp	r3, r4
 802450c:	d910      	bls.n	8024530 <mg_strcasecmp+0x3a>
 802450e:	9a01      	ldr	r2, [sp, #4]
 8024510:	42a2      	cmp	r2, r4
 8024512:	d90d      	bls.n	8024530 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8024514:	9b02      	ldr	r3, [sp, #8]
 8024516:	5d18      	ldrb	r0, [r3, r4]
 8024518:	f7fc ff22 	bl	8021360 <mg_tolc>
 802451c:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 802451e:	9b00      	ldr	r3, [sp, #0]
 8024520:	5d18      	ldrb	r0, [r3, r4]
 8024522:	f7fc ff1d 	bl	8021360 <mg_tolc>
    if (c1 < c2) return -1;
 8024526:	4285      	cmp	r5, r0
 8024528:	db09      	blt.n	802453e <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 802452a:	dc0c      	bgt.n	8024546 <mg_strcasecmp+0x50>
    i++;
 802452c:	3401      	adds	r4, #1
 802452e:	e7eb      	b.n	8024508 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8024530:	42a3      	cmp	r3, r4
 8024532:	d80a      	bhi.n	802454a <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8024534:	9b01      	ldr	r3, [sp, #4]
 8024536:	42a3      	cmp	r3, r4
 8024538:	d809      	bhi.n	802454e <mg_strcasecmp+0x58>
  return 0;
 802453a:	2000      	movs	r0, #0
 802453c:	e001      	b.n	8024542 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 802453e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024542:	b005      	add	sp, #20
 8024544:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8024546:	2001      	movs	r0, #1
 8024548:	e7fb      	b.n	8024542 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 802454a:	2001      	movs	r0, #1
 802454c:	e7f9      	b.n	8024542 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 802454e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024552:	e7f6      	b.n	8024542 <mg_strcasecmp+0x4c>

08024554 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8024554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024558:	b086      	sub	sp, #24
 802455a:	4604      	mov	r4, r0
 802455c:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 802455e:	f7fe fb45 	bl	8022bec <mg_http_get_request_len>
 8024562:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024564:	b1d4      	cbz	r4, 802459c <mg_http_parse+0x48>
 8024566:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8024568:	f44f 7206 	mov.w	r2, #536	@ 0x218
 802456c:	2100      	movs	r1, #0
 802456e:	4630      	mov	r0, r6
 8024570:	f008 fa36 	bl	802c9e0 <memset>
  if (req_len <= 0) return req_len;
 8024574:	2f00      	cmp	r7, #0
 8024576:	f340 808d 	ble.w	8024694 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 802457a:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 802457e:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024582:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024586:	46b8      	mov	r8, r7
 8024588:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802458c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024590:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024594:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024598:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 802459a:	e005      	b.n	80245a8 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 802459c:	4625      	mov	r5, r4
 802459e:	e7e3      	b.n	8024568 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80245a0:	4414      	add	r4, r2
 80245a2:	6873      	ldr	r3, [r6, #4]
 80245a4:	4413      	add	r3, r2
 80245a6:	6073      	str	r3, [r6, #4]
 80245a8:	42ac      	cmp	r4, r5
 80245aa:	d208      	bcs.n	80245be <mg_http_parse+0x6a>
 80245ac:	4629      	mov	r1, r5
 80245ae:	4620      	mov	r0, r4
 80245b0:	f7fb fc1e 	bl	801fdf0 <clen>
 80245b4:	4602      	mov	r2, r0
 80245b6:	2800      	cmp	r0, #0
 80245b8:	d1f2      	bne.n	80245a0 <mg_http_parse+0x4c>
 80245ba:	e000      	b.n	80245be <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80245bc:	3401      	adds	r4, #1
 80245be:	42ac      	cmp	r4, r5
 80245c0:	d202      	bcs.n	80245c8 <mg_http_parse+0x74>
 80245c2:	7823      	ldrb	r3, [r4, #0]
 80245c4:	2b20      	cmp	r3, #32
 80245c6:	d0f9      	beq.n	80245bc <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 80245c8:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80245ca:	e003      	b.n	80245d4 <mg_http_parse+0x80>
 80245cc:	4414      	add	r4, r2
 80245ce:	68f3      	ldr	r3, [r6, #12]
 80245d0:	4413      	add	r3, r2
 80245d2:	60f3      	str	r3, [r6, #12]
 80245d4:	42ac      	cmp	r4, r5
 80245d6:	d208      	bcs.n	80245ea <mg_http_parse+0x96>
 80245d8:	4629      	mov	r1, r5
 80245da:	4620      	mov	r0, r4
 80245dc:	f7fb fc08 	bl	801fdf0 <clen>
 80245e0:	4602      	mov	r2, r0
 80245e2:	2800      	cmp	r0, #0
 80245e4:	d1f2      	bne.n	80245cc <mg_http_parse+0x78>
 80245e6:	e000      	b.n	80245ea <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80245e8:	3401      	adds	r4, #1
 80245ea:	42ac      	cmp	r4, r5
 80245ec:	d202      	bcs.n	80245f4 <mg_http_parse+0xa0>
 80245ee:	7823      	ldrb	r3, [r4, #0]
 80245f0:	2b20      	cmp	r3, #32
 80245f2:	d0f9      	beq.n	80245e8 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80245f4:	f106 0218 	add.w	r2, r6, #24
 80245f8:	4629      	mov	r1, r5
 80245fa:	4620      	mov	r0, r4
 80245fc:	f7fb fc3f 	bl	801fe7e <skiptorn>
 8024600:	4682      	mov	sl, r0
 8024602:	2800      	cmp	r0, #0
 8024604:	f000 8082 	beq.w	802470c <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8024608:	f8d6 9008 	ldr.w	r9, [r6, #8]
 802460c:	68f4      	ldr	r4, [r6, #12]
 802460e:	4622      	mov	r2, r4
 8024610:	213f      	movs	r1, #63	@ 0x3f
 8024612:	4648      	mov	r0, r9
 8024614:	f7eb fdf4 	bl	8010200 <memchr>
 8024618:	b138      	cbz	r0, 802462a <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 802461a:	1c42      	adds	r2, r0, #1
 802461c:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 802461e:	444c      	add	r4, r9
 8024620:	1aa4      	subs	r4, r4, r2
 8024622:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8024624:	eba0 0309 	sub.w	r3, r0, r9
 8024628:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 802462a:	6873      	ldr	r3, [r6, #4]
 802462c:	2b00      	cmp	r3, #0
 802462e:	d06f      	beq.n	8024710 <mg_http_parse+0x1bc>
 8024630:	68f3      	ldr	r3, [r6, #12]
 8024632:	2b00      	cmp	r3, #0
 8024634:	d06f      	beq.n	8024716 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8024636:	231e      	movs	r3, #30
 8024638:	f106 0220 	add.w	r2, r6, #32
 802463c:	4629      	mov	r1, r5
 802463e:	4650      	mov	r0, sl
 8024640:	f7fb fc45 	bl	801fece <mg_http_parse_headers>
 8024644:	2800      	cmp	r0, #0
 8024646:	d069      	beq.n	802471c <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8024648:	4939      	ldr	r1, [pc, #228]	@ (8024730 <mg_http_parse+0x1dc>)
 802464a:	4630      	mov	r0, r6
 802464c:	f7fe fafa 	bl	8022c44 <mg_http_get_header>
 8024650:	b160      	cbz	r0, 802466c <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024652:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8024656:	e9d0 0100 	ldrd	r0, r1, [r0]
 802465a:	f7fe fa75 	bl	8022b48 <mg_to_size_t>
 802465e:	2800      	cmp	r0, #0
 8024660:	d05f      	beq.n	8024722 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8024662:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024666:	4443      	add	r3, r8
 8024668:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 802466c:	2205      	movs	r2, #5
 802466e:	4931      	ldr	r1, [pc, #196]	@ (8024734 <mg_http_parse+0x1e0>)
 8024670:	6830      	ldr	r0, [r6, #0]
 8024672:	f7fb fb6f 	bl	801fd54 <mg_ncasecmp>
 8024676:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024678:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 802467c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024680:	d00c      	beq.n	802469c <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024682:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802468a:	d029      	beq.n	80246e0 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 802468c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024690:	4598      	cmp	r8, r3
 8024692:	d849      	bhi.n	8024728 <mg_http_parse+0x1d4>
}
 8024694:	4638      	mov	r0, r7
 8024696:	b006      	add	sp, #24
 8024698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 802469c:	2800      	cmp	r0, #0
 802469e:	d0f0      	beq.n	8024682 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80246a0:	466d      	mov	r5, sp
 80246a2:	4925      	ldr	r1, [pc, #148]	@ (8024738 <mg_http_parse+0x1e4>)
 80246a4:	4628      	mov	r0, r5
 80246a6:	f7ff fe2b 	bl	8024300 <mg_str_s>
 80246aa:	e895 000c 	ldmia.w	r5, {r2, r3}
 80246ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80246b2:	f7ff ff20 	bl	80244f6 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80246b6:	2800      	cmp	r0, #0
 80246b8:	d0e3      	beq.n	8024682 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 80246ba:	ad02      	add	r5, sp, #8
 80246bc:	491f      	ldr	r1, [pc, #124]	@ (802473c <mg_http_parse+0x1e8>)
 80246be:	4628      	mov	r0, r5
 80246c0:	f7ff fe1e 	bl	8024300 <mg_str_s>
 80246c4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80246c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80246cc:	f7ff ff13 	bl	80244f6 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80246d0:	2800      	cmp	r0, #0
 80246d2:	d0d6      	beq.n	8024682 <mg_http_parse+0x12e>
    hm->body.len = 0;
 80246d4:	2300      	movs	r3, #0
 80246d6:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80246da:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80246de:	e7d0      	b.n	8024682 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80246e0:	2c00      	cmp	r4, #0
 80246e2:	d1d3      	bne.n	802468c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 80246e4:	ac04      	add	r4, sp, #16
 80246e6:	4916      	ldr	r1, [pc, #88]	@ (8024740 <mg_http_parse+0x1ec>)
 80246e8:	4620      	mov	r0, r4
 80246ea:	f7ff fe09 	bl	8024300 <mg_str_s>
 80246ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80246f2:	f106 0108 	add.w	r1, r6, #8
 80246f6:	c903      	ldmia	r1, {r0, r1}
 80246f8:	f7ff fefd 	bl	80244f6 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80246fc:	2800      	cmp	r0, #0
 80246fe:	d1c5      	bne.n	802468c <mg_http_parse+0x138>
    hm->body.len = 0;
 8024700:	2300      	movs	r3, #0
 8024702:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024706:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802470a:	e7bf      	b.n	802468c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 802470c:	2700      	movs	r7, #0
 802470e:	e7c1      	b.n	8024694 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024710:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024714:	e7be      	b.n	8024694 <mg_http_parse+0x140>
 8024716:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802471a:	e7bb      	b.n	8024694 <mg_http_parse+0x140>
    return -1;  // error when parsing
 802471c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024720:	e7b8      	b.n	8024694 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024722:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024726:	e7b5      	b.n	8024694 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024728:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802472c:	e7b2      	b.n	8024694 <mg_http_parse+0x140>
 802472e:	bf00      	nop
 8024730:	0803a4a8 	.word	0x0803a4a8
 8024734:	0803a4b8 	.word	0x0803a4b8
 8024738:	080374a8 	.word	0x080374a8
 802473c:	0803675c 	.word	0x0803675c
 8024740:	0803a4c0 	.word	0x0803a4c0

08024744 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8024744:	b530      	push	{r4, r5, lr}
 8024746:	b085      	sub	sp, #20
 8024748:	ac04      	add	r4, sp, #16
 802474a:	e904 0003 	stmdb	r4, {r0, r1}
 802474e:	4669      	mov	r1, sp
 8024750:	e881 000c 	stmia.w	r1, {r2, r3}
 8024754:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8024756:	b110      	cbz	r0, 802475e <mg_match+0x1a>
 8024758:	2300      	movs	r3, #0
 802475a:	6003      	str	r3, [r0, #0]
 802475c:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 802475e:	2400      	movs	r4, #0
 8024760:	46a4      	mov	ip, r4
 8024762:	4621      	mov	r1, r4
 8024764:	4623      	mov	r3, r4
 8024766:	e028      	b.n	80247ba <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024768:	9a02      	ldr	r2, [sp, #8]
 802476a:	440a      	add	r2, r1
 802476c:	6002      	str	r2, [r0, #0]
 802476e:	2201      	movs	r2, #1
 8024770:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024772:	2200      	movs	r2, #0
 8024774:	6082      	str	r2, [r0, #8]
 8024776:	60c2      	str	r2, [r0, #12]
 8024778:	3008      	adds	r0, #8
      i++, j++;
 802477a:	3301      	adds	r3, #1
 802477c:	3101      	adds	r1, #1
 802477e:	e01c      	b.n	80247ba <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024780:	429a      	cmp	r2, r3
 8024782:	d905      	bls.n	8024790 <mg_match+0x4c>
 8024784:	9a00      	ldr	r2, [sp, #0]
 8024786:	5cd2      	ldrb	r2, [r2, r3]
 8024788:	2a2a      	cmp	r2, #42	@ 0x2a
 802478a:	d045      	beq.n	8024818 <mg_match+0xd4>
 802478c:	2a23      	cmp	r2, #35	@ 0x23
 802478e:	d043      	beq.n	8024818 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024790:	2c00      	cmp	r4, #0
 8024792:	d065      	beq.n	8024860 <mg_match+0x11c>
 8024794:	9b03      	ldr	r3, [sp, #12]
 8024796:	42a3      	cmp	r3, r4
 8024798:	d365      	bcc.n	8024866 <mg_match+0x122>
 802479a:	9b00      	ldr	r3, [sp, #0]
 802479c:	f813 300c 	ldrb.w	r3, [r3, ip]
 80247a0:	2b23      	cmp	r3, #35	@ 0x23
 80247a2:	d003      	beq.n	80247ac <mg_match+0x68>
 80247a4:	9b02      	ldr	r3, [sp, #8]
 80247a6:	5c5b      	ldrb	r3, [r3, r1]
 80247a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80247aa:	d05e      	beq.n	802486a <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80247ac:	2800      	cmp	r0, #0
 80247ae:	d046      	beq.n	802483e <mg_match+0xfa>
 80247b0:	6803      	ldr	r3, [r0, #0]
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d03c      	beq.n	8024830 <mg_match+0xec>
      i = ni, j = nj;
 80247b6:	4621      	mov	r1, r4
 80247b8:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 80247ba:	9a01      	ldr	r2, [sp, #4]
 80247bc:	429a      	cmp	r2, r3
 80247be:	d802      	bhi.n	80247c6 <mg_match+0x82>
 80247c0:	9d03      	ldr	r5, [sp, #12]
 80247c2:	428d      	cmp	r5, r1
 80247c4:	d941      	bls.n	802484a <mg_match+0x106>
    if (i < p.len && j < s.len &&
 80247c6:	429a      	cmp	r2, r3
 80247c8:	d9da      	bls.n	8024780 <mg_match+0x3c>
 80247ca:	9d03      	ldr	r5, [sp, #12]
 80247cc:	428d      	cmp	r5, r1
 80247ce:	d9d7      	bls.n	8024780 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 80247d0:	9d00      	ldr	r5, [sp, #0]
 80247d2:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 80247d6:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 80247da:	d009      	beq.n	80247f0 <mg_match+0xac>
        (p.buf[i] == '?' ||
 80247dc:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 80247e0:	d0ce      	beq.n	8024780 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80247e2:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 80247e6:	d0cb      	beq.n	8024780 <mg_match+0x3c>
 80247e8:	9d02      	ldr	r5, [sp, #8]
 80247ea:	5c6d      	ldrb	r5, [r5, r1]
 80247ec:	45ae      	cmp	lr, r5
 80247ee:	d1c7      	bne.n	8024780 <mg_match+0x3c>
      if (caps == NULL) {
 80247f0:	2800      	cmp	r0, #0
 80247f2:	d0c2      	beq.n	802477a <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 80247f4:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 80247f8:	d0b6      	beq.n	8024768 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 80247fa:	6802      	ldr	r2, [r0, #0]
 80247fc:	2a00      	cmp	r2, #0
 80247fe:	d0bc      	beq.n	802477a <mg_match+0x36>
 8024800:	6845      	ldr	r5, [r0, #4]
 8024802:	2d00      	cmp	r5, #0
 8024804:	d1b9      	bne.n	802477a <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8024806:	9d02      	ldr	r5, [sp, #8]
 8024808:	440d      	add	r5, r1
 802480a:	1aad      	subs	r5, r5, r2
 802480c:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 802480e:	2200      	movs	r2, #0
 8024810:	60c2      	str	r2, [r0, #12]
 8024812:	6082      	str	r2, [r0, #8]
 8024814:	3008      	adds	r0, #8
 8024816:	e7b0      	b.n	802477a <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024818:	b108      	cbz	r0, 802481e <mg_match+0xda>
 802481a:	6802      	ldr	r2, [r0, #0]
 802481c:	b11a      	cbz	r2, 8024826 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 802481e:	1c4c      	adds	r4, r1, #1
 8024820:	469c      	mov	ip, r3
 8024822:	3301      	adds	r3, #1
 8024824:	e7c9      	b.n	80247ba <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024826:	6042      	str	r2, [r0, #4]
 8024828:	9a02      	ldr	r2, [sp, #8]
 802482a:	440a      	add	r2, r1
 802482c:	6002      	str	r2, [r0, #0]
 802482e:	e7f6      	b.n	802481e <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024830:	6843      	ldr	r3, [r0, #4]
 8024832:	b93b      	cbnz	r3, 8024844 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8024834:	3808      	subs	r0, #8
 8024836:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024838:	4621      	mov	r1, r4
 802483a:	4663      	mov	r3, ip
 802483c:	e7bd      	b.n	80247ba <mg_match+0x76>
 802483e:	4621      	mov	r1, r4
 8024840:	4663      	mov	r3, ip
 8024842:	e7ba      	b.n	80247ba <mg_match+0x76>
 8024844:	4621      	mov	r1, r4
 8024846:	4663      	mov	r3, ip
 8024848:	e7b7      	b.n	80247ba <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 802484a:	b180      	cbz	r0, 802486e <mg_match+0x12a>
 802484c:	6803      	ldr	r3, [r0, #0]
 802484e:	b183      	cbz	r3, 8024872 <mg_match+0x12e>
 8024850:	6842      	ldr	r2, [r0, #4]
 8024852:	b982      	cbnz	r2, 8024876 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8024854:	9a02      	ldr	r2, [sp, #8]
 8024856:	440a      	add	r2, r1
 8024858:	1ad3      	subs	r3, r2, r3
 802485a:	6043      	str	r3, [r0, #4]
  return true;
 802485c:	2001      	movs	r0, #1
 802485e:	e000      	b.n	8024862 <mg_match+0x11e>
      return false;
 8024860:	2000      	movs	r0, #0
}
 8024862:	b005      	add	sp, #20
 8024864:	bd30      	pop	{r4, r5, pc}
      return false;
 8024866:	2000      	movs	r0, #0
 8024868:	e7fb      	b.n	8024862 <mg_match+0x11e>
 802486a:	2000      	movs	r0, #0
 802486c:	e7f9      	b.n	8024862 <mg_match+0x11e>
  return true;
 802486e:	2001      	movs	r0, #1
 8024870:	e7f7      	b.n	8024862 <mg_match+0x11e>
 8024872:	2001      	movs	r0, #1
 8024874:	e7f5      	b.n	8024862 <mg_match+0x11e>
 8024876:	2001      	movs	r0, #1
 8024878:	e7f3      	b.n	8024862 <mg_match+0x11e>

0802487a <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 802487a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802487e:	b085      	sub	sp, #20
 8024880:	ac04      	add	r4, sp, #16
 8024882:	e904 0003 	stmdb	r4, {r0, r1}
 8024886:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 802488a:	b379      	cbz	r1, 80248ec <mg_span+0x72>
 802488c:	4690      	mov	r8, r2
 802488e:	461f      	mov	r7, r3
 8024890:	460d      	mov	r5, r1
 8024892:	9e02      	ldr	r6, [sp, #8]
 8024894:	b366      	cbz	r6, 80248f0 <mg_span+0x76>
    size_t len = 0;
 8024896:	2400      	movs	r4, #0
 8024898:	e000      	b.n	802489c <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 802489a:	3401      	adds	r4, #1
 802489c:	42a5      	cmp	r5, r4
 802489e:	d902      	bls.n	80248a6 <mg_span+0x2c>
 80248a0:	5d31      	ldrb	r1, [r6, r4]
 80248a2:	4281      	cmp	r1, r0
 80248a4:	d1f9      	bne.n	802489a <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 80248a6:	f1b8 0f00 	cmp.w	r8, #0
 80248aa:	d009      	beq.n	80248c0 <mg_span+0x46>
 80248ac:	46e9      	mov	r9, sp
 80248ae:	4622      	mov	r2, r4
 80248b0:	4631      	mov	r1, r6
 80248b2:	4648      	mov	r0, r9
 80248b4:	f7ff fd30 	bl	8024318 <mg_str_n>
 80248b8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80248bc:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80248c0:	b187      	cbz	r7, 80248e4 <mg_span+0x6a>
 80248c2:	46e8      	mov	r8, sp
 80248c4:	1b2a      	subs	r2, r5, r4
 80248c6:	1931      	adds	r1, r6, r4
 80248c8:	4640      	mov	r0, r8
 80248ca:	f7ff fd25 	bl	8024318 <mg_str_n>
 80248ce:	e898 0003 	ldmia.w	r8, {r0, r1}
 80248d2:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80248d6:	42a5      	cmp	r5, r4
 80248d8:	d904      	bls.n	80248e4 <mg_span+0x6a>
 80248da:	4603      	mov	r3, r0
 80248dc:	3301      	adds	r3, #1
 80248de:	603b      	str	r3, [r7, #0]
 80248e0:	1e4b      	subs	r3, r1, #1
 80248e2:	607b      	str	r3, [r7, #4]
    return true;
 80248e4:	2001      	movs	r0, #1
}
 80248e6:	b005      	add	sp, #20
 80248e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 80248ec:	2000      	movs	r0, #0
 80248ee:	e7fa      	b.n	80248e6 <mg_span+0x6c>
 80248f0:	2000      	movs	r0, #0
 80248f2:	e7f8      	b.n	80248e6 <mg_span+0x6c>

080248f4 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80248f4:	b082      	sub	sp, #8
 80248f6:	b510      	push	{r4, lr}
 80248f8:	b08a      	sub	sp, #40	@ 0x28
 80248fa:	4604      	mov	r4, r0
 80248fc:	f10d 0c08 	add.w	ip, sp, #8
 8024900:	e88c 0006 	stmia.w	ip, {r1, r2}
 8024904:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8024906:	2200      	movs	r2, #0
 8024908:	4611      	mov	r1, r2
 802490a:	f7ff fd05 	bl	8024318 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 802490e:	ab02      	add	r3, sp, #8
 8024910:	2226      	movs	r2, #38	@ 0x26
 8024912:	9200      	str	r2, [sp, #0]
 8024914:	aa08      	add	r2, sp, #32
 8024916:	e893 0003 	ldmia.w	r3, {r0, r1}
 802491a:	f7ff ffae 	bl	802487a <mg_span>
 802491e:	b1c8      	cbz	r0, 8024954 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024920:	233d      	movs	r3, #61	@ 0x3d
 8024922:	9300      	str	r3, [sp, #0]
 8024924:	ab04      	add	r3, sp, #16
 8024926:	aa06      	add	r2, sp, #24
 8024928:	a90a      	add	r1, sp, #40	@ 0x28
 802492a:	e911 0003 	ldmdb	r1, {r0, r1}
 802492e:	f7ff ffa4 	bl	802487a <mg_span>
 8024932:	2800      	cmp	r0, #0
 8024934:	d0eb      	beq.n	802490e <mg_http_var+0x1a>
 8024936:	9a07      	ldr	r2, [sp, #28]
 8024938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802493a:	4293      	cmp	r3, r2
 802493c:	d1e7      	bne.n	802490e <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 802493e:	9906      	ldr	r1, [sp, #24]
 8024940:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024942:	f7fb fa07 	bl	801fd54 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024946:	2800      	cmp	r0, #0
 8024948:	d1e1      	bne.n	802490e <mg_http_var+0x1a>
      result = v;
 802494a:	ab04      	add	r3, sp, #16
 802494c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024950:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024954:	4620      	mov	r0, r4
 8024956:	b00a      	add	sp, #40	@ 0x28
 8024958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802495c:	b002      	add	sp, #8
 802495e:	4770      	bx	lr

08024960 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024960:	b530      	push	{r4, r5, lr}
 8024962:	b08d      	sub	sp, #52	@ 0x34
 8024964:	4604      	mov	r4, r0
 8024966:	a802      	add	r0, sp, #8
 8024968:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 802496c:	4619      	mov	r1, r3
 802496e:	a804      	add	r0, sp, #16
 8024970:	f7ff fcc6 	bl	8024300 <mg_str_s>
  size_t i = 0;
 8024974:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8024976:	e000      	b.n	802497a <guess_content_type+0x1a>
 8024978:	3301      	adds	r3, #1
 802497a:	9803      	ldr	r0, [sp, #12]
 802497c:	4298      	cmp	r0, r3
 802497e:	d906      	bls.n	802498e <guess_content_type+0x2e>
 8024980:	1ac1      	subs	r1, r0, r3
 8024982:	9a02      	ldr	r2, [sp, #8]
 8024984:	440a      	add	r2, r1
 8024986:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802498a:	2a2e      	cmp	r2, #46	@ 0x2e
 802498c:	d1f4      	bne.n	8024978 <guess_content_type+0x18>
  path.buf += path.len - i;
 802498e:	1ac0      	subs	r0, r0, r3
 8024990:	9a02      	ldr	r2, [sp, #8]
 8024992:	4402      	add	r2, r0
 8024994:	9202      	str	r2, [sp, #8]
  path.len = i;
 8024996:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8024998:	ab04      	add	r3, sp, #16
 802499a:	222c      	movs	r2, #44	@ 0x2c
 802499c:	9200      	str	r2, [sp, #0]
 802499e:	aa0a      	add	r2, sp, #40	@ 0x28
 80249a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80249a4:	f7ff ff69 	bl	802487a <mg_span>
 80249a8:	b1c0      	cbz	r0, 80249dc <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80249aa:	233d      	movs	r3, #61	@ 0x3d
 80249ac:	9300      	str	r3, [sp, #0]
 80249ae:	ab06      	add	r3, sp, #24
 80249b0:	aa08      	add	r2, sp, #32
 80249b2:	a90c      	add	r1, sp, #48	@ 0x30
 80249b4:	e911 0003 	ldmdb	r1, {r0, r1}
 80249b8:	f7ff ff5f 	bl	802487a <mg_span>
 80249bc:	2800      	cmp	r0, #0
 80249be:	d0eb      	beq.n	8024998 <guess_content_type+0x38>
 80249c0:	ab08      	add	r3, sp, #32
 80249c2:	cb0c      	ldmia	r3, {r2, r3}
 80249c4:	a902      	add	r1, sp, #8
 80249c6:	c903      	ldmia	r1, {r0, r1}
 80249c8:	f7ff fd6b 	bl	80244a2 <mg_strcmp>
 80249cc:	2800      	cmp	r0, #0
 80249ce:	d1e3      	bne.n	8024998 <guess_content_type+0x38>
 80249d0:	ab06      	add	r3, sp, #24
 80249d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80249d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80249da:	e01c      	b.n	8024a16 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80249dc:	2500      	movs	r5, #0
 80249de:	4b0f      	ldr	r3, [pc, #60]	@ (8024a1c <guess_content_type+0xbc>)
 80249e0:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 80249e4:	b19b      	cbz	r3, 8024a0e <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80249e6:	4b0d      	ldr	r3, [pc, #52]	@ (8024a1c <guess_content_type+0xbc>)
 80249e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80249ec:	cb0c      	ldmia	r3, {r2, r3}
 80249ee:	a902      	add	r1, sp, #8
 80249f0:	c903      	ldmia	r1, {r0, r1}
 80249f2:	f7ff fd56 	bl	80244a2 <mg_strcmp>
 80249f6:	b108      	cbz	r0, 80249fc <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80249f8:	3502      	adds	r5, #2
 80249fa:	e7f0      	b.n	80249de <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80249fc:	3501      	adds	r5, #1
 80249fe:	4b07      	ldr	r3, [pc, #28]	@ (8024a1c <guess_content_type+0xbc>)
 8024a00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024a04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a08:	e884 0003 	stmia.w	r4, {r0, r1}
 8024a0c:	e003      	b.n	8024a16 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8024a0e:	4904      	ldr	r1, [pc, #16]	@ (8024a20 <guess_content_type+0xc0>)
 8024a10:	4620      	mov	r0, r4
 8024a12:	f7ff fc75 	bl	8024300 <mg_str_s>
}
 8024a16:	4620      	mov	r0, r4
 8024a18:	b00d      	add	sp, #52	@ 0x34
 8024a1a:	bd30      	pop	{r4, r5, pc}
 8024a1c:	0803b9b0 	.word	0x0803b9b0
 8024a20:	0803a4c4 	.word	0x0803a4c4

08024a24 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8024a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a26:	b087      	sub	sp, #28
 8024a28:	4604      	mov	r4, r0
 8024a2a:	460e      	mov	r6, r1
 8024a2c:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8024a2e:	2500      	movs	r5, #0
 8024a30:	1da8      	adds	r0, r5, #6
 8024a32:	6863      	ldr	r3, [r4, #4]
 8024a34:	4298      	cmp	r0, r3
 8024a36:	d23c      	bcs.n	8024ab2 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8024a38:	6821      	ldr	r1, [r4, #0]
 8024a3a:	1b5b      	subs	r3, r3, r5
 8024a3c:	1f9a      	subs	r2, r3, #6
 8024a3e:	4401      	add	r1, r0
 8024a40:	a804      	add	r0, sp, #16
 8024a42:	f7ff fc69 	bl	8024318 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8024a46:	6820      	ldr	r0, [r4, #0]
 8024a48:	2206      	movs	r2, #6
 8024a4a:	491b      	ldr	r1, [pc, #108]	@ (8024ab8 <getrange+0x94>)
 8024a4c:	4428      	add	r0, r5
 8024a4e:	f007 ff33 	bl	802c8b8 <memcmp>
 8024a52:	b108      	cbz	r0, 8024a58 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8024a54:	3501      	adds	r5, #1
 8024a56:	e7eb      	b.n	8024a30 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8024a58:	ab04      	add	r3, sp, #16
 8024a5a:	222d      	movs	r2, #45	@ 0x2d
 8024a5c:	9200      	str	r2, [sp, #0]
 8024a5e:	aa02      	add	r2, sp, #8
 8024a60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a64:	f7ff ff09 	bl	802487a <mg_span>
 8024a68:	b1c0      	cbz	r0, 8024a9c <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8024a6a:	4632      	mov	r2, r6
 8024a6c:	ab02      	add	r3, sp, #8
 8024a6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a72:	f7fe f869 	bl	8022b48 <mg_to_size_t>
 8024a76:	b928      	cbnz	r0, 8024a84 <getrange+0x60>
  size_t i, numparsed = 0;
 8024a78:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024a7a:	9b05      	ldr	r3, [sp, #20]
 8024a7c:	b923      	cbnz	r3, 8024a88 <getrange+0x64>
}
 8024a7e:	4620      	mov	r0, r4
 8024a80:	b007      	add	sp, #28
 8024a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8024a84:	2401      	movs	r4, #1
 8024a86:	e7f8      	b.n	8024a7a <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024a88:	463a      	mov	r2, r7
 8024a8a:	ab06      	add	r3, sp, #24
 8024a8c:	e913 0003 	ldmdb	r3, {r0, r1}
 8024a90:	f7fe f85a 	bl	8022b48 <mg_to_size_t>
 8024a94:	2800      	cmp	r0, #0
 8024a96:	d0f2      	beq.n	8024a7e <getrange+0x5a>
 8024a98:	3401      	adds	r4, #1
 8024a9a:	e7f0      	b.n	8024a7e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024a9c:	4632      	mov	r2, r6
 8024a9e:	ab06      	add	r3, sp, #24
 8024aa0:	e913 0003 	ldmdb	r3, {r0, r1}
 8024aa4:	f7fe f850 	bl	8022b48 <mg_to_size_t>
 8024aa8:	b908      	cbnz	r0, 8024aae <getrange+0x8a>
  size_t i, numparsed = 0;
 8024aaa:	2400      	movs	r4, #0
 8024aac:	e7e7      	b.n	8024a7e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024aae:	2401      	movs	r4, #1
    break;
 8024ab0:	e7e5      	b.n	8024a7e <getrange+0x5a>
  size_t i, numparsed = 0;
 8024ab2:	2400      	movs	r4, #0
 8024ab4:	e7e3      	b.n	8024a7e <getrange+0x5a>
 8024ab6:	bf00      	nop
 8024ab8:	0803a4e0 	.word	0x0803a4e0

08024abc <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8024abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ac0:	b0e7      	sub	sp, #412	@ 0x19c
 8024ac2:	4607      	mov	r7, r0
 8024ac4:	4688      	mov	r8, r1
 8024ac6:	4614      	mov	r4, r2
 8024ac8:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024aca:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8024ace:	f1b9 0f00 	cmp.w	r9, #0
 8024ad2:	d036      	beq.n	8024b42 <mg_http_serve_file+0x86>
  size_t size = 0;
 8024ad4:	2300      	movs	r3, #0
 8024ad6:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8024ad8:	2200      	movs	r2, #0
 8024ada:	2300      	movs	r3, #0
 8024adc:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8024ae0:	ae5e      	add	r6, sp, #376	@ 0x178
 8024ae2:	4621      	mov	r1, r4
 8024ae4:	4630      	mov	r0, r6
 8024ae6:	f7ff fc0b 	bl	8024300 <mg_str_s>
 8024aea:	68eb      	ldr	r3, [r5, #12]
 8024aec:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024af0:	a828      	add	r0, sp, #160	@ 0xa0
 8024af2:	f7ff ff35 	bl	8024960 <guess_content_type>
  if (path != NULL) {
 8024af6:	2c00      	cmp	r4, #0
 8024af8:	d053      	beq.n	8024ba2 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8024afa:	4995      	ldr	r1, [pc, #596]	@ (8024d50 <mg_http_serve_file+0x294>)
 8024afc:	4640      	mov	r0, r8
 8024afe:	f7fe f8a1 	bl	8022c44 <mg_http_get_header>
    if (ae != NULL) {
 8024b02:	4606      	mov	r6, r0
 8024b04:	2800      	cmp	r0, #0
 8024b06:	d042      	beq.n	8024b8e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8024b08:	6802      	ldr	r2, [r0, #0]
 8024b0a:	6841      	ldr	r1, [r0, #4]
 8024b0c:	4891      	ldr	r0, [pc, #580]	@ (8024d54 <mg_http_serve_file+0x298>)
 8024b0e:	f7ff fb15 	bl	802413c <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8024b12:	4683      	mov	fp, r0
 8024b14:	b1d8      	cbz	r0, 8024b4e <mg_http_serve_file+0x92>
 8024b16:	4990      	ldr	r1, [pc, #576]	@ (8024d58 <mg_http_serve_file+0x29c>)
 8024b18:	f007 ffe2 	bl	802cae0 <strstr>
 8024b1c:	4606      	mov	r6, r0
 8024b1e:	b1d0      	cbz	r0, 8024b56 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8024b20:	4623      	mov	r3, r4
 8024b22:	4a8e      	ldr	r2, [pc, #568]	@ (8024d5c <mg_http_serve_file+0x2a0>)
 8024b24:	2180      	movs	r1, #128	@ 0x80
 8024b26:	a82e      	add	r0, sp, #184	@ 0xb8
 8024b28:	f7fe fd62 	bl	80235f0 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8024b2c:	2201      	movs	r2, #1
 8024b2e:	a92e      	add	r1, sp, #184	@ 0xb8
 8024b30:	4648      	mov	r0, r9
 8024b32:	f7fd ffcd 	bl	8022ad0 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8024b36:	4606      	mov	r6, r0
 8024b38:	b130      	cbz	r0, 8024b48 <mg_http_serve_file+0x8c>
 8024b3a:	f04f 0a01 	mov.w	sl, #1
 8024b3e:	ac2e      	add	r4, sp, #184	@ 0xb8
 8024b40:	e00b      	b.n	8024b5a <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024b42:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8024d84 <mg_http_serve_file+0x2c8>
 8024b46:	e7c5      	b.n	8024ad4 <mg_http_serve_file+0x18>
  bool gzip = false;
 8024b48:	f04f 0a00 	mov.w	sl, #0
 8024b4c:	e005      	b.n	8024b5a <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8024b4e:	4606      	mov	r6, r0
  bool gzip = false;
 8024b50:	f04f 0a00 	mov.w	sl, #0
 8024b54:	e001      	b.n	8024b5a <mg_http_serve_file+0x9e>
 8024b56:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8024b5a:	4658      	mov	r0, fp
 8024b5c:	f7f5 ff8e 	bl	801aa7c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024b60:	b1c6      	cbz	r6, 8024b94 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8024b62:	b316      	cbz	r6, 8024baa <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024b64:	f8d9 3000 	ldr.w	r3, [r9]
 8024b68:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024b6a:	a92d      	add	r1, sp, #180	@ 0xb4
 8024b6c:	4620      	mov	r0, r4
 8024b6e:	4798      	blx	r3
 8024b70:	2800      	cmp	r0, #0
 8024b72:	d137      	bne.n	8024be4 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8024b74:	4b7a      	ldr	r3, [pc, #488]	@ (8024d60 <mg_http_serve_file+0x2a4>)
 8024b76:	68aa      	ldr	r2, [r5, #8]
 8024b78:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024b7c:	4638      	mov	r0, r7
 8024b7e:	f7ff fa35 	bl	8023fec <mg_http_reply>
    mg_fs_close(fd);
 8024b82:	4630      	mov	r0, r6
 8024b84:	f7fd ffbd 	bl	8022b02 <mg_fs_close>
}
 8024b88:	b067      	add	sp, #412	@ 0x19c
 8024b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8024b8e:	f04f 0a00 	mov.w	sl, #0
 8024b92:	e7e5      	b.n	8024b60 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024b94:	2201      	movs	r2, #1
 8024b96:	4621      	mov	r1, r4
 8024b98:	4648      	mov	r0, r9
 8024b9a:	f7fd ff99 	bl	8022ad0 <mg_fs_open>
 8024b9e:	4606      	mov	r6, r0
 8024ba0:	e7df      	b.n	8024b62 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8024ba2:	4626      	mov	r6, r4
  bool gzip = false;
 8024ba4:	f04f 0a00 	mov.w	sl, #0
 8024ba8:	e7db      	b.n	8024b62 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8024baa:	6929      	ldr	r1, [r5, #16]
 8024bac:	b1b9      	cbz	r1, 8024bde <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8024bae:	2201      	movs	r2, #1
 8024bb0:	4648      	mov	r0, r9
 8024bb2:	f7fd ff8d 	bl	8022ad0 <mg_fs_open>
 8024bb6:	4606      	mov	r6, r0
    path = opts->page404;
 8024bb8:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8024bba:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8024bbe:	4621      	mov	r1, r4
 8024bc0:	4658      	mov	r0, fp
 8024bc2:	f7ff fb9d 	bl	8024300 <mg_str_s>
 8024bc6:	68eb      	ldr	r3, [r5, #12]
 8024bc8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024bcc:	a80a      	add	r0, sp, #40	@ 0x28
 8024bce:	f7ff fec7 	bl	8024960 <guess_content_type>
 8024bd2:	ab28      	add	r3, sp, #160	@ 0xa0
 8024bd4:	aa0a      	add	r2, sp, #40	@ 0x28
 8024bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024bda:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024bde:	2e00      	cmp	r6, #0
 8024be0:	d1c0      	bne.n	8024b64 <mg_http_serve_file+0xa8>
 8024be2:	e7c7      	b.n	8024b74 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024be4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024be8:	e9cd 2300 	strd	r2, r3, [sp]
 8024bec:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024bee:	2140      	movs	r1, #64	@ 0x40
 8024bf0:	a84e      	add	r0, sp, #312	@ 0x138
 8024bf2:	f7ff fa3d 	bl	8024070 <mg_http_etag>
 8024bf6:	b190      	cbz	r0, 8024c1e <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024bf8:	495a      	ldr	r1, [pc, #360]	@ (8024d64 <mg_http_serve_file+0x2a8>)
 8024bfa:	4640      	mov	r0, r8
 8024bfc:	f7fe f822 	bl	8022c44 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024c00:	4604      	mov	r4, r0
 8024c02:	b160      	cbz	r0, 8024c1e <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8024c04:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024c08:	a94e      	add	r1, sp, #312	@ 0x138
 8024c0a:	4658      	mov	r0, fp
 8024c0c:	f7ff fb78 	bl	8024300 <mg_str_s>
 8024c10:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8024c14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024c18:	f7ff fc6d 	bl	80244f6 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024c1c:	b340      	cbz	r0, 8024c70 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8024c1e:	f04f 0b00 	mov.w	fp, #0
 8024c22:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8024c26:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8024c2a:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8024c2c:	494e      	ldr	r1, [pc, #312]	@ (8024d68 <mg_http_serve_file+0x2ac>)
 8024c2e:	4640      	mov	r0, r8
 8024c30:	f7fe f808 	bl	8022c44 <mg_http_get_header>
    range[0] = '\0';
 8024c34:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8024c38:	2800      	cmp	r0, #0
 8024c3a:	d040      	beq.n	8024cbe <mg_http_serve_file+0x202>
 8024c3c:	aa0e      	add	r2, sp, #56	@ 0x38
 8024c3e:	a90d      	add	r1, sp, #52	@ 0x34
 8024c40:	f7ff fef0 	bl	8024a24 <getrange>
 8024c44:	2800      	cmp	r0, #0
 8024c46:	dd70      	ble.n	8024d2a <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8024c48:	2801      	cmp	r0, #1
 8024c4a:	d01c      	beq.n	8024c86 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8024c4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c50:	429a      	cmp	r2, r3
 8024c52:	d801      	bhi.n	8024c58 <mg_http_serve_file+0x19c>
 8024c54:	42a3      	cmp	r3, r4
 8024c56:	d319      	bcc.n	8024c8c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024c58:	2400      	movs	r4, #0
 8024c5a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024c5c:	9300      	str	r3, [sp, #0]
 8024c5e:	9401      	str	r4, [sp, #4]
 8024c60:	4a42      	ldr	r2, [pc, #264]	@ (8024d6c <mg_http_serve_file+0x2b0>)
 8024c62:	2164      	movs	r1, #100	@ 0x64
 8024c64:	a80f      	add	r0, sp, #60	@ 0x3c
 8024c66:	f7fe fcc3 	bl	80235f0 <mg_snprintf>
        status = 416;
 8024c6a:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024c6e:	e028      	b.n	8024cc2 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8024c70:	4630      	mov	r0, r6
 8024c72:	f7fd ff46 	bl	8022b02 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8024c76:	4b3e      	ldr	r3, [pc, #248]	@ (8024d70 <mg_http_serve_file+0x2b4>)
 8024c78:	68aa      	ldr	r2, [r5, #8]
 8024c7a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024c7e:	4638      	mov	r0, r7
 8024c80:	f7ff f9b4 	bl	8023fec <mg_http_reply>
 8024c84:	e780      	b.n	8024b88 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8024c86:	1e63      	subs	r3, r4, #1
 8024c88:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c8a:	e7df      	b.n	8024c4c <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8024c8c:	1a9b      	subs	r3, r3, r2
 8024c8e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8024c90:	1911      	adds	r1, r2, r4
 8024c92:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8024c94:	2300      	movs	r3, #0
 8024c96:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8024c98:	9004      	str	r0, [sp, #16]
 8024c9a:	9305      	str	r3, [sp, #20]
 8024c9c:	9102      	str	r1, [sp, #8]
 8024c9e:	9303      	str	r3, [sp, #12]
 8024ca0:	9200      	str	r2, [sp, #0]
 8024ca2:	9301      	str	r3, [sp, #4]
 8024ca4:	4a33      	ldr	r2, [pc, #204]	@ (8024d74 <mg_http_serve_file+0x2b8>)
 8024ca6:	2164      	movs	r1, #100	@ 0x64
 8024ca8:	a80f      	add	r0, sp, #60	@ 0x3c
 8024caa:	f7fe fca1 	bl	80235f0 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8024cae:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8024cb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024cb4:	6830      	ldr	r0, [r6, #0]
 8024cb6:	4798      	blx	r3
        status = 206;
 8024cb8:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8024cbc:	e001      	b.n	8024cc2 <mg_http_serve_file+0x206>
    int n, status = 200;
 8024cbe:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8024cc2:	4648      	mov	r0, r9
 8024cc4:	f7fb f96c 	bl	801ffa0 <mg_http_status_code_str>
 8024cc8:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8024cca:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8024ccc:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024cce:	46a4      	mov	ip, r4
 8024cd0:	f1ba 0f00 	cmp.w	sl, #0
 8024cd4:	d02c      	beq.n	8024d30 <mg_http_serve_file+0x274>
 8024cd6:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8024d88 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8024cda:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8024cdc:	b35a      	cbz	r2, 8024d36 <mg_http_serve_file+0x27a>
 8024cde:	9208      	str	r2, [sp, #32]
 8024ce0:	aa0f      	add	r2, sp, #60	@ 0x3c
 8024ce2:	9207      	str	r2, [sp, #28]
 8024ce4:	f8cd e018 	str.w	lr, [sp, #24]
 8024ce8:	f8cd c010 	str.w	ip, [sp, #16]
 8024cec:	2200      	movs	r2, #0
 8024cee:	9205      	str	r2, [sp, #20]
 8024cf0:	aa4e      	add	r2, sp, #312	@ 0x138
 8024cf2:	9202      	str	r2, [sp, #8]
 8024cf4:	9001      	str	r0, [sp, #4]
 8024cf6:	9100      	str	r1, [sp, #0]
 8024cf8:	464a      	mov	r2, r9
 8024cfa:	491f      	ldr	r1, [pc, #124]	@ (8024d78 <mg_http_serve_file+0x2bc>)
 8024cfc:	4638      	mov	r0, r7
 8024cfe:	f7ff f94f 	bl	8023fa0 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8024d02:	ad64      	add	r5, sp, #400	@ 0x190
 8024d04:	491d      	ldr	r1, [pc, #116]	@ (8024d7c <mg_http_serve_file+0x2c0>)
 8024d06:	4628      	mov	r0, r5
 8024d08:	f7ff fafa 	bl	8024300 <mg_str_s>
 8024d0c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024d10:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024d14:	f7ff fbef 	bl	80244f6 <mg_strcasecmp>
 8024d18:	b178      	cbz	r0, 8024d3a <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8024d1a:	4b19      	ldr	r3, [pc, #100]	@ (8024d80 <mg_http_serve_file+0x2c4>)
 8024d1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8024d20:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8024d24:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8024d28:	e72e      	b.n	8024b88 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8024d2a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8024d2e:	e7c8      	b.n	8024cc2 <mg_http_serve_file+0x206>
    mg_printf(c,
 8024d30:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8024d70 <mg_http_serve_file+0x2b4>
 8024d34:	e7d1      	b.n	8024cda <mg_http_serve_file+0x21e>
 8024d36:	4a0e      	ldr	r2, [pc, #56]	@ (8024d70 <mg_http_serve_file+0x2b4>)
 8024d38:	e7d1      	b.n	8024cde <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8024d3a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8024d3e:	f36f 13c7 	bfc	r3, #7, #1
 8024d42:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8024d46:	4630      	mov	r0, r6
 8024d48:	f7fd fedb 	bl	8022b02 <mg_fs_close>
 8024d4c:	e71c      	b.n	8024b88 <mg_http_serve_file+0xcc>
 8024d4e:	bf00      	nop
 8024d50:	0803a504 	.word	0x0803a504
 8024d54:	0803a410 	.word	0x0803a410
 8024d58:	0803b8c4 	.word	0x0803b8c4
 8024d5c:	0803a514 	.word	0x0803a514
 8024d60:	0803a51c 	.word	0x0803a51c
 8024d64:	0803a528 	.word	0x0803a528
 8024d68:	0803a538 	.word	0x0803a538
 8024d6c:	0803a540 	.word	0x0803a540
 8024d70:	08036c80 	.word	0x08036c80
 8024d74:	0803a560 	.word	0x0803a560
 8024d78:	0803a588 	.word	0x0803a588
 8024d7c:	0803a5d8 	.word	0x0803a5d8
 8024d80:	08026f0d 	.word	0x08026f0d
 8024d84:	20000130 	.word	0x20000130
 8024d88:	0803a4e8 	.word	0x0803a4e8

08024d8c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d90:	b083      	sub	sp, #12
 8024d92:	ac02      	add	r4, sp, #8
 8024d94:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8024d98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024d9a:	3901      	subs	r1, #1
 8024d9c:	2907      	cmp	r1, #7
 8024d9e:	f200 8128 	bhi.w	8024ff2 <mg_str_to_num+0x266>
 8024da2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8024da6:	0008      	.short	0x0008
 8024da8:	01260020 	.word	0x01260020
 8024dac:	0126000c 	.word	0x0126000c
 8024db0:	01260126 	.word	0x01260126
 8024db4:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024db6:	20ff      	movs	r0, #255	@ 0xff
 8024db8:	f04f 0e00 	mov.w	lr, #0
 8024dbc:	e003      	b.n	8024dc6 <mg_str_to_num+0x3a>
 8024dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024dc2:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8024dc6:	b9e2      	cbnz	r2, 8024e02 <mg_str_to_num+0x76>
 8024dc8:	9901      	ldr	r1, [sp, #4]
 8024dca:	2901      	cmp	r1, #1
 8024dcc:	d926      	bls.n	8024e1c <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8024dce:	9a00      	ldr	r2, [sp, #0]
 8024dd0:	7811      	ldrb	r1, [r2, #0]
 8024dd2:	2930      	cmp	r1, #48	@ 0x30
 8024dd4:	d00c      	beq.n	8024df0 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8024dd6:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8024dda:	220a      	movs	r2, #10
 8024ddc:	e013      	b.n	8024e06 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024de2:	4686      	mov	lr, r0
 8024de4:	e7ef      	b.n	8024dc6 <mg_str_to_num+0x3a>
 8024de6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8024dea:	f04f 0e00 	mov.w	lr, #0
 8024dee:	e7ea      	b.n	8024dc6 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024df0:	7852      	ldrb	r2, [r2, #1]
 8024df2:	2a62      	cmp	r2, #98	@ 0x62
 8024df4:	d015      	beq.n	8024e22 <mg_str_to_num+0x96>
 8024df6:	2a78      	cmp	r2, #120	@ 0x78
 8024df8:	d017      	beq.n	8024e2a <mg_str_to_num+0x9e>
      i++;
 8024dfa:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024dfe:	220a      	movs	r2, #10
 8024e00:	e001      	b.n	8024e06 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8024e02:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8024e06:	2a0a      	cmp	r2, #10
 8024e08:	d044      	beq.n	8024e94 <mg_str_to_num+0x108>
 8024e0a:	2a10      	cmp	r2, #16
 8024e0c:	f000 80d4 	beq.w	8024fb8 <mg_str_to_num+0x22c>
 8024e10:	2a02      	cmp	r2, #2
 8024e12:	d00e      	beq.n	8024e32 <mg_str_to_num+0xa6>
 8024e14:	2000      	movs	r0, #0
}
 8024e16:	b003      	add	sp, #12
 8024e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8024e1c:	f04f 0c00 	mov.w	ip, #0
 8024e20:	e7f1      	b.n	8024e06 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024e22:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024e26:	4662      	mov	r2, ip
 8024e28:	e7ed      	b.n	8024e06 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024e2a:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024e2e:	2210      	movs	r2, #16
 8024e30:	e7e9      	b.n	8024e06 <mg_str_to_num+0x7a>
  switch (base) {
 8024e32:	2200      	movs	r2, #0
 8024e34:	4611      	mov	r1, r2
 8024e36:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8024e38:	9d01      	ldr	r5, [sp, #4]
 8024e3a:	4565      	cmp	r5, ip
 8024e3c:	f240 80c0 	bls.w	8024fc0 <mg_str_to_num+0x234>
 8024e40:	9d00      	ldr	r5, [sp, #0]
 8024e42:	f815 600c 	ldrb.w	r6, [r5, ip]
 8024e46:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024e4a:	b2ff      	uxtb	r7, r7
 8024e4c:	2f01      	cmp	r7, #1
 8024e4e:	f200 80b7 	bhi.w	8024fc0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024e52:	3e30      	subs	r6, #48	@ 0x30
 8024e54:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8024e58:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8024e5c:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8024e60:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8024e64:	4591      	cmp	r9, r2
 8024e66:	418f      	sbcs	r7, r1
 8024e68:	f0c0 80c5 	bcc.w	8024ff6 <mg_str_to_num+0x26a>
        result *= 2;
 8024e6c:	1892      	adds	r2, r2, r2
 8024e6e:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8024e70:	ebb0 0a06 	subs.w	sl, r0, r6
 8024e74:	eb6e 0708 	sbc.w	r7, lr, r8
 8024e78:	4592      	cmp	sl, r2
 8024e7a:	418f      	sbcs	r7, r1
 8024e7c:	f0c0 80bd 	bcc.w	8024ffa <mg_str_to_num+0x26e>
        result += digit;
 8024e80:	18b2      	adds	r2, r6, r2
 8024e82:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8024e86:	f10c 0c01 	add.w	ip, ip, #1
 8024e8a:	3401      	adds	r4, #1
 8024e8c:	e7d4      	b.n	8024e38 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8024e8e:	f04f 0901 	mov.w	r9, #1
 8024e92:	e017      	b.n	8024ec4 <mg_str_to_num+0x138>
  switch (base) {
 8024e94:	2200      	movs	r2, #0
 8024e96:	4611      	mov	r1, r2
 8024e98:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8024e9a:	9d01      	ldr	r5, [sp, #4]
 8024e9c:	4565      	cmp	r5, ip
 8024e9e:	f240 808f 	bls.w	8024fc0 <mg_str_to_num+0x234>
 8024ea2:	9d00      	ldr	r5, [sp, #0]
 8024ea4:	f815 700c 	ldrb.w	r7, [r5, ip]
 8024ea8:	2f2f      	cmp	r7, #47	@ 0x2f
 8024eaa:	f240 8089 	bls.w	8024fc0 <mg_str_to_num+0x234>
 8024eae:	2f39      	cmp	r7, #57	@ 0x39
 8024eb0:	f200 8086 	bhi.w	8024fc0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024eb4:	3f30      	subs	r7, #48	@ 0x30
 8024eb6:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8024eba:	f04f 0900 	mov.w	r9, #0
 8024ebe:	eb10 060e 	adds.w	r6, r0, lr
 8024ec2:	d2e4      	bcs.n	8024e8e <mg_str_to_num+0x102>
 8024ec4:	444e      	add	r6, r9
 8024ec6:	4d54      	ldr	r5, [pc, #336]	@ (8025018 <mg_str_to_num+0x28c>)
 8024ec8:	fba5 9b06 	umull	r9, fp, r5, r6
 8024ecc:	f02b 0903 	bic.w	r9, fp, #3
 8024ed0:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8024ed4:	eba6 0609 	sub.w	r6, r6, r9
 8024ed8:	1b86      	subs	r6, r0, r6
 8024eda:	f16e 0b00 	sbc.w	fp, lr, #0
 8024ede:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8024ee2:	fb09 f906 	mul.w	r9, r9, r6
 8024ee6:	fb05 990b 	mla	r9, r5, fp, r9
 8024eea:	fba6 6a05 	umull	r6, sl, r6, r5
 8024eee:	44d1      	add	r9, sl
 8024ef0:	0876      	lsrs	r6, r6, #1
 8024ef2:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8024ef6:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8024efa:	4296      	cmp	r6, r2
 8024efc:	eb79 0901 	sbcs.w	r9, r9, r1
 8024f00:	d37d      	bcc.n	8024ffe <mg_str_to_num+0x272>
        result *= 10;
 8024f02:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8024f06:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8024f0a:	0096      	lsls	r6, r2, #2
 8024f0c:	18b2      	adds	r2, r6, r2
 8024f0e:	eb41 0909 	adc.w	r9, r1, r9
 8024f12:	1892      	adds	r2, r2, r2
 8024f14:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8024f18:	ebb0 0a07 	subs.w	sl, r0, r7
 8024f1c:	eb6e 0108 	sbc.w	r1, lr, r8
 8024f20:	4592      	cmp	sl, r2
 8024f22:	eb71 0109 	sbcs.w	r1, r1, r9
 8024f26:	d36c      	bcc.n	8025002 <mg_str_to_num+0x276>
        result += digit;
 8024f28:	18ba      	adds	r2, r7, r2
 8024f2a:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8024f2e:	f10c 0c01 	add.w	ip, ip, #1
 8024f32:	3401      	adds	r4, #1
 8024f34:	e7b1      	b.n	8024e9a <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f36:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8024f3a:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024f3c:	2f05      	cmp	r7, #5
 8024f3e:	d832      	bhi.n	8024fa6 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f40:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024f42:	46b0      	mov	r8, r6
 8024f44:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8024f46:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8024f4a:	bf08      	it	eq
 8024f4c:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8024f50:	d036      	beq.n	8024fc0 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8024f52:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8024f56:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8024f5a:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8024f5e:	4591      	cmp	r9, r2
 8024f60:	418f      	sbcs	r7, r1
 8024f62:	d350      	bcc.n	8025006 <mg_str_to_num+0x27a>
        result *= 16;
 8024f64:	0109      	lsls	r1, r1, #4
 8024f66:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8024f6a:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8024f6c:	ebb0 0908 	subs.w	r9, r0, r8
 8024f70:	eb6e 0706 	sbc.w	r7, lr, r6
 8024f74:	4591      	cmp	r9, r2
 8024f76:	418f      	sbcs	r7, r1
 8024f78:	d347      	bcc.n	802500a <mg_str_to_num+0x27e>
        result += digit;
 8024f7a:	eb18 0202 	adds.w	r2, r8, r2
 8024f7e:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8024f82:	f10c 0c01 	add.w	ip, ip, #1
 8024f86:	3401      	adds	r4, #1
      while (i < str.len) {
 8024f88:	9d01      	ldr	r5, [sp, #4]
 8024f8a:	4565      	cmp	r5, ip
 8024f8c:	d918      	bls.n	8024fc0 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8024f8e:	9d00      	ldr	r5, [sp, #0]
 8024f90:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024f94:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024f98:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f9a:	2f09      	cmp	r7, #9
 8024f9c:	d8cb      	bhi.n	8024f36 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024f9e:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024fa0:	46b0      	mov	r8, r6
 8024fa2:	17f6      	asrs	r6, r6, #31
 8024fa4:	e7cf      	b.n	8024f46 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024fa6:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8024faa:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8024fac:	2f05      	cmp	r7, #5
 8024fae:	d807      	bhi.n	8024fc0 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024fb0:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8024fb2:	46b0      	mov	r8, r6
 8024fb4:	17f6      	asrs	r6, r6, #31
 8024fb6:	e7c6      	b.n	8024f46 <mg_str_to_num+0x1ba>
  switch (base) {
 8024fb8:	2200      	movs	r2, #0
 8024fba:	4611      	mov	r1, r2
 8024fbc:	4614      	mov	r4, r2
 8024fbe:	e7e3      	b.n	8024f88 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8024fc0:	b32c      	cbz	r4, 802500e <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8024fc2:	9801      	ldr	r0, [sp, #4]
 8024fc4:	4560      	cmp	r0, ip
 8024fc6:	d124      	bne.n	8025012 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8024fc8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fca:	2801      	cmp	r0, #1
 8024fcc:	d009      	beq.n	8024fe2 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8024fce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fd0:	2802      	cmp	r0, #2
 8024fd2:	d008      	beq.n	8024fe6 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8024fd4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fd6:	2804      	cmp	r0, #4
 8024fd8:	d008      	beq.n	8024fec <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8024fda:	601a      	str	r2, [r3, #0]
 8024fdc:	6059      	str	r1, [r3, #4]
  return true;
 8024fde:	2001      	movs	r0, #1
 8024fe0:	e719      	b.n	8024e16 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8024fe2:	701a      	strb	r2, [r3, #0]
 8024fe4:	e717      	b.n	8024e16 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8024fe6:	801a      	strh	r2, [r3, #0]
  return true;
 8024fe8:	2001      	movs	r0, #1
 8024fea:	e714      	b.n	8024e16 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024fec:	601a      	str	r2, [r3, #0]
  return true;
 8024fee:	2001      	movs	r0, #1
 8024ff0:	e711      	b.n	8024e16 <mg_str_to_num+0x8a>
  switch (base) {
 8024ff2:	2000      	movs	r0, #0
 8024ff4:	e70f      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8024ff6:	2000      	movs	r0, #0
 8024ff8:	e70d      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024ffa:	2000      	movs	r0, #0
 8024ffc:	e70b      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024ffe:	2000      	movs	r0, #0
 8025000:	e709      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025002:	2000      	movs	r0, #0
 8025004:	e707      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8025006:	2000      	movs	r0, #0
 8025008:	e705      	b.n	8024e16 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802500a:	2000      	movs	r0, #0
 802500c:	e703      	b.n	8024e16 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 802500e:	2000      	movs	r0, #0
 8025010:	e701      	b.n	8024e16 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8025012:	2000      	movs	r0, #0
 8025014:	e6ff      	b.n	8024e16 <mg_str_to_num+0x8a>
 8025016:	bf00      	nop
 8025018:	cccccccd 	.word	0xcccccccd

0802501c <mg_url_decode>:
                  int is_form_url_encoded) {
 802501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025020:	b087      	sub	sp, #28
 8025022:	4606      	mov	r6, r0
 8025024:	460f      	mov	r7, r1
 8025026:	4693      	mov	fp, r2
 8025028:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802502a:	2400      	movs	r4, #0
 802502c:	4623      	mov	r3, r4
 802502e:	e027      	b.n	8025080 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8025030:	f103 0802 	add.w	r8, r3, #2
 8025034:	45b8      	cmp	r8, r7
 8025036:	d241      	bcs.n	80250bc <mg_url_decode+0xa0>
 8025038:	3301      	adds	r3, #1
 802503a:	18f2      	adds	r2, r6, r3
 802503c:	9203      	str	r2, [sp, #12]
 802503e:	5cf0      	ldrb	r0, [r6, r3]
 8025040:	f7fa feaa 	bl	801fd98 <isx>
 8025044:	2800      	cmp	r0, #0
 8025046:	d03c      	beq.n	80250c2 <mg_url_decode+0xa6>
 8025048:	f816 0008 	ldrb.w	r0, [r6, r8]
 802504c:	f7fa fea4 	bl	801fd98 <isx>
 8025050:	2800      	cmp	r0, #0
 8025052:	d039      	beq.n	80250c8 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8025054:	f10d 0a10 	add.w	sl, sp, #16
 8025058:	2202      	movs	r2, #2
 802505a:	9903      	ldr	r1, [sp, #12]
 802505c:	4650      	mov	r0, sl
 802505e:	f7ff f95b 	bl	8024318 <mg_str_n>
 8025062:	2301      	movs	r3, #1
 8025064:	9300      	str	r3, [sp, #0]
 8025066:	eb0b 0304 	add.w	r3, fp, r4
 802506a:	2210      	movs	r2, #16
 802506c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025070:	f7ff fe8c 	bl	8024d8c <mg_str_to_num>
        i += 2;
 8025074:	4643      	mov	r3, r8
 8025076:	e001      	b.n	802507c <mg_url_decode+0x60>
      dst[j] = src[i];
 8025078:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802507c:	3301      	adds	r3, #1
 802507e:	462c      	mov	r4, r5
 8025080:	42bb      	cmp	r3, r7
 8025082:	d20e      	bcs.n	80250a2 <mg_url_decode+0x86>
 8025084:	1c65      	adds	r5, r4, #1
 8025086:	454d      	cmp	r5, r9
 8025088:	d20b      	bcs.n	80250a2 <mg_url_decode+0x86>
    if (src[i] == '%') {
 802508a:	5cf2      	ldrb	r2, [r6, r3]
 802508c:	2a25      	cmp	r2, #37	@ 0x25
 802508e:	d0cf      	beq.n	8025030 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8025090:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025092:	2900      	cmp	r1, #0
 8025094:	d0f0      	beq.n	8025078 <mg_url_decode+0x5c>
 8025096:	2a2b      	cmp	r2, #43	@ 0x2b
 8025098:	d1ee      	bne.n	8025078 <mg_url_decode+0x5c>
      dst[j] = ' ';
 802509a:	2220      	movs	r2, #32
 802509c:	f80b 2004 	strb.w	r2, [fp, r4]
 80250a0:	e7ec      	b.n	802507c <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80250a2:	454c      	cmp	r4, r9
 80250a4:	d202      	bcs.n	80250ac <mg_url_decode+0x90>
 80250a6:	2200      	movs	r2, #0
 80250a8:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80250ac:	42bb      	cmp	r3, r7
 80250ae:	d30e      	bcc.n	80250ce <mg_url_decode+0xb2>
 80250b0:	454c      	cmp	r4, r9
 80250b2:	d20f      	bcs.n	80250d4 <mg_url_decode+0xb8>
 80250b4:	4620      	mov	r0, r4
}
 80250b6:	b007      	add	sp, #28
 80250b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 80250bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250c0:	e7f9      	b.n	80250b6 <mg_url_decode+0x9a>
 80250c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250c6:	e7f6      	b.n	80250b6 <mg_url_decode+0x9a>
 80250c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250cc:	e7f3      	b.n	80250b6 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 80250ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250d2:	e7f0      	b.n	80250b6 <mg_url_decode+0x9a>
 80250d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250d8:	e7ed      	b.n	80250b6 <mg_url_decode+0x9a>

080250da <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 80250da:	b352      	cbz	r2, 8025132 <mg_http_get_var+0x58>
                    size_t dst_len) {
 80250dc:	b570      	push	{r4, r5, r6, lr}
 80250de:	b086      	sub	sp, #24
 80250e0:	4604      	mov	r4, r0
 80250e2:	461d      	mov	r5, r3
 80250e4:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 80250e6:	b10b      	cbz	r3, 80250ec <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80250e8:	2300      	movs	r3, #0
 80250ea:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 80250ec:	b325      	cbz	r5, 8025138 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80250ee:	6823      	ldr	r3, [r4, #0]
 80250f0:	b32b      	cbz	r3, 802513e <mg_http_get_var+0x64>
 80250f2:	b339      	cbz	r1, 8025144 <mg_http_get_var+0x6a>
 80250f4:	6863      	ldr	r3, [r4, #4]
 80250f6:	b343      	cbz	r3, 802514a <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80250f8:	a804      	add	r0, sp, #16
 80250fa:	f7ff f901 	bl	8024300 <mg_str_s>
 80250fe:	9b05      	ldr	r3, [sp, #20]
 8025100:	9300      	str	r3, [sp, #0]
 8025102:	9b04      	ldr	r3, [sp, #16]
 8025104:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025108:	a802      	add	r0, sp, #8
 802510a:	f7ff fbf3 	bl	80248f4 <mg_http_var>
    if (v.buf == NULL) {
 802510e:	9802      	ldr	r0, [sp, #8]
 8025110:	b158      	cbz	r0, 802512a <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8025112:	2301      	movs	r3, #1
 8025114:	9300      	str	r3, [sp, #0]
 8025116:	462b      	mov	r3, r5
 8025118:	4632      	mov	r2, r6
 802511a:	9903      	ldr	r1, [sp, #12]
 802511c:	f7ff ff7e 	bl	802501c <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8025120:	2800      	cmp	r0, #0
 8025122:	da04      	bge.n	802512e <mg_http_get_var+0x54>
 8025124:	f06f 0002 	mvn.w	r0, #2
 8025128:	e001      	b.n	802512e <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 802512a:	f06f 0003 	mvn.w	r0, #3
}
 802512e:	b006      	add	sp, #24
 8025130:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8025132:	f06f 0001 	mvn.w	r0, #1
}
 8025136:	4770      	bx	lr
    len = -2;  // Bad destination
 8025138:	f06f 0001 	mvn.w	r0, #1
 802513c:	e7f7      	b.n	802512e <mg_http_get_var+0x54>
    len = -1;  // Bad source
 802513e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025142:	e7f4      	b.n	802512e <mg_http_get_var+0x54>
 8025144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025148:	e7f1      	b.n	802512e <mg_http_get_var+0x54>
 802514a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 802514e:	e7ee      	b.n	802512e <mg_http_get_var+0x54>

08025150 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8025150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025154:	b0c4      	sub	sp, #272	@ 0x110
 8025156:	4606      	mov	r6, r0
 8025158:	460d      	mov	r5, r1
 802515a:	4617      	mov	r7, r2
 802515c:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 802515e:	493f      	ldr	r1, [pc, #252]	@ (802525c <mg_http_creds+0x10c>)
 8025160:	f7fd fd70 	bl	8022c44 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8025164:	2300      	movs	r3, #0
 8025166:	7023      	strb	r3, [r4, #0]
 8025168:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 802516a:	b1c8      	cbz	r0, 80251a0 <mg_http_creds+0x50>
 802516c:	4680      	mov	r8, r0
 802516e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025172:	f1b9 0f06 	cmp.w	r9, #6
 8025176:	d907      	bls.n	8025188 <mg_http_creds+0x38>
 8025178:	f8d0 a000 	ldr.w	sl, [r0]
 802517c:	2206      	movs	r2, #6
 802517e:	4938      	ldr	r1, [pc, #224]	@ (8025260 <mg_http_creds+0x110>)
 8025180:	4650      	mov	r0, sl
 8025182:	f007 fb99 	bl	802c8b8 <memcmp>
 8025186:	b328      	cbz	r0, 80251d4 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025188:	f1b9 0f07 	cmp.w	r9, #7
 802518c:	d908      	bls.n	80251a0 <mg_http_creds+0x50>
 802518e:	f8d8 5000 	ldr.w	r5, [r8]
 8025192:	2207      	movs	r2, #7
 8025194:	4933      	ldr	r1, [pc, #204]	@ (8025264 <mg_http_creds+0x114>)
 8025196:	4628      	mov	r0, r5
 8025198:	f007 fb8e 	bl	802c8b8 <memcmp>
 802519c:	2800      	cmp	r0, #0
 802519e:	d043      	beq.n	8025228 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 80251a0:	4931      	ldr	r1, [pc, #196]	@ (8025268 <mg_http_creds+0x118>)
 80251a2:	4630      	mov	r0, r6
 80251a4:	f7fd fd4e 	bl	8022c44 <mg_http_get_header>
 80251a8:	4605      	mov	r5, r0
 80251aa:	2800      	cmp	r0, #0
 80251ac:	d04e      	beq.n	802524c <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 80251ae:	220c      	movs	r2, #12
 80251b0:	492e      	ldr	r1, [pc, #184]	@ (802526c <mg_http_creds+0x11c>)
 80251b2:	a842      	add	r0, sp, #264	@ 0x108
 80251b4:	f7ff f8b0 	bl	8024318 <mg_str_n>
 80251b8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80251ba:	9300      	str	r3, [sp, #0]
 80251bc:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80251be:	e895 0006 	ldmia.w	r5, {r1, r2}
 80251c2:	a802      	add	r0, sp, #8
 80251c4:	f7ff f8c8 	bl	8024358 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80251c8:	9b03      	ldr	r3, [sp, #12]
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	d136      	bne.n	802523c <mg_http_creds+0xec>
}
 80251ce:	b044      	add	sp, #272	@ 0x110
 80251d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 80251d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80251d8:	aa02      	add	r2, sp, #8
 80251da:	f1a9 0106 	sub.w	r1, r9, #6
 80251de:	f10a 0006 	add.w	r0, sl, #6
 80251e2:	f7fd fba3 	bl	802292c <mg_base64_decode>
 80251e6:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 80251e8:	4602      	mov	r2, r0
 80251ea:	213a      	movs	r1, #58	@ 0x3a
 80251ec:	a802      	add	r0, sp, #8
 80251ee:	f7eb f807 	bl	8010200 <memchr>
    if (p != NULL) {
 80251f2:	4680      	mov	r8, r0
 80251f4:	2800      	cmp	r0, #0
 80251f6:	d0ea      	beq.n	80251ce <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80251f8:	ab02      	add	r3, sp, #8
 80251fa:	eba0 0a03 	sub.w	sl, r0, r3
 80251fe:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8025270 <mg_http_creds+0x120>
 8025202:	9300      	str	r3, [sp, #0]
 8025204:	4653      	mov	r3, sl
 8025206:	464a      	mov	r2, r9
 8025208:	4639      	mov	r1, r7
 802520a:	4628      	mov	r0, r5
 802520c:	f7fe f9f0 	bl	80235f0 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8025210:	eba6 030a 	sub.w	r3, r6, sl
 8025214:	f108 0201 	add.w	r2, r8, #1
 8025218:	9200      	str	r2, [sp, #0]
 802521a:	3b01      	subs	r3, #1
 802521c:	464a      	mov	r2, r9
 802521e:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025220:	4620      	mov	r0, r4
 8025222:	f7fe f9e5 	bl	80235f0 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8025226:	e7d2      	b.n	80251ce <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8025228:	3507      	adds	r5, #7
 802522a:	9500      	str	r5, [sp, #0]
 802522c:	f1a9 0307 	sub.w	r3, r9, #7
 8025230:	4a0f      	ldr	r2, [pc, #60]	@ (8025270 <mg_http_creds+0x120>)
 8025232:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025234:	4620      	mov	r0, r4
 8025236:	f7fe f9db 	bl	80235f0 <mg_snprintf>
 802523a:	e7c8      	b.n	80251ce <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 802523c:	9a02      	ldr	r2, [sp, #8]
 802523e:	9200      	str	r2, [sp, #0]
 8025240:	4a0b      	ldr	r2, [pc, #44]	@ (8025270 <mg_http_creds+0x120>)
 8025242:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025244:	4620      	mov	r0, r4
 8025246:	f7fe f9d3 	bl	80235f0 <mg_snprintf>
 802524a:	e7c0      	b.n	80251ce <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 802524c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 802524e:	4622      	mov	r2, r4
 8025250:	4906      	ldr	r1, [pc, #24]	@ (802526c <mg_http_creds+0x11c>)
 8025252:	f106 0010 	add.w	r0, r6, #16
 8025256:	f7ff ff40 	bl	80250da <mg_http_get_var>
}
 802525a:	e7b8      	b.n	80251ce <mg_http_creds+0x7e>
 802525c:	0803a5e0 	.word	0x0803a5e0
 8025260:	0803a5f0 	.word	0x0803a5f0
 8025264:	0803a5f8 	.word	0x0803a5f8
 8025268:	0803a600 	.word	0x0803a600
 802526c:	08036a0c 	.word	0x08036a0c
 8025270:	0803a410 	.word	0x0803a410

08025274 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8025274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025278:	b0ae      	sub	sp, #184	@ 0xb8
 802527a:	4604      	mov	r4, r0
 802527c:	460d      	mov	r5, r1
 802527e:	4616      	mov	r6, r2
 8025280:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025282:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025286:	f1b8 0f00 	cmp.w	r8, #0
 802528a:	d04f      	beq.n	802532c <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802528c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802528e:	952b      	str	r5, [sp, #172]	@ 0xac
 8025290:	962c      	str	r6, [sp, #176]	@ 0xb0
 8025292:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8025294:	2300      	movs	r3, #0
 8025296:	9300      	str	r3, [sp, #0]
 8025298:	2380      	movs	r3, #128	@ 0x80
 802529a:	aa07      	add	r2, sp, #28
 802529c:	68e9      	ldr	r1, [r5, #12]
 802529e:	68a8      	ldr	r0, [r5, #8]
 80252a0:	f7ff febc 	bl	802501c <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80252a4:	1e02      	subs	r2, r0, #0
 80252a6:	dd44      	ble.n	8025332 <listdir+0xbe>
 80252a8:	a907      	add	r1, sp, #28
 80252aa:	a805      	add	r0, sp, #20
 80252ac:	f7ff f834 	bl	8024318 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80252b0:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 80252b2:	2a00      	cmp	r2, #0
 80252b4:	d044      	beq.n	8025340 <listdir+0xcc>
 80252b6:	4923      	ldr	r1, [pc, #140]	@ (8025344 <listdir+0xd0>)
 80252b8:	4620      	mov	r0, r4
 80252ba:	f7fe fe71 	bl	8023fa0 <mg_printf>
  off = c->send.len;  // Start of body
 80252be:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80252c0:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 80252c2:	9b05      	ldr	r3, [sp, #20]
 80252c4:	9303      	str	r3, [sp, #12]
 80252c6:	9202      	str	r2, [sp, #8]
 80252c8:	491f      	ldr	r1, [pc, #124]	@ (8025348 <listdir+0xd4>)
 80252ca:	9101      	str	r1, [sp, #4]
 80252cc:	491f      	ldr	r1, [pc, #124]	@ (802534c <listdir+0xd8>)
 80252ce:	9100      	str	r1, [sp, #0]
 80252d0:	491f      	ldr	r1, [pc, #124]	@ (8025350 <listdir+0xdc>)
 80252d2:	4620      	mov	r0, r4
 80252d4:	f7fe fe64 	bl	8023fa0 <mg_printf>
  mg_printf(c, "%s",
 80252d8:	4a1e      	ldr	r2, [pc, #120]	@ (8025354 <listdir+0xe0>)
 80252da:	491f      	ldr	r1, [pc, #124]	@ (8025358 <listdir+0xe4>)
 80252dc:	4620      	mov	r0, r4
 80252de:	f7fe fe5f 	bl	8023fa0 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 80252e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80252e6:	aa2a      	add	r2, sp, #168	@ 0xa8
 80252e8:	491c      	ldr	r1, [pc, #112]	@ (802535c <listdir+0xe8>)
 80252ea:	4638      	mov	r0, r7
 80252ec:	4798      	blx	r3
  mg_printf(c,
 80252ee:	4a1c      	ldr	r2, [pc, #112]	@ (8025360 <listdir+0xec>)
 80252f0:	491c      	ldr	r1, [pc, #112]	@ (8025364 <listdir+0xf0>)
 80252f2:	4620      	mov	r0, r4
 80252f4:	f7fe fe54 	bl	8023fa0 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80252f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80252fa:	1b5b      	subs	r3, r3, r5
 80252fc:	4a1a      	ldr	r2, [pc, #104]	@ (8025368 <listdir+0xf4>)
 80252fe:	210a      	movs	r1, #10
 8025300:	a827      	add	r0, sp, #156	@ 0x9c
 8025302:	f7fe f975 	bl	80235f0 <mg_snprintf>
 8025306:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8025308:	280a      	cmp	r0, #10
 802530a:	d900      	bls.n	802530e <listdir+0x9a>
 802530c:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 802530e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8025310:	3d0c      	subs	r5, #12
 8025312:	a927      	add	r1, sp, #156	@ 0x9c
 8025314:	4428      	add	r0, r5
 8025316:	f008 fd9f 	bl	802de58 <memcpy>
  c->is_resp = 0;                          // Mark response end
 802531a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802531e:	f36f 13c7 	bfc	r3, #7, #1
 8025322:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8025326:	b02e      	add	sp, #184	@ 0xb8
 8025328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802532c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8025370 <listdir+0xfc>
 8025330:	e7ac      	b.n	802528c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025332:	ab05      	add	r3, sp, #20
 8025334:	3508      	adds	r5, #8
 8025336:	e895 0003 	ldmia.w	r5, {r0, r1}
 802533a:	e883 0003 	stmia.w	r3, {r0, r1}
 802533e:	e7b7      	b.n	80252b0 <listdir+0x3c>
  mg_printf(c,
 8025340:	4a0a      	ldr	r2, [pc, #40]	@ (802536c <listdir+0xf8>)
 8025342:	e7b8      	b.n	80252b6 <listdir+0x42>
 8025344:	0803a608 	.word	0x0803a608
 8025348:	0803a7e8 	.word	0x0803a7e8
 802534c:	0803a9ac 	.word	0x0803a9ac
 8025350:	0803a660 	.word	0x0803a660
 8025354:	0803ab74 	.word	0x0803ab74
 8025358:	0803afd8 	.word	0x0803afd8
 802535c:	08026b1d 	.word	0x08026b1d
 8025360:	080384fc 	.word	0x080384fc
 8025364:	0803abc4 	.word	0x0803abc4
 8025368:	0803b288 	.word	0x0803b288
 802536c:	08036c80 	.word	0x08036c80
 8025370:	20000130 	.word	0x20000130

08025374 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8025374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025378:	b087      	sub	sp, #28
 802537a:	461f      	mov	r7, r3
  int i = 0, n = 0;
 802537c:	2300      	movs	r3, #0
 802537e:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025380:	2902      	cmp	r1, #2
 8025382:	dd42      	ble.n	802540a <skip_chunk+0x96>
 8025384:	4606      	mov	r6, r0
 8025386:	460d      	mov	r5, r1
 8025388:	4690      	mov	r8, r2
  int i = 0, n = 0;
 802538a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 802538c:	42ac      	cmp	r4, r5
 802538e:	da05      	bge.n	802539c <skip_chunk+0x28>
 8025390:	5d30      	ldrb	r0, [r6, r4]
 8025392:	f7fb f92c 	bl	80205ee <is_hex_digit>
 8025396:	b108      	cbz	r0, 802539c <skip_chunk+0x28>
 8025398:	3401      	adds	r4, #1
 802539a:	e7f7      	b.n	802538c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 802539c:	2c00      	cmp	r4, #0
 802539e:	d036      	beq.n	802540e <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80253a0:	2c08      	cmp	r4, #8
 80253a2:	dc37      	bgt.n	8025414 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80253a4:	42ac      	cmp	r4, r5
 80253a6:	da38      	bge.n	802541a <skip_chunk+0xa6>
 80253a8:	4622      	mov	r2, r4
 80253aa:	5d33      	ldrb	r3, [r6, r4]
 80253ac:	2b0d      	cmp	r3, #13
 80253ae:	d137      	bne.n	8025420 <skip_chunk+0xac>
 80253b0:	1933      	adds	r3, r6, r4
 80253b2:	785b      	ldrb	r3, [r3, #1]
 80253b4:	2b0a      	cmp	r3, #10
 80253b6:	d136      	bne.n	8025426 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80253b8:	f10d 0910 	add.w	r9, sp, #16
 80253bc:	4631      	mov	r1, r6
 80253be:	4648      	mov	r0, r9
 80253c0:	f7fe ffaa 	bl	8024318 <mg_str_n>
 80253c4:	2304      	movs	r3, #4
 80253c6:	9300      	str	r3, [sp, #0]
 80253c8:	ab03      	add	r3, sp, #12
 80253ca:	2210      	movs	r2, #16
 80253cc:	e899 0003 	ldmia.w	r9, {r0, r1}
 80253d0:	f7ff fcdc 	bl	8024d8c <mg_str_to_num>
 80253d4:	b350      	cbz	r0, 802542c <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80253d6:	9b03      	ldr	r3, [sp, #12]
 80253d8:	2b00      	cmp	r3, #0
 80253da:	db2a      	blt.n	8025432 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80253dc:	1b2d      	subs	r5, r5, r4
 80253de:	3d03      	subs	r5, #3
 80253e0:	42ab      	cmp	r3, r5
 80253e2:	da29      	bge.n	8025438 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80253e4:	4423      	add	r3, r4
 80253e6:	18f2      	adds	r2, r6, r3
 80253e8:	7892      	ldrb	r2, [r2, #2]
 80253ea:	2a0d      	cmp	r2, #13
 80253ec:	d126      	bne.n	802543c <skip_chunk+0xc8>
 80253ee:	441e      	add	r6, r3
 80253f0:	78f3      	ldrb	r3, [r6, #3]
 80253f2:	2b0a      	cmp	r3, #10
 80253f4:	d125      	bne.n	8025442 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 80253f6:	3402      	adds	r4, #2
 80253f8:	f8c8 4000 	str.w	r4, [r8]
 80253fc:	9b03      	ldr	r3, [sp, #12]
 80253fe:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8025400:	441c      	add	r4, r3
 8025402:	1ca0      	adds	r0, r4, #2
}
 8025404:	b007      	add	sp, #28
 8025406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 802540a:	2000      	movs	r0, #0
 802540c:	e7fa      	b.n	8025404 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 802540e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025412:	e7f7      	b.n	8025404 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025418:	e7f4      	b.n	8025404 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 802541a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802541e:	e7f1      	b.n	8025404 <skip_chunk+0x90>
 8025420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025424:	e7ee      	b.n	8025404 <skip_chunk+0x90>
 8025426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802542a:	e7eb      	b.n	8025404 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 802542c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025430:	e7e8      	b.n	8025404 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025436:	e7e5      	b.n	8025404 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025438:	2000      	movs	r0, #0
 802543a:	e7e3      	b.n	8025404 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 802543c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025440:	e7e0      	b.n	8025404 <skip_chunk+0x90>
 8025442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025446:	e7dd      	b.n	8025404 <skip_chunk+0x90>

08025448 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8025448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802544c:	b086      	sub	sp, #24
 802544e:	ac02      	add	r4, sp, #8
 8025450:	e884 0003 	stmia.w	r4, {r0, r1}
 8025454:	4617      	mov	r7, r2
 8025456:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025458:	2400      	movs	r4, #0
 802545a:	4621      	mov	r1, r4
 802545c:	e01c      	b.n	8025498 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802545e:	f101 0805 	add.w	r8, r1, #5
 8025462:	45a8      	cmp	r8, r5
 8025464:	d221      	bcs.n	80254aa <mg_json_unescape+0x62>
 8025466:	185a      	adds	r2, r3, r1
 8025468:	7852      	ldrb	r2, [r2, #1]
 802546a:	2a75      	cmp	r2, #117	@ 0x75
 802546c:	d11d      	bne.n	80254aa <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802546e:	3102      	adds	r1, #2
 8025470:	ad04      	add	r5, sp, #16
 8025472:	2204      	movs	r2, #4
 8025474:	4419      	add	r1, r3
 8025476:	4628      	mov	r0, r5
 8025478:	f7fe ff4e 	bl	8024318 <mg_str_n>
 802547c:	2301      	movs	r3, #1
 802547e:	9300      	str	r3, [sp, #0]
 8025480:	193b      	adds	r3, r7, r4
 8025482:	2210      	movs	r2, #16
 8025484:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025488:	f7ff fc80 	bl	8024d8c <mg_str_to_num>
 802548c:	b308      	cbz	r0, 80254d2 <mg_json_unescape+0x8a>
      i += 5;
 802548e:	4641      	mov	r1, r8
 8025490:	e000      	b.n	8025494 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025492:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025494:	3101      	adds	r1, #1
 8025496:	3401      	adds	r4, #1
 8025498:	9d03      	ldr	r5, [sp, #12]
 802549a:	428d      	cmp	r5, r1
 802549c:	d914      	bls.n	80254c8 <mg_json_unescape+0x80>
 802549e:	42b4      	cmp	r4, r6
 80254a0:	d212      	bcs.n	80254c8 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80254a2:	9b02      	ldr	r3, [sp, #8]
 80254a4:	5c58      	ldrb	r0, [r3, r1]
 80254a6:	285c      	cmp	r0, #92	@ 0x5c
 80254a8:	d0d9      	beq.n	802545e <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80254aa:	285c      	cmp	r0, #92	@ 0x5c
 80254ac:	d1f1      	bne.n	8025492 <mg_json_unescape+0x4a>
 80254ae:	f101 0801 	add.w	r8, r1, #1
 80254b2:	45a8      	cmp	r8, r5
 80254b4:	d2ed      	bcs.n	8025492 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 80254b6:	2100      	movs	r1, #0
 80254b8:	f813 0008 	ldrb.w	r0, [r3, r8]
 80254bc:	f7fb f8bc 	bl	8020638 <json_esc>
      if (c == 0) return false;
 80254c0:	b150      	cbz	r0, 80254d8 <mg_json_unescape+0x90>
      to[j] = c;
 80254c2:	5538      	strb	r0, [r7, r4]
      i++;
 80254c4:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80254c6:	e7e5      	b.n	8025494 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 80254c8:	42b4      	cmp	r4, r6
 80254ca:	d207      	bcs.n	80254dc <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 80254cc:	2300      	movs	r3, #0
 80254ce:	553b      	strb	r3, [r7, r4]
  return true;
 80254d0:	2001      	movs	r0, #1
}
 80254d2:	b006      	add	sp, #24
 80254d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 80254d8:	2000      	movs	r0, #0
 80254da:	e7fa      	b.n	80254d2 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 80254dc:	2000      	movs	r0, #0
 80254de:	e7f8      	b.n	80254d2 <mg_json_unescape+0x8a>

080254e0 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 80254e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80254e2:	b087      	sub	sp, #28
 80254e4:	46ec      	mov	ip, sp
 80254e6:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 80254ea:	2300      	movs	r3, #0
 80254ec:	9303      	str	r3, [sp, #12]
 80254ee:	ab03      	add	r3, sp, #12
 80254f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80254f4:	f7fd fbd6 	bl	8022ca4 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 80254f8:	1e04      	subs	r4, r0, #0
 80254fa:	db25      	blt.n	8025548 <mg_json_get_str+0x68>
 80254fc:	9903      	ldr	r1, [sp, #12]
 80254fe:	2901      	cmp	r1, #1
 8025500:	dd24      	ble.n	802554c <mg_json_get_str+0x6c>
 8025502:	9e00      	ldr	r6, [sp, #0]
 8025504:	5d33      	ldrb	r3, [r6, r4]
 8025506:	2b22      	cmp	r3, #34	@ 0x22
 8025508:	d003      	beq.n	8025512 <mg_json_get_str+0x32>
  char *result = NULL;
 802550a:	2500      	movs	r5, #0
}
 802550c:	4628      	mov	r0, r5
 802550e:	b007      	add	sp, #28
 8025510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025512:	2001      	movs	r0, #1
 8025514:	f7fd f93c 	bl	8022790 <mg_calloc>
 8025518:	4605      	mov	r5, r0
 802551a:	2800      	cmp	r0, #0
 802551c:	d0f6      	beq.n	802550c <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 802551e:	1c61      	adds	r1, r4, #1
 8025520:	9f03      	ldr	r7, [sp, #12]
 8025522:	ac04      	add	r4, sp, #16
 8025524:	1eba      	subs	r2, r7, #2
 8025526:	4431      	add	r1, r6
 8025528:	4620      	mov	r0, r4
 802552a:	f7fe fef5 	bl	8024318 <mg_str_n>
 802552e:	463b      	mov	r3, r7
 8025530:	462a      	mov	r2, r5
 8025532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025536:	f7ff ff87 	bl	8025448 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802553a:	2800      	cmp	r0, #0
 802553c:	d1e6      	bne.n	802550c <mg_json_get_str+0x2c>
      free(result);
 802553e:	4628      	mov	r0, r5
 8025540:	f7f5 fa9c 	bl	801aa7c <vPortFree>
      result = NULL;
 8025544:	2500      	movs	r5, #0
 8025546:	e7e1      	b.n	802550c <mg_json_get_str+0x2c>
  char *result = NULL;
 8025548:	2500      	movs	r5, #0
 802554a:	e7df      	b.n	802550c <mg_json_get_str+0x2c>
 802554c:	2500      	movs	r5, #0
 802554e:	e7dd      	b.n	802550c <mg_json_get_str+0x2c>

08025550 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8025550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025554:	b08a      	sub	sp, #40	@ 0x28
 8025556:	ab02      	add	r3, sp, #8
 8025558:	e883 0003 	stmia.w	r3, {r0, r1}
 802555c:	4617      	mov	r7, r2
  addr->scope_id = 0;
 802555e:	2300      	movs	r3, #0
 8025560:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025562:	2902      	cmp	r1, #2
 8025564:	d904      	bls.n	8025570 <mg_aton6+0x20>
 8025566:	460b      	mov	r3, r1
 8025568:	4602      	mov	r2, r0
 802556a:	7801      	ldrb	r1, [r0, #0]
 802556c:	295b      	cmp	r1, #91	@ 0x5b
 802556e:	d00f      	beq.n	8025590 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025570:	463a      	mov	r2, r7
 8025572:	ab02      	add	r3, sp, #8
 8025574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025578:	f7fe ff40 	bl	80243fc <mg_v4mapped>
 802557c:	4680      	mov	r8, r0
 802557e:	2800      	cmp	r0, #0
 8025580:	f040 8087 	bne.w	8025692 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025584:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025588:	2600      	movs	r6, #0
 802558a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 802558c:	4634      	mov	r4, r6
 802558e:	e020      	b.n	80255d2 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025590:	3201      	adds	r2, #1
 8025592:	9202      	str	r2, [sp, #8]
 8025594:	3b02      	subs	r3, #2
 8025596:	9303      	str	r3, [sp, #12]
 8025598:	e7ea      	b.n	8025570 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802559a:	2300      	movs	r3, #0
 802559c:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 802559e:	1ceb      	adds	r3, r5, #3
 80255a0:	42a3      	cmp	r3, r4
 80255a2:	d376      	bcc.n	8025692 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 80255a4:	1b62      	subs	r2, r4, r5
 80255a6:	f10d 0a18 	add.w	sl, sp, #24
 80255aa:	3201      	adds	r2, #1
 80255ac:	4429      	add	r1, r5
 80255ae:	4650      	mov	r0, sl
 80255b0:	f7fe feb2 	bl	8024318 <mg_str_n>
 80255b4:	2304      	movs	r3, #4
 80255b6:	9300      	str	r3, [sp, #0]
 80255b8:	ab05      	add	r3, sp, #20
 80255ba:	2210      	movs	r2, #16
 80255bc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80255c0:	f7ff fbe4 	bl	8024d8c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80255c4:	9b05      	ldr	r3, [sp, #20]
 80255c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80255ca:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80255cc:	1c72      	adds	r2, r6, #1
 80255ce:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 80255d0:	3401      	adds	r4, #1
 80255d2:	9803      	ldr	r0, [sp, #12]
 80255d4:	42a0      	cmp	r0, r4
 80255d6:	d941      	bls.n	802565c <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80255d8:	9902      	ldr	r1, [sp, #8]
 80255da:	5d0a      	ldrb	r2, [r1, r4]
 80255dc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80255e0:	b2db      	uxtb	r3, r3
 80255e2:	2b09      	cmp	r3, #9
 80255e4:	d9d9      	bls.n	802559a <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80255e6:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 80255ea:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80255ec:	2b05      	cmp	r3, #5
 80255ee:	d9d4      	bls.n	802559a <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80255f0:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 80255f4:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80255f6:	2b05      	cmp	r3, #5
 80255f8:	d9cf      	bls.n	802559a <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 80255fa:	2a3a      	cmp	r2, #58	@ 0x3a
 80255fc:	d119      	bne.n	8025632 <mg_aton6+0xe2>
      j = i + 1;
 80255fe:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8025600:	b12c      	cbz	r4, 802560e <mg_aton6+0xbe>
 8025602:	190b      	adds	r3, r1, r4
 8025604:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025608:	2b3a      	cmp	r3, #58	@ 0x3a
 802560a:	d007      	beq.n	802561c <mg_aton6+0xcc>
        n += 2;
 802560c:	3602      	adds	r6, #2
      if (n > 14) return false;
 802560e:	2e0e      	cmp	r6, #14
 8025610:	d83f      	bhi.n	8025692 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8025612:	1c73      	adds	r3, r6, #1
 8025614:	2200      	movs	r2, #0
 8025616:	54fa      	strb	r2, [r7, r3]
 8025618:	55ba      	strb	r2, [r7, r6]
 802561a:	e7d9      	b.n	80255d0 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802561c:	2c01      	cmp	r4, #1
 802561e:	d906      	bls.n	802562e <mg_aton6+0xde>
 8025620:	4421      	add	r1, r4
 8025622:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8025626:	2b3a      	cmp	r3, #58	@ 0x3a
 8025628:	d033      	beq.n	8025692 <mg_aton6+0x142>
        dc = n;  // Double colon
 802562a:	46b1      	mov	r9, r6
 802562c:	e7ef      	b.n	802560e <mg_aton6+0xbe>
 802562e:	46b1      	mov	r9, r6
 8025630:	e7ed      	b.n	802560e <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8025632:	2a25      	cmp	r2, #37	@ 0x25
 8025634:	d12d      	bne.n	8025692 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8025636:	1c63      	adds	r3, r4, #1
 8025638:	1b02      	subs	r2, r0, r4
 802563a:	ac08      	add	r4, sp, #32
 802563c:	3a01      	subs	r2, #1
 802563e:	4419      	add	r1, r3
 8025640:	4620      	mov	r0, r4
 8025642:	f7fe fe69 	bl	8024318 <mg_str_n>
 8025646:	2301      	movs	r3, #1
 8025648:	9300      	str	r3, [sp, #0]
 802564a:	f107 0312 	add.w	r3, r7, #18
 802564e:	220a      	movs	r2, #10
 8025650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025654:	f7ff fb9a 	bl	8024d8c <mg_str_to_num>
 8025658:	4680      	mov	r8, r0
 802565a:	e01a      	b.n	8025692 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 802565c:	2e0d      	cmp	r6, #13
 802565e:	d814      	bhi.n	802568a <mg_aton6+0x13a>
 8025660:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8025664:	d015      	beq.n	8025692 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8025666:	eba9 0006 	sub.w	r0, r9, r6
 802566a:	300e      	adds	r0, #14
 802566c:	eb07 0409 	add.w	r4, r7, r9
 8025670:	eba6 0209 	sub.w	r2, r6, r9
 8025674:	3202      	adds	r2, #2
 8025676:	4621      	mov	r1, r4
 8025678:	4438      	add	r0, r7
 802567a:	f007 f997 	bl	802c9ac <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802567e:	f1c6 020e 	rsb	r2, r6, #14
 8025682:	2100      	movs	r1, #0
 8025684:	4620      	mov	r0, r4
 8025686:	f007 f9ab 	bl	802c9e0 <memset>
  addr->is_ip6 = true;
 802568a:	f04f 0801 	mov.w	r8, #1
 802568e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025692:	4640      	mov	r0, r8
 8025694:	b00a      	add	sp, #40	@ 0x28
 8025696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802569a <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 802569a:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 802569c:	2400      	movs	r4, #0
 802569e:	600c      	str	r4, [r1, #0]
 80256a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80256a4:	2200      	movs	r2, #0
 80256a6:	2300      	movs	r3, #0
 80256a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80256ac:	9b01      	ldr	r3, [sp, #4]
 80256ae:	618b      	str	r3, [r1, #24]
 80256b0:	9b02      	ldr	r3, [sp, #8]
 80256b2:	61cb      	str	r3, [r1, #28]
 80256b4:	9b03      	ldr	r3, [sp, #12]
 80256b6:	620b      	str	r3, [r1, #32]
 80256b8:	6803      	ldr	r3, [r0, #0]
 80256ba:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 80256bc:	6001      	str	r1, [r0, #0]
}
 80256be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80256c2:	4770      	bx	lr

080256c4 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 80256c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80256c6:	b085      	sub	sp, #20
 80256c8:	4604      	mov	r4, r0
 80256ca:	4616      	mov	r6, r2
 80256cc:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80256ce:	2128      	movs	r1, #40	@ 0x28
 80256d0:	2001      	movs	r0, #1
 80256d2:	f7fd f85d 	bl	8022790 <mg_calloc>
  if (t != NULL) {
 80256d6:	4607      	mov	r7, r0
 80256d8:	b180      	cbz	r0, 80256fc <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 80256da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80256dc:	9302      	str	r3, [sp, #8]
 80256de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256e0:	9301      	str	r3, [sp, #4]
 80256e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80256e4:	9300      	str	r3, [sp, #0]
 80256e6:	4632      	mov	r2, r6
 80256e8:	462b      	mov	r3, r5
 80256ea:	4601      	mov	r1, r0
 80256ec:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80256f0:	f7ff ffd3 	bl	802569a <mg_timer_init>
    t->id = mgr->timerid++;
 80256f4:	6a23      	ldr	r3, [r4, #32]
 80256f6:	1c5a      	adds	r2, r3, #1
 80256f8:	6222      	str	r2, [r4, #32]
 80256fa:	603b      	str	r3, [r7, #0]
}
 80256fc:	4638      	mov	r0, r7
 80256fe:	b005      	add	sp, #20
 8025700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025702:	0000      	movs	r0, r0
 8025704:	0000      	movs	r0, r0
	...

08025708 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8025708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802570c:	4698      	mov	r8, r3
 802570e:	9906      	ldr	r1, [sp, #24]
 8025710:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8025712:	188e      	adds	r6, r1, r2
 8025714:	eb43 0504 	adc.w	r5, r3, r4
 8025718:	6847      	ldr	r7, [r0, #4]
 802571a:	6803      	ldr	r3, [r0, #0]
 802571c:	429e      	cmp	r6, r3
 802571e:	eb75 0707 	sbcs.w	r7, r5, r7
 8025722:	d203      	bcs.n	802572c <mg_timer_expired+0x24>
 8025724:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025768 <mg_timer_expired+0x60>
 8025728:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 802572c:	6847      	ldr	r7, [r0, #4]
 802572e:	6803      	ldr	r3, [r0, #0]
 8025730:	431f      	orrs	r7, r3
 8025732:	d101      	bne.n	8025738 <mg_timer_expired+0x30>
 8025734:	6006      	str	r6, [r0, #0]
 8025736:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8025738:	6807      	ldr	r7, [r0, #0]
 802573a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802573e:	42b9      	cmp	r1, r7
 8025740:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8025744:	d30e      	bcc.n	8025764 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8025746:	1bc9      	subs	r1, r1, r7
 8025748:	eb64 040c 	sbc.w	r4, r4, ip
 802574c:	428a      	cmp	r2, r1
 802574e:	eb78 0404 	sbcs.w	r4, r8, r4
 8025752:	d302      	bcc.n	802575a <mg_timer_expired+0x52>
 8025754:	18be      	adds	r6, r7, r2
 8025756:	eb4c 0508 	adc.w	r5, ip, r8
 802575a:	6006      	str	r6, [r0, #0]
 802575c:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 802575e:	2001      	movs	r0, #1
}
 8025760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8025764:	2000      	movs	r0, #0
 8025766:	e7fb      	b.n	8025760 <mg_timer_expired+0x58>
	...

08025770 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025774:	b082      	sub	sp, #8
 8025776:	4617      	mov	r7, r2
 8025778:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 802577a:	6804      	ldr	r4, [r0, #0]
 802577c:	e019      	b.n	80257b2 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802577e:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025780:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025784:	9700      	str	r7, [sp, #0]
 8025786:	9601      	str	r6, [sp, #4]
 8025788:	f104 0010 	add.w	r0, r4, #16
 802578c:	f7ff ffbc 	bl	8025708 <mg_timer_expired>
    tmp = t->next;
 8025790:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025794:	b905      	cbnz	r5, 8025798 <mg_timer_poll+0x28>
 8025796:	b158      	cbz	r0, 80257b0 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025798:	69a3      	ldr	r3, [r4, #24]
 802579a:	f003 0305 	and.w	r3, r3, #5
 802579e:	2b04      	cmp	r3, #4
 80257a0:	d002      	beq.n	80257a8 <mg_timer_poll+0x38>
      t->fn(t->arg);
 80257a2:	69e3      	ldr	r3, [r4, #28]
 80257a4:	6a20      	ldr	r0, [r4, #32]
 80257a6:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 80257a8:	69a1      	ldr	r1, [r4, #24]
 80257aa:	f041 0104 	orr.w	r1, r1, #4
 80257ae:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80257b0:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 80257b2:	b164      	cbz	r4, 80257ce <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80257b4:	6923      	ldr	r3, [r4, #16]
 80257b6:	6962      	ldr	r2, [r4, #20]
 80257b8:	4313      	orrs	r3, r2
 80257ba:	d1e0      	bne.n	802577e <mg_timer_poll+0xe>
 80257bc:	69a3      	ldr	r3, [r4, #24]
 80257be:	f003 0306 	and.w	r3, r3, #6
 80257c2:	2b02      	cmp	r3, #2
 80257c4:	d001      	beq.n	80257ca <mg_timer_poll+0x5a>
 80257c6:	2500      	movs	r5, #0
 80257c8:	e7da      	b.n	8025780 <mg_timer_poll+0x10>
 80257ca:	2501      	movs	r5, #1
 80257cc:	e7d8      	b.n	8025780 <mg_timer_poll+0x10>
}
 80257ce:	b002      	add	sp, #8
 80257d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080257d4 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80257d4:	b118      	cbz	r0, 80257de <mg_tls_recv+0xa>
 80257d6:	b121      	cbz	r1, 80257e2 <mg_tls_recv+0xe>
 80257d8:	b92a      	cbnz	r2, 80257e6 <mg_tls_recv+0x12>
 80257da:	2000      	movs	r0, #0
 80257dc:	4770      	bx	lr
 80257de:	2000      	movs	r0, #0
 80257e0:	4770      	bx	lr
 80257e2:	2000      	movs	r0, #0
 80257e4:	4770      	bx	lr
 80257e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80257ea:	4770      	bx	lr

080257ec <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80257ec:	b118      	cbz	r0, 80257f6 <mg_tls_send+0xa>
 80257ee:	b121      	cbz	r1, 80257fa <mg_tls_send+0xe>
 80257f0:	b92a      	cbnz	r2, 80257fe <mg_tls_send+0x12>
 80257f2:	2000      	movs	r0, #0
 80257f4:	4770      	bx	lr
 80257f6:	2000      	movs	r0, #0
 80257f8:	4770      	bx	lr
 80257fa:	2000      	movs	r0, #0
 80257fc:	4770      	bx	lr
 80257fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025802:	4770      	bx	lr

08025804 <mg_tls_pending>:
}
 8025804:	2000      	movs	r0, #0
 8025806:	4770      	bx	lr

08025808 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8025808:	b510      	push	{r4, lr}
 802580a:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802580c:	2204      	movs	r2, #4
 802580e:	4918      	ldr	r1, [pc, #96]	@ (8025870 <mg_url_is_ssl+0x68>)
 8025810:	f007 f91b 	bl	802ca4a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025814:	b1f8      	cbz	r0, 8025856 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025816:	2206      	movs	r2, #6
 8025818:	4916      	ldr	r1, [pc, #88]	@ (8025874 <mg_url_is_ssl+0x6c>)
 802581a:	4620      	mov	r0, r4
 802581c:	f007 f915 	bl	802ca4a <strncmp>
 8025820:	b1d8      	cbz	r0, 802585a <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025822:	2206      	movs	r2, #6
 8025824:	4914      	ldr	r1, [pc, #80]	@ (8025878 <mg_url_is_ssl+0x70>)
 8025826:	4620      	mov	r0, r4
 8025828:	f007 f90f 	bl	802ca4a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802582c:	b1b8      	cbz	r0, 802585e <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802582e:	2204      	movs	r2, #4
 8025830:	4912      	ldr	r1, [pc, #72]	@ (802587c <mg_url_is_ssl+0x74>)
 8025832:	4620      	mov	r0, r4
 8025834:	f007 f909 	bl	802ca4a <strncmp>
 8025838:	b198      	cbz	r0, 8025862 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802583a:	2204      	movs	r2, #4
 802583c:	4910      	ldr	r1, [pc, #64]	@ (8025880 <mg_url_is_ssl+0x78>)
 802583e:	4620      	mov	r0, r4
 8025840:	f007 f903 	bl	802ca4a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025844:	b178      	cbz	r0, 8025866 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025846:	2205      	movs	r2, #5
 8025848:	490e      	ldr	r1, [pc, #56]	@ (8025884 <mg_url_is_ssl+0x7c>)
 802584a:	4620      	mov	r0, r4
 802584c:	f007 f8fd 	bl	802ca4a <strncmp>
 8025850:	b958      	cbnz	r0, 802586a <mg_url_is_ssl+0x62>
 8025852:	2001      	movs	r0, #1
 8025854:	e000      	b.n	8025858 <mg_url_is_ssl+0x50>
 8025856:	2001      	movs	r0, #1
}
 8025858:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802585a:	2001      	movs	r0, #1
 802585c:	e7fc      	b.n	8025858 <mg_url_is_ssl+0x50>
 802585e:	2001      	movs	r0, #1
 8025860:	e7fa      	b.n	8025858 <mg_url_is_ssl+0x50>
 8025862:	2001      	movs	r0, #1
 8025864:	e7f8      	b.n	8025858 <mg_url_is_ssl+0x50>
 8025866:	2001      	movs	r0, #1
 8025868:	e7f6      	b.n	8025858 <mg_url_is_ssl+0x50>
 802586a:	2000      	movs	r0, #0
 802586c:	e7f4      	b.n	8025858 <mg_url_is_ssl+0x50>
 802586e:	bf00      	nop
 8025870:	0803ac38 	.word	0x0803ac38
 8025874:	0803ac40 	.word	0x0803ac40
 8025878:	0803ac48 	.word	0x0803ac48
 802587c:	0803ac50 	.word	0x0803ac50
 8025880:	0803ac58 	.word	0x0803ac58
 8025884:	0803ac60 	.word	0x0803ac60

08025888 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025888:	b530      	push	{r4, r5, lr}
 802588a:	b089      	sub	sp, #36	@ 0x24
 802588c:	4604      	mov	r4, r0
 802588e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025890:	a801      	add	r0, sp, #4
 8025892:	f7fb feeb 	bl	802166c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025896:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025898:	b152      	cbz	r2, 80258b0 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 802589a:	9b04      	ldr	r3, [sp, #16]
 802589c:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 802589e:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 80258a0:	9904      	ldr	r1, [sp, #16]
 80258a2:	4429      	add	r1, r5
 80258a4:	4620      	mov	r0, r4
 80258a6:	f7fe fd37 	bl	8024318 <mg_str_n>
}
 80258aa:	4620      	mov	r0, r4
 80258ac:	b009      	add	sp, #36	@ 0x24
 80258ae:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 80258b0:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 80258b2:	b112      	cbz	r2, 80258ba <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 80258b4:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 80258b6:	1ad2      	subs	r2, r2, r3
 80258b8:	e7f2      	b.n	80258a0 <mg_url_host+0x18>
 80258ba:	9a07      	ldr	r2, [sp, #28]
 80258bc:	9b04      	ldr	r3, [sp, #16]
 80258be:	1ad2      	subs	r2, r2, r3
 80258c0:	e7ee      	b.n	80258a0 <mg_url_host+0x18>
	...

080258c4 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 80258c4:	b530      	push	{r4, r5, lr}
 80258c6:	b089      	sub	sp, #36	@ 0x24
 80258c8:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 80258ca:	4601      	mov	r1, r0
 80258cc:	a801      	add	r0, sp, #4
 80258ce:	f7fb fecd 	bl	802166c <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80258d2:	2205      	movs	r2, #5
 80258d4:	491d      	ldr	r1, [pc, #116]	@ (802594c <mg_url_port+0x88>)
 80258d6:	4620      	mov	r0, r4
 80258d8:	f007 f8b7 	bl	802ca4a <strncmp>
 80258dc:	b138      	cbz	r0, 80258ee <mg_url_port+0x2a>
 80258de:	2203      	movs	r2, #3
 80258e0:	491b      	ldr	r1, [pc, #108]	@ (8025950 <mg_url_port+0x8c>)
 80258e2:	4620      	mov	r0, r4
 80258e4:	f007 f8b1 	bl	802ca4a <strncmp>
 80258e8:	b188      	cbz	r0, 802590e <mg_url_port+0x4a>
  unsigned short port = 0;
 80258ea:	2500      	movs	r5, #0
 80258ec:	e000      	b.n	80258f0 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80258ee:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80258f0:	2204      	movs	r2, #4
 80258f2:	4918      	ldr	r1, [pc, #96]	@ (8025954 <mg_url_port+0x90>)
 80258f4:	4620      	mov	r0, r4
 80258f6:	f007 f8a8 	bl	802ca4a <strncmp>
 80258fa:	b150      	cbz	r0, 8025912 <mg_url_port+0x4e>
 80258fc:	2206      	movs	r2, #6
 80258fe:	4916      	ldr	r1, [pc, #88]	@ (8025958 <mg_url_port+0x94>)
 8025900:	4620      	mov	r0, r4
 8025902:	f007 f8a2 	bl	802ca4a <strncmp>
 8025906:	b930      	cbnz	r0, 8025916 <mg_url_port+0x52>
    port = 443;
 8025908:	f240 15bb 	movw	r5, #443	@ 0x1bb
 802590c:	e003      	b.n	8025916 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802590e:	2550      	movs	r5, #80	@ 0x50
 8025910:	e7ee      	b.n	80258f0 <mg_url_port+0x2c>
    port = 443;
 8025912:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8025916:	2205      	movs	r2, #5
 8025918:	4910      	ldr	r1, [pc, #64]	@ (802595c <mg_url_port+0x98>)
 802591a:	4620      	mov	r0, r4
 802591c:	f007 f895 	bl	802ca4a <strncmp>
 8025920:	b908      	cbnz	r0, 8025926 <mg_url_port+0x62>
 8025922:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8025926:	2206      	movs	r2, #6
 8025928:	490d      	ldr	r1, [pc, #52]	@ (8025960 <mg_url_port+0x9c>)
 802592a:	4620      	mov	r0, r4
 802592c:	f007 f88d 	bl	802ca4a <strncmp>
 8025930:	b908      	cbnz	r0, 8025936 <mg_url_port+0x72>
 8025932:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025936:	9805      	ldr	r0, [sp, #20]
 8025938:	b910      	cbnz	r0, 8025940 <mg_url_port+0x7c>
}
 802593a:	4628      	mov	r0, r5
 802593c:	b009      	add	sp, #36	@ 0x24
 802593e:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025940:	4420      	add	r0, r4
 8025942:	f004 fb19 	bl	8029f78 <atoi>
 8025946:	b285      	uxth	r5, r0
 8025948:	e7f7      	b.n	802593a <mg_url_port+0x76>
 802594a:	bf00      	nop
 802594c:	0803ac68 	.word	0x0803ac68
 8025950:	0803ac70 	.word	0x0803ac70
 8025954:	0803ac38 	.word	0x0803ac38
 8025958:	0803ac40 	.word	0x0803ac40
 802595c:	0803ac74 	.word	0x0803ac74
 8025960:	0803ac48 	.word	0x0803ac48

08025964 <mg_bzero>:
  if (buf != NULL) {
 8025964:	4603      	mov	r3, r0
 8025966:	b920      	cbnz	r0, 8025972 <mg_bzero+0xe>
 8025968:	4770      	bx	lr
    while (len--) *buf++ = 0;
 802596a:	2100      	movs	r1, #0
 802596c:	f803 1b01 	strb.w	r1, [r3], #1
 8025970:	4611      	mov	r1, r2
 8025972:	1e4a      	subs	r2, r1, #1
 8025974:	2900      	cmp	r1, #0
 8025976:	d1f8      	bne.n	802596a <mg_bzero+0x6>
}
 8025978:	4770      	bx	lr

0802597a <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802597a:	b538      	push	{r3, r4, r5, lr}
 802597c:	4605      	mov	r5, r0
 802597e:	4608      	mov	r0, r1
 8025980:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8025982:	68aa      	ldr	r2, [r5, #8]
 8025984:	428a      	cmp	r2, r1
 8025986:	d200      	bcs.n	802598a <mg_iobuf_del+0x10>
 8025988:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 802598a:	1903      	adds	r3, r0, r4
 802598c:	429a      	cmp	r2, r3
 802598e:	d200      	bcs.n	8025992 <mg_iobuf_del+0x18>
 8025990:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8025992:	682b      	ldr	r3, [r5, #0]
 8025994:	b133      	cbz	r3, 80259a4 <mg_iobuf_del+0x2a>
 8025996:	1901      	adds	r1, r0, r4
 8025998:	1a12      	subs	r2, r2, r0
 802599a:	1b12      	subs	r2, r2, r4
 802599c:	4419      	add	r1, r3
 802599e:	4418      	add	r0, r3
 80259a0:	f007 f804 	bl	802c9ac <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80259a4:	682b      	ldr	r3, [r5, #0]
 80259a6:	b12b      	cbz	r3, 80259b4 <mg_iobuf_del+0x3a>
 80259a8:	68a8      	ldr	r0, [r5, #8]
 80259aa:	1b00      	subs	r0, r0, r4
 80259ac:	4621      	mov	r1, r4
 80259ae:	4418      	add	r0, r3
 80259b0:	f7ff ffd8 	bl	8025964 <mg_bzero>
  io->len -= len;
 80259b4:	68ab      	ldr	r3, [r5, #8]
 80259b6:	1b1b      	subs	r3, r3, r4
 80259b8:	60ab      	str	r3, [r5, #8]
}
 80259ba:	4620      	mov	r0, r4
 80259bc:	bd38      	pop	{r3, r4, r5, pc}

080259be <mg_random>:
void mg_random(void *buf, size_t len) {
 80259be:	b538      	push	{r3, r4, r5, lr}
 80259c0:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 80259c2:	e006      	b.n	80259d2 <mg_random+0x14>
 80259c4:	f006 fac6 	bl	802bf54 <rand>
 80259c8:	4623      	mov	r3, r4
 80259ca:	f803 0b01 	strb.w	r0, [r3], #1
 80259ce:	461c      	mov	r4, r3
 80259d0:	4629      	mov	r1, r5
 80259d2:	1e4d      	subs	r5, r1, #1
 80259d4:	2900      	cmp	r1, #0
 80259d6:	d1f5      	bne.n	80259c4 <mg_random+0x6>
}
 80259d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080259dc <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 80259dc:	b570      	push	{r4, r5, r6, lr}
 80259de:	4604      	mov	r4, r0
 80259e0:	460d      	mov	r5, r1
  mg_random(buf, len);
 80259e2:	f7ff ffec 	bl	80259be <mg_random>
  for (i = 0; i < len; i++) {
 80259e6:	2100      	movs	r1, #0
 80259e8:	e00a      	b.n	8025a00 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80259ea:	2b33      	cmp	r3, #51	@ 0x33
 80259ec:	d802      	bhi.n	80259f4 <mg_random_str+0x18>
 80259ee:	3327      	adds	r3, #39	@ 0x27
 80259f0:	b2db      	uxtb	r3, r3
 80259f2:	e003      	b.n	80259fc <mg_random_str+0x20>
 80259f4:	3b04      	subs	r3, #4
 80259f6:	b2db      	uxtb	r3, r3
 80259f8:	e000      	b.n	80259fc <mg_random_str+0x20>
 80259fa:	2300      	movs	r3, #0
 80259fc:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 80259fe:	3101      	adds	r1, #1
 8025a00:	42a9      	cmp	r1, r5
 8025a02:	d213      	bcs.n	8025a2c <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8025a04:	1860      	adds	r0, r4, r1
 8025a06:	5c63      	ldrb	r3, [r4, r1]
 8025a08:	085a      	lsrs	r2, r3, #1
 8025a0a:	4e09      	ldr	r6, [pc, #36]	@ (8025a30 <mg_random_str+0x54>)
 8025a0c:	fba6 6202 	umull	r6, r2, r6, r2
 8025a10:	0912      	lsrs	r2, r2, #4
 8025a12:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8025a16:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8025a1a:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025a1c:	1e6a      	subs	r2, r5, #1
 8025a1e:	428a      	cmp	r2, r1
 8025a20:	d0eb      	beq.n	80259fa <mg_random_str+0x1e>
 8025a22:	2b19      	cmp	r3, #25
 8025a24:	d8e1      	bhi.n	80259ea <mg_random_str+0xe>
 8025a26:	3361      	adds	r3, #97	@ 0x61
 8025a28:	b2db      	uxtb	r3, r3
 8025a2a:	e7e7      	b.n	80259fc <mg_random_str+0x20>
}
 8025a2c:	4620      	mov	r0, r4
 8025a2e:	bd70      	pop	{r4, r5, r6, pc}
 8025a30:	84210843 	.word	0x84210843

08025a34 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8025a34:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8025a36:	2300      	movs	r3, #0
 8025a38:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025a3a:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025a3c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8025a40:	021b      	lsls	r3, r3, #8
 8025a42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8025a46:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8025a4e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8025a52:	b002      	add	sp, #8
 8025a54:	4770      	bx	lr
	...

08025a58 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8025a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a5a:	b085      	sub	sp, #20
 8025a5c:	466c      	mov	r4, sp
 8025a5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8025a62:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8025a64:	480b      	ldr	r0, [pc, #44]	@ (8025a94 <mg_atonl+0x3c>)
 8025a66:	f7ff ffe5 	bl	8025a34 <mg_ntohl>
 8025a6a:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025a6c:	ae02      	add	r6, sp, #8
 8025a6e:	490a      	ldr	r1, [pc, #40]	@ (8025a98 <mg_atonl+0x40>)
 8025a70:	4630      	mov	r0, r6
 8025a72:	f7fe fc45 	bl	8024300 <mg_str_s>
 8025a76:	e896 000c 	ldmia.w	r6, {r2, r3}
 8025a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025a7e:	f7fe fd3a 	bl	80244f6 <mg_strcasecmp>
 8025a82:	b928      	cbnz	r0, 8025a90 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8025a84:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8025a86:	2300      	movs	r3, #0
 8025a88:	74eb      	strb	r3, [r5, #19]
  return true;
 8025a8a:	2001      	movs	r0, #1
}
 8025a8c:	b005      	add	sp, #20
 8025a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025a90:	2000      	movs	r0, #0
 8025a92:	e7fb      	b.n	8025a8c <mg_atonl+0x34>
 8025a94:	7f000001 	.word	0x7f000001
 8025a98:	0803ac7c 	.word	0x0803ac7c

08025a9c <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8025a9c:	b510      	push	{r4, lr}
 8025a9e:	b082      	sub	sp, #8
 8025aa0:	466b      	mov	r3, sp
 8025aa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8025aa6:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025aa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025aac:	f7fb fdcf 	bl	802164e <mg_atone>
 8025ab0:	b110      	cbz	r0, 8025ab8 <mg_aton+0x1c>
 8025ab2:	2001      	movs	r0, #1
}
 8025ab4:	b002      	add	sp, #8
 8025ab6:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025ab8:	4622      	mov	r2, r4
 8025aba:	ab02      	add	r3, sp, #8
 8025abc:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ac0:	f7ff ffca 	bl	8025a58 <mg_atonl>
 8025ac4:	b108      	cbz	r0, 8025aca <mg_aton+0x2e>
 8025ac6:	2001      	movs	r0, #1
 8025ac8:	e7f4      	b.n	8025ab4 <mg_aton+0x18>
 8025aca:	4622      	mov	r2, r4
 8025acc:	ab02      	add	r3, sp, #8
 8025ace:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ad2:	f7fb fb37 	bl	8021144 <mg_aton4>
 8025ad6:	b108      	cbz	r0, 8025adc <mg_aton+0x40>
 8025ad8:	2001      	movs	r0, #1
 8025ada:	e7eb      	b.n	8025ab4 <mg_aton+0x18>
         mg_aton6(str, addr);
 8025adc:	4622      	mov	r2, r4
 8025ade:	ab02      	add	r3, sp, #8
 8025ae0:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ae4:	f7ff fd34 	bl	8025550 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025ae8:	2800      	cmp	r0, #0
 8025aea:	d0e3      	beq.n	8025ab4 <mg_aton+0x18>
 8025aec:	2001      	movs	r0, #1
 8025aee:	e7e1      	b.n	8025ab4 <mg_aton+0x18>

08025af0 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025af0:	b570      	push	{r4, r5, r6, lr}
 8025af2:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8025af4:	6800      	ldr	r0, [r0, #0]
 8025af6:	f7ff ff9d 	bl	8025a34 <mg_ntohl>
 8025afa:	4606      	mov	r6, r0
 8025afc:	6860      	ldr	r0, [r4, #4]
 8025afe:	f7ff ff99 	bl	8025a34 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8025b02:	b12e      	cbz	r6, 8025b10 <gettimestamp+0x20>
 8025b04:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8025b08:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8025b0c:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8025b10:	0ef5      	lsrs	r5, r6, #27
 8025b12:	0174      	lsls	r4, r6, #5
 8025b14:	1ba4      	subs	r4, r4, r6
 8025b16:	f165 0500 	sbc.w	r5, r5, #0
 8025b1a:	00ad      	lsls	r5, r5, #2
 8025b1c:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8025b20:	00a4      	lsls	r4, r4, #2
 8025b22:	19a4      	adds	r4, r4, r6
 8025b24:	f145 0500 	adc.w	r5, r5, #0
 8025b28:	00ed      	lsls	r5, r5, #3
 8025b2a:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8025b2e:	00e4      	lsls	r4, r4, #3
 8025b30:	f7ea fd00 	bl	8010534 <__aeabi_ui2d>
 8025b34:	a309      	add	r3, pc, #36	@ (adr r3, 8025b5c <gettimestamp+0x6c>)
 8025b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b3a:	f7ea fe9f 	bl	801087c <__aeabi_ddiv>
 8025b3e:	2200      	movs	r2, #0
 8025b40:	4b05      	ldr	r3, [pc, #20]	@ (8025b58 <gettimestamp+0x68>)
 8025b42:	f7ea fd71 	bl	8010628 <__aeabi_dmul>
 8025b46:	f7eb f933 	bl	8010db0 <__aeabi_d2lz>
 8025b4a:	1820      	adds	r0, r4, r0
}
 8025b4c:	eb45 0101 	adc.w	r1, r5, r1
 8025b50:	bd70      	pop	{r4, r5, r6, pc}
 8025b52:	bf00      	nop
 8025b54:	f3af 8000 	nop.w
 8025b58:	408f4000 	.word	0x408f4000
 8025b5c:	ffe00000 	.word	0xffe00000
 8025b60:	41efffff 	.word	0x41efffff

08025b64 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8025b64:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8025b66:	2300      	movs	r3, #0
 8025b68:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025b6c:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8025b70:	b2c3      	uxtb	r3, r0
 8025b72:	021b      	lsls	r3, r3, #8
}
 8025b74:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025b78:	b002      	add	sp, #8
 8025b7a:	4770      	bx	lr

08025b7c <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025b7c:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025b7e:	e001      	b.n	8025b84 <csumfin+0x8>
 8025b80:	fa13 f080 	uxtah	r0, r3, r0
 8025b84:	0c03      	lsrs	r3, r0, #16
 8025b86:	d1fb      	bne.n	8025b80 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8025b88:	43c0      	mvns	r0, r0
 8025b8a:	b280      	uxth	r0, r0
 8025b8c:	f7ff ffea 	bl	8025b64 <mg_ntohs>
}
 8025b90:	bd08      	pop	{r3, pc}

08025b92 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8025b92:	b508      	push	{r3, lr}
 8025b94:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8025b96:	4601      	mov	r1, r0
 8025b98:	2000      	movs	r0, #0
 8025b9a:	f7fb fb2b 	bl	80211f4 <csumup>
  return csumfin(sum);
 8025b9e:	f7ff ffed 	bl	8025b7c <csumfin>
}
 8025ba2:	bd08      	pop	{r3, pc}

08025ba4 <tx_ip>:
                        size_t plen) {
 8025ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ba6:	4617      	mov	r7, r2
 8025ba8:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025baa:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8025bac:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8025bae:	680b      	ldr	r3, [r1, #0]
 8025bb0:	f845 3b0e 	str.w	r3, [r5], #14
 8025bb4:	888b      	ldrh	r3, [r1, #4]
 8025bb6:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8025bb8:	6803      	ldr	r3, [r0, #0]
 8025bba:	f8c4 3006 	str.w	r3, [r4, #6]
 8025bbe:	8883      	ldrh	r3, [r0, #4]
 8025bc0:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8025bc2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025bc6:	f7ff ffcd 	bl	8025b64 <mg_ntohs>
 8025bca:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8025bcc:	2100      	movs	r1, #0
 8025bce:	f8c4 100e 	str.w	r1, [r4, #14]
 8025bd2:	6069      	str	r1, [r5, #4]
 8025bd4:	60a9      	str	r1, [r5, #8]
 8025bd6:	60e9      	str	r1, [r5, #12]
 8025bd8:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8025bda:	2345      	movs	r3, #69	@ 0x45
 8025bdc:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8025bde:	2340      	movs	r3, #64	@ 0x40
 8025be0:	7523      	strb	r3, [r4, #20]
 8025be2:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8025be4:	9807      	ldr	r0, [sp, #28]
 8025be6:	3014      	adds	r0, #20
 8025be8:	b280      	uxth	r0, r0
 8025bea:	f7ff ffbb 	bl	8025b64 <mg_ntohs>
 8025bee:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025bf0:	2340      	movs	r3, #64	@ 0x40
 8025bf2:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8025bf4:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8025bf6:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025bfa:	9b06      	ldr	r3, [sp, #24]
 8025bfc:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025c00:	2114      	movs	r1, #20
 8025c02:	4628      	mov	r0, r5
 8025c04:	f7ff ffc5 	bl	8025b92 <ipcsum>
 8025c08:	8320      	strh	r0, [r4, #24]
}
 8025c0a:	4628      	mov	r0, r5
 8025c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025c0e <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025c0e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025c10:	781b      	ldrb	r3, [r3, #0]
 8025c12:	2b08      	cmp	r3, #8
 8025c14:	d000      	beq.n	8025c18 <rx_icmp+0xa>
 8025c16:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c1c:	b083      	sub	sp, #12
 8025c1e:	4605      	mov	r5, r0
 8025c20:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025c22:	69ca      	ldr	r2, [r1, #28]
 8025c24:	b11a      	cbz	r2, 8025c2e <rx_icmp+0x20>
 8025c26:	6911      	ldr	r1, [r2, #16]
 8025c28:	6883      	ldr	r3, [r0, #8]
 8025c2a:	4299      	cmp	r1, r3
 8025c2c:	d002      	beq.n	8025c34 <rx_icmp+0x26>
}
 8025c2e:	b003      	add	sp, #12
 8025c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025c34:	6986      	ldr	r6, [r0, #24]
 8025c36:	3e26      	subs	r6, #38	@ 0x26
 8025c38:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8025c3a:	428e      	cmp	r6, r1
 8025c3c:	d300      	bcc.n	8025c40 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025c3e:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8025c40:	6921      	ldr	r1, [r4, #16]
 8025c42:	f106 0804 	add.w	r8, r6, #4
 8025c46:	f8cd 8004 	str.w	r8, [sp, #4]
 8025c4a:	68d2      	ldr	r2, [r2, #12]
 8025c4c:	9200      	str	r2, [sp, #0]
 8025c4e:	2201      	movs	r2, #1
 8025c50:	3106      	adds	r1, #6
 8025c52:	4628      	mov	r0, r5
 8025c54:	f7ff ffa6 	bl	8025ba4 <tx_ip>
 8025c58:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8025c5a:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8025c5e:	2300      	movs	r3, #0
 8025c60:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8025c62:	4632      	mov	r2, r6
 8025c64:	68a1      	ldr	r1, [r4, #8]
 8025c66:	3018      	adds	r0, #24
 8025c68:	f008 f8f6 	bl	802de58 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8025c6c:	4641      	mov	r1, r8
 8025c6e:	4648      	mov	r0, r9
 8025c70:	f7ff ff8f 	bl	8025b92 <ipcsum>
 8025c74:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8025c76:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025c7a:	4628      	mov	r0, r5
 8025c7c:	f7fb facb 	bl	8021216 <ether_output>
}
 8025c80:	e7d5      	b.n	8025c2e <rx_icmp+0x20>

08025c82 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025c82:	b538      	push	{r3, r4, r5, lr}
 8025c84:	4605      	mov	r5, r0
 8025c86:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8025c88:	6a09      	ldr	r1, [r1, #32]
 8025c8a:	798b      	ldrb	r3, [r1, #6]
 8025c8c:	2b01      	cmp	r3, #1
 8025c8e:	d00e      	beq.n	8025cae <rx_ip6+0x2c>
 8025c90:	2b3a      	cmp	r3, #58	@ 0x3a
 8025c92:	d00c      	beq.n	8025cae <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8025c94:	2b11      	cmp	r3, #17
 8025c96:	d110      	bne.n	8025cba <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8025c98:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025c9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8025c9e:	68e3      	ldr	r3, [r4, #12]
 8025ca0:	2b07      	cmp	r3, #7
 8025ca2:	d90a      	bls.n	8025cba <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8025ca4:	3130      	adds	r1, #48	@ 0x30
 8025ca6:	4620      	mov	r0, r4
 8025ca8:	f7fe fbe9 	bl	802447e <mkpay>
 8025cac:	e005      	b.n	8025cba <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8025cae:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025cb2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8025cb4:	68e3      	ldr	r3, [r4, #12]
 8025cb6:	2b03      	cmp	r3, #3
 8025cb8:	d800      	bhi.n	8025cbc <rx_ip6+0x3a>
}
 8025cba:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8025cbc:	312c      	adds	r1, #44	@ 0x2c
 8025cbe:	4620      	mov	r0, r4
 8025cc0:	f7fe fbdd 	bl	802447e <mkpay>
    rx_icmp(ifp, pkt);
 8025cc4:	4621      	mov	r1, r4
 8025cc6:	4628      	mov	r0, r5
 8025cc8:	f7ff ffa1 	bl	8025c0e <rx_icmp>
 8025ccc:	e7f5      	b.n	8025cba <rx_ip6+0x38>

08025cce <tx_udp>:
                   const void *buf, size_t len) {
 8025cce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025cd2:	b083      	sub	sp, #12
 8025cd4:	4606      	mov	r6, r0
 8025cd6:	4698      	mov	r8, r3
 8025cd8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025cda:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8025cdc:	f105 0308 	add.w	r3, r5, #8
 8025ce0:	9301      	str	r3, [sp, #4]
 8025ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ce4:	9300      	str	r3, [sp, #0]
 8025ce6:	4613      	mov	r3, r2
 8025ce8:	2211      	movs	r2, #17
 8025cea:	f7ff ff5b 	bl	8025ba4 <tx_ip>
 8025cee:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025cf0:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8025cf4:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025cf8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025cfc:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025cfe:	f105 0008 	add.w	r0, r5, #8
 8025d02:	b280      	uxth	r0, r0
 8025d04:	f7ff ff2e 	bl	8025b64 <mg_ntohs>
 8025d08:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025d0a:	2000      	movs	r0, #0
 8025d0c:	76a0      	strb	r0, [r4, #26]
 8025d0e:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025d10:	2208      	movs	r2, #8
 8025d12:	4649      	mov	r1, r9
 8025d14:	f7fb fa6e 	bl	80211f4 <csumup>
  cs = csumup(cs, buf, len);
 8025d18:	462a      	mov	r2, r5
 8025d1a:	4639      	mov	r1, r7
 8025d1c:	f7fb fa6a 	bl	80211f4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8025d20:	2204      	movs	r2, #4
 8025d22:	f104 010c 	add.w	r1, r4, #12
 8025d26:	f7fb fa65 	bl	80211f4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8025d2a:	2204      	movs	r2, #4
 8025d2c:	f104 0110 	add.w	r1, r4, #16
 8025d30:	f7fb fa60 	bl	80211f4 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8025d34:	7a63      	ldrb	r3, [r4, #9]
 8025d36:	442b      	add	r3, r5
 8025d38:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8025d3a:	3008      	adds	r0, #8
 8025d3c:	f7ff ff1e 	bl	8025b7c <csumfin>
 8025d40:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8025d42:	462a      	mov	r2, r5
 8025d44:	4639      	mov	r1, r7
 8025d46:	f104 001c 	add.w	r0, r4, #28
 8025d4a:	f006 fe2f 	bl	802c9ac <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8025d4e:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8025d52:	4630      	mov	r0, r6
 8025d54:	f7fb fa5f 	bl	8021216 <ether_output>
}
 8025d58:	b003      	add	sp, #12
 8025d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025d5e <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8025d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d60:	4605      	mov	r5, r0
 8025d62:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025d64:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8025d66:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8025d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025d6c:	f846 3b0e 	str.w	r3, [r6], #14
 8025d70:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8025d72:	6803      	ldr	r3, [r0, #0]
 8025d74:	f8c4 3006 	str.w	r3, [r4, #6]
 8025d78:	8883      	ldrh	r3, [r0, #4]
 8025d7a:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8025d7c:	f640 0006 	movw	r0, #2054	@ 0x806
 8025d80:	f7ff fef0 	bl	8025b64 <mg_ntohs>
 8025d84:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8025d86:	2300      	movs	r3, #0
 8025d88:	f8c4 300e 	str.w	r3, [r4, #14]
 8025d8c:	6073      	str	r3, [r6, #4]
 8025d8e:	60b3      	str	r3, [r6, #8]
 8025d90:	60f3      	str	r3, [r6, #12]
 8025d92:	6133      	str	r3, [r6, #16]
 8025d94:	6173      	str	r3, [r6, #20]
 8025d96:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8025d98:	2001      	movs	r0, #1
 8025d9a:	f7ff fee3 	bl	8025b64 <mg_ntohs>
 8025d9e:	4606      	mov	r6, r0
 8025da0:	81e0      	strh	r0, [r4, #14]
 8025da2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025da6:	f7ff fedd 	bl	8025b64 <mg_ntohs>
 8025daa:	8220      	strh	r0, [r4, #16]
 8025dac:	2306      	movs	r3, #6
 8025dae:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8025db0:	2304      	movs	r3, #4
 8025db2:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8025db4:	82a6      	strh	r6, [r4, #20]
 8025db6:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8025dba:	68ab      	ldr	r3, [r5, #8]
 8025dbc:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8025dbe:	682b      	ldr	r3, [r5, #0]
 8025dc0:	f8c4 3016 	str.w	r3, [r4, #22]
 8025dc4:	88ab      	ldrh	r3, [r5, #4]
 8025dc6:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8025dc8:	212a      	movs	r1, #42	@ 0x2a
 8025dca:	4628      	mov	r0, r5
 8025dcc:	f7fb fa23 	bl	8021216 <ether_output>
}
 8025dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025dd2 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8025dd2:	b510      	push	{r4, lr}
 8025dd4:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8025dd6:	4608      	mov	r0, r1
 8025dd8:	f7ff fd74 	bl	80258c4 <mg_url_port>
 8025ddc:	f7ff fec2 	bl	8025b64 <mg_ntohs>
 8025de0:	8320      	strh	r0, [r4, #24]
}
 8025de2:	2001      	movs	r0, #1
 8025de4:	bd10      	pop	{r4, pc}
	...

08025de8 <tx_dhcp>:
                    bool ciaddr) {
 8025de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dec:	b0c8      	sub	sp, #288	@ 0x120
 8025dee:	4604      	mov	r4, r0
 8025df0:	460e      	mov	r6, r1
 8025df2:	4615      	mov	r5, r2
 8025df4:	4698      	mov	r8, r3
 8025df6:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025dfa:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025dfe:	4917      	ldr	r1, [pc, #92]	@ (8025e5c <tx_dhcp+0x74>)
 8025e00:	a804      	add	r0, sp, #16
 8025e02:	f008 f829 	bl	802de58 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8025e06:	4816      	ldr	r0, [pc, #88]	@ (8025e60 <tx_dhcp+0x78>)
 8025e08:	f7ff fe14 	bl	8025a34 <mg_ntohl>
 8025e0c:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8025e0e:	6820      	ldr	r0, [r4, #0]
 8025e10:	900b      	str	r0, [sp, #44]	@ 0x2c
 8025e12:	88a3      	ldrh	r3, [r4, #4]
 8025e14:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8025e18:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8025e1c:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8025e1e:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8025e20:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8025e22:	a840      	add	r0, sp, #256	@ 0x100
 8025e24:	f008 f818 	bl	802de58 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8025e28:	b107      	cbz	r7, 8025e2c <tx_dhcp+0x44>
 8025e2a:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8025e2c:	2044      	movs	r0, #68	@ 0x44
 8025e2e:	f7ff fe99 	bl	8025b64 <mg_ntohs>
 8025e32:	4607      	mov	r7, r0
 8025e34:	2043      	movs	r0, #67	@ 0x43
 8025e36:	f7ff fe95 	bl	8025b64 <mg_ntohs>
 8025e3a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025e3e:	9303      	str	r3, [sp, #12]
 8025e40:	ab04      	add	r3, sp, #16
 8025e42:	9302      	str	r3, [sp, #8]
 8025e44:	9001      	str	r0, [sp, #4]
 8025e46:	f8cd 8000 	str.w	r8, [sp]
 8025e4a:	463b      	mov	r3, r7
 8025e4c:	462a      	mov	r2, r5
 8025e4e:	4631      	mov	r1, r6
 8025e50:	4620      	mov	r0, r4
 8025e52:	f7ff ff3c 	bl	8025cce <tx_udp>
}
 8025e56:	b048      	add	sp, #288	@ 0x120
 8025e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e5c:	08035d2c 	.word	0x08035d2c
 8025e60:	63825363 	.word	0x63825363

08025e64 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e68:	b0d0      	sub	sp, #320	@ 0x140
 8025e6a:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025e6c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8025e6e:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8025e72:	6809      	ldr	r1, [r1, #0]
 8025e74:	686a      	ldr	r2, [r5, #4]
 8025e76:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8025e7a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8025e7e:	4543      	cmp	r3, r8
 8025e80:	d827      	bhi.n	8025ed2 <rx_dhcp_server+0x6e>
 8025e82:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025e84:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025e88:	495e      	ldr	r1, [pc, #376]	@ (8026004 <rx_dhcp_server+0x1a0>)
 8025e8a:	a80c      	add	r0, sp, #48	@ 0x30
 8025e8c:	f007 ffe4 	bl	802de58 <memcpy>
  res.yiaddr = ifp->ip;
 8025e90:	68b3      	ldr	r3, [r6, #8]
 8025e92:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8025e94:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8025e98:	3301      	adds	r3, #1
 8025e9a:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025e9e:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025ea0:	e002      	b.n	8025ea8 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8025ea2:	7863      	ldrb	r3, [r4, #1]
 8025ea4:	3302      	adds	r3, #2
 8025ea6:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025ea8:	1c63      	adds	r3, r4, #1
 8025eaa:	4543      	cmp	r3, r8
 8025eac:	d20c      	bcs.n	8025ec8 <rx_dhcp_server+0x64>
 8025eae:	7823      	ldrb	r3, [r4, #0]
 8025eb0:	2bff      	cmp	r3, #255	@ 0xff
 8025eb2:	d009      	beq.n	8025ec8 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8025eb4:	2b35      	cmp	r3, #53	@ 0x35
 8025eb6:	d1f4      	bne.n	8025ea2 <rx_dhcp_server+0x3e>
 8025eb8:	7863      	ldrb	r3, [r4, #1]
 8025eba:	2b01      	cmp	r3, #1
 8025ebc:	d1f1      	bne.n	8025ea2 <rx_dhcp_server+0x3e>
 8025ebe:	1ca3      	adds	r3, r4, #2
 8025ec0:	4543      	cmp	r3, r8
 8025ec2:	d2ee      	bcs.n	8025ea2 <rx_dhcp_server+0x3e>
      op = p[2];
 8025ec4:	78a7      	ldrb	r7, [r4, #2]
 8025ec6:	e7ec      	b.n	8025ea2 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8025ec8:	2f01      	cmp	r7, #1
 8025eca:	f000 808a 	beq.w	8025fe2 <rx_dhcp_server+0x17e>
 8025ece:	2f03      	cmp	r7, #3
 8025ed0:	d002      	beq.n	8025ed8 <rx_dhcp_server+0x74>
}
 8025ed2:	b050      	add	sp, #320	@ 0x140
 8025ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025ed8:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8025eda:	2335      	movs	r3, #53	@ 0x35
 8025edc:	f88d 3014 	strb.w	r3, [sp, #20]
 8025ee0:	2301      	movs	r3, #1
 8025ee2:	f88d 3015 	strb.w	r3, [sp, #21]
 8025ee6:	f88d 2016 	strb.w	r2, [sp, #22]
 8025eea:	f88d 3017 	strb.w	r3, [sp, #23]
 8025eee:	2204      	movs	r2, #4
 8025ef0:	f88d 2018 	strb.w	r2, [sp, #24]
 8025ef4:	2300      	movs	r3, #0
 8025ef6:	f88d 3019 	strb.w	r3, [sp, #25]
 8025efa:	f88d 301a 	strb.w	r3, [sp, #26]
 8025efe:	f88d 301b 	strb.w	r3, [sp, #27]
 8025f02:	f88d 301c 	strb.w	r3, [sp, #28]
 8025f06:	2136      	movs	r1, #54	@ 0x36
 8025f08:	f88d 101d 	strb.w	r1, [sp, #29]
 8025f0c:	f88d 201e 	strb.w	r2, [sp, #30]
 8025f10:	f88d 301f 	strb.w	r3, [sp, #31]
 8025f14:	f88d 3020 	strb.w	r3, [sp, #32]
 8025f18:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8025f1c:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8025f20:	230c      	movs	r3, #12
 8025f22:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8025f26:	2303      	movs	r3, #3
 8025f28:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8025f2c:	236d      	movs	r3, #109	@ 0x6d
 8025f2e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8025f32:	2369      	movs	r3, #105	@ 0x69
 8025f34:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8025f38:	2370      	movs	r3, #112	@ 0x70
 8025f3a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8025f3e:	2333      	movs	r3, #51	@ 0x33
 8025f40:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8025f44:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8025f48:	23ff      	movs	r3, #255	@ 0xff
 8025f4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025f4e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8025f52:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025f56:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8025f5a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8025f5e:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8025f62:	f8de 001c 	ldr.w	r0, [lr, #28]
 8025f66:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025f68:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8025f6c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8025f70:	68f3      	ldr	r3, [r6, #12]
 8025f72:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8025f76:	68b3      	ldr	r3, [r6, #8]
 8025f78:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025f7c:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025f80:	ac05      	add	r4, sp, #20
 8025f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025f84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025f88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025f8c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025f90:	f82c 2b02 	strh.w	r2, [ip], #2
 8025f94:	0c12      	lsrs	r2, r2, #16
 8025f96:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8025f9a:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8025f9e:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8025fa0:	f8de 3004 	ldr.w	r3, [lr, #4]
 8025fa4:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8025fa6:	7fb3      	ldrb	r3, [r6, #30]
 8025fa8:	b9eb      	cbnz	r3, 8025fe6 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025faa:	692c      	ldr	r4, [r5, #16]
 8025fac:	3406      	adds	r4, #6
 8025fae:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8025fb2:	2043      	movs	r0, #67	@ 0x43
 8025fb4:	f7ff fdd6 	bl	8025b64 <mg_ntohs>
 8025fb8:	4605      	mov	r5, r0
 8025fba:	2f01      	cmp	r7, #1
 8025fbc:	d01e      	beq.n	8025ffc <rx_dhcp_server+0x198>
 8025fbe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025fc0:	2044      	movs	r0, #68	@ 0x44
 8025fc2:	f7ff fdcf 	bl	8025b64 <mg_ntohs>
 8025fc6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025fca:	9303      	str	r3, [sp, #12]
 8025fcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8025fce:	9302      	str	r3, [sp, #8]
 8025fd0:	9001      	str	r0, [sp, #4]
 8025fd2:	9700      	str	r7, [sp, #0]
 8025fd4:	462b      	mov	r3, r5
 8025fd6:	4642      	mov	r2, r8
 8025fd8:	4621      	mov	r1, r4
 8025fda:	4630      	mov	r0, r6
 8025fdc:	f7ff fe77 	bl	8025cce <tx_udp>
 8025fe0:	e777      	b.n	8025ed2 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025fe2:	2202      	movs	r2, #2
 8025fe4:	e779      	b.n	8025eda <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8025fe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025fe8:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025fea:	692b      	ldr	r3, [r5, #16]
 8025fec:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025ff0:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8025ff4:	895b      	ldrh	r3, [r3, #10]
 8025ff6:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025ffa:	e7d6      	b.n	8025faa <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025ffc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026000:	e7de      	b.n	8025fc0 <rx_dhcp_server+0x15c>
 8026002:	bf00      	nop
 8026004:	08035e3c 	.word	0x08035e3c

08026008 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8026008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802600c:	b08b      	sub	sp, #44	@ 0x2c
 802600e:	4605      	mov	r5, r0
 8026010:	9108      	str	r1, [sp, #32]
 8026012:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026014:	8810      	ldrh	r0, [r2, #0]
 8026016:	f7ff fda5 	bl	8025b64 <mg_ntohs>
 802601a:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802601c:	8860      	ldrh	r0, [r4, #2]
 802601e:	f7ff fda1 	bl	8025b64 <mg_ntohs>
 8026022:	4606      	mov	r6, r0
 8026024:	88a0      	ldrh	r0, [r4, #4]
 8026026:	f7ff fd9d 	bl	8025b64 <mg_ntohs>
 802602a:	4607      	mov	r7, r0
 802602c:	88e0      	ldrh	r0, [r4, #6]
 802602e:	f7ff fd99 	bl	8025b64 <mg_ntohs>
 8026032:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8026034:	8920      	ldrh	r0, [r4, #8]
 8026036:	f7ff fd95 	bl	8025b64 <mg_ntohs>
 802603a:	4681      	mov	r9, r0
 802603c:	8960      	ldrh	r0, [r4, #10]
 802603e:	f7ff fd91 	bl	8025b64 <mg_ntohs>
 8026042:	4682      	mov	sl, r0
 8026044:	89a0      	ldrh	r0, [r4, #12]
 8026046:	f7ff fd8d 	bl	8025b64 <mg_ntohs>
 802604a:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 802604c:	89e0      	ldrh	r0, [r4, #14]
 802604e:	f7ff fd89 	bl	8025b64 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026052:	9006      	str	r0, [sp, #24]
 8026054:	f8cd b014 	str.w	fp, [sp, #20]
 8026058:	f8cd a010 	str.w	sl, [sp, #16]
 802605c:	f8cd 900c 	str.w	r9, [sp, #12]
 8026060:	f8cd 8008 	str.w	r8, [sp, #8]
 8026064:	9701      	str	r7, [sp, #4]
 8026066:	9600      	str	r6, [sp, #0]
 8026068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802606a:	4a04      	ldr	r2, [pc, #16]	@ (802607c <print_ip6+0x74>)
 802606c:	9908      	ldr	r1, [sp, #32]
 802606e:	4628      	mov	r0, r5
 8026070:	f7fd ff28 	bl	8023ec4 <mg_xprintf>
}
 8026074:	b00b      	add	sp, #44	@ 0x2c
 8026076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802607a:	bf00      	nop
 802607c:	0803ac88 	.word	0x0803ac88

08026080 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026080:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026082:	6813      	ldr	r3, [r2, #0]
 8026084:	1d1c      	adds	r4, r3, #4
 8026086:	6014      	str	r4, [r2, #0]
 8026088:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802608a:	7cd3      	ldrb	r3, [r2, #19]
 802608c:	b913      	cbnz	r3, 8026094 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802608e:	f7fd ff29 	bl	8023ee4 <print_ip4>
}
 8026092:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026094:	f7ff ffb8 	bl	8026008 <print_ip6>
 8026098:	e7fb      	b.n	8026092 <mg_print_ip+0x12>
	...

0802609c <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 802609c:	b570      	push	{r4, r5, r6, lr}
 802609e:	b082      	sub	sp, #8
 80260a0:	4604      	mov	r4, r0
 80260a2:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80260a4:	6813      	ldr	r3, [r2, #0]
 80260a6:	1d19      	adds	r1, r3, #4
 80260a8:	6011      	str	r1, [r2, #0]
 80260aa:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80260ac:	8a30      	ldrh	r0, [r6, #16]
 80260ae:	f7ff fd59 	bl	8025b64 <mg_ntohs>
 80260b2:	9001      	str	r0, [sp, #4]
 80260b4:	9600      	str	r6, [sp, #0]
 80260b6:	4b04      	ldr	r3, [pc, #16]	@ (80260c8 <mg_print_ip_port+0x2c>)
 80260b8:	4a04      	ldr	r2, [pc, #16]	@ (80260cc <mg_print_ip_port+0x30>)
 80260ba:	4629      	mov	r1, r5
 80260bc:	4620      	mov	r0, r4
 80260be:	f7fd ff01 	bl	8023ec4 <mg_xprintf>
}
 80260c2:	b002      	add	sp, #8
 80260c4:	bd70      	pop	{r4, r5, r6, pc}
 80260c6:	bf00      	nop
 80260c8:	08026081 	.word	0x08026081
 80260cc:	0803aca4 	.word	0x0803aca4

080260d0 <mg_crc32>:
  crc = ~crc;
 80260d0:	43c0      	mvns	r0, r0
  while (len--) {
 80260d2:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80260d6:	b1e2      	cbz	r2, 8026112 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80260d8:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80260da:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80260de:	ea83 0200 	eor.w	r2, r3, r0
 80260e2:	f002 020f 	and.w	r2, r2, #15
 80260e6:	4c0c      	ldr	r4, [pc, #48]	@ (8026118 <mg_crc32+0x48>)
 80260e8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80260ec:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80260f0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80260f4:	f003 030f 	and.w	r3, r3, #15
 80260f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80260fc:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8026100:	4662      	mov	r2, ip
 8026102:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8026106:	2a00      	cmp	r2, #0
 8026108:	d1e7      	bne.n	80260da <mg_crc32+0xa>
}
 802610a:	43c0      	mvns	r0, r0
 802610c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026110:	4770      	bx	lr
 8026112:	43c0      	mvns	r0, r0
 8026114:	4770      	bx	lr
 8026116:	bf00      	nop
 8026118:	0803b538 	.word	0x0803b538

0802611c <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 802611c:	b530      	push	{r4, r5, lr}
 802611e:	b089      	sub	sp, #36	@ 0x24
 8026120:	ab02      	add	r3, sp, #8
 8026122:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026126:	bb19      	cbnz	r1, 8026170 <mg_check_ip_acl+0x54>
 8026128:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 802612a:	7cd3      	ldrb	r3, [r2, #19]
 802612c:	bb73      	cbnz	r3, 802618c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 802612e:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8026130:	ab02      	add	r3, sp, #8
 8026132:	222c      	movs	r2, #44	@ 0x2c
 8026134:	9200      	str	r2, [sp, #0]
 8026136:	aa06      	add	r2, sp, #24
 8026138:	e893 0003 	ldmia.w	r3, {r0, r1}
 802613c:	f7fe fb9d 	bl	802487a <mg_span>
 8026140:	b1f0      	cbz	r0, 8026180 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026142:	9806      	ldr	r0, [sp, #24]
 8026144:	7803      	ldrb	r3, [r0, #0]
 8026146:	2b2b      	cmp	r3, #43	@ 0x2b
 8026148:	d001      	beq.n	802614e <mg_check_ip_acl+0x32>
 802614a:	2b2d      	cmp	r3, #45	@ 0x2d
 802614c:	d112      	bne.n	8026174 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802614e:	aa05      	add	r2, sp, #20
 8026150:	a904      	add	r1, sp, #16
 8026152:	3001      	adds	r0, #1
 8026154:	f7fc fb82 	bl	802285c <parse_net>
 8026158:	b178      	cbz	r0, 802617a <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 802615a:	4620      	mov	r0, r4
 802615c:	f7ff fc6a 	bl	8025a34 <mg_ntohl>
 8026160:	9b05      	ldr	r3, [sp, #20]
 8026162:	4018      	ands	r0, r3
 8026164:	9b04      	ldr	r3, [sp, #16]
 8026166:	4298      	cmp	r0, r3
 8026168:	d1e2      	bne.n	8026130 <mg_check_ip_acl+0x14>
 802616a:	9b06      	ldr	r3, [sp, #24]
 802616c:	781d      	ldrb	r5, [r3, #0]
 802616e:	e7df      	b.n	8026130 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026170:	252d      	movs	r5, #45	@ 0x2d
 8026172:	e7da      	b.n	802612a <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026178:	e006      	b.n	8026188 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802617a:	f06f 0001 	mvn.w	r0, #1
 802617e:	e003      	b.n	8026188 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026180:	2d2b      	cmp	r5, #43	@ 0x2b
 8026182:	bf14      	ite	ne
 8026184:	2000      	movne	r0, #0
 8026186:	2001      	moveq	r0, #1
}
 8026188:	b009      	add	sp, #36	@ 0x24
 802618a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802618c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026190:	e7fa      	b.n	8026188 <mg_check_ip_acl+0x6c>

08026192 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8026192:	b082      	sub	sp, #8
 8026194:	ab02      	add	r3, sp, #8
 8026196:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802619a:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802619c:	7803      	ldrb	r3, [r0, #0]
 802619e:	2b2e      	cmp	r3, #46	@ 0x2e
 80261a0:	d106      	bne.n	80261b0 <mg_path_is_sane+0x1e>
 80261a2:	7843      	ldrb	r3, [r0, #1]
 80261a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80261a6:	d103      	bne.n	80261b0 <mg_path_is_sane+0x1e>
 80261a8:	2000      	movs	r0, #0
 80261aa:	e015      	b.n	80261d8 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80261ac:	3201      	adds	r2, #1
 80261ae:	3901      	subs	r1, #1
 80261b0:	7813      	ldrb	r3, [r2, #0]
 80261b2:	b183      	cbz	r3, 80261d6 <mg_path_is_sane+0x44>
 80261b4:	b169      	cbz	r1, 80261d2 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80261b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80261b8:	d001      	beq.n	80261be <mg_path_is_sane+0x2c>
 80261ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80261bc:	d1f6      	bne.n	80261ac <mg_path_is_sane+0x1a>
 80261be:	2901      	cmp	r1, #1
 80261c0:	d9f4      	bls.n	80261ac <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80261c2:	7853      	ldrb	r3, [r2, #1]
 80261c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80261c6:	d1f1      	bne.n	80261ac <mg_path_is_sane+0x1a>
 80261c8:	7893      	ldrb	r3, [r2, #2]
 80261ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80261cc:	d1ee      	bne.n	80261ac <mg_path_is_sane+0x1a>
 80261ce:	2000      	movs	r0, #0
 80261d0:	e002      	b.n	80261d8 <mg_path_is_sane+0x46>
  return true;
 80261d2:	2001      	movs	r0, #1
 80261d4:	e000      	b.n	80261d8 <mg_path_is_sane+0x46>
 80261d6:	2001      	movs	r0, #1
}
 80261d8:	b002      	add	sp, #8
 80261da:	4770      	bx	lr

080261dc <mg_millis>:
uint64_t mg_millis(void) {
 80261dc:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80261de:	f7f3 fc23 	bl	8019a28 <xTaskGetTickCount>
}
 80261e2:	2100      	movs	r1, #0
 80261e4:	bd08      	pop	{r3, pc}
	...

080261e8 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80261e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80261ec:	b092      	sub	sp, #72	@ 0x48
 80261ee:	4605      	mov	r5, r0
 80261f0:	460c      	mov	r4, r1
 80261f2:	4616      	mov	r6, r2
 80261f4:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 80261f6:	212f      	movs	r1, #47	@ 0x2f
 80261f8:	4620      	mov	r0, r4
 80261fa:	f006 fc4b 	bl	802ca94 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 80261fe:	4680      	mov	r8, r0
 8026200:	b1a8      	cbz	r0, 802622e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8026202:	f7ff ffeb 	bl	80261dc <mg_millis>
 8026206:	f1b8 0f00 	cmp.w	r8, #0
 802620a:	d001      	beq.n	8026210 <mg_log_prefix+0x28>
 802620c:	f108 0401 	add.w	r4, r8, #1
 8026210:	9705      	str	r7, [sp, #20]
 8026212:	9604      	str	r6, [sp, #16]
 8026214:	9403      	str	r4, [sp, #12]
 8026216:	9502      	str	r5, [sp, #8]
 8026218:	9000      	str	r0, [sp, #0]
 802621a:	9101      	str	r1, [sp, #4]
 802621c:	4a0f      	ldr	r2, [pc, #60]	@ (802625c <mg_log_prefix+0x74>)
 802621e:	2129      	movs	r1, #41	@ 0x29
 8026220:	a807      	add	r0, sp, #28
 8026222:	f7fd f9e5 	bl	80235f0 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8026226:	2827      	cmp	r0, #39	@ 0x27
 8026228:	d90e      	bls.n	8026248 <mg_log_prefix+0x60>
 802622a:	2027      	movs	r0, #39	@ 0x27
 802622c:	e00c      	b.n	8026248 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802622e:	215c      	movs	r1, #92	@ 0x5c
 8026230:	4620      	mov	r0, r4
 8026232:	f006 fc2f 	bl	802ca94 <strrchr>
 8026236:	4680      	mov	r8, r0
 8026238:	e7e3      	b.n	8026202 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802623a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802623e:	446b      	add	r3, sp
 8026240:	2220      	movs	r2, #32
 8026242:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8026246:	3001      	adds	r0, #1
 8026248:	2828      	cmp	r0, #40	@ 0x28
 802624a:	d9f6      	bls.n	802623a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802624c:	1e41      	subs	r1, r0, #1
 802624e:	a807      	add	r0, sp, #28
 8026250:	f7fa fb34 	bl	80208bc <logs>
}
 8026254:	b012      	add	sp, #72	@ 0x48
 8026256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802625a:	bf00      	nop
 802625c:	0803acac 	.word	0x0803acac

08026260 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8026260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026264:	b084      	sub	sp, #16
 8026266:	4605      	mov	r5, r0
 8026268:	460e      	mov	r6, r1
 802626a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802626c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8026270:	2100      	movs	r1, #0
 8026272:	4640      	mov	r0, r8
 8026274:	f006 fbb4 	bl	802c9e0 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026278:	2e0b      	cmp	r6, #11
 802627a:	f240 808b 	bls.w	8026394 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802627e:	88a8      	ldrh	r0, [r5, #4]
 8026280:	f7ff fc70 	bl	8025b64 <mg_ntohs>
 8026284:	2801      	cmp	r0, #1
 8026286:	f200 8089 	bhi.w	802639c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802628a:	88e8      	ldrh	r0, [r5, #6]
 802628c:	f7ff fc6a 	bl	8025b64 <mg_ntohs>
 8026290:	4604      	mov	r4, r0
 8026292:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8026294:	280a      	cmp	r0, #10
 8026296:	d905      	bls.n	80262a4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026298:	4b43      	ldr	r3, [pc, #268]	@ (80263a8 <mg_dns_parse+0x148>)
 802629a:	681b      	ldr	r3, [r3, #0]
 802629c:	2b02      	cmp	r3, #2
 802629e:	dc1a      	bgt.n	80262d6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80262a0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80262a4:	8828      	ldrh	r0, [r5, #0]
 80262a6:	f7ff fc5d 	bl	8025b64 <mg_ntohs>
 80262aa:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80262ae:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80262b0:	2700      	movs	r7, #0
 80262b2:	88a8      	ldrh	r0, [r5, #4]
 80262b4:	f7ff fc56 	bl	8025b64 <mg_ntohs>
 80262b8:	42b8      	cmp	r0, r7
 80262ba:	d91a      	bls.n	80262f2 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80262bc:	ab02      	add	r3, sp, #8
 80262be:	9300      	str	r3, [sp, #0]
 80262c0:	2301      	movs	r3, #1
 80262c2:	4622      	mov	r2, r4
 80262c4:	4631      	mov	r1, r6
 80262c6:	4628      	mov	r0, r5
 80262c8:	f7fc fba4 	bl	8022a14 <mg_dns_parse_rr>
 80262cc:	2800      	cmp	r0, #0
 80262ce:	d067      	beq.n	80263a0 <mg_dns_parse+0x140>
    ofs += n;
 80262d0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80262d2:	3701      	adds	r7, #1
 80262d4:	e7ed      	b.n	80262b2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80262d6:	4b35      	ldr	r3, [pc, #212]	@ (80263ac <mg_dns_parse+0x14c>)
 80262d8:	f240 4293 	movw	r2, #1171	@ 0x493
 80262dc:	4934      	ldr	r1, [pc, #208]	@ (80263b0 <mg_dns_parse+0x150>)
 80262de:	2003      	movs	r0, #3
 80262e0:	f7ff ff82 	bl	80261e8 <mg_log_prefix>
 80262e4:	4621      	mov	r1, r4
 80262e6:	4833      	ldr	r0, [pc, #204]	@ (80263b4 <mg_dns_parse+0x154>)
 80262e8:	f7fd fe2c 	bl	8023f44 <mg_log>
    num_answers = 10;  // Sanity cap
 80262ec:	f04f 090a 	mov.w	r9, #10
 80262f0:	e7d8      	b.n	80262a4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 80262f2:	2700      	movs	r7, #0
 80262f4:	e013      	b.n	802631e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80262f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80262fa:	2a01      	cmp	r2, #1
 80262fc:	d12a      	bne.n	8026354 <mg_dns_parse+0xf4>
 80262fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8026302:	2a01      	cmp	r2, #1
 8026304:	d126      	bne.n	8026354 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8026306:	2300      	movs	r3, #0
 8026308:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802630c:	3c04      	subs	r4, #4
 802630e:	592b      	ldr	r3, [r5, r4]
 8026310:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8026314:	2001      	movs	r0, #1
 8026316:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802631a:	e03c      	b.n	8026396 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802631c:	3701      	adds	r7, #1
 802631e:	454f      	cmp	r7, r9
 8026320:	d236      	bcs.n	8026390 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026322:	ab02      	add	r3, sp, #8
 8026324:	9300      	str	r3, [sp, #0]
 8026326:	2300      	movs	r3, #0
 8026328:	4622      	mov	r2, r4
 802632a:	4631      	mov	r1, r6
 802632c:	4628      	mov	r0, r5
 802632e:	f7fc fb71 	bl	8022a14 <mg_dns_parse_rr>
 8026332:	4682      	mov	sl, r0
 8026334:	b3b0      	cbz	r0, 80263a4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8026336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802633a:	9300      	str	r3, [sp, #0]
 802633c:	f108 0318 	add.w	r3, r8, #24
 8026340:	4622      	mov	r2, r4
 8026342:	4631      	mov	r1, r6
 8026344:	4628      	mov	r0, r5
 8026346:	f7fb fa54 	bl	80217f2 <mg_dns_parse_name>
    ofs += n;
 802634a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802634c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8026350:	2b04      	cmp	r3, #4
 8026352:	d0d0      	beq.n	80262f6 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8026354:	2b10      	cmp	r3, #16
 8026356:	d1e1      	bne.n	802631c <mg_dns_parse+0xbc>
 8026358:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802635c:	2b1c      	cmp	r3, #28
 802635e:	d1dd      	bne.n	802631c <mg_dns_parse+0xbc>
 8026360:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026364:	2b01      	cmp	r3, #1
 8026366:	d1d9      	bne.n	802631c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8026368:	2001      	movs	r0, #1
 802636a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802636e:	3c10      	subs	r4, #16
 8026370:	192b      	adds	r3, r5, r4
 8026372:	592c      	ldr	r4, [r5, r4]
 8026374:	6859      	ldr	r1, [r3, #4]
 8026376:	689a      	ldr	r2, [r3, #8]
 8026378:	68db      	ldr	r3, [r3, #12]
 802637a:	f8c8 4004 	str.w	r4, [r8, #4]
 802637e:	f8c8 1008 	str.w	r1, [r8, #8]
 8026382:	f8c8 200c 	str.w	r2, [r8, #12]
 8026386:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802638a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802638e:	e002      	b.n	8026396 <mg_dns_parse+0x136>
  return true;
 8026390:	2001      	movs	r0, #1
 8026392:	e000      	b.n	8026396 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026394:	2000      	movs	r0, #0
}
 8026396:	b004      	add	sp, #16
 8026398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802639c:	2000      	movs	r0, #0
 802639e:	e7fa      	b.n	8026396 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80263a0:	2000      	movs	r0, #0
 80263a2:	e7f8      	b.n	8026396 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80263a4:	2000      	movs	r0, #0
 80263a6:	e7f6      	b.n	8026396 <mg_dns_parse+0x136>
 80263a8:	2000012c 	.word	0x2000012c
 80263ac:	0803b738 	.word	0x0803b738
 80263b0:	0803acc0 	.word	0x0803acc0
 80263b4:	0803acf0 	.word	0x0803acf0

080263b8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80263b8:	b40e      	push	{r1, r2, r3}
 80263ba:	b510      	push	{r4, lr}
 80263bc:	b093      	sub	sp, #76	@ 0x4c
 80263be:	4604      	mov	r4, r0
 80263c0:	ab15      	add	r3, sp, #84	@ 0x54
 80263c2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80263c6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80263c8:	ab01      	add	r3, sp, #4
 80263ca:	2140      	movs	r1, #64	@ 0x40
 80263cc:	a802      	add	r0, sp, #8
 80263ce:	f7fd fdf7 	bl	8023fc0 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80263d2:	4b11      	ldr	r3, [pc, #68]	@ (8026418 <mg_error+0x60>)
 80263d4:	681b      	ldr	r3, [r3, #0]
 80263d6:	2b00      	cmp	r3, #0
 80263d8:	dc0f      	bgt.n	80263fa <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80263da:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80263de:	f043 0320 	orr.w	r3, r3, #32
 80263e2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80263e6:	aa02      	add	r2, sp, #8
 80263e8:	2100      	movs	r1, #0
 80263ea:	4620      	mov	r0, r4
 80263ec:	f7fc fb61 	bl	8022ab2 <mg_call>
}
 80263f0:	b013      	add	sp, #76	@ 0x4c
 80263f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263f6:	b003      	add	sp, #12
 80263f8:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80263fa:	4b08      	ldr	r3, [pc, #32]	@ (802641c <mg_error+0x64>)
 80263fc:	f240 5253 	movw	r2, #1363	@ 0x553
 8026400:	4907      	ldr	r1, [pc, #28]	@ (8026420 <mg_error+0x68>)
 8026402:	2001      	movs	r0, #1
 8026404:	f7ff fef0 	bl	80261e8 <mg_log_prefix>
 8026408:	ab02      	add	r3, sp, #8
 802640a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802640c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802640e:	4805      	ldr	r0, [pc, #20]	@ (8026424 <mg_error+0x6c>)
 8026410:	f7fd fd98 	bl	8023f44 <mg_log>
 8026414:	e7e1      	b.n	80263da <mg_error+0x22>
 8026416:	bf00      	nop
 8026418:	2000012c 	.word	0x2000012c
 802641c:	0803b714 	.word	0x0803b714
 8026420:	0803acc0 	.word	0x0803acc0
 8026424:	0803ad1c 	.word	0x0803ad1c

08026428 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8026428:	b570      	push	{r4, r5, r6, lr}
 802642a:	b082      	sub	sp, #8
 802642c:	4606      	mov	r6, r0
 802642e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8026430:	6809      	ldr	r1, [r1, #0]
 8026432:	68a5      	ldr	r5, [r4, #8]
 8026434:	6862      	ldr	r2, [r4, #4]
 8026436:	1b52      	subs	r2, r2, r5
 8026438:	4429      	add	r1, r5
 802643a:	f7ff f9cb 	bl	80257d4 <mg_tls_recv>
 802643e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8026440:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026444:	d003      	beq.n	802644e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8026446:	2800      	cmp	r0, #0
 8026448:	dc06      	bgt.n	8026458 <handle_tls_recv+0x30>
}
 802644a:	b002      	add	sp, #8
 802644c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 802644e:	4906      	ldr	r1, [pc, #24]	@ (8026468 <handle_tls_recv+0x40>)
 8026450:	4630      	mov	r0, r6
 8026452:	f7ff ffb1 	bl	80263b8 <mg_error>
 8026456:	e7f8      	b.n	802644a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8026458:	4405      	add	r5, r0
 802645a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 802645c:	aa01      	add	r2, sp, #4
 802645e:	2107      	movs	r1, #7
 8026460:	4630      	mov	r0, r6
 8026462:	f7fc fb26 	bl	8022ab2 <mg_call>
}
 8026466:	e7f0      	b.n	802644a <handle_tls_recv+0x22>
 8026468:	0803ad28 	.word	0x0803ad28

0802646c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026470:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026474:	4607      	mov	r7, r0
 8026476:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026478:	2907      	cmp	r1, #7
 802647a:	f000 80e3 	beq.w	8026644 <http_cb+0x1d8>
 802647e:	2909      	cmp	r1, #9
 8026480:	f000 814a 	beq.w	8026718 <http_cb+0x2ac>
 8026484:	2902      	cmp	r1, #2
 8026486:	f040 80d9 	bne.w	802663c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802648a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802648e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026492:	f023 030b 	bic.w	r3, r3, #11
 8026496:	04db      	lsls	r3, r3, #19
 8026498:	0cdb      	lsrs	r3, r3, #19
 802649a:	2b04      	cmp	r3, #4
 802649c:	f040 80ce 	bne.w	802663c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 80264a0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80264a2:	2b00      	cmp	r3, #0
 80264a4:	f000 80ca 	beq.w	802663c <http_cb+0x1d0>
 80264a8:	f04f 0900 	mov.w	r9, #0
 80264ac:	e0cc      	b.n	8026648 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80264ae:	4b9f      	ldr	r3, [pc, #636]	@ (802672c <http_cb+0x2c0>)
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	2b00      	cmp	r3, #0
 80264b4:	dc11      	bgt.n	80264da <http_cb+0x6e>
        c->is_draining = 1;
 80264b6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80264ba:	f043 0310 	orr.w	r3, r3, #16
 80264be:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80264c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80264c4:	eba3 0109 	sub.w	r1, r3, r9
 80264c8:	2910      	cmp	r1, #16
 80264ca:	bf28      	it	cs
 80264cc:	2110      	movcs	r1, #16
 80264ce:	4620      	mov	r0, r4
 80264d0:	f7fc fe9a 	bl	8023208 <mg_hexdump>
        c->recv.len = 0;
 80264d4:	2300      	movs	r3, #0
 80264d6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 80264d8:	e0b0      	b.n	802663c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80264da:	4b95      	ldr	r3, [pc, #596]	@ (8026730 <http_cb+0x2c4>)
 80264dc:	f640 42a3 	movw	r2, #3235	@ 0xca3
 80264e0:	4994      	ldr	r1, [pc, #592]	@ (8026734 <http_cb+0x2c8>)
 80264e2:	2001      	movs	r0, #1
 80264e4:	f7ff fe80 	bl	80261e8 <mg_log_prefix>
 80264e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80264ea:	4893      	ldr	r0, [pc, #588]	@ (8026738 <http_cb+0x2cc>)
 80264ec:	f7fd fd2a 	bl	8023f44 <mg_log>
 80264f0:	e7e1      	b.n	80264b6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80264f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80264f4:	eba3 0309 	sub.w	r3, r3, r9
 80264f8:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 80264fa:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 80264fc:	9986      	ldr	r1, [sp, #536]	@ 0x218
 80264fe:	1a52      	subs	r2, r2, r1
 8026500:	1a9b      	subs	r3, r3, r2
 8026502:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026504:	e0bf      	b.n	8026686 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8026506:	ad88      	add	r5, sp, #544	@ 0x220
 8026508:	498c      	ldr	r1, [pc, #560]	@ (802673c <http_cb+0x2d0>)
 802650a:	4628      	mov	r0, r5
 802650c:	f7fd fef8 	bl	8024300 <mg_str_s>
 8026510:	e895 000c 	ldmia.w	r5, {r2, r3}
 8026514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026518:	f7fd ffed 	bl	80244f6 <mg_strcasecmp>
 802651c:	4604      	mov	r4, r0
 802651e:	b950      	cbnz	r0, 8026536 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8026520:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8026522:	eb08 0309 	add.w	r3, r8, r9
 8026526:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8026528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802652a:	eba3 0309 	sub.w	r3, r3, r9
 802652e:	eba3 0b08 	sub.w	fp, r3, r8
 8026532:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026534:	e04a      	b.n	80265cc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8026536:	4982      	ldr	r1, [pc, #520]	@ (8026740 <http_cb+0x2d4>)
 8026538:	4638      	mov	r0, r7
 802653a:	f7ff ff3d 	bl	80263b8 <mg_error>
          return;
 802653e:	e07d      	b.n	802663c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8026540:	2205      	movs	r2, #5
 8026542:	4980      	ldr	r1, [pc, #512]	@ (8026744 <http_cb+0x2d8>)
 8026544:	9802      	ldr	r0, [sp, #8]
 8026546:	f7f9 fc05 	bl	801fd54 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802654a:	2800      	cmp	r0, #0
 802654c:	d032      	beq.n	80265b4 <http_cb+0x148>
 802654e:	ac8a      	add	r4, sp, #552	@ 0x228
 8026550:	497d      	ldr	r1, [pc, #500]	@ (8026748 <http_cb+0x2dc>)
 8026552:	4620      	mov	r0, r4
 8026554:	f7fd fed4 	bl	8024300 <mg_str_s>
 8026558:	a902      	add	r1, sp, #8
 802655a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802655e:	c903      	ldmia	r1, {r0, r1}
 8026560:	f7fd ffc9 	bl	80244f6 <mg_strcasecmp>
 8026564:	b9c0      	cbnz	r0, 8026598 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8026566:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8026568:	4a78      	ldr	r2, [pc, #480]	@ (802674c <http_cb+0x2e0>)
 802656a:	4613      	mov	r3, r2
 802656c:	f240 119b 	movw	r1, #411	@ 0x19b
 8026570:	4638      	mov	r0, r7
 8026572:	f7fd fd3b 	bl	8023fec <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026576:	4b6d      	ldr	r3, [pc, #436]	@ (802672c <http_cb+0x2c0>)
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	2b00      	cmp	r3, #0
 802657c:	f340 8092 	ble.w	80266a4 <http_cb+0x238>
 8026580:	4b6b      	ldr	r3, [pc, #428]	@ (8026730 <http_cb+0x2c4>)
 8026582:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026586:	496b      	ldr	r1, [pc, #428]	@ (8026734 <http_cb+0x2c8>)
 8026588:	2001      	movs	r0, #1
 802658a:	f7ff fe2d 	bl	80261e8 <mg_log_prefix>
 802658e:	4970      	ldr	r1, [pc, #448]	@ (8026750 <http_cb+0x2e4>)
 8026590:	4870      	ldr	r0, [pc, #448]	@ (8026754 <http_cb+0x2e8>)
 8026592:	f7fd fcd7 	bl	8023f44 <mg_log>
      if (is_chunked) {
 8026596:	e085      	b.n	80266a4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026598:	ac8c      	add	r4, sp, #560	@ 0x230
 802659a:	496f      	ldr	r1, [pc, #444]	@ (8026758 <http_cb+0x2ec>)
 802659c:	4620      	mov	r0, r4
 802659e:	f7fd feaf 	bl	8024300 <mg_str_s>
 80265a2:	a902      	add	r1, sp, #8
 80265a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80265a8:	c903      	ldmia	r1, {r0, r1}
 80265aa:	f7fd ffa4 	bl	80244f6 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80265ae:	2800      	cmp	r0, #0
 80265b0:	d178      	bne.n	80266a4 <http_cb+0x238>
 80265b2:	e7d8      	b.n	8026566 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 80265b4:	a802      	add	r0, sp, #8
 80265b6:	f7fc fb6f 	bl	8022c98 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 80265ba:	28c7      	cmp	r0, #199	@ 0xc7
 80265bc:	dd72      	ble.n	80266a4 <http_cb+0x238>
 80265be:	28cc      	cmp	r0, #204	@ 0xcc
 80265c0:	d070      	beq.n	80266a4 <http_cb+0x238>
 80265c2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 80265c6:	d1cf      	bne.n	8026568 <http_cb+0xfc>
 80265c8:	e06c      	b.n	80266a4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80265ca:	4406      	add	r6, r0
 80265cc:	ab01      	add	r3, sp, #4
 80265ce:	466a      	mov	r2, sp
 80265d0:	ebab 0106 	sub.w	r1, fp, r6
 80265d4:	19a8      	adds	r0, r5, r6
 80265d6:	f7fe fecd 	bl	8025374 <skip_chunk>
 80265da:	2800      	cmp	r0, #0
 80265dc:	dd02      	ble.n	80265e4 <http_cb+0x178>
 80265de:	9b01      	ldr	r3, [sp, #4]
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	d1f2      	bne.n	80265ca <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80265e4:	b338      	cbz	r0, 8026636 <http_cb+0x1ca>
        if (cl < 0) {
 80265e6:	2800      	cmp	r0, #0
 80265e8:	db21      	blt.n	802662e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80265ea:	2300      	movs	r3, #0
 80265ec:	9383      	str	r3, [sp, #524]	@ 0x20c
 80265ee:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 80265f2:	ab01      	add	r3, sp, #4
 80265f4:	466a      	mov	r2, sp
 80265f6:	ebab 0104 	sub.w	r1, fp, r4
 80265fa:	1928      	adds	r0, r5, r4
 80265fc:	f7fe feba 	bl	8025374 <skip_chunk>
 8026600:	1e06      	subs	r6, r0, #0
 8026602:	dd11      	ble.n	8026628 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8026604:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8026606:	9900      	ldr	r1, [sp, #0]
 8026608:	4421      	add	r1, r4
 802660a:	9a01      	ldr	r2, [sp, #4]
 802660c:	4429      	add	r1, r5
 802660e:	4428      	add	r0, r5
 8026610:	f006 f9cc 	bl	802c9ac <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8026614:	4434      	add	r4, r6
 8026616:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026618:	9b01      	ldr	r3, [sp, #4]
 802661a:	441a      	add	r2, r3
 802661c:	9283      	str	r2, [sp, #524]	@ 0x20c
 802661e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8026620:	441a      	add	r2, r3
 8026622:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8026624:	2b00      	cmp	r3, #0
 8026626:	d1e4      	bne.n	80265f2 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8026628:	4444      	add	r4, r8
 802662a:	44a1      	add	r9, r4
 802662c:	e044      	b.n	80266b8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 802662e:	494b      	ldr	r1, [pc, #300]	@ (802675c <http_cb+0x2f0>)
 8026630:	4638      	mov	r0, r7
 8026632:	f7ff fec1 	bl	80263b8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026636:	f1b9 0f00 	cmp.w	r9, #0
 802663a:	d170      	bne.n	802671e <http_cb+0x2b2>
}
 802663c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8026640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026644:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8026648:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 802664c:	2b00      	cmp	r3, #0
 802664e:	dbf2      	blt.n	8026636 <http_cb+0x1ca>
 8026650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026652:	4549      	cmp	r1, r9
 8026654:	d9ef      	bls.n	8026636 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8026656:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8026658:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 802665a:	aa02      	add	r2, sp, #8
 802665c:	eba1 0109 	sub.w	r1, r1, r9
 8026660:	4620      	mov	r0, r4
 8026662:	f7fd ff77 	bl	8024554 <mg_http_parse>
      if (n < 0) {
 8026666:	f1b0 0800 	subs.w	r8, r0, #0
 802666a:	f6ff af20 	blt.w	80264ae <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802666e:	f1b8 0f00 	cmp.w	r8, #0
 8026672:	d0e0      	beq.n	8026636 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026674:	aa02      	add	r2, sp, #8
 8026676:	210a      	movs	r1, #10
 8026678:	4638      	mov	r0, r7
 802667a:	f7fc fa1a 	bl	8022ab2 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802667e:	f1ba 0f09 	cmp.w	sl, #9
 8026682:	f43f af36 	beq.w	80264f2 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026686:	4936      	ldr	r1, [pc, #216]	@ (8026760 <http_cb+0x2f4>)
 8026688:	a802      	add	r0, sp, #8
 802668a:	f7fc fadb 	bl	8022c44 <mg_http_get_header>
 802668e:	4604      	mov	r4, r0
 8026690:	2800      	cmp	r0, #0
 8026692:	f47f af38 	bne.w	8026506 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026696:	4933      	ldr	r1, [pc, #204]	@ (8026764 <http_cb+0x2f8>)
 8026698:	a802      	add	r0, sp, #8
 802669a:	f7fc fad3 	bl	8022c44 <mg_http_get_header>
 802669e:	2800      	cmp	r0, #0
 80266a0:	f43f af4e 	beq.w	8026540 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 80266a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80266a6:	eba3 0309 	sub.w	r3, r3, r9
 80266aa:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 80266ae:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80266b0:	429a      	cmp	r2, r3
 80266b2:	d8c0      	bhi.n	8026636 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 80266b4:	4490      	add	r8, r2
 80266b6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80266b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80266bc:	f013 0f04 	tst.w	r3, #4
 80266c0:	d005      	beq.n	80266ce <http_cb+0x262>
 80266c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80266c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80266ca:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80266ce:	aa02      	add	r2, sp, #8
 80266d0:	210b      	movs	r1, #11
 80266d2:	4638      	mov	r0, r7
 80266d4:	f7fc f9ed 	bl	8022ab2 <mg_call>
      if (c->is_accepted) {
 80266d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80266dc:	f013 0f04 	tst.w	r3, #4
 80266e0:	d0b2      	beq.n	8026648 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 80266e2:	4921      	ldr	r1, [pc, #132]	@ (8026768 <http_cb+0x2fc>)
 80266e4:	a802      	add	r0, sp, #8
 80266e6:	f7fc faad 	bl	8022c44 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 80266ea:	4605      	mov	r5, r0
 80266ec:	2800      	cmp	r0, #0
 80266ee:	d0ab      	beq.n	8026648 <http_cb+0x1dc>
 80266f0:	ac8e      	add	r4, sp, #568	@ 0x238
 80266f2:	491e      	ldr	r1, [pc, #120]	@ (802676c <http_cb+0x300>)
 80266f4:	4620      	mov	r0, r4
 80266f6:	f7fd fe03 	bl	8024300 <mg_str_s>
 80266fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80266fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026702:	f7fd fef8 	bl	80244f6 <mg_strcasecmp>
 8026706:	2800      	cmp	r0, #0
 8026708:	d19e      	bne.n	8026648 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 802670a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802670e:	f043 0310 	orr.w	r3, r3, #16
 8026712:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8026716:	e78e      	b.n	8026636 <http_cb+0x1ca>
 8026718:	f04f 0900 	mov.w	r9, #0
 802671c:	e794      	b.n	8026648 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802671e:	464a      	mov	r2, r9
 8026720:	2100      	movs	r1, #0
 8026722:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8026726:	f7ff f928 	bl	802597a <mg_iobuf_del>
 802672a:	e787      	b.n	802663c <http_cb+0x1d0>
 802672c:	2000012c 	.word	0x2000012c
 8026730:	0803b70c 	.word	0x0803b70c
 8026734:	0803acc0 	.word	0x0803acc0
 8026738:	0803ad38 	.word	0x0803ad38
 802673c:	0803ad50 	.word	0x0803ad50
 8026740:	0803ad58 	.word	0x0803ad58
 8026744:	0803a4b8 	.word	0x0803a4b8
 8026748:	0803675c 	.word	0x0803675c
 802674c:	08036c80 	.word	0x08036c80
 8026750:	0803ad84 	.word	0x0803ad84
 8026754:	0803afd8 	.word	0x0803afd8
 8026758:	080374a8 	.word	0x080374a8
 802675c:	0803ada8 	.word	0x0803ada8
 8026760:	0803ad60 	.word	0x0803ad60
 8026764:	0803ad74 	.word	0x0803ad74
 8026768:	0803adb8 	.word	0x0803adb8
 802676c:	0803adc4 	.word	0x0803adc4

08026770 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026770:	b082      	sub	sp, #8
 8026772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026776:	b086      	sub	sp, #24
 8026778:	4681      	mov	r9, r0
 802677a:	460e      	mov	r6, r1
 802677c:	4690      	mov	r8, r2
 802677e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026780:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026782:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026784:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026786:	9300      	str	r3, [sp, #0]
 8026788:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802678a:	4a6f      	ldr	r2, [pc, #444]	@ (8026948 <uri_to_path2+0x1d8>)
 802678c:	4639      	mov	r1, r7
 802678e:	4628      	mov	r0, r5
 8026790:	f7fc ff2e 	bl	80235f0 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026794:	1c83      	adds	r3, r0, #2
 8026796:	42bb      	cmp	r3, r7
 8026798:	d227      	bcs.n	80267ea <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802679a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802679e:	2300      	movs	r3, #0
 80267a0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80267a4:	b150      	cbz	r0, 80267bc <uri_to_path2+0x4c>
 80267a6:	182b      	adds	r3, r5, r0
 80267a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80267ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80267ae:	d005      	beq.n	80267bc <uri_to_path2+0x4c>
 80267b0:	1c43      	adds	r3, r0, #1
 80267b2:	222f      	movs	r2, #47	@ 0x2f
 80267b4:	542a      	strb	r2, [r5, r0]
 80267b6:	2200      	movs	r2, #0
 80267b8:	54ea      	strb	r2, [r5, r3]
 80267ba:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 80267bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80267be:	68f1      	ldr	r1, [r6, #12]
 80267c0:	428c      	cmp	r4, r1
 80267c2:	d31c      	bcc.n	80267fe <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 80267c4:	2300      	movs	r3, #0
 80267c6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80267ca:	ac02      	add	r4, sp, #8
 80267cc:	463a      	mov	r2, r7
 80267ce:	4629      	mov	r1, r5
 80267d0:	4620      	mov	r0, r4
 80267d2:	f7fd fda1 	bl	8024318 <mg_str_n>
 80267d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80267da:	f7ff fcda 	bl	8026192 <mg_path_is_sane>
 80267de:	b1c0      	cbz	r0, 8026812 <uri_to_path2+0xa2>
  n = strlen(path);
 80267e0:	4628      	mov	r0, r5
 80267e2:	f7e9 fd5d 	bl	80102a0 <strlen>
 80267e6:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80267e8:	e020      	b.n	802682c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 80267ea:	4b58      	ldr	r3, [pc, #352]	@ (802694c <uri_to_path2+0x1dc>)
 80267ec:	4a58      	ldr	r2, [pc, #352]	@ (8026950 <uri_to_path2+0x1e0>)
 80267ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80267f2:	4648      	mov	r0, r9
 80267f4:	f7fd fbfa 	bl	8023fec <mg_http_reply>
    return -1;
 80267f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80267fc:	e046      	b.n	802688c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 80267fe:	2300      	movs	r3, #0
 8026800:	9300      	str	r3, [sp, #0]
 8026802:	1a3b      	subs	r3, r7, r0
 8026804:	182a      	adds	r2, r5, r0
 8026806:	1b09      	subs	r1, r1, r4
 8026808:	68b0      	ldr	r0, [r6, #8]
 802680a:	4420      	add	r0, r4
 802680c:	f7fe fc06 	bl	802501c <mg_url_decode>
 8026810:	e7d8      	b.n	80267c4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8026812:	4b50      	ldr	r3, [pc, #320]	@ (8026954 <uri_to_path2+0x1e4>)
 8026814:	4a4e      	ldr	r2, [pc, #312]	@ (8026950 <uri_to_path2+0x1e0>)
 8026816:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802681a:	4648      	mov	r0, r9
 802681c:	f7fd fbe6 	bl	8023fec <mg_http_reply>
    return -1;
 8026820:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026824:	e032      	b.n	802688c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026826:	2200      	movs	r2, #0
 8026828:	54ea      	strb	r2, [r5, r3]
 802682a:	461c      	mov	r4, r3
 802682c:	2c01      	cmp	r4, #1
 802682e:	d905      	bls.n	802683c <uri_to_path2+0xcc>
 8026830:	1e63      	subs	r3, r4, #1
 8026832:	f815 c003 	ldrb.w	ip, [r5, r3]
 8026836:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 802683a:	d0f4      	beq.n	8026826 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802683c:	f10d 0a10 	add.w	sl, sp, #16
 8026840:	4945      	ldr	r1, [pc, #276]	@ (8026958 <uri_to_path2+0x1e8>)
 8026842:	4650      	mov	r0, sl
 8026844:	f7fd fd5c 	bl	8024300 <mg_str_s>
 8026848:	e89a 000c 	ldmia.w	sl, {r2, r3}
 802684c:	f106 0108 	add.w	r1, r6, #8
 8026850:	c903      	ldmia	r1, {r0, r1}
 8026852:	f7fd fe26 	bl	80244a2 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8026856:	b1f8      	cbz	r0, 8026898 <uri_to_path2+0x128>
 8026858:	f8d8 3000 	ldr.w	r3, [r8]
 802685c:	2200      	movs	r2, #0
 802685e:	4611      	mov	r1, r2
 8026860:	4628      	mov	r0, r5
 8026862:	4798      	blx	r3
 8026864:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026866:	4b3d      	ldr	r3, [pc, #244]	@ (802695c <uri_to_path2+0x1ec>)
 8026868:	681b      	ldr	r3, [r3, #0]
 802686a:	2b03      	cmp	r3, #3
 802686c:	dc17      	bgt.n	802689e <uri_to_path2+0x12e>
  if (flags == 0) {
 802686e:	f1ba 0f00 	cmp.w	sl, #0
 8026872:	d00b      	beq.n	802688c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026874:	f01a 0104 	ands.w	r1, sl, #4
 8026878:	d007      	beq.n	802688a <uri_to_path2+0x11a>
 802687a:	68f2      	ldr	r2, [r6, #12]
 802687c:	b12a      	cbz	r2, 802688a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802687e:	68b3      	ldr	r3, [r6, #8]
 8026880:	1898      	adds	r0, r3, r2
 8026882:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026886:	282f      	cmp	r0, #47	@ 0x2f
 8026888:	d11b      	bne.n	80268c2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802688a:	bb39      	cbnz	r1, 80268dc <uri_to_path2+0x16c>
}
 802688c:	4650      	mov	r0, sl
 802688e:	b006      	add	sp, #24
 8026890:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026894:	b002      	add	sp, #8
 8026896:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026898:	f04f 0a04 	mov.w	sl, #4
 802689c:	e7e3      	b.n	8026866 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802689e:	4b30      	ldr	r3, [pc, #192]	@ (8026960 <uri_to_path2+0x1f0>)
 80268a0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 80268a4:	492f      	ldr	r1, [pc, #188]	@ (8026964 <uri_to_path2+0x1f4>)
 80268a6:	2004      	movs	r0, #4
 80268a8:	f7ff fc9e 	bl	80261e8 <mg_log_prefix>
 80268ac:	f8cd a004 	str.w	sl, [sp, #4]
 80268b0:	9500      	str	r5, [sp, #0]
 80268b2:	68b3      	ldr	r3, [r6, #8]
 80268b4:	68f2      	ldr	r2, [r6, #12]
 80268b6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 80268ba:	482b      	ldr	r0, [pc, #172]	@ (8026968 <uri_to_path2+0x1f8>)
 80268bc:	f7fd fb42 	bl	8023f44 <mg_log>
 80268c0:	e7d5      	b.n	802686e <uri_to_path2+0xfe>
    mg_printf(c,
 80268c2:	492a      	ldr	r1, [pc, #168]	@ (802696c <uri_to_path2+0x1fc>)
 80268c4:	4648      	mov	r0, r9
 80268c6:	f7fd fb6b 	bl	8023fa0 <mg_printf>
    c->is_resp = 0;
 80268ca:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 80268ce:	f36f 13c7 	bfc	r3, #7, #1
 80268d2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 80268d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80268da:	e7d7      	b.n	802688c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80268dc:	192e      	adds	r6, r5, r4
 80268de:	1b3f      	subs	r7, r7, r4
 80268e0:	4a23      	ldr	r2, [pc, #140]	@ (8026970 <uri_to_path2+0x200>)
 80268e2:	4639      	mov	r1, r7
 80268e4:	4630      	mov	r0, r6
 80268e6:	f7fc fe83 	bl	80235f0 <mg_snprintf>
 80268ea:	b130      	cbz	r0, 80268fa <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80268ec:	f8d8 3000 	ldr.w	r3, [r8]
 80268f0:	2200      	movs	r2, #0
 80268f2:	4611      	mov	r1, r2
 80268f4:	4628      	mov	r0, r5
 80268f6:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80268f8:	bb08      	cbnz	r0, 802693e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80268fa:	4a1e      	ldr	r2, [pc, #120]	@ (8026974 <uri_to_path2+0x204>)
 80268fc:	4639      	mov	r1, r7
 80268fe:	4630      	mov	r0, r6
 8026900:	f7fc fe76 	bl	80235f0 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026904:	b130      	cbz	r0, 8026914 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026906:	f8d8 3000 	ldr.w	r3, [r8]
 802690a:	2200      	movs	r2, #0
 802690c:	4611      	mov	r1, r2
 802690e:	4628      	mov	r0, r5
 8026910:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026912:	b9b0      	cbnz	r0, 8026942 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8026914:	4a18      	ldr	r2, [pc, #96]	@ (8026978 <uri_to_path2+0x208>)
 8026916:	4639      	mov	r1, r7
 8026918:	4630      	mov	r0, r6
 802691a:	f7fc fe69 	bl	80235f0 <mg_snprintf>
 802691e:	b158      	cbz	r0, 8026938 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8026920:	f8d8 3000 	ldr.w	r3, [r8]
 8026924:	2200      	movs	r2, #0
 8026926:	4611      	mov	r1, r2
 8026928:	4628      	mov	r0, r5
 802692a:	4798      	blx	r3
                    0 &&
 802692c:	b120      	cbz	r0, 8026938 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 802692e:	340b      	adds	r4, #11
 8026930:	2200      	movs	r2, #0
 8026932:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8026934:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026936:	e7a9      	b.n	802688c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8026938:	2300      	movs	r3, #0
 802693a:	7033      	strb	r3, [r6, #0]
 802693c:	e7a6      	b.n	802688c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802693e:	4682      	mov	sl, r0
 8026940:	e7a4      	b.n	802688c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026942:	4682      	mov	sl, r0
 8026944:	e7a2      	b.n	802688c <uri_to_path2+0x11c>
 8026946:	bf00      	nop
 8026948:	0803a410 	.word	0x0803a410
 802694c:	0803adcc 	.word	0x0803adcc
 8026950:	08036c80 	.word	0x08036c80
 8026954:	0803ade0 	.word	0x0803ade0
 8026958:	0803a4bc 	.word	0x0803a4bc
 802695c:	2000012c 	.word	0x2000012c
 8026960:	0803b6fc 	.word	0x0803b6fc
 8026964:	0803acc0 	.word	0x0803acc0
 8026968:	0803adf0 	.word	0x0803adf0
 802696c:	0803ae04 	.word	0x0803ae04
 8026970:	0803ae40 	.word	0x0803ae40
 8026974:	0803ae4c 	.word	0x0803ae4c
 8026978:	0803ae5c 	.word	0x0803ae5c

0802697c <uri_to_path>:
                       size_t path_size) {
 802697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026980:	b096      	sub	sp, #88	@ 0x58
 8026982:	4606      	mov	r6, r0
 8026984:	460d      	mov	r5, r1
 8026986:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026988:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802698c:	f1b8 0f00 	cmp.w	r8, #0
 8026990:	d069      	beq.n	8026a66 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8026992:	6811      	ldr	r1, [r2, #0]
 8026994:	a80c      	add	r0, sp, #48	@ 0x30
 8026996:	f7fd fcb3 	bl	8024300 <mg_str_s>
 802699a:	2300      	movs	r3, #0
 802699c:	930a      	str	r3, [sp, #40]	@ 0x28
 802699e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80269a0:	ab08      	add	r3, sp, #32
 80269a2:	aa0a      	add	r2, sp, #40	@ 0x28
 80269a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80269a8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80269ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80269ae:	222c      	movs	r2, #44	@ 0x2c
 80269b0:	9200      	str	r2, [sp, #0]
 80269b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80269b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80269b8:	f7fd ff5f 	bl	802487a <mg_span>
 80269bc:	2800      	cmp	r0, #0
 80269be:	d055      	beq.n	8026a6c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80269c0:	233d      	movs	r3, #61	@ 0x3d
 80269c2:	9300      	str	r3, [sp, #0]
 80269c4:	ab10      	add	r3, sp, #64	@ 0x40
 80269c6:	aa12      	add	r2, sp, #72	@ 0x48
 80269c8:	ac0e      	add	r4, sp, #56	@ 0x38
 80269ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269ce:	f7fd ff54 	bl	802487a <mg_span>
 80269d2:	b978      	cbnz	r0, 80269f4 <uri_to_path+0x78>
 80269d4:	ab12      	add	r3, sp, #72	@ 0x48
 80269d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80269da:	e883 0003 	stmia.w	r3, {r0, r1}
 80269de:	ac06      	add	r4, sp, #24
 80269e0:	2200      	movs	r2, #0
 80269e2:	4611      	mov	r1, r2
 80269e4:	4620      	mov	r0, r4
 80269e6:	f7fd fc97 	bl	8024318 <mg_str_n>
 80269ea:	ab10      	add	r3, sp, #64	@ 0x40
 80269ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269f0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 80269f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80269f6:	b9c3      	cbnz	r3, 8026a2a <uri_to_path+0xae>
 80269f8:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 80269fc:	ac12      	add	r4, sp, #72	@ 0x48
 80269fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026a02:	e889 0003 	stmia.w	r9, {r0, r1}
 8026a06:	f10d 0a18 	add.w	sl, sp, #24
 8026a0a:	4922      	ldr	r1, [pc, #136]	@ (8026a94 <uri_to_path+0x118>)
 8026a0c:	4650      	mov	r0, sl
 8026a0e:	f7fd fc77 	bl	8024300 <mg_str_s>
 8026a12:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8026a16:	e884 0003 	stmia.w	r4, {r0, r1}
 8026a1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a20:	ab08      	add	r3, sp, #32
 8026a22:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026a26:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8026a2a:	68eb      	ldr	r3, [r5, #12]
 8026a2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026a2e:	4293      	cmp	r3, r2
 8026a30:	d3bc      	bcc.n	80269ac <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8026a32:	ac14      	add	r4, sp, #80	@ 0x50
 8026a34:	68a9      	ldr	r1, [r5, #8]
 8026a36:	4620      	mov	r0, r4
 8026a38:	f7fd fc6e 	bl	8024318 <mg_str_n>
 8026a3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026a40:	a912      	add	r1, sp, #72	@ 0x48
 8026a42:	c903      	ldmia	r1, {r0, r1}
 8026a44:	f7fd fd2d 	bl	80244a2 <mg_strcmp>
 8026a48:	2800      	cmp	r0, #0
 8026a4a:	d1af      	bne.n	80269ac <uri_to_path+0x30>
    u = k, p = v;
 8026a4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a4e:	aa12      	add	r2, sp, #72	@ 0x48
 8026a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a54:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a58:	ab08      	add	r3, sp, #32
 8026a5a:	aa10      	add	r2, sp, #64	@ 0x40
 8026a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a60:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a64:	e7a2      	b.n	80269ac <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026a66:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8026a98 <uri_to_path+0x11c>
 8026a6a:	e792      	b.n	8026992 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8026a6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026a6e:	9304      	str	r3, [sp, #16]
 8026a70:	9703      	str	r7, [sp, #12]
 8026a72:	ab01      	add	r3, sp, #4
 8026a74:	aa08      	add	r2, sp, #32
 8026a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a80:	9300      	str	r3, [sp, #0]
 8026a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a84:	4642      	mov	r2, r8
 8026a86:	4629      	mov	r1, r5
 8026a88:	4630      	mov	r0, r6
 8026a8a:	f7ff fe71 	bl	8026770 <uri_to_path2>
}
 8026a8e:	b016      	add	sp, #88	@ 0x58
 8026a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a94:	0803a4bc 	.word	0x0803a4bc
 8026a98:	20000130 	.word	0x20000130

08026a9c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8026a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026aa0:	b0a7      	sub	sp, #156	@ 0x9c
 8026aa2:	4607      	mov	r7, r0
 8026aa4:	460e      	mov	r6, r1
 8026aa6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8026aa8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8026aac:	2380      	movs	r3, #128	@ 0x80
 8026aae:	9300      	str	r3, [sp, #0]
 8026ab0:	ab02      	add	r3, sp, #8
 8026ab2:	f7ff ff63 	bl	802697c <uri_to_path>
  if (flags < 0) {
 8026ab6:	2800      	cmp	r0, #0
 8026ab8:	db20      	blt.n	8026afc <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8026aba:	f010 0f04 	tst.w	r0, #4
 8026abe:	d120      	bne.n	8026b02 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8026ac0:	b1b0      	cbz	r0, 8026af0 <mg_http_serve_dir+0x54>
 8026ac2:	f1b8 0f00 	cmp.w	r8, #0
 8026ac6:	d013      	beq.n	8026af0 <mg_http_serve_dir+0x54>
 8026ac8:	ac22      	add	r4, sp, #136	@ 0x88
 8026aca:	a902      	add	r1, sp, #8
 8026acc:	4620      	mov	r0, r4
 8026ace:	f7fd fc17 	bl	8024300 <mg_str_s>
 8026ad2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8026ad6:	4641      	mov	r1, r8
 8026ad8:	4648      	mov	r0, r9
 8026ada:	f7fd fc11 	bl	8024300 <mg_str_s>
 8026ade:	2300      	movs	r3, #0
 8026ae0:	9300      	str	r3, [sp, #0]
 8026ae2:	e899 000c 	ldmia.w	r9, {r2, r3}
 8026ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026aea:	f7fd fe2b 	bl	8024744 <mg_match>
 8026aee:	b978      	cbnz	r0, 8026b10 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026af0:	462b      	mov	r3, r5
 8026af2:	aa02      	add	r2, sp, #8
 8026af4:	4631      	mov	r1, r6
 8026af6:	4638      	mov	r0, r7
 8026af8:	f7fd ffe0 	bl	8024abc <mg_http_serve_file>
}
 8026afc:	b027      	add	sp, #156	@ 0x9c
 8026afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8026b02:	ab02      	add	r3, sp, #8
 8026b04:	462a      	mov	r2, r5
 8026b06:	4631      	mov	r1, r6
 8026b08:	4638      	mov	r0, r7
 8026b0a:	f7fe fbb3 	bl	8025274 <listdir>
 8026b0e:	e7f5      	b.n	8026afc <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8026b10:	aa02      	add	r2, sp, #8
 8026b12:	6829      	ldr	r1, [r5, #0]
 8026b14:	4638      	mov	r0, r7
 8026b16:	f7fd fbe9 	bl	80242ec <mg_http_serve_ssi>
 8026b1a:	e7ef      	b.n	8026afc <mg_http_serve_dir+0x60>

08026b1c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8026b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b1e:	b0c3      	sub	sp, #268	@ 0x10c
 8026b20:	4605      	mov	r5, r0
 8026b22:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026b24:	688b      	ldr	r3, [r1, #8]
 8026b26:	695e      	ldr	r6, [r3, #20]
 8026b28:	b1b6      	cbz	r6, 8026b58 <printdirentry+0x3c>
  size_t size = 0;
 8026b2a:	2300      	movs	r3, #0
 8026b2c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8026b2e:	2200      	movs	r2, #0
 8026b30:	2300      	movs	r3, #0
 8026b32:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8026b36:	9501      	str	r5, [sp, #4]
 8026b38:	232f      	movs	r3, #47	@ 0x2f
 8026b3a:	9300      	str	r3, [sp, #0]
 8026b3c:	68e3      	ldr	r3, [r4, #12]
 8026b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8026c30 <printdirentry+0x114>)
 8026b40:	2180      	movs	r1, #128	@ 0x80
 8026b42:	a81e      	add	r0, sp, #120	@ 0x78
 8026b44:	f7fc fd54 	bl	80235f0 <mg_snprintf>
 8026b48:	2880      	cmp	r0, #128	@ 0x80
 8026b4a:	d913      	bls.n	8026b74 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8026b4c:	4b39      	ldr	r3, [pc, #228]	@ (8026c34 <printdirentry+0x118>)
 8026b4e:	681b      	ldr	r3, [r3, #0]
 8026b50:	2b00      	cmp	r3, #0
 8026b52:	dc03      	bgt.n	8026b5c <printdirentry+0x40>
}
 8026b54:	b043      	add	sp, #268	@ 0x10c
 8026b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026b58:	4e37      	ldr	r6, [pc, #220]	@ (8026c38 <printdirentry+0x11c>)
 8026b5a:	e7e6      	b.n	8026b2a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8026b5c:	4b37      	ldr	r3, [pc, #220]	@ (8026c3c <printdirentry+0x120>)
 8026b5e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026b62:	4937      	ldr	r1, [pc, #220]	@ (8026c40 <printdirentry+0x124>)
 8026b64:	2001      	movs	r0, #1
 8026b66:	f7ff fb3f 	bl	80261e8 <mg_log_prefix>
 8026b6a:	4629      	mov	r1, r5
 8026b6c:	4835      	ldr	r0, [pc, #212]	@ (8026c44 <printdirentry+0x128>)
 8026b6e:	f7fd f9e9 	bl	8023f44 <mg_log>
 8026b72:	e7ef      	b.n	8026b54 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026b74:	6833      	ldr	r3, [r6, #0]
 8026b76:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026b78:	a941      	add	r1, sp, #260	@ 0x104
 8026b7a:	a81e      	add	r0, sp, #120	@ 0x78
 8026b7c:	4798      	blx	r3
 8026b7e:	b9a8      	cbnz	r0, 8026bac <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026b80:	4b2c      	ldr	r3, [pc, #176]	@ (8026c34 <printdirentry+0x118>)
 8026b82:	681b      	ldr	r3, [r3, #0]
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	dde5      	ble.n	8026b54 <printdirentry+0x38>
 8026b88:	4b2c      	ldr	r3, [pc, #176]	@ (8026c3c <printdirentry+0x120>)
 8026b8a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8026b8e:	492c      	ldr	r1, [pc, #176]	@ (8026c40 <printdirentry+0x124>)
 8026b90:	2001      	movs	r0, #1
 8026b92:	f7ff fb29 	bl	80261e8 <mg_log_prefix>
 8026b96:	6823      	ldr	r3, [r4, #0]
 8026b98:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8026b9a:	f007 f925 	bl	802dde8 <__errno>
 8026b9e:	6803      	ldr	r3, [r0, #0]
 8026ba0:	aa1e      	add	r2, sp, #120	@ 0x78
 8026ba2:	4621      	mov	r1, r4
 8026ba4:	4828      	ldr	r0, [pc, #160]	@ (8026c48 <printdirentry+0x12c>)
 8026ba6:	f7fd f9cd 	bl	8023f44 <mg_log>
 8026baa:	e7d3      	b.n	8026b54 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026bac:	f010 0604 	ands.w	r6, r0, #4
 8026bb0:	d02d      	beq.n	8026c0e <printdirentry+0xf2>
 8026bb2:	4f26      	ldr	r7, [pc, #152]	@ (8026c4c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8026bb4:	2e00      	cmp	r6, #0
 8026bb6:	d02c      	beq.n	8026c12 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8026bb8:	4b25      	ldr	r3, [pc, #148]	@ (8026c50 <printdirentry+0x134>)
 8026bba:	4a26      	ldr	r2, [pc, #152]	@ (8026c54 <printdirentry+0x138>)
 8026bbc:	2128      	movs	r1, #40	@ 0x28
 8026bbe:	a814      	add	r0, sp, #80	@ 0x50
 8026bc0:	f7fc fd16 	bl	80235f0 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8026bc4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8026bc6:	4a24      	ldr	r2, [pc, #144]	@ (8026c58 <printdirentry+0x13c>)
 8026bc8:	2128      	movs	r1, #40	@ 0x28
 8026bca:	eb0d 0001 	add.w	r0, sp, r1
 8026bce:	f7fc fd0f 	bl	80235f0 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8026bd2:	4628      	mov	r0, r5
 8026bd4:	f7e9 fb64 	bl	80102a0 <strlen>
 8026bd8:	4601      	mov	r1, r0
 8026bda:	2380      	movs	r3, #128	@ 0x80
 8026bdc:	aa1e      	add	r2, sp, #120	@ 0x78
 8026bde:	4628      	mov	r0, r5
 8026be0:	f7fd fa58 	bl	8024094 <mg_url_encode>
 8026be4:	4602      	mov	r2, r0
    mg_printf(d->c,
 8026be6:	6820      	ldr	r0, [r4, #0]
 8026be8:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8026bea:	b9e6      	cbnz	r6, 8026c26 <printdirentry+0x10a>
 8026bec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026bee:	2400      	movs	r4, #0
 8026bf0:	ae14      	add	r6, sp, #80	@ 0x50
 8026bf2:	9608      	str	r6, [sp, #32]
 8026bf4:	9306      	str	r3, [sp, #24]
 8026bf6:	9407      	str	r4, [sp, #28]
 8026bf8:	ab0a      	add	r3, sp, #40	@ 0x28
 8026bfa:	9304      	str	r3, [sp, #16]
 8026bfc:	9103      	str	r1, [sp, #12]
 8026bfe:	9702      	str	r7, [sp, #8]
 8026c00:	9501      	str	r5, [sp, #4]
 8026c02:	9700      	str	r7, [sp, #0]
 8026c04:	ab1e      	add	r3, sp, #120	@ 0x78
 8026c06:	4915      	ldr	r1, [pc, #84]	@ (8026c5c <printdirentry+0x140>)
 8026c08:	f7fd f9ca 	bl	8023fa0 <mg_printf>
}
 8026c0c:	e7a2      	b.n	8026b54 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026c0e:	4f14      	ldr	r7, [pc, #80]	@ (8026c60 <printdirentry+0x144>)
 8026c10:	e7d0      	b.n	8026bb4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8026c12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026c14:	9300      	str	r3, [sp, #0]
 8026c16:	2300      	movs	r3, #0
 8026c18:	9301      	str	r3, [sp, #4]
 8026c1a:	4a12      	ldr	r2, [pc, #72]	@ (8026c64 <printdirentry+0x148>)
 8026c1c:	2128      	movs	r1, #40	@ 0x28
 8026c1e:	a814      	add	r0, sp, #80	@ 0x50
 8026c20:	f7fc fce6 	bl	80235f0 <mg_snprintf>
 8026c24:	e7ce      	b.n	8026bc4 <printdirentry+0xa8>
    mg_printf(d->c,
 8026c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026c2a:	461c      	mov	r4, r3
 8026c2c:	e7e0      	b.n	8026bf0 <printdirentry+0xd4>
 8026c2e:	bf00      	nop
 8026c30:	0803ae6c 	.word	0x0803ae6c
 8026c34:	2000012c 	.word	0x2000012c
 8026c38:	20000130 	.word	0x20000130
 8026c3c:	0803b6ec 	.word	0x0803b6ec
 8026c40:	0803acc0 	.word	0x0803acc0
 8026c44:	0803ae74 	.word	0x0803ae74
 8026c48:	0803ae84 	.word	0x0803ae84
 8026c4c:	0803a4bc 	.word	0x0803a4bc
 8026c50:	0803ae98 	.word	0x0803ae98
 8026c54:	0803afd8 	.word	0x0803afd8
 8026c58:	0803b288 	.word	0x0803b288
 8026c5c:	0803aea8 	.word	0x0803aea8
 8026c60:	08036c80 	.word	0x08036c80
 8026c64:	0803aea0 	.word	0x0803aea0

08026c68 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c6c:	b0ca      	sub	sp, #296	@ 0x128
 8026c6e:	4607      	mov	r7, r0
 8026c70:	460d      	mov	r5, r1
 8026c72:	4616      	mov	r6, r2
 8026c74:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026c76:	2330      	movs	r3, #48	@ 0x30
 8026c78:	9343      	str	r3, [sp, #268]	@ 0x10c
 8026c7a:	2400      	movs	r4, #0
 8026c7c:	9444      	str	r4, [sp, #272]	@ 0x110
 8026c7e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026c80:	9446      	str	r4, [sp, #280]	@ 0x118
 8026c82:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026c84:	f101 0a10 	add.w	sl, r1, #16
 8026c88:	2314      	movs	r3, #20
 8026c8a:	aa43      	add	r2, sp, #268	@ 0x10c
 8026c8c:	4964      	ldr	r1, [pc, #400]	@ (8026e20 <mg_http_upload+0x1b8>)
 8026c8e:	4650      	mov	r0, sl
 8026c90:	f7fe fa23 	bl	80250da <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8026c94:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8026c98:	2380      	movs	r3, #128	@ 0x80
 8026c9a:	464a      	mov	r2, r9
 8026c9c:	4961      	ldr	r1, [pc, #388]	@ (8026e24 <mg_http_upload+0x1bc>)
 8026c9e:	4650      	mov	r0, sl
 8026ca0:	f7fe fa1b 	bl	80250da <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8026ca4:	4622      	mov	r2, r4
 8026ca6:	4621      	mov	r1, r4
 8026ca8:	a843      	add	r0, sp, #268	@ 0x10c
 8026caa:	f005 fa1f 	bl	802c0ec <strtol>
 8026cae:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8026cb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8026cb4:	232f      	movs	r3, #47	@ 0x2f
 8026cb6:	9300      	str	r3, [sp, #0]
 8026cb8:	4643      	mov	r3, r8
 8026cba:	4a5b      	ldr	r2, [pc, #364]	@ (8026e28 <mg_http_upload+0x1c0>)
 8026cbc:	2180      	movs	r1, #128	@ 0x80
 8026cbe:	a803      	add	r0, sp, #12
 8026cc0:	f7fc fc96 	bl	80235f0 <mg_snprintf>
  if (hm->body.len == 0) {
 8026cc4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8026cc8:	f1b8 0f00 	cmp.w	r8, #0
 8026ccc:	d047      	beq.n	8026d5e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8026cce:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8026cd2:	2b00      	cmp	r3, #0
 8026cd4:	d04c      	beq.n	8026d70 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8026cd6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8026cda:	a923      	add	r1, sp, #140	@ 0x8c
 8026cdc:	4648      	mov	r0, r9
 8026cde:	f7fd fb0f 	bl	8024300 <mg_str_s>
 8026ce2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026ce6:	f7ff fa54 	bl	8026192 <mg_path_is_sane>
 8026cea:	2800      	cmp	r0, #0
 8026cec:	d04a      	beq.n	8026d84 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8026cee:	2c00      	cmp	r4, #0
 8026cf0:	db54      	blt.n	8026d9c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026cf2:	44a0      	add	r8, r4
 8026cf4:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026cf6:	4598      	cmp	r8, r3
 8026cf8:	d85a      	bhi.n	8026db0 <mg_http_upload+0x148>
    size_t current_size = 0;
 8026cfa:	2300      	movs	r3, #0
 8026cfc:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8026e2c <mg_http_upload+0x1c4>)
 8026d00:	681b      	ldr	r3, [r3, #0]
 8026d02:	2b02      	cmp	r3, #2
 8026d04:	dc61      	bgt.n	8026dca <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8026d06:	b914      	cbnz	r4, 8026d0e <mg_http_upload+0xa6>
 8026d08:	6a33      	ldr	r3, [r6, #32]
 8026d0a:	a803      	add	r0, sp, #12
 8026d0c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8026d0e:	6833      	ldr	r3, [r6, #0]
 8026d10:	2200      	movs	r2, #0
 8026d12:	a902      	add	r1, sp, #8
 8026d14:	a803      	add	r0, sp, #12
 8026d16:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8026d18:	2c00      	cmp	r4, #0
 8026d1a:	dd02      	ble.n	8026d22 <mg_http_upload+0xba>
 8026d1c:	9b02      	ldr	r3, [sp, #8]
 8026d1e:	429c      	cmp	r4, r3
 8026d20:	d162      	bne.n	8026de8 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8026d22:	2202      	movs	r2, #2
 8026d24:	a903      	add	r1, sp, #12
 8026d26:	4630      	mov	r0, r6
 8026d28:	f7fb fed2 	bl	8022ad0 <mg_fs_open>
 8026d2c:	4680      	mov	r8, r0
 8026d2e:	2800      	cmp	r0, #0
 8026d30:	d066      	beq.n	8026e00 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8026d32:	6973      	ldr	r3, [r6, #20]
 8026d34:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026d38:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8026d3c:	6800      	ldr	r0, [r0, #0]
 8026d3e:	4798      	blx	r3
 8026d40:	4404      	add	r4, r0
      mg_fs_close(fd);
 8026d42:	4640      	mov	r0, r8
 8026d44:	f7fb fedd 	bl	8022b02 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8026d48:	9400      	str	r4, [sp, #0]
 8026d4a:	4b39      	ldr	r3, [pc, #228]	@ (8026e30 <mg_http_upload+0x1c8>)
 8026d4c:	4a39      	ldr	r2, [pc, #228]	@ (8026e34 <mg_http_upload+0x1cc>)
 8026d4e:	21c8      	movs	r1, #200	@ 0xc8
 8026d50:	4638      	mov	r0, r7
 8026d52:	f7fd f94b 	bl	8023fec <mg_http_reply>
}
 8026d56:	4620      	mov	r0, r4
 8026d58:	b04a      	add	sp, #296	@ 0x128
 8026d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8026d5e:	2400      	movs	r4, #0
 8026d60:	9400      	str	r4, [sp, #0]
 8026d62:	4b33      	ldr	r3, [pc, #204]	@ (8026e30 <mg_http_upload+0x1c8>)
 8026d64:	4a33      	ldr	r2, [pc, #204]	@ (8026e34 <mg_http_upload+0x1cc>)
 8026d66:	21c8      	movs	r1, #200	@ 0xc8
 8026d68:	4638      	mov	r0, r7
 8026d6a:	f7fd f93f 	bl	8023fec <mg_http_reply>
 8026d6e:	e7f2      	b.n	8026d56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8026d70:	4b31      	ldr	r3, [pc, #196]	@ (8026e38 <mg_http_upload+0x1d0>)
 8026d72:	4a32      	ldr	r2, [pc, #200]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026d74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026d78:	4638      	mov	r0, r7
 8026d7a:	f7fd f937 	bl	8023fec <mg_http_reply>
    res = -1;
 8026d7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8026d82:	e7e8      	b.n	8026d56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8026d84:	ab23      	add	r3, sp, #140	@ 0x8c
 8026d86:	9300      	str	r3, [sp, #0]
 8026d88:	4b2d      	ldr	r3, [pc, #180]	@ (8026e40 <mg_http_upload+0x1d8>)
 8026d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026d8c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026d90:	4638      	mov	r0, r7
 8026d92:	f7fd f92b 	bl	8023fec <mg_http_reply>
    res = -2;
 8026d96:	f06f 0401 	mvn.w	r4, #1
 8026d9a:	e7dc      	b.n	8026d56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8026d9c:	4b29      	ldr	r3, [pc, #164]	@ (8026e44 <mg_http_upload+0x1dc>)
 8026d9e:	4a27      	ldr	r2, [pc, #156]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026da0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026da4:	4638      	mov	r0, r7
 8026da6:	f7fd f921 	bl	8023fec <mg_http_reply>
    res = -3;
 8026daa:	f06f 0402 	mvn.w	r4, #2
 8026dae:	e7d2      	b.n	8026d56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8026db0:	9301      	str	r3, [sp, #4]
 8026db2:	ab03      	add	r3, sp, #12
 8026db4:	9300      	str	r3, [sp, #0]
 8026db6:	4b24      	ldr	r3, [pc, #144]	@ (8026e48 <mg_http_upload+0x1e0>)
 8026db8:	4a20      	ldr	r2, [pc, #128]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026dba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026dbe:	4638      	mov	r0, r7
 8026dc0:	f7fd f914 	bl	8023fec <mg_http_reply>
    res = -4;
 8026dc4:	f06f 0403 	mvn.w	r4, #3
 8026dc8:	e7c5      	b.n	8026d56 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026dca:	4b20      	ldr	r3, [pc, #128]	@ (8026e4c <mg_http_upload+0x1e4>)
 8026dcc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8026dd0:	491f      	ldr	r1, [pc, #124]	@ (8026e50 <mg_http_upload+0x1e8>)
 8026dd2:	2003      	movs	r0, #3
 8026dd4:	f7ff fa08 	bl	80261e8 <mg_log_prefix>
 8026dd8:	4623      	mov	r3, r4
 8026dda:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026dde:	a903      	add	r1, sp, #12
 8026de0:	481c      	ldr	r0, [pc, #112]	@ (8026e54 <mg_http_upload+0x1ec>)
 8026de2:	f7fd f8af 	bl	8023f44 <mg_log>
 8026de6:	e78e      	b.n	8026d06 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8026de8:	ab03      	add	r3, sp, #12
 8026dea:	9300      	str	r3, [sp, #0]
 8026dec:	4b1a      	ldr	r3, [pc, #104]	@ (8026e58 <mg_http_upload+0x1f0>)
 8026dee:	4a13      	ldr	r2, [pc, #76]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026df0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026df4:	4638      	mov	r0, r7
 8026df6:	f7fd f8f9 	bl	8023fec <mg_http_reply>
      res = -5;
 8026dfa:	f06f 0404 	mvn.w	r4, #4
 8026dfe:	e7aa      	b.n	8026d56 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8026e00:	f006 fff2 	bl	802dde8 <__errno>
 8026e04:	6803      	ldr	r3, [r0, #0]
 8026e06:	9301      	str	r3, [sp, #4]
 8026e08:	ab03      	add	r3, sp, #12
 8026e0a:	9300      	str	r3, [sp, #0]
 8026e0c:	4b13      	ldr	r3, [pc, #76]	@ (8026e5c <mg_http_upload+0x1f4>)
 8026e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8026e3c <mg_http_upload+0x1d4>)
 8026e10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026e14:	4638      	mov	r0, r7
 8026e16:	f7fd f8e9 	bl	8023fec <mg_http_reply>
      res = -6;
 8026e1a:	f06f 0405 	mvn.w	r4, #5
 8026e1e:	e79a      	b.n	8026d56 <mg_http_upload+0xee>
 8026e20:	0803af00 	.word	0x0803af00
 8026e24:	0803af28 	.word	0x0803af28
 8026e28:	0803ae6c 	.word	0x0803ae6c
 8026e2c:	2000012c 	.word	0x2000012c
 8026e30:	0803af08 	.word	0x0803af08
 8026e34:	08036600 	.word	0x08036600
 8026e38:	0803af0c 	.word	0x0803af0c
 8026e3c:	08036c80 	.word	0x08036c80
 8026e40:	0803af1c 	.word	0x0803af1c
 8026e44:	0803af30 	.word	0x0803af30
 8026e48:	0803af40 	.word	0x0803af40
 8026e4c:	0803b6dc 	.word	0x0803b6dc
 8026e50:	0803acc0 	.word	0x0803acc0
 8026e54:	0803af5c 	.word	0x0803af5c
 8026e58:	0803af74 	.word	0x0803af74
 8026e5c:	0803af88 	.word	0x0803af88

08026e60 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8026e60:	b570      	push	{r4, r5, r6, lr}
 8026e62:	b082      	sub	sp, #8
 8026e64:	4604      	mov	r4, r0
 8026e66:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8026e68:	68e1      	ldr	r1, [r4, #12]
 8026e6a:	f7f9 fbd3 	bl	8020614 <roundup>
  if (new_size == 0) {
 8026e6e:	b130      	cbz	r0, 8026e7e <mg_iobuf_resize+0x1e>
 8026e70:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8026e72:	6863      	ldr	r3, [r4, #4]
 8026e74:	4283      	cmp	r3, r0
 8026e76:	d10f      	bne.n	8026e98 <mg_iobuf_resize+0x38>
  int ok = 1;
 8026e78:	2001      	movs	r0, #1
}
 8026e7a:	b002      	add	sp, #8
 8026e7c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8026e7e:	6861      	ldr	r1, [r4, #4]
 8026e80:	6820      	ldr	r0, [r4, #0]
 8026e82:	f7fe fd6f 	bl	8025964 <mg_bzero>
    free(io->buf);
 8026e86:	6820      	ldr	r0, [r4, #0]
 8026e88:	f7f3 fdf8 	bl	801aa7c <vPortFree>
    io->buf = NULL;
 8026e8c:	2300      	movs	r3, #0
 8026e8e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8026e90:	6063      	str	r3, [r4, #4]
 8026e92:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8026e94:	2001      	movs	r0, #1
 8026e96:	e7f0      	b.n	8026e7a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8026e98:	4601      	mov	r1, r0
 8026e9a:	2001      	movs	r0, #1
 8026e9c:	f7fb fc78 	bl	8022790 <mg_calloc>
    if (p != NULL) {
 8026ea0:	4606      	mov	r6, r0
 8026ea2:	b198      	cbz	r0, 8026ecc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8026ea4:	68a2      	ldr	r2, [r4, #8]
 8026ea6:	42aa      	cmp	r2, r5
 8026ea8:	bf28      	it	cs
 8026eaa:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8026eac:	b11a      	cbz	r2, 8026eb6 <mg_iobuf_resize+0x56>
 8026eae:	6821      	ldr	r1, [r4, #0]
 8026eb0:	b109      	cbz	r1, 8026eb6 <mg_iobuf_resize+0x56>
 8026eb2:	f005 fd7b 	bl	802c9ac <memmove>
      mg_bzero(io->buf, io->size);
 8026eb6:	6861      	ldr	r1, [r4, #4]
 8026eb8:	6820      	ldr	r0, [r4, #0]
 8026eba:	f7fe fd53 	bl	8025964 <mg_bzero>
      free(io->buf);
 8026ebe:	6820      	ldr	r0, [r4, #0]
 8026ec0:	f7f3 fddc 	bl	801aa7c <vPortFree>
      io->buf = (unsigned char *) p;
 8026ec4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8026ec6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8026ec8:	2001      	movs	r0, #1
 8026eca:	e7d6      	b.n	8026e7a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8026efc <mg_iobuf_resize+0x9c>)
 8026ece:	681b      	ldr	r3, [r3, #0]
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	dc01      	bgt.n	8026ed8 <mg_iobuf_resize+0x78>
      ok = 0;
 8026ed4:	2000      	movs	r0, #0
  return ok;
 8026ed6:	e7d0      	b.n	8026e7a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026ed8:	4b09      	ldr	r3, [pc, #36]	@ (8026f00 <mg_iobuf_resize+0xa0>)
 8026eda:	f640 5244 	movw	r2, #3396	@ 0xd44
 8026ede:	4909      	ldr	r1, [pc, #36]	@ (8026f04 <mg_iobuf_resize+0xa4>)
 8026ee0:	2001      	movs	r0, #1
 8026ee2:	f7ff f981 	bl	80261e8 <mg_log_prefix>
 8026ee6:	2600      	movs	r6, #0
 8026ee8:	9500      	str	r5, [sp, #0]
 8026eea:	9601      	str	r6, [sp, #4]
 8026eec:	6862      	ldr	r2, [r4, #4]
 8026eee:	4633      	mov	r3, r6
 8026ef0:	4805      	ldr	r0, [pc, #20]	@ (8026f08 <mg_iobuf_resize+0xa8>)
 8026ef2:	f7fd f827 	bl	8023f44 <mg_log>
      ok = 0;
 8026ef6:	4630      	mov	r0, r6
 8026ef8:	e7bf      	b.n	8026e7a <mg_iobuf_resize+0x1a>
 8026efa:	bf00      	nop
 8026efc:	2000012c 	.word	0x2000012c
 8026f00:	0803b6cc 	.word	0x0803b6cc
 8026f04:	0803acc0 	.word	0x0803acc0
 8026f08:	0803af98 	.word	0x0803af98

08026f0c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026f0c:	b538      	push	{r3, r4, r5, lr}
 8026f0e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8026f10:	2908      	cmp	r1, #8
 8026f12:	d004      	beq.n	8026f1e <static_cb+0x12>
 8026f14:	2902      	cmp	r1, #2
 8026f16:	d002      	beq.n	8026f1e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8026f18:	2909      	cmp	r1, #9
 8026f1a:	d02b      	beq.n	8026f74 <static_cb+0x68>
}
 8026f1c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8026f1e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026f22:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026f28:	d31d      	bcc.n	8026f66 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8026f2a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8026f2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026f2e:	4299      	cmp	r1, r3
 8026f30:	d2f4      	bcs.n	8026f1c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8026f32:	1a5b      	subs	r3, r3, r1
 8026f34:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8026f38:	429a      	cmp	r2, r3
 8026f3a:	d300      	bcc.n	8026f3e <static_cb+0x32>
 8026f3c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8026f3e:	686b      	ldr	r3, [r5, #4]
 8026f40:	691b      	ldr	r3, [r3, #16]
 8026f42:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8026f44:	4401      	add	r1, r0
 8026f46:	6828      	ldr	r0, [r5, #0]
 8026f48:	4798      	blx	r3
    c->send.len += n;
 8026f4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026f4c:	4403      	add	r3, r0
 8026f4e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8026f50:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8026f54:	1a1b      	subs	r3, r3, r0
 8026f56:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8026f5a:	2800      	cmp	r0, #0
 8026f5c:	d1de      	bne.n	8026f1c <static_cb+0x10>
 8026f5e:	4620      	mov	r0, r4
 8026f60:	f7fb fddc 	bl	8022b1c <restore_http_cb>
 8026f64:	e7da      	b.n	8026f1c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8026f6a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026f6e:	f7ff ff77 	bl	8026e60 <mg_iobuf_resize>
 8026f72:	e7da      	b.n	8026f2a <static_cb+0x1e>
    restore_http_cb(c);
 8026f74:	f7fb fdd2 	bl	8022b1c <restore_http_cb>
  (void) ev_data;
 8026f78:	e7d0      	b.n	8026f1c <static_cb+0x10>

08026f7a <mg_iobuf_add>:
                    size_t len) {
 8026f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f7e:	4604      	mov	r4, r0
 8026f80:	460f      	mov	r7, r1
 8026f82:	4690      	mov	r8, r2
 8026f84:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8026f86:	6880      	ldr	r0, [r0, #8]
 8026f88:	68e1      	ldr	r1, [r4, #12]
 8026f8a:	4418      	add	r0, r3
 8026f8c:	f7f9 fb42 	bl	8020614 <roundup>
 8026f90:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8026f92:	4601      	mov	r1, r0
 8026f94:	4620      	mov	r0, r4
 8026f96:	f7ff ff63 	bl	8026e60 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8026f9a:	6863      	ldr	r3, [r4, #4]
 8026f9c:	42b3      	cmp	r3, r6
 8026f9e:	d000      	beq.n	8026fa2 <mg_iobuf_add+0x28>
 8026fa0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026fa2:	68a2      	ldr	r2, [r4, #8]
 8026fa4:	42ba      	cmp	r2, r7
 8026fa6:	d812      	bhi.n	8026fce <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8026fa8:	f1b8 0f00 	cmp.w	r8, #0
 8026fac:	d005      	beq.n	8026fba <mg_iobuf_add+0x40>
 8026fae:	6820      	ldr	r0, [r4, #0]
 8026fb0:	462a      	mov	r2, r5
 8026fb2:	4641      	mov	r1, r8
 8026fb4:	4438      	add	r0, r7
 8026fb6:	f005 fcf9 	bl	802c9ac <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8026fba:	68a3      	ldr	r3, [r4, #8]
 8026fbc:	42bb      	cmp	r3, r7
 8026fbe:	d200      	bcs.n	8026fc2 <mg_iobuf_add+0x48>
 8026fc0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8026fc2:	68a3      	ldr	r3, [r4, #8]
 8026fc4:	442b      	add	r3, r5
 8026fc6:	60a3      	str	r3, [r4, #8]
}
 8026fc8:	4628      	mov	r0, r5
 8026fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026fce:	6823      	ldr	r3, [r4, #0]
 8026fd0:	19e8      	adds	r0, r5, r7
 8026fd2:	1bd2      	subs	r2, r2, r7
 8026fd4:	19d9      	adds	r1, r3, r7
 8026fd6:	4418      	add	r0, r3
 8026fd8:	f005 fce8 	bl	802c9ac <memmove>
 8026fdc:	e7e4      	b.n	8026fa8 <mg_iobuf_add+0x2e>

08026fde <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 8026fde:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8026fe0:	2100      	movs	r1, #0
 8026fe2:	f7ff ff3d 	bl	8026e60 <mg_iobuf_resize>
}
 8026fe6:	bd08      	pop	{r3, pc}

08026fe8 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026fe8:	b538      	push	{r3, r4, r5, lr}
 8026fea:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8026fec:	2201      	movs	r2, #1
 8026fee:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026ff0:	f7fb fbf3 	bl	80227da <getpeer>
  if (c == NULL) {
 8026ff4:	b368      	cbz	r0, 8027052 <rx_udp+0x6a>
 8026ff6:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026ff8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8026ffa:	881b      	ldrh	r3, [r3, #0]
 8026ffc:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8026ffe:	69e3      	ldr	r3, [r4, #28]
 8027000:	68db      	ldr	r3, [r3, #12]
 8027002:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027004:	6923      	ldr	r3, [r4, #16]
 8027006:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802700a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802700e:	895b      	ldrh	r3, [r3, #10]
 8027010:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8027014:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8027016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802701a:	d21b      	bcs.n	8027054 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802701c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802701e:	1ad2      	subs	r2, r2, r3
 8027020:	68e1      	ldr	r1, [r4, #12]
 8027022:	428a      	cmp	r2, r1
 8027024:	d204      	bcs.n	8027030 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8027026:	4419      	add	r1, r3
 8027028:	3038      	adds	r0, #56	@ 0x38
 802702a:	f7ff ff19 	bl	8026e60 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802702e:	b1a8      	cbz	r0, 802705c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8027030:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8027032:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027034:	68e2      	ldr	r2, [r4, #12]
 8027036:	68a1      	ldr	r1, [r4, #8]
 8027038:	4418      	add	r0, r3
 802703a:	f006 ff0d 	bl	802de58 <memcpy>
      c->recv.len += pkt->pay.len;
 802703e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027040:	4622      	mov	r2, r4
 8027042:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8027046:	440b      	add	r3, r1
 8027048:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802704a:	2107      	movs	r1, #7
 802704c:	4628      	mov	r0, r5
 802704e:	f7fb fd30 	bl	8022ab2 <mg_call>
}
 8027052:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8027054:	4904      	ldr	r1, [pc, #16]	@ (8027068 <rx_udp+0x80>)
 8027056:	f7ff f9af 	bl	80263b8 <mg_error>
 802705a:	e7fa      	b.n	8027052 <rx_udp+0x6a>
      mg_error(c, "oom");
 802705c:	4903      	ldr	r1, [pc, #12]	@ (802706c <rx_udp+0x84>)
 802705e:	4628      	mov	r0, r5
 8027060:	f7ff f9aa 	bl	80263b8 <mg_error>
 8027064:	e7f5      	b.n	8027052 <rx_udp+0x6a>
 8027066:	bf00      	nop
 8027068:	0803afa4 	.word	0x0803afa4
 802706c:	0803afc0 	.word	0x0803afc0

08027070 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8027070:	b538      	push	{r3, r4, r5, lr}
 8027072:	4605      	mov	r5, r0
 8027074:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027076:	b122      	cbz	r2, 8027082 <mg_pfn_iobuf_private+0x12>
 8027078:	6889      	ldr	r1, [r1, #8]
 802707a:	3102      	adds	r1, #2
 802707c:	6863      	ldr	r3, [r4, #4]
 802707e:	4299      	cmp	r1, r3
 8027080:	d80d      	bhi.n	802709e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027082:	68a3      	ldr	r3, [r4, #8]
 8027084:	1c99      	adds	r1, r3, #2
 8027086:	6862      	ldr	r2, [r4, #4]
 8027088:	4291      	cmp	r1, r2
 802708a:	d80c      	bhi.n	80270a6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802708c:	6822      	ldr	r2, [r4, #0]
 802708e:	1c59      	adds	r1, r3, #1
 8027090:	60a1      	str	r1, [r4, #8]
 8027092:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8027094:	6822      	ldr	r2, [r4, #0]
 8027096:	68a3      	ldr	r3, [r4, #8]
 8027098:	2100      	movs	r1, #0
 802709a:	54d1      	strb	r1, [r2, r3]
}
 802709c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802709e:	4620      	mov	r0, r4
 80270a0:	f7ff fede 	bl	8026e60 <mg_iobuf_resize>
 80270a4:	e7ed      	b.n	8027082 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 80270a6:	4293      	cmp	r3, r2
 80270a8:	d2f8      	bcs.n	802709c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80270aa:	6822      	ldr	r2, [r4, #0]
 80270ac:	1c59      	adds	r1, r3, #1
 80270ae:	60a1      	str	r1, [r4, #8]
 80270b0:	2100      	movs	r1, #0
 80270b2:	54d1      	strb	r1, [r2, r3]
}
 80270b4:	e7f2      	b.n	802709c <mg_pfn_iobuf_private+0x2c>

080270b6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80270b6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80270b8:	2201      	movs	r2, #1
 80270ba:	f7ff ffd9 	bl	8027070 <mg_pfn_iobuf_private>
}
 80270be:	bd08      	pop	{r3, pc}

080270c0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80270c0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80270c2:	2200      	movs	r2, #0
 80270c4:	f7ff ffd4 	bl	8027070 <mg_pfn_iobuf_private>
}
 80270c8:	bd08      	pop	{r3, pc}
	...

080270cc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80270cc:	b510      	push	{r4, lr}
 80270ce:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80270d0:	f7fb fc8e 	bl	80229f0 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80270d4:	6862      	ldr	r2, [r4, #4]
 80270d6:	e000      	b.n	80270da <mg_close_conn+0xe>
 80270d8:	461a      	mov	r2, r3
 80270da:	6813      	ldr	r3, [r2, #0]
 80270dc:	42a3      	cmp	r3, r4
 80270de:	d1fb      	bne.n	80270d8 <mg_close_conn+0xc>
 80270e0:	6823      	ldr	r3, [r4, #0]
 80270e2:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80270e4:	6863      	ldr	r3, [r4, #4]
 80270e6:	689a      	ldr	r2, [r3, #8]
 80270e8:	42a2      	cmp	r2, r4
 80270ea:	d020      	beq.n	802712e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80270ec:	6863      	ldr	r3, [r4, #4]
 80270ee:	691a      	ldr	r2, [r3, #16]
 80270f0:	42a2      	cmp	r2, r4
 80270f2:	d01f      	beq.n	8027134 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 80270f4:	2200      	movs	r2, #0
 80270f6:	2109      	movs	r1, #9
 80270f8:	4620      	mov	r0, r4
 80270fa:	f7fb fcda 	bl	8022ab2 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80270fe:	4b15      	ldr	r3, [pc, #84]	@ (8027154 <mg_close_conn+0x88>)
 8027100:	681b      	ldr	r3, [r3, #0]
 8027102:	2b02      	cmp	r3, #2
 8027104:	dc19      	bgt.n	802713a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8027106:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802710a:	f7ff ff68 	bl	8026fde <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802710e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027112:	f7ff ff64 	bl	8026fde <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8027116:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802711a:	f7ff ff60 	bl	8026fde <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802711e:	21b0      	movs	r1, #176	@ 0xb0
 8027120:	4620      	mov	r0, r4
 8027122:	f7fe fc1f 	bl	8025964 <mg_bzero>
  free(c);
 8027126:	4620      	mov	r0, r4
 8027128:	f7f3 fca8 	bl	801aa7c <vPortFree>
}
 802712c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802712e:	2200      	movs	r2, #0
 8027130:	609a      	str	r2, [r3, #8]
 8027132:	e7db      	b.n	80270ec <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8027134:	2200      	movs	r2, #0
 8027136:	611a      	str	r2, [r3, #16]
 8027138:	e7dc      	b.n	80270f4 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802713a:	4b07      	ldr	r3, [pc, #28]	@ (8027158 <mg_close_conn+0x8c>)
 802713c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8027140:	4906      	ldr	r1, [pc, #24]	@ (802715c <mg_close_conn+0x90>)
 8027142:	2003      	movs	r0, #3
 8027144:	f7ff f850 	bl	80261e8 <mg_log_prefix>
 8027148:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802714a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802714c:	4804      	ldr	r0, [pc, #16]	@ (8027160 <mg_close_conn+0x94>)
 802714e:	f7fc fef9 	bl	8023f44 <mg_log>
 8027152:	e7d8      	b.n	8027106 <mg_close_conn+0x3a>
 8027154:	2000012c 	.word	0x2000012c
 8027158:	0803b6a8 	.word	0x0803b6a8
 802715c:	0803acc0 	.word	0x0803acc0
 8027160:	0803afc4 	.word	0x0803afc4

08027164 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8027164:	b510      	push	{r4, lr}
 8027166:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8027168:	30d0      	adds	r0, #208	@ 0xd0
 802716a:	f7ff ff38 	bl	8026fde <mg_iobuf_free>
  mg_close_conn(c);
 802716e:	4620      	mov	r0, r4
 8027170:	f7ff ffac 	bl	80270cc <mg_close_conn>
}
 8027174:	bd10      	pop	{r4, pc}
	...

08027178 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8027178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802717c:	4606      	mov	r6, r0
 802717e:	460d      	mov	r5, r1
 8027180:	4690      	mov	r8, r2
 8027182:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027184:	f7fc fa08 	bl	8023598 <mg_alloc_conn>
 8027188:	4604      	mov	r4, r0
 802718a:	2800      	cmp	r0, #0
 802718c:	d03f      	beq.n	802720e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802718e:	4629      	mov	r1, r5
 8027190:	f7fe fe1f 	bl	8025dd2 <mg_open_listener>
 8027194:	2800      	cmp	r0, #0
 8027196:	d04d      	beq.n	8027234 <mg_listen+0xbc>
    c->is_listening = 1;
 8027198:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802719c:	f043 0301 	orr.w	r3, r3, #1
 80271a0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80271a4:	2204      	movs	r2, #4
 80271a6:	492f      	ldr	r1, [pc, #188]	@ (8027264 <mg_listen+0xec>)
 80271a8:	4628      	mov	r0, r5
 80271aa:	f005 fc4e 	bl	802ca4a <strncmp>
 80271ae:	fab0 f080 	clz	r0, r0
 80271b2:	0940      	lsrs	r0, r0, #5
 80271b4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80271b8:	f360 0300 	bfi	r3, r0, #0, #1
 80271bc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80271c0:	6833      	ldr	r3, [r6, #0]
 80271c2:	6023      	str	r3, [r4, #0]
 80271c4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80271c6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80271ca:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80271cc:	2200      	movs	r2, #0
 80271ce:	2101      	movs	r1, #1
 80271d0:	4620      	mov	r0, r4
 80271d2:	f7fb fc6e 	bl	8022ab2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80271d6:	4628      	mov	r0, r5
 80271d8:	f7fe fb16 	bl	8025808 <mg_url_is_ssl>
 80271dc:	b128      	cbz	r0, 80271ea <mg_listen+0x72>
 80271de:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80271e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80271e6:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80271ea:	4b1f      	ldr	r3, [pc, #124]	@ (8027268 <mg_listen+0xf0>)
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	2b02      	cmp	r3, #2
 80271f0:	dd11      	ble.n	8027216 <mg_listen+0x9e>
 80271f2:	4b1e      	ldr	r3, [pc, #120]	@ (802726c <mg_listen+0xf4>)
 80271f4:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 80271f8:	491d      	ldr	r1, [pc, #116]	@ (8027270 <mg_listen+0xf8>)
 80271fa:	2003      	movs	r0, #3
 80271fc:	f7fe fff4 	bl	80261e8 <mg_log_prefix>
 8027200:	462b      	mov	r3, r5
 8027202:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027206:	481b      	ldr	r0, [pc, #108]	@ (8027274 <mg_listen+0xfc>)
 8027208:	f7fc fe9c 	bl	8023f44 <mg_log>
  return c;
 802720c:	e003      	b.n	8027216 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802720e:	4b16      	ldr	r3, [pc, #88]	@ (8027268 <mg_listen+0xf0>)
 8027210:	681b      	ldr	r3, [r3, #0]
 8027212:	2b00      	cmp	r3, #0
 8027214:	dc02      	bgt.n	802721c <mg_listen+0xa4>
}
 8027216:	4620      	mov	r0, r4
 8027218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802721c:	4b13      	ldr	r3, [pc, #76]	@ (802726c <mg_listen+0xf4>)
 802721e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8027222:	4913      	ldr	r1, [pc, #76]	@ (8027270 <mg_listen+0xf8>)
 8027224:	2001      	movs	r0, #1
 8027226:	f7fe ffdf 	bl	80261e8 <mg_log_prefix>
 802722a:	4629      	mov	r1, r5
 802722c:	4812      	ldr	r0, [pc, #72]	@ (8027278 <mg_listen+0x100>)
 802722e:	f7fc fe89 	bl	8023f44 <mg_log>
 8027232:	e7f0      	b.n	8027216 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027234:	4b0c      	ldr	r3, [pc, #48]	@ (8027268 <mg_listen+0xf0>)
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	2b00      	cmp	r3, #0
 802723a:	dc04      	bgt.n	8027246 <mg_listen+0xce>
    free(c);
 802723c:	4620      	mov	r0, r4
 802723e:	f7f3 fc1d 	bl	801aa7c <vPortFree>
    c = NULL;
 8027242:	2400      	movs	r4, #0
 8027244:	e7e7      	b.n	8027216 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027246:	4b09      	ldr	r3, [pc, #36]	@ (802726c <mg_listen+0xf4>)
 8027248:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802724c:	4908      	ldr	r1, [pc, #32]	@ (8027270 <mg_listen+0xf8>)
 802724e:	2001      	movs	r0, #1
 8027250:	f7fe ffca 	bl	80261e8 <mg_log_prefix>
 8027254:	f006 fdc8 	bl	802dde8 <__errno>
 8027258:	6802      	ldr	r2, [r0, #0]
 802725a:	4629      	mov	r1, r5
 802725c:	4807      	ldr	r0, [pc, #28]	@ (802727c <mg_listen+0x104>)
 802725e:	f7fc fe71 	bl	8023f44 <mg_log>
 8027262:	e7eb      	b.n	802723c <mg_listen+0xc4>
 8027264:	0803aff4 	.word	0x0803aff4
 8027268:	2000012c 	.word	0x2000012c
 802726c:	0803b690 	.word	0x0803b690
 8027270:	0803acc0 	.word	0x0803acc0
 8027274:	0803ad1c 	.word	0x0803ad1c
 8027278:	0803afd4 	.word	0x0803afd4
 802727c:	0803afdc 	.word	0x0803afdc

08027280 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027280:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027282:	f7ff ff79 	bl	8027178 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027286:	b110      	cbz	r0, 802728e <mg_http_listen+0xe>
 8027288:	4b01      	ldr	r3, [pc, #4]	@ (8027290 <mg_http_listen+0x10>)
 802728a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802728e:	bd08      	pop	{r3, pc}
 8027290:	0802646d 	.word	0x0802646d

08027294 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8027294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027298:	4605      	mov	r5, r0
 802729a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802729c:	6843      	ldr	r3, [r0, #4]
 802729e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80272a0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80272a4:	f013 0301 	ands.w	r3, r3, #1
 80272a8:	d02c      	beq.n	8027304 <trim_len+0x70>
 80272aa:	2608      	movs	r6, #8
  size_t max_headers_len =
 80272ac:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80272b0:	bb53      	cbnz	r3, 8027308 <trim_len+0x74>
 80272b2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80272b4:	eb08 0304 	add.w	r3, r8, r4
 80272b8:	69ba      	ldr	r2, [r7, #24]
 80272ba:	4293      	cmp	r3, r2
 80272bc:	d901      	bls.n	80272c2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80272be:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80272c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80272c6:	42b3      	cmp	r3, r6
 80272c8:	d205      	bcs.n	80272d6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80272ca:	4b1c      	ldr	r3, [pc, #112]	@ (802733c <trim_len+0xa8>)
 80272cc:	681b      	ldr	r3, [r3, #0]
 80272ce:	2b00      	cmp	r3, #0
 80272d0:	dc1c      	bgt.n	802730c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80272d2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80272d6:	eb04 0308 	add.w	r3, r4, r8
 80272da:	3b0e      	subs	r3, #14
 80272dc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80272e0:	4293      	cmp	r3, r2
 80272e2:	d90c      	bls.n	80272fe <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80272e4:	eba2 0208 	sub.w	r2, r2, r8
 80272e8:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80272ec:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80272f0:	f013 0f01 	tst.w	r3, #1
 80272f4:	d003      	beq.n	80272fe <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80272f6:	4b11      	ldr	r3, [pc, #68]	@ (802733c <trim_len+0xa8>)
 80272f8:	681b      	ldr	r3, [r3, #0]
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	dc12      	bgt.n	8027324 <trim_len+0x90>
}
 80272fe:	4620      	mov	r0, r4
 8027300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027304:	263c      	movs	r6, #60	@ 0x3c
 8027306:	e7d1      	b.n	80272ac <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027308:	2644      	movs	r6, #68	@ 0x44
 802730a:	e7d3      	b.n	80272b4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802730c:	4b0c      	ldr	r3, [pc, #48]	@ (8027340 <trim_len+0xac>)
 802730e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8027312:	490c      	ldr	r1, [pc, #48]	@ (8027344 <trim_len+0xb0>)
 8027314:	2001      	movs	r0, #1
 8027316:	f7fe ff67 	bl	80261e8 <mg_log_prefix>
 802731a:	4631      	mov	r1, r6
 802731c:	480a      	ldr	r0, [pc, #40]	@ (8027348 <trim_len+0xb4>)
 802731e:	f7fc fe11 	bl	8023f44 <mg_log>
 8027322:	e7d6      	b.n	80272d2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027324:	4b06      	ldr	r3, [pc, #24]	@ (8027340 <trim_len+0xac>)
 8027326:	f241 5293 	movw	r2, #5523	@ 0x1593
 802732a:	4906      	ldr	r1, [pc, #24]	@ (8027344 <trim_len+0xb0>)
 802732c:	2001      	movs	r0, #1
 802732e:	f7fe ff5b 	bl	80261e8 <mg_log_prefix>
 8027332:	4806      	ldr	r0, [pc, #24]	@ (802734c <trim_len+0xb8>)
 8027334:	f7fc fe06 	bl	8023f44 <mg_log>
 8027338:	e7e1      	b.n	80272fe <trim_len+0x6a>
 802733a:	bf00      	nop
 802733c:	2000012c 	.word	0x2000012c
 8027340:	0803b684 	.word	0x0803b684
 8027344:	0803acc0 	.word	0x0803acc0
 8027348:	0803affc 	.word	0x0803affc
 802734c:	0803b028 	.word	0x0803b028

08027350 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8027350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027352:	b085      	sub	sp, #20
 8027354:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027356:	6843      	ldr	r3, [r0, #4]
 8027358:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802735a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802735c:	68ab      	ldr	r3, [r5, #8]
 802735e:	b123      	cbz	r3, 802736a <mg_send+0x1a>
 8027360:	460e      	mov	r6, r1
 8027362:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8027366:	2b03      	cmp	r3, #3
 8027368:	d006      	beq.n	8027378 <mg_send+0x28>
    mg_error(c, "net down");
 802736a:	4913      	ldr	r1, [pc, #76]	@ (80273b8 <mg_send+0x68>)
 802736c:	4620      	mov	r0, r4
 802736e:	f7ff f823 	bl	80263b8 <mg_error>
  bool res = false;
 8027372:	2000      	movs	r0, #0
}
 8027374:	b005      	add	sp, #20
 8027376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8027378:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802737c:	f013 0f01 	tst.w	r3, #1
 8027380:	d010      	beq.n	80273a4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027382:	4611      	mov	r1, r2
 8027384:	f7ff ff86 	bl	8027294 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027388:	68aa      	ldr	r2, [r5, #8]
 802738a:	9003      	str	r0, [sp, #12]
 802738c:	9602      	str	r6, [sp, #8]
 802738e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027390:	9301      	str	r3, [sp, #4]
 8027392:	9700      	str	r7, [sp, #0]
 8027394:	8b23      	ldrh	r3, [r4, #24]
 8027396:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802739a:	4628      	mov	r0, r5
 802739c:	f7fe fc97 	bl	8025cce <tx_udp>
    res = true;
 80273a0:	2001      	movs	r0, #1
 80273a2:	e7e7      	b.n	8027374 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80273a4:	4613      	mov	r3, r2
 80273a6:	460a      	mov	r2, r1
 80273a8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80273aa:	3048      	adds	r0, #72	@ 0x48
 80273ac:	f7ff fde5 	bl	8026f7a <mg_iobuf_add>
 80273b0:	3800      	subs	r0, #0
 80273b2:	bf18      	it	ne
 80273b4:	2001      	movne	r0, #1
 80273b6:	e7dd      	b.n	8027374 <mg_send+0x24>
 80273b8:	0803b054 	.word	0x0803b054

080273bc <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80273bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273be:	b0c5      	sub	sp, #276	@ 0x114
 80273c0:	4606      	mov	r6, r0
 80273c2:	460d      	mov	r5, r1
 80273c4:	4614      	mov	r4, r2
 80273c6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80273c8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80273cc:	2100      	movs	r1, #0
 80273ce:	a801      	add	r0, sp, #4
 80273d0:	f005 fb06 	bl	802c9e0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80273d4:	4620      	mov	r0, r4
 80273d6:	f7fe fbc5 	bl	8025b64 <mg_ntohs>
 80273da:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 80273de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80273e2:	f7fe fbbf 	bl	8025b64 <mg_ntohs>
 80273e6:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 80273ea:	2001      	movs	r0, #1
 80273ec:	f7fe fbba 	bl	8025b64 <mg_ntohs>
 80273f0:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80273f4:	f04f 0c00 	mov.w	ip, #0
 80273f8:	4664      	mov	r4, ip
 80273fa:	e015      	b.n	8027428 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 80273fc:	eba4 020c 	sub.w	r2, r4, ip
 8027400:	ab01      	add	r3, sp, #4
 8027402:	4463      	add	r3, ip
 8027404:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8027406:	f10c 0309 	add.w	r3, ip, #9
 802740a:	aa01      	add	r2, sp, #4
 802740c:	18d0      	adds	r0, r2, r3
 802740e:	6829      	ldr	r1, [r5, #0]
 8027410:	eba4 020c 	sub.w	r2, r4, ip
 8027414:	4461      	add	r1, ip
 8027416:	3004      	adds	r0, #4
 8027418:	f006 fd1e 	bl	802de58 <memcpy>
      n = i + 1;
 802741c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8027420:	686a      	ldr	r2, [r5, #4]
 8027422:	42a2      	cmp	r2, r4
 8027424:	d90a      	bls.n	802743c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027426:	3401      	adds	r4, #1
 8027428:	2cfa      	cmp	r4, #250	@ 0xfa
 802742a:	d807      	bhi.n	802743c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 802742c:	682b      	ldr	r3, [r5, #0]
 802742e:	5d1a      	ldrb	r2, [r3, r4]
 8027430:	2a2e      	cmp	r2, #46	@ 0x2e
 8027432:	d0e3      	beq.n	80273fc <mg_dns_send+0x40>
 8027434:	686b      	ldr	r3, [r5, #4]
 8027436:	42a3      	cmp	r3, r4
 8027438:	d8f2      	bhi.n	8027420 <mg_dns_send+0x64>
 802743a:	e7df      	b.n	80273fc <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 802743c:	f10c 0308 	add.w	r3, ip, #8
 8027440:	aa01      	add	r2, sp, #4
 8027442:	4413      	add	r3, r2
 8027444:	4a0a      	ldr	r2, [pc, #40]	@ (8027470 <mg_dns_send+0xb4>)
 8027446:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 802744a:	6058      	str	r0, [r3, #4]
 802744c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8027450:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8027452:	b12f      	cbz	r7, 8027460 <mg_dns_send+0xa4>
 8027454:	f10c 0302 	add.w	r3, ip, #2
 8027458:	aa01      	add	r2, sp, #4
 802745a:	4413      	add	r3, r2
 802745c:	221c      	movs	r2, #28
 802745e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8027460:	f10c 0211 	add.w	r2, ip, #17
 8027464:	a901      	add	r1, sp, #4
 8027466:	4630      	mov	r0, r6
 8027468:	f7ff ff72 	bl	8027350 <mg_send>
}
 802746c:	b045      	add	sp, #276	@ 0x114
 802746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027470:	08035d2c 	.word	0x08035d2c

08027474 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027474:	b500      	push	{lr}
 8027476:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027478:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802747c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027480:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027484:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027488:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802748a:	2b7f      	cmp	r3, #127	@ 0x7f
 802748c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027490:	d90e      	bls.n	80274b0 <mg_mqtt_send_header+0x3c>
 8027492:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027496:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802749a:	f10d 0105 	add.w	r1, sp, #5
 802749e:	428a      	cmp	r2, r1
 80274a0:	d3f0      	bcc.n	8027484 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 80274a2:	4669      	mov	r1, sp
 80274a4:	1a52      	subs	r2, r2, r1
 80274a6:	f7ff ff53 	bl	8027350 <mg_send>
}
 80274aa:	b003      	add	sp, #12
 80274ac:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 80274b0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80274b2:	e7f6      	b.n	80274a2 <mg_mqtt_send_header+0x2e>

080274b4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80274b4:	b500      	push	{lr}
 80274b6:	b083      	sub	sp, #12
 80274b8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 80274ba:	2204      	movs	r2, #4
 80274bc:	eb0d 0102 	add.w	r1, sp, r2
 80274c0:	f7ff ff46 	bl	8027350 <mg_send>
}
 80274c4:	b003      	add	sp, #12
 80274c6:	f85d fb04 	ldr.w	pc, [sp], #4

080274ca <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80274ca:	b500      	push	{lr}
 80274cc:	b083      	sub	sp, #12
 80274ce:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 80274d2:	2202      	movs	r2, #2
 80274d4:	f10d 0106 	add.w	r1, sp, #6
 80274d8:	f7ff ff3a 	bl	8027350 <mg_send>
}
 80274dc:	b003      	add	sp, #12
 80274de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080274e4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80274e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80274e8:	b083      	sub	sp, #12
 80274ea:	4606      	mov	r6, r0
 80274ec:	460f      	mov	r7, r1
 80274ee:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 80274f0:	4611      	mov	r1, r2
 80274f2:	4638      	mov	r0, r7
 80274f4:	f7f9 fdda 	bl	80210ac <get_properties_length>
 80274f8:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 80274fa:	2500      	movs	r5, #0
 80274fc:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 80274fe:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8027500:	4668      	mov	r0, sp
 8027502:	f7f9 fd84 	bl	802100e <encode_varint>
 8027506:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8027508:	4669      	mov	r1, sp
 802750a:	4630      	mov	r0, r6
 802750c:	f7ff ff20 	bl	8027350 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027510:	e018      	b.n	8027544 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8027512:	89a0      	ldrh	r0, [r4, #12]
 8027514:	f7fe fb26 	bl	8025b64 <mg_ntohs>
 8027518:	4601      	mov	r1, r0
 802751a:	4630      	mov	r0, r6
 802751c:	f7ff ffd5 	bl	80274ca <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8027520:	68e2      	ldr	r2, [r4, #12]
 8027522:	68a1      	ldr	r1, [r4, #8]
 8027524:	4630      	mov	r0, r6
 8027526:	f7ff ff13 	bl	8027350 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802752a:	8aa0      	ldrh	r0, [r4, #20]
 802752c:	f7fe fb1a 	bl	8025b64 <mg_ntohs>
 8027530:	4601      	mov	r1, r0
 8027532:	4630      	mov	r0, r6
 8027534:	f7ff ffc9 	bl	80274ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027538:	6962      	ldr	r2, [r4, #20]
 802753a:	6921      	ldr	r1, [r4, #16]
 802753c:	4630      	mov	r0, r6
 802753e:	f7ff ff07 	bl	8027350 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027542:	3501      	adds	r5, #1
 8027544:	454d      	cmp	r5, r9
 8027546:	d25b      	bcs.n	8027600 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8027548:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 802754c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8027550:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8027554:	2201      	movs	r2, #1
 8027556:	4621      	mov	r1, r4
 8027558:	4630      	mov	r0, r6
 802755a:	f7ff fef9 	bl	8027350 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802755e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8027562:	f7f9 fd8f 	bl	8021084 <mqtt_prop_type_by_id>
 8027566:	2806      	cmp	r0, #6
 8027568:	d8eb      	bhi.n	8027542 <mg_send_mqtt_properties+0x5e>
 802756a:	a301      	add	r3, pc, #4	@ (adr r3, 8027570 <mg_send_mqtt_properties+0x8c>)
 802756c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027570:	0802758d 	.word	0x0802758d
 8027574:	080275b9 	.word	0x080275b9
 8027578:	08027513 	.word	0x08027513
 802757c:	080275d3 	.word	0x080275d3
 8027580:	080275ed 	.word	0x080275ed
 8027584:	080275a9 	.word	0x080275a9
 8027588:	08027599 	.word	0x08027599
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802758c:	2201      	movs	r2, #1
 802758e:	1d21      	adds	r1, r4, #4
 8027590:	4630      	mov	r0, r6
 8027592:	f7ff fedd 	bl	8027350 <mg_send>
        break;
 8027596:	e7d4      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027598:	88a0      	ldrh	r0, [r4, #4]
 802759a:	f7fe fae3 	bl	8025b64 <mg_ntohs>
 802759e:	4601      	mov	r1, r0
 80275a0:	4630      	mov	r0, r6
 80275a2:	f7ff ff92 	bl	80274ca <mg_send_u16>
        break;
 80275a6:	e7cc      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 80275a8:	6860      	ldr	r0, [r4, #4]
 80275aa:	f7fe fa43 	bl	8025a34 <mg_ntohl>
 80275ae:	4601      	mov	r1, r0
 80275b0:	4630      	mov	r0, r6
 80275b2:	f7ff ff7f 	bl	80274b4 <mg_send_u32>
        break;
 80275b6:	e7c4      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80275b8:	8aa0      	ldrh	r0, [r4, #20]
 80275ba:	f7fe fad3 	bl	8025b64 <mg_ntohs>
 80275be:	4601      	mov	r1, r0
 80275c0:	4630      	mov	r0, r6
 80275c2:	f7ff ff82 	bl	80274ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80275c6:	6962      	ldr	r2, [r4, #20]
 80275c8:	6921      	ldr	r1, [r4, #16]
 80275ca:	4630      	mov	r0, r6
 80275cc:	f7ff fec0 	bl	8027350 <mg_send>
        break;
 80275d0:	e7b7      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80275d2:	8aa0      	ldrh	r0, [r4, #20]
 80275d4:	f7fe fac6 	bl	8025b64 <mg_ntohs>
 80275d8:	4601      	mov	r1, r0
 80275da:	4630      	mov	r0, r6
 80275dc:	f7ff ff75 	bl	80274ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80275e0:	6962      	ldr	r2, [r4, #20]
 80275e2:	6921      	ldr	r1, [r4, #16]
 80275e4:	4630      	mov	r0, r6
 80275e6:	f7ff feb3 	bl	8027350 <mg_send>
        break;
 80275ea:	e7aa      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 80275ec:	6861      	ldr	r1, [r4, #4]
 80275ee:	a801      	add	r0, sp, #4
 80275f0:	f7f9 fd0d 	bl	802100e <encode_varint>
 80275f4:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 80275f6:	a901      	add	r1, sp, #4
 80275f8:	4630      	mov	r0, r6
 80275fa:	f7ff fea9 	bl	8027350 <mg_send>
        break;
 80275fe:	e7a0      	b.n	8027542 <mg_send_mqtt_properties+0x5e>
}
 8027600:	b003      	add	sp, #12
 8027602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027606:	bf00      	nop

08027608 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027608:	b5f0      	push	{r4, r5, r6, r7, lr}
 802760a:	b08b      	sub	sp, #44	@ 0x2c
 802760c:	4605      	mov	r5, r0
 802760e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8027610:	ab02      	add	r3, sp, #8
 8027612:	f101 0210 	add.w	r2, r1, #16
 8027616:	e892 0003 	ldmia.w	r2, {r0, r1}
 802761a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802761e:	2300      	movs	r3, #0
 8027620:	f88d 3000 	strb.w	r3, [sp]
 8027624:	2204      	movs	r2, #4
 8027626:	f88d 2001 	strb.w	r2, [sp, #1]
 802762a:	224d      	movs	r2, #77	@ 0x4d
 802762c:	f88d 2002 	strb.w	r2, [sp, #2]
 8027630:	2251      	movs	r2, #81	@ 0x51
 8027632:	f88d 2003 	strb.w	r2, [sp, #3]
 8027636:	2254      	movs	r2, #84	@ 0x54
 8027638:	f88d 2004 	strb.w	r2, [sp, #4]
 802763c:	f88d 2005 	strb.w	r2, [sp, #5]
 8027640:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8027644:	f88d 2006 	strb.w	r2, [sp, #6]
 8027648:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 802764c:	2900      	cmp	r1, #0
 802764e:	f000 809f 	beq.w	8027790 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8027652:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027656:	b913      	cbnz	r3, 802765e <mg_mqtt_login+0x56>
 8027658:	2304      	movs	r3, #4
 802765a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802765e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027662:	2b05      	cmp	r3, #5
 8027664:	bf14      	ite	ne
 8027666:	2300      	movne	r3, #0
 8027668:	2301      	moveq	r3, #1
 802766a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802766e:	f363 0282 	bfi	r2, r3, #2, #1
 8027672:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027676:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802767a:	00d2      	lsls	r2, r2, #3
 802767c:	f002 0218 	and.w	r2, r2, #24
 8027680:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027684:	6863      	ldr	r3, [r4, #4]
 8027686:	2b00      	cmp	r3, #0
 8027688:	f000 808e 	beq.w	80277a8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802768c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802768e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027692:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027696:	68e2      	ldr	r2, [r4, #12]
 8027698:	b13a      	cbz	r2, 80276aa <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802769a:	441a      	add	r2, r3
 802769c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802769e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80276a6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 80276aa:	69e2      	ldr	r2, [r4, #28]
 80276ac:	b14a      	cbz	r2, 80276c2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 80276ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80276b0:	440a      	add	r2, r1
 80276b2:	441a      	add	r2, r3
 80276b4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 80276b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276ba:	f042 0204 	orr.w	r2, r2, #4
 80276be:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80276c2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 80276c6:	b90a      	cbnz	r2, 80276cc <mg_mqtt_login+0xc4>
 80276c8:	9a03      	ldr	r2, [sp, #12]
 80276ca:	b92a      	cbnz	r2, 80276d8 <mg_mqtt_login+0xd0>
 80276cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276d0:	f042 0202 	orr.w	r2, r2, #2
 80276d4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80276d8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 80276dc:	b12a      	cbz	r2, 80276ea <mg_mqtt_login+0xe2>
 80276de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276e2:	f042 0220 	orr.w	r2, r2, #32
 80276e6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 80276ea:	9f03      	ldr	r7, [sp, #12]
 80276ec:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 80276ee:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80276f2:	f013 0f04 	tst.w	r3, #4
 80276f6:	d159      	bne.n	80277ac <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 80276f8:	4633      	mov	r3, r6
 80276fa:	2200      	movs	r2, #0
 80276fc:	2101      	movs	r1, #1
 80276fe:	4628      	mov	r0, r5
 8027700:	f7ff feb8 	bl	8027474 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8027704:	2208      	movs	r2, #8
 8027706:	4669      	mov	r1, sp
 8027708:	4628      	mov	r0, r5
 802770a:	f7ff fe21 	bl	8027350 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802770e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8027710:	f7fe fa28 	bl	8025b64 <mg_ntohs>
 8027714:	4601      	mov	r1, r0
 8027716:	4628      	mov	r0, r5
 8027718:	f7ff fed7 	bl	80274ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802771c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027720:	f013 0f04 	tst.w	r3, #4
 8027724:	d152      	bne.n	80277cc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8027726:	b2b8      	uxth	r0, r7
 8027728:	f7fe fa1c 	bl	8025b64 <mg_ntohs>
 802772c:	4601      	mov	r1, r0
 802772e:	4628      	mov	r0, r5
 8027730:	f7ff fecb 	bl	80274ca <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8027734:	463a      	mov	r2, r7
 8027736:	9902      	ldr	r1, [sp, #8]
 8027738:	4628      	mov	r0, r5
 802773a:	f7ff fe09 	bl	8027350 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 802773e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027742:	f013 0f04 	tst.w	r3, #4
 8027746:	d01c      	beq.n	8027782 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8027748:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802774c:	f013 0f04 	tst.w	r3, #4
 8027750:	d142      	bne.n	80277d8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027752:	8ba0      	ldrh	r0, [r4, #28]
 8027754:	f7fe fa06 	bl	8025b64 <mg_ntohs>
 8027758:	4601      	mov	r1, r0
 802775a:	4628      	mov	r0, r5
 802775c:	f7ff feb5 	bl	80274ca <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027760:	69e2      	ldr	r2, [r4, #28]
 8027762:	69a1      	ldr	r1, [r4, #24]
 8027764:	4628      	mov	r0, r5
 8027766:	f7ff fdf3 	bl	8027350 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802776a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802776c:	f7fe f9fa 	bl	8025b64 <mg_ntohs>
 8027770:	4601      	mov	r1, r0
 8027772:	4628      	mov	r0, r5
 8027774:	f7ff fea9 	bl	80274ca <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027778:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802777a:	6a21      	ldr	r1, [r4, #32]
 802777c:	4628      	mov	r0, r5
 802777e:	f7ff fde7 	bl	8027350 <mg_send>
  if (opts->user.len > 0) {
 8027782:	6860      	ldr	r0, [r4, #4]
 8027784:	bb70      	cbnz	r0, 80277e4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027786:	68e0      	ldr	r0, [r4, #12]
 8027788:	2800      	cmp	r0, #0
 802778a:	d138      	bne.n	80277fe <mg_mqtt_login+0x1f6>
}
 802778c:	b00b      	add	sp, #44	@ 0x2c
 802778e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027790:	2114      	movs	r1, #20
 8027792:	a804      	add	r0, sp, #16
 8027794:	f7fe f922 	bl	80259dc <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027798:	2300      	movs	r3, #0
 802779a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802779e:	a904      	add	r1, sp, #16
 80277a0:	a802      	add	r0, sp, #8
 80277a2:	f7fc fdad 	bl	8024300 <mg_str_s>
 80277a6:	e754      	b.n	8027652 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 80277a8:	230c      	movs	r3, #12
 80277aa:	e774      	b.n	8027696 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 80277ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80277ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80277b0:	f7f9 fcc0 	bl	8021134 <get_props_size>
 80277b4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 80277b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80277ba:	f013 0f04 	tst.w	r3, #4
 80277be:	d09b      	beq.n	80276f8 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80277c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80277c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80277c4:	f7f9 fcb6 	bl	8021134 <get_props_size>
 80277c8:	4406      	add	r6, r0
 80277ca:	e795      	b.n	80276f8 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80277cc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80277ce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80277d0:	4628      	mov	r0, r5
 80277d2:	f7ff fe87 	bl	80274e4 <mg_send_mqtt_properties>
 80277d6:	e7a6      	b.n	8027726 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 80277d8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80277da:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80277dc:	4628      	mov	r0, r5
 80277de:	f7ff fe81 	bl	80274e4 <mg_send_mqtt_properties>
 80277e2:	e7b6      	b.n	8027752 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 80277e4:	b280      	uxth	r0, r0
 80277e6:	f7fe f9bd 	bl	8025b64 <mg_ntohs>
 80277ea:	4601      	mov	r1, r0
 80277ec:	4628      	mov	r0, r5
 80277ee:	f7ff fe6c 	bl	80274ca <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 80277f2:	6862      	ldr	r2, [r4, #4]
 80277f4:	6821      	ldr	r1, [r4, #0]
 80277f6:	4628      	mov	r0, r5
 80277f8:	f7ff fdaa 	bl	8027350 <mg_send>
 80277fc:	e7c3      	b.n	8027786 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 80277fe:	b280      	uxth	r0, r0
 8027800:	f7fe f9b0 	bl	8025b64 <mg_ntohs>
 8027804:	4601      	mov	r1, r0
 8027806:	4628      	mov	r0, r5
 8027808:	f7ff fe5f 	bl	80274ca <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802780c:	68e2      	ldr	r2, [r4, #12]
 802780e:	68a1      	ldr	r1, [r4, #8]
 8027810:	4628      	mov	r0, r5
 8027812:	f7ff fd9d 	bl	8027350 <mg_send>
}
 8027816:	e7b9      	b.n	802778c <mg_mqtt_login+0x184>

08027818 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027818:	b530      	push	{r4, r5, lr}
 802781a:	b083      	sub	sp, #12
 802781c:	4604      	mov	r4, r0
 802781e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8027820:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027824:	f003 0303 	and.w	r3, r3, #3
 8027828:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802782c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027830:	f013 0f04 	tst.w	r3, #4
 8027834:	d133      	bne.n	802789e <mg_mqtt_sub+0x86>
 8027836:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8027838:	69eb      	ldr	r3, [r5, #28]
 802783a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802783c:	3305      	adds	r3, #5
 802783e:	2202      	movs	r2, #2
 8027840:	2108      	movs	r1, #8
 8027842:	4620      	mov	r0, r4
 8027844:	f7ff fe16 	bl	8027474 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027848:	6862      	ldr	r2, [r4, #4]
 802784a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802784c:	3301      	adds	r3, #1
 802784e:	b29b      	uxth	r3, r3
 8027850:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027852:	b91b      	cbnz	r3, 802785c <mg_mqtt_sub+0x44>
 8027854:	6862      	ldr	r2, [r4, #4]
 8027856:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027858:	3301      	adds	r3, #1
 802785a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802785c:	6863      	ldr	r3, [r4, #4]
 802785e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027860:	f7fe f980 	bl	8025b64 <mg_ntohs>
 8027864:	4601      	mov	r1, r0
 8027866:	4620      	mov	r0, r4
 8027868:	f7ff fe2f 	bl	80274ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802786c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027870:	f013 0f04 	tst.w	r3, #4
 8027874:	d118      	bne.n	80278a8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027876:	8ba8      	ldrh	r0, [r5, #28]
 8027878:	f7fe f974 	bl	8025b64 <mg_ntohs>
 802787c:	4601      	mov	r1, r0
 802787e:	4620      	mov	r0, r4
 8027880:	f7ff fe23 	bl	80274ca <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027884:	69ea      	ldr	r2, [r5, #28]
 8027886:	69a9      	ldr	r1, [r5, #24]
 8027888:	4620      	mov	r0, r4
 802788a:	f7ff fd61 	bl	8027350 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802788e:	2201      	movs	r2, #1
 8027890:	f10d 0107 	add.w	r1, sp, #7
 8027894:	4620      	mov	r0, r4
 8027896:	f7ff fd5b 	bl	8027350 <mg_send>
}
 802789a:	b003      	add	sp, #12
 802789c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802789e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80278a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80278a2:	f7f9 fc47 	bl	8021134 <get_props_size>
 80278a6:	e7c7      	b.n	8027838 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80278a8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80278aa:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80278ac:	4620      	mov	r0, r4
 80278ae:	f7ff fe19 	bl	80274e4 <mg_send_mqtt_properties>
 80278b2:	e7e0      	b.n	8027876 <mg_mqtt_sub+0x5e>

080278b4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80278b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278b8:	b083      	sub	sp, #12
 80278ba:	4605      	mov	r5, r0
 80278bc:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 80278be:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80278c2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80278c6:	005b      	lsls	r3, r3, #1
 80278c8:	f003 0306 	and.w	r3, r3, #6
 80278cc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 80278d0:	2a00      	cmp	r2, #0
 80278d2:	d057      	beq.n	8027984 <mg_mqtt_pub+0xd0>
 80278d4:	2201      	movs	r2, #1
 80278d6:	ea43 0a02 	orr.w	sl, r3, r2
 80278da:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 80278dc:	69e7      	ldr	r7, [r4, #28]
 80278de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80278e0:	441f      	add	r7, r3
 80278e2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80278e6:	4b3a      	ldr	r3, [pc, #232]	@ (80279d0 <mg_mqtt_pub+0x11c>)
 80278e8:	681b      	ldr	r3, [r3, #0]
 80278ea:	2b02      	cmp	r3, #2
 80278ec:	dc4c      	bgt.n	8027988 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 80278ee:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 80278f2:	f1bb 0f00 	cmp.w	fp, #0
 80278f6:	d001      	beq.n	80278fc <mg_mqtt_pub+0x48>
 80278f8:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80278fc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027900:	f013 0f04 	tst.w	r3, #4
 8027904:	d152      	bne.n	80279ac <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8027906:	f1bb 0f00 	cmp.w	fp, #0
 802790a:	d004      	beq.n	8027916 <mg_mqtt_pub+0x62>
 802790c:	f1b8 0f00 	cmp.w	r8, #0
 8027910:	d001      	beq.n	8027916 <mg_mqtt_pub+0x62>
 8027912:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8027916:	464b      	mov	r3, r9
 8027918:	4632      	mov	r2, r6
 802791a:	2103      	movs	r1, #3
 802791c:	4628      	mov	r0, r5
 802791e:	f7ff fda9 	bl	8027474 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027922:	8ba0      	ldrh	r0, [r4, #28]
 8027924:	f7fe f91e 	bl	8025b64 <mg_ntohs>
 8027928:	4601      	mov	r1, r0
 802792a:	4628      	mov	r0, r5
 802792c:	f7ff fdcd 	bl	80274ca <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027930:	69e2      	ldr	r2, [r4, #28]
 8027932:	69a1      	ldr	r1, [r4, #24]
 8027934:	4628      	mov	r0, r5
 8027936:	f7ff fd0b 	bl	8027350 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802793a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802793e:	b1b3      	cbz	r3, 802796e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8027940:	f1b8 0f00 	cmp.w	r8, #0
 8027944:	d10c      	bne.n	8027960 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027946:	686a      	ldr	r2, [r5, #4]
 8027948:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802794a:	3301      	adds	r3, #1
 802794c:	b29b      	uxth	r3, r3
 802794e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027950:	b91b      	cbnz	r3, 802795a <mg_mqtt_pub+0xa6>
 8027952:	686a      	ldr	r2, [r5, #4]
 8027954:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027956:	3301      	adds	r3, #1
 8027958:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802795a:	686b      	ldr	r3, [r5, #4]
 802795c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027960:	4640      	mov	r0, r8
 8027962:	f7fe f8ff 	bl	8025b64 <mg_ntohs>
 8027966:	4601      	mov	r1, r0
 8027968:	4628      	mov	r0, r5
 802796a:	f7ff fdae 	bl	80274ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802796e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027972:	f013 0f04 	tst.w	r3, #4
 8027976:	d11f      	bne.n	80279b8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027978:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802797a:	bb1a      	cbnz	r2, 80279c4 <mg_mqtt_pub+0x110>
}
 802797c:	4640      	mov	r0, r8
 802797e:	b003      	add	sp, #12
 8027980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027984:	2200      	movs	r2, #0
 8027986:	e7a6      	b.n	80278d6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027988:	4b12      	ldr	r3, [pc, #72]	@ (80279d4 <mg_mqtt_pub+0x120>)
 802798a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802798e:	4912      	ldr	r1, [pc, #72]	@ (80279d8 <mg_mqtt_pub+0x124>)
 8027990:	2003      	movs	r0, #3
 8027992:	f7fe fc29 	bl	80261e8 <mg_log_prefix>
 8027996:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027998:	6a22      	ldr	r2, [r4, #32]
 802799a:	9201      	str	r2, [sp, #4]
 802799c:	9300      	str	r3, [sp, #0]
 802799e:	69a3      	ldr	r3, [r4, #24]
 80279a0:	69e2      	ldr	r2, [r4, #28]
 80279a2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80279a4:	480d      	ldr	r0, [pc, #52]	@ (80279dc <mg_mqtt_pub+0x128>)
 80279a6:	f7fc facd 	bl	8023f44 <mg_log>
 80279aa:	e7a0      	b.n	80278ee <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80279ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80279ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80279b0:	f7f9 fbc0 	bl	8021134 <get_props_size>
 80279b4:	4481      	add	r9, r0
 80279b6:	e7a6      	b.n	8027906 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80279b8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80279ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80279bc:	4628      	mov	r0, r5
 80279be:	f7ff fd91 	bl	80274e4 <mg_send_mqtt_properties>
 80279c2:	e7d9      	b.n	8027978 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80279c4:	6a21      	ldr	r1, [r4, #32]
 80279c6:	4628      	mov	r0, r5
 80279c8:	f7ff fcc2 	bl	8027350 <mg_send>
 80279cc:	e7d6      	b.n	802797c <mg_mqtt_pub+0xc8>
 80279ce:	bf00      	nop
 80279d0:	2000012c 	.word	0x2000012c
 80279d4:	0803b6c0 	.word	0x0803b6c0
 80279d8:	0803acc0 	.word	0x0803acc0
 80279dc:	0803b060 	.word	0x0803b060

080279e0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 80279e0:	b530      	push	{r4, r5, lr}
 80279e2:	b08f      	sub	sp, #60	@ 0x3c
 80279e4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 80279e6:	2907      	cmp	r1, #7
 80279e8:	f000 808f 	beq.w	8027b0a <mqtt_cb+0x12a>
}
 80279ec:	b00f      	add	sp, #60	@ 0x3c
 80279ee:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80279f0:	2204      	movs	r2, #4
 80279f2:	e091      	b.n	8027b18 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80279f4:	4b73      	ldr	r3, [pc, #460]	@ (8027bc4 <mqtt_cb+0x1e4>)
 80279f6:	681b      	ldr	r3, [r3, #0]
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	dc06      	bgt.n	8027a0a <mqtt_cb+0x2a>
        c->is_closing = 1;
 80279fc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027a00:	f043 0320 	orr.w	r3, r3, #32
 8027a04:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8027a08:	e7f0      	b.n	80279ec <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8027bc8 <mqtt_cb+0x1e8>)
 8027a0c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8027a10:	496e      	ldr	r1, [pc, #440]	@ (8027bcc <mqtt_cb+0x1ec>)
 8027a12:	2001      	movs	r0, #1
 8027a14:	f7fe fbe8 	bl	80261e8 <mg_log_prefix>
 8027a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a1a:	486d      	ldr	r0, [pc, #436]	@ (8027bd0 <mqtt_cb+0x1f0>)
 8027a1c:	f7fc fa92 	bl	8023f44 <mg_log>
 8027a20:	e7ec      	b.n	80279fc <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027a22:	4b69      	ldr	r3, [pc, #420]	@ (8027bc8 <mqtt_cb+0x1e8>)
 8027a24:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8027a28:	4968      	ldr	r1, [pc, #416]	@ (8027bcc <mqtt_cb+0x1ec>)
 8027a2a:	2004      	movs	r0, #4
 8027a2c:	f7fe fbdc 	bl	80261e8 <mg_log_prefix>
 8027a30:	9b06      	ldr	r3, [sp, #24]
 8027a32:	9301      	str	r3, [sp, #4]
 8027a34:	9b07      	ldr	r3, [sp, #28]
 8027a36:	9300      	str	r3, [sp, #0]
 8027a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a3a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8027a3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a40:	4864      	ldr	r0, [pc, #400]	@ (8027bd4 <mqtt_cb+0x1f4>)
 8027a42:	f7fc fa7f 	bl	8023f44 <mg_log>
 8027a46:	e077      	b.n	8027b38 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8027a48:	aa0b      	add	r2, sp, #44	@ 0x2c
 8027a4a:	2111      	movs	r1, #17
 8027a4c:	4620      	mov	r0, r4
 8027a4e:	f7fb f830 	bl	8022ab2 <mg_call>
            if (mm.ack == 0) {
 8027a52:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8027a56:	b97b      	cbnz	r3, 8027a78 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8027a58:	4b5a      	ldr	r3, [pc, #360]	@ (8027bc4 <mqtt_cb+0x1e4>)
 8027a5a:	681b      	ldr	r3, [r3, #0]
 8027a5c:	2b02      	cmp	r3, #2
 8027a5e:	dd49      	ble.n	8027af4 <mqtt_cb+0x114>
 8027a60:	4b59      	ldr	r3, [pc, #356]	@ (8027bc8 <mqtt_cb+0x1e8>)
 8027a62:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027a66:	4959      	ldr	r1, [pc, #356]	@ (8027bcc <mqtt_cb+0x1ec>)
 8027a68:	2003      	movs	r0, #3
 8027a6a:	f7fe fbbd 	bl	80261e8 <mg_log_prefix>
 8027a6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a70:	4859      	ldr	r0, [pc, #356]	@ (8027bd8 <mqtt_cb+0x1f8>)
 8027a72:	f7fc fa67 	bl	8023f44 <mg_log>
 8027a76:	e03d      	b.n	8027af4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027a78:	4b52      	ldr	r3, [pc, #328]	@ (8027bc4 <mqtt_cb+0x1e4>)
 8027a7a:	681b      	ldr	r3, [r3, #0]
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	dc06      	bgt.n	8027a8e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027a80:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027a84:	f043 0320 	orr.w	r3, r3, #32
 8027a88:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8027a8c:	e032      	b.n	8027af4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8027bc8 <mqtt_cb+0x1e8>)
 8027a90:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8027a94:	494d      	ldr	r1, [pc, #308]	@ (8027bcc <mqtt_cb+0x1ec>)
 8027a96:	2001      	movs	r0, #1
 8027a98:	f7fe fba6 	bl	80261e8 <mg_log_prefix>
 8027a9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8027aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027aa2:	484e      	ldr	r0, [pc, #312]	@ (8027bdc <mqtt_cb+0x1fc>)
 8027aa4:	f7fc fa4e 	bl	8023f44 <mg_log>
 8027aa8:	e7ea      	b.n	8027a80 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8027aaa:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8027aae:	b1e5      	cbz	r5, 8027aea <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8027ab0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027ab4:	f7fe f856 	bl	8025b64 <mg_ntohs>
 8027ab8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027abc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ac0:	f013 0f04 	tst.w	r3, #4
 8027ac4:	d14a      	bne.n	8027b5c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8027ac6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8027ac8:	2d02      	cmp	r5, #2
 8027aca:	d049      	beq.n	8027b60 <mqtt_cb+0x180>
 8027acc:	2104      	movs	r1, #4
 8027ace:	2200      	movs	r2, #0
 8027ad0:	4620      	mov	r0, r4
 8027ad2:	f7ff fccf 	bl	8027474 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8027ad6:	2202      	movs	r2, #2
 8027ad8:	a903      	add	r1, sp, #12
 8027ada:	4620      	mov	r0, r4
 8027adc:	f7ff fc38 	bl	8027350 <mg_send>
              if (c->is_mqtt5) {
 8027ae0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ae4:	f013 0f04 	tst.w	r3, #4
 8027ae8:	d13c      	bne.n	8027b64 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8027aea:	aa04      	add	r2, sp, #16
 8027aec:	2110      	movs	r1, #16
 8027aee:	4620      	mov	r0, r4
 8027af0:	f7fa ffdf 	bl	8022ab2 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027af4:	aa04      	add	r2, sp, #16
 8027af6:	210f      	movs	r1, #15
 8027af8:	4620      	mov	r0, r4
 8027afa:	f7fa ffda 	bl	8022ab2 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8027afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027b00:	2100      	movs	r1, #0
 8027b02:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8027b06:	f7fd ff38 	bl	802597a <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027b0a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027b0e:	f013 0f04 	tst.w	r3, #4
 8027b12:	f43f af6d 	beq.w	80279f0 <mqtt_cb+0x10>
 8027b16:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8027b18:	ab04      	add	r3, sp, #16
 8027b1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8027b1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027b1e:	f7fb fc8c 	bl	802343a <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8027b22:	2802      	cmp	r0, #2
 8027b24:	f43f af66 	beq.w	80279f4 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8027b28:	2800      	cmp	r0, #0
 8027b2a:	f47f af5f 	bne.w	80279ec <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027b2e:	4b25      	ldr	r3, [pc, #148]	@ (8027bc4 <mqtt_cb+0x1e4>)
 8027b30:	681b      	ldr	r3, [r3, #0]
 8027b32:	2b03      	cmp	r3, #3
 8027b34:	f73f af75 	bgt.w	8027a22 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8027b38:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8027b3c:	3b02      	subs	r3, #2
 8027b3e:	2b04      	cmp	r3, #4
 8027b40:	d8d8      	bhi.n	8027af4 <mqtt_cb+0x114>
 8027b42:	a201      	add	r2, pc, #4	@ (adr r2, 8027b48 <mqtt_cb+0x168>)
 8027b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027b48:	08027a49 	.word	0x08027a49
 8027b4c:	08027aab 	.word	0x08027aab
 8027b50:	08027af5 	.word	0x08027af5
 8027b54:	08027b79 	.word	0x08027b79
 8027b58:	08027b9f 	.word	0x08027b9f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027b5c:	2304      	movs	r3, #4
 8027b5e:	e7b3      	b.n	8027ac8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027b60:	2105      	movs	r1, #5
 8027b62:	e7b4      	b.n	8027ace <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027b64:	2300      	movs	r3, #0
 8027b66:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8027b6a:	2202      	movs	r2, #2
 8027b6c:	f10d 010e 	add.w	r1, sp, #14
 8027b70:	4620      	mov	r0, r4
 8027b72:	f7ff fbed 	bl	8027350 <mg_send>
 8027b76:	e7b8      	b.n	8027aea <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027b78:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027b7c:	f7fd fff2 	bl	8025b64 <mg_ntohs>
 8027b80:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027b84:	2302      	movs	r3, #2
 8027b86:	461a      	mov	r2, r3
 8027b88:	2106      	movs	r1, #6
 8027b8a:	4620      	mov	r0, r4
 8027b8c:	f7ff fc72 	bl	8027474 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8027b90:	2202      	movs	r2, #2
 8027b92:	f10d 010e 	add.w	r1, sp, #14
 8027b96:	4620      	mov	r0, r4
 8027b98:	f7ff fbda 	bl	8027350 <mg_send>
            break;
 8027b9c:	e7aa      	b.n	8027af4 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8027b9e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027ba2:	f7fd ffdf 	bl	8025b64 <mg_ntohs>
 8027ba6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8027baa:	2302      	movs	r3, #2
 8027bac:	2200      	movs	r2, #0
 8027bae:	2107      	movs	r1, #7
 8027bb0:	4620      	mov	r0, r4
 8027bb2:	f7ff fc5f 	bl	8027474 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8027bb6:	2202      	movs	r2, #2
 8027bb8:	f10d 010e 	add.w	r1, sp, #14
 8027bbc:	4620      	mov	r0, r4
 8027bbe:	f7ff fbc7 	bl	8027350 <mg_send>
            break;
 8027bc2:	e797      	b.n	8027af4 <mqtt_cb+0x114>
 8027bc4:	2000012c 	.word	0x2000012c
 8027bc8:	0803b6b8 	.word	0x0803b6b8
 8027bcc:	0803acc0 	.word	0x0803acc0
 8027bd0:	0803b078 	.word	0x0803b078
 8027bd4:	0803b094 	.word	0x0803b094
 8027bd8:	0803b0b4 	.word	0x0803b0b4
 8027bdc:	0803b0c4 	.word	0x0803b0c4

08027be0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8027be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027be4:	b088      	sub	sp, #32
 8027be6:	4605      	mov	r5, r0
 8027be8:	469a      	mov	sl, r3
 8027bea:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8027bec:	f107 0614 	add.w	r6, r7, #20
 8027bf0:	9601      	str	r6, [sp, #4]
 8027bf2:	9200      	str	r2, [sp, #0]
 8027bf4:	6883      	ldr	r3, [r0, #8]
 8027bf6:	2206      	movs	r2, #6
 8027bf8:	f7fd ffd4 	bl	8025ba4 <tx_ip>
 8027bfc:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8027bfe:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8027c02:	2200      	movs	r2, #0
 8027c04:	6142      	str	r2, [r0, #20]
 8027c06:	6182      	str	r2, [r0, #24]
 8027c08:	61c2      	str	r2, [r0, #28]
 8027c0a:	6202      	str	r2, [r0, #32]
 8027c0c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027c10:	b10b      	cbz	r3, 8027c16 <tx_tcp+0x36>
 8027c12:	2f00      	cmp	r7, #0
 8027c14:	d147      	bne.n	8027ca6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8027c16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8027c1a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8027c1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8027c20:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8027c22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027c24:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8027c26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027c28:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8027c2a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8027c2e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8027c32:	f7fd ff97 	bl	8025b64 <mg_ntohs>
 8027c36:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8027c38:	2350      	movs	r3, #80	@ 0x50
 8027c3a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8027c3e:	b2bb      	uxth	r3, r7
 8027c40:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8027c42:	2000      	movs	r0, #0
 8027c44:	f88d 001c 	strb.w	r0, [sp, #28]
 8027c48:	7a62      	ldrb	r2, [r4, #9]
 8027c4a:	f88d 201d 	strb.w	r2, [sp, #29]
 8027c4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8027c52:	f88d 201e 	strb.w	r2, [sp, #30]
 8027c56:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8027c5a:	b2b2      	uxth	r2, r6
 8027c5c:	4649      	mov	r1, r9
 8027c5e:	f7f9 fac9 	bl	80211f4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027c62:	f104 060c 	add.w	r6, r4, #12
 8027c66:	2204      	movs	r2, #4
 8027c68:	4631      	mov	r1, r6
 8027c6a:	f7f9 fac3 	bl	80211f4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8027c6e:	f104 0810 	add.w	r8, r4, #16
 8027c72:	2204      	movs	r2, #4
 8027c74:	4641      	mov	r1, r8
 8027c76:	f7f9 fabd 	bl	80211f4 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8027c7a:	2204      	movs	r2, #4
 8027c7c:	a907      	add	r1, sp, #28
 8027c7e:	f7f9 fab9 	bl	80211f4 <csumup>
  tcp->csum = csumfin(cs);
 8027c82:	f7fd ff7b 	bl	8025b7c <csumfin>
 8027c86:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027c88:	4b18      	ldr	r3, [pc, #96]	@ (8027cec <tx_tcp+0x10c>)
 8027c8a:	681b      	ldr	r3, [r3, #0]
 8027c8c:	2b03      	cmp	r3, #3
 8027c8e:	dc10      	bgt.n	8027cb2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8027c90:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027c94:	696b      	ldr	r3, [r5, #20]
 8027c96:	1ac9      	subs	r1, r1, r3
 8027c98:	4439      	add	r1, r7
 8027c9a:	4628      	mov	r0, r5
 8027c9c:	f7f9 fabb 	bl	8021216 <ether_output>
}
 8027ca0:	b008      	add	sp, #32
 8027ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027ca6:	463a      	mov	r2, r7
 8027ca8:	4619      	mov	r1, r3
 8027caa:	3028      	adds	r0, #40	@ 0x28
 8027cac:	f004 fe7e 	bl	802c9ac <memmove>
 8027cb0:	e7b1      	b.n	8027c16 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8027cf0 <tx_tcp+0x110>)
 8027cb4:	f241 5254 	movw	r2, #5460	@ 0x1554
 8027cb8:	490e      	ldr	r1, [pc, #56]	@ (8027cf4 <tx_tcp+0x114>)
 8027cba:	2004      	movs	r0, #4
 8027cbc:	f7fe fa94 	bl	80261e8 <mg_log_prefix>
 8027cc0:	8aa0      	ldrh	r0, [r4, #20]
 8027cc2:	f7fd ff4f 	bl	8025b64 <mg_ntohs>
 8027cc6:	4681      	mov	r9, r0
 8027cc8:	8ae0      	ldrh	r0, [r4, #22]
 8027cca:	f7fd ff4b 	bl	8025b64 <mg_ntohs>
 8027cce:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8027cd2:	4909      	ldr	r1, [pc, #36]	@ (8027cf8 <tx_tcp+0x118>)
 8027cd4:	9704      	str	r7, [sp, #16]
 8027cd6:	9303      	str	r3, [sp, #12]
 8027cd8:	9002      	str	r0, [sp, #8]
 8027cda:	f8cd 8004 	str.w	r8, [sp, #4]
 8027cde:	9100      	str	r1, [sp, #0]
 8027ce0:	464b      	mov	r3, r9
 8027ce2:	4632      	mov	r2, r6
 8027ce4:	4805      	ldr	r0, [pc, #20]	@ (8027cfc <tx_tcp+0x11c>)
 8027ce6:	f7fc f92d 	bl	8023f44 <mg_log>
 8027cea:	e7d1      	b.n	8027c90 <tx_tcp+0xb0>
 8027cec:	2000012c 	.word	0x2000012c
 8027cf0:	0803b67c 	.word	0x0803b67c
 8027cf4:	0803acc0 	.word	0x0803acc0
 8027cf8:	08023f05 	.word	0x08023f05
 8027cfc:	0803b0e4 	.word	0x0803b0e4

08027d00 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8027d00:	b530      	push	{r4, r5, lr}
 8027d02:	b087      	sub	sp, #28
 8027d04:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8027d06:	8b05      	ldrh	r5, [r0, #24]
 8027d08:	4628      	mov	r0, r5
 8027d0a:	f7fd ff2b 	bl	8025b64 <mg_ntohs>
 8027d0e:	f7fd fe91 	bl	8025a34 <mg_ntohl>
 8027d12:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027d14:	6863      	ldr	r3, [r4, #4]
 8027d16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8027d18:	2300      	movs	r3, #0
 8027d1a:	9305      	str	r3, [sp, #20]
 8027d1c:	9304      	str	r3, [sp, #16]
 8027d1e:	9303      	str	r3, [sp, #12]
 8027d20:	9202      	str	r2, [sp, #8]
 8027d22:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027d24:	9301      	str	r3, [sp, #4]
 8027d26:	9500      	str	r5, [sp, #0]
 8027d28:	2302      	movs	r3, #2
 8027d2a:	69e2      	ldr	r2, [r4, #28]
 8027d2c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027d30:	f7ff ff56 	bl	8027be0 <tx_tcp>
}
 8027d34:	b007      	add	sp, #28
 8027d36:	bd30      	pop	{r4, r5, pc}

08027d38 <tx_tcp_pkt>:
                         size_t len) {
 8027d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d3c:	b087      	sub	sp, #28
 8027d3e:	4605      	mov	r5, r0
 8027d40:	4617      	mov	r7, r2
 8027d42:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8027d44:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027d46:	7b5c      	ldrb	r4, [r3, #13]
 8027d48:	f014 0403 	ands.w	r4, r4, #3
 8027d4c:	bf18      	it	ne
 8027d4e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027d50:	690e      	ldr	r6, [r1, #16]
 8027d52:	3606      	adds	r6, #6
 8027d54:	69ca      	ldr	r2, [r1, #28]
 8027d56:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8027d5a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027d5e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027d62:	6858      	ldr	r0, [r3, #4]
 8027d64:	f7fd fe66 	bl	8025a34 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027d68:	4420      	add	r0, r4
 8027d6a:	f7fd fe63 	bl	8025a34 <mg_ntohl>
 8027d6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027d70:	9305      	str	r3, [sp, #20]
 8027d72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027d74:	9304      	str	r3, [sp, #16]
 8027d76:	9003      	str	r0, [sp, #12]
 8027d78:	f8cd 8008 	str.w	r8, [sp, #8]
 8027d7c:	f8cd b004 	str.w	fp, [sp, #4]
 8027d80:	f8cd a000 	str.w	sl, [sp]
 8027d84:	463b      	mov	r3, r7
 8027d86:	464a      	mov	r2, r9
 8027d88:	4631      	mov	r1, r6
 8027d8a:	4628      	mov	r0, r5
 8027d8c:	f7ff ff28 	bl	8027be0 <tx_tcp>
}
 8027d90:	b007      	add	sp, #28
 8027d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027d98 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8027d98:	b530      	push	{r4, r5, lr}
 8027d9a:	b083      	sub	sp, #12
 8027d9c:	4604      	mov	r4, r0
 8027d9e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027da0:	6843      	ldr	r3, [r0, #4]
 8027da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027da4:	2901      	cmp	r1, #1
 8027da6:	d01a      	beq.n	8027dde <settmout+0x46>
 8027da8:	2903      	cmp	r1, #3
 8027daa:	d01a      	beq.n	8027de2 <settmout+0x4a>
 8027dac:	2904      	cmp	r1, #4
 8027dae:	d01b      	beq.n	8027de8 <settmout+0x50>
 8027db0:	2902      	cmp	r1, #2
 8027db2:	d012      	beq.n	8027dda <settmout+0x42>
 8027db4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8027db8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8027dba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8027dbc:	185b      	adds	r3, r3, r1
 8027dbe:	f142 0200 	adc.w	r2, r2, #0
 8027dc2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8027dc6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8027dca:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027dce:	4b10      	ldr	r3, [pc, #64]	@ (8027e10 <settmout+0x78>)
 8027dd0:	681b      	ldr	r3, [r3, #0]
 8027dd2:	2b03      	cmp	r3, #3
 8027dd4:	dc0b      	bgt.n	8027dee <settmout+0x56>
}
 8027dd6:	b003      	add	sp, #12
 8027dd8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027dda:	2364      	movs	r3, #100	@ 0x64
 8027ddc:	e7ec      	b.n	8027db8 <settmout+0x20>
 8027dde:	2396      	movs	r3, #150	@ 0x96
 8027de0:	e7ea      	b.n	8027db8 <settmout+0x20>
 8027de2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8027de6:	e7e7      	b.n	8027db8 <settmout+0x20>
 8027de8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027dec:	e7e4      	b.n	8027db8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027dee:	4b09      	ldr	r3, [pc, #36]	@ (8027e14 <settmout+0x7c>)
 8027df0:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8027df4:	4908      	ldr	r1, [pc, #32]	@ (8027e18 <settmout+0x80>)
 8027df6:	2004      	movs	r0, #4
 8027df8:	f7fe f9f6 	bl	80261e8 <mg_log_prefix>
 8027dfc:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8027e00:	e9cd 2300 	strd	r2, r3, [sp]
 8027e04:	462a      	mov	r2, r5
 8027e06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027e08:	4804      	ldr	r0, [pc, #16]	@ (8027e1c <settmout+0x84>)
 8027e0a:	f7fc f89b 	bl	8023f44 <mg_log>
}
 8027e0e:	e7e2      	b.n	8027dd6 <settmout+0x3e>
 8027e10:	2000012c 	.word	0x2000012c
 8027e14:	0803b670 	.word	0x0803b670
 8027e18:	0803acc0 	.word	0x0803acc0
 8027e1c:	0803b108 	.word	0x0803b108

08027e20 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8027e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e24:	b089      	sub	sp, #36	@ 0x24
 8027e26:	4604      	mov	r4, r0
 8027e28:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027e2a:	6843      	ldr	r3, [r0, #4]
 8027e2c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8027e2e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8027e32:	4611      	mov	r1, r2
 8027e34:	f7ff fa2e 	bl	8027294 <trim_len>
 8027e38:	4605      	mov	r5, r0
  if (c->is_udp) {
 8027e3a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027e3e:	f013 0f01 	tst.w	r3, #1
 8027e42:	d010      	beq.n	8027e66 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8027e44:	68ba      	ldr	r2, [r7, #8]
 8027e46:	9003      	str	r0, [sp, #12]
 8027e48:	9602      	str	r6, [sp, #8]
 8027e4a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027e4c:	9301      	str	r3, [sp, #4]
 8027e4e:	f8cd 8000 	str.w	r8, [sp]
 8027e52:	8b23      	ldrh	r3, [r4, #24]
 8027e54:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027e58:	4638      	mov	r0, r7
 8027e5a:	f7fd ff38 	bl	8025cce <tx_udp>
  return (long) len;
 8027e5e:	4628      	mov	r0, r5
}
 8027e60:	b009      	add	sp, #36	@ 0x24
 8027e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8027e66:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8027e6a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8027e6e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027e72:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027e76:	f7fd fddd 	bl	8025a34 <mg_ntohl>
 8027e7a:	9007      	str	r0, [sp, #28]
 8027e7c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027e80:	f7fd fdd8 	bl	8025a34 <mg_ntohl>
 8027e84:	9505      	str	r5, [sp, #20]
 8027e86:	9604      	str	r6, [sp, #16]
 8027e88:	9003      	str	r0, [sp, #12]
 8027e8a:	9b07      	ldr	r3, [sp, #28]
 8027e8c:	9302      	str	r3, [sp, #8]
 8027e8e:	f8cd b004 	str.w	fp, [sp, #4]
 8027e92:	f8cd a000 	str.w	sl, [sp]
 8027e96:	2318      	movs	r3, #24
 8027e98:	4642      	mov	r2, r8
 8027e9a:	4649      	mov	r1, r9
 8027e9c:	4638      	mov	r0, r7
 8027e9e:	f7ff fe9f 	bl	8027be0 <tx_tcp>
    if (sent == 0) {
 8027ea2:	b180      	cbz	r0, 8027ec6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8027ea4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027ea8:	d010      	beq.n	8027ecc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8027eaa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8027eae:	442b      	add	r3, r5
 8027eb0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027eb4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027eb8:	2b01      	cmp	r3, #1
 8027eba:	d1d0      	bne.n	8027e5e <mg_io_send+0x3e>
 8027ebc:	2100      	movs	r1, #0
 8027ebe:	4620      	mov	r0, r4
 8027ec0:	f7ff ff6a 	bl	8027d98 <settmout>
 8027ec4:	e7cb      	b.n	8027e5e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8027ec6:	f06f 0001 	mvn.w	r0, #1
 8027eca:	e7c9      	b.n	8027e60 <mg_io_send+0x40>
      return MG_IO_ERR;
 8027ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027ed0:	e7c6      	b.n	8027e60 <mg_io_send+0x40>
	...

08027ed4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8027ed4:	b510      	push	{r4, lr}
 8027ed6:	b082      	sub	sp, #8
 8027ed8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027eda:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027ede:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027ee2:	d00b      	beq.n	8027efc <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027ee4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027ee6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027ee8:	f7fd fc80 	bl	80257ec <mg_tls_send>
 8027eec:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8027eee:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027ef2:	d008      	beq.n	8027f06 <write_conn+0x32>
  } else if (len > 0) {
 8027ef4:	2800      	cmp	r0, #0
 8027ef6:	dc0b      	bgt.n	8027f10 <write_conn+0x3c>
}
 8027ef8:	b002      	add	sp, #8
 8027efa:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027efc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027efe:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027f00:	f7ff ff8e 	bl	8027e20 <mg_io_send>
 8027f04:	e7f2      	b.n	8027eec <write_conn+0x18>
    mg_error(c, "tx err");
 8027f06:	4908      	ldr	r1, [pc, #32]	@ (8027f28 <write_conn+0x54>)
 8027f08:	4620      	mov	r0, r4
 8027f0a:	f7fe fa55 	bl	80263b8 <mg_error>
 8027f0e:	e7f3      	b.n	8027ef8 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8027f10:	4602      	mov	r2, r0
 8027f12:	2100      	movs	r1, #0
 8027f14:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027f18:	f7fd fd2f 	bl	802597a <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8027f1c:	aa01      	add	r2, sp, #4
 8027f1e:	2108      	movs	r1, #8
 8027f20:	4620      	mov	r0, r4
 8027f22:	f7fa fdc6 	bl	8022ab2 <mg_call>
}
 8027f26:	e7e7      	b.n	8027ef8 <write_conn+0x24>
 8027f28:	0803b118 	.word	0x0803b118

08027f2c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8027f2c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8027f30:	f240 1221 	movw	r2, #289	@ 0x121
 8027f34:	421a      	tst	r2, r3
 8027f36:	d000      	beq.n	8027f3a <init_closure+0xe>
 8027f38:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8027f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f3e:	b086      	sub	sp, #24
 8027f40:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8027f42:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8027f44:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027f46:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8027f4a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8027f4e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8027f52:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8027f56:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8027f5a:	f7fd fd6b 	bl	8025a34 <mg_ntohl>
 8027f5e:	4605      	mov	r5, r0
 8027f60:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027f64:	f7fd fd66 	bl	8025a34 <mg_ntohl>
 8027f68:	2300      	movs	r3, #0
 8027f6a:	9305      	str	r3, [sp, #20]
 8027f6c:	9304      	str	r3, [sp, #16]
 8027f6e:	9003      	str	r0, [sp, #12]
 8027f70:	9502      	str	r5, [sp, #8]
 8027f72:	f8cd a004 	str.w	sl, [sp, #4]
 8027f76:	f8cd 9000 	str.w	r9, [sp]
 8027f7a:	2311      	movs	r3, #17
 8027f7c:	4642      	mov	r2, r8
 8027f7e:	4639      	mov	r1, r7
 8027f80:	4630      	mov	r0, r6
 8027f82:	f7ff fe2d 	bl	8027be0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8027f86:	2104      	movs	r1, #4
 8027f88:	4620      	mov	r0, r4
 8027f8a:	f7ff ff05 	bl	8027d98 <settmout>
}
 8027f8e:	b006      	add	sp, #24
 8027f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08027f94 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8027f94:	b530      	push	{r4, r5, lr}
 8027f96:	b085      	sub	sp, #20
 8027f98:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027f9a:	6843      	ldr	r3, [r0, #4]
 8027f9c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027f9e:	69c3      	ldr	r3, [r0, #28]
 8027fa0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8027fa2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027fa6:	f36f 03c3 	bfc	r3, #3, #1
 8027faa:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8027fae:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	db03      	blt.n	8027fbe <mg_connect_resolved+0x2a>
 8027fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8027fba:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8027fbe:	68ab      	ldr	r3, [r5, #8]
 8027fc0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8027fc2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8027fc6:	1c43      	adds	r3, r0, #1
 8027fc8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 8027fcc:	f7fd fdca 	bl	8025b64 <mg_ntohs>
 8027fd0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027fd2:	4b51      	ldr	r3, [pc, #324]	@ (8028118 <mg_connect_resolved+0x184>)
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	2b02      	cmp	r3, #2
 8027fd8:	dc36      	bgt.n	8028048 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 8027fda:	2200      	movs	r2, #0
 8027fdc:	2103      	movs	r1, #3
 8027fde:	4620      	mov	r0, r4
 8027fe0:	f7fa fd67 	bl	8022ab2 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8027fe4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027fe8:	f013 0301 	ands.w	r3, r3, #1
 8027fec:	d009      	beq.n	8028002 <mg_connect_resolved+0x6e>
 8027fee:	9903      	ldr	r1, [sp, #12]
 8027ff0:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027ff4:	d03b      	beq.n	802806e <mg_connect_resolved+0xda>
 8027ff6:	68aa      	ldr	r2, [r5, #8]
 8027ff8:	68e8      	ldr	r0, [r5, #12]
 8027ffa:	ea62 0200 	orn	r2, r2, r0
 8027ffe:	4291      	cmp	r1, r2
 8028000:	d035      	beq.n	802806e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028002:	68aa      	ldr	r2, [r5, #8]
 8028004:	2a00      	cmp	r2, #0
 8028006:	d046      	beq.n	8028096 <mg_connect_resolved+0x102>
 8028008:	9903      	ldr	r1, [sp, #12]
 802800a:	68e8      	ldr	r0, [r5, #12]
 802800c:	404a      	eors	r2, r1
 802800e:	4202      	tst	r2, r0
 8028010:	d141      	bne.n	8028096 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8028012:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028014:	4291      	cmp	r1, r2
 8028016:	d03e      	beq.n	8028096 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028018:	4b3f      	ldr	r3, [pc, #252]	@ (8028118 <mg_connect_resolved+0x184>)
 802801a:	681b      	ldr	r3, [r3, #0]
 802801c:	2b02      	cmp	r3, #2
 802801e:	dc2e      	bgt.n	802807e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8028020:	9903      	ldr	r1, [sp, #12]
 8028022:	4628      	mov	r0, r5
 8028024:	f7fd fe9b 	bl	8025d5e <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8028028:	2102      	movs	r1, #2
 802802a:	4620      	mov	r0, r4
 802802c:	f7ff feb4 	bl	8027d98 <settmout>
    c->is_arplooking = 1;
 8028030:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028034:	f043 0310 	orr.w	r3, r3, #16
 8028038:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802803c:	b2db      	uxtb	r3, r3
 802803e:	f043 0320 	orr.w	r3, r3, #32
 8028042:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8028046:	e018      	b.n	802807a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028048:	4b34      	ldr	r3, [pc, #208]	@ (802811c <mg_connect_resolved+0x188>)
 802804a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802804e:	4934      	ldr	r1, [pc, #208]	@ (8028120 <mg_connect_resolved+0x18c>)
 8028050:	2003      	movs	r0, #3
 8028052:	f7fe f8c9 	bl	80261e8 <mg_log_prefix>
 8028056:	4a33      	ldr	r2, [pc, #204]	@ (8028124 <mg_connect_resolved+0x190>)
 8028058:	f104 031c 	add.w	r3, r4, #28
 802805c:	9301      	str	r3, [sp, #4]
 802805e:	9200      	str	r2, [sp, #0]
 8028060:	f104 0308 	add.w	r3, r4, #8
 8028064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028066:	4830      	ldr	r0, [pc, #192]	@ (8028128 <mg_connect_resolved+0x194>)
 8028068:	f7fb ff6c 	bl	8023f44 <mg_log>
 802806c:	e7b5      	b.n	8027fda <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802806e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028072:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8028076:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802807a:	b005      	add	sp, #20
 802807c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802807e:	4b27      	ldr	r3, [pc, #156]	@ (802811c <mg_connect_resolved+0x188>)
 8028080:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028084:	4926      	ldr	r1, [pc, #152]	@ (8028120 <mg_connect_resolved+0x18c>)
 8028086:	2003      	movs	r0, #3
 8028088:	f7fe f8ae 	bl	80261e8 <mg_log_prefix>
 802808c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802808e:	4827      	ldr	r0, [pc, #156]	@ (802812c <mg_connect_resolved+0x198>)
 8028090:	f7fb ff58 	bl	8023f44 <mg_log>
 8028094:	e7c4      	b.n	8028020 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8028096:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802809a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802809e:	2ae0      	cmp	r2, #224	@ 0xe0
 80280a0:	d00e      	beq.n	80280c0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80280a2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 80280a6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80280aa:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 80280ae:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80280b2:	b31b      	cbz	r3, 80280fc <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80280b4:	2200      	movs	r2, #0
 80280b6:	2104      	movs	r1, #4
 80280b8:	4620      	mov	r0, r4
 80280ba:	f7fa fcfa 	bl	8022ab2 <mg_call>
 80280be:	e7dc      	b.n	802807a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80280c0:	4b1b      	ldr	r3, [pc, #108]	@ (8028130 <mg_connect_resolved+0x19c>)
 80280c2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80280c6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80280ca:	0c1b      	lsrs	r3, r3, #16
 80280cc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80280d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80280d4:	b2db      	uxtb	r3, r3
 80280d6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80280da:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80280de:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80280e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80280e6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80280ea:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80280ee:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 80280f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80280f6:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 80280fa:	e7be      	b.n	802807a <mg_connect_resolved+0xe6>
      send_syn(c);
 80280fc:	4620      	mov	r0, r4
 80280fe:	f7ff fdff 	bl	8027d00 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8028102:	2103      	movs	r1, #3
 8028104:	4620      	mov	r0, r4
 8028106:	f7ff fe47 	bl	8027d98 <settmout>
      c->is_connecting = 1;
 802810a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802810e:	f043 0320 	orr.w	r3, r3, #32
 8028112:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8028116:	e7b0      	b.n	802807a <mg_connect_resolved+0xe6>
 8028118:	2000012c 	.word	0x2000012c
 802811c:	0803b64c 	.word	0x0803b64c
 8028120:	0803acc0 	.word	0x0803acc0
 8028124:	0802609d 	.word	0x0802609d
 8028128:	0803b120 	.word	0x0803b120
 802812c:	0803b130 	.word	0x0803b130
 8028130:	08035d2c 	.word	0x08035d2c

08028134 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028136:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8028138:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802813a:	2902      	cmp	r1, #2
 802813c:	d009      	beq.n	8028152 <dns_cb+0x1e>
 802813e:	4604      	mov	r4, r0
 8028140:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8028144:	2907      	cmp	r1, #7
 8028146:	d016      	beq.n	8028176 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8028148:	2909      	cmp	r1, #9
 802814a:	f000 809a 	beq.w	8028282 <dns_cb+0x14e>
}
 802814e:	b049      	add	sp, #292	@ 0x124
 8028150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8028152:	6816      	ldr	r6, [r2, #0]
 8028154:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8028156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028158:	e000      	b.n	802815c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802815a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802815c:	2b00      	cmp	r3, #0
 802815e:	d0f6      	beq.n	802814e <dns_cb+0x1a>
      tmp = d->next;
 8028160:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8028162:	6899      	ldr	r1, [r3, #8]
 8028164:	68da      	ldr	r2, [r3, #12]
 8028166:	42b1      	cmp	r1, r6
 8028168:	41aa      	sbcs	r2, r5
 802816a:	d2f6      	bcs.n	802815a <dns_cb+0x26>
 802816c:	494c      	ldr	r1, [pc, #304]	@ (80282a0 <dns_cb+0x16c>)
 802816e:	6858      	ldr	r0, [r3, #4]
 8028170:	f7fe f922 	bl	80263b8 <mg_error>
 8028174:	e7f1      	b.n	802815a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8028176:	aa02      	add	r2, sp, #8
 8028178:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802817a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802817c:	f7fe f870 	bl	8026260 <mg_dns_parse>
 8028180:	b9c8      	cbnz	r0, 80281b6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028182:	4b48      	ldr	r3, [pc, #288]	@ (80282a4 <dns_cb+0x170>)
 8028184:	681b      	ldr	r3, [r3, #0]
 8028186:	2b00      	cmp	r3, #0
 8028188:	dc0a      	bgt.n	80281a0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802818a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802818c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802818e:	f7fb f83b 	bl	8023208 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028192:	4b44      	ldr	r3, [pc, #272]	@ (80282a4 <dns_cb+0x170>)
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	2b00      	cmp	r3, #0
 8028198:	dc68      	bgt.n	802826c <dns_cb+0x138>
    c->recv.len = 0;
 802819a:	2300      	movs	r3, #0
 802819c:	6423      	str	r3, [r4, #64]	@ 0x40
 802819e:	e7d6      	b.n	802814e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80281a0:	4b41      	ldr	r3, [pc, #260]	@ (80282a8 <dns_cb+0x174>)
 80281a2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80281a6:	4941      	ldr	r1, [pc, #260]	@ (80282ac <dns_cb+0x178>)
 80281a8:	2001      	movs	r0, #1
 80281aa:	f7fe f81d 	bl	80261e8 <mg_log_prefix>
 80281ae:	4840      	ldr	r0, [pc, #256]	@ (80282b0 <dns_cb+0x17c>)
 80281b0:	f7fb fec8 	bl	8023f44 <mg_log>
 80281b4:	e7e9      	b.n	802818a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80281b6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80281b8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80281ba:	e008      	b.n	80281ce <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80281bc:	6868      	ldr	r0, [r5, #4]
 80281be:	f7ff fee9 	bl	8027f94 <mg_connect_resolved>
        mg_dns_free(head, d);
 80281c2:	4629      	mov	r1, r5
 80281c4:	4630      	mov	r0, r6
 80281c6:	f7f9 fa35 	bl	8021634 <mg_dns_free>
        resolved = 1;
 80281ca:	2101      	movs	r1, #1
 80281cc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80281ce:	2d00      	cmp	r5, #0
 80281d0:	d049      	beq.n	8028266 <dns_cb+0x132>
        tmp = d->next;
 80281d2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80281d4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80281d8:	8a2b      	ldrh	r3, [r5, #16]
 80281da:	429a      	cmp	r2, r3
 80281dc:	d1f6      	bne.n	80281cc <dns_cb+0x98>
        if (d->c->is_resolving) {
 80281de:	6868      	ldr	r0, [r5, #4]
 80281e0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80281e4:	f013 0f08 	tst.w	r3, #8
 80281e8:	d02c      	beq.n	8028244 <dns_cb+0x110>
          if (dm.resolved) {
 80281ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80281ee:	b323      	cbz	r3, 802823a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 80281f0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80281f2:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 80281f6:	686b      	ldr	r3, [r5, #4]
 80281f8:	f103 0c1c 	add.w	ip, r3, #28
 80281fc:	f10d 0e0c 	add.w	lr, sp, #12
 8028200:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8028204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028208:	f8de 3000 	ldr.w	r3, [lr]
 802820c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8028210:	4b24      	ldr	r3, [pc, #144]	@ (80282a4 <dns_cb+0x170>)
 8028212:	681b      	ldr	r3, [r3, #0]
 8028214:	2b02      	cmp	r3, #2
 8028216:	ddd1      	ble.n	80281bc <dns_cb+0x88>
 8028218:	4b23      	ldr	r3, [pc, #140]	@ (80282a8 <dns_cb+0x174>)
 802821a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802821e:	4923      	ldr	r1, [pc, #140]	@ (80282ac <dns_cb+0x178>)
 8028220:	2003      	movs	r0, #3
 8028222:	f7fd ffe1 	bl	80261e8 <mg_log_prefix>
 8028226:	686b      	ldr	r3, [r5, #4]
 8028228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802822a:	331c      	adds	r3, #28
 802822c:	9300      	str	r3, [sp, #0]
 802822e:	4b21      	ldr	r3, [pc, #132]	@ (80282b4 <dns_cb+0x180>)
 8028230:	aa08      	add	r2, sp, #32
 8028232:	4821      	ldr	r0, [pc, #132]	@ (80282b8 <dns_cb+0x184>)
 8028234:	f7fb fe86 	bl	8023f44 <mg_log>
 8028238:	e7c0      	b.n	80281bc <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802823a:	aa08      	add	r2, sp, #32
 802823c:	491f      	ldr	r1, [pc, #124]	@ (80282bc <dns_cb+0x188>)
 802823e:	f7fe f8bb 	bl	80263b8 <mg_error>
 8028242:	e7be      	b.n	80281c2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8028244:	4b17      	ldr	r3, [pc, #92]	@ (80282a4 <dns_cb+0x170>)
 8028246:	681b      	ldr	r3, [r3, #0]
 8028248:	2b00      	cmp	r3, #0
 802824a:	ddba      	ble.n	80281c2 <dns_cb+0x8e>
 802824c:	4b16      	ldr	r3, [pc, #88]	@ (80282a8 <dns_cb+0x174>)
 802824e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8028252:	4916      	ldr	r1, [pc, #88]	@ (80282ac <dns_cb+0x178>)
 8028254:	2001      	movs	r0, #1
 8028256:	f7fd ffc7 	bl	80261e8 <mg_log_prefix>
 802825a:	686b      	ldr	r3, [r5, #4]
 802825c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802825e:	4818      	ldr	r0, [pc, #96]	@ (80282c0 <dns_cb+0x18c>)
 8028260:	f7fb fe70 	bl	8023f44 <mg_log>
 8028264:	e7ad      	b.n	80281c2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028266:	2900      	cmp	r1, #0
 8028268:	d197      	bne.n	802819a <dns_cb+0x66>
 802826a:	e792      	b.n	8028192 <dns_cb+0x5e>
 802826c:	4b0e      	ldr	r3, [pc, #56]	@ (80282a8 <dns_cb+0x174>)
 802826e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8028272:	490e      	ldr	r1, [pc, #56]	@ (80282ac <dns_cb+0x178>)
 8028274:	2001      	movs	r0, #1
 8028276:	f7fd ffb7 	bl	80261e8 <mg_log_prefix>
 802827a:	4812      	ldr	r0, [pc, #72]	@ (80282c4 <dns_cb+0x190>)
 802827c:	f7fb fe62 	bl	8023f44 <mg_log>
 8028280:	e78b      	b.n	802819a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028282:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028284:	2c00      	cmp	r4, #0
 8028286:	f43f af62 	beq.w	802814e <dns_cb+0x1a>
      tmp = d->next;
 802828a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802828c:	490e      	ldr	r1, [pc, #56]	@ (80282c8 <dns_cb+0x194>)
 802828e:	6860      	ldr	r0, [r4, #4]
 8028290:	f7fe f892 	bl	80263b8 <mg_error>
      mg_dns_free(head, d);
 8028294:	4621      	mov	r1, r4
 8028296:	4630      	mov	r0, r6
 8028298:	f7f9 f9cc 	bl	8021634 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802829c:	462c      	mov	r4, r5
 802829e:	e7f1      	b.n	8028284 <dns_cb+0x150>
 80282a0:	0803b144 	.word	0x0803b144
 80282a4:	2000012c 	.word	0x2000012c
 80282a8:	0803b720 	.word	0x0803b720
 80282ac:	0803acc0 	.word	0x0803acc0
 80282b0:	0803b150 	.word	0x0803b150
 80282b4:	08026081 	.word	0x08026081
 80282b8:	0803b16c 	.word	0x0803b16c
 80282bc:	0803b17c 	.word	0x0803b17c
 80282c0:	0803b194 	.word	0x0803b194
 80282c4:	0803b1ac 	.word	0x0803b1ac
 80282c8:	0803b1bc 	.word	0x0803b1bc

080282cc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80282cc:	b510      	push	{r4, lr}
 80282ce:	b086      	sub	sp, #24
 80282d0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80282d2:	4a12      	ldr	r2, [pc, #72]	@ (802831c <tx_dhcp_discover+0x50>)
 80282d4:	ab04      	add	r3, sp, #16
 80282d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80282da:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80282de:	2200      	movs	r2, #0
 80282e0:	9202      	str	r2, [sp, #8]
 80282e2:	2108      	movs	r1, #8
 80282e4:	9101      	str	r1, [sp, #4]
 80282e6:	9300      	str	r3, [sp, #0]
 80282e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80282ec:	490c      	ldr	r1, [pc, #48]	@ (8028320 <tx_dhcp_discover+0x54>)
 80282ee:	4620      	mov	r0, r4
 80282f0:	f7fd fd7a 	bl	8025de8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80282f4:	4b0b      	ldr	r3, [pc, #44]	@ (8028324 <tx_dhcp_discover+0x58>)
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	2b02      	cmp	r3, #2
 80282fa:	dc01      	bgt.n	8028300 <tx_dhcp_discover+0x34>
}
 80282fc:	b006      	add	sp, #24
 80282fe:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028300:	4b09      	ldr	r3, [pc, #36]	@ (8028328 <tx_dhcp_discover+0x5c>)
 8028302:	f241 4270 	movw	r2, #5232	@ 0x1470
 8028306:	4909      	ldr	r1, [pc, #36]	@ (802832c <tx_dhcp_discover+0x60>)
 8028308:	2003      	movs	r0, #3
 802830a:	f7fd ff6d 	bl	80261e8 <mg_log_prefix>
 802830e:	4622      	mov	r2, r4
 8028310:	4907      	ldr	r1, [pc, #28]	@ (8028330 <tx_dhcp_discover+0x64>)
 8028312:	4808      	ldr	r0, [pc, #32]	@ (8028334 <tx_dhcp_discover+0x68>)
 8028314:	f7fb fe16 	bl	8023f44 <mg_log>
}
 8028318:	e7f0      	b.n	80282fc <tx_dhcp_discover+0x30>
 802831a:	bf00      	nop
 802831c:	0803b1e8 	.word	0x0803b1e8
 8028320:	0803b748 	.word	0x0803b748
 8028324:	2000012c 	.word	0x2000012c
 8028328:	0803b61c 	.word	0x0803b61c
 802832c:	0803acc0 	.word	0x0803acc0
 8028330:	08023f15 	.word	0x08023f15
 8028334:	0803b1c8 	.word	0x0803b1c8

08028338 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8028338:	b510      	push	{r4, lr}
 802833a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802833c:	4c0d      	ldr	r4, [pc, #52]	@ (8028374 <tx_dhcp_request_re+0x3c>)
 802833e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8028340:	2401      	movs	r4, #1
 8028342:	9402      	str	r4, [sp, #8]
 8028344:	2404      	movs	r4, #4
 8028346:	9401      	str	r4, [sp, #4]
 8028348:	ac05      	add	r4, sp, #20
 802834a:	9400      	str	r4, [sp, #0]
 802834c:	f7fd fd4c 	bl	8025de8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028350:	4b09      	ldr	r3, [pc, #36]	@ (8028378 <tx_dhcp_request_re+0x40>)
 8028352:	681b      	ldr	r3, [r3, #0]
 8028354:	2b02      	cmp	r3, #2
 8028356:	dc01      	bgt.n	802835c <tx_dhcp_request_re+0x24>
}
 8028358:	b006      	add	sp, #24
 802835a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802835c:	4b07      	ldr	r3, [pc, #28]	@ (802837c <tx_dhcp_request_re+0x44>)
 802835e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8028362:	4907      	ldr	r1, [pc, #28]	@ (8028380 <tx_dhcp_request_re+0x48>)
 8028364:	2003      	movs	r0, #3
 8028366:	f7fd ff3f 	bl	80261e8 <mg_log_prefix>
 802836a:	4806      	ldr	r0, [pc, #24]	@ (8028384 <tx_dhcp_request_re+0x4c>)
 802836c:	f7fb fdea 	bl	8023f44 <mg_log>
}
 8028370:	e7f2      	b.n	8028358 <tx_dhcp_request_re+0x20>
 8028372:	bf00      	nop
 8028374:	ff030135 	.word	0xff030135
 8028378:	2000012c 	.word	0x2000012c
 802837c:	0803b5f8 	.word	0x0803b5f8
 8028380:	0803acc0 	.word	0x0803acc0
 8028384:	0803b1f4 	.word	0x0803b1f4

08028388 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028388:	b5f0      	push	{r4, r5, r6, r7, lr}
 802838a:	b083      	sub	sp, #12
 802838c:	4604      	mov	r4, r0
 802838e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028390:	698e      	ldr	r6, [r1, #24]
 8028392:	88f7      	ldrh	r7, [r6, #6]
 8028394:	2001      	movs	r0, #1
 8028396:	f7fd fbe5 	bl	8025b64 <mg_ntohs>
 802839a:	4287      	cmp	r7, r0
 802839c:	d006      	beq.n	80283ac <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802839e:	2002      	movs	r0, #2
 80283a0:	f7fd fbe0 	bl	8025b64 <mg_ntohs>
 80283a4:	4287      	cmp	r7, r0
 80283a6:	d05a      	beq.n	802845e <rx_arp+0xd6>
}
 80283a8:	b003      	add	sp, #12
 80283aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80283ac:	69b2      	ldr	r2, [r6, #24]
 80283ae:	68a3      	ldr	r3, [r4, #8]
 80283b0:	429a      	cmp	r2, r3
 80283b2:	d1f4      	bne.n	802839e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80283b4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80283b6:	692b      	ldr	r3, [r5, #16]
 80283b8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80283bc:	6032      	str	r2, [r6, #0]
 80283be:	895b      	ldrh	r3, [r3, #10]
 80283c0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80283c2:	6823      	ldr	r3, [r4, #0]
 80283c4:	f8c6 3006 	str.w	r3, [r6, #6]
 80283c8:	88a3      	ldrh	r3, [r4, #4]
 80283ca:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80283cc:	f640 0006 	movw	r0, #2054	@ 0x806
 80283d0:	f7fd fbc8 	bl	8025b64 <mg_ntohs>
 80283d4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 80283d6:	69ab      	ldr	r3, [r5, #24]
 80283d8:	6818      	ldr	r0, [r3, #0]
 80283da:	6859      	ldr	r1, [r3, #4]
 80283dc:	689a      	ldr	r2, [r3, #8]
 80283de:	68df      	ldr	r7, [r3, #12]
 80283e0:	f8c6 000e 	str.w	r0, [r6, #14]
 80283e4:	f8c6 1012 	str.w	r1, [r6, #18]
 80283e8:	f8c6 2016 	str.w	r2, [r6, #22]
 80283ec:	f8c6 701a 	str.w	r7, [r6, #26]
 80283f0:	6918      	ldr	r0, [r3, #16]
 80283f2:	6959      	ldr	r1, [r3, #20]
 80283f4:	699a      	ldr	r2, [r3, #24]
 80283f6:	f8c6 001e 	str.w	r0, [r6, #30]
 80283fa:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 80283fe:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8028402:	2002      	movs	r0, #2
 8028404:	f7fd fbae 	bl	8025b64 <mg_ntohs>
 8028408:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802840a:	69ab      	ldr	r3, [r5, #24]
 802840c:	689a      	ldr	r2, [r3, #8]
 802840e:	6232      	str	r2, [r6, #32]
 8028410:	899b      	ldrh	r3, [r3, #12]
 8028412:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8028414:	6823      	ldr	r3, [r4, #0]
 8028416:	f8c6 3016 	str.w	r3, [r6, #22]
 802841a:	88a3      	ldrh	r3, [r4, #4]
 802841c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 802841e:	69ab      	ldr	r3, [r5, #24]
 8028420:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8028424:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8028428:	68a3      	ldr	r3, [r4, #8]
 802842a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802842c:	4b32      	ldr	r3, [pc, #200]	@ (80284f8 <rx_arp+0x170>)
 802842e:	681b      	ldr	r3, [r3, #0]
 8028430:	2b02      	cmp	r3, #2
 8028432:	dc04      	bgt.n	802843e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8028434:	212a      	movs	r1, #42	@ 0x2a
 8028436:	4620      	mov	r0, r4
 8028438:	f7f8 feed 	bl	8021216 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802843c:	e7b4      	b.n	80283a8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802843e:	4b2f      	ldr	r3, [pc, #188]	@ (80284fc <rx_arp+0x174>)
 8028440:	f241 4292 	movw	r2, #5266	@ 0x1492
 8028444:	492e      	ldr	r1, [pc, #184]	@ (8028500 <rx_arp+0x178>)
 8028446:	2003      	movs	r0, #3
 8028448:	f7fd fece 	bl	80261e8 <mg_log_prefix>
 802844c:	9400      	str	r4, [sp, #0]
 802844e:	4b2d      	ldr	r3, [pc, #180]	@ (8028504 <rx_arp+0x17c>)
 8028450:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8028454:	492c      	ldr	r1, [pc, #176]	@ (8028508 <rx_arp+0x180>)
 8028456:	482d      	ldr	r0, [pc, #180]	@ (802850c <rx_arp+0x184>)
 8028458:	f7fb fd74 	bl	8023f44 <mg_log>
 802845c:	e7ea      	b.n	8028434 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802845e:	2206      	movs	r2, #6
 8028460:	4621      	mov	r1, r4
 8028462:	f106 0012 	add.w	r0, r6, #18
 8028466:	f004 fa27 	bl	802c8b8 <memcmp>
 802846a:	2800      	cmp	r0, #0
 802846c:	d19c      	bne.n	80283a8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802846e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028472:	6923      	ldr	r3, [r4, #16]
 8028474:	429a      	cmp	r2, r3
 8028476:	d026      	beq.n	80284c6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028478:	2200      	movs	r2, #0
 802847a:	4629      	mov	r1, r5
 802847c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802847e:	f7fa f9ac 	bl	80227da <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028482:	4604      	mov	r4, r0
 8028484:	2800      	cmp	r0, #0
 8028486:	d08f      	beq.n	80283a8 <rx_arp+0x20>
 8028488:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802848c:	f013 0f10 	tst.w	r3, #16
 8028490:	d08a      	beq.n	80283a8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028492:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028496:	68b3      	ldr	r3, [r6, #8]
 8028498:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802849c:	89b3      	ldrh	r3, [r6, #12]
 802849e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80284a2:	4b15      	ldr	r3, [pc, #84]	@ (80284f8 <rx_arp+0x170>)
 80284a4:	681b      	ldr	r3, [r3, #0]
 80284a6:	2b02      	cmp	r3, #2
 80284a8:	dc14      	bgt.n	80284d4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 80284aa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80284ae:	f36f 1304 	bfc	r3, #4, #1
 80284b2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 80284b6:	4620      	mov	r0, r4
 80284b8:	f7ff fc22 	bl	8027d00 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 80284bc:	2103      	movs	r1, #3
 80284be:	4620      	mov	r0, r4
 80284c0:	f7ff fc6a 	bl	8027d98 <settmout>
 80284c4:	e770      	b.n	80283a8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80284c6:	68b3      	ldr	r3, [r6, #8]
 80284c8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80284cc:	89b3      	ldrh	r3, [r6, #12]
 80284ce:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80284d2:	e769      	b.n	80283a8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80284d4:	4b09      	ldr	r3, [pc, #36]	@ (80284fc <rx_arp+0x174>)
 80284d6:	f241 429f 	movw	r2, #5279	@ 0x149f
 80284da:	4909      	ldr	r1, [pc, #36]	@ (8028500 <rx_arp+0x178>)
 80284dc:	2003      	movs	r0, #3
 80284de:	f7fd fe83 	bl	80261e8 <mg_log_prefix>
 80284e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80284e4:	9501      	str	r5, [sp, #4]
 80284e6:	4b07      	ldr	r3, [pc, #28]	@ (8028504 <rx_arp+0x17c>)
 80284e8:	9300      	str	r3, [sp, #0]
 80284ea:	f104 031c 	add.w	r3, r4, #28
 80284ee:	4a06      	ldr	r2, [pc, #24]	@ (8028508 <rx_arp+0x180>)
 80284f0:	4807      	ldr	r0, [pc, #28]	@ (8028510 <rx_arp+0x188>)
 80284f2:	f7fb fd27 	bl	8023f44 <mg_log>
 80284f6:	e7d8      	b.n	80284aa <rx_arp+0x122>
 80284f8:	2000012c 	.word	0x2000012c
 80284fc:	0803b5e4 	.word	0x0803b5e4
 8028500:	0803acc0 	.word	0x0803acc0
 8028504:	08023f15 	.word	0x08023f15
 8028508:	08023f05 	.word	0x08023f05
 802850c:	0803b204 	.word	0x0803b204
 8028510:	0803b21c 	.word	0x0803b21c

08028514 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8028514:	b570      	push	{r4, r5, r6, lr}
 8028516:	b08c      	sub	sp, #48	@ 0x30
 8028518:	4686      	mov	lr, r0
 802851a:	460d      	mov	r5, r1
 802851c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 802851e:	f10d 0c14 	add.w	ip, sp, #20
 8028522:	4c22      	ldr	r4, [pc, #136]	@ (80285ac <tx_dhcp_request_sel+0x98>)
 8028524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802852a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802852e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8028532:	f82c 2b02 	strh.w	r2, [ip], #2
 8028536:	0c12      	lsrs	r2, r2, #16
 8028538:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802853c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8028540:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8028542:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8028546:	b323      	cbz	r3, 8028592 <tx_dhcp_request_sel+0x7e>
 8028548:	2306      	movs	r3, #6
 802854a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802854e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8028550:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8028554:	b132      	cbz	r2, 8028564 <tx_dhcp_request_sel+0x50>
 8028556:	1c5a      	adds	r2, r3, #1
 8028558:	3348      	adds	r3, #72	@ 0x48
 802855a:	446b      	add	r3, sp
 802855c:	212a      	movs	r1, #42	@ 0x2a
 802855e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8028562:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8028564:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8028568:	441a      	add	r2, r3
 802856a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802856e:	2200      	movs	r2, #0
 8028570:	9202      	str	r2, [sp, #8]
 8028572:	3319      	adds	r3, #25
 8028574:	9301      	str	r3, [sp, #4]
 8028576:	ab05      	add	r3, sp, #20
 8028578:	9300      	str	r3, [sp, #0]
 802857a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802857e:	490c      	ldr	r1, [pc, #48]	@ (80285b0 <tx_dhcp_request_sel+0x9c>)
 8028580:	4670      	mov	r0, lr
 8028582:	f7fd fc31 	bl	8025de8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028586:	4b0b      	ldr	r3, [pc, #44]	@ (80285b4 <tx_dhcp_request_sel+0xa0>)
 8028588:	681b      	ldr	r3, [r3, #0]
 802858a:	2b02      	cmp	r3, #2
 802858c:	dc03      	bgt.n	8028596 <tx_dhcp_request_sel+0x82>
}
 802858e:	b00c      	add	sp, #48	@ 0x30
 8028590:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028592:	2300      	movs	r3, #0
 8028594:	e7dc      	b.n	8028550 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028596:	4b08      	ldr	r3, [pc, #32]	@ (80285b8 <tx_dhcp_request_sel+0xa4>)
 8028598:	f241 425b 	movw	r2, #5211	@ 0x145b
 802859c:	4907      	ldr	r1, [pc, #28]	@ (80285bc <tx_dhcp_request_sel+0xa8>)
 802859e:	2003      	movs	r0, #3
 80285a0:	f7fd fe22 	bl	80261e8 <mg_log_prefix>
 80285a4:	4806      	ldr	r0, [pc, #24]	@ (80285c0 <tx_dhcp_request_sel+0xac>)
 80285a6:	f7fb fccd 	bl	8023f44 <mg_log>
}
 80285aa:	e7f0      	b.n	802858e <tx_dhcp_request_sel+0x7a>
 80285ac:	08035f58 	.word	0x08035f58
 80285b0:	0803b748 	.word	0x0803b748
 80285b4:	2000012c 	.word	0x2000012c
 80285b8:	0803b5b8 	.word	0x0803b5b8
 80285bc:	0803acc0 	.word	0x0803acc0
 80285c0:	0803b1f4 	.word	0x0803b1f4

080285c4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80285c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285c8:	b089      	sub	sp, #36	@ 0x24
 80285ca:	4604      	mov	r4, r0
 80285cc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80285ce:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80285d2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80285d6:	d049      	beq.n	802866c <read_conn+0xa8>
 80285d8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 80285dc:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80285de:	6878      	ldr	r0, [r7, #4]
 80285e0:	f7fd fa28 	bl	8025a34 <mg_ntohl>
 80285e4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80285e6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 80285e8:	7b7b      	ldrb	r3, [r7, #13]
 80285ea:	f013 0f01 	tst.w	r3, #1
 80285ee:	d053      	beq.n	8028698 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 80285f0:	68eb      	ldr	r3, [r5, #12]
 80285f2:	4403      	add	r3, r0
 80285f4:	3301      	adds	r3, #1
 80285f6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 80285fa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80285fe:	f013 0f10 	tst.w	r3, #16
 8028602:	d003      	beq.n	802860c <read_conn+0x48>
 8028604:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028608:	2b04      	cmp	r3, #4
 802860a:	d032      	beq.n	8028672 <read_conn+0xae>
      c->is_draining = 1;
 802860c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028610:	f043 0310 	orr.w	r3, r3, #16
 8028614:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8028618:	2104      	movs	r1, #4
 802861a:	4620      	mov	r0, r4
 802861c:	f7ff fbbc 	bl	8027d98 <settmout>
      flags |= TH_FIN;
 8028620:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8028624:	6863      	ldr	r3, [r4, #4]
 8028626:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028628:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802862c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028630:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028634:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028638:	f7fd f9fc 	bl	8025a34 <mg_ntohl>
 802863c:	4605      	mov	r5, r0
 802863e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028642:	f7fd f9f7 	bl	8025a34 <mg_ntohl>
 8028646:	2300      	movs	r3, #0
 8028648:	9305      	str	r3, [sp, #20]
 802864a:	4b9b      	ldr	r3, [pc, #620]	@ (80288b8 <read_conn+0x2f4>)
 802864c:	9304      	str	r3, [sp, #16]
 802864e:	9003      	str	r0, [sp, #12]
 8028650:	9502      	str	r5, [sp, #8]
 8028652:	f8cd a004 	str.w	sl, [sp, #4]
 8028656:	f8cd 9000 	str.w	r9, [sp]
 802865a:	465b      	mov	r3, fp
 802865c:	4632      	mov	r2, r6
 802865e:	4641      	mov	r1, r8
 8028660:	4638      	mov	r0, r7
 8028662:	f7ff fabd 	bl	8027be0 <tx_tcp>
}
 8028666:	b009      	add	sp, #36	@ 0x24
 8028668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802866c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028670:	e7b4      	b.n	80285dc <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028672:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028676:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028678:	6898      	ldr	r0, [r3, #8]
 802867a:	f7fd f9db 	bl	8025a34 <mg_ntohl>
 802867e:	4287      	cmp	r7, r0
 8028680:	d004      	beq.n	802868c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028682:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028686:	f04f 0b10 	mov.w	fp, #16
 802868a:	e7cb      	b.n	8028624 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802868c:	3701      	adds	r7, #1
 802868e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028692:	f04f 0b10 	mov.w	fp, #16
 8028696:	e7c5      	b.n	8028624 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028698:	68eb      	ldr	r3, [r5, #12]
 802869a:	2b00      	cmp	r3, #0
 802869c:	d0e3      	beq.n	8028666 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802869e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80286a2:	4282      	cmp	r2, r0
 80286a4:	d046      	beq.n	8028734 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80286a6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 80286a8:	42aa      	cmp	r2, r5
 80286aa:	d025      	beq.n	80286f8 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80286ac:	4b83      	ldr	r3, [pc, #524]	@ (80288bc <read_conn+0x2f8>)
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	2b03      	cmp	r3, #3
 80286b2:	dc30      	bgt.n	8028716 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80286b4:	6863      	ldr	r3, [r4, #4]
 80286b6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80286b8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80286bc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80286c0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80286c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80286c8:	f7fd f9b4 	bl	8025a34 <mg_ntohl>
 80286cc:	4605      	mov	r5, r0
 80286ce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80286d2:	f7fd f9af 	bl	8025a34 <mg_ntohl>
 80286d6:	2300      	movs	r3, #0
 80286d8:	9305      	str	r3, [sp, #20]
 80286da:	4b77      	ldr	r3, [pc, #476]	@ (80288b8 <read_conn+0x2f4>)
 80286dc:	9304      	str	r3, [sp, #16]
 80286de:	9003      	str	r0, [sp, #12]
 80286e0:	9502      	str	r5, [sp, #8]
 80286e2:	f8cd a004 	str.w	sl, [sp, #4]
 80286e6:	f8cd 9000 	str.w	r9, [sp]
 80286ea:	2310      	movs	r3, #16
 80286ec:	4632      	mov	r2, r6
 80286ee:	4641      	mov	r1, r8
 80286f0:	4638      	mov	r0, r7
 80286f2:	f7ff fa75 	bl	8027be0 <tx_tcp>
 80286f6:	e7b6      	b.n	8028666 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80286f8:	4b70      	ldr	r3, [pc, #448]	@ (80288bc <read_conn+0x2f8>)
 80286fa:	681b      	ldr	r3, [r3, #0]
 80286fc:	2b03      	cmp	r3, #3
 80286fe:	ddb2      	ble.n	8028666 <read_conn+0xa2>
 8028700:	4b6f      	ldr	r3, [pc, #444]	@ (80288c0 <read_conn+0x2fc>)
 8028702:	f241 52da 	movw	r2, #5594	@ 0x15da
 8028706:	496f      	ldr	r1, [pc, #444]	@ (80288c4 <read_conn+0x300>)
 8028708:	2004      	movs	r0, #4
 802870a:	f7fd fd6d 	bl	80261e8 <mg_log_prefix>
 802870e:	486e      	ldr	r0, [pc, #440]	@ (80288c8 <read_conn+0x304>)
 8028710:	f7fb fc18 	bl	8023f44 <mg_log>
 8028714:	e7a7      	b.n	8028666 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028716:	4b6a      	ldr	r3, [pc, #424]	@ (80288c0 <read_conn+0x2fc>)
 8028718:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802871c:	4969      	ldr	r1, [pc, #420]	@ (80288c4 <read_conn+0x300>)
 802871e:	2004      	movs	r0, #4
 8028720:	f7fd fd62 	bl	80261e8 <mg_log_prefix>
 8028724:	462b      	mov	r3, r5
 8028726:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802872a:	4641      	mov	r1, r8
 802872c:	4867      	ldr	r0, [pc, #412]	@ (80288cc <read_conn+0x308>)
 802872e:	f7fb fc09 	bl	8023f44 <mg_log>
 8028732:	e7bf      	b.n	80286b4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8028734:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8028738:	f8d9 1008 	ldr.w	r1, [r9, #8]
 802873c:	1a52      	subs	r2, r2, r1
 802873e:	4293      	cmp	r3, r2
 8028740:	d905      	bls.n	802874e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028742:	4419      	add	r1, r3
 8028744:	4648      	mov	r0, r9
 8028746:	f7fe fb8b 	bl	8026e60 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 802874a:	2800      	cmp	r0, #0
 802874c:	d05c      	beq.n	8028808 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802874e:	f8d9 0000 	ldr.w	r0, [r9]
 8028752:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028756:	68ea      	ldr	r2, [r5, #12]
 8028758:	68a9      	ldr	r1, [r5, #8]
 802875a:	4418      	add	r0, r3
 802875c:	f005 fb7c 	bl	802de58 <memcpy>
    io->len += pkt->pay.len;
 8028760:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028764:	68ea      	ldr	r2, [r5, #12]
 8028766:	4413      	add	r3, r2
 8028768:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802876c:	4b53      	ldr	r3, [pc, #332]	@ (80288bc <read_conn+0x2f8>)
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	2b03      	cmp	r3, #3
 8028772:	dc4e      	bgt.n	8028812 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028774:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028776:	6858      	ldr	r0, [r3, #4]
 8028778:	f7fd f95c 	bl	8025a34 <mg_ntohl>
 802877c:	68eb      	ldr	r3, [r5, #12]
 802877e:	4418      	add	r0, r3
 8028780:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028784:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028788:	68ea      	ldr	r2, [r5, #12]
 802878a:	4413      	add	r3, r2
 802878c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028790:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028794:	4293      	cmp	r3, r2
 8028796:	d95e      	bls.n	8028856 <read_conn+0x292>
 8028798:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802879c:	4298      	cmp	r0, r3
 802879e:	d05a      	beq.n	8028856 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80287a0:	4b46      	ldr	r3, [pc, #280]	@ (80288bc <read_conn+0x2f8>)
 80287a2:	681b      	ldr	r3, [r3, #0]
 80287a4:	2b03      	cmp	r3, #3
 80287a6:	dc48      	bgt.n	802883a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80287a8:	6863      	ldr	r3, [r4, #4]
 80287aa:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 80287ae:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80287b2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80287b6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80287ba:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80287be:	f7fd f939 	bl	8025a34 <mg_ntohl>
 80287c2:	9007      	str	r0, [sp, #28]
 80287c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80287c8:	f7fd f934 	bl	8025a34 <mg_ntohl>
 80287cc:	2700      	movs	r7, #0
 80287ce:	9705      	str	r7, [sp, #20]
 80287d0:	9704      	str	r7, [sp, #16]
 80287d2:	9003      	str	r0, [sp, #12]
 80287d4:	9b07      	ldr	r3, [sp, #28]
 80287d6:	9302      	str	r3, [sp, #8]
 80287d8:	f8cd b004 	str.w	fp, [sp, #4]
 80287dc:	f8cd a000 	str.w	sl, [sp]
 80287e0:	2310      	movs	r3, #16
 80287e2:	4632      	mov	r2, r6
 80287e4:	4641      	mov	r1, r8
 80287e6:	4648      	mov	r0, r9
 80287e8:	f7ff f9fa 	bl	8027be0 <tx_tcp>
      s->unacked = 0;
 80287ec:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 80287f0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80287f4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 80287f8:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80287fc:	b37b      	cbz	r3, 802885e <read_conn+0x29a>
 80287fe:	4639      	mov	r1, r7
 8028800:	4620      	mov	r0, r4
 8028802:	f7ff fac9 	bl	8027d98 <settmout>
 8028806:	e02a      	b.n	802885e <read_conn+0x29a>
    mg_error(c, "oom");
 8028808:	4931      	ldr	r1, [pc, #196]	@ (80288d0 <read_conn+0x30c>)
 802880a:	4620      	mov	r0, r4
 802880c:	f7fd fdd4 	bl	80263b8 <mg_error>
 8028810:	e729      	b.n	8028666 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028812:	4b2b      	ldr	r3, [pc, #172]	@ (80288c0 <read_conn+0x2fc>)
 8028814:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8028818:	492a      	ldr	r1, [pc, #168]	@ (80288c4 <read_conn+0x300>)
 802881a:	2004      	movs	r0, #4
 802881c:	f7fd fce4 	bl	80261e8 <mg_log_prefix>
 8028820:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8028822:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028824:	6858      	ldr	r0, [r3, #4]
 8028826:	f7fd f905 	bl	8025a34 <mg_ntohl>
 802882a:	4602      	mov	r2, r0
 802882c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028830:	4639      	mov	r1, r7
 8028832:	4828      	ldr	r0, [pc, #160]	@ (80288d4 <read_conn+0x310>)
 8028834:	f7fb fb86 	bl	8023f44 <mg_log>
 8028838:	e79c      	b.n	8028774 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802883a:	4b21      	ldr	r3, [pc, #132]	@ (80288c0 <read_conn+0x2fc>)
 802883c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8028840:	4920      	ldr	r1, [pc, #128]	@ (80288c4 <read_conn+0x300>)
 8028842:	2004      	movs	r0, #4
 8028844:	f7fd fcd0 	bl	80261e8 <mg_log_prefix>
 8028848:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 802884c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802884e:	4822      	ldr	r0, [pc, #136]	@ (80288d8 <read_conn+0x314>)
 8028850:	f7fb fb78 	bl	8023f44 <mg_log>
 8028854:	e7a8      	b.n	80287a8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028856:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802885a:	2b01      	cmp	r3, #1
 802885c:	d11b      	bne.n	8028896 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 802885e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028862:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028866:	2ac0      	cmp	r2, #192	@ 0xc0
 8028868:	f43f aefd 	beq.w	8028666 <read_conn+0xa2>
    } else if (c->is_tls) {
 802886c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028870:	d01b      	beq.n	80288aa <read_conn+0x2e6>
      io = &c->recv;
 8028872:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028876:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028878:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802887a:	1a5b      	subs	r3, r3, r1
 802887c:	68ea      	ldr	r2, [r5, #12]
 802887e:	4293      	cmp	r3, r2
 8028880:	d204      	bcs.n	802888c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028882:	4411      	add	r1, r2
 8028884:	4630      	mov	r0, r6
 8028886:	f7fe faeb 	bl	8026e60 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802888a:	b148      	cbz	r0, 80288a0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802888c:	4631      	mov	r1, r6
 802888e:	4620      	mov	r0, r4
 8028890:	f7fd fdca 	bl	8026428 <handle_tls_recv>
 8028894:	e6e7      	b.n	8028666 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028896:	2101      	movs	r1, #1
 8028898:	4620      	mov	r0, r4
 802889a:	f7ff fa7d 	bl	8027d98 <settmout>
 802889e:	e7de      	b.n	802885e <read_conn+0x29a>
        mg_error(c, "oom");
 80288a0:	490b      	ldr	r1, [pc, #44]	@ (80288d0 <read_conn+0x30c>)
 80288a2:	4620      	mov	r0, r4
 80288a4:	f7fd fd88 	bl	80263b8 <mg_error>
 80288a8:	e6dd      	b.n	8028666 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80288aa:	f105 020c 	add.w	r2, r5, #12
 80288ae:	2107      	movs	r1, #7
 80288b0:	4620      	mov	r0, r4
 80288b2:	f7fa f8fe 	bl	8022ab2 <mg_call>
}
 80288b6:	e6d6      	b.n	8028666 <read_conn+0xa2>
 80288b8:	08036c80 	.word	0x08036c80
 80288bc:	2000012c 	.word	0x2000012c
 80288c0:	0803b5ac 	.word	0x0803b5ac
 80288c4:	0803acc0 	.word	0x0803acc0
 80288c8:	0803b238 	.word	0x0803b238
 80288cc:	0803b250 	.word	0x0803b250
 80288d0:	0803afc0 	.word	0x0803afc0
 80288d4:	0803b268 	.word	0x0803b268
 80288d8:	0803b27c 	.word	0x0803b27c

080288dc <accept_conn>:
                                         struct pkt *pkt) {
 80288dc:	b570      	push	{r4, r5, r6, lr}
 80288de:	4605      	mov	r5, r0
 80288e0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 80288e2:	6840      	ldr	r0, [r0, #4]
 80288e4:	f7fa fe58 	bl	8023598 <mg_alloc_conn>
  if (c == NULL) {
 80288e8:	4604      	mov	r4, r0
 80288ea:	2800      	cmp	r0, #0
 80288ec:	d058      	beq.n	80289a0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 80288ee:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80288f0:	6898      	ldr	r0, [r3, #8]
 80288f2:	f7fd f89f 	bl	8025a34 <mg_ntohl>
 80288f6:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 80288fa:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80288fc:	6858      	ldr	r0, [r3, #4]
 80288fe:	f7fd f899 	bl	8025a34 <mg_ntohl>
 8028902:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8028906:	6933      	ldr	r3, [r6, #16]
 8028908:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802890c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8028910:	895b      	ldrh	r3, [r3, #10]
 8028912:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8028916:	2100      	movs	r1, #0
 8028918:	4620      	mov	r0, r4
 802891a:	f7ff fa3d 	bl	8027d98 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802891e:	69f3      	ldr	r3, [r6, #28]
 8028920:	68db      	ldr	r3, [r3, #12]
 8028922:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8028924:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028926:	881b      	ldrh	r3, [r3, #0]
 8028928:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802892a:	4b2c      	ldr	r3, [pc, #176]	@ (80289dc <accept_conn+0x100>)
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	2b02      	cmp	r3, #2
 8028930:	dc45      	bgt.n	80289be <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8028932:	686b      	ldr	r3, [r5, #4]
 8028934:	681b      	ldr	r3, [r3, #0]
 8028936:	6023      	str	r3, [r4, #0]
 8028938:	686b      	ldr	r3, [r5, #4]
 802893a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802893c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028940:	f043 0304 	orr.w	r3, r3, #4
 8028944:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8028948:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802894c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8028950:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8028954:	f363 02c3 	bfi	r2, r3, #3, #1
 8028958:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802895c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028960:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028964:	f104 0608 	add.w	r6, r4, #8
 8028968:	f105 0c08 	add.w	ip, r5, #8
 802896c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028970:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028972:	f8dc 3000 	ldr.w	r3, [ip]
 8028976:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028978:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802897c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8028980:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8028982:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8028984:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8028986:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8028988:	2200      	movs	r2, #0
 802898a:	2101      	movs	r1, #1
 802898c:	4620      	mov	r0, r4
 802898e:	f7fa f890 	bl	8022ab2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8028992:	2200      	movs	r2, #0
 8028994:	2105      	movs	r1, #5
 8028996:	4620      	mov	r0, r4
 8028998:	f7fa f88b 	bl	8022ab2 <mg_call>
}
 802899c:	4620      	mov	r0, r4
 802899e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 80289a0:	4b0e      	ldr	r3, [pc, #56]	@ (80289dc <accept_conn+0x100>)
 80289a2:	681b      	ldr	r3, [r3, #0]
 80289a4:	2b00      	cmp	r3, #0
 80289a6:	ddf9      	ble.n	802899c <accept_conn+0xc0>
 80289a8:	4b0d      	ldr	r3, [pc, #52]	@ (80289e0 <accept_conn+0x104>)
 80289aa:	f241 5268 	movw	r2, #5480	@ 0x1568
 80289ae:	490d      	ldr	r1, [pc, #52]	@ (80289e4 <accept_conn+0x108>)
 80289b0:	2001      	movs	r0, #1
 80289b2:	f7fd fc19 	bl	80261e8 <mg_log_prefix>
 80289b6:	480c      	ldr	r0, [pc, #48]	@ (80289e8 <accept_conn+0x10c>)
 80289b8:	f7fb fac4 	bl	8023f44 <mg_log>
    return NULL;
 80289bc:	e7ee      	b.n	802899c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80289be:	4b08      	ldr	r3, [pc, #32]	@ (80289e0 <accept_conn+0x104>)
 80289c0:	f241 5271 	movw	r2, #5489	@ 0x1571
 80289c4:	4907      	ldr	r1, [pc, #28]	@ (80289e4 <accept_conn+0x108>)
 80289c6:	2003      	movs	r0, #3
 80289c8:	f7fd fc0e 	bl	80261e8 <mg_log_prefix>
 80289cc:	f104 031c 	add.w	r3, r4, #28
 80289d0:	4a06      	ldr	r2, [pc, #24]	@ (80289ec <accept_conn+0x110>)
 80289d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289d4:	4806      	ldr	r0, [pc, #24]	@ (80289f0 <accept_conn+0x114>)
 80289d6:	f7fb fab5 	bl	8023f44 <mg_log>
 80289da:	e7aa      	b.n	8028932 <accept_conn+0x56>
 80289dc:	2000012c 	.word	0x2000012c
 80289e0:	0803b5a0 	.word	0x0803b5a0
 80289e4:	0803acc0 	.word	0x0803acc0
 80289e8:	0803b2e8 	.word	0x0803b2e8
 80289ec:	0802609d 	.word	0x0802609d
 80289f0:	0803b28c 	.word	0x0803b28c

080289f4 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80289f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80289f8:	b083      	sub	sp, #12
 80289fa:	4606      	mov	r6, r0
 80289fc:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80289fe:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8028a00:	2200      	movs	r2, #0
 8028a02:	4638      	mov	r0, r7
 8028a04:	f7f9 fee9 	bl	80227da <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028a08:	4605      	mov	r5, r0
 8028a0a:	b380      	cbz	r0, 8028a6e <rx_tcp+0x7a>
 8028a0c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8028a10:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028a14:	f013 0f20 	tst.w	r3, #32
 8028a18:	d02b      	beq.n	8028a72 <rx_tcp+0x7e>
 8028a1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a1c:	7b5a      	ldrb	r2, [r3, #13]
 8028a1e:	2a12      	cmp	r2, #18
 8028a20:	d126      	bne.n	8028a70 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8028a22:	6898      	ldr	r0, [r3, #8]
 8028a24:	f7fd f806 	bl	8025a34 <mg_ntohl>
 8028a28:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8028a2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a2e:	6858      	ldr	r0, [r3, #4]
 8028a30:	f7fd f800 	bl	8025a34 <mg_ntohl>
 8028a34:	3001      	adds	r0, #1
 8028a36:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8028a3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a3c:	689b      	ldr	r3, [r3, #8]
 8028a3e:	2700      	movs	r7, #0
 8028a40:	9701      	str	r7, [sp, #4]
 8028a42:	9700      	str	r7, [sp, #0]
 8028a44:	2210      	movs	r2, #16
 8028a46:	4621      	mov	r1, r4
 8028a48:	4630      	mov	r0, r6
 8028a4a:	f7ff f975 	bl	8027d38 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8028a4e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028a52:	f367 1345 	bfi	r3, r7, #5, #1
 8028a56:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8028a5a:	4639      	mov	r1, r7
 8028a5c:	4628      	mov	r0, r5
 8028a5e:	f7ff f99b 	bl	8027d98 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028a62:	463a      	mov	r2, r7
 8028a64:	2104      	movs	r1, #4
 8028a66:	4628      	mov	r0, r5
 8028a68:	f7fa f823 	bl	8022ab2 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8028a6c:	e01b      	b.n	8028aa6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028a6e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028a70:	b385      	cbz	r5, 8028ad4 <rx_tcp+0xe0>
 8028a72:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028a76:	f013 0f20 	tst.w	r3, #32
 8028a7a:	d004      	beq.n	8028a86 <rx_tcp+0x92>
 8028a7c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a7e:	7b5a      	ldrb	r2, [r3, #13]
 8028a80:	2a10      	cmp	r2, #16
 8028a82:	d113      	bne.n	8028aac <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028a84:	b335      	cbz	r5, 8028ad4 <rx_tcp+0xe0>
 8028a86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a88:	7b5b      	ldrb	r3, [r3, #13]
 8028a8a:	f013 0f04 	tst.w	r3, #4
 8028a8e:	d117      	bne.n	8028ac0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8028a90:	b305      	cbz	r5, 8028ad4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8028a92:	2300      	movs	r3, #0
 8028a94:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8028a98:	f898 301e 	ldrb.w	r3, [r8, #30]
 8028a9c:	b1ab      	cbz	r3, 8028aca <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8028a9e:	4621      	mov	r1, r4
 8028aa0:	4628      	mov	r0, r5
 8028aa2:	f7ff fd8f 	bl	80285c4 <read_conn>
}
 8028aa6:	b003      	add	sp, #12
 8028aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028aac:	689b      	ldr	r3, [r3, #8]
 8028aae:	2200      	movs	r2, #0
 8028ab0:	9201      	str	r2, [sp, #4]
 8028ab2:	9200      	str	r2, [sp, #0]
 8028ab4:	2214      	movs	r2, #20
 8028ab6:	4621      	mov	r1, r4
 8028ab8:	4630      	mov	r0, r6
 8028aba:	f7ff f93d 	bl	8027d38 <tx_tcp_pkt>
 8028abe:	e7f2      	b.n	8028aa6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028ac0:	4934      	ldr	r1, [pc, #208]	@ (8028b94 <rx_tcp+0x1a0>)
 8028ac2:	4628      	mov	r0, r5
 8028ac4:	f7fd fc78 	bl	80263b8 <mg_error>
 8028ac8:	e7ed      	b.n	8028aa6 <rx_tcp+0xb2>
      settmout(c,
 8028aca:	2100      	movs	r1, #0
 8028acc:	4628      	mov	r0, r5
 8028ace:	f7ff f963 	bl	8027d98 <settmout>
 8028ad2:	e7e4      	b.n	8028a9e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8028ad4:	2201      	movs	r2, #1
 8028ad6:	4621      	mov	r1, r4
 8028ad8:	4638      	mov	r0, r7
 8028ada:	f7f9 fe7e 	bl	80227da <getpeer>
 8028ade:	4607      	mov	r7, r0
 8028ae0:	b168      	cbz	r0, 8028afe <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8028ae2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8028ae4:	7b6b      	ldrb	r3, [r5, #13]
 8028ae6:	f013 0f04 	tst.w	r3, #4
 8028aea:	d013      	beq.n	8028b14 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028aec:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028af0:	f013 0f04 	tst.w	r3, #4
 8028af4:	d0d7      	beq.n	8028aa6 <rx_tcp+0xb2>
 8028af6:	4927      	ldr	r1, [pc, #156]	@ (8028b94 <rx_tcp+0x1a0>)
 8028af8:	f7fd fc5e 	bl	80263b8 <mg_error>
 8028afc:	e7d3      	b.n	8028aa6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028afe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028b00:	689b      	ldr	r3, [r3, #8]
 8028b02:	2200      	movs	r2, #0
 8028b04:	9201      	str	r2, [sp, #4]
 8028b06:	9200      	str	r2, [sp, #0]
 8028b08:	2214      	movs	r2, #20
 8028b0a:	4621      	mov	r1, r4
 8028b0c:	4630      	mov	r0, r6
 8028b0e:	f7ff f913 	bl	8027d38 <tx_tcp_pkt>
 8028b12:	e7c8      	b.n	8028aa6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8028b14:	f013 0f02 	tst.w	r3, #2
 8028b18:	d11d      	bne.n	8028b56 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8028b1a:	f013 0f01 	tst.w	r3, #1
 8028b1e:	d129      	bne.n	8028b74 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8028b20:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8028b24:	4648      	mov	r0, r9
 8028b26:	f7fc ff85 	bl	8025a34 <mg_ntohl>
 8028b2a:	4680      	mov	r8, r0
 8028b2c:	8828      	ldrh	r0, [r5, #0]
 8028b2e:	f7fd f819 	bl	8025b64 <mg_ntohs>
 8028b32:	1c43      	adds	r3, r0, #1
 8028b34:	4598      	cmp	r8, r3
 8028b36:	d027      	beq.n	8028b88 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8028b38:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8028b3c:	f013 0f04 	tst.w	r3, #4
 8028b40:	d1b1      	bne.n	8028aa6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028b42:	2300      	movs	r3, #0
 8028b44:	9301      	str	r3, [sp, #4]
 8028b46:	9300      	str	r3, [sp, #0]
 8028b48:	464b      	mov	r3, r9
 8028b4a:	2214      	movs	r2, #20
 8028b4c:	4621      	mov	r1, r4
 8028b4e:	4630      	mov	r0, r6
 8028b50:	f7ff f8f2 	bl	8027d38 <tx_tcp_pkt>
}
 8028b54:	e7a7      	b.n	8028aa6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8028b56:	8828      	ldrh	r0, [r5, #0]
 8028b58:	f7fd f804 	bl	8025b64 <mg_ntohs>
 8028b5c:	f7fc ff6a 	bl	8025a34 <mg_ntohl>
 8028b60:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028b62:	2200      	movs	r2, #0
 8028b64:	9201      	str	r2, [sp, #4]
 8028b66:	9200      	str	r2, [sp, #0]
 8028b68:	2212      	movs	r2, #18
 8028b6a:	4621      	mov	r1, r4
 8028b6c:	4630      	mov	r0, r6
 8028b6e:	f7ff f8e3 	bl	8027d38 <tx_tcp_pkt>
 8028b72:	e798      	b.n	8028aa6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028b74:	68ab      	ldr	r3, [r5, #8]
 8028b76:	2200      	movs	r2, #0
 8028b78:	9201      	str	r2, [sp, #4]
 8028b7a:	9200      	str	r2, [sp, #0]
 8028b7c:	2211      	movs	r2, #17
 8028b7e:	4621      	mov	r1, r4
 8028b80:	4630      	mov	r0, r6
 8028b82:	f7ff f8d9 	bl	8027d38 <tx_tcp_pkt>
 8028b86:	e78e      	b.n	8028aa6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028b88:	4621      	mov	r1, r4
 8028b8a:	4638      	mov	r0, r7
 8028b8c:	f7ff fea6 	bl	80288dc <accept_conn>
 8028b90:	e789      	b.n	8028aa6 <rx_tcp+0xb2>
 8028b92:	bf00      	nop
 8028b94:	0803b29c 	.word	0x0803b29c

08028b98 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8028b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b9c:	b082      	sub	sp, #8
 8028b9e:	4604      	mov	r4, r0
 8028ba0:	4688      	mov	r8, r1
 8028ba2:	4617      	mov	r7, r2
 8028ba4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8028ba6:	6819      	ldr	r1, [r3, #0]
 8028ba8:	2900      	cmp	r1, #0
 8028baa:	d037      	beq.n	8028c1c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8028bac:	685b      	ldr	r3, [r3, #4]
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d038      	beq.n	8028c24 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8028bb2:	686b      	ldr	r3, [r5, #4]
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d040      	beq.n	8028c3a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8028bb8:	2118      	movs	r1, #24
 8028bba:	2001      	movs	r0, #1
 8028bbc:	f7f9 fde8 	bl	8022790 <mg_calloc>
 8028bc0:	4606      	mov	r6, r0
 8028bc2:	2800      	cmp	r0, #0
 8028bc4:	d03e      	beq.n	8028c44 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8028bc6:	6863      	ldr	r3, [r4, #4]
 8028bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028bca:	2b00      	cmp	r3, #0
 8028bcc:	d03f      	beq.n	8028c4e <mg_sendnsreq+0xb6>
 8028bce:	8a1b      	ldrh	r3, [r3, #16]
 8028bd0:	3301      	adds	r3, #1
 8028bd2:	b29b      	uxth	r3, r3
 8028bd4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8028bd6:	6863      	ldr	r3, [r4, #4]
 8028bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028bda:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8028bdc:	6863      	ldr	r3, [r4, #4]
 8028bde:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8028be0:	f7fd fafc 	bl	80261dc <mg_millis>
 8028be4:	19c0      	adds	r0, r0, r7
 8028be6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8028bea:	60b0      	str	r0, [r6, #8]
 8028bec:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8028bee:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028bf0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028bf4:	f043 0308 	orr.w	r3, r3, #8
 8028bf8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028bfc:	4b21      	ldr	r3, [pc, #132]	@ (8028c84 <mg_sendnsreq+0xec>)
 8028bfe:	681b      	ldr	r3, [r3, #0]
 8028c00:	2b03      	cmp	r3, #3
 8028c02:	dc26      	bgt.n	8028c52 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8028c04:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028c08:	8a32      	ldrh	r2, [r6, #16]
 8028c0a:	4641      	mov	r1, r8
 8028c0c:	6868      	ldr	r0, [r5, #4]
 8028c0e:	f7fe fbd5 	bl	80273bc <mg_dns_send>
 8028c12:	2800      	cmp	r0, #0
 8028c14:	d031      	beq.n	8028c7a <mg_sendnsreq+0xe2>
}
 8028c16:	b002      	add	sp, #8
 8028c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8028c1c:	491a      	ldr	r1, [pc, #104]	@ (8028c88 <mg_sendnsreq+0xf0>)
 8028c1e:	f7fd fbcb 	bl	80263b8 <mg_error>
 8028c22:	e7c6      	b.n	8028bb2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8028c24:	461a      	mov	r2, r3
 8028c26:	6840      	ldr	r0, [r0, #4]
 8028c28:	f000 f866 	bl	8028cf8 <mg_connect>
 8028c2c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8028c2e:	2800      	cmp	r0, #0
 8028c30:	d0bf      	beq.n	8028bb2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8028c32:	4b16      	ldr	r3, [pc, #88]	@ (8028c8c <mg_sendnsreq+0xf4>)
 8028c34:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8028c38:	e7bb      	b.n	8028bb2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8028c3a:	4915      	ldr	r1, [pc, #84]	@ (8028c90 <mg_sendnsreq+0xf8>)
 8028c3c:	4620      	mov	r0, r4
 8028c3e:	f7fd fbbb 	bl	80263b8 <mg_error>
 8028c42:	e7e8      	b.n	8028c16 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8028c44:	4913      	ldr	r1, [pc, #76]	@ (8028c94 <mg_sendnsreq+0xfc>)
 8028c46:	4620      	mov	r0, r4
 8028c48:	f7fd fbb6 	bl	80263b8 <mg_error>
 8028c4c:	e7e3      	b.n	8028c16 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028c4e:	2301      	movs	r3, #1
 8028c50:	e7c0      	b.n	8028bd4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028c52:	4b11      	ldr	r3, [pc, #68]	@ (8028c98 <mg_sendnsreq+0x100>)
 8028c54:	f240 521e 	movw	r2, #1310	@ 0x51e
 8028c58:	4910      	ldr	r1, [pc, #64]	@ (8028c9c <mg_sendnsreq+0x104>)
 8028c5a:	2004      	movs	r0, #4
 8028c5c:	f7fd fac4 	bl	80261e8 <mg_log_prefix>
 8028c60:	8a33      	ldrh	r3, [r6, #16]
 8028c62:	9301      	str	r3, [sp, #4]
 8028c64:	682b      	ldr	r3, [r5, #0]
 8028c66:	9300      	str	r3, [sp, #0]
 8028c68:	f8d8 3000 	ldr.w	r3, [r8]
 8028c6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c72:	480b      	ldr	r0, [pc, #44]	@ (8028ca0 <mg_sendnsreq+0x108>)
 8028c74:	f7fb f966 	bl	8023f44 <mg_log>
 8028c78:	e7c4      	b.n	8028c04 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8028c7a:	490a      	ldr	r1, [pc, #40]	@ (8028ca4 <mg_sendnsreq+0x10c>)
 8028c7c:	6868      	ldr	r0, [r5, #4]
 8028c7e:	f7fd fb9b 	bl	80263b8 <mg_error>
}
 8028c82:	e7c8      	b.n	8028c16 <mg_sendnsreq+0x7e>
 8028c84:	2000012c 	.word	0x2000012c
 8028c88:	0803b2a8 	.word	0x0803b2a8
 8028c8c:	08028135 	.word	0x08028135
 8028c90:	0803b2d4 	.word	0x0803b2d4
 8028c94:	0803b2e0 	.word	0x0803b2e0
 8028c98:	0803b728 	.word	0x0803b728
 8028c9c:	0803acc0 	.word	0x0803acc0
 8028ca0:	0803b2ec 	.word	0x0803b2ec
 8028ca4:	0803b310 	.word	0x0803b310

08028ca8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8028ca8:	b570      	push	{r4, r5, r6, lr}
 8028caa:	b084      	sub	sp, #16
 8028cac:	4604      	mov	r4, r0
 8028cae:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8028cb0:	ad02      	add	r5, sp, #8
 8028cb2:	4628      	mov	r0, r5
 8028cb4:	f7fc fde8 	bl	8025888 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8028cb8:	4630      	mov	r0, r6
 8028cba:	f7fc fe03 	bl	80258c4 <mg_url_port>
 8028cbe:	f7fc ff51 	bl	8025b64 <mg_ntohs>
 8028cc2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8028cc4:	f104 021c 	add.w	r2, r4, #28
 8028cc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028ccc:	f7fc fee6 	bl	8025a9c <mg_aton>
 8028cd0:	b960      	cbnz	r0, 8028cec <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028cd2:	6862      	ldr	r2, [r4, #4]
 8028cd4:	7e11      	ldrb	r1, [r2, #24]
 8028cd6:	b169      	cbz	r1, 8028cf4 <mg_resolve+0x4c>
 8028cd8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8028cdc:	6952      	ldr	r2, [r2, #20]
 8028cde:	9100      	str	r1, [sp, #0]
 8028ce0:	a902      	add	r1, sp, #8
 8028ce2:	4620      	mov	r0, r4
 8028ce4:	f7ff ff58 	bl	8028b98 <mg_sendnsreq>
}
 8028ce8:	b004      	add	sp, #16
 8028cea:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8028cec:	4620      	mov	r0, r4
 8028cee:	f7ff f951 	bl	8027f94 <mg_connect_resolved>
 8028cf2:	e7f9      	b.n	8028ce8 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028cf4:	1d13      	adds	r3, r2, #4
 8028cf6:	e7f1      	b.n	8028cdc <mg_resolve+0x34>

08028cf8 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8028cfc:	b129      	cbz	r1, 8028d0a <mg_connect+0x12>
 8028cfe:	4680      	mov	r8, r0
 8028d00:	4617      	mov	r7, r2
 8028d02:	461e      	mov	r6, r3
 8028d04:	460d      	mov	r5, r1
 8028d06:	780b      	ldrb	r3, [r1, #0]
 8028d08:	b99b      	cbnz	r3, 8028d32 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8028d0a:	4b30      	ldr	r3, [pc, #192]	@ (8028dcc <mg_connect+0xd4>)
 8028d0c:	681b      	ldr	r3, [r3, #0]
 8028d0e:	2b00      	cmp	r3, #0
 8028d10:	dc03      	bgt.n	8028d1a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8028d12:	2400      	movs	r4, #0
}
 8028d14:	4620      	mov	r0, r4
 8028d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8028d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8028dd0 <mg_connect+0xd8>)
 8028d1c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8028d20:	492c      	ldr	r1, [pc, #176]	@ (8028dd4 <mg_connect+0xdc>)
 8028d22:	2001      	movs	r0, #1
 8028d24:	f7fd fa60 	bl	80261e8 <mg_log_prefix>
 8028d28:	482b      	ldr	r0, [pc, #172]	@ (8028dd8 <mg_connect+0xe0>)
 8028d2a:	f7fb f90b 	bl	8023f44 <mg_log>
  struct mg_connection *c = NULL;
 8028d2e:	2400      	movs	r4, #0
 8028d30:	e7f0      	b.n	8028d14 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028d32:	f7fa fc31 	bl	8023598 <mg_alloc_conn>
 8028d36:	4604      	mov	r4, r0
 8028d38:	b358      	cbz	r0, 8028d92 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8028d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8028d3e:	6003      	str	r3, [r0, #0]
 8028d40:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8028d44:	2204      	movs	r2, #4
 8028d46:	4925      	ldr	r1, [pc, #148]	@ (8028ddc <mg_connect+0xe4>)
 8028d48:	4628      	mov	r0, r5
 8028d4a:	f003 fe7e 	bl	802ca4a <strncmp>
 8028d4e:	fab0 f080 	clz	r0, r0
 8028d52:	0940      	lsrs	r0, r0, #5
 8028d54:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d58:	f360 0300 	bfi	r3, r0, #0, #1
 8028d5c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028d64:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028d66:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028d68:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028d6c:	f043 0302 	orr.w	r3, r3, #2
 8028d70:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8028d74:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028d76:	4b15      	ldr	r3, [pc, #84]	@ (8028dcc <mg_connect+0xd4>)
 8028d78:	681b      	ldr	r3, [r3, #0]
 8028d7a:	2b02      	cmp	r3, #2
 8028d7c:	dc18      	bgt.n	8028db0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8028d7e:	462a      	mov	r2, r5
 8028d80:	2101      	movs	r1, #1
 8028d82:	4620      	mov	r0, r4
 8028d84:	f7f9 fe95 	bl	8022ab2 <mg_call>
    mg_resolve(c, url);
 8028d88:	4629      	mov	r1, r5
 8028d8a:	4620      	mov	r0, r4
 8028d8c:	f7ff ff8c 	bl	8028ca8 <mg_resolve>
 8028d90:	e7c0      	b.n	8028d14 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8028d92:	4b0e      	ldr	r3, [pc, #56]	@ (8028dcc <mg_connect+0xd4>)
 8028d94:	681b      	ldr	r3, [r3, #0]
 8028d96:	2b00      	cmp	r3, #0
 8028d98:	ddbc      	ble.n	8028d14 <mg_connect+0x1c>
 8028d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8028dd0 <mg_connect+0xd8>)
 8028d9c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8028da0:	490c      	ldr	r1, [pc, #48]	@ (8028dd4 <mg_connect+0xdc>)
 8028da2:	2001      	movs	r0, #1
 8028da4:	f7fd fa20 	bl	80261e8 <mg_log_prefix>
 8028da8:	480d      	ldr	r0, [pc, #52]	@ (8028de0 <mg_connect+0xe8>)
 8028daa:	f7fb f8cb 	bl	8023f44 <mg_log>
 8028dae:	e7b1      	b.n	8028d14 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028db0:	4b07      	ldr	r3, [pc, #28]	@ (8028dd0 <mg_connect+0xd8>)
 8028db2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8028db6:	4907      	ldr	r1, [pc, #28]	@ (8028dd4 <mg_connect+0xdc>)
 8028db8:	2003      	movs	r0, #3
 8028dba:	f7fd fa15 	bl	80261e8 <mg_log_prefix>
 8028dbe:	462b      	mov	r3, r5
 8028dc0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8028dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028dc4:	4807      	ldr	r0, [pc, #28]	@ (8028de4 <mg_connect+0xec>)
 8028dc6:	f7fb f8bd 	bl	8023f44 <mg_log>
 8028dca:	e7d8      	b.n	8028d7e <mg_connect+0x86>
 8028dcc:	2000012c 	.word	0x2000012c
 8028dd0:	0803b69c 	.word	0x0803b69c
 8028dd4:	0803acc0 	.word	0x0803acc0
 8028dd8:	0803b31c 	.word	0x0803b31c
 8028ddc:	0803aff4 	.word	0x0803aff4
 8028de0:	0803b2e8 	.word	0x0803b2e8
 8028de4:	0803ad1c 	.word	0x0803ad1c

08028de8 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8028de8:	b530      	push	{r4, r5, lr}
 8028dea:	b091      	sub	sp, #68	@ 0x44
 8028dec:	4614      	mov	r4, r2
 8028dee:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8028df0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028df2:	f7ff ff81 	bl	8028cf8 <mg_connect>
  if (c != NULL) {
 8028df6:	4605      	mov	r5, r0
 8028df8:	b160      	cbz	r0, 8028e14 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8028dfa:	2240      	movs	r2, #64	@ 0x40
 8028dfc:	2100      	movs	r1, #0
 8028dfe:	4668      	mov	r0, sp
 8028e00:	f003 fdee 	bl	802c9e0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028e04:	b14c      	cbz	r4, 8028e1a <mg_mqtt_connect+0x32>
 8028e06:	4621      	mov	r1, r4
 8028e08:	4628      	mov	r0, r5
 8028e0a:	f7fe fbfd 	bl	8027608 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8028e0e:	4b04      	ldr	r3, [pc, #16]	@ (8028e20 <mg_mqtt_connect+0x38>)
 8028e10:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8028e14:	4628      	mov	r0, r5
 8028e16:	b011      	add	sp, #68	@ 0x44
 8028e18:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028e1a:	466c      	mov	r4, sp
 8028e1c:	e7f3      	b.n	8028e06 <mg_mqtt_connect+0x1e>
 8028e1e:	bf00      	nop
 8028e20:	080279e1 	.word	0x080279e1

08028e24 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8028e24:	b538      	push	{r3, r4, r5, lr}
 8028e26:	4605      	mov	r5, r0
 8028e28:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8028e2a:	680b      	ldr	r3, [r1, #0]
 8028e2c:	b90b      	cbnz	r3, 8028e32 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8028e2e:	888b      	ldrh	r3, [r1, #4]
 8028e30:	b1a3      	cbz	r3, 8028e5c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8028e32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028e34:	681b      	ldr	r3, [r3, #0]
 8028e36:	b34b      	cbz	r3, 8028e8c <mg_tcpip_init+0x68>
 8028e38:	4620      	mov	r0, r4
 8028e3a:	4798      	blx	r3
 8028e3c:	bb30      	cbnz	r0, 8028e8c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8028e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8028f2c <mg_tcpip_init+0x108>)
 8028e40:	681b      	ldr	r3, [r3, #0]
 8028e42:	2b00      	cmp	r3, #0
 8028e44:	dd5f      	ble.n	8028f06 <mg_tcpip_init+0xe2>
 8028e46:	4b3a      	ldr	r3, [pc, #232]	@ (8028f30 <mg_tcpip_init+0x10c>)
 8028e48:	f241 7223 	movw	r2, #5923	@ 0x1723
 8028e4c:	4939      	ldr	r1, [pc, #228]	@ (8028f34 <mg_tcpip_init+0x110>)
 8028e4e:	2001      	movs	r0, #1
 8028e50:	f7fd f9ca 	bl	80261e8 <mg_log_prefix>
 8028e54:	4838      	ldr	r0, [pc, #224]	@ (8028f38 <mg_tcpip_init+0x114>)
 8028e56:	f7fb f875 	bl	8023f44 <mg_log>
 8028e5a:	e054      	b.n	8028f06 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8028e5c:	4608      	mov	r0, r1
 8028e5e:	2302      	movs	r3, #2
 8028e60:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8028e64:	2105      	movs	r1, #5
 8028e66:	f7fc fdaa 	bl	80259be <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8028e6a:	4b30      	ldr	r3, [pc, #192]	@ (8028f2c <mg_tcpip_init+0x108>)
 8028e6c:	681b      	ldr	r3, [r3, #0]
 8028e6e:	2b01      	cmp	r3, #1
 8028e70:	dddf      	ble.n	8028e32 <mg_tcpip_init+0xe>
 8028e72:	4b2f      	ldr	r3, [pc, #188]	@ (8028f30 <mg_tcpip_init+0x10c>)
 8028e74:	f241 721f 	movw	r2, #5919	@ 0x171f
 8028e78:	492e      	ldr	r1, [pc, #184]	@ (8028f34 <mg_tcpip_init+0x110>)
 8028e7a:	2002      	movs	r0, #2
 8028e7c:	f7fd f9b4 	bl	80261e8 <mg_log_prefix>
 8028e80:	4622      	mov	r2, r4
 8028e82:	492e      	ldr	r1, [pc, #184]	@ (8028f3c <mg_tcpip_init+0x118>)
 8028e84:	482e      	ldr	r0, [pc, #184]	@ (8028f40 <mg_tcpip_init+0x11c>)
 8028e86:	f7fb f85d 	bl	8023f44 <mg_log>
 8028e8a:	e7d2      	b.n	8028e32 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8028e8c:	f240 6104 	movw	r1, #1540	@ 0x604
 8028e90:	2001      	movs	r0, #1
 8028e92:	f7f9 fc7d 	bl	8022790 <mg_calloc>
 8028e96:	6160      	str	r0, [r4, #20]
 8028e98:	f240 6304 	movw	r3, #1540	@ 0x604
 8028e9c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8028e9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028ea0:	b92b      	cbnz	r3, 8028eae <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028ea2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028ea4:	689b      	ldr	r3, [r3, #8]
 8028ea6:	b37b      	cbz	r3, 8028f08 <mg_tcpip_init+0xe4>
 8028ea8:	f240 6304 	movw	r3, #1540	@ 0x604
 8028eac:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8028eae:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8028eb0:	2001      	movs	r0, #1
 8028eb2:	f7f9 fc6d 	bl	8022790 <mg_calloc>
 8028eb6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8028eb8:	f7fd f990 	bl	80261dc <mg_millis>
 8028ebc:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8028ec0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8028ec2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8028ec4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8028ec8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8028ecc:	2330      	movs	r3, #48	@ 0x30
 8028ece:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8028ed0:	68a3      	ldr	r3, [r4, #8]
 8028ed2:	b90b      	cbnz	r3, 8028ed8 <mg_tcpip_init+0xb4>
 8028ed4:	2301      	movs	r3, #1
 8028ed6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8028ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028edc:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028ee0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8028ee4:	2102      	movs	r1, #2
 8028ee6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028eea:	f7fc fd68 	bl	80259be <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8028eee:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8028ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8028ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8028efa:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028efe:	6963      	ldr	r3, [r4, #20]
 8028f00:	b12b      	cbz	r3, 8028f0e <mg_tcpip_init+0xea>
 8028f02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028f04:	b11b      	cbz	r3, 8028f0e <mg_tcpip_init+0xea>
}
 8028f06:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8028f0c:	e7ce      	b.n	8028eac <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028f0e:	4b07      	ldr	r3, [pc, #28]	@ (8028f2c <mg_tcpip_init+0x108>)
 8028f10:	681b      	ldr	r3, [r3, #0]
 8028f12:	2b00      	cmp	r3, #0
 8028f14:	ddf7      	ble.n	8028f06 <mg_tcpip_init+0xe2>
 8028f16:	4b06      	ldr	r3, [pc, #24]	@ (8028f30 <mg_tcpip_init+0x10c>)
 8028f18:	f241 7234 	movw	r2, #5940	@ 0x1734
 8028f1c:	4905      	ldr	r1, [pc, #20]	@ (8028f34 <mg_tcpip_init+0x110>)
 8028f1e:	2001      	movs	r0, #1
 8028f20:	f7fd f962 	bl	80261e8 <mg_log_prefix>
 8028f24:	4807      	ldr	r0, [pc, #28]	@ (8028f44 <mg_tcpip_init+0x120>)
 8028f26:	f7fb f80d 	bl	8023f44 <mg_log>
}
 8028f2a:	e7ec      	b.n	8028f06 <mg_tcpip_init+0xe2>
 8028f2c:	2000012c 	.word	0x2000012c
 8028f30:	0803b660 	.word	0x0803b660
 8028f34:	0803acc0 	.word	0x0803acc0
 8028f38:	0803b34c 	.word	0x0803b34c
 8028f3c:	08023f15 	.word	0x08023f15
 8028f40:	0803b328 	.word	0x0803b328
 8028f44:	0803b2e8 	.word	0x0803b2e8

08028f48 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8028f48:	b510      	push	{r4, lr}
 8028f4a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8028f4c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8028f50:	2b03      	cmp	r3, #3
 8028f52:	d011      	beq.n	8028f78 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8028f54:	2b01      	cmp	r3, #1
 8028f56:	d04f      	beq.n	8028ff8 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8028f58:	b9f3      	cbnz	r3, 8028f98 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8028f5a:	4b31      	ldr	r3, [pc, #196]	@ (8029020 <onstatechange+0xd8>)
 8028f5c:	681b      	ldr	r3, [r3, #0]
 8028f5e:	2b00      	cmp	r3, #0
 8028f60:	dd1a      	ble.n	8028f98 <onstatechange+0x50>
 8028f62:	4b30      	ldr	r3, [pc, #192]	@ (8029024 <onstatechange+0xdc>)
 8028f64:	f241 4209 	movw	r2, #5129	@ 0x1409
 8028f68:	492f      	ldr	r1, [pc, #188]	@ (8029028 <onstatechange+0xe0>)
 8028f6a:	2001      	movs	r0, #1
 8028f6c:	f7fd f93c 	bl	80261e8 <mg_log_prefix>
 8028f70:	482e      	ldr	r0, [pc, #184]	@ (802902c <onstatechange+0xe4>)
 8028f72:	f7fa ffe7 	bl	8023f44 <mg_log>
 8028f76:	e00f      	b.n	8028f98 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028f78:	4b29      	ldr	r3, [pc, #164]	@ (8029020 <onstatechange+0xd8>)
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	2b01      	cmp	r3, #1
 8028f7e:	dc12      	bgt.n	8028fa6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028f80:	4b27      	ldr	r3, [pc, #156]	@ (8029020 <onstatechange+0xd8>)
 8028f82:	681b      	ldr	r3, [r3, #0]
 8028f84:	2b01      	cmp	r3, #1
 8028f86:	dc1c      	bgt.n	8028fc2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028f88:	4b25      	ldr	r3, [pc, #148]	@ (8029020 <onstatechange+0xd8>)
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	2b01      	cmp	r3, #1
 8028f8e:	dc26      	bgt.n	8028fde <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8028f90:	6921      	ldr	r1, [r4, #16]
 8028f92:	4620      	mov	r0, r4
 8028f94:	f7fc fee3 	bl	8025d5e <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8028f98:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 8028f9c:	2100      	movs	r1, #0
 8028f9e:	4620      	mov	r0, r4
 8028fa0:	f7f8 f923 	bl	80211ea <mg_tcpip_call>
}
 8028fa4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8029024 <onstatechange+0xdc>)
 8028fa8:	f241 4201 	movw	r2, #5121	@ 0x1401
 8028fac:	491e      	ldr	r1, [pc, #120]	@ (8029028 <onstatechange+0xe0>)
 8028fae:	2002      	movs	r0, #2
 8028fb0:	f7fd f91a 	bl	80261e8 <mg_log_prefix>
 8028fb4:	f104 0208 	add.w	r2, r4, #8
 8028fb8:	491d      	ldr	r1, [pc, #116]	@ (8029030 <onstatechange+0xe8>)
 8028fba:	481e      	ldr	r0, [pc, #120]	@ (8029034 <onstatechange+0xec>)
 8028fbc:	f7fa ffc2 	bl	8023f44 <mg_log>
 8028fc0:	e7de      	b.n	8028f80 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028fc2:	4b18      	ldr	r3, [pc, #96]	@ (8029024 <onstatechange+0xdc>)
 8028fc4:	f241 4202 	movw	r2, #5122	@ 0x1402
 8028fc8:	4917      	ldr	r1, [pc, #92]	@ (8029028 <onstatechange+0xe0>)
 8028fca:	2002      	movs	r0, #2
 8028fcc:	f7fd f90c 	bl	80261e8 <mg_log_prefix>
 8028fd0:	f104 0210 	add.w	r2, r4, #16
 8028fd4:	4916      	ldr	r1, [pc, #88]	@ (8029030 <onstatechange+0xe8>)
 8028fd6:	4818      	ldr	r0, [pc, #96]	@ (8029038 <onstatechange+0xf0>)
 8028fd8:	f7fa ffb4 	bl	8023f44 <mg_log>
 8028fdc:	e7d4      	b.n	8028f88 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028fde:	4b11      	ldr	r3, [pc, #68]	@ (8029024 <onstatechange+0xdc>)
 8028fe0:	f241 4203 	movw	r2, #5123	@ 0x1403
 8028fe4:	4910      	ldr	r1, [pc, #64]	@ (8029028 <onstatechange+0xe0>)
 8028fe6:	2002      	movs	r0, #2
 8028fe8:	f7fd f8fe 	bl	80261e8 <mg_log_prefix>
 8028fec:	4622      	mov	r2, r4
 8028fee:	4913      	ldr	r1, [pc, #76]	@ (802903c <onstatechange+0xf4>)
 8028ff0:	4813      	ldr	r0, [pc, #76]	@ (8029040 <onstatechange+0xf8>)
 8028ff2:	f7fa ffa7 	bl	8023f44 <mg_log>
 8028ff6:	e7cb      	b.n	8028f90 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028ff8:	4b09      	ldr	r3, [pc, #36]	@ (8029020 <onstatechange+0xd8>)
 8028ffa:	681b      	ldr	r3, [r3, #0]
 8028ffc:	2b00      	cmp	r3, #0
 8028ffe:	dc04      	bgt.n	802900a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8029000:	f7fd f8ec 	bl	80261dc <mg_millis>
 8029004:	f002 ff9c 	bl	802bf40 <srand>
 8029008:	e7c6      	b.n	8028f98 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802900a:	4b06      	ldr	r3, [pc, #24]	@ (8029024 <onstatechange+0xdc>)
 802900c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8029010:	4905      	ldr	r1, [pc, #20]	@ (8029028 <onstatechange+0xe0>)
 8029012:	2001      	movs	r0, #1
 8029014:	f7fd f8e8 	bl	80261e8 <mg_log_prefix>
 8029018:	480a      	ldr	r0, [pc, #40]	@ (8029044 <onstatechange+0xfc>)
 802901a:	f7fa ff93 	bl	8023f44 <mg_log>
 802901e:	e7ef      	b.n	8029000 <onstatechange+0xb8>
 8029020:	2000012c 	.word	0x2000012c
 8029024:	0803b60c 	.word	0x0803b60c
 8029028:	0803acc0 	.word	0x0803acc0
 802902c:	0803b398 	.word	0x0803b398
 8029030:	08023f05 	.word	0x08023f05
 8029034:	0803b360 	.word	0x0803b360
 8029038:	0803b370 	.word	0x0803b370
 802903c:	08023f15 	.word	0x08023f15
 8029040:	0803b380 	.word	0x0803b380
 8029044:	0803b390 	.word	0x0803b390

08029048 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802904c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802904e:	2300      	movs	r3, #0
 8029050:	9305      	str	r3, [sp, #20]
 8029052:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8029054:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8029058:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802905c:	680e      	ldr	r6, [r1, #0]
 802905e:	684b      	ldr	r3, [r1, #4]
 8029060:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8029062:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8029066:	42b3      	cmp	r3, r6
 8029068:	d87b      	bhi.n	8029162 <rx_dhcp_client+0x11a>
 802906a:	4605      	mov	r5, r0
 802906c:	460f      	mov	r7, r1
 802906e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8029072:	2204      	movs	r2, #4
 8029074:	1c81      	adds	r1, r0, #2
 8029076:	eb08 0002 	add.w	r0, r8, r2
 802907a:	f003 fc1d 	bl	802c8b8 <memcmp>
 802907e:	2800      	cmp	r0, #0
 8029080:	d16f      	bne.n	8029162 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029082:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029086:	4648      	mov	r0, r9
 8029088:	f8cd 9004 	str.w	r9, [sp, #4]
 802908c:	f8cd 9000 	str.w	r9, [sp]
 8029090:	46cb      	mov	fp, r9
 8029092:	e026      	b.n	80290e2 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8029094:	7862      	ldrb	r2, [r4, #1]
 8029096:	2a04      	cmp	r2, #4
 8029098:	d12b      	bne.n	80290f2 <rx_dhcp_client+0xaa>
 802909a:	1da2      	adds	r2, r4, #6
 802909c:	42b2      	cmp	r2, r6
 802909e:	d228      	bcs.n	80290f2 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 80290a0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80290a4:	9301      	str	r3, [sp, #4]
 80290a6:	e019      	b.n	80290dc <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80290a8:	7862      	ldrb	r2, [r4, #1]
 80290aa:	2a04      	cmp	r2, #4
 80290ac:	d123      	bne.n	80290f6 <rx_dhcp_client+0xae>
 80290ae:	1da2      	adds	r2, r4, #6
 80290b0:	42b2      	cmp	r2, r6
 80290b2:	d220      	bcs.n	80290f6 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80290b4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80290b8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80290bc:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80290be:	e00d      	b.n	80290dc <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290c0:	7862      	ldrb	r2, [r4, #1]
 80290c2:	2a04      	cmp	r2, #4
 80290c4:	d11b      	bne.n	80290fe <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80290c6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290c8:	42b2      	cmp	r2, r6
 80290ca:	d218      	bcs.n	80290fe <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80290cc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80290d0:	9305      	str	r3, [sp, #20]
 80290d2:	e003      	b.n	80290dc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80290d4:	2b33      	cmp	r3, #51	@ 0x33
 80290d6:	d022      	beq.n	802911e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80290d8:	2b35      	cmp	r3, #53	@ 0x35
 80290da:	d02b      	beq.n	8029134 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80290dc:	7863      	ldrb	r3, [r4, #1]
 80290de:	3302      	adds	r3, #2
 80290e0:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80290e2:	1c63      	adds	r3, r4, #1
 80290e4:	42b3      	cmp	r3, r6
 80290e6:	d22e      	bcs.n	8029146 <rx_dhcp_client+0xfe>
 80290e8:	7823      	ldrb	r3, [r4, #0]
 80290ea:	2bff      	cmp	r3, #255	@ 0xff
 80290ec:	d02b      	beq.n	8029146 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80290ee:	2b01      	cmp	r3, #1
 80290f0:	d0d0      	beq.n	8029094 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80290f2:	2b03      	cmp	r3, #3
 80290f4:	d0d8      	beq.n	80290a8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290f6:	7fea      	ldrb	r2, [r5, #31]
 80290f8:	b10a      	cbz	r2, 80290fe <rx_dhcp_client+0xb6>
 80290fa:	2b06      	cmp	r3, #6
 80290fc:	d0e0      	beq.n	80290c0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80290fe:	f895 2020 	ldrb.w	r2, [r5, #32]
 8029102:	2a00      	cmp	r2, #0
 8029104:	d0e6      	beq.n	80290d4 <rx_dhcp_client+0x8c>
 8029106:	2b2a      	cmp	r3, #42	@ 0x2a
 8029108:	d1e4      	bne.n	80290d4 <rx_dhcp_client+0x8c>
 802910a:	7862      	ldrb	r2, [r4, #1]
 802910c:	2a04      	cmp	r2, #4
 802910e:	d1e1      	bne.n	80290d4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8029110:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8029112:	42b2      	cmp	r2, r6
 8029114:	d2de      	bcs.n	80290d4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8029116:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802911a:	9304      	str	r3, [sp, #16]
 802911c:	e7de      	b.n	80290dc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802911e:	7862      	ldrb	r2, [r4, #1]
 8029120:	2a04      	cmp	r2, #4
 8029122:	d1d9      	bne.n	80290d8 <rx_dhcp_client+0x90>
 8029124:	1da2      	adds	r2, r4, #6
 8029126:	42b2      	cmp	r2, r6
 8029128:	d2d6      	bcs.n	80290d8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802912a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802912e:	f7fc fc81 	bl	8025a34 <mg_ntohl>
 8029132:	e7d3      	b.n	80290dc <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8029134:	7863      	ldrb	r3, [r4, #1]
 8029136:	2b01      	cmp	r3, #1
 8029138:	d1d0      	bne.n	80290dc <rx_dhcp_client+0x94>
 802913a:	1da3      	adds	r3, r4, #6
 802913c:	42b3      	cmp	r3, r6
 802913e:	d2cd      	bcs.n	80290dc <rx_dhcp_client+0x94>
      msgtype = p[2];
 8029140:	f894 9002 	ldrb.w	r9, [r4, #2]
 8029144:	e7ca      	b.n	80290dc <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029146:	f1b9 0f06 	cmp.w	r9, #6
 802914a:	d00d      	beq.n	8029168 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802914c:	f1b9 0f02 	cmp.w	r9, #2
 8029150:	d013      	beq.n	802917a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8029152:	f1b9 0f05 	cmp.w	r9, #5
 8029156:	d028      	beq.n	80291aa <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8029158:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802915c:	4553      	cmp	r3, sl
 802915e:	f040 80b4 	bne.w	80292ca <rx_dhcp_client+0x282>
}
 8029162:	b007      	add	sp, #28
 8029164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029168:	68ab      	ldr	r3, [r5, #8]
 802916a:	455b      	cmp	r3, fp
 802916c:	d1ee      	bne.n	802914c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802916e:	2301      	movs	r3, #1
 8029170:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029174:	2300      	movs	r3, #0
 8029176:	60ab      	str	r3, [r5, #8]
 8029178:	e7ee      	b.n	8029158 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802917a:	f1ba 0f01 	cmp.w	sl, #1
 802917e:	d1e8      	bne.n	8029152 <rx_dhcp_client+0x10a>
 8029180:	f1bb 0f00 	cmp.w	fp, #0
 8029184:	d0e5      	beq.n	8029152 <rx_dhcp_client+0x10a>
 8029186:	9b00      	ldr	r3, [sp, #0]
 8029188:	2b00      	cmp	r3, #0
 802918a:	d0e2      	beq.n	8029152 <rx_dhcp_client+0x10a>
 802918c:	2800      	cmp	r0, #0
 802918e:	d0e0      	beq.n	8029152 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029190:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8029194:	b90a      	cbnz	r2, 802919a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029196:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8029198:	68da      	ldr	r2, [r3, #12]
 802919a:	4659      	mov	r1, fp
 802919c:	4628      	mov	r0, r5
 802919e:	f7ff f9b9 	bl	8028514 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80291a2:	2302      	movs	r3, #2
 80291a4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80291a8:	e7d6      	b.n	8029158 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80291aa:	f1ba 0f02 	cmp.w	sl, #2
 80291ae:	d02a      	beq.n	8029206 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80291b0:	f1ba 0f03 	cmp.w	sl, #3
 80291b4:	d1d0      	bne.n	8029158 <rx_dhcp_client+0x110>
 80291b6:	68ab      	ldr	r3, [r5, #8]
 80291b8:	455b      	cmp	r3, fp
 80291ba:	d1cd      	bne.n	8029158 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80291bc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80291be:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80291c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80291c4:	4604      	mov	r4, r0
 80291c6:	fb00 f202 	mul.w	r2, r0, r2
 80291ca:	189b      	adds	r3, r3, r2
 80291cc:	f141 0100 	adc.w	r1, r1, #0
 80291d0:	662b      	str	r3, [r5, #96]	@ 0x60
 80291d2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80291d4:	4b3f      	ldr	r3, [pc, #252]	@ (80292d4 <rx_dhcp_client+0x28c>)
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	2b01      	cmp	r3, #1
 80291da:	ddbd      	ble.n	8029158 <rx_dhcp_client+0x110>
 80291dc:	4b3e      	ldr	r3, [pc, #248]	@ (80292d8 <rx_dhcp_client+0x290>)
 80291de:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 80291e2:	493e      	ldr	r1, [pc, #248]	@ (80292dc <rx_dhcp_client+0x294>)
 80291e4:	2002      	movs	r0, #2
 80291e6:	f7fc ffff 	bl	80261e8 <mg_log_prefix>
 80291ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80291ee:	2300      	movs	r3, #0
 80291f0:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80291f4:	f7e7 fdb0 	bl	8010d58 <__aeabi_uldivmod>
 80291f8:	4602      	mov	r2, r0
 80291fa:	460b      	mov	r3, r1
 80291fc:	4621      	mov	r1, r4
 80291fe:	4838      	ldr	r0, [pc, #224]	@ (80292e0 <rx_dhcp_client+0x298>)
 8029200:	f7fa fea0 	bl	8023f44 <mg_log>
 8029204:	e7a8      	b.n	8029158 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029206:	f1bb 0f00 	cmp.w	fp, #0
 802920a:	d0d1      	beq.n	80291b0 <rx_dhcp_client+0x168>
 802920c:	9b00      	ldr	r3, [sp, #0]
 802920e:	2b00      	cmp	r3, #0
 8029210:	d0ce      	beq.n	80291b0 <rx_dhcp_client+0x168>
 8029212:	4604      	mov	r4, r0
 8029214:	2800      	cmp	r0, #0
 8029216:	d0cb      	beq.n	80291b0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8029218:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802921a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802921c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029220:	fb00 f202 	mul.w	r2, r0, r2
 8029224:	189b      	adds	r3, r3, r2
 8029226:	f141 0100 	adc.w	r1, r1, #0
 802922a:	662b      	str	r3, [r5, #96]	@ 0x60
 802922c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802922e:	4b29      	ldr	r3, [pc, #164]	@ (80292d4 <rx_dhcp_client+0x28c>)
 8029230:	681b      	ldr	r3, [r3, #0]
 8029232:	2b01      	cmp	r3, #1
 8029234:	dc2e      	bgt.n	8029294 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8029236:	693b      	ldr	r3, [r7, #16]
 8029238:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802923c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8029240:	895b      	ldrh	r3, [r3, #10]
 8029242:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8029246:	f8c5 b008 	str.w	fp, [r5, #8]
 802924a:	9b00      	ldr	r3, [sp, #0]
 802924c:	612b      	str	r3, [r5, #16]
 802924e:	9b01      	ldr	r3, [sp, #4]
 8029250:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8029252:	2303      	movs	r3, #3
 8029254:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8029258:	2108      	movs	r1, #8
 802925a:	eb0d 0001 	add.w	r0, sp, r1
 802925e:	f7fc fbae 	bl	80259be <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8029262:	9c02      	ldr	r4, [sp, #8]
 8029264:	f7fc ffba 	bl	80261dc <mg_millis>
 8029268:	4420      	add	r0, r4
 802926a:	f002 fe69 	bl	802bf40 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802926e:	7feb      	ldrb	r3, [r5, #31]
 8029270:	b10b      	cbz	r3, 8029276 <rx_dhcp_client+0x22e>
 8029272:	9b05      	ldr	r3, [sp, #20]
 8029274:	bb1b      	cbnz	r3, 80292be <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8029276:	f895 3020 	ldrb.w	r3, [r5, #32]
 802927a:	2b00      	cmp	r3, #0
 802927c:	f43f af6c 	beq.w	8029158 <rx_dhcp_client+0x110>
 8029280:	9b04      	ldr	r3, [sp, #16]
 8029282:	2b00      	cmp	r3, #0
 8029284:	f43f af68 	beq.w	8029158 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029288:	aa04      	add	r2, sp, #16
 802928a:	2102      	movs	r1, #2
 802928c:	4628      	mov	r0, r5
 802928e:	f7f7 ffac 	bl	80211ea <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029292:	e761      	b.n	8029158 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029294:	4b10      	ldr	r3, [pc, #64]	@ (80292d8 <rx_dhcp_client+0x290>)
 8029296:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802929a:	4910      	ldr	r1, [pc, #64]	@ (80292dc <rx_dhcp_client+0x294>)
 802929c:	2002      	movs	r0, #2
 802929e:	f7fc ffa3 	bl	80261e8 <mg_log_prefix>
 80292a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80292a6:	2300      	movs	r3, #0
 80292a8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80292ac:	f7e7 fd54 	bl	8010d58 <__aeabi_uldivmod>
 80292b0:	4602      	mov	r2, r0
 80292b2:	460b      	mov	r3, r1
 80292b4:	4621      	mov	r1, r4
 80292b6:	480a      	ldr	r0, [pc, #40]	@ (80292e0 <rx_dhcp_client+0x298>)
 80292b8:	f7fa fe44 	bl	8023f44 <mg_log>
 80292bc:	e7bb      	b.n	8029236 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80292be:	aa05      	add	r2, sp, #20
 80292c0:	2101      	movs	r1, #1
 80292c2:	4628      	mov	r0, r5
 80292c4:	f7f7 ff91 	bl	80211ea <mg_tcpip_call>
 80292c8:	e7d5      	b.n	8029276 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80292ca:	4628      	mov	r0, r5
 80292cc:	f7ff fe3c 	bl	8028f48 <onstatechange>
 80292d0:	e747      	b.n	8029162 <rx_dhcp_client+0x11a>
 80292d2:	bf00      	nop
 80292d4:	2000012c 	.word	0x2000012c
 80292d8:	0803b5cc 	.word	0x0803b5cc
 80292dc:	0803acc0 	.word	0x0803acc0
 80292e0:	0803b3a4 	.word	0x0803b3a4

080292e4 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80292e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292e8:	b084      	sub	sp, #16
 80292ea:	4605      	mov	r5, r0
 80292ec:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80292ee:	69c9      	ldr	r1, [r1, #28]
 80292f0:	88cb      	ldrh	r3, [r1, #6]
 80292f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80292f6:	b29b      	uxth	r3, r3
 80292f8:	b1c3      	cbz	r3, 802932c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80292fa:	7a4b      	ldrb	r3, [r1, #9]
 80292fc:	2b11      	cmp	r3, #17
 80292fe:	d00e      	beq.n	802931e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029300:	7a4b      	ldrb	r3, [r1, #9]
 8029302:	2b06      	cmp	r3, #6
 8029304:	d00f      	beq.n	8029326 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8029306:	2200      	movs	r2, #0
 8029308:	4621      	mov	r1, r4
 802930a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802930c:	f7f9 fa65 	bl	80227da <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8029310:	b110      	cbz	r0, 8029318 <rx_ip+0x34>
 8029312:	4963      	ldr	r1, [pc, #396]	@ (80294a0 <rx_ip+0x1bc>)
 8029314:	f7fd f850 	bl	80263b8 <mg_error>
}
 8029318:	b004      	add	sp, #16
 802931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802931e:	f101 0314 	add.w	r3, r1, #20
 8029322:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029324:	e7ec      	b.n	8029300 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029326:	3114      	adds	r1, #20
 8029328:	62a1      	str	r1, [r4, #40]	@ 0x28
 802932a:	e7ec      	b.n	8029306 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802932c:	7a4b      	ldrb	r3, [r1, #9]
 802932e:	2b01      	cmp	r3, #1
 8029330:	d024      	beq.n	802937c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8029332:	2b11      	cmp	r3, #17
 8029334:	d031      	beq.n	802939a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8029336:	2b06      	cmp	r3, #6
 8029338:	d1ee      	bne.n	8029318 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802933a:	f101 0314 	add.w	r3, r1, #20
 802933e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8029340:	68e3      	ldr	r3, [r4, #12]
 8029342:	2b13      	cmp	r3, #19
 8029344:	d9e8      	bls.n	8029318 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8029346:	3128      	adds	r1, #40	@ 0x28
 8029348:	4620      	mov	r0, r4
 802934a:	f7fb f898 	bl	802447e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802934e:	69e3      	ldr	r3, [r4, #28]
 8029350:	8858      	ldrh	r0, [r3, #2]
 8029352:	f7fc fc07 	bl	8025b64 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8029356:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029358:	7b1b      	ldrb	r3, [r3, #12]
 802935a:	091b      	lsrs	r3, r3, #4
 802935c:	3305      	adds	r3, #5
 802935e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8029360:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8029364:	d301      	bcc.n	802936a <rx_ip+0x86>
 8029366:	1a80      	subs	r0, r0, r2
 8029368:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802936a:	4b4e      	ldr	r3, [pc, #312]	@ (80294a4 <rx_ip+0x1c0>)
 802936c:	681b      	ldr	r3, [r3, #0]
 802936e:	2b03      	cmp	r3, #3
 8029370:	dc74      	bgt.n	802945c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8029372:	4621      	mov	r1, r4
 8029374:	4628      	mov	r0, r5
 8029376:	f7ff fb3d 	bl	80289f4 <rx_tcp>
 802937a:	e7cd      	b.n	8029318 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802937c:	f101 0314 	add.w	r3, r1, #20
 8029380:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029382:	68e3      	ldr	r3, [r4, #12]
 8029384:	2b03      	cmp	r3, #3
 8029386:	d9c7      	bls.n	8029318 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029388:	3118      	adds	r1, #24
 802938a:	4620      	mov	r0, r4
 802938c:	f7fb f877 	bl	802447e <mkpay>
    rx_icmp(ifp, pkt);
 8029390:	4621      	mov	r1, r4
 8029392:	4628      	mov	r0, r5
 8029394:	f7fc fc3b 	bl	8025c0e <rx_icmp>
 8029398:	e7be      	b.n	8029318 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802939a:	f101 0314 	add.w	r3, r1, #20
 802939e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80293a0:	68e3      	ldr	r3, [r4, #12]
 80293a2:	2b07      	cmp	r3, #7
 80293a4:	d9b8      	bls.n	8029318 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 80293a6:	311c      	adds	r1, #28
 80293a8:	4620      	mov	r0, r4
 80293aa:	f7fb f868 	bl	802447e <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80293ae:	4b3d      	ldr	r3, [pc, #244]	@ (80294a4 <rx_ip+0x1c0>)
 80293b0:	681b      	ldr	r3, [r3, #0]
 80293b2:	2b03      	cmp	r3, #3
 80293b4:	dc16      	bgt.n	80293e4 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80293b6:	7f2b      	ldrb	r3, [r5, #28]
 80293b8:	b133      	cbz	r3, 80293c8 <rx_ip+0xe4>
 80293ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80293bc:	8877      	ldrh	r7, [r6, #2]
 80293be:	2044      	movs	r0, #68	@ 0x44
 80293c0:	f7fc fbd0 	bl	8025b64 <mg_ntohs>
 80293c4:	4287      	cmp	r7, r0
 80293c6:	d02f      	beq.n	8029428 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 80293c8:	7f6b      	ldrb	r3, [r5, #29]
 80293ca:	b133      	cbz	r3, 80293da <rx_ip+0xf6>
 80293cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80293ce:	8877      	ldrh	r7, [r6, #2]
 80293d0:	2043      	movs	r0, #67	@ 0x43
 80293d2:	f7fc fbc7 	bl	8025b64 <mg_ntohs>
 80293d6:	4287      	cmp	r7, r0
 80293d8:	d033      	beq.n	8029442 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 80293da:	4621      	mov	r1, r4
 80293dc:	4628      	mov	r0, r5
 80293de:	f7fd fe03 	bl	8026fe8 <rx_udp>
 80293e2:	e799      	b.n	8029318 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80293e4:	4b30      	ldr	r3, [pc, #192]	@ (80294a8 <rx_ip+0x1c4>)
 80293e6:	f241 6255 	movw	r2, #5717	@ 0x1655
 80293ea:	4930      	ldr	r1, [pc, #192]	@ (80294ac <rx_ip+0x1c8>)
 80293ec:	2004      	movs	r0, #4
 80293ee:	f7fc fefb 	bl	80261e8 <mg_log_prefix>
 80293f2:	69e7      	ldr	r7, [r4, #28]
 80293f4:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 80293f8:	f8b8 0000 	ldrh.w	r0, [r8]
 80293fc:	f7fc fbb2 	bl	8025b64 <mg_ntohs>
 8029400:	4606      	mov	r6, r0
 8029402:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029406:	f7fc fbad 	bl	8025b64 <mg_ntohs>
 802940a:	68e3      	ldr	r3, [r4, #12]
 802940c:	4928      	ldr	r1, [pc, #160]	@ (80294b0 <rx_ip+0x1cc>)
 802940e:	9303      	str	r3, [sp, #12]
 8029410:	9002      	str	r0, [sp, #8]
 8029412:	f107 0310 	add.w	r3, r7, #16
 8029416:	9301      	str	r3, [sp, #4]
 8029418:	9100      	str	r1, [sp, #0]
 802941a:	4633      	mov	r3, r6
 802941c:	f107 020c 	add.w	r2, r7, #12
 8029420:	4824      	ldr	r0, [pc, #144]	@ (80294b4 <rx_ip+0x1d0>)
 8029422:	f7fa fd8f 	bl	8023f44 <mg_log>
 8029426:	e7c6      	b.n	80293b6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029428:	f106 0308 	add.w	r3, r6, #8
 802942c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802942e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029432:	4620      	mov	r0, r4
 8029434:	f7fb f823 	bl	802447e <mkpay>
      rx_dhcp_client(ifp, pkt);
 8029438:	4621      	mov	r1, r4
 802943a:	4628      	mov	r0, r5
 802943c:	f7ff fe04 	bl	8029048 <rx_dhcp_client>
 8029440:	e76a      	b.n	8029318 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029442:	f106 0308 	add.w	r3, r6, #8
 8029446:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029448:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802944c:	4620      	mov	r0, r4
 802944e:	f7fb f816 	bl	802447e <mkpay>
      rx_dhcp_server(ifp, pkt);
 8029452:	4621      	mov	r1, r4
 8029454:	4628      	mov	r0, r5
 8029456:	f7fc fd05 	bl	8025e64 <rx_dhcp_server>
 802945a:	e75d      	b.n	8029318 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802945c:	4b12      	ldr	r3, [pc, #72]	@ (80294a8 <rx_ip+0x1c4>)
 802945e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8029462:	4912      	ldr	r1, [pc, #72]	@ (80294ac <rx_ip+0x1c8>)
 8029464:	2004      	movs	r0, #4
 8029466:	f7fc febf 	bl	80261e8 <mg_log_prefix>
 802946a:	69e7      	ldr	r7, [r4, #28]
 802946c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029470:	f8b8 0000 	ldrh.w	r0, [r8]
 8029474:	f7fc fb76 	bl	8025b64 <mg_ntohs>
 8029478:	4606      	mov	r6, r0
 802947a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802947e:	f7fc fb71 	bl	8025b64 <mg_ntohs>
 8029482:	68e3      	ldr	r3, [r4, #12]
 8029484:	490a      	ldr	r1, [pc, #40]	@ (80294b0 <rx_ip+0x1cc>)
 8029486:	9303      	str	r3, [sp, #12]
 8029488:	9002      	str	r0, [sp, #8]
 802948a:	f107 0310 	add.w	r3, r7, #16
 802948e:	9301      	str	r3, [sp, #4]
 8029490:	9100      	str	r1, [sp, #0]
 8029492:	4633      	mov	r3, r6
 8029494:	f107 020c 	add.w	r2, r7, #12
 8029498:	4807      	ldr	r0, [pc, #28]	@ (80294b8 <rx_ip+0x1d4>)
 802949a:	f7fa fd53 	bl	8023f44 <mg_log>
 802949e:	e768      	b.n	8029372 <rx_ip+0x8e>
 80294a0:	0803b3bc 	.word	0x0803b3bc
 80294a4:	2000012c 	.word	0x2000012c
 80294a8:	0803b5dc 	.word	0x0803b5dc
 80294ac:	0803acc0 	.word	0x0803acc0
 80294b0:	08023f05 	.word	0x08023f05
 80294b4:	0803b3d8 	.word	0x0803b3d8
 80294b8:	0803b3f4 	.word	0x0803b3f4

080294bc <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 80294bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80294c0:	b08e      	sub	sp, #56	@ 0x38
 80294c2:	4606      	mov	r6, r0
 80294c4:	460c      	mov	r4, r1
 80294c6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 80294c8:	2234      	movs	r2, #52	@ 0x34
 80294ca:	2100      	movs	r1, #0
 80294cc:	a801      	add	r0, sp, #4
 80294ce:	f003 fa87 	bl	802c9e0 <memset>
  pkt.raw.buf = (char *) buf;
 80294d2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 80294d4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 80294d6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80294d8:	2d0d      	cmp	r5, #13
 80294da:	d93f      	bls.n	802955c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 80294dc:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 80294e0:	b15b      	cbz	r3, 80294fa <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80294e2:	2206      	movs	r2, #6
 80294e4:	4631      	mov	r1, r6
 80294e6:	4620      	mov	r0, r4
 80294e8:	f003 f9e6 	bl	802c8b8 <memcmp>
  if (ifp->enable_mac_check &&
 80294ec:	b128      	cbz	r0, 80294fa <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 80294ee:	2206      	movs	r2, #6
 80294f0:	4945      	ldr	r1, [pc, #276]	@ (8029608 <mg_tcpip_rx+0x14c>)
 80294f2:	4620      	mov	r0, r4
 80294f4:	f003 f9e0 	bl	802c8b8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80294f8:	bb80      	cbnz	r0, 802955c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80294fa:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 80294fe:	b18b      	cbz	r3, 8029524 <mg_tcpip_rx+0x68>
 8029500:	2d04      	cmp	r5, #4
 8029502:	d92e      	bls.n	8029562 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8029504:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8029508:	4642      	mov	r2, r8
 802950a:	4621      	mov	r1, r4
 802950c:	2000      	movs	r0, #0
 802950e:	f7fc fddf 	bl	80260d0 <mg_crc32>
 8029512:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8029514:	2204      	movs	r2, #4
 8029516:	4669      	mov	r1, sp
 8029518:	eb04 0008 	add.w	r0, r4, r8
 802951c:	f003 f9cc 	bl	802c8b8 <memcmp>
 8029520:	b108      	cbz	r0, 8029526 <mg_tcpip_rx+0x6a>
 8029522:	e01b      	b.n	802955c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029524:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8029526:	89a7      	ldrh	r7, [r4, #12]
 8029528:	f640 0006 	movw	r0, #2054	@ 0x806
 802952c:	f7fc fb1a 	bl	8025b64 <mg_ntohs>
 8029530:	4287      	cmp	r7, r0
 8029532:	d018      	beq.n	8029566 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8029534:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8029538:	f7fc fb14 	bl	8025b64 <mg_ntohs>
 802953c:	4287      	cmp	r7, r0
 802953e:	d01b      	beq.n	8029578 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8029540:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8029544:	f7fc fb0e 	bl	8025b64 <mg_ntohs>
 8029548:	4287      	cmp	r7, r0
 802954a:	d028      	beq.n	802959e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802954c:	4b2f      	ldr	r3, [pc, #188]	@ (802960c <mg_tcpip_rx+0x150>)
 802954e:	681b      	ldr	r3, [r3, #0]
 8029550:	2b02      	cmp	r3, #2
 8029552:	dc41      	bgt.n	80295d8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029554:	4b2d      	ldr	r3, [pc, #180]	@ (802960c <mg_tcpip_rx+0x150>)
 8029556:	681b      	ldr	r3, [r3, #0]
 8029558:	2b03      	cmp	r3, #3
 802955a:	dc4d      	bgt.n	80295f8 <mg_tcpip_rx+0x13c>
}
 802955c:	b00e      	add	sp, #56	@ 0x38
 802955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8029562:	46a8      	mov	r8, r5
 8029564:	e7df      	b.n	8029526 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8029566:	340e      	adds	r4, #14
 8029568:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802956a:	2d29      	cmp	r5, #41	@ 0x29
 802956c:	d9f6      	bls.n	802955c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802956e:	a901      	add	r1, sp, #4
 8029570:	4630      	mov	r0, r6
 8029572:	f7fe ff09 	bl	8028388 <rx_arp>
 8029576:	e7f1      	b.n	802955c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029578:	f104 030e 	add.w	r3, r4, #14
 802957c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802957e:	2d35      	cmp	r5, #53	@ 0x35
 8029580:	d9ec      	bls.n	802955c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029582:	7ba3      	ldrb	r3, [r4, #14]
 8029584:	091b      	lsrs	r3, r3, #4
 8029586:	2b06      	cmp	r3, #6
 8029588:	d1e8      	bne.n	802955c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802958a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802958e:	a801      	add	r0, sp, #4
 8029590:	f7fa ff75 	bl	802447e <mkpay>
    rx_ip6(ifp, &pkt);
 8029594:	a901      	add	r1, sp, #4
 8029596:	4630      	mov	r0, r6
 8029598:	f7fc fb73 	bl	8025c82 <rx_ip6>
 802959c:	e7de      	b.n	802955c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802959e:	f104 030e 	add.w	r3, r4, #14
 80295a2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80295a4:	2d21      	cmp	r5, #33	@ 0x21
 80295a6:	d9d9      	bls.n	802955c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 80295a8:	8a20      	ldrh	r0, [r4, #16]
 80295aa:	f7fc fadb 	bl	8025b64 <mg_ntohs>
 80295ae:	300e      	adds	r0, #14
 80295b0:	42a8      	cmp	r0, r5
 80295b2:	d200      	bcs.n	80295b6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80295b4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80295b6:	9b02      	ldr	r3, [sp, #8]
 80295b8:	2b21      	cmp	r3, #33	@ 0x21
 80295ba:	d9cf      	bls.n	802955c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80295bc:	7ba3      	ldrb	r3, [r4, #14]
 80295be:	091b      	lsrs	r3, r3, #4
 80295c0:	2b04      	cmp	r3, #4
 80295c2:	d1cb      	bne.n	802955c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 80295c4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 80295c8:	a801      	add	r0, sp, #4
 80295ca:	f7fa ff58 	bl	802447e <mkpay>
    rx_ip(ifp, &pkt);
 80295ce:	a901      	add	r1, sp, #4
 80295d0:	4630      	mov	r0, r6
 80295d2:	f7ff fe87 	bl	80292e4 <rx_ip>
 80295d6:	e7c1      	b.n	802955c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80295d8:	4b0d      	ldr	r3, [pc, #52]	@ (8029610 <mg_tcpip_rx+0x154>)
 80295da:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80295de:	490d      	ldr	r1, [pc, #52]	@ (8029614 <mg_tcpip_rx+0x158>)
 80295e0:	2003      	movs	r0, #3
 80295e2:	f7fc fe01 	bl	80261e8 <mg_log_prefix>
 80295e6:	9b05      	ldr	r3, [sp, #20]
 80295e8:	8998      	ldrh	r0, [r3, #12]
 80295ea:	f7fc fabb 	bl	8025b64 <mg_ntohs>
 80295ee:	4601      	mov	r1, r0
 80295f0:	4809      	ldr	r0, [pc, #36]	@ (8029618 <mg_tcpip_rx+0x15c>)
 80295f2:	f7fa fca7 	bl	8023f44 <mg_log>
 80295f6:	e7ad      	b.n	8029554 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80295f8:	4641      	mov	r1, r8
 80295fa:	2920      	cmp	r1, #32
 80295fc:	bf28      	it	cs
 80295fe:	2120      	movcs	r1, #32
 8029600:	4620      	mov	r0, r4
 8029602:	f7f9 fe01 	bl	8023208 <mg_hexdump>
 8029606:	e7a9      	b.n	802955c <mg_tcpip_rx+0xa0>
 8029608:	0803b748 	.word	0x0803b748
 802960c:	2000012c 	.word	0x2000012c
 8029610:	0803b5ec 	.word	0x0803b5ec
 8029614:	0803acc0 	.word	0x0803acc0
 8029618:	0803b410 	.word	0x0803b410

0802961c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029620:	b08b      	sub	sp, #44	@ 0x2c
 8029622:	4605      	mov	r5, r0
 8029624:	4616      	mov	r6, r2
 8029626:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8029628:	9200      	str	r2, [sp, #0]
 802962a:	9301      	str	r3, [sp, #4]
 802962c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029630:	2300      	movs	r3, #0
 8029632:	3058      	adds	r0, #88	@ 0x58
 8029634:	f7fc f868 	bl	8025708 <mg_timer_expired>
  ifp->now = now;
 8029638:	652e      	str	r6, [r5, #80]	@ 0x50
 802963a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802963c:	4604      	mov	r4, r0
 802963e:	b318      	cbz	r0, 8029688 <mg_tcpip_poll+0x6c>
 8029640:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029642:	68db      	ldr	r3, [r3, #12]
 8029644:	b303      	cbz	r3, 8029688 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8029646:	4628      	mov	r0, r5
 8029648:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802964a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802964e:	3b00      	subs	r3, #0
 8029650:	bf18      	it	ne
 8029652:	2301      	movne	r3, #1
    if (up != current) {
 8029654:	4298      	cmp	r0, r3
 8029656:	d010      	beq.n	802967a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029658:	b120      	cbz	r0, 8029664 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802965a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802965c:	2b00      	cmp	r3, #0
 802965e:	d06e      	beq.n	802973e <mg_tcpip_poll+0x122>
 8029660:	2301      	movs	r3, #1
 8029662:	e000      	b.n	8029666 <mg_tcpip_poll+0x4a>
 8029664:	2300      	movs	r3, #0
 8029666:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802966a:	b918      	cbnz	r0, 8029674 <mg_tcpip_poll+0x58>
 802966c:	7f2b      	ldrb	r3, [r5, #28]
 802966e:	b10b      	cbz	r3, 8029674 <mg_tcpip_poll+0x58>
 8029670:	2300      	movs	r3, #0
 8029672:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029674:	4628      	mov	r0, r5
 8029676:	f7ff fc67 	bl	8028f48 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802967a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802967e:	b91b      	cbnz	r3, 8029688 <mg_tcpip_poll+0x6c>
 8029680:	4ba8      	ldr	r3, [pc, #672]	@ (8029924 <mg_tcpip_poll+0x308>)
 8029682:	681b      	ldr	r3, [r3, #0]
 8029684:	2b00      	cmp	r3, #0
 8029686:	dc5c      	bgt.n	8029742 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029688:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802968c:	2b00      	cmp	r3, #0
 802968e:	f000 8146 	beq.w	802991e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029692:	2b01      	cmp	r3, #1
 8029694:	d060      	beq.n	8029758 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029696:	2c00      	cmp	r4, #0
 8029698:	d05f      	beq.n	802975a <mg_tcpip_poll+0x13e>
 802969a:	2b03      	cmp	r3, #3
 802969c:	d15d      	bne.n	802975a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802969e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80296a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80296a2:	ea52 0103 	orrs.w	r1, r2, r3
 80296a6:	d058      	beq.n	802975a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 80296a8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80296aa:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80296ac:	4290      	cmp	r0, r2
 80296ae:	eb71 0403 	sbcs.w	r4, r1, r3
 80296b2:	d262      	bcs.n	802977a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80296b4:	4c9c      	ldr	r4, [pc, #624]	@ (8029928 <mg_tcpip_poll+0x30c>)
 80296b6:	1904      	adds	r4, r0, r4
 80296b8:	f141 0c00 	adc.w	ip, r1, #0
 80296bc:	42a2      	cmp	r2, r4
 80296be:	eb73 030c 	sbcs.w	r3, r3, ip
 80296c2:	d24a      	bcs.n	802975a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 80296c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80296c8:	2300      	movs	r3, #0
 80296ca:	f7e7 fb45 	bl	8010d58 <__aeabi_uldivmod>
 80296ce:	4602      	mov	r2, r0
 80296d0:	2000      	movs	r0, #0
 80296d2:	1853      	adds	r3, r2, r1
 80296d4:	d25a      	bcs.n	802978c <mg_tcpip_poll+0x170>
 80296d6:	4403      	add	r3, r0
 80296d8:	4894      	ldr	r0, [pc, #592]	@ (802992c <mg_tcpip_poll+0x310>)
 80296da:	fba0 4003 	umull	r4, r0, r0, r3
 80296de:	08c0      	lsrs	r0, r0, #3
 80296e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80296e4:	1a1b      	subs	r3, r3, r0
 80296e6:	1ad3      	subs	r3, r2, r3
 80296e8:	f161 0c00 	sbc.w	ip, r1, #0
 80296ec:	4c90      	ldr	r4, [pc, #576]	@ (8029930 <mg_tcpip_poll+0x314>)
 80296ee:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 80296f2:	fb03 f000 	mul.w	r0, r3, r0
 80296f6:	fb04 000c 	mla	r0, r4, ip, r0
 80296fa:	fba3 3404 	umull	r3, r4, r3, r4
 80296fe:	4420      	add	r0, r4
 8029700:	089b      	lsrs	r3, r3, #2
 8029702:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8029706:	0880      	lsrs	r0, r0, #2
 8029708:	0104      	lsls	r4, r0, #4
 802970a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802970e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8029712:	ebbc 0c03 	subs.w	ip, ip, r3
 8029716:	eb64 0300 	sbc.w	r3, r4, r0
 802971a:	009b      	lsls	r3, r3, #2
 802971c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8029720:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8029724:	1a12      	subs	r2, r2, r0
 8029726:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802972a:	430a      	orrs	r2, r1
 802972c:	d115      	bne.n	802975a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802972e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029732:	68aa      	ldr	r2, [r5, #8]
 8029734:	497f      	ldr	r1, [pc, #508]	@ (8029934 <mg_tcpip_poll+0x318>)
 8029736:	4628      	mov	r0, r5
 8029738:	f7fe fdfe 	bl	8028338 <tx_dhcp_request_re>
 802973c:	e00d      	b.n	802975a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802973e:	2303      	movs	r3, #3
 8029740:	e791      	b.n	8029666 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029742:	4b7d      	ldr	r3, [pc, #500]	@ (8029938 <mg_tcpip_poll+0x31c>)
 8029744:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8029748:	497c      	ldr	r1, [pc, #496]	@ (802993c <mg_tcpip_poll+0x320>)
 802974a:	2001      	movs	r0, #1
 802974c:	f7fc fd4c 	bl	80261e8 <mg_log_prefix>
 8029750:	487b      	ldr	r0, [pc, #492]	@ (8029940 <mg_tcpip_poll+0x324>)
 8029752:	f7fa fbf7 	bl	8023f44 <mg_log>
 8029756:	e797      	b.n	8029688 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029758:	b95c      	cbnz	r4, 8029772 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802975a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802975c:	689b      	ldr	r3, [r3, #8]
 802975e:	b1fb      	cbz	r3, 80297a0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029760:	462a      	mov	r2, r5
 8029762:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029764:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029766:	4798      	blx	r3
    if (len > 0) {
 8029768:	4602      	mov	r2, r0
 802976a:	b988      	cbnz	r0, 8029790 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802976c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802976e:	681c      	ldr	r4, [r3, #0]
 8029770:	e0a3      	b.n	80298ba <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029772:	4628      	mov	r0, r5
 8029774:	f7fe fdaa 	bl	80282cc <tx_dhcp_discover>
 8029778:	e7ef      	b.n	802975a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802977a:	2301      	movs	r3, #1
 802977c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029780:	2300      	movs	r3, #0
 8029782:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029784:	4628      	mov	r0, r5
 8029786:	f7ff fbdf 	bl	8028f48 <onstatechange>
 802978a:	e7e6      	b.n	802975a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802978c:	2001      	movs	r0, #1
 802978e:	e7a2      	b.n	80296d6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029790:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029792:	3301      	adds	r3, #1
 8029794:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029796:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029798:	4628      	mov	r0, r5
 802979a:	f7ff fe8f 	bl	80294bc <mg_tcpip_rx>
 802979e:	e7e5      	b.n	802976c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80297a0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 80297a4:	a909      	add	r1, sp, #36	@ 0x24
 80297a6:	4620      	mov	r0, r4
 80297a8:	f7fa fcd7 	bl	802415a <mg_queue_next>
    if (len > 0) {
 80297ac:	4680      	mov	r8, r0
 80297ae:	2800      	cmp	r0, #0
 80297b0:	d0dc      	beq.n	802976c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 80297b2:	4602      	mov	r2, r0
 80297b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80297b6:	4628      	mov	r0, r5
 80297b8:	f7ff fe80 	bl	80294bc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80297bc:	4641      	mov	r1, r8
 80297be:	4620      	mov	r0, r4
 80297c0:	f7fa fce7 	bl	8024192 <mg_queue_del>
 80297c4:	e7d2      	b.n	802976c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80297c6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80297ca:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80297ce:	4291      	cmp	r1, r2
 80297d0:	f000 8088 	beq.w	80298e4 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80297d4:	4b53      	ldr	r3, [pc, #332]	@ (8029924 <mg_tcpip_poll+0x308>)
 80297d6:	681b      	ldr	r3, [r3, #0]
 80297d8:	2b03      	cmp	r3, #3
 80297da:	dc23      	bgt.n	8029824 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80297dc:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 80297e0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80297e4:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80297e8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80297ec:	f7fc f922 	bl	8025a34 <mg_ntohl>
 80297f0:	9007      	str	r0, [sp, #28]
 80297f2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80297f6:	f7fc f91d 	bl	8025a34 <mg_ntohl>
 80297fa:	2300      	movs	r3, #0
 80297fc:	9305      	str	r3, [sp, #20]
 80297fe:	9304      	str	r3, [sp, #16]
 8029800:	9003      	str	r0, [sp, #12]
 8029802:	9b07      	ldr	r3, [sp, #28]
 8029804:	9302      	str	r3, [sp, #8]
 8029806:	f8cd b004 	str.w	fp, [sp, #4]
 802980a:	f8cd a000 	str.w	sl, [sp]
 802980e:	2310      	movs	r3, #16
 8029810:	4642      	mov	r2, r8
 8029812:	4649      	mov	r1, r9
 8029814:	4628      	mov	r0, r5
 8029816:	f7fe f9e3 	bl	8027be0 <tx_tcp>
        s->acked = s->ack;
 802981a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802981e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8029822:	e045      	b.n	80298b0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029824:	4b44      	ldr	r3, [pc, #272]	@ (8029938 <mg_tcpip_poll+0x31c>)
 8029826:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802982a:	4944      	ldr	r1, [pc, #272]	@ (802993c <mg_tcpip_poll+0x320>)
 802982c:	2004      	movs	r0, #4
 802982e:	f7fc fcdb 	bl	80261e8 <mg_log_prefix>
 8029832:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029836:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802983a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802983c:	4841      	ldr	r0, [pc, #260]	@ (8029944 <mg_tcpip_poll+0x328>)
 802983e:	f7fa fb81 	bl	8023f44 <mg_log>
 8029842:	e7cb      	b.n	80297dc <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8029844:	4940      	ldr	r1, [pc, #256]	@ (8029948 <mg_tcpip_poll+0x32c>)
 8029846:	4620      	mov	r0, r4
 8029848:	f7fc fdb6 	bl	80263b8 <mg_error>
 802984c:	e030      	b.n	80298b0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802984e:	493f      	ldr	r1, [pc, #252]	@ (802994c <mg_tcpip_poll+0x330>)
 8029850:	4620      	mov	r0, r4
 8029852:	f7fc fdb1 	bl	80263b8 <mg_error>
 8029856:	e02b      	b.n	80298b0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8029858:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802985c:	f043 0320 	orr.w	r3, r3, #32
 8029860:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029864:	e028      	b.n	80298b8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029866:	493a      	ldr	r1, [pc, #232]	@ (8029950 <mg_tcpip_poll+0x334>)
 8029868:	4620      	mov	r0, r4
 802986a:	f7fc fda5 	bl	80263b8 <mg_error>
 802986e:	e01f      	b.n	80298b0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029870:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029874:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029878:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802987c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029880:	3801      	subs	r0, #1
 8029882:	f7fc f8d7 	bl	8025a34 <mg_ntohl>
 8029886:	9007      	str	r0, [sp, #28]
 8029888:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802988c:	f7fc f8d2 	bl	8025a34 <mg_ntohl>
 8029890:	2300      	movs	r3, #0
 8029892:	9305      	str	r3, [sp, #20]
 8029894:	9304      	str	r3, [sp, #16]
 8029896:	9003      	str	r0, [sp, #12]
 8029898:	9b07      	ldr	r3, [sp, #28]
 802989a:	9302      	str	r3, [sp, #8]
 802989c:	f8cd b004 	str.w	fp, [sp, #4]
 80298a0:	f8cd a000 	str.w	sl, [sp]
 80298a4:	2310      	movs	r3, #16
 80298a6:	4642      	mov	r2, r8
 80298a8:	4649      	mov	r1, r9
 80298aa:	4628      	mov	r0, r5
 80298ac:	f7fe f998 	bl	8027be0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 80298b0:	2100      	movs	r1, #0
 80298b2:	4620      	mov	r0, r4
 80298b4:	f7fe fa70 	bl	8027d98 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80298b8:	6824      	ldr	r4, [r4, #0]
 80298ba:	b384      	cbz	r4, 802991e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80298bc:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 80298c0:	f240 1209 	movw	r2, #265	@ 0x109
 80298c4:	421a      	tst	r2, r3
 80298c6:	d1f7      	bne.n	80298b8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80298c8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 80298cc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 80298d0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80298d4:	42b2      	cmp	r2, r6
 80298d6:	41bb      	sbcs	r3, r7
 80298d8:	d2ee      	bcs.n	80298b8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80298da:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80298de:	2b01      	cmp	r3, #1
 80298e0:	f43f af71 	beq.w	80297c6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80298e4:	2b02      	cmp	r3, #2
 80298e6:	d0ad      	beq.n	8029844 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80298e8:	2b03      	cmp	r3, #3
 80298ea:	d0b0      	beq.n	802984e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80298ec:	2b04      	cmp	r3, #4
 80298ee:	d0b3      	beq.n	8029858 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 80298f0:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 80298f4:	1c5a      	adds	r2, r3, #1
 80298f6:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 80298fa:	2b02      	cmp	r3, #2
 80298fc:	d8b3      	bhi.n	8029866 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 80298fe:	4b09      	ldr	r3, [pc, #36]	@ (8029924 <mg_tcpip_poll+0x308>)
 8029900:	681b      	ldr	r3, [r3, #0]
 8029902:	2b03      	cmp	r3, #3
 8029904:	ddb4      	ble.n	8029870 <mg_tcpip_poll+0x254>
 8029906:	4b0c      	ldr	r3, [pc, #48]	@ (8029938 <mg_tcpip_poll+0x31c>)
 8029908:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802990c:	490b      	ldr	r1, [pc, #44]	@ (802993c <mg_tcpip_poll+0x320>)
 802990e:	2004      	movs	r0, #4
 8029910:	f7fc fc6a 	bl	80261e8 <mg_log_prefix>
 8029914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029916:	480f      	ldr	r0, [pc, #60]	@ (8029954 <mg_tcpip_poll+0x338>)
 8029918:	f7fa fb14 	bl	8023f44 <mg_log>
 802991c:	e7a8      	b.n	8029870 <mg_tcpip_poll+0x254>
}
 802991e:	b00b      	add	sp, #44	@ 0x2c
 8029920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029924:	2000012c 	.word	0x2000012c
 8029928:	001b7740 	.word	0x001b7740
 802992c:	88888889 	.word	0x88888889
 8029930:	eeeeeeef 	.word	0xeeeeeeef
 8029934:	0803b748 	.word	0x0803b748
 8029938:	0803b630 	.word	0x0803b630
 802993c:	0803acc0 	.word	0x0803acc0
 8029940:	0803b424 	.word	0x0803b424
 8029944:	0803b434 	.word	0x0803b434
 8029948:	0803b444 	.word	0x0803b444
 802994c:	0803b450 	.word	0x0803b450
 8029950:	0803b468 	.word	0x0803b468
 8029954:	0803b464 	.word	0x0803b464

08029958 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8029958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802995a:	b087      	sub	sp, #28
 802995c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802995e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029960:	f7fc fc3c 	bl	80261dc <mg_millis>
 8029964:	4602      	mov	r2, r0
 8029966:	460b      	mov	r3, r1
 8029968:	9004      	str	r0, [sp, #16]
 802996a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802996c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029970:	f7fb fefe 	bl	8025770 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029974:	2d00      	cmp	r5, #0
 8029976:	d078      	beq.n	8029a6a <mg_mgr_poll+0x112>
 8029978:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802997a:	2b00      	cmp	r3, #0
 802997c:	d075      	beq.n	8029a6a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802997e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029982:	4628      	mov	r0, r5
 8029984:	f7ff fe4a 	bl	802961c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029988:	6824      	ldr	r4, [r4, #0]
 802998a:	e040      	b.n	8029a0e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802998c:	4b38      	ldr	r3, [pc, #224]	@ (8029a70 <mg_mgr_poll+0x118>)
 802998e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8029992:	4938      	ldr	r1, [pc, #224]	@ (8029a74 <mg_mgr_poll+0x11c>)
 8029994:	2004      	movs	r0, #4
 8029996:	f7fc fc27 	bl	80261e8 <mg_log_prefix>
 802999a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802999c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 80299a0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80299a4:	d019      	beq.n	80299da <mg_mgr_poll+0x82>
 80299a6:	2254      	movs	r2, #84	@ 0x54
 80299a8:	f010 0f20 	tst.w	r0, #32
 80299ac:	d017      	beq.n	80299de <mg_mgr_poll+0x86>
 80299ae:	2343      	movs	r3, #67	@ 0x43
 80299b0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80299b4:	d115      	bne.n	80299e2 <mg_mgr_poll+0x8a>
 80299b6:	2668      	movs	r6, #104	@ 0x68
 80299b8:	f010 0f08 	tst.w	r0, #8
 80299bc:	d013      	beq.n	80299e6 <mg_mgr_poll+0x8e>
 80299be:	2752      	movs	r7, #82	@ 0x52
 80299c0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 80299c4:	f010 0f20 	tst.w	r0, #32
 80299c8:	d00f      	beq.n	80299ea <mg_mgr_poll+0x92>
 80299ca:	2043      	movs	r0, #67	@ 0x43
 80299cc:	9002      	str	r0, [sp, #8]
 80299ce:	9701      	str	r7, [sp, #4]
 80299d0:	9600      	str	r6, [sp, #0]
 80299d2:	4829      	ldr	r0, [pc, #164]	@ (8029a78 <mg_mgr_poll+0x120>)
 80299d4:	f7fa fab6 	bl	8023f44 <mg_log>
 80299d8:	e024      	b.n	8029a24 <mg_mgr_poll+0xcc>
 80299da:	2274      	movs	r2, #116	@ 0x74
 80299dc:	e7e4      	b.n	80299a8 <mg_mgr_poll+0x50>
 80299de:	2363      	movs	r3, #99	@ 0x63
 80299e0:	e7e6      	b.n	80299b0 <mg_mgr_poll+0x58>
 80299e2:	2648      	movs	r6, #72	@ 0x48
 80299e4:	e7e8      	b.n	80299b8 <mg_mgr_poll+0x60>
 80299e6:	2772      	movs	r7, #114	@ 0x72
 80299e8:	e7ea      	b.n	80299c0 <mg_mgr_poll+0x68>
 80299ea:	2063      	movs	r0, #99	@ 0x63
 80299ec:	e7ee      	b.n	80299cc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 80299ee:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 80299f2:	4620      	mov	r0, r4
 80299f4:	f7fc fd18 	bl	8026428 <handle_tls_recv>
 80299f8:	e01e      	b.n	8029a38 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 80299fa:	4620      	mov	r0, r4
 80299fc:	f7fe fa6a 	bl	8027ed4 <write_conn>
 8029a00:	e01f      	b.n	8029a42 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8029a02:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029a06:	f013 0f20 	tst.w	r3, #32
 8029a0a:	d12a      	bne.n	8029a62 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029a0c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029a0e:	b364      	cbz	r4, 8029a6a <mg_mgr_poll+0x112>
    tmp = c->next;
 8029a10:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8029a12:	aa04      	add	r2, sp, #16
 8029a14:	2102      	movs	r1, #2
 8029a16:	4620      	mov	r0, r4
 8029a18:	f7f9 f84b 	bl	8022ab2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029a1c:	4b17      	ldr	r3, [pc, #92]	@ (8029a7c <mg_mgr_poll+0x124>)
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	2b03      	cmp	r3, #3
 8029a22:	dcb3      	bgt.n	802998c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8029a24:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029a28:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029a2c:	d004      	beq.n	8029a38 <mg_mgr_poll+0xe0>
 8029a2e:	4620      	mov	r0, r4
 8029a30:	f7fb fee8 	bl	8025804 <mg_tls_pending>
 8029a34:	2800      	cmp	r0, #0
 8029a36:	d1da      	bne.n	80299ee <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8029a38:	4620      	mov	r0, r4
 8029a3a:	f7f7 fbfb 	bl	8021234 <can_write>
 8029a3e:	2800      	cmp	r0, #0
 8029a40:	d1db      	bne.n	80299fa <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8029a42:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029a46:	f013 0f10 	tst.w	r3, #16
 8029a4a:	d0da      	beq.n	8029a02 <mg_mgr_poll+0xaa>
 8029a4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	d1d7      	bne.n	8029a02 <mg_mgr_poll+0xaa>
 8029a52:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029a56:	2b04      	cmp	r3, #4
 8029a58:	d0d3      	beq.n	8029a02 <mg_mgr_poll+0xaa>
      init_closure(c);
 8029a5a:	4620      	mov	r0, r4
 8029a5c:	f7fe fa66 	bl	8027f2c <init_closure>
 8029a60:	e7cf      	b.n	8029a02 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029a62:	4620      	mov	r0, r4
 8029a64:	f7fd fb7e 	bl	8027164 <close_conn>
 8029a68:	e7d0      	b.n	8029a0c <mg_mgr_poll+0xb4>
}
 8029a6a:	b007      	add	sp, #28
 8029a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a6e:	bf00      	nop
 8029a70:	0803b640 	.word	0x0803b640
 8029a74:	0803acc0 	.word	0x0803acc0
 8029a78:	0803b474 	.word	0x0803b474
 8029a7c:	2000012c 	.word	0x2000012c

08029a80 <mg_now>:
uint64_t mg_now(void) {
 8029a80:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029a82:	f7fc fbab 	bl	80261dc <mg_millis>
 8029a86:	4a03      	ldr	r2, [pc, #12]	@ (8029a94 <mg_now+0x14>)
 8029a88:	6813      	ldr	r3, [r2, #0]
 8029a8a:	6852      	ldr	r2, [r2, #4]
 8029a8c:	18c0      	adds	r0, r0, r3
}
 8029a8e:	eb42 0101 	adc.w	r1, r2, r1
 8029a92:	bd08      	pop	{r3, pc}
 8029a94:	20019ed8 	.word	0x20019ed8

08029a98 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8029a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029a9c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029a9e:	460a      	mov	r2, r1
 8029aa0:	b129      	cbz	r1, 8029aae <mg_sntp_parse+0x16>
 8029aa2:	7801      	ldrb	r1, [r0, #0]
 8029aa4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029aa8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8029aac:	e001      	b.n	8029ab2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029aae:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029ab0:	461d      	mov	r5, r3
  if (len < 48) {
 8029ab2:	2a2f      	cmp	r2, #47	@ 0x2f
 8029ab4:	d817      	bhi.n	8029ae6 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8029ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8029be4 <mg_sntp_parse+0x14c>)
 8029ab8:	681b      	ldr	r3, [r3, #0]
 8029aba:	2b00      	cmp	r3, #0
 8029abc:	dc04      	bgt.n	8029ac8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8029abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ac2:	4601      	mov	r1, r0
}
 8029ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8029ac8:	4b47      	ldr	r3, [pc, #284]	@ (8029be8 <mg_sntp_parse+0x150>)
 8029aca:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8029ace:	4947      	ldr	r1, [pc, #284]	@ (8029bec <mg_sntp_parse+0x154>)
 8029ad0:	2001      	movs	r0, #1
 8029ad2:	f7fc fb89 	bl	80261e8 <mg_log_prefix>
 8029ad6:	4946      	ldr	r1, [pc, #280]	@ (8029bf0 <mg_sntp_parse+0x158>)
 8029ad8:	4846      	ldr	r0, [pc, #280]	@ (8029bf4 <mg_sntp_parse+0x15c>)
 8029ada:	f7fa fa33 	bl	8023f44 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ae2:	4601      	mov	r1, r0
 8029ae4:	e7ee      	b.n	8029ac4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8029ae6:	3b04      	subs	r3, #4
 8029ae8:	2b01      	cmp	r3, #1
 8029aea:	d916      	bls.n	8029b1a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8029aec:	4b3d      	ldr	r3, [pc, #244]	@ (8029be4 <mg_sntp_parse+0x14c>)
 8029aee:	681b      	ldr	r3, [r3, #0]
 8029af0:	2b00      	cmp	r3, #0
 8029af2:	dc03      	bgt.n	8029afc <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029af8:	4601      	mov	r1, r0
 8029afa:	e7e3      	b.n	8029ac4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8029afc:	4b3a      	ldr	r3, [pc, #232]	@ (8029be8 <mg_sntp_parse+0x150>)
 8029afe:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8029b02:	493a      	ldr	r1, [pc, #232]	@ (8029bec <mg_sntp_parse+0x154>)
 8029b04:	2001      	movs	r0, #1
 8029b06:	f7fc fb6f 	bl	80261e8 <mg_log_prefix>
 8029b0a:	493b      	ldr	r1, [pc, #236]	@ (8029bf8 <mg_sntp_parse+0x160>)
 8029b0c:	4839      	ldr	r0, [pc, #228]	@ (8029bf4 <mg_sntp_parse+0x15c>)
 8029b0e:	f7fa fa19 	bl	8023f44 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b16:	4601      	mov	r1, r0
 8029b18:	e7d4      	b.n	8029ac4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8029b1a:	7863      	ldrb	r3, [r4, #1]
 8029b1c:	b9b3      	cbnz	r3, 8029b4c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029b1e:	4b31      	ldr	r3, [pc, #196]	@ (8029be4 <mg_sntp_parse+0x14c>)
 8029b20:	681b      	ldr	r3, [r3, #0]
 8029b22:	2b00      	cmp	r3, #0
 8029b24:	dc03      	bgt.n	8029b2e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8029b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b2a:	4601      	mov	r1, r0
 8029b2c:	e7ca      	b.n	8029ac4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8029be8 <mg_sntp_parse+0x150>)
 8029b30:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8029b34:	492d      	ldr	r1, [pc, #180]	@ (8029bec <mg_sntp_parse+0x154>)
 8029b36:	2001      	movs	r0, #1
 8029b38:	f7fc fb56 	bl	80261e8 <mg_log_prefix>
 8029b3c:	492f      	ldr	r1, [pc, #188]	@ (8029bfc <mg_sntp_parse+0x164>)
 8029b3e:	482d      	ldr	r0, [pc, #180]	@ (8029bf4 <mg_sntp_parse+0x15c>)
 8029b40:	f7fa fa00 	bl	8023f44 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b48:	4601      	mov	r1, r0
 8029b4a:	e7bb      	b.n	8029ac4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8029b4c:	1eeb      	subs	r3, r5, #3
 8029b4e:	2b01      	cmp	r3, #1
 8029b50:	d907      	bls.n	8029b62 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8029b52:	4b24      	ldr	r3, [pc, #144]	@ (8029be4 <mg_sntp_parse+0x14c>)
 8029b54:	681b      	ldr	r3, [r3, #0]
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	dc35      	bgt.n	8029bc6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8029b5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b5e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029b60:	e7b0      	b.n	8029ac4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029b62:	f104 0018 	add.w	r0, r4, #24
 8029b66:	f7fb ffc3 	bl	8025af0 <gettimestamp>
 8029b6a:	4606      	mov	r6, r0
 8029b6c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8029b6e:	f104 0020 	add.w	r0, r4, #32
 8029b72:	f7fb ffbd 	bl	8025af0 <gettimestamp>
 8029b76:	4680      	mov	r8, r0
 8029b78:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8029b7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8029b7e:	f7fb ffb7 	bl	8025af0 <gettimestamp>
 8029b82:	4607      	mov	r7, r0
 8029b84:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029b86:	f7fc fb29 	bl	80261dc <mg_millis>
 8029b8a:	4605      	mov	r5, r0
 8029b8c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8029b8e:	1b86      	subs	r6, r0, r6
 8029b90:	eb61 020a 	sbc.w	r2, r1, sl
 8029b94:	ebb7 0808 	subs.w	r8, r7, r8
 8029b98:	eb64 0909 	sbc.w	r9, r4, r9
 8029b9c:	ebb6 0608 	subs.w	r6, r6, r8
 8029ba0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8029ba4:	0fd3      	lsrs	r3, r2, #31
 8029ba6:	199b      	adds	r3, r3, r6
 8029ba8:	f142 0200 	adc.w	r2, r2, #0
 8029bac:	085b      	lsrs	r3, r3, #1
 8029bae:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8029bb2:	19d8      	adds	r0, r3, r7
 8029bb4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8029bb8:	1b45      	subs	r5, r0, r5
 8029bba:	eb61 030c 	sbc.w	r3, r1, ip
 8029bbe:	4a10      	ldr	r2, [pc, #64]	@ (8029c00 <mg_sntp_parse+0x168>)
 8029bc0:	6015      	str	r5, [r2, #0]
 8029bc2:	6053      	str	r3, [r2, #4]
 8029bc4:	e77e      	b.n	8029ac4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8029bc6:	4b08      	ldr	r3, [pc, #32]	@ (8029be8 <mg_sntp_parse+0x150>)
 8029bc8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8029bcc:	4907      	ldr	r1, [pc, #28]	@ (8029bec <mg_sntp_parse+0x154>)
 8029bce:	2001      	movs	r0, #1
 8029bd0:	f7fc fb0a 	bl	80261e8 <mg_log_prefix>
 8029bd4:	4629      	mov	r1, r5
 8029bd6:	480b      	ldr	r0, [pc, #44]	@ (8029c04 <mg_sntp_parse+0x16c>)
 8029bd8:	f7fa f9b4 	bl	8023f44 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029be0:	4601      	mov	r1, r0
 8029be2:	e76f      	b.n	8029ac4 <mg_sntp_parse+0x2c>
 8029be4:	2000012c 	.word	0x2000012c
 8029be8:	0803b590 	.word	0x0803b590
 8029bec:	0803acc0 	.word	0x0803acc0
 8029bf0:	0803b488 	.word	0x0803b488
 8029bf4:	0803afd8 	.word	0x0803afd8
 8029bf8:	0803b498 	.word	0x0803b498
 8029bfc:	0803b4ac 	.word	0x0803b4ac
 8029c00:	20019ed8 	.word	0x20019ed8
 8029c04:	0803b4c8 	.word	0x0803b4c8

08029c08 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8029c08:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8029c0c:	b08c      	sub	sp, #48	@ 0x30
 8029c0e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8029c10:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029c14:	f013 0f08 	tst.w	r3, #8
 8029c18:	d012      	beq.n	8029c40 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8029c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8029cc8 <mg_sntp_request+0xc0>)
 8029c1c:	681b      	ldr	r3, [r3, #0]
 8029c1e:	2b00      	cmp	r3, #0
 8029c20:	dc02      	bgt.n	8029c28 <mg_sntp_request+0x20>
}
 8029c22:	b00c      	add	sp, #48	@ 0x30
 8029c24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8029c28:	4b28      	ldr	r3, [pc, #160]	@ (8029ccc <mg_sntp_request+0xc4>)
 8029c2a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8029c2e:	4928      	ldr	r1, [pc, #160]	@ (8029cd0 <mg_sntp_request+0xc8>)
 8029c30:	2001      	movs	r0, #1
 8029c32:	f7fc fad9 	bl	80261e8 <mg_log_prefix>
 8029c36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029c38:	4826      	ldr	r0, [pc, #152]	@ (8029cd4 <mg_sntp_request+0xcc>)
 8029c3a:	f7fa f983 	bl	8023f44 <mg_log>
 8029c3e:	e7f0      	b.n	8029c22 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8029c40:	f7fc facc 	bl	80261dc <mg_millis>
 8029c44:	4606      	mov	r6, r0
 8029c46:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8029c48:	2100      	movs	r1, #0
 8029c4a:	9100      	str	r1, [sp, #0]
 8029c4c:	222c      	movs	r2, #44	@ 0x2c
 8029c4e:	a801      	add	r0, sp, #4
 8029c50:	f002 fec6 	bl	802c9e0 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8029c54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029c58:	2300      	movs	r3, #0
 8029c5a:	4630      	mov	r0, r6
 8029c5c:	4629      	mov	r1, r5
 8029c5e:	f7e7 f82b 	bl	8010cb8 <__aeabi_ldivmod>
 8029c62:	4610      	mov	r0, r2
 8029c64:	4619      	mov	r1, r3
 8029c66:	f7e6 fcb1 	bl	80105cc <__aeabi_l2d>
 8029c6a:	2200      	movs	r2, #0
 8029c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8029cd8 <mg_sntp_request+0xd0>)
 8029c6e:	f7e6 fe05 	bl	801087c <__aeabi_ddiv>
 8029c72:	a313      	add	r3, pc, #76	@ (adr r3, 8029cc0 <mg_sntp_request+0xb8>)
 8029c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029c78:	f7e6 fcd6 	bl	8010628 <__aeabi_dmul>
 8029c7c:	4680      	mov	r8, r0
 8029c7e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029c80:	2323      	movs	r3, #35	@ 0x23
 8029c82:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029c8a:	2300      	movs	r3, #0
 8029c8c:	4630      	mov	r0, r6
 8029c8e:	4629      	mov	r1, r5
 8029c90:	f7e7 f812 	bl	8010cb8 <__aeabi_ldivmod>
 8029c94:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8029c98:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8029c9c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8029ca0:	f7fb fec8 	bl	8025a34 <mg_ntohl>
 8029ca4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8029ca6:	4640      	mov	r0, r8
 8029ca8:	4649      	mov	r1, r9
 8029caa:	f7e6 ff95 	bl	8010bd8 <__aeabi_d2uiz>
 8029cae:	f7fb fec1 	bl	8025a34 <mg_ntohl>
 8029cb2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8029cb4:	2230      	movs	r2, #48	@ 0x30
 8029cb6:	4669      	mov	r1, sp
 8029cb8:	4620      	mov	r0, r4
 8029cba:	f7fd fb49 	bl	8027350 <mg_send>
}
 8029cbe:	e7b0      	b.n	8029c22 <mg_sntp_request+0x1a>
 8029cc0:	ffe00000 	.word	0xffe00000
 8029cc4:	41efffff 	.word	0x41efffff
 8029cc8:	2000012c 	.word	0x2000012c
 8029ccc:	0803b580 	.word	0x0803b580
 8029cd0:	0803acc0 	.word	0x0803acc0
 8029cd4:	0803b4e0 	.word	0x0803b4e0
 8029cd8:	408f4000 	.word	0x408f4000

08029cdc <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029cdc:	b570      	push	{r4, r5, r6, lr}
 8029cde:	b082      	sub	sp, #8
 8029ce0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8029ce2:	3901      	subs	r1, #1
 8029ce4:	2906      	cmp	r1, #6
 8029ce6:	d810      	bhi.n	8029d0a <sntp_cb+0x2e>
 8029ce8:	e8df f001 	tbb	[pc, r1]
 8029cec:	110f4604 	.word	0x110f4604
 8029cf0:	0f0f      	.short	0x0f0f
 8029cf2:	14          	.byte	0x14
 8029cf3:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029cf4:	f7fc fa72 	bl	80261dc <mg_millis>
 8029cf8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8029cfc:	18c0      	adds	r0, r0, r3
 8029cfe:	f141 0100 	adc.w	r1, r1, #0
 8029d02:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029d06:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8029d0a:	b002      	add	sp, #8
 8029d0c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8029d0e:	f7ff ff7b 	bl	8029c08 <mg_sntp_request>
 8029d12:	e7fa      	b.n	8029d0a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8029d14:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8029d16:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8029d18:	f7ff febe 	bl	8029a98 <mg_sntp_parse>
 8029d1c:	4605      	mov	r5, r0
 8029d1e:	460e      	mov	r6, r1
 8029d20:	9000      	str	r0, [sp, #0]
 8029d22:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8029d24:	2801      	cmp	r0, #1
 8029d26:	f171 0300 	sbcs.w	r3, r1, #0
 8029d2a:	da06      	bge.n	8029d3a <sntp_cb+0x5e>
    c->is_closing = 1;
 8029d2c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029d30:	f043 0320 	orr.w	r3, r3, #32
 8029d34:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8029d38:	e7e7      	b.n	8029d0a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8029d3a:	f7fc fa4f 	bl	80261dc <mg_millis>
 8029d3e:	1a2d      	subs	r5, r5, r0
 8029d40:	eb66 0601 	sbc.w	r6, r6, r1
 8029d44:	4b14      	ldr	r3, [pc, #80]	@ (8029d98 <sntp_cb+0xbc>)
 8029d46:	601d      	str	r5, [r3, #0]
 8029d48:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8029d4a:	466a      	mov	r2, sp
 8029d4c:	2112      	movs	r1, #18
 8029d4e:	4620      	mov	r0, r4
 8029d50:	f7f8 feaf 	bl	8022ab2 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8029d54:	4b11      	ldr	r3, [pc, #68]	@ (8029d9c <sntp_cb+0xc0>)
 8029d56:	681b      	ldr	r3, [r3, #0]
 8029d58:	2b02      	cmp	r3, #2
 8029d5a:	dde7      	ble.n	8029d2c <sntp_cb+0x50>
 8029d5c:	4b10      	ldr	r3, [pc, #64]	@ (8029da0 <sntp_cb+0xc4>)
 8029d5e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029d62:	4910      	ldr	r1, [pc, #64]	@ (8029da4 <sntp_cb+0xc8>)
 8029d64:	2003      	movs	r0, #3
 8029d66:	f7fc fa3f 	bl	80261e8 <mg_log_prefix>
 8029d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029d6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029d70:	480d      	ldr	r0, [pc, #52]	@ (8029da8 <sntp_cb+0xcc>)
 8029d72:	f7fa f8e7 	bl	8023f44 <mg_log>
 8029d76:	e7d9      	b.n	8029d2c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8029d78:	f7fc fa30 	bl	80261dc <mg_millis>
 8029d7c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8029d80:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8029d84:	4282      	cmp	r2, r0
 8029d86:	418b      	sbcs	r3, r1
 8029d88:	d2bf      	bcs.n	8029d0a <sntp_cb+0x2e>
 8029d8a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029d8e:	f043 0320 	orr.w	r3, r3, #32
 8029d92:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8029d96:	e7b8      	b.n	8029d0a <sntp_cb+0x2e>
 8029d98:	20019ed8 	.word	0x20019ed8
 8029d9c:	2000012c 	.word	0x2000012c
 8029da0:	0803b578 	.word	0x0803b578
 8029da4:	0803acc0 	.word	0x0803acc0
 8029da8:	0803b4f8 	.word	0x0803b4f8

08029dac <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8029dac:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8029dae:	460d      	mov	r5, r1
 8029db0:	b169      	cbz	r1, 8029dce <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8029db2:	4629      	mov	r1, r5
 8029db4:	f7fe ffa0 	bl	8028cf8 <mg_connect>
 8029db8:	4604      	mov	r4, r0
 8029dba:	b130      	cbz	r0, 8029dca <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8029dbc:	4b05      	ldr	r3, [pc, #20]	@ (8029dd4 <mg_sntp_connect+0x28>)
 8029dbe:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8029dc2:	462a      	mov	r2, r5
 8029dc4:	2101      	movs	r1, #1
 8029dc6:	f7ff ff89 	bl	8029cdc <sntp_cb>
}
 8029dca:	4620      	mov	r0, r4
 8029dcc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8029dce:	4d02      	ldr	r5, [pc, #8]	@ (8029dd8 <mg_sntp_connect+0x2c>)
 8029dd0:	e7ef      	b.n	8029db2 <mg_sntp_connect+0x6>
 8029dd2:	bf00      	nop
 8029dd4:	08029cdd 	.word	0x08029cdd
 8029dd8:	0803b51c 	.word	0x0803b51c

08029ddc <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8029ddc:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8029dde:	2207      	movs	r2, #7
 8029de0:	4903      	ldr	r1, [pc, #12]	@ (8029df0 <has_mqtt_prefix+0x14>)
 8029de2:	f002 fe32 	bl	802ca4a <strncmp>
}
 8029de6:	fab0 f080 	clz	r0, r0
 8029dea:	0940      	lsrs	r0, r0, #5
 8029dec:	bd08      	pop	{r3, pc}
 8029dee:	bf00      	nop
 8029df0:	0803bb98 	.word	0x0803bb98

08029df4 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8029df4:	b570      	push	{r4, r5, r6, lr}
 8029df6:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8029df8:	2200      	movs	r2, #0
    int dot_count = 0;
 8029dfa:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8029dfc:	e001      	b.n	8029e02 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8029dfe:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029e00:	3201      	adds	r2, #1
 8029e02:	5ca3      	ldrb	r3, [r4, r2]
 8029e04:	b143      	cbz	r3, 8029e18 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8029e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8029e08:	d0f9      	beq.n	8029dfe <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8029e0a:	491d      	ldr	r1, [pc, #116]	@ (8029e80 <is_valid_ip_or_domain+0x8c>)
 8029e0c:	5ccb      	ldrb	r3, [r1, r3]
 8029e0e:	f013 0f04 	tst.w	r3, #4
 8029e12:	d1f5      	bne.n	8029e00 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8029e14:	2500      	movs	r5, #0
 8029e16:	e000      	b.n	8029e1a <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8029e18:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8029e1a:	b335      	cbz	r5, 8029e6a <is_valid_ip_or_domain+0x76>
 8029e1c:	2803      	cmp	r0, #3
 8029e1e:	d013      	beq.n	8029e48 <is_valid_ip_or_domain+0x54>
 8029e20:	2200      	movs	r2, #0
 8029e22:	4615      	mov	r5, r2
 8029e24:	e014      	b.n	8029e50 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8029e26:	3601      	adds	r6, #1
 8029e28:	2e03      	cmp	r6, #3
 8029e2a:	dc24      	bgt.n	8029e76 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8029e2c:	4620      	mov	r0, r4
 8029e2e:	f000 f8a3 	bl	8029f78 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029e32:	28ff      	cmp	r0, #255	@ 0xff
 8029e34:	d821      	bhi.n	8029e7a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8029e36:	212e      	movs	r1, #46	@ 0x2e
 8029e38:	4620      	mov	r0, r4
 8029e3a:	f002 fde8 	bl	802ca0e <strchr>
            if (ptr != NULL) ptr++;
 8029e3e:	4604      	mov	r4, r0
 8029e40:	2800      	cmp	r0, #0
 8029e42:	d0f0      	beq.n	8029e26 <is_valid_ip_or_domain+0x32>
 8029e44:	3401      	adds	r4, #1
 8029e46:	e7ee      	b.n	8029e26 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8029e48:	2600      	movs	r6, #0
 8029e4a:	e7ed      	b.n	8029e28 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8029e4c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029e4e:	3201      	adds	r2, #1
 8029e50:	5ca3      	ldrb	r3, [r4, r2]
 8029e52:	b163      	cbz	r3, 8029e6e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8029e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8029e56:	d0f9      	beq.n	8029e4c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8029e58:	4909      	ldr	r1, [pc, #36]	@ (8029e80 <is_valid_ip_or_domain+0x8c>)
 8029e5a:	5cc9      	ldrb	r1, [r1, r3]
 8029e5c:	f011 0f07 	tst.w	r1, #7
 8029e60:	d1f5      	bne.n	8029e4e <is_valid_ip_or_domain+0x5a>
 8029e62:	2b2d      	cmp	r3, #45	@ 0x2d
 8029e64:	d0f3      	beq.n	8029e4e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8029e66:	2500      	movs	r5, #0
 8029e68:	e005      	b.n	8029e76 <is_valid_ip_or_domain+0x82>
 8029e6a:	462a      	mov	r2, r5
 8029e6c:	e7f0      	b.n	8029e50 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8029e6e:	2d00      	cmp	r5, #0
 8029e70:	bfd4      	ite	le
 8029e72:	2500      	movle	r5, #0
 8029e74:	2501      	movgt	r5, #1
}
 8029e76:	4628      	mov	r0, r5
 8029e78:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029e7a:	2500      	movs	r5, #0
 8029e7c:	e7fb      	b.n	8029e76 <is_valid_ip_or_domain+0x82>
 8029e7e:	bf00      	nop
 8029e80:	0803c039 	.word	0x0803c039

08029e84 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8029e84:	b510      	push	{r4, lr}
 8029e86:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8029e88:	f000 f876 	bl	8029f78 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8029e8c:	3801      	subs	r0, #1
 8029e8e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8029e92:	4298      	cmp	r0, r3
 8029e94:	d80a      	bhi.n	8029eac <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8029e96:	7823      	ldrb	r3, [r4, #0]
 8029e98:	b133      	cbz	r3, 8029ea8 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8029e9a:	4a06      	ldr	r2, [pc, #24]	@ (8029eb4 <is_valid_port+0x30>)
 8029e9c:	5cd3      	ldrb	r3, [r2, r3]
 8029e9e:	f013 0f04 	tst.w	r3, #4
 8029ea2:	d005      	beq.n	8029eb0 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8029ea4:	3401      	adds	r4, #1
 8029ea6:	e7f6      	b.n	8029e96 <is_valid_port+0x12>
    }
    return 1;
 8029ea8:	2001      	movs	r0, #1
 8029eaa:	e000      	b.n	8029eae <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8029eac:	2000      	movs	r0, #0
}
 8029eae:	bd10      	pop	{r4, pc}
            return 0;
 8029eb0:	2000      	movs	r0, #0
 8029eb2:	e7fc      	b.n	8029eae <is_valid_port+0x2a>
 8029eb4:	0803c039 	.word	0x0803c039

08029eb8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8029eb8:	b570      	push	{r4, r5, r6, lr}
 8029eba:	b0c0      	sub	sp, #256	@ 0x100
 8029ebc:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8029ebe:	f7ff ff8d 	bl	8029ddc <has_mqtt_prefix>
 8029ec2:	b1d0      	cbz	r0, 8029efa <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8029ec4:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8029ec6:	213a      	movs	r1, #58	@ 0x3a
 8029ec8:	4620      	mov	r0, r4
 8029eca:	f002 fda0 	bl	802ca0e <strchr>
    if (!colon) {
 8029ece:	4606      	mov	r6, r0
 8029ed0:	b1c8      	cbz	r0, 8029f06 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8029ed2:	1b05      	subs	r5, r0, r4
 8029ed4:	462a      	mov	r2, r5
 8029ed6:	4621      	mov	r1, r4
 8029ed8:	4668      	mov	r0, sp
 8029eda:	f002 fdc8 	bl	802ca6e <strncpy>
    host[colon - host_start] = '\0';
 8029ede:	2300      	movs	r3, #0
 8029ee0:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8029ee4:	4668      	mov	r0, sp
 8029ee6:	f7ff ff85 	bl	8029df4 <is_valid_ip_or_domain>
 8029eea:	b190      	cbz	r0, 8029f12 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8029eec:	1c70      	adds	r0, r6, #1
 8029eee:	f7ff ffc9 	bl	8029e84 <is_valid_port>
 8029ef2:	b1a0      	cbz	r0, 8029f1e <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8029ef4:	2000      	movs	r0, #0
}
 8029ef6:	b040      	add	sp, #256	@ 0x100
 8029ef8:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8029efa:	480c      	ldr	r0, [pc, #48]	@ (8029f2c <is_valid_mqtt_url+0x74>)
 8029efc:	f002 f818 	bl	802bf30 <puts>
        return -1;
 8029f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029f04:	e7f7      	b.n	8029ef6 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8029f06:	480a      	ldr	r0, [pc, #40]	@ (8029f30 <is_valid_mqtt_url+0x78>)
 8029f08:	f002 f812 	bl	802bf30 <puts>
        return -2;
 8029f0c:	f06f 0001 	mvn.w	r0, #1
 8029f10:	e7f1      	b.n	8029ef6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8029f12:	4808      	ldr	r0, [pc, #32]	@ (8029f34 <is_valid_mqtt_url+0x7c>)
 8029f14:	f002 f80c 	bl	802bf30 <puts>
        return -3;
 8029f18:	f06f 0002 	mvn.w	r0, #2
 8029f1c:	e7eb      	b.n	8029ef6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 8029f1e:	4806      	ldr	r0, [pc, #24]	@ (8029f38 <is_valid_mqtt_url+0x80>)
 8029f20:	f002 f806 	bl	802bf30 <puts>
        return -4;
 8029f24:	f06f 0003 	mvn.w	r0, #3
 8029f28:	e7e5      	b.n	8029ef6 <is_valid_mqtt_url+0x3e>
 8029f2a:	bf00      	nop
 8029f2c:	0803bba0 	.word	0x0803bba0
 8029f30:	0803bbcc 	.word	0x0803bbcc
 8029f34:	0803bc00 	.word	0x0803bc00
 8029f38:	0803bc24 	.word	0x0803bc24

08029f3c <__assert_func>:
 8029f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029f3e:	4614      	mov	r4, r2
 8029f40:	461a      	mov	r2, r3
 8029f42:	4b09      	ldr	r3, [pc, #36]	@ (8029f68 <__assert_func+0x2c>)
 8029f44:	681b      	ldr	r3, [r3, #0]
 8029f46:	4605      	mov	r5, r0
 8029f48:	68d8      	ldr	r0, [r3, #12]
 8029f4a:	b954      	cbnz	r4, 8029f62 <__assert_func+0x26>
 8029f4c:	4b07      	ldr	r3, [pc, #28]	@ (8029f6c <__assert_func+0x30>)
 8029f4e:	461c      	mov	r4, r3
 8029f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029f54:	9100      	str	r1, [sp, #0]
 8029f56:	462b      	mov	r3, r5
 8029f58:	4905      	ldr	r1, [pc, #20]	@ (8029f70 <__assert_func+0x34>)
 8029f5a:	f000 f811 	bl	8029f80 <fiprintf>
 8029f5e:	f003 ffdf 	bl	802df20 <abort>
 8029f62:	4b04      	ldr	r3, [pc, #16]	@ (8029f74 <__assert_func+0x38>)
 8029f64:	e7f4      	b.n	8029f50 <__assert_func+0x14>
 8029f66:	bf00      	nop
 8029f68:	200002d8 	.word	0x200002d8
 8029f6c:	0803bc7a 	.word	0x0803bc7a
 8029f70:	0803bc4c 	.word	0x0803bc4c
 8029f74:	0803bc3f 	.word	0x0803bc3f

08029f78 <atoi>:
 8029f78:	220a      	movs	r2, #10
 8029f7a:	2100      	movs	r1, #0
 8029f7c:	f002 b8b6 	b.w	802c0ec <strtol>

08029f80 <fiprintf>:
 8029f80:	b40e      	push	{r1, r2, r3}
 8029f82:	b503      	push	{r0, r1, lr}
 8029f84:	4601      	mov	r1, r0
 8029f86:	ab03      	add	r3, sp, #12
 8029f88:	4805      	ldr	r0, [pc, #20]	@ (8029fa0 <fiprintf+0x20>)
 8029f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029f8e:	6800      	ldr	r0, [r0, #0]
 8029f90:	9301      	str	r3, [sp, #4]
 8029f92:	f001 fab7 	bl	802b504 <_vfiprintf_r>
 8029f96:	b002      	add	sp, #8
 8029f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8029f9c:	b003      	add	sp, #12
 8029f9e:	4770      	bx	lr
 8029fa0:	200002d8 	.word	0x200002d8

08029fa4 <printf>:
 8029fa4:	b40f      	push	{r0, r1, r2, r3}
 8029fa6:	b507      	push	{r0, r1, r2, lr}
 8029fa8:	4906      	ldr	r1, [pc, #24]	@ (8029fc4 <printf+0x20>)
 8029faa:	ab04      	add	r3, sp, #16
 8029fac:	6808      	ldr	r0, [r1, #0]
 8029fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8029fb2:	6881      	ldr	r1, [r0, #8]
 8029fb4:	9301      	str	r3, [sp, #4]
 8029fb6:	f000 f807 	bl	8029fc8 <_vfprintf_r>
 8029fba:	b003      	add	sp, #12
 8029fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8029fc0:	b004      	add	sp, #16
 8029fc2:	4770      	bx	lr
 8029fc4:	200002d8 	.word	0x200002d8

08029fc8 <_vfprintf_r>:
 8029fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fcc:	b0d3      	sub	sp, #332	@ 0x14c
 8029fce:	468b      	mov	fp, r1
 8029fd0:	4690      	mov	r8, r2
 8029fd2:	461c      	mov	r4, r3
 8029fd4:	461e      	mov	r6, r3
 8029fd6:	9003      	str	r0, [sp, #12]
 8029fd8:	f003 fe90 	bl	802dcfc <_localeconv_r>
 8029fdc:	6803      	ldr	r3, [r0, #0]
 8029fde:	9316      	str	r3, [sp, #88]	@ 0x58
 8029fe0:	4618      	mov	r0, r3
 8029fe2:	f7e6 f95d 	bl	80102a0 <strlen>
 8029fe6:	9b03      	ldr	r3, [sp, #12]
 8029fe8:	900d      	str	r0, [sp, #52]	@ 0x34
 8029fea:	b123      	cbz	r3, 8029ff6 <_vfprintf_r+0x2e>
 8029fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029fee:	b913      	cbnz	r3, 8029ff6 <_vfprintf_r+0x2e>
 8029ff0:	9803      	ldr	r0, [sp, #12]
 8029ff2:	f002 fa4f 	bl	802c494 <__sinit>
 8029ff6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029ffa:	07da      	lsls	r2, r3, #31
 8029ffc:	d407      	bmi.n	802a00e <_vfprintf_r+0x46>
 8029ffe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a002:	059b      	lsls	r3, r3, #22
 802a004:	d403      	bmi.n	802a00e <_vfprintf_r+0x46>
 802a006:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a00a:	f003 ff22 	bl	802de52 <__retarget_lock_acquire_recursive>
 802a00e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a012:	049f      	lsls	r7, r3, #18
 802a014:	d409      	bmi.n	802a02a <_vfprintf_r+0x62>
 802a016:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a01a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a01e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a026:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802a02a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a02e:	071d      	lsls	r5, r3, #28
 802a030:	d502      	bpl.n	802a038 <_vfprintf_r+0x70>
 802a032:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a036:	b9c3      	cbnz	r3, 802a06a <_vfprintf_r+0xa2>
 802a038:	9803      	ldr	r0, [sp, #12]
 802a03a:	4659      	mov	r1, fp
 802a03c:	f002 fbe6 	bl	802c80c <__swsetup_r>
 802a040:	b198      	cbz	r0, 802a06a <_vfprintf_r+0xa2>
 802a042:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a046:	07d8      	lsls	r0, r3, #31
 802a048:	d506      	bpl.n	802a058 <_vfprintf_r+0x90>
 802a04a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a04e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a050:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a052:	b053      	add	sp, #332	@ 0x14c
 802a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a058:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a05c:	0599      	lsls	r1, r3, #22
 802a05e:	d4f4      	bmi.n	802a04a <_vfprintf_r+0x82>
 802a060:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a064:	f003 fef7 	bl	802de56 <__retarget_lock_release_recursive>
 802a068:	e7ef      	b.n	802a04a <_vfprintf_r+0x82>
 802a06a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a06e:	f003 021a 	and.w	r2, r3, #26
 802a072:	2a0a      	cmp	r2, #10
 802a074:	d116      	bne.n	802a0a4 <_vfprintf_r+0xdc>
 802a076:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802a07a:	2a00      	cmp	r2, #0
 802a07c:	db12      	blt.n	802a0a4 <_vfprintf_r+0xdc>
 802a07e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802a082:	07d2      	lsls	r2, r2, #31
 802a084:	d405      	bmi.n	802a092 <_vfprintf_r+0xca>
 802a086:	059b      	lsls	r3, r3, #22
 802a088:	d403      	bmi.n	802a092 <_vfprintf_r+0xca>
 802a08a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a08e:	f003 fee2 	bl	802de56 <__retarget_lock_release_recursive>
 802a092:	9803      	ldr	r0, [sp, #12]
 802a094:	4623      	mov	r3, r4
 802a096:	4642      	mov	r2, r8
 802a098:	4659      	mov	r1, fp
 802a09a:	b053      	add	sp, #332	@ 0x14c
 802a09c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0a0:	f001 b9be 	b.w	802b420 <__sbprintf>
 802a0a4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802a2f0 <_vfprintf_r+0x328>
 802a0a8:	2300      	movs	r3, #0
 802a0aa:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a0ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a0b2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a0b6:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0b8:	9426      	str	r4, [sp, #152]	@ 0x98
 802a0ba:	9304      	str	r3, [sp, #16]
 802a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0be:	9312      	str	r3, [sp, #72]	@ 0x48
 802a0c0:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a0c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0c4:	4643      	mov	r3, r8
 802a0c6:	461d      	mov	r5, r3
 802a0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0cc:	b10a      	cbz	r2, 802a0d2 <_vfprintf_r+0x10a>
 802a0ce:	2a25      	cmp	r2, #37	@ 0x25
 802a0d0:	d1f9      	bne.n	802a0c6 <_vfprintf_r+0xfe>
 802a0d2:	ebb5 0708 	subs.w	r7, r5, r8
 802a0d6:	d00d      	beq.n	802a0f4 <_vfprintf_r+0x12c>
 802a0d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a0da:	443b      	add	r3, r7
 802a0dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a0de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a0e0:	3301      	adds	r3, #1
 802a0e2:	2b07      	cmp	r3, #7
 802a0e4:	e9c4 8700 	strd	r8, r7, [r4]
 802a0e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a0ea:	dc75      	bgt.n	802a1d8 <_vfprintf_r+0x210>
 802a0ec:	3408      	adds	r4, #8
 802a0ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a0f0:	443b      	add	r3, r7
 802a0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0f4:	782b      	ldrb	r3, [r5, #0]
 802a0f6:	2b00      	cmp	r3, #0
 802a0f8:	f001 814f 	beq.w	802b39a <_vfprintf_r+0x13d2>
 802a0fc:	2200      	movs	r2, #0
 802a0fe:	1c6b      	adds	r3, r5, #1
 802a100:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a104:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802a108:	920e      	str	r2, [sp, #56]	@ 0x38
 802a10a:	4615      	mov	r5, r2
 802a10c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a110:	9206      	str	r2, [sp, #24]
 802a112:	930c      	str	r3, [sp, #48]	@ 0x30
 802a114:	9b06      	ldr	r3, [sp, #24]
 802a116:	3b20      	subs	r3, #32
 802a118:	2b5a      	cmp	r3, #90	@ 0x5a
 802a11a:	f200 85aa 	bhi.w	802ac72 <_vfprintf_r+0xcaa>
 802a11e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a122:	009d      	.short	0x009d
 802a124:	05a805a8 	.word	0x05a805a8
 802a128:	05a800a5 	.word	0x05a800a5
 802a12c:	05a805a8 	.word	0x05a805a8
 802a130:	05a80085 	.word	0x05a80085
 802a134:	00a805a8 	.word	0x00a805a8
 802a138:	05a800b2 	.word	0x05a800b2
 802a13c:	00b400af 	.word	0x00b400af
 802a140:	00ce05a8 	.word	0x00ce05a8
 802a144:	00d100d1 	.word	0x00d100d1
 802a148:	00d100d1 	.word	0x00d100d1
 802a14c:	00d100d1 	.word	0x00d100d1
 802a150:	00d100d1 	.word	0x00d100d1
 802a154:	05a800d1 	.word	0x05a800d1
 802a158:	05a805a8 	.word	0x05a805a8
 802a15c:	05a805a8 	.word	0x05a805a8
 802a160:	05a805a8 	.word	0x05a805a8
 802a164:	05a80146 	.word	0x05a80146
 802a168:	011a0107 	.word	0x011a0107
 802a16c:	01460146 	.word	0x01460146
 802a170:	05a80146 	.word	0x05a80146
 802a174:	05a805a8 	.word	0x05a805a8
 802a178:	00e205a8 	.word	0x00e205a8
 802a17c:	05a805a8 	.word	0x05a805a8
 802a180:	05a804a3 	.word	0x05a804a3
 802a184:	05a805a8 	.word	0x05a805a8
 802a188:	05a804ed 	.word	0x05a804ed
 802a18c:	05a8050e 	.word	0x05a8050e
 802a190:	053005a8 	.word	0x053005a8
 802a194:	05a805a8 	.word	0x05a805a8
 802a198:	05a805a8 	.word	0x05a805a8
 802a19c:	05a805a8 	.word	0x05a805a8
 802a1a0:	05a805a8 	.word	0x05a805a8
 802a1a4:	05a80146 	.word	0x05a80146
 802a1a8:	011c0107 	.word	0x011c0107
 802a1ac:	01460146 	.word	0x01460146
 802a1b0:	00ed0146 	.word	0x00ed0146
 802a1b4:	0101011c 	.word	0x0101011c
 802a1b8:	00fa05a8 	.word	0x00fa05a8
 802a1bc:	048705a8 	.word	0x048705a8
 802a1c0:	04dc04a5 	.word	0x04dc04a5
 802a1c4:	05a80101 	.word	0x05a80101
 802a1c8:	009b04ed 	.word	0x009b04ed
 802a1cc:	05a80510 	.word	0x05a80510
 802a1d0:	006505a8 	.word	0x006505a8
 802a1d4:	009b05a8 	.word	0x009b05a8
 802a1d8:	9803      	ldr	r0, [sp, #12]
 802a1da:	aa26      	add	r2, sp, #152	@ 0x98
 802a1dc:	4659      	mov	r1, fp
 802a1de:	f001 f95f 	bl	802b4a0 <__sprint_r>
 802a1e2:	2800      	cmp	r0, #0
 802a1e4:	f040 814d 	bne.w	802a482 <_vfprintf_r+0x4ba>
 802a1e8:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1ea:	e780      	b.n	802a0ee <_vfprintf_r+0x126>
 802a1ec:	4b42      	ldr	r3, [pc, #264]	@ (802a2f8 <_vfprintf_r+0x330>)
 802a1ee:	9319      	str	r3, [sp, #100]	@ 0x64
 802a1f0:	f015 0320 	ands.w	r3, r5, #32
 802a1f4:	f000 84c8 	beq.w	802ab88 <_vfprintf_r+0xbc0>
 802a1f8:	3607      	adds	r6, #7
 802a1fa:	f026 0307 	bic.w	r3, r6, #7
 802a1fe:	461a      	mov	r2, r3
 802a200:	685f      	ldr	r7, [r3, #4]
 802a202:	f852 6b08 	ldr.w	r6, [r2], #8
 802a206:	9207      	str	r2, [sp, #28]
 802a208:	07eb      	lsls	r3, r5, #31
 802a20a:	d50a      	bpl.n	802a222 <_vfprintf_r+0x25a>
 802a20c:	ea56 0307 	orrs.w	r3, r6, r7
 802a210:	d007      	beq.n	802a222 <_vfprintf_r+0x25a>
 802a212:	2330      	movs	r3, #48	@ 0x30
 802a214:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a218:	9b06      	ldr	r3, [sp, #24]
 802a21a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a21e:	f045 0502 	orr.w	r5, r5, #2
 802a222:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a226:	2302      	movs	r3, #2
 802a228:	f000 bc2e 	b.w	802aa88 <_vfprintf_r+0xac0>
 802a22c:	9803      	ldr	r0, [sp, #12]
 802a22e:	f003 fd65 	bl	802dcfc <_localeconv_r>
 802a232:	6843      	ldr	r3, [r0, #4]
 802a234:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a236:	4618      	mov	r0, r3
 802a238:	f7e6 f832 	bl	80102a0 <strlen>
 802a23c:	9012      	str	r0, [sp, #72]	@ 0x48
 802a23e:	9803      	ldr	r0, [sp, #12]
 802a240:	f003 fd5c 	bl	802dcfc <_localeconv_r>
 802a244:	6883      	ldr	r3, [r0, #8]
 802a246:	9309      	str	r3, [sp, #36]	@ 0x24
 802a248:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a24a:	b12b      	cbz	r3, 802a258 <_vfprintf_r+0x290>
 802a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a24e:	b11b      	cbz	r3, 802a258 <_vfprintf_r+0x290>
 802a250:	781b      	ldrb	r3, [r3, #0]
 802a252:	b10b      	cbz	r3, 802a258 <_vfprintf_r+0x290>
 802a254:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a25a:	e757      	b.n	802a10c <_vfprintf_r+0x144>
 802a25c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a260:	2b00      	cmp	r3, #0
 802a262:	d1f9      	bne.n	802a258 <_vfprintf_r+0x290>
 802a264:	2320      	movs	r3, #32
 802a266:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a26a:	e7f5      	b.n	802a258 <_vfprintf_r+0x290>
 802a26c:	f045 0501 	orr.w	r5, r5, #1
 802a270:	e7f2      	b.n	802a258 <_vfprintf_r+0x290>
 802a272:	f856 3b04 	ldr.w	r3, [r6], #4
 802a276:	930e      	str	r3, [sp, #56]	@ 0x38
 802a278:	2b00      	cmp	r3, #0
 802a27a:	daed      	bge.n	802a258 <_vfprintf_r+0x290>
 802a27c:	425b      	negs	r3, r3
 802a27e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a280:	f045 0504 	orr.w	r5, r5, #4
 802a284:	e7e8      	b.n	802a258 <_vfprintf_r+0x290>
 802a286:	232b      	movs	r3, #43	@ 0x2b
 802a288:	e7ed      	b.n	802a266 <_vfprintf_r+0x29e>
 802a28a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a28c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a290:	9206      	str	r2, [sp, #24]
 802a292:	2a2a      	cmp	r2, #42	@ 0x2a
 802a294:	d10f      	bne.n	802a2b6 <_vfprintf_r+0x2ee>
 802a296:	f856 2b04 	ldr.w	r2, [r6], #4
 802a29a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a29c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a2a0:	e7da      	b.n	802a258 <_vfprintf_r+0x290>
 802a2a2:	fb01 2909 	mla	r9, r1, r9, r2
 802a2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a2aa:	9206      	str	r2, [sp, #24]
 802a2ac:	9a06      	ldr	r2, [sp, #24]
 802a2ae:	3a30      	subs	r2, #48	@ 0x30
 802a2b0:	2a09      	cmp	r2, #9
 802a2b2:	d9f6      	bls.n	802a2a2 <_vfprintf_r+0x2da>
 802a2b4:	e72d      	b.n	802a112 <_vfprintf_r+0x14a>
 802a2b6:	f04f 0900 	mov.w	r9, #0
 802a2ba:	210a      	movs	r1, #10
 802a2bc:	e7f6      	b.n	802a2ac <_vfprintf_r+0x2e4>
 802a2be:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a2c2:	e7c9      	b.n	802a258 <_vfprintf_r+0x290>
 802a2c4:	2200      	movs	r2, #0
 802a2c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2ca:	210a      	movs	r1, #10
 802a2cc:	9a06      	ldr	r2, [sp, #24]
 802a2ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a2d0:	3a30      	subs	r2, #48	@ 0x30
 802a2d2:	fb01 2200 	mla	r2, r1, r0, r2
 802a2d6:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a2dc:	9206      	str	r2, [sp, #24]
 802a2de:	3a30      	subs	r2, #48	@ 0x30
 802a2e0:	2a09      	cmp	r2, #9
 802a2e2:	d9f3      	bls.n	802a2cc <_vfprintf_r+0x304>
 802a2e4:	e715      	b.n	802a112 <_vfprintf_r+0x14a>
 802a2e6:	f045 0508 	orr.w	r5, r5, #8
 802a2ea:	e7b5      	b.n	802a258 <_vfprintf_r+0x290>
 802a2ec:	f3af 8000 	nop.w
	...
 802a2f8:	0803bc8b 	.word	0x0803bc8b
 802a2fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2fe:	781b      	ldrb	r3, [r3, #0]
 802a300:	2b68      	cmp	r3, #104	@ 0x68
 802a302:	bf01      	itttt	eq
 802a304:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a306:	3301      	addeq	r3, #1
 802a308:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a30a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a30e:	bf18      	it	ne
 802a310:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a314:	e7a0      	b.n	802a258 <_vfprintf_r+0x290>
 802a316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a318:	781b      	ldrb	r3, [r3, #0]
 802a31a:	2b6c      	cmp	r3, #108	@ 0x6c
 802a31c:	d105      	bne.n	802a32a <_vfprintf_r+0x362>
 802a31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a320:	3301      	adds	r3, #1
 802a322:	930c      	str	r3, [sp, #48]	@ 0x30
 802a324:	f045 0520 	orr.w	r5, r5, #32
 802a328:	e796      	b.n	802a258 <_vfprintf_r+0x290>
 802a32a:	f045 0510 	orr.w	r5, r5, #16
 802a32e:	e793      	b.n	802a258 <_vfprintf_r+0x290>
 802a330:	4632      	mov	r2, r6
 802a332:	f852 3b04 	ldr.w	r3, [r2], #4
 802a336:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a33a:	2300      	movs	r3, #0
 802a33c:	9207      	str	r2, [sp, #28]
 802a33e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a342:	469a      	mov	sl, r3
 802a344:	f04f 0901 	mov.w	r9, #1
 802a348:	9310      	str	r3, [sp, #64]	@ 0x40
 802a34a:	461f      	mov	r7, r3
 802a34c:	9308      	str	r3, [sp, #32]
 802a34e:	461e      	mov	r6, r3
 802a350:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a354:	e1da      	b.n	802a70c <_vfprintf_r+0x744>
 802a356:	f045 0510 	orr.w	r5, r5, #16
 802a35a:	06af      	lsls	r7, r5, #26
 802a35c:	d512      	bpl.n	802a384 <_vfprintf_r+0x3bc>
 802a35e:	3607      	adds	r6, #7
 802a360:	f026 0307 	bic.w	r3, r6, #7
 802a364:	461a      	mov	r2, r3
 802a366:	685f      	ldr	r7, [r3, #4]
 802a368:	f852 6b08 	ldr.w	r6, [r2], #8
 802a36c:	9207      	str	r2, [sp, #28]
 802a36e:	2f00      	cmp	r7, #0
 802a370:	da06      	bge.n	802a380 <_vfprintf_r+0x3b8>
 802a372:	4276      	negs	r6, r6
 802a374:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a378:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a37c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a380:	2301      	movs	r3, #1
 802a382:	e384      	b.n	802aa8e <_vfprintf_r+0xac6>
 802a384:	4633      	mov	r3, r6
 802a386:	06ee      	lsls	r6, r5, #27
 802a388:	f853 7b04 	ldr.w	r7, [r3], #4
 802a38c:	9307      	str	r3, [sp, #28]
 802a38e:	d502      	bpl.n	802a396 <_vfprintf_r+0x3ce>
 802a390:	463e      	mov	r6, r7
 802a392:	17ff      	asrs	r7, r7, #31
 802a394:	e7eb      	b.n	802a36e <_vfprintf_r+0x3a6>
 802a396:	0668      	lsls	r0, r5, #25
 802a398:	d503      	bpl.n	802a3a2 <_vfprintf_r+0x3da>
 802a39a:	b23e      	sxth	r6, r7
 802a39c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a3a0:	e7e5      	b.n	802a36e <_vfprintf_r+0x3a6>
 802a3a2:	05a9      	lsls	r1, r5, #22
 802a3a4:	d5f4      	bpl.n	802a390 <_vfprintf_r+0x3c8>
 802a3a6:	b27e      	sxtb	r6, r7
 802a3a8:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a3ac:	e7df      	b.n	802a36e <_vfprintf_r+0x3a6>
 802a3ae:	3607      	adds	r6, #7
 802a3b0:	f026 0307 	bic.w	r3, r6, #7
 802a3b4:	ecb3 7b02 	vldmia	r3!, {d7}
 802a3b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a3bc:	9307      	str	r3, [sp, #28]
 802a3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a3c0:	931a      	str	r3, [sp, #104]	@ 0x68
 802a3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a3c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a3c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a3ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3ce:	4b85      	ldr	r3, [pc, #532]	@ (802a5e4 <_vfprintf_r+0x61c>)
 802a3d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3d4:	f7e6 fbc2 	bl	8010b5c <__aeabi_dcmpun>
 802a3d8:	bb10      	cbnz	r0, 802a420 <_vfprintf_r+0x458>
 802a3da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3de:	4b81      	ldr	r3, [pc, #516]	@ (802a5e4 <_vfprintf_r+0x61c>)
 802a3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3e4:	f7e6 fb9c 	bl	8010b20 <__aeabi_dcmple>
 802a3e8:	b9d0      	cbnz	r0, 802a420 <_vfprintf_r+0x458>
 802a3ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a3ee:	2200      	movs	r2, #0
 802a3f0:	2300      	movs	r3, #0
 802a3f2:	f7e6 fb8b 	bl	8010b0c <__aeabi_dcmplt>
 802a3f6:	b110      	cbz	r0, 802a3fe <_vfprintf_r+0x436>
 802a3f8:	232d      	movs	r3, #45	@ 0x2d
 802a3fa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a3fe:	4a7a      	ldr	r2, [pc, #488]	@ (802a5e8 <_vfprintf_r+0x620>)
 802a400:	4b7a      	ldr	r3, [pc, #488]	@ (802a5ec <_vfprintf_r+0x624>)
 802a402:	9906      	ldr	r1, [sp, #24]
 802a404:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a408:	2947      	cmp	r1, #71	@ 0x47
 802a40a:	bfd4      	ite	le
 802a40c:	4690      	movle	r8, r2
 802a40e:	4698      	movgt	r8, r3
 802a410:	f04f 0a00 	mov.w	sl, #0
 802a414:	f04f 0903 	mov.w	r9, #3
 802a418:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a41c:	f000 bff8 	b.w	802b410 <_vfprintf_r+0x1448>
 802a420:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a424:	4610      	mov	r0, r2
 802a426:	4619      	mov	r1, r3
 802a428:	f7e6 fb98 	bl	8010b5c <__aeabi_dcmpun>
 802a42c:	4682      	mov	sl, r0
 802a42e:	b140      	cbz	r0, 802a442 <_vfprintf_r+0x47a>
 802a430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a432:	4a6f      	ldr	r2, [pc, #444]	@ (802a5f0 <_vfprintf_r+0x628>)
 802a434:	2b00      	cmp	r3, #0
 802a436:	bfbc      	itt	lt
 802a438:	232d      	movlt	r3, #45	@ 0x2d
 802a43a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a43e:	4b6d      	ldr	r3, [pc, #436]	@ (802a5f4 <_vfprintf_r+0x62c>)
 802a440:	e7df      	b.n	802a402 <_vfprintf_r+0x43a>
 802a442:	9b06      	ldr	r3, [sp, #24]
 802a444:	2b61      	cmp	r3, #97	@ 0x61
 802a446:	d02e      	beq.n	802a4a6 <_vfprintf_r+0x4de>
 802a448:	2b41      	cmp	r3, #65	@ 0x41
 802a44a:	d12e      	bne.n	802a4aa <_vfprintf_r+0x4e2>
 802a44c:	2358      	movs	r3, #88	@ 0x58
 802a44e:	2230      	movs	r2, #48	@ 0x30
 802a450:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802a454:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a458:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a45c:	f045 0502 	orr.w	r5, r5, #2
 802a460:	f340 80ae 	ble.w	802a5c0 <_vfprintf_r+0x5f8>
 802a464:	9803      	ldr	r0, [sp, #12]
 802a466:	f109 0101 	add.w	r1, r9, #1
 802a46a:	f004 fd0f 	bl	802ee8c <_malloc_r>
 802a46e:	4680      	mov	r8, r0
 802a470:	2800      	cmp	r0, #0
 802a472:	f040 80aa 	bne.w	802a5ca <_vfprintf_r+0x602>
 802a476:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a47e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a482:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a486:	07d9      	lsls	r1, r3, #31
 802a488:	d407      	bmi.n	802a49a <_vfprintf_r+0x4d2>
 802a48a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a48e:	059a      	lsls	r2, r3, #22
 802a490:	d403      	bmi.n	802a49a <_vfprintf_r+0x4d2>
 802a492:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a496:	f003 fcde 	bl	802de56 <__retarget_lock_release_recursive>
 802a49a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a49e:	065b      	lsls	r3, r3, #25
 802a4a0:	f57f add6 	bpl.w	802a050 <_vfprintf_r+0x88>
 802a4a4:	e5d1      	b.n	802a04a <_vfprintf_r+0x82>
 802a4a6:	2378      	movs	r3, #120	@ 0x78
 802a4a8:	e7d1      	b.n	802a44e <_vfprintf_r+0x486>
 802a4aa:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a4ae:	f000 808e 	beq.w	802a5ce <_vfprintf_r+0x606>
 802a4b2:	9b06      	ldr	r3, [sp, #24]
 802a4b4:	f023 0320 	bic.w	r3, r3, #32
 802a4b8:	2b47      	cmp	r3, #71	@ 0x47
 802a4ba:	d105      	bne.n	802a4c8 <_vfprintf_r+0x500>
 802a4bc:	f1b9 0f00 	cmp.w	r9, #0
 802a4c0:	d102      	bne.n	802a4c8 <_vfprintf_r+0x500>
 802a4c2:	46ca      	mov	sl, r9
 802a4c4:	f04f 0901 	mov.w	r9, #1
 802a4c8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a4cc:	9311      	str	r3, [sp, #68]	@ 0x44
 802a4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4d0:	2b00      	cmp	r3, #0
 802a4d2:	da7f      	bge.n	802a5d4 <_vfprintf_r+0x60c>
 802a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a4d6:	9314      	str	r3, [sp, #80]	@ 0x50
 802a4d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a4de:	9315      	str	r3, [sp, #84]	@ 0x54
 802a4e0:	232d      	movs	r3, #45	@ 0x2d
 802a4e2:	931c      	str	r3, [sp, #112]	@ 0x70
 802a4e4:	9b06      	ldr	r3, [sp, #24]
 802a4e6:	f023 0320 	bic.w	r3, r3, #32
 802a4ea:	2b41      	cmp	r3, #65	@ 0x41
 802a4ec:	9308      	str	r3, [sp, #32]
 802a4ee:	f040 81e7 	bne.w	802a8c0 <_vfprintf_r+0x8f8>
 802a4f2:	a820      	add	r0, sp, #128	@ 0x80
 802a4f4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a4f8:	f003 fcd2 	bl	802dea0 <frexp>
 802a4fc:	2200      	movs	r2, #0
 802a4fe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a502:	ec51 0b10 	vmov	r0, r1, d0
 802a506:	f7e6 f88f 	bl	8010628 <__aeabi_dmul>
 802a50a:	4602      	mov	r2, r0
 802a50c:	460b      	mov	r3, r1
 802a50e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a512:	2200      	movs	r2, #0
 802a514:	2300      	movs	r3, #0
 802a516:	f7e6 faef 	bl	8010af8 <__aeabi_dcmpeq>
 802a51a:	b108      	cbz	r0, 802a520 <_vfprintf_r+0x558>
 802a51c:	2301      	movs	r3, #1
 802a51e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a520:	4a35      	ldr	r2, [pc, #212]	@ (802a5f8 <_vfprintf_r+0x630>)
 802a522:	4b36      	ldr	r3, [pc, #216]	@ (802a5fc <_vfprintf_r+0x634>)
 802a524:	9906      	ldr	r1, [sp, #24]
 802a526:	2961      	cmp	r1, #97	@ 0x61
 802a528:	bf18      	it	ne
 802a52a:	461a      	movne	r2, r3
 802a52c:	9210      	str	r2, [sp, #64]	@ 0x40
 802a52e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802a532:	4646      	mov	r6, r8
 802a534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a538:	4b31      	ldr	r3, [pc, #196]	@ (802a600 <_vfprintf_r+0x638>)
 802a53a:	2200      	movs	r2, #0
 802a53c:	f7e6 f874 	bl	8010628 <__aeabi_dmul>
 802a540:	4602      	mov	r2, r0
 802a542:	460b      	mov	r3, r1
 802a544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a548:	f7e6 fb1e 	bl	8010b88 <__aeabi_d2iz>
 802a54c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a54e:	f7e6 f801 	bl	8010554 <__aeabi_i2d>
 802a552:	4602      	mov	r2, r0
 802a554:	460b      	mov	r3, r1
 802a556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a55a:	f7e5 fead 	bl	80102b8 <__aeabi_dsub>
 802a55e:	4602      	mov	r2, r0
 802a560:	460b      	mov	r3, r1
 802a562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a56a:	5c9b      	ldrb	r3, [r3, r2]
 802a56c:	f806 3b01 	strb.w	r3, [r6], #1
 802a570:	1c7a      	adds	r2, r7, #1
 802a572:	d006      	beq.n	802a582 <_vfprintf_r+0x5ba>
 802a574:	1e7b      	subs	r3, r7, #1
 802a576:	931d      	str	r3, [sp, #116]	@ 0x74
 802a578:	2200      	movs	r2, #0
 802a57a:	2300      	movs	r3, #0
 802a57c:	f7e6 fabc 	bl	8010af8 <__aeabi_dcmpeq>
 802a580:	b370      	cbz	r0, 802a5e0 <_vfprintf_r+0x618>
 802a582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a586:	4b1f      	ldr	r3, [pc, #124]	@ (802a604 <_vfprintf_r+0x63c>)
 802a588:	2200      	movs	r2, #0
 802a58a:	f7e6 fadd 	bl	8010b48 <__aeabi_dcmpgt>
 802a58e:	2800      	cmp	r0, #0
 802a590:	d13a      	bne.n	802a608 <_vfprintf_r+0x640>
 802a592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a596:	4b1b      	ldr	r3, [pc, #108]	@ (802a604 <_vfprintf_r+0x63c>)
 802a598:	2200      	movs	r2, #0
 802a59a:	f7e6 faad 	bl	8010af8 <__aeabi_dcmpeq>
 802a59e:	b110      	cbz	r0, 802a5a6 <_vfprintf_r+0x5de>
 802a5a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a5a2:	07db      	lsls	r3, r3, #31
 802a5a4:	d430      	bmi.n	802a608 <_vfprintf_r+0x640>
 802a5a6:	4633      	mov	r3, r6
 802a5a8:	19f1      	adds	r1, r6, r7
 802a5aa:	2030      	movs	r0, #48	@ 0x30
 802a5ac:	1aca      	subs	r2, r1, r3
 802a5ae:	2a00      	cmp	r2, #0
 802a5b0:	f280 8183 	bge.w	802a8ba <_vfprintf_r+0x8f2>
 802a5b4:	1c7b      	adds	r3, r7, #1
 802a5b6:	3701      	adds	r7, #1
 802a5b8:	bfb8      	it	lt
 802a5ba:	2300      	movlt	r3, #0
 802a5bc:	441e      	add	r6, r3
 802a5be:	e037      	b.n	802a630 <_vfprintf_r+0x668>
 802a5c0:	f04f 0a00 	mov.w	sl, #0
 802a5c4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a5c8:	e77e      	b.n	802a4c8 <_vfprintf_r+0x500>
 802a5ca:	4682      	mov	sl, r0
 802a5cc:	e77c      	b.n	802a4c8 <_vfprintf_r+0x500>
 802a5ce:	f04f 0906 	mov.w	r9, #6
 802a5d2:	e779      	b.n	802a4c8 <_vfprintf_r+0x500>
 802a5d4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a5d8:	2300      	movs	r3, #0
 802a5da:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a5de:	e780      	b.n	802a4e2 <_vfprintf_r+0x51a>
 802a5e0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a5e2:	e7a7      	b.n	802a534 <_vfprintf_r+0x56c>
 802a5e4:	7fefffff 	.word	0x7fefffff
 802a5e8:	0803bc7b 	.word	0x0803bc7b
 802a5ec:	0803bc7f 	.word	0x0803bc7f
 802a5f0:	0803bc83 	.word	0x0803bc83
 802a5f4:	0803bc87 	.word	0x0803bc87
 802a5f8:	0803bc8b 	.word	0x0803bc8b
 802a5fc:	0803bc9c 	.word	0x0803bc9c
 802a600:	40300000 	.word	0x40300000
 802a604:	3fe00000 	.word	0x3fe00000
 802a608:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a60a:	9624      	str	r6, [sp, #144]	@ 0x90
 802a60c:	7bd9      	ldrb	r1, [r3, #15]
 802a60e:	2030      	movs	r0, #48	@ 0x30
 802a610:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a612:	1e53      	subs	r3, r2, #1
 802a614:	9324      	str	r3, [sp, #144]	@ 0x90
 802a616:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a61a:	428b      	cmp	r3, r1
 802a61c:	f000 814a 	beq.w	802a8b4 <_vfprintf_r+0x8ec>
 802a620:	2b39      	cmp	r3, #57	@ 0x39
 802a622:	bf0b      	itete	eq
 802a624:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a626:	3301      	addne	r3, #1
 802a628:	7a9b      	ldrbeq	r3, [r3, #10]
 802a62a:	b2db      	uxtbne	r3, r3
 802a62c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a630:	eba6 0308 	sub.w	r3, r6, r8
 802a634:	9304      	str	r3, [sp, #16]
 802a636:	9b08      	ldr	r3, [sp, #32]
 802a638:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a63a:	2b47      	cmp	r3, #71	@ 0x47
 802a63c:	f040 8189 	bne.w	802a952 <_vfprintf_r+0x98a>
 802a640:	1cf1      	adds	r1, r6, #3
 802a642:	db02      	blt.n	802a64a <_vfprintf_r+0x682>
 802a644:	45b1      	cmp	r9, r6
 802a646:	f280 81a7 	bge.w	802a998 <_vfprintf_r+0x9d0>
 802a64a:	9b06      	ldr	r3, [sp, #24]
 802a64c:	3b02      	subs	r3, #2
 802a64e:	9306      	str	r3, [sp, #24]
 802a650:	9906      	ldr	r1, [sp, #24]
 802a652:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a656:	f021 0120 	bic.w	r1, r1, #32
 802a65a:	2941      	cmp	r1, #65	@ 0x41
 802a65c:	bf08      	it	eq
 802a65e:	320f      	addeq	r2, #15
 802a660:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a664:	bf06      	itte	eq
 802a666:	b2d2      	uxtbeq	r2, r2
 802a668:	2101      	moveq	r1, #1
 802a66a:	2100      	movne	r1, #0
 802a66c:	2b00      	cmp	r3, #0
 802a66e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a670:	bfb8      	it	lt
 802a672:	f1c6 0301 	rsblt	r3, r6, #1
 802a676:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a67a:	bfb4      	ite	lt
 802a67c:	222d      	movlt	r2, #45	@ 0x2d
 802a67e:	222b      	movge	r2, #43	@ 0x2b
 802a680:	2b09      	cmp	r3, #9
 802a682:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a686:	f340 817a 	ble.w	802a97e <_vfprintf_r+0x9b6>
 802a68a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a68e:	270a      	movs	r7, #10
 802a690:	4602      	mov	r2, r0
 802a692:	fbb3 f6f7 	udiv	r6, r3, r7
 802a696:	fb07 3116 	mls	r1, r7, r6, r3
 802a69a:	3130      	adds	r1, #48	@ 0x30
 802a69c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a6a0:	4619      	mov	r1, r3
 802a6a2:	2963      	cmp	r1, #99	@ 0x63
 802a6a4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a6a8:	4633      	mov	r3, r6
 802a6aa:	dcf1      	bgt.n	802a690 <_vfprintf_r+0x6c8>
 802a6ac:	3330      	adds	r3, #48	@ 0x30
 802a6ae:	1e91      	subs	r1, r2, #2
 802a6b0:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a6b4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a6b8:	460b      	mov	r3, r1
 802a6ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a6be:	4283      	cmp	r3, r0
 802a6c0:	f0c0 8158 	bcc.w	802a974 <_vfprintf_r+0x9ac>
 802a6c4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a6c8:	1a9b      	subs	r3, r3, r2
 802a6ca:	4281      	cmp	r1, r0
 802a6cc:	bf88      	it	hi
 802a6ce:	2300      	movhi	r3, #0
 802a6d0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a6d4:	441a      	add	r2, r3
 802a6d6:	ab22      	add	r3, sp, #136	@ 0x88
 802a6d8:	1ad3      	subs	r3, r2, r3
 802a6da:	9a04      	ldr	r2, [sp, #16]
 802a6dc:	9318      	str	r3, [sp, #96]	@ 0x60
 802a6de:	2a01      	cmp	r2, #1
 802a6e0:	eb03 0902 	add.w	r9, r3, r2
 802a6e4:	dc01      	bgt.n	802a6ea <_vfprintf_r+0x722>
 802a6e6:	07ea      	lsls	r2, r5, #31
 802a6e8:	d501      	bpl.n	802a6ee <_vfprintf_r+0x726>
 802a6ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a6ec:	4499      	add	r9, r3
 802a6ee:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a6f2:	2700      	movs	r7, #0
 802a6f4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a6f8:	9311      	str	r3, [sp, #68]	@ 0x44
 802a6fa:	9708      	str	r7, [sp, #32]
 802a6fc:	463e      	mov	r6, r7
 802a6fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a700:	2b00      	cmp	r3, #0
 802a702:	f040 8191 	bne.w	802aa28 <_vfprintf_r+0xa60>
 802a706:	2300      	movs	r3, #0
 802a708:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a70a:	9310      	str	r3, [sp, #64]	@ 0x40
 802a70c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a70e:	454b      	cmp	r3, r9
 802a710:	bfb8      	it	lt
 802a712:	464b      	movlt	r3, r9
 802a714:	9311      	str	r3, [sp, #68]	@ 0x44
 802a716:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a71a:	b113      	cbz	r3, 802a722 <_vfprintf_r+0x75a>
 802a71c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a71e:	3301      	adds	r3, #1
 802a720:	9311      	str	r3, [sp, #68]	@ 0x44
 802a722:	f015 0302 	ands.w	r3, r5, #2
 802a726:	931c      	str	r3, [sp, #112]	@ 0x70
 802a728:	bf1e      	ittt	ne
 802a72a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a72c:	3302      	addne	r3, #2
 802a72e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a730:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a734:	931d      	str	r3, [sp, #116]	@ 0x74
 802a736:	d122      	bne.n	802a77e <_vfprintf_r+0x7b6>
 802a738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a73a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a73c:	1a9b      	subs	r3, r3, r2
 802a73e:	2b00      	cmp	r3, #0
 802a740:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a742:	dd1c      	ble.n	802a77e <_vfprintf_r+0x7b6>
 802a744:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a746:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a74a:	2810      	cmp	r0, #16
 802a74c:	489f      	ldr	r0, [pc, #636]	@ (802a9cc <_vfprintf_r+0xa04>)
 802a74e:	6020      	str	r0, [r4, #0]
 802a750:	f102 0201 	add.w	r2, r2, #1
 802a754:	f104 0108 	add.w	r1, r4, #8
 802a758:	f300 8297 	bgt.w	802ac8a <_vfprintf_r+0xcc2>
 802a75c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a75e:	6060      	str	r0, [r4, #4]
 802a760:	4403      	add	r3, r0
 802a762:	2a07      	cmp	r2, #7
 802a764:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a768:	f340 82a4 	ble.w	802acb4 <_vfprintf_r+0xcec>
 802a76c:	9803      	ldr	r0, [sp, #12]
 802a76e:	aa26      	add	r2, sp, #152	@ 0x98
 802a770:	4659      	mov	r1, fp
 802a772:	f000 fe95 	bl	802b4a0 <__sprint_r>
 802a776:	2800      	cmp	r0, #0
 802a778:	f040 85ed 	bne.w	802b356 <_vfprintf_r+0x138e>
 802a77c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a77e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a782:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a784:	b16a      	cbz	r2, 802a7a2 <_vfprintf_r+0x7da>
 802a786:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a78a:	6022      	str	r2, [r4, #0]
 802a78c:	2201      	movs	r2, #1
 802a78e:	4413      	add	r3, r2
 802a790:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a792:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a794:	6062      	str	r2, [r4, #4]
 802a796:	4413      	add	r3, r2
 802a798:	2b07      	cmp	r3, #7
 802a79a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a79c:	f300 828c 	bgt.w	802acb8 <_vfprintf_r+0xcf0>
 802a7a0:	3408      	adds	r4, #8
 802a7a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a7a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a7a6:	b162      	cbz	r2, 802a7c2 <_vfprintf_r+0x7fa>
 802a7a8:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a7aa:	6022      	str	r2, [r4, #0]
 802a7ac:	2202      	movs	r2, #2
 802a7ae:	4413      	add	r3, r2
 802a7b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a7b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7b4:	6062      	str	r2, [r4, #4]
 802a7b6:	3301      	adds	r3, #1
 802a7b8:	2b07      	cmp	r3, #7
 802a7ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a7bc:	f300 8286 	bgt.w	802accc <_vfprintf_r+0xd04>
 802a7c0:	3408      	adds	r4, #8
 802a7c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a7c4:	2b80      	cmp	r3, #128	@ 0x80
 802a7c6:	d122      	bne.n	802a80e <_vfprintf_r+0x846>
 802a7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a7ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a7cc:	1a9b      	subs	r3, r3, r2
 802a7ce:	2b00      	cmp	r3, #0
 802a7d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a7d2:	dd1c      	ble.n	802a80e <_vfprintf_r+0x846>
 802a7d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a7da:	2810      	cmp	r0, #16
 802a7dc:	487c      	ldr	r0, [pc, #496]	@ (802a9d0 <_vfprintf_r+0xa08>)
 802a7de:	6020      	str	r0, [r4, #0]
 802a7e0:	f102 0201 	add.w	r2, r2, #1
 802a7e4:	f104 0108 	add.w	r1, r4, #8
 802a7e8:	f300 827a 	bgt.w	802ace0 <_vfprintf_r+0xd18>
 802a7ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7ee:	6060      	str	r0, [r4, #4]
 802a7f0:	4403      	add	r3, r0
 802a7f2:	2a07      	cmp	r2, #7
 802a7f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a7f8:	f340 8287 	ble.w	802ad0a <_vfprintf_r+0xd42>
 802a7fc:	9803      	ldr	r0, [sp, #12]
 802a7fe:	aa26      	add	r2, sp, #152	@ 0x98
 802a800:	4659      	mov	r1, fp
 802a802:	f000 fe4d 	bl	802b4a0 <__sprint_r>
 802a806:	2800      	cmp	r0, #0
 802a808:	f040 85a5 	bne.w	802b356 <_vfprintf_r+0x138e>
 802a80c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a80e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a810:	eba3 0309 	sub.w	r3, r3, r9
 802a814:	2b00      	cmp	r3, #0
 802a816:	9310      	str	r3, [sp, #64]	@ 0x40
 802a818:	dd1c      	ble.n	802a854 <_vfprintf_r+0x88c>
 802a81a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a81c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a820:	2810      	cmp	r0, #16
 802a822:	486b      	ldr	r0, [pc, #428]	@ (802a9d0 <_vfprintf_r+0xa08>)
 802a824:	6020      	str	r0, [r4, #0]
 802a826:	f102 0201 	add.w	r2, r2, #1
 802a82a:	f104 0108 	add.w	r1, r4, #8
 802a82e:	f300 826e 	bgt.w	802ad0e <_vfprintf_r+0xd46>
 802a832:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a834:	6060      	str	r0, [r4, #4]
 802a836:	4403      	add	r3, r0
 802a838:	2a07      	cmp	r2, #7
 802a83a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a83e:	f340 827b 	ble.w	802ad38 <_vfprintf_r+0xd70>
 802a842:	9803      	ldr	r0, [sp, #12]
 802a844:	aa26      	add	r2, sp, #152	@ 0x98
 802a846:	4659      	mov	r1, fp
 802a848:	f000 fe2a 	bl	802b4a0 <__sprint_r>
 802a84c:	2800      	cmp	r0, #0
 802a84e:	f040 8582 	bne.w	802b356 <_vfprintf_r+0x138e>
 802a852:	ac29      	add	r4, sp, #164	@ 0xa4
 802a854:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a856:	9310      	str	r3, [sp, #64]	@ 0x40
 802a858:	05e8      	lsls	r0, r5, #23
 802a85a:	f100 8273 	bmi.w	802ad44 <_vfprintf_r+0xd7c>
 802a85e:	444b      	add	r3, r9
 802a860:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a862:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a864:	3301      	adds	r3, #1
 802a866:	2b07      	cmp	r3, #7
 802a868:	e9c4 8900 	strd	r8, r9, [r4]
 802a86c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a86e:	f300 82af 	bgt.w	802add0 <_vfprintf_r+0xe08>
 802a872:	3408      	adds	r4, #8
 802a874:	0768      	lsls	r0, r5, #29
 802a876:	f100 8550 	bmi.w	802b31a <_vfprintf_r+0x1352>
 802a87a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a87e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a880:	428a      	cmp	r2, r1
 802a882:	bfac      	ite	ge
 802a884:	189b      	addge	r3, r3, r2
 802a886:	185b      	addlt	r3, r3, r1
 802a888:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a88a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a88c:	b13b      	cbz	r3, 802a89e <_vfprintf_r+0x8d6>
 802a88e:	9803      	ldr	r0, [sp, #12]
 802a890:	aa26      	add	r2, sp, #152	@ 0x98
 802a892:	4659      	mov	r1, fp
 802a894:	f000 fe04 	bl	802b4a0 <__sprint_r>
 802a898:	2800      	cmp	r0, #0
 802a89a:	f040 855c 	bne.w	802b356 <_vfprintf_r+0x138e>
 802a89e:	2300      	movs	r3, #0
 802a8a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a8a2:	f1ba 0f00 	cmp.w	sl, #0
 802a8a6:	f040 8572 	bne.w	802b38e <_vfprintf_r+0x13c6>
 802a8aa:	9e07      	ldr	r6, [sp, #28]
 802a8ac:	ac29      	add	r4, sp, #164	@ 0xa4
 802a8ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802a8b2:	e407      	b.n	802a0c4 <_vfprintf_r+0xfc>
 802a8b4:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a8b8:	e6aa      	b.n	802a610 <_vfprintf_r+0x648>
 802a8ba:	f803 0b01 	strb.w	r0, [r3], #1
 802a8be:	e675      	b.n	802a5ac <_vfprintf_r+0x5e4>
 802a8c0:	9b08      	ldr	r3, [sp, #32]
 802a8c2:	2b46      	cmp	r3, #70	@ 0x46
 802a8c4:	d005      	beq.n	802a8d2 <_vfprintf_r+0x90a>
 802a8c6:	2b45      	cmp	r3, #69	@ 0x45
 802a8c8:	d11a      	bne.n	802a900 <_vfprintf_r+0x938>
 802a8ca:	f109 0601 	add.w	r6, r9, #1
 802a8ce:	2102      	movs	r1, #2
 802a8d0:	e001      	b.n	802a8d6 <_vfprintf_r+0x90e>
 802a8d2:	464e      	mov	r6, r9
 802a8d4:	2103      	movs	r1, #3
 802a8d6:	ab24      	add	r3, sp, #144	@ 0x90
 802a8d8:	9301      	str	r3, [sp, #4]
 802a8da:	ab21      	add	r3, sp, #132	@ 0x84
 802a8dc:	9300      	str	r3, [sp, #0]
 802a8de:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a8e2:	ab20      	add	r3, sp, #128	@ 0x80
 802a8e4:	9803      	ldr	r0, [sp, #12]
 802a8e6:	4632      	mov	r2, r6
 802a8e8:	f003 fbb6 	bl	802e058 <_dtoa_r>
 802a8ec:	9b08      	ldr	r3, [sp, #32]
 802a8ee:	2b47      	cmp	r3, #71	@ 0x47
 802a8f0:	4680      	mov	r8, r0
 802a8f2:	d119      	bne.n	802a928 <_vfprintf_r+0x960>
 802a8f4:	07e8      	lsls	r0, r5, #31
 802a8f6:	d405      	bmi.n	802a904 <_vfprintf_r+0x93c>
 802a8f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a8fa:	eba3 0308 	sub.w	r3, r3, r8
 802a8fe:	e699      	b.n	802a634 <_vfprintf_r+0x66c>
 802a900:	464e      	mov	r6, r9
 802a902:	e7e4      	b.n	802a8ce <_vfprintf_r+0x906>
 802a904:	eb08 0706 	add.w	r7, r8, r6
 802a908:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a90c:	2200      	movs	r2, #0
 802a90e:	2300      	movs	r3, #0
 802a910:	f7e6 f8f2 	bl	8010af8 <__aeabi_dcmpeq>
 802a914:	b100      	cbz	r0, 802a918 <_vfprintf_r+0x950>
 802a916:	9724      	str	r7, [sp, #144]	@ 0x90
 802a918:	2230      	movs	r2, #48	@ 0x30
 802a91a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a91c:	429f      	cmp	r7, r3
 802a91e:	d9eb      	bls.n	802a8f8 <_vfprintf_r+0x930>
 802a920:	1c59      	adds	r1, r3, #1
 802a922:	9124      	str	r1, [sp, #144]	@ 0x90
 802a924:	701a      	strb	r2, [r3, #0]
 802a926:	e7f8      	b.n	802a91a <_vfprintf_r+0x952>
 802a928:	9b08      	ldr	r3, [sp, #32]
 802a92a:	2b46      	cmp	r3, #70	@ 0x46
 802a92c:	eb00 0706 	add.w	r7, r0, r6
 802a930:	d1ea      	bne.n	802a908 <_vfprintf_r+0x940>
 802a932:	7803      	ldrb	r3, [r0, #0]
 802a934:	2b30      	cmp	r3, #48	@ 0x30
 802a936:	d109      	bne.n	802a94c <_vfprintf_r+0x984>
 802a938:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a93c:	2200      	movs	r2, #0
 802a93e:	2300      	movs	r3, #0
 802a940:	f7e6 f8da 	bl	8010af8 <__aeabi_dcmpeq>
 802a944:	b910      	cbnz	r0, 802a94c <_vfprintf_r+0x984>
 802a946:	f1c6 0601 	rsb	r6, r6, #1
 802a94a:	9620      	str	r6, [sp, #128]	@ 0x80
 802a94c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a94e:	441f      	add	r7, r3
 802a950:	e7da      	b.n	802a908 <_vfprintf_r+0x940>
 802a952:	9b08      	ldr	r3, [sp, #32]
 802a954:	2b46      	cmp	r3, #70	@ 0x46
 802a956:	f47f ae7b 	bne.w	802a650 <_vfprintf_r+0x688>
 802a95a:	f005 0301 	and.w	r3, r5, #1
 802a95e:	2e00      	cmp	r6, #0
 802a960:	ea43 0309 	orr.w	r3, r3, r9
 802a964:	dd25      	ble.n	802a9b2 <_vfprintf_r+0x9ea>
 802a966:	b37b      	cbz	r3, 802a9c8 <_vfprintf_r+0xa00>
 802a968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a96a:	18f3      	adds	r3, r6, r3
 802a96c:	4499      	add	r9, r3
 802a96e:	2366      	movs	r3, #102	@ 0x66
 802a970:	9306      	str	r3, [sp, #24]
 802a972:	e033      	b.n	802a9dc <_vfprintf_r+0xa14>
 802a974:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a978:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a97c:	e69f      	b.n	802a6be <_vfprintf_r+0x6f6>
 802a97e:	b941      	cbnz	r1, 802a992 <_vfprintf_r+0x9ca>
 802a980:	2230      	movs	r2, #48	@ 0x30
 802a982:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a986:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a98a:	3330      	adds	r3, #48	@ 0x30
 802a98c:	f802 3b01 	strb.w	r3, [r2], #1
 802a990:	e6a1      	b.n	802a6d6 <_vfprintf_r+0x70e>
 802a992:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a996:	e7f8      	b.n	802a98a <_vfprintf_r+0x9c2>
 802a998:	9b04      	ldr	r3, [sp, #16]
 802a99a:	42b3      	cmp	r3, r6
 802a99c:	dd0d      	ble.n	802a9ba <_vfprintf_r+0x9f2>
 802a99e:	9b04      	ldr	r3, [sp, #16]
 802a9a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a9a2:	2e00      	cmp	r6, #0
 802a9a4:	eb03 0902 	add.w	r9, r3, r2
 802a9a8:	dc0c      	bgt.n	802a9c4 <_vfprintf_r+0x9fc>
 802a9aa:	f1c6 0301 	rsb	r3, r6, #1
 802a9ae:	4499      	add	r9, r3
 802a9b0:	e008      	b.n	802a9c4 <_vfprintf_r+0x9fc>
 802a9b2:	b17b      	cbz	r3, 802a9d4 <_vfprintf_r+0xa0c>
 802a9b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a9b6:	3301      	adds	r3, #1
 802a9b8:	e7d8      	b.n	802a96c <_vfprintf_r+0x9a4>
 802a9ba:	07eb      	lsls	r3, r5, #31
 802a9bc:	d521      	bpl.n	802aa02 <_vfprintf_r+0xa3a>
 802a9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a9c0:	eb06 0903 	add.w	r9, r6, r3
 802a9c4:	2367      	movs	r3, #103	@ 0x67
 802a9c6:	e7d3      	b.n	802a970 <_vfprintf_r+0x9a8>
 802a9c8:	46b1      	mov	r9, r6
 802a9ca:	e7d0      	b.n	802a96e <_vfprintf_r+0x9a6>
 802a9cc:	0803bcbf 	.word	0x0803bcbf
 802a9d0:	0803bcaf 	.word	0x0803bcaf
 802a9d4:	2366      	movs	r3, #102	@ 0x66
 802a9d6:	9306      	str	r3, [sp, #24]
 802a9d8:	f04f 0901 	mov.w	r9, #1
 802a9dc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a9e0:	9308      	str	r3, [sp, #32]
 802a9e2:	d01f      	beq.n	802aa24 <_vfprintf_r+0xa5c>
 802a9e4:	2700      	movs	r7, #0
 802a9e6:	2e00      	cmp	r6, #0
 802a9e8:	9708      	str	r7, [sp, #32]
 802a9ea:	f77f ae88 	ble.w	802a6fe <_vfprintf_r+0x736>
 802a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9f0:	781b      	ldrb	r3, [r3, #0]
 802a9f2:	2bff      	cmp	r3, #255	@ 0xff
 802a9f4:	d107      	bne.n	802aa06 <_vfprintf_r+0xa3e>
 802a9f6:	9b08      	ldr	r3, [sp, #32]
 802a9f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a9fa:	443b      	add	r3, r7
 802a9fc:	fb02 9903 	mla	r9, r2, r3, r9
 802aa00:	e67d      	b.n	802a6fe <_vfprintf_r+0x736>
 802aa02:	46b1      	mov	r9, r6
 802aa04:	e7de      	b.n	802a9c4 <_vfprintf_r+0x9fc>
 802aa06:	42b3      	cmp	r3, r6
 802aa08:	daf5      	bge.n	802a9f6 <_vfprintf_r+0xa2e>
 802aa0a:	1af6      	subs	r6, r6, r3
 802aa0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aa0e:	785b      	ldrb	r3, [r3, #1]
 802aa10:	b133      	cbz	r3, 802aa20 <_vfprintf_r+0xa58>
 802aa12:	9b08      	ldr	r3, [sp, #32]
 802aa14:	3301      	adds	r3, #1
 802aa16:	9308      	str	r3, [sp, #32]
 802aa18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aa1a:	3301      	adds	r3, #1
 802aa1c:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa1e:	e7e6      	b.n	802a9ee <_vfprintf_r+0xa26>
 802aa20:	3701      	adds	r7, #1
 802aa22:	e7e4      	b.n	802a9ee <_vfprintf_r+0xa26>
 802aa24:	9f08      	ldr	r7, [sp, #32]
 802aa26:	e66a      	b.n	802a6fe <_vfprintf_r+0x736>
 802aa28:	232d      	movs	r3, #45	@ 0x2d
 802aa2a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa2e:	e66a      	b.n	802a706 <_vfprintf_r+0x73e>
 802aa30:	06af      	lsls	r7, r5, #26
 802aa32:	d507      	bpl.n	802aa44 <_vfprintf_r+0xa7c>
 802aa34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa36:	6833      	ldr	r3, [r6, #0]
 802aa38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802aa3a:	17d2      	asrs	r2, r2, #31
 802aa3c:	e9c3 1200 	strd	r1, r2, [r3]
 802aa40:	3604      	adds	r6, #4
 802aa42:	e734      	b.n	802a8ae <_vfprintf_r+0x8e6>
 802aa44:	06e8      	lsls	r0, r5, #27
 802aa46:	d503      	bpl.n	802aa50 <_vfprintf_r+0xa88>
 802aa48:	6833      	ldr	r3, [r6, #0]
 802aa4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa4c:	601a      	str	r2, [r3, #0]
 802aa4e:	e7f7      	b.n	802aa40 <_vfprintf_r+0xa78>
 802aa50:	0669      	lsls	r1, r5, #25
 802aa52:	d503      	bpl.n	802aa5c <_vfprintf_r+0xa94>
 802aa54:	6833      	ldr	r3, [r6, #0]
 802aa56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa58:	801a      	strh	r2, [r3, #0]
 802aa5a:	e7f1      	b.n	802aa40 <_vfprintf_r+0xa78>
 802aa5c:	05aa      	lsls	r2, r5, #22
 802aa5e:	d5f3      	bpl.n	802aa48 <_vfprintf_r+0xa80>
 802aa60:	6833      	ldr	r3, [r6, #0]
 802aa62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa64:	701a      	strb	r2, [r3, #0]
 802aa66:	e7eb      	b.n	802aa40 <_vfprintf_r+0xa78>
 802aa68:	f045 0510 	orr.w	r5, r5, #16
 802aa6c:	f015 0320 	ands.w	r3, r5, #32
 802aa70:	d020      	beq.n	802aab4 <_vfprintf_r+0xaec>
 802aa72:	3607      	adds	r6, #7
 802aa74:	f026 0307 	bic.w	r3, r6, #7
 802aa78:	461a      	mov	r2, r3
 802aa7a:	685f      	ldr	r7, [r3, #4]
 802aa7c:	f852 6b08 	ldr.w	r6, [r2], #8
 802aa80:	9207      	str	r2, [sp, #28]
 802aa82:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802aa86:	2300      	movs	r3, #0
 802aa88:	2200      	movs	r2, #0
 802aa8a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802aa8e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802aa92:	f000 8491 	beq.w	802b3b8 <_vfprintf_r+0x13f0>
 802aa96:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802aa9a:	9208      	str	r2, [sp, #32]
 802aa9c:	ea56 0207 	orrs.w	r2, r6, r7
 802aaa0:	f040 848f 	bne.w	802b3c2 <_vfprintf_r+0x13fa>
 802aaa4:	f1b9 0f00 	cmp.w	r9, #0
 802aaa8:	f000 80db 	beq.w	802ac62 <_vfprintf_r+0xc9a>
 802aaac:	2b01      	cmp	r3, #1
 802aaae:	f040 848b 	bne.w	802b3c8 <_vfprintf_r+0x1400>
 802aab2:	e083      	b.n	802abbc <_vfprintf_r+0xbf4>
 802aab4:	4632      	mov	r2, r6
 802aab6:	f015 0710 	ands.w	r7, r5, #16
 802aaba:	f852 6b04 	ldr.w	r6, [r2], #4
 802aabe:	9207      	str	r2, [sp, #28]
 802aac0:	d001      	beq.n	802aac6 <_vfprintf_r+0xafe>
 802aac2:	461f      	mov	r7, r3
 802aac4:	e7dd      	b.n	802aa82 <_vfprintf_r+0xaba>
 802aac6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aaca:	d001      	beq.n	802aad0 <_vfprintf_r+0xb08>
 802aacc:	b2b6      	uxth	r6, r6
 802aace:	e7d8      	b.n	802aa82 <_vfprintf_r+0xaba>
 802aad0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802aad4:	d0d5      	beq.n	802aa82 <_vfprintf_r+0xaba>
 802aad6:	b2f6      	uxtb	r6, r6
 802aad8:	e7f3      	b.n	802aac2 <_vfprintf_r+0xafa>
 802aada:	4633      	mov	r3, r6
 802aadc:	2278      	movs	r2, #120	@ 0x78
 802aade:	f853 6b04 	ldr.w	r6, [r3], #4
 802aae2:	9307      	str	r3, [sp, #28]
 802aae4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802aae8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802aaec:	4b93      	ldr	r3, [pc, #588]	@ (802ad3c <_vfprintf_r+0xd74>)
 802aaee:	9319      	str	r3, [sp, #100]	@ 0x64
 802aaf0:	2700      	movs	r7, #0
 802aaf2:	f045 0502 	orr.w	r5, r5, #2
 802aaf6:	2302      	movs	r3, #2
 802aaf8:	9206      	str	r2, [sp, #24]
 802aafa:	e7c5      	b.n	802aa88 <_vfprintf_r+0xac0>
 802aafc:	4633      	mov	r3, r6
 802aafe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802ab02:	f853 8b04 	ldr.w	r8, [r3], #4
 802ab06:	9307      	str	r3, [sp, #28]
 802ab08:	f04f 0600 	mov.w	r6, #0
 802ab0c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802ab10:	d00f      	beq.n	802ab32 <_vfprintf_r+0xb6a>
 802ab12:	464a      	mov	r2, r9
 802ab14:	4631      	mov	r1, r6
 802ab16:	4640      	mov	r0, r8
 802ab18:	f7e5 fb72 	bl	8010200 <memchr>
 802ab1c:	4682      	mov	sl, r0
 802ab1e:	2800      	cmp	r0, #0
 802ab20:	f43f ac7a 	beq.w	802a418 <_vfprintf_r+0x450>
 802ab24:	eba0 0908 	sub.w	r9, r0, r8
 802ab28:	46b2      	mov	sl, r6
 802ab2a:	9610      	str	r6, [sp, #64]	@ 0x40
 802ab2c:	4637      	mov	r7, r6
 802ab2e:	9608      	str	r6, [sp, #32]
 802ab30:	e5ec      	b.n	802a70c <_vfprintf_r+0x744>
 802ab32:	4640      	mov	r0, r8
 802ab34:	f7e5 fbb4 	bl	80102a0 <strlen>
 802ab38:	46b2      	mov	sl, r6
 802ab3a:	4681      	mov	r9, r0
 802ab3c:	e46c      	b.n	802a418 <_vfprintf_r+0x450>
 802ab3e:	f045 0510 	orr.w	r5, r5, #16
 802ab42:	f015 0320 	ands.w	r3, r5, #32
 802ab46:	d009      	beq.n	802ab5c <_vfprintf_r+0xb94>
 802ab48:	3607      	adds	r6, #7
 802ab4a:	f026 0307 	bic.w	r3, r6, #7
 802ab4e:	461a      	mov	r2, r3
 802ab50:	685f      	ldr	r7, [r3, #4]
 802ab52:	f852 6b08 	ldr.w	r6, [r2], #8
 802ab56:	9207      	str	r2, [sp, #28]
 802ab58:	2301      	movs	r3, #1
 802ab5a:	e795      	b.n	802aa88 <_vfprintf_r+0xac0>
 802ab5c:	4632      	mov	r2, r6
 802ab5e:	f015 0710 	ands.w	r7, r5, #16
 802ab62:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab66:	9207      	str	r2, [sp, #28]
 802ab68:	d001      	beq.n	802ab6e <_vfprintf_r+0xba6>
 802ab6a:	461f      	mov	r7, r3
 802ab6c:	e7f4      	b.n	802ab58 <_vfprintf_r+0xb90>
 802ab6e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ab72:	d001      	beq.n	802ab78 <_vfprintf_r+0xbb0>
 802ab74:	b2b6      	uxth	r6, r6
 802ab76:	e7ef      	b.n	802ab58 <_vfprintf_r+0xb90>
 802ab78:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ab7c:	d0ec      	beq.n	802ab58 <_vfprintf_r+0xb90>
 802ab7e:	b2f6      	uxtb	r6, r6
 802ab80:	e7f3      	b.n	802ab6a <_vfprintf_r+0xba2>
 802ab82:	4b6f      	ldr	r3, [pc, #444]	@ (802ad40 <_vfprintf_r+0xd78>)
 802ab84:	f7ff bb33 	b.w	802a1ee <_vfprintf_r+0x226>
 802ab88:	4632      	mov	r2, r6
 802ab8a:	f015 0710 	ands.w	r7, r5, #16
 802ab8e:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab92:	9207      	str	r2, [sp, #28]
 802ab94:	d002      	beq.n	802ab9c <_vfprintf_r+0xbd4>
 802ab96:	461f      	mov	r7, r3
 802ab98:	f7ff bb36 	b.w	802a208 <_vfprintf_r+0x240>
 802ab9c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aba0:	d002      	beq.n	802aba8 <_vfprintf_r+0xbe0>
 802aba2:	b2b6      	uxth	r6, r6
 802aba4:	f7ff bb30 	b.w	802a208 <_vfprintf_r+0x240>
 802aba8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802abac:	f43f ab2c 	beq.w	802a208 <_vfprintf_r+0x240>
 802abb0:	b2f6      	uxtb	r6, r6
 802abb2:	e7f0      	b.n	802ab96 <_vfprintf_r+0xbce>
 802abb4:	2e0a      	cmp	r6, #10
 802abb6:	f177 0300 	sbcs.w	r3, r7, #0
 802abba:	d207      	bcs.n	802abcc <_vfprintf_r+0xc04>
 802abbc:	3630      	adds	r6, #48	@ 0x30
 802abbe:	b2f6      	uxtb	r6, r6
 802abc0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802abc4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802abc8:	f000 bc1a 	b.w	802b400 <_vfprintf_r+0x1438>
 802abcc:	2300      	movs	r3, #0
 802abce:	9304      	str	r3, [sp, #16]
 802abd0:	9b08      	ldr	r3, [sp, #32]
 802abd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802abd6:	ad52      	add	r5, sp, #328	@ 0x148
 802abd8:	9310      	str	r3, [sp, #64]	@ 0x40
 802abda:	220a      	movs	r2, #10
 802abdc:	2300      	movs	r3, #0
 802abde:	4630      	mov	r0, r6
 802abe0:	4639      	mov	r1, r7
 802abe2:	f7e6 f8b9 	bl	8010d58 <__aeabi_uldivmod>
 802abe6:	9b04      	ldr	r3, [sp, #16]
 802abe8:	9011      	str	r0, [sp, #68]	@ 0x44
 802abea:	3301      	adds	r3, #1
 802abec:	9304      	str	r3, [sp, #16]
 802abee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abf0:	3230      	adds	r2, #48	@ 0x30
 802abf2:	468a      	mov	sl, r1
 802abf4:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802abf8:	f805 2c01 	strb.w	r2, [r5, #-1]
 802abfc:	b1d3      	cbz	r3, 802ac34 <_vfprintf_r+0xc6c>
 802abfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac00:	9a04      	ldr	r2, [sp, #16]
 802ac02:	781b      	ldrb	r3, [r3, #0]
 802ac04:	429a      	cmp	r2, r3
 802ac06:	d115      	bne.n	802ac34 <_vfprintf_r+0xc6c>
 802ac08:	2aff      	cmp	r2, #255	@ 0xff
 802ac0a:	d013      	beq.n	802ac34 <_vfprintf_r+0xc6c>
 802ac0c:	2e0a      	cmp	r6, #10
 802ac0e:	f177 0300 	sbcs.w	r3, r7, #0
 802ac12:	d30f      	bcc.n	802ac34 <_vfprintf_r+0xc6c>
 802ac14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ac16:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802ac18:	eba8 0803 	sub.w	r8, r8, r3
 802ac1c:	461a      	mov	r2, r3
 802ac1e:	4640      	mov	r0, r8
 802ac20:	f001 ff25 	bl	802ca6e <strncpy>
 802ac24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac26:	785b      	ldrb	r3, [r3, #1]
 802ac28:	b11b      	cbz	r3, 802ac32 <_vfprintf_r+0xc6a>
 802ac2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac2c:	3301      	adds	r3, #1
 802ac2e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ac30:	2300      	movs	r3, #0
 802ac32:	9304      	str	r3, [sp, #16]
 802ac34:	2e0a      	cmp	r6, #10
 802ac36:	f177 0700 	sbcs.w	r7, r7, #0
 802ac3a:	f0c0 83e1 	bcc.w	802b400 <_vfprintf_r+0x1438>
 802ac3e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802ac40:	4657      	mov	r7, sl
 802ac42:	4645      	mov	r5, r8
 802ac44:	e7c9      	b.n	802abda <_vfprintf_r+0xc12>
 802ac46:	f006 030f 	and.w	r3, r6, #15
 802ac4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802ac4c:	0936      	lsrs	r6, r6, #4
 802ac4e:	5cd3      	ldrb	r3, [r2, r3]
 802ac50:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ac54:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802ac58:	093f      	lsrs	r7, r7, #4
 802ac5a:	ea56 0307 	orrs.w	r3, r6, r7
 802ac5e:	d1f2      	bne.n	802ac46 <_vfprintf_r+0xc7e>
 802ac60:	e3ce      	b.n	802b400 <_vfprintf_r+0x1438>
 802ac62:	b91b      	cbnz	r3, 802ac6c <_vfprintf_r+0xca4>
 802ac64:	07ed      	lsls	r5, r5, #31
 802ac66:	d501      	bpl.n	802ac6c <_vfprintf_r+0xca4>
 802ac68:	2630      	movs	r6, #48	@ 0x30
 802ac6a:	e7a9      	b.n	802abc0 <_vfprintf_r+0xbf8>
 802ac6c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802ac70:	e3c6      	b.n	802b400 <_vfprintf_r+0x1438>
 802ac72:	9b06      	ldr	r3, [sp, #24]
 802ac74:	2b00      	cmp	r3, #0
 802ac76:	f000 8390 	beq.w	802b39a <_vfprintf_r+0x13d2>
 802ac7a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802ac7e:	2300      	movs	r3, #0
 802ac80:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ac84:	9607      	str	r6, [sp, #28]
 802ac86:	f7ff bb5c 	b.w	802a342 <_vfprintf_r+0x37a>
 802ac8a:	2010      	movs	r0, #16
 802ac8c:	4403      	add	r3, r0
 802ac8e:	2a07      	cmp	r2, #7
 802ac90:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ac94:	6060      	str	r0, [r4, #4]
 802ac96:	dd08      	ble.n	802acaa <_vfprintf_r+0xce2>
 802ac98:	9803      	ldr	r0, [sp, #12]
 802ac9a:	aa26      	add	r2, sp, #152	@ 0x98
 802ac9c:	4659      	mov	r1, fp
 802ac9e:	f000 fbff 	bl	802b4a0 <__sprint_r>
 802aca2:	2800      	cmp	r0, #0
 802aca4:	f040 8357 	bne.w	802b356 <_vfprintf_r+0x138e>
 802aca8:	a929      	add	r1, sp, #164	@ 0xa4
 802acaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802acac:	3b10      	subs	r3, #16
 802acae:	9313      	str	r3, [sp, #76]	@ 0x4c
 802acb0:	460c      	mov	r4, r1
 802acb2:	e547      	b.n	802a744 <_vfprintf_r+0x77c>
 802acb4:	460c      	mov	r4, r1
 802acb6:	e562      	b.n	802a77e <_vfprintf_r+0x7b6>
 802acb8:	9803      	ldr	r0, [sp, #12]
 802acba:	aa26      	add	r2, sp, #152	@ 0x98
 802acbc:	4659      	mov	r1, fp
 802acbe:	f000 fbef 	bl	802b4a0 <__sprint_r>
 802acc2:	2800      	cmp	r0, #0
 802acc4:	f040 8347 	bne.w	802b356 <_vfprintf_r+0x138e>
 802acc8:	ac29      	add	r4, sp, #164	@ 0xa4
 802acca:	e56a      	b.n	802a7a2 <_vfprintf_r+0x7da>
 802accc:	9803      	ldr	r0, [sp, #12]
 802acce:	aa26      	add	r2, sp, #152	@ 0x98
 802acd0:	4659      	mov	r1, fp
 802acd2:	f000 fbe5 	bl	802b4a0 <__sprint_r>
 802acd6:	2800      	cmp	r0, #0
 802acd8:	f040 833d 	bne.w	802b356 <_vfprintf_r+0x138e>
 802acdc:	ac29      	add	r4, sp, #164	@ 0xa4
 802acde:	e570      	b.n	802a7c2 <_vfprintf_r+0x7fa>
 802ace0:	2010      	movs	r0, #16
 802ace2:	4403      	add	r3, r0
 802ace4:	2a07      	cmp	r2, #7
 802ace6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802acea:	6060      	str	r0, [r4, #4]
 802acec:	dd08      	ble.n	802ad00 <_vfprintf_r+0xd38>
 802acee:	9803      	ldr	r0, [sp, #12]
 802acf0:	aa26      	add	r2, sp, #152	@ 0x98
 802acf2:	4659      	mov	r1, fp
 802acf4:	f000 fbd4 	bl	802b4a0 <__sprint_r>
 802acf8:	2800      	cmp	r0, #0
 802acfa:	f040 832c 	bne.w	802b356 <_vfprintf_r+0x138e>
 802acfe:	a929      	add	r1, sp, #164	@ 0xa4
 802ad00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ad02:	3b10      	subs	r3, #16
 802ad04:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ad06:	460c      	mov	r4, r1
 802ad08:	e564      	b.n	802a7d4 <_vfprintf_r+0x80c>
 802ad0a:	460c      	mov	r4, r1
 802ad0c:	e57f      	b.n	802a80e <_vfprintf_r+0x846>
 802ad0e:	2010      	movs	r0, #16
 802ad10:	4403      	add	r3, r0
 802ad12:	2a07      	cmp	r2, #7
 802ad14:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ad18:	6060      	str	r0, [r4, #4]
 802ad1a:	dd08      	ble.n	802ad2e <_vfprintf_r+0xd66>
 802ad1c:	9803      	ldr	r0, [sp, #12]
 802ad1e:	aa26      	add	r2, sp, #152	@ 0x98
 802ad20:	4659      	mov	r1, fp
 802ad22:	f000 fbbd 	bl	802b4a0 <__sprint_r>
 802ad26:	2800      	cmp	r0, #0
 802ad28:	f040 8315 	bne.w	802b356 <_vfprintf_r+0x138e>
 802ad2c:	a929      	add	r1, sp, #164	@ 0xa4
 802ad2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad30:	3b10      	subs	r3, #16
 802ad32:	9310      	str	r3, [sp, #64]	@ 0x40
 802ad34:	460c      	mov	r4, r1
 802ad36:	e570      	b.n	802a81a <_vfprintf_r+0x852>
 802ad38:	460c      	mov	r4, r1
 802ad3a:	e58b      	b.n	802a854 <_vfprintf_r+0x88c>
 802ad3c:	0803bc8b 	.word	0x0803bc8b
 802ad40:	0803bc9c 	.word	0x0803bc9c
 802ad44:	9b06      	ldr	r3, [sp, #24]
 802ad46:	2b65      	cmp	r3, #101	@ 0x65
 802ad48:	f340 8245 	ble.w	802b1d6 <_vfprintf_r+0x120e>
 802ad4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802ad50:	2200      	movs	r2, #0
 802ad52:	2300      	movs	r3, #0
 802ad54:	f7e5 fed0 	bl	8010af8 <__aeabi_dcmpeq>
 802ad58:	2800      	cmp	r0, #0
 802ad5a:	d06a      	beq.n	802ae32 <_vfprintf_r+0xe6a>
 802ad5c:	4b73      	ldr	r3, [pc, #460]	@ (802af2c <_vfprintf_r+0xf64>)
 802ad5e:	6023      	str	r3, [r4, #0]
 802ad60:	2301      	movs	r3, #1
 802ad62:	6063      	str	r3, [r4, #4]
 802ad64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad66:	3301      	adds	r3, #1
 802ad68:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad6c:	3301      	adds	r3, #1
 802ad6e:	2b07      	cmp	r3, #7
 802ad70:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad72:	dc37      	bgt.n	802ade4 <_vfprintf_r+0xe1c>
 802ad74:	3408      	adds	r4, #8
 802ad76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ad78:	9a04      	ldr	r2, [sp, #16]
 802ad7a:	4293      	cmp	r3, r2
 802ad7c:	db02      	blt.n	802ad84 <_vfprintf_r+0xdbc>
 802ad7e:	07e9      	lsls	r1, r5, #31
 802ad80:	f57f ad78 	bpl.w	802a874 <_vfprintf_r+0x8ac>
 802ad84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad86:	6023      	str	r3, [r4, #0]
 802ad88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ad8c:	6063      	str	r3, [r4, #4]
 802ad8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad90:	4413      	add	r3, r2
 802ad92:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad94:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad96:	3301      	adds	r3, #1
 802ad98:	2b07      	cmp	r3, #7
 802ad9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad9c:	dc2c      	bgt.n	802adf8 <_vfprintf_r+0xe30>
 802ad9e:	3408      	adds	r4, #8
 802ada0:	9b04      	ldr	r3, [sp, #16]
 802ada2:	1e5e      	subs	r6, r3, #1
 802ada4:	2e00      	cmp	r6, #0
 802ada6:	f77f ad65 	ble.w	802a874 <_vfprintf_r+0x8ac>
 802adaa:	4f61      	ldr	r7, [pc, #388]	@ (802af30 <_vfprintf_r+0xf68>)
 802adac:	f04f 0810 	mov.w	r8, #16
 802adb0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802adb4:	2e10      	cmp	r6, #16
 802adb6:	f103 0301 	add.w	r3, r3, #1
 802adba:	f104 0108 	add.w	r1, r4, #8
 802adbe:	6027      	str	r7, [r4, #0]
 802adc0:	dc24      	bgt.n	802ae0c <_vfprintf_r+0xe44>
 802adc2:	6066      	str	r6, [r4, #4]
 802adc4:	2b07      	cmp	r3, #7
 802adc6:	4416      	add	r6, r2
 802adc8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802adcc:	f340 82a2 	ble.w	802b314 <_vfprintf_r+0x134c>
 802add0:	9803      	ldr	r0, [sp, #12]
 802add2:	aa26      	add	r2, sp, #152	@ 0x98
 802add4:	4659      	mov	r1, fp
 802add6:	f000 fb63 	bl	802b4a0 <__sprint_r>
 802adda:	2800      	cmp	r0, #0
 802addc:	f040 82bb 	bne.w	802b356 <_vfprintf_r+0x138e>
 802ade0:	ac29      	add	r4, sp, #164	@ 0xa4
 802ade2:	e547      	b.n	802a874 <_vfprintf_r+0x8ac>
 802ade4:	9803      	ldr	r0, [sp, #12]
 802ade6:	aa26      	add	r2, sp, #152	@ 0x98
 802ade8:	4659      	mov	r1, fp
 802adea:	f000 fb59 	bl	802b4a0 <__sprint_r>
 802adee:	2800      	cmp	r0, #0
 802adf0:	f040 82b1 	bne.w	802b356 <_vfprintf_r+0x138e>
 802adf4:	ac29      	add	r4, sp, #164	@ 0xa4
 802adf6:	e7be      	b.n	802ad76 <_vfprintf_r+0xdae>
 802adf8:	9803      	ldr	r0, [sp, #12]
 802adfa:	aa26      	add	r2, sp, #152	@ 0x98
 802adfc:	4659      	mov	r1, fp
 802adfe:	f000 fb4f 	bl	802b4a0 <__sprint_r>
 802ae02:	2800      	cmp	r0, #0
 802ae04:	f040 82a7 	bne.w	802b356 <_vfprintf_r+0x138e>
 802ae08:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae0a:	e7c9      	b.n	802ada0 <_vfprintf_r+0xdd8>
 802ae0c:	3210      	adds	r2, #16
 802ae0e:	2b07      	cmp	r3, #7
 802ae10:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ae14:	f8c4 8004 	str.w	r8, [r4, #4]
 802ae18:	dd08      	ble.n	802ae2c <_vfprintf_r+0xe64>
 802ae1a:	9803      	ldr	r0, [sp, #12]
 802ae1c:	aa26      	add	r2, sp, #152	@ 0x98
 802ae1e:	4659      	mov	r1, fp
 802ae20:	f000 fb3e 	bl	802b4a0 <__sprint_r>
 802ae24:	2800      	cmp	r0, #0
 802ae26:	f040 8296 	bne.w	802b356 <_vfprintf_r+0x138e>
 802ae2a:	a929      	add	r1, sp, #164	@ 0xa4
 802ae2c:	3e10      	subs	r6, #16
 802ae2e:	460c      	mov	r4, r1
 802ae30:	e7be      	b.n	802adb0 <_vfprintf_r+0xde8>
 802ae32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae34:	2b00      	cmp	r3, #0
 802ae36:	dc7d      	bgt.n	802af34 <_vfprintf_r+0xf6c>
 802ae38:	4b3c      	ldr	r3, [pc, #240]	@ (802af2c <_vfprintf_r+0xf64>)
 802ae3a:	6023      	str	r3, [r4, #0]
 802ae3c:	2301      	movs	r3, #1
 802ae3e:	6063      	str	r3, [r4, #4]
 802ae40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae42:	3301      	adds	r3, #1
 802ae44:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae46:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae48:	3301      	adds	r3, #1
 802ae4a:	2b07      	cmp	r3, #7
 802ae4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae4e:	dc46      	bgt.n	802aede <_vfprintf_r+0xf16>
 802ae50:	3408      	adds	r4, #8
 802ae52:	9904      	ldr	r1, [sp, #16]
 802ae54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ae58:	430b      	orrs	r3, r1
 802ae5a:	f005 0101 	and.w	r1, r5, #1
 802ae5e:	430b      	orrs	r3, r1
 802ae60:	f43f ad08 	beq.w	802a874 <_vfprintf_r+0x8ac>
 802ae64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ae66:	6023      	str	r3, [r4, #0]
 802ae68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ae6a:	6063      	str	r3, [r4, #4]
 802ae6c:	441a      	add	r2, r3
 802ae6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae70:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ae72:	3301      	adds	r3, #1
 802ae74:	2b07      	cmp	r3, #7
 802ae76:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae78:	dc3b      	bgt.n	802aef2 <_vfprintf_r+0xf2a>
 802ae7a:	f104 0308 	add.w	r3, r4, #8
 802ae7e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ae80:	2e00      	cmp	r6, #0
 802ae82:	da1b      	bge.n	802aebc <_vfprintf_r+0xef4>
 802ae84:	4f2a      	ldr	r7, [pc, #168]	@ (802af30 <_vfprintf_r+0xf68>)
 802ae86:	4276      	negs	r6, r6
 802ae88:	461a      	mov	r2, r3
 802ae8a:	2410      	movs	r4, #16
 802ae8c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ae90:	2e10      	cmp	r6, #16
 802ae92:	f101 0101 	add.w	r1, r1, #1
 802ae96:	f103 0308 	add.w	r3, r3, #8
 802ae9a:	6017      	str	r7, [r2, #0]
 802ae9c:	dc33      	bgt.n	802af06 <_vfprintf_r+0xf3e>
 802ae9e:	6056      	str	r6, [r2, #4]
 802aea0:	2907      	cmp	r1, #7
 802aea2:	4406      	add	r6, r0
 802aea4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802aea8:	dd08      	ble.n	802aebc <_vfprintf_r+0xef4>
 802aeaa:	9803      	ldr	r0, [sp, #12]
 802aeac:	aa26      	add	r2, sp, #152	@ 0x98
 802aeae:	4659      	mov	r1, fp
 802aeb0:	f000 faf6 	bl	802b4a0 <__sprint_r>
 802aeb4:	2800      	cmp	r0, #0
 802aeb6:	f040 824e 	bne.w	802b356 <_vfprintf_r+0x138e>
 802aeba:	ab29      	add	r3, sp, #164	@ 0xa4
 802aebc:	9a04      	ldr	r2, [sp, #16]
 802aebe:	9904      	ldr	r1, [sp, #16]
 802aec0:	605a      	str	r2, [r3, #4]
 802aec2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802aec4:	f8c3 8000 	str.w	r8, [r3]
 802aec8:	440a      	add	r2, r1
 802aeca:	9228      	str	r2, [sp, #160]	@ 0xa0
 802aecc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802aece:	3201      	adds	r2, #1
 802aed0:	2a07      	cmp	r2, #7
 802aed2:	9227      	str	r2, [sp, #156]	@ 0x9c
 802aed4:	f73f af7c 	bgt.w	802add0 <_vfprintf_r+0xe08>
 802aed8:	f103 0408 	add.w	r4, r3, #8
 802aedc:	e4ca      	b.n	802a874 <_vfprintf_r+0x8ac>
 802aede:	9803      	ldr	r0, [sp, #12]
 802aee0:	aa26      	add	r2, sp, #152	@ 0x98
 802aee2:	4659      	mov	r1, fp
 802aee4:	f000 fadc 	bl	802b4a0 <__sprint_r>
 802aee8:	2800      	cmp	r0, #0
 802aeea:	f040 8234 	bne.w	802b356 <_vfprintf_r+0x138e>
 802aeee:	ac29      	add	r4, sp, #164	@ 0xa4
 802aef0:	e7af      	b.n	802ae52 <_vfprintf_r+0xe8a>
 802aef2:	9803      	ldr	r0, [sp, #12]
 802aef4:	aa26      	add	r2, sp, #152	@ 0x98
 802aef6:	4659      	mov	r1, fp
 802aef8:	f000 fad2 	bl	802b4a0 <__sprint_r>
 802aefc:	2800      	cmp	r0, #0
 802aefe:	f040 822a 	bne.w	802b356 <_vfprintf_r+0x138e>
 802af02:	ab29      	add	r3, sp, #164	@ 0xa4
 802af04:	e7bb      	b.n	802ae7e <_vfprintf_r+0xeb6>
 802af06:	3010      	adds	r0, #16
 802af08:	2907      	cmp	r1, #7
 802af0a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802af0e:	6054      	str	r4, [r2, #4]
 802af10:	dd08      	ble.n	802af24 <_vfprintf_r+0xf5c>
 802af12:	9803      	ldr	r0, [sp, #12]
 802af14:	aa26      	add	r2, sp, #152	@ 0x98
 802af16:	4659      	mov	r1, fp
 802af18:	f000 fac2 	bl	802b4a0 <__sprint_r>
 802af1c:	2800      	cmp	r0, #0
 802af1e:	f040 821a 	bne.w	802b356 <_vfprintf_r+0x138e>
 802af22:	ab29      	add	r3, sp, #164	@ 0xa4
 802af24:	3e10      	subs	r6, #16
 802af26:	461a      	mov	r2, r3
 802af28:	e7b0      	b.n	802ae8c <_vfprintf_r+0xec4>
 802af2a:	bf00      	nop
 802af2c:	0803bcad 	.word	0x0803bcad
 802af30:	0803bcaf 	.word	0x0803bcaf
 802af34:	9b04      	ldr	r3, [sp, #16]
 802af36:	4443      	add	r3, r8
 802af38:	9313      	str	r3, [sp, #76]	@ 0x4c
 802af3a:	9b04      	ldr	r3, [sp, #16]
 802af3c:	42b3      	cmp	r3, r6
 802af3e:	bfa8      	it	ge
 802af40:	4633      	movge	r3, r6
 802af42:	2b00      	cmp	r3, #0
 802af44:	4699      	mov	r9, r3
 802af46:	dd0b      	ble.n	802af60 <_vfprintf_r+0xf98>
 802af48:	e9c4 8300 	strd	r8, r3, [r4]
 802af4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802af4e:	444b      	add	r3, r9
 802af50:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af54:	3301      	adds	r3, #1
 802af56:	2b07      	cmp	r3, #7
 802af58:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af5a:	f300 8089 	bgt.w	802b070 <_vfprintf_r+0x10a8>
 802af5e:	3408      	adds	r4, #8
 802af60:	f1b9 0f00 	cmp.w	r9, #0
 802af64:	bfac      	ite	ge
 802af66:	eba6 0309 	subge.w	r3, r6, r9
 802af6a:	4633      	movlt	r3, r6
 802af6c:	2b00      	cmp	r3, #0
 802af6e:	9306      	str	r3, [sp, #24]
 802af70:	dd1c      	ble.n	802afac <_vfprintf_r+0xfe4>
 802af72:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b2d8 <_vfprintf_r+0x1310>
 802af76:	9806      	ldr	r0, [sp, #24]
 802af78:	f8c4 9000 	str.w	r9, [r4]
 802af7c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802af80:	2810      	cmp	r0, #16
 802af82:	f102 0201 	add.w	r2, r2, #1
 802af86:	f104 0108 	add.w	r1, r4, #8
 802af8a:	dc7b      	bgt.n	802b084 <_vfprintf_r+0x10bc>
 802af8c:	4403      	add	r3, r0
 802af8e:	2a07      	cmp	r2, #7
 802af90:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af94:	6060      	str	r0, [r4, #4]
 802af96:	f340 808a 	ble.w	802b0ae <_vfprintf_r+0x10e6>
 802af9a:	9803      	ldr	r0, [sp, #12]
 802af9c:	aa26      	add	r2, sp, #152	@ 0x98
 802af9e:	4659      	mov	r1, fp
 802afa0:	f000 fa7e 	bl	802b4a0 <__sprint_r>
 802afa4:	2800      	cmp	r0, #0
 802afa6:	f040 81d6 	bne.w	802b356 <_vfprintf_r+0x138e>
 802afaa:	ac29      	add	r4, sp, #164	@ 0xa4
 802afac:	056a      	lsls	r2, r5, #21
 802afae:	44b0      	add	r8, r6
 802afb0:	d508      	bpl.n	802afc4 <_vfprintf_r+0xffc>
 802afb2:	9b08      	ldr	r3, [sp, #32]
 802afb4:	2b00      	cmp	r3, #0
 802afb6:	d17c      	bne.n	802b0b2 <_vfprintf_r+0x10ea>
 802afb8:	2f00      	cmp	r7, #0
 802afba:	d17c      	bne.n	802b0b6 <_vfprintf_r+0x10ee>
 802afbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802afbe:	4598      	cmp	r8, r3
 802afc0:	bf28      	it	cs
 802afc2:	4698      	movcs	r8, r3
 802afc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802afc6:	9a04      	ldr	r2, [sp, #16]
 802afc8:	4293      	cmp	r3, r2
 802afca:	db01      	blt.n	802afd0 <_vfprintf_r+0x1008>
 802afcc:	07eb      	lsls	r3, r5, #31
 802afce:	d50e      	bpl.n	802afee <_vfprintf_r+0x1026>
 802afd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802afd2:	6023      	str	r3, [r4, #0]
 802afd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802afd6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802afd8:	6063      	str	r3, [r4, #4]
 802afda:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802afdc:	4413      	add	r3, r2
 802afde:	9328      	str	r3, [sp, #160]	@ 0xa0
 802afe0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802afe2:	3301      	adds	r3, #1
 802afe4:	2b07      	cmp	r3, #7
 802afe6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802afe8:	f300 80e1 	bgt.w	802b1ae <_vfprintf_r+0x11e6>
 802afec:	3408      	adds	r4, #8
 802afee:	9b04      	ldr	r3, [sp, #16]
 802aff0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802aff2:	1bdf      	subs	r7, r3, r7
 802aff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802aff6:	eba3 0308 	sub.w	r3, r3, r8
 802affa:	429f      	cmp	r7, r3
 802affc:	bfa8      	it	ge
 802affe:	461f      	movge	r7, r3
 802b000:	2f00      	cmp	r7, #0
 802b002:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b004:	dd0a      	ble.n	802b01c <_vfprintf_r+0x1054>
 802b006:	443b      	add	r3, r7
 802b008:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b00a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b00c:	3301      	adds	r3, #1
 802b00e:	2b07      	cmp	r3, #7
 802b010:	e9c4 8700 	strd	r8, r7, [r4]
 802b014:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b016:	f300 80d4 	bgt.w	802b1c2 <_vfprintf_r+0x11fa>
 802b01a:	3408      	adds	r4, #8
 802b01c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b01e:	9b04      	ldr	r3, [sp, #16]
 802b020:	2f00      	cmp	r7, #0
 802b022:	eba3 0606 	sub.w	r6, r3, r6
 802b026:	bfa8      	it	ge
 802b028:	1bf6      	subge	r6, r6, r7
 802b02a:	2e00      	cmp	r6, #0
 802b02c:	f77f ac22 	ble.w	802a874 <_vfprintf_r+0x8ac>
 802b030:	4fa9      	ldr	r7, [pc, #676]	@ (802b2d8 <_vfprintf_r+0x1310>)
 802b032:	f04f 0810 	mov.w	r8, #16
 802b036:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b03a:	2e10      	cmp	r6, #16
 802b03c:	f103 0301 	add.w	r3, r3, #1
 802b040:	f104 0108 	add.w	r1, r4, #8
 802b044:	6027      	str	r7, [r4, #0]
 802b046:	f77f aebc 	ble.w	802adc2 <_vfprintf_r+0xdfa>
 802b04a:	3210      	adds	r2, #16
 802b04c:	2b07      	cmp	r3, #7
 802b04e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b052:	f8c4 8004 	str.w	r8, [r4, #4]
 802b056:	dd08      	ble.n	802b06a <_vfprintf_r+0x10a2>
 802b058:	9803      	ldr	r0, [sp, #12]
 802b05a:	aa26      	add	r2, sp, #152	@ 0x98
 802b05c:	4659      	mov	r1, fp
 802b05e:	f000 fa1f 	bl	802b4a0 <__sprint_r>
 802b062:	2800      	cmp	r0, #0
 802b064:	f040 8177 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b068:	a929      	add	r1, sp, #164	@ 0xa4
 802b06a:	3e10      	subs	r6, #16
 802b06c:	460c      	mov	r4, r1
 802b06e:	e7e2      	b.n	802b036 <_vfprintf_r+0x106e>
 802b070:	9803      	ldr	r0, [sp, #12]
 802b072:	aa26      	add	r2, sp, #152	@ 0x98
 802b074:	4659      	mov	r1, fp
 802b076:	f000 fa13 	bl	802b4a0 <__sprint_r>
 802b07a:	2800      	cmp	r0, #0
 802b07c:	f040 816b 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b080:	ac29      	add	r4, sp, #164	@ 0xa4
 802b082:	e76d      	b.n	802af60 <_vfprintf_r+0xf98>
 802b084:	2010      	movs	r0, #16
 802b086:	4403      	add	r3, r0
 802b088:	2a07      	cmp	r2, #7
 802b08a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b08e:	6060      	str	r0, [r4, #4]
 802b090:	dd08      	ble.n	802b0a4 <_vfprintf_r+0x10dc>
 802b092:	9803      	ldr	r0, [sp, #12]
 802b094:	aa26      	add	r2, sp, #152	@ 0x98
 802b096:	4659      	mov	r1, fp
 802b098:	f000 fa02 	bl	802b4a0 <__sprint_r>
 802b09c:	2800      	cmp	r0, #0
 802b09e:	f040 815a 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b0a2:	a929      	add	r1, sp, #164	@ 0xa4
 802b0a4:	9b06      	ldr	r3, [sp, #24]
 802b0a6:	3b10      	subs	r3, #16
 802b0a8:	9306      	str	r3, [sp, #24]
 802b0aa:	460c      	mov	r4, r1
 802b0ac:	e763      	b.n	802af76 <_vfprintf_r+0xfae>
 802b0ae:	460c      	mov	r4, r1
 802b0b0:	e77c      	b.n	802afac <_vfprintf_r+0xfe4>
 802b0b2:	2f00      	cmp	r7, #0
 802b0b4:	d04b      	beq.n	802b14e <_vfprintf_r+0x1186>
 802b0b6:	3f01      	subs	r7, #1
 802b0b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b0ba:	6023      	str	r3, [r4, #0]
 802b0bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b0be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b0c0:	6063      	str	r3, [r4, #4]
 802b0c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0c4:	4413      	add	r3, r2
 802b0c6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0c8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0ca:	3301      	adds	r3, #1
 802b0cc:	2b07      	cmp	r3, #7
 802b0ce:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0d0:	dc44      	bgt.n	802b15c <_vfprintf_r+0x1194>
 802b0d2:	3408      	adds	r4, #8
 802b0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0d6:	f893 9000 	ldrb.w	r9, [r3]
 802b0da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b0dc:	eba3 0308 	sub.w	r3, r3, r8
 802b0e0:	4599      	cmp	r9, r3
 802b0e2:	bfa8      	it	ge
 802b0e4:	4699      	movge	r9, r3
 802b0e6:	f1b9 0f00 	cmp.w	r9, #0
 802b0ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0ec:	dd09      	ble.n	802b102 <_vfprintf_r+0x113a>
 802b0ee:	444b      	add	r3, r9
 802b0f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0f4:	3301      	adds	r3, #1
 802b0f6:	2b07      	cmp	r3, #7
 802b0f8:	e9c4 8900 	strd	r8, r9, [r4]
 802b0fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0fe:	dc37      	bgt.n	802b170 <_vfprintf_r+0x11a8>
 802b100:	3408      	adds	r4, #8
 802b102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b104:	781e      	ldrb	r6, [r3, #0]
 802b106:	f1b9 0f00 	cmp.w	r9, #0
 802b10a:	bfa8      	it	ge
 802b10c:	eba6 0609 	subge.w	r6, r6, r9
 802b110:	2e00      	cmp	r6, #0
 802b112:	dd18      	ble.n	802b146 <_vfprintf_r+0x117e>
 802b114:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b118:	486f      	ldr	r0, [pc, #444]	@ (802b2d8 <_vfprintf_r+0x1310>)
 802b11a:	6020      	str	r0, [r4, #0]
 802b11c:	2e10      	cmp	r6, #16
 802b11e:	f103 0301 	add.w	r3, r3, #1
 802b122:	f104 0108 	add.w	r1, r4, #8
 802b126:	dc2d      	bgt.n	802b184 <_vfprintf_r+0x11bc>
 802b128:	6066      	str	r6, [r4, #4]
 802b12a:	2b07      	cmp	r3, #7
 802b12c:	4416      	add	r6, r2
 802b12e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b132:	dd3a      	ble.n	802b1aa <_vfprintf_r+0x11e2>
 802b134:	9803      	ldr	r0, [sp, #12]
 802b136:	aa26      	add	r2, sp, #152	@ 0x98
 802b138:	4659      	mov	r1, fp
 802b13a:	f000 f9b1 	bl	802b4a0 <__sprint_r>
 802b13e:	2800      	cmp	r0, #0
 802b140:	f040 8109 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b144:	ac29      	add	r4, sp, #164	@ 0xa4
 802b146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b148:	781b      	ldrb	r3, [r3, #0]
 802b14a:	4498      	add	r8, r3
 802b14c:	e731      	b.n	802afb2 <_vfprintf_r+0xfea>
 802b14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b150:	3b01      	subs	r3, #1
 802b152:	9309      	str	r3, [sp, #36]	@ 0x24
 802b154:	9b08      	ldr	r3, [sp, #32]
 802b156:	3b01      	subs	r3, #1
 802b158:	9308      	str	r3, [sp, #32]
 802b15a:	e7ad      	b.n	802b0b8 <_vfprintf_r+0x10f0>
 802b15c:	9803      	ldr	r0, [sp, #12]
 802b15e:	aa26      	add	r2, sp, #152	@ 0x98
 802b160:	4659      	mov	r1, fp
 802b162:	f000 f99d 	bl	802b4a0 <__sprint_r>
 802b166:	2800      	cmp	r0, #0
 802b168:	f040 80f5 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b16c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b16e:	e7b1      	b.n	802b0d4 <_vfprintf_r+0x110c>
 802b170:	9803      	ldr	r0, [sp, #12]
 802b172:	aa26      	add	r2, sp, #152	@ 0x98
 802b174:	4659      	mov	r1, fp
 802b176:	f000 f993 	bl	802b4a0 <__sprint_r>
 802b17a:	2800      	cmp	r0, #0
 802b17c:	f040 80eb 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b180:	ac29      	add	r4, sp, #164	@ 0xa4
 802b182:	e7be      	b.n	802b102 <_vfprintf_r+0x113a>
 802b184:	2010      	movs	r0, #16
 802b186:	4402      	add	r2, r0
 802b188:	2b07      	cmp	r3, #7
 802b18a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b18e:	6060      	str	r0, [r4, #4]
 802b190:	dd08      	ble.n	802b1a4 <_vfprintf_r+0x11dc>
 802b192:	9803      	ldr	r0, [sp, #12]
 802b194:	aa26      	add	r2, sp, #152	@ 0x98
 802b196:	4659      	mov	r1, fp
 802b198:	f000 f982 	bl	802b4a0 <__sprint_r>
 802b19c:	2800      	cmp	r0, #0
 802b19e:	f040 80da 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b1a2:	a929      	add	r1, sp, #164	@ 0xa4
 802b1a4:	3e10      	subs	r6, #16
 802b1a6:	460c      	mov	r4, r1
 802b1a8:	e7b4      	b.n	802b114 <_vfprintf_r+0x114c>
 802b1aa:	460c      	mov	r4, r1
 802b1ac:	e7cb      	b.n	802b146 <_vfprintf_r+0x117e>
 802b1ae:	9803      	ldr	r0, [sp, #12]
 802b1b0:	aa26      	add	r2, sp, #152	@ 0x98
 802b1b2:	4659      	mov	r1, fp
 802b1b4:	f000 f974 	bl	802b4a0 <__sprint_r>
 802b1b8:	2800      	cmp	r0, #0
 802b1ba:	f040 80cc 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b1be:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1c0:	e715      	b.n	802afee <_vfprintf_r+0x1026>
 802b1c2:	9803      	ldr	r0, [sp, #12]
 802b1c4:	aa26      	add	r2, sp, #152	@ 0x98
 802b1c6:	4659      	mov	r1, fp
 802b1c8:	f000 f96a 	bl	802b4a0 <__sprint_r>
 802b1cc:	2800      	cmp	r0, #0
 802b1ce:	f040 80c2 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b1d2:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1d4:	e722      	b.n	802b01c <_vfprintf_r+0x1054>
 802b1d6:	9904      	ldr	r1, [sp, #16]
 802b1d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b1da:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b1dc:	2901      	cmp	r1, #1
 802b1de:	f103 0301 	add.w	r3, r3, #1
 802b1e2:	f102 0201 	add.w	r2, r2, #1
 802b1e6:	f104 0608 	add.w	r6, r4, #8
 802b1ea:	dc02      	bgt.n	802b1f2 <_vfprintf_r+0x122a>
 802b1ec:	07ef      	lsls	r7, r5, #31
 802b1ee:	f140 8086 	bpl.w	802b2fe <_vfprintf_r+0x1336>
 802b1f2:	2101      	movs	r1, #1
 802b1f4:	2a07      	cmp	r2, #7
 802b1f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b1fa:	f8c4 8000 	str.w	r8, [r4]
 802b1fe:	6061      	str	r1, [r4, #4]
 802b200:	dd08      	ble.n	802b214 <_vfprintf_r+0x124c>
 802b202:	9803      	ldr	r0, [sp, #12]
 802b204:	aa26      	add	r2, sp, #152	@ 0x98
 802b206:	4659      	mov	r1, fp
 802b208:	f000 f94a 	bl	802b4a0 <__sprint_r>
 802b20c:	2800      	cmp	r0, #0
 802b20e:	f040 80a2 	bne.w	802b356 <_vfprintf_r+0x138e>
 802b212:	ae29      	add	r6, sp, #164	@ 0xa4
 802b214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b216:	6033      	str	r3, [r6, #0]
 802b218:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b21a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b21c:	6073      	str	r3, [r6, #4]
 802b21e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b220:	4413      	add	r3, r2
 802b222:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b224:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b226:	3301      	adds	r3, #1
 802b228:	2b07      	cmp	r3, #7
 802b22a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b22c:	dc33      	bgt.n	802b296 <_vfprintf_r+0x12ce>
 802b22e:	3608      	adds	r6, #8
 802b230:	9b04      	ldr	r3, [sp, #16]
 802b232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b236:	1e5c      	subs	r4, r3, #1
 802b238:	2200      	movs	r2, #0
 802b23a:	2300      	movs	r3, #0
 802b23c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b240:	f7e5 fc5a 	bl	8010af8 <__aeabi_dcmpeq>
 802b244:	2800      	cmp	r0, #0
 802b246:	d12f      	bne.n	802b2a8 <_vfprintf_r+0x12e0>
 802b248:	f108 0201 	add.w	r2, r8, #1
 802b24c:	e9c6 2400 	strd	r2, r4, [r6]
 802b250:	9a04      	ldr	r2, [sp, #16]
 802b252:	f109 0301 	add.w	r3, r9, #1
 802b256:	3f01      	subs	r7, #1
 802b258:	4417      	add	r7, r2
 802b25a:	2b07      	cmp	r3, #7
 802b25c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b260:	dd56      	ble.n	802b310 <_vfprintf_r+0x1348>
 802b262:	9803      	ldr	r0, [sp, #12]
 802b264:	aa26      	add	r2, sp, #152	@ 0x98
 802b266:	4659      	mov	r1, fp
 802b268:	f000 f91a 	bl	802b4a0 <__sprint_r>
 802b26c:	2800      	cmp	r0, #0
 802b26e:	d172      	bne.n	802b356 <_vfprintf_r+0x138e>
 802b270:	ae29      	add	r6, sp, #164	@ 0xa4
 802b272:	ab22      	add	r3, sp, #136	@ 0x88
 802b274:	6033      	str	r3, [r6, #0]
 802b276:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b278:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b27a:	6073      	str	r3, [r6, #4]
 802b27c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b27e:	4413      	add	r3, r2
 802b280:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b282:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b284:	3301      	adds	r3, #1
 802b286:	2b07      	cmp	r3, #7
 802b288:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b28a:	f73f ada1 	bgt.w	802add0 <_vfprintf_r+0xe08>
 802b28e:	f106 0408 	add.w	r4, r6, #8
 802b292:	f7ff baef 	b.w	802a874 <_vfprintf_r+0x8ac>
 802b296:	9803      	ldr	r0, [sp, #12]
 802b298:	aa26      	add	r2, sp, #152	@ 0x98
 802b29a:	4659      	mov	r1, fp
 802b29c:	f000 f900 	bl	802b4a0 <__sprint_r>
 802b2a0:	2800      	cmp	r0, #0
 802b2a2:	d158      	bne.n	802b356 <_vfprintf_r+0x138e>
 802b2a4:	ae29      	add	r6, sp, #164	@ 0xa4
 802b2a6:	e7c3      	b.n	802b230 <_vfprintf_r+0x1268>
 802b2a8:	9b04      	ldr	r3, [sp, #16]
 802b2aa:	2b01      	cmp	r3, #1
 802b2ac:	dde1      	ble.n	802b272 <_vfprintf_r+0x12aa>
 802b2ae:	4f0a      	ldr	r7, [pc, #40]	@ (802b2d8 <_vfprintf_r+0x1310>)
 802b2b0:	f04f 0810 	mov.w	r8, #16
 802b2b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b2b8:	2c10      	cmp	r4, #16
 802b2ba:	f103 0301 	add.w	r3, r3, #1
 802b2be:	f106 0108 	add.w	r1, r6, #8
 802b2c2:	6037      	str	r7, [r6, #0]
 802b2c4:	dc0a      	bgt.n	802b2dc <_vfprintf_r+0x1314>
 802b2c6:	6074      	str	r4, [r6, #4]
 802b2c8:	2b07      	cmp	r3, #7
 802b2ca:	4414      	add	r4, r2
 802b2cc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b2d0:	dcc7      	bgt.n	802b262 <_vfprintf_r+0x129a>
 802b2d2:	460e      	mov	r6, r1
 802b2d4:	e7cd      	b.n	802b272 <_vfprintf_r+0x12aa>
 802b2d6:	bf00      	nop
 802b2d8:	0803bcaf 	.word	0x0803bcaf
 802b2dc:	3210      	adds	r2, #16
 802b2de:	2b07      	cmp	r3, #7
 802b2e0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b2e4:	f8c6 8004 	str.w	r8, [r6, #4]
 802b2e8:	dd06      	ble.n	802b2f8 <_vfprintf_r+0x1330>
 802b2ea:	9803      	ldr	r0, [sp, #12]
 802b2ec:	aa26      	add	r2, sp, #152	@ 0x98
 802b2ee:	4659      	mov	r1, fp
 802b2f0:	f000 f8d6 	bl	802b4a0 <__sprint_r>
 802b2f4:	bb78      	cbnz	r0, 802b356 <_vfprintf_r+0x138e>
 802b2f6:	a929      	add	r1, sp, #164	@ 0xa4
 802b2f8:	3c10      	subs	r4, #16
 802b2fa:	460e      	mov	r6, r1
 802b2fc:	e7da      	b.n	802b2b4 <_vfprintf_r+0x12ec>
 802b2fe:	2101      	movs	r1, #1
 802b300:	2a07      	cmp	r2, #7
 802b302:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b306:	f8c4 8000 	str.w	r8, [r4]
 802b30a:	6061      	str	r1, [r4, #4]
 802b30c:	ddb1      	ble.n	802b272 <_vfprintf_r+0x12aa>
 802b30e:	e7a8      	b.n	802b262 <_vfprintf_r+0x129a>
 802b310:	3608      	adds	r6, #8
 802b312:	e7ae      	b.n	802b272 <_vfprintf_r+0x12aa>
 802b314:	460c      	mov	r4, r1
 802b316:	f7ff baad 	b.w	802a874 <_vfprintf_r+0x8ac>
 802b31a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b31c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b31e:	1a9d      	subs	r5, r3, r2
 802b320:	2d00      	cmp	r5, #0
 802b322:	f77f aaaa 	ble.w	802a87a <_vfprintf_r+0x8b2>
 802b326:	4e3d      	ldr	r6, [pc, #244]	@ (802b41c <_vfprintf_r+0x1454>)
 802b328:	2710      	movs	r7, #16
 802b32a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b32e:	2d10      	cmp	r5, #16
 802b330:	f103 0301 	add.w	r3, r3, #1
 802b334:	6026      	str	r6, [r4, #0]
 802b336:	dc18      	bgt.n	802b36a <_vfprintf_r+0x13a2>
 802b338:	6065      	str	r5, [r4, #4]
 802b33a:	2b07      	cmp	r3, #7
 802b33c:	4415      	add	r5, r2
 802b33e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802b342:	f77f aa9a 	ble.w	802a87a <_vfprintf_r+0x8b2>
 802b346:	9803      	ldr	r0, [sp, #12]
 802b348:	aa26      	add	r2, sp, #152	@ 0x98
 802b34a:	4659      	mov	r1, fp
 802b34c:	f000 f8a8 	bl	802b4a0 <__sprint_r>
 802b350:	2800      	cmp	r0, #0
 802b352:	f43f aa92 	beq.w	802a87a <_vfprintf_r+0x8b2>
 802b356:	f1ba 0f00 	cmp.w	sl, #0
 802b35a:	f43f a892 	beq.w	802a482 <_vfprintf_r+0x4ba>
 802b35e:	9803      	ldr	r0, [sp, #12]
 802b360:	4651      	mov	r1, sl
 802b362:	f003 fc7b 	bl	802ec5c <_free_r>
 802b366:	f7ff b88c 	b.w	802a482 <_vfprintf_r+0x4ba>
 802b36a:	3210      	adds	r2, #16
 802b36c:	2b07      	cmp	r3, #7
 802b36e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b372:	6067      	str	r7, [r4, #4]
 802b374:	dc02      	bgt.n	802b37c <_vfprintf_r+0x13b4>
 802b376:	3408      	adds	r4, #8
 802b378:	3d10      	subs	r5, #16
 802b37a:	e7d6      	b.n	802b32a <_vfprintf_r+0x1362>
 802b37c:	9803      	ldr	r0, [sp, #12]
 802b37e:	aa26      	add	r2, sp, #152	@ 0x98
 802b380:	4659      	mov	r1, fp
 802b382:	f000 f88d 	bl	802b4a0 <__sprint_r>
 802b386:	2800      	cmp	r0, #0
 802b388:	d1e5      	bne.n	802b356 <_vfprintf_r+0x138e>
 802b38a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b38c:	e7f4      	b.n	802b378 <_vfprintf_r+0x13b0>
 802b38e:	9803      	ldr	r0, [sp, #12]
 802b390:	4651      	mov	r1, sl
 802b392:	f003 fc63 	bl	802ec5c <_free_r>
 802b396:	f7ff ba88 	b.w	802a8aa <_vfprintf_r+0x8e2>
 802b39a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b39c:	b91b      	cbnz	r3, 802b3a6 <_vfprintf_r+0x13de>
 802b39e:	2300      	movs	r3, #0
 802b3a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b3a2:	f7ff b86e 	b.w	802a482 <_vfprintf_r+0x4ba>
 802b3a6:	9803      	ldr	r0, [sp, #12]
 802b3a8:	aa26      	add	r2, sp, #152	@ 0x98
 802b3aa:	4659      	mov	r1, fp
 802b3ac:	f000 f878 	bl	802b4a0 <__sprint_r>
 802b3b0:	2800      	cmp	r0, #0
 802b3b2:	d0f4      	beq.n	802b39e <_vfprintf_r+0x13d6>
 802b3b4:	f7ff b865 	b.w	802a482 <_vfprintf_r+0x4ba>
 802b3b8:	ea56 0207 	orrs.w	r2, r6, r7
 802b3bc:	9508      	str	r5, [sp, #32]
 802b3be:	f43f ab75 	beq.w	802aaac <_vfprintf_r+0xae4>
 802b3c2:	2b01      	cmp	r3, #1
 802b3c4:	f43f abf6 	beq.w	802abb4 <_vfprintf_r+0xbec>
 802b3c8:	2b02      	cmp	r3, #2
 802b3ca:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b3ce:	f43f ac3a 	beq.w	802ac46 <_vfprintf_r+0xc7e>
 802b3d2:	f006 0307 	and.w	r3, r6, #7
 802b3d6:	08f6      	lsrs	r6, r6, #3
 802b3d8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b3dc:	08ff      	lsrs	r7, r7, #3
 802b3de:	3330      	adds	r3, #48	@ 0x30
 802b3e0:	ea56 0107 	orrs.w	r1, r6, r7
 802b3e4:	4642      	mov	r2, r8
 802b3e6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b3ea:	d1f2      	bne.n	802b3d2 <_vfprintf_r+0x140a>
 802b3ec:	9908      	ldr	r1, [sp, #32]
 802b3ee:	07ce      	lsls	r6, r1, #31
 802b3f0:	d506      	bpl.n	802b400 <_vfprintf_r+0x1438>
 802b3f2:	2b30      	cmp	r3, #48	@ 0x30
 802b3f4:	d004      	beq.n	802b400 <_vfprintf_r+0x1438>
 802b3f6:	2330      	movs	r3, #48	@ 0x30
 802b3f8:	f808 3c01 	strb.w	r3, [r8, #-1]
 802b3fc:	f1a2 0802 	sub.w	r8, r2, #2
 802b400:	ab52      	add	r3, sp, #328	@ 0x148
 802b402:	9d08      	ldr	r5, [sp, #32]
 802b404:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802b408:	f04f 0a00 	mov.w	sl, #0
 802b40c:	eba3 0908 	sub.w	r9, r3, r8
 802b410:	4657      	mov	r7, sl
 802b412:	f8cd a020 	str.w	sl, [sp, #32]
 802b416:	4656      	mov	r6, sl
 802b418:	f7ff b978 	b.w	802a70c <_vfprintf_r+0x744>
 802b41c:	0803bcbf 	.word	0x0803bcbf

0802b420 <__sbprintf>:
 802b420:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b422:	461f      	mov	r7, r3
 802b424:	898b      	ldrh	r3, [r1, #12]
 802b426:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b42a:	f023 0302 	bic.w	r3, r3, #2
 802b42e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b432:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b434:	9319      	str	r3, [sp, #100]	@ 0x64
 802b436:	89cb      	ldrh	r3, [r1, #14]
 802b438:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b43c:	69cb      	ldr	r3, [r1, #28]
 802b43e:	9307      	str	r3, [sp, #28]
 802b440:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b442:	9309      	str	r3, [sp, #36]	@ 0x24
 802b444:	ab1a      	add	r3, sp, #104	@ 0x68
 802b446:	9300      	str	r3, [sp, #0]
 802b448:	9304      	str	r3, [sp, #16]
 802b44a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b44e:	4615      	mov	r5, r2
 802b450:	4606      	mov	r6, r0
 802b452:	9302      	str	r3, [sp, #8]
 802b454:	9305      	str	r3, [sp, #20]
 802b456:	a816      	add	r0, sp, #88	@ 0x58
 802b458:	2300      	movs	r3, #0
 802b45a:	460c      	mov	r4, r1
 802b45c:	9306      	str	r3, [sp, #24]
 802b45e:	f002 fcf5 	bl	802de4c <__retarget_lock_init_recursive>
 802b462:	462a      	mov	r2, r5
 802b464:	463b      	mov	r3, r7
 802b466:	4669      	mov	r1, sp
 802b468:	4630      	mov	r0, r6
 802b46a:	f7fe fdad 	bl	8029fc8 <_vfprintf_r>
 802b46e:	1e05      	subs	r5, r0, #0
 802b470:	db07      	blt.n	802b482 <__sbprintf+0x62>
 802b472:	4669      	mov	r1, sp
 802b474:	4630      	mov	r0, r6
 802b476:	f000 fecb 	bl	802c210 <_fflush_r>
 802b47a:	2800      	cmp	r0, #0
 802b47c:	bf18      	it	ne
 802b47e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b482:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b486:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b488:	065b      	lsls	r3, r3, #25
 802b48a:	bf42      	ittt	mi
 802b48c:	89a3      	ldrhmi	r3, [r4, #12]
 802b48e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b492:	81a3      	strhmi	r3, [r4, #12]
 802b494:	f002 fcdb 	bl	802de4e <__retarget_lock_close_recursive>
 802b498:	4628      	mov	r0, r5
 802b49a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b4a0 <__sprint_r>:
 802b4a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4a4:	6893      	ldr	r3, [r2, #8]
 802b4a6:	4680      	mov	r8, r0
 802b4a8:	460e      	mov	r6, r1
 802b4aa:	4614      	mov	r4, r2
 802b4ac:	b343      	cbz	r3, 802b500 <__sprint_r+0x60>
 802b4ae:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b4b0:	049d      	lsls	r5, r3, #18
 802b4b2:	d522      	bpl.n	802b4fa <__sprint_r+0x5a>
 802b4b4:	6815      	ldr	r5, [r2, #0]
 802b4b6:	68a0      	ldr	r0, [r4, #8]
 802b4b8:	3508      	adds	r5, #8
 802b4ba:	b928      	cbnz	r0, 802b4c8 <__sprint_r+0x28>
 802b4bc:	2300      	movs	r3, #0
 802b4be:	60a3      	str	r3, [r4, #8]
 802b4c0:	2300      	movs	r3, #0
 802b4c2:	6063      	str	r3, [r4, #4]
 802b4c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b4c8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802b4cc:	f04f 0900 	mov.w	r9, #0
 802b4d0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802b4d4:	45ca      	cmp	sl, r9
 802b4d6:	dc05      	bgt.n	802b4e4 <__sprint_r+0x44>
 802b4d8:	68a3      	ldr	r3, [r4, #8]
 802b4da:	f027 0703 	bic.w	r7, r7, #3
 802b4de:	1bdb      	subs	r3, r3, r7
 802b4e0:	60a3      	str	r3, [r4, #8]
 802b4e2:	e7e8      	b.n	802b4b6 <__sprint_r+0x16>
 802b4e4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802b4e8:	4632      	mov	r2, r6
 802b4ea:	4640      	mov	r0, r8
 802b4ec:	f001 fa35 	bl	802c95a <_fputwc_r>
 802b4f0:	1c43      	adds	r3, r0, #1
 802b4f2:	d0e3      	beq.n	802b4bc <__sprint_r+0x1c>
 802b4f4:	f109 0901 	add.w	r9, r9, #1
 802b4f8:	e7ec      	b.n	802b4d4 <__sprint_r+0x34>
 802b4fa:	f001 f81d 	bl	802c538 <__sfvwrite_r>
 802b4fe:	e7dd      	b.n	802b4bc <__sprint_r+0x1c>
 802b500:	4618      	mov	r0, r3
 802b502:	e7dd      	b.n	802b4c0 <__sprint_r+0x20>

0802b504 <_vfiprintf_r>:
 802b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b508:	b0bb      	sub	sp, #236	@ 0xec
 802b50a:	460f      	mov	r7, r1
 802b50c:	4693      	mov	fp, r2
 802b50e:	461c      	mov	r4, r3
 802b510:	461d      	mov	r5, r3
 802b512:	9000      	str	r0, [sp, #0]
 802b514:	b118      	cbz	r0, 802b51e <_vfiprintf_r+0x1a>
 802b516:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b518:	b90b      	cbnz	r3, 802b51e <_vfiprintf_r+0x1a>
 802b51a:	f000 ffbb 	bl	802c494 <__sinit>
 802b51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b520:	07db      	lsls	r3, r3, #31
 802b522:	d405      	bmi.n	802b530 <_vfiprintf_r+0x2c>
 802b524:	89bb      	ldrh	r3, [r7, #12]
 802b526:	059e      	lsls	r6, r3, #22
 802b528:	d402      	bmi.n	802b530 <_vfiprintf_r+0x2c>
 802b52a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b52c:	f002 fc91 	bl	802de52 <__retarget_lock_acquire_recursive>
 802b530:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b534:	0498      	lsls	r0, r3, #18
 802b536:	d406      	bmi.n	802b546 <_vfiprintf_r+0x42>
 802b538:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b53c:	81bb      	strh	r3, [r7, #12]
 802b53e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b544:	667b      	str	r3, [r7, #100]	@ 0x64
 802b546:	89bb      	ldrh	r3, [r7, #12]
 802b548:	0719      	lsls	r1, r3, #28
 802b54a:	d501      	bpl.n	802b550 <_vfiprintf_r+0x4c>
 802b54c:	693b      	ldr	r3, [r7, #16]
 802b54e:	b9ab      	cbnz	r3, 802b57c <_vfiprintf_r+0x78>
 802b550:	9800      	ldr	r0, [sp, #0]
 802b552:	4639      	mov	r1, r7
 802b554:	f001 f95a 	bl	802c80c <__swsetup_r>
 802b558:	b180      	cbz	r0, 802b57c <_vfiprintf_r+0x78>
 802b55a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b55c:	07da      	lsls	r2, r3, #31
 802b55e:	d506      	bpl.n	802b56e <_vfiprintf_r+0x6a>
 802b560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b564:	9303      	str	r3, [sp, #12]
 802b566:	9803      	ldr	r0, [sp, #12]
 802b568:	b03b      	add	sp, #236	@ 0xec
 802b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b56e:	89bb      	ldrh	r3, [r7, #12]
 802b570:	059b      	lsls	r3, r3, #22
 802b572:	d4f5      	bmi.n	802b560 <_vfiprintf_r+0x5c>
 802b574:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b576:	f002 fc6e 	bl	802de56 <__retarget_lock_release_recursive>
 802b57a:	e7f1      	b.n	802b560 <_vfiprintf_r+0x5c>
 802b57c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b580:	f003 021a 	and.w	r2, r3, #26
 802b584:	2a0a      	cmp	r2, #10
 802b586:	d114      	bne.n	802b5b2 <_vfiprintf_r+0xae>
 802b588:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802b58c:	2a00      	cmp	r2, #0
 802b58e:	db10      	blt.n	802b5b2 <_vfiprintf_r+0xae>
 802b590:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b592:	07d6      	lsls	r6, r2, #31
 802b594:	d404      	bmi.n	802b5a0 <_vfiprintf_r+0x9c>
 802b596:	059d      	lsls	r5, r3, #22
 802b598:	d402      	bmi.n	802b5a0 <_vfiprintf_r+0x9c>
 802b59a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b59c:	f002 fc5b 	bl	802de56 <__retarget_lock_release_recursive>
 802b5a0:	9800      	ldr	r0, [sp, #0]
 802b5a2:	4623      	mov	r3, r4
 802b5a4:	465a      	mov	r2, fp
 802b5a6:	4639      	mov	r1, r7
 802b5a8:	b03b      	add	sp, #236	@ 0xec
 802b5aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b5ae:	f000 bc31 	b.w	802be14 <__sbprintf>
 802b5b2:	2300      	movs	r3, #0
 802b5b4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802b5b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802b5bc:	ae11      	add	r6, sp, #68	@ 0x44
 802b5be:	960e      	str	r6, [sp, #56]	@ 0x38
 802b5c0:	9307      	str	r3, [sp, #28]
 802b5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b5c4:	9303      	str	r3, [sp, #12]
 802b5c6:	465b      	mov	r3, fp
 802b5c8:	461c      	mov	r4, r3
 802b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b5ce:	b10a      	cbz	r2, 802b5d4 <_vfiprintf_r+0xd0>
 802b5d0:	2a25      	cmp	r2, #37	@ 0x25
 802b5d2:	d1f9      	bne.n	802b5c8 <_vfiprintf_r+0xc4>
 802b5d4:	ebb4 080b 	subs.w	r8, r4, fp
 802b5d8:	d00d      	beq.n	802b5f6 <_vfiprintf_r+0xf2>
 802b5da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b5dc:	4443      	add	r3, r8
 802b5de:	9310      	str	r3, [sp, #64]	@ 0x40
 802b5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b5e2:	3301      	adds	r3, #1
 802b5e4:	2b07      	cmp	r3, #7
 802b5e6:	e9c6 b800 	strd	fp, r8, [r6]
 802b5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b5ec:	dc75      	bgt.n	802b6da <_vfiprintf_r+0x1d6>
 802b5ee:	3608      	adds	r6, #8
 802b5f0:	9b03      	ldr	r3, [sp, #12]
 802b5f2:	4443      	add	r3, r8
 802b5f4:	9303      	str	r3, [sp, #12]
 802b5f6:	7823      	ldrb	r3, [r4, #0]
 802b5f8:	2b00      	cmp	r3, #0
 802b5fa:	f000 83cd 	beq.w	802bd98 <_vfiprintf_r+0x894>
 802b5fe:	2300      	movs	r3, #0
 802b600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b604:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802b608:	3401      	adds	r4, #1
 802b60a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b60e:	469a      	mov	sl, r3
 802b610:	46a3      	mov	fp, r4
 802b612:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b616:	f1a3 0220 	sub.w	r2, r3, #32
 802b61a:	2a5a      	cmp	r2, #90	@ 0x5a
 802b61c:	f200 8316 	bhi.w	802bc4c <_vfiprintf_r+0x748>
 802b620:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b624:	0314009a 	.word	0x0314009a
 802b628:	00a20314 	.word	0x00a20314
 802b62c:	03140314 	.word	0x03140314
 802b630:	00820314 	.word	0x00820314
 802b634:	03140314 	.word	0x03140314
 802b638:	00af00a5 	.word	0x00af00a5
 802b63c:	00ac0314 	.word	0x00ac0314
 802b640:	031400b1 	.word	0x031400b1
 802b644:	00d000cd 	.word	0x00d000cd
 802b648:	00d000d0 	.word	0x00d000d0
 802b64c:	00d000d0 	.word	0x00d000d0
 802b650:	00d000d0 	.word	0x00d000d0
 802b654:	00d000d0 	.word	0x00d000d0
 802b658:	03140314 	.word	0x03140314
 802b65c:	03140314 	.word	0x03140314
 802b660:	03140314 	.word	0x03140314
 802b664:	03140314 	.word	0x03140314
 802b668:	00f70314 	.word	0x00f70314
 802b66c:	03140104 	.word	0x03140104
 802b670:	03140314 	.word	0x03140314
 802b674:	03140314 	.word	0x03140314
 802b678:	03140314 	.word	0x03140314
 802b67c:	03140314 	.word	0x03140314
 802b680:	01520314 	.word	0x01520314
 802b684:	03140314 	.word	0x03140314
 802b688:	019a0314 	.word	0x019a0314
 802b68c:	027a0314 	.word	0x027a0314
 802b690:	03140314 	.word	0x03140314
 802b694:	0314029a 	.word	0x0314029a
 802b698:	03140314 	.word	0x03140314
 802b69c:	03140314 	.word	0x03140314
 802b6a0:	03140314 	.word	0x03140314
 802b6a4:	03140314 	.word	0x03140314
 802b6a8:	00f70314 	.word	0x00f70314
 802b6ac:	03140106 	.word	0x03140106
 802b6b0:	03140314 	.word	0x03140314
 802b6b4:	010600e0 	.word	0x010600e0
 802b6b8:	031400f1 	.word	0x031400f1
 802b6bc:	031400eb 	.word	0x031400eb
 802b6c0:	01540132 	.word	0x01540132
 802b6c4:	00f10189 	.word	0x00f10189
 802b6c8:	019a0314 	.word	0x019a0314
 802b6cc:	027c0098 	.word	0x027c0098
 802b6d0:	03140314 	.word	0x03140314
 802b6d4:	03140065 	.word	0x03140065
 802b6d8:	0098      	.short	0x0098
 802b6da:	9800      	ldr	r0, [sp, #0]
 802b6dc:	aa0e      	add	r2, sp, #56	@ 0x38
 802b6de:	4639      	mov	r1, r7
 802b6e0:	f7ff fede 	bl	802b4a0 <__sprint_r>
 802b6e4:	2800      	cmp	r0, #0
 802b6e6:	f040 8336 	bne.w	802bd56 <_vfiprintf_r+0x852>
 802b6ea:	ae11      	add	r6, sp, #68	@ 0x44
 802b6ec:	e780      	b.n	802b5f0 <_vfiprintf_r+0xec>
 802b6ee:	4a99      	ldr	r2, [pc, #612]	@ (802b954 <_vfiprintf_r+0x450>)
 802b6f0:	9205      	str	r2, [sp, #20]
 802b6f2:	f01a 0220 	ands.w	r2, sl, #32
 802b6f6:	f000 8231 	beq.w	802bb5c <_vfiprintf_r+0x658>
 802b6fa:	3507      	adds	r5, #7
 802b6fc:	f025 0507 	bic.w	r5, r5, #7
 802b700:	46a8      	mov	r8, r5
 802b702:	686d      	ldr	r5, [r5, #4]
 802b704:	f858 4b08 	ldr.w	r4, [r8], #8
 802b708:	f01a 0f01 	tst.w	sl, #1
 802b70c:	d009      	beq.n	802b722 <_vfiprintf_r+0x21e>
 802b70e:	ea54 0205 	orrs.w	r2, r4, r5
 802b712:	bf1f      	itttt	ne
 802b714:	2230      	movne	r2, #48	@ 0x30
 802b716:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802b71a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802b71e:	f04a 0a02 	orrne.w	sl, sl, #2
 802b722:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b726:	e112      	b.n	802b94e <_vfiprintf_r+0x44a>
 802b728:	9800      	ldr	r0, [sp, #0]
 802b72a:	f002 fae7 	bl	802dcfc <_localeconv_r>
 802b72e:	6843      	ldr	r3, [r0, #4]
 802b730:	9309      	str	r3, [sp, #36]	@ 0x24
 802b732:	4618      	mov	r0, r3
 802b734:	f7e4 fdb4 	bl	80102a0 <strlen>
 802b738:	9007      	str	r0, [sp, #28]
 802b73a:	9800      	ldr	r0, [sp, #0]
 802b73c:	f002 fade 	bl	802dcfc <_localeconv_r>
 802b740:	6883      	ldr	r3, [r0, #8]
 802b742:	9306      	str	r3, [sp, #24]
 802b744:	9b07      	ldr	r3, [sp, #28]
 802b746:	b12b      	cbz	r3, 802b754 <_vfiprintf_r+0x250>
 802b748:	9b06      	ldr	r3, [sp, #24]
 802b74a:	b11b      	cbz	r3, 802b754 <_vfiprintf_r+0x250>
 802b74c:	781b      	ldrb	r3, [r3, #0]
 802b74e:	b10b      	cbz	r3, 802b754 <_vfiprintf_r+0x250>
 802b750:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802b754:	465c      	mov	r4, fp
 802b756:	e75b      	b.n	802b610 <_vfiprintf_r+0x10c>
 802b758:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b75c:	2b00      	cmp	r3, #0
 802b75e:	d1f9      	bne.n	802b754 <_vfiprintf_r+0x250>
 802b760:	2320      	movs	r3, #32
 802b762:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b766:	e7f5      	b.n	802b754 <_vfiprintf_r+0x250>
 802b768:	f04a 0a01 	orr.w	sl, sl, #1
 802b76c:	e7f2      	b.n	802b754 <_vfiprintf_r+0x250>
 802b76e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b772:	9302      	str	r3, [sp, #8]
 802b774:	2b00      	cmp	r3, #0
 802b776:	daed      	bge.n	802b754 <_vfiprintf_r+0x250>
 802b778:	425b      	negs	r3, r3
 802b77a:	9302      	str	r3, [sp, #8]
 802b77c:	f04a 0a04 	orr.w	sl, sl, #4
 802b780:	e7e8      	b.n	802b754 <_vfiprintf_r+0x250>
 802b782:	232b      	movs	r3, #43	@ 0x2b
 802b784:	e7ed      	b.n	802b762 <_vfiprintf_r+0x25e>
 802b786:	465a      	mov	r2, fp
 802b788:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b78c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b78e:	d112      	bne.n	802b7b6 <_vfiprintf_r+0x2b2>
 802b790:	f855 3b04 	ldr.w	r3, [r5], #4
 802b794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b798:	9301      	str	r3, [sp, #4]
 802b79a:	4693      	mov	fp, r2
 802b79c:	e7da      	b.n	802b754 <_vfiprintf_r+0x250>
 802b79e:	9b01      	ldr	r3, [sp, #4]
 802b7a0:	fb00 1303 	mla	r3, r0, r3, r1
 802b7a4:	9301      	str	r3, [sp, #4]
 802b7a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b7aa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b7ae:	2909      	cmp	r1, #9
 802b7b0:	d9f5      	bls.n	802b79e <_vfiprintf_r+0x29a>
 802b7b2:	4693      	mov	fp, r2
 802b7b4:	e72f      	b.n	802b616 <_vfiprintf_r+0x112>
 802b7b6:	2100      	movs	r1, #0
 802b7b8:	9101      	str	r1, [sp, #4]
 802b7ba:	200a      	movs	r0, #10
 802b7bc:	e7f5      	b.n	802b7aa <_vfiprintf_r+0x2a6>
 802b7be:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802b7c2:	e7c7      	b.n	802b754 <_vfiprintf_r+0x250>
 802b7c4:	2100      	movs	r1, #0
 802b7c6:	465a      	mov	r2, fp
 802b7c8:	9102      	str	r1, [sp, #8]
 802b7ca:	200a      	movs	r0, #10
 802b7cc:	9902      	ldr	r1, [sp, #8]
 802b7ce:	3b30      	subs	r3, #48	@ 0x30
 802b7d0:	fb00 3301 	mla	r3, r0, r1, r3
 802b7d4:	9302      	str	r3, [sp, #8]
 802b7d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b7da:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b7de:	2909      	cmp	r1, #9
 802b7e0:	d9f4      	bls.n	802b7cc <_vfiprintf_r+0x2c8>
 802b7e2:	e7e6      	b.n	802b7b2 <_vfiprintf_r+0x2ae>
 802b7e4:	f89b 3000 	ldrb.w	r3, [fp]
 802b7e8:	2b68      	cmp	r3, #104	@ 0x68
 802b7ea:	bf06      	itte	eq
 802b7ec:	f10b 0b01 	addeq.w	fp, fp, #1
 802b7f0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802b7f4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802b7f8:	e7ac      	b.n	802b754 <_vfiprintf_r+0x250>
 802b7fa:	f89b 3000 	ldrb.w	r3, [fp]
 802b7fe:	2b6c      	cmp	r3, #108	@ 0x6c
 802b800:	d104      	bne.n	802b80c <_vfiprintf_r+0x308>
 802b802:	f10b 0b01 	add.w	fp, fp, #1
 802b806:	f04a 0a20 	orr.w	sl, sl, #32
 802b80a:	e7a3      	b.n	802b754 <_vfiprintf_r+0x250>
 802b80c:	f04a 0a10 	orr.w	sl, sl, #16
 802b810:	e7a0      	b.n	802b754 <_vfiprintf_r+0x250>
 802b812:	46a8      	mov	r8, r5
 802b814:	2400      	movs	r4, #0
 802b816:	f858 3b04 	ldr.w	r3, [r8], #4
 802b81a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b81e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b822:	2301      	movs	r3, #1
 802b824:	9301      	str	r3, [sp, #4]
 802b826:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802b82a:	e0ab      	b.n	802b984 <_vfiprintf_r+0x480>
 802b82c:	f04a 0a10 	orr.w	sl, sl, #16
 802b830:	f01a 0f20 	tst.w	sl, #32
 802b834:	d011      	beq.n	802b85a <_vfiprintf_r+0x356>
 802b836:	3507      	adds	r5, #7
 802b838:	f025 0507 	bic.w	r5, r5, #7
 802b83c:	46a8      	mov	r8, r5
 802b83e:	686d      	ldr	r5, [r5, #4]
 802b840:	f858 4b08 	ldr.w	r4, [r8], #8
 802b844:	2d00      	cmp	r5, #0
 802b846:	da06      	bge.n	802b856 <_vfiprintf_r+0x352>
 802b848:	4264      	negs	r4, r4
 802b84a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b84e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802b852:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b856:	2301      	movs	r3, #1
 802b858:	e048      	b.n	802b8ec <_vfiprintf_r+0x3e8>
 802b85a:	46a8      	mov	r8, r5
 802b85c:	f01a 0f10 	tst.w	sl, #16
 802b860:	f858 5b04 	ldr.w	r5, [r8], #4
 802b864:	d002      	beq.n	802b86c <_vfiprintf_r+0x368>
 802b866:	462c      	mov	r4, r5
 802b868:	17ed      	asrs	r5, r5, #31
 802b86a:	e7eb      	b.n	802b844 <_vfiprintf_r+0x340>
 802b86c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b870:	d003      	beq.n	802b87a <_vfiprintf_r+0x376>
 802b872:	b22c      	sxth	r4, r5
 802b874:	f345 35c0 	sbfx	r5, r5, #15, #1
 802b878:	e7e4      	b.n	802b844 <_vfiprintf_r+0x340>
 802b87a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b87e:	d0f2      	beq.n	802b866 <_vfiprintf_r+0x362>
 802b880:	b26c      	sxtb	r4, r5
 802b882:	f345 15c0 	sbfx	r5, r5, #7, #1
 802b886:	e7dd      	b.n	802b844 <_vfiprintf_r+0x340>
 802b888:	f01a 0f20 	tst.w	sl, #32
 802b88c:	d007      	beq.n	802b89e <_vfiprintf_r+0x39a>
 802b88e:	9a03      	ldr	r2, [sp, #12]
 802b890:	682b      	ldr	r3, [r5, #0]
 802b892:	9903      	ldr	r1, [sp, #12]
 802b894:	17d2      	asrs	r2, r2, #31
 802b896:	e9c3 1200 	strd	r1, r2, [r3]
 802b89a:	3504      	adds	r5, #4
 802b89c:	e693      	b.n	802b5c6 <_vfiprintf_r+0xc2>
 802b89e:	f01a 0f10 	tst.w	sl, #16
 802b8a2:	d003      	beq.n	802b8ac <_vfiprintf_r+0x3a8>
 802b8a4:	682b      	ldr	r3, [r5, #0]
 802b8a6:	9a03      	ldr	r2, [sp, #12]
 802b8a8:	601a      	str	r2, [r3, #0]
 802b8aa:	e7f6      	b.n	802b89a <_vfiprintf_r+0x396>
 802b8ac:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b8b0:	d003      	beq.n	802b8ba <_vfiprintf_r+0x3b6>
 802b8b2:	682b      	ldr	r3, [r5, #0]
 802b8b4:	9a03      	ldr	r2, [sp, #12]
 802b8b6:	801a      	strh	r2, [r3, #0]
 802b8b8:	e7ef      	b.n	802b89a <_vfiprintf_r+0x396>
 802b8ba:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b8be:	d0f1      	beq.n	802b8a4 <_vfiprintf_r+0x3a0>
 802b8c0:	682b      	ldr	r3, [r5, #0]
 802b8c2:	9a03      	ldr	r2, [sp, #12]
 802b8c4:	701a      	strb	r2, [r3, #0]
 802b8c6:	e7e8      	b.n	802b89a <_vfiprintf_r+0x396>
 802b8c8:	f04a 0a10 	orr.w	sl, sl, #16
 802b8cc:	f01a 0320 	ands.w	r3, sl, #32
 802b8d0:	d01f      	beq.n	802b912 <_vfiprintf_r+0x40e>
 802b8d2:	3507      	adds	r5, #7
 802b8d4:	f025 0507 	bic.w	r5, r5, #7
 802b8d8:	46a8      	mov	r8, r5
 802b8da:	686d      	ldr	r5, [r5, #4]
 802b8dc:	f858 4b08 	ldr.w	r4, [r8], #8
 802b8e0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b8e4:	2300      	movs	r3, #0
 802b8e6:	2200      	movs	r2, #0
 802b8e8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802b8ec:	9a01      	ldr	r2, [sp, #4]
 802b8ee:	3201      	adds	r2, #1
 802b8f0:	f000 825f 	beq.w	802bdb2 <_vfiprintf_r+0x8ae>
 802b8f4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802b8f8:	9204      	str	r2, [sp, #16]
 802b8fa:	ea54 0205 	orrs.w	r2, r4, r5
 802b8fe:	f040 825e 	bne.w	802bdbe <_vfiprintf_r+0x8ba>
 802b902:	9a01      	ldr	r2, [sp, #4]
 802b904:	2a00      	cmp	r2, #0
 802b906:	f000 8198 	beq.w	802bc3a <_vfiprintf_r+0x736>
 802b90a:	2b01      	cmp	r3, #1
 802b90c:	f040 825a 	bne.w	802bdc4 <_vfiprintf_r+0x8c0>
 802b910:	e13b      	b.n	802bb8a <_vfiprintf_r+0x686>
 802b912:	46a8      	mov	r8, r5
 802b914:	f01a 0510 	ands.w	r5, sl, #16
 802b918:	f858 4b04 	ldr.w	r4, [r8], #4
 802b91c:	d001      	beq.n	802b922 <_vfiprintf_r+0x41e>
 802b91e:	461d      	mov	r5, r3
 802b920:	e7de      	b.n	802b8e0 <_vfiprintf_r+0x3dc>
 802b922:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b926:	d001      	beq.n	802b92c <_vfiprintf_r+0x428>
 802b928:	b2a4      	uxth	r4, r4
 802b92a:	e7d9      	b.n	802b8e0 <_vfiprintf_r+0x3dc>
 802b92c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b930:	d0d6      	beq.n	802b8e0 <_vfiprintf_r+0x3dc>
 802b932:	b2e4      	uxtb	r4, r4
 802b934:	e7f3      	b.n	802b91e <_vfiprintf_r+0x41a>
 802b936:	46a8      	mov	r8, r5
 802b938:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b93c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802b940:	f858 4b04 	ldr.w	r4, [r8], #4
 802b944:	4b03      	ldr	r3, [pc, #12]	@ (802b954 <_vfiprintf_r+0x450>)
 802b946:	9305      	str	r3, [sp, #20]
 802b948:	2500      	movs	r5, #0
 802b94a:	f04a 0a02 	orr.w	sl, sl, #2
 802b94e:	2302      	movs	r3, #2
 802b950:	e7c9      	b.n	802b8e6 <_vfiprintf_r+0x3e2>
 802b952:	bf00      	nop
 802b954:	0803bc8b 	.word	0x0803bc8b
 802b958:	9b01      	ldr	r3, [sp, #4]
 802b95a:	46a8      	mov	r8, r5
 802b95c:	1c5c      	adds	r4, r3, #1
 802b95e:	f04f 0500 	mov.w	r5, #0
 802b962:	f858 9b04 	ldr.w	r9, [r8], #4
 802b966:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802b96a:	f000 80d0 	beq.w	802bb0e <_vfiprintf_r+0x60a>
 802b96e:	461a      	mov	r2, r3
 802b970:	4629      	mov	r1, r5
 802b972:	4648      	mov	r0, r9
 802b974:	f7e4 fc44 	bl	8010200 <memchr>
 802b978:	4604      	mov	r4, r0
 802b97a:	b118      	cbz	r0, 802b984 <_vfiprintf_r+0x480>
 802b97c:	eba0 0309 	sub.w	r3, r0, r9
 802b980:	9301      	str	r3, [sp, #4]
 802b982:	462c      	mov	r4, r5
 802b984:	9b01      	ldr	r3, [sp, #4]
 802b986:	42a3      	cmp	r3, r4
 802b988:	bfb8      	it	lt
 802b98a:	4623      	movlt	r3, r4
 802b98c:	9304      	str	r3, [sp, #16]
 802b98e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b992:	b113      	cbz	r3, 802b99a <_vfiprintf_r+0x496>
 802b994:	9b04      	ldr	r3, [sp, #16]
 802b996:	3301      	adds	r3, #1
 802b998:	9304      	str	r3, [sp, #16]
 802b99a:	f01a 0302 	ands.w	r3, sl, #2
 802b99e:	9308      	str	r3, [sp, #32]
 802b9a0:	bf1e      	ittt	ne
 802b9a2:	9b04      	ldrne	r3, [sp, #16]
 802b9a4:	3302      	addne	r3, #2
 802b9a6:	9304      	strne	r3, [sp, #16]
 802b9a8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802b9ac:	930a      	str	r3, [sp, #40]	@ 0x28
 802b9ae:	d11f      	bne.n	802b9f0 <_vfiprintf_r+0x4ec>
 802b9b0:	9b02      	ldr	r3, [sp, #8]
 802b9b2:	9a04      	ldr	r2, [sp, #16]
 802b9b4:	1a9d      	subs	r5, r3, r2
 802b9b6:	2d00      	cmp	r5, #0
 802b9b8:	dd1a      	ble.n	802b9f0 <_vfiprintf_r+0x4ec>
 802b9ba:	4ba9      	ldr	r3, [pc, #676]	@ (802bc60 <_vfiprintf_r+0x75c>)
 802b9bc:	6033      	str	r3, [r6, #0]
 802b9be:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b9c2:	2d10      	cmp	r5, #16
 802b9c4:	f102 0201 	add.w	r2, r2, #1
 802b9c8:	f106 0008 	add.w	r0, r6, #8
 802b9cc:	f300 814e 	bgt.w	802bc6c <_vfiprintf_r+0x768>
 802b9d0:	6075      	str	r5, [r6, #4]
 802b9d2:	2a07      	cmp	r2, #7
 802b9d4:	4465      	add	r5, ip
 802b9d6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b9da:	f340 815a 	ble.w	802bc92 <_vfiprintf_r+0x78e>
 802b9de:	9800      	ldr	r0, [sp, #0]
 802b9e0:	aa0e      	add	r2, sp, #56	@ 0x38
 802b9e2:	4639      	mov	r1, r7
 802b9e4:	f7ff fd5c 	bl	802b4a0 <__sprint_r>
 802b9e8:	2800      	cmp	r0, #0
 802b9ea:	f040 81b4 	bne.w	802bd56 <_vfiprintf_r+0x852>
 802b9ee:	ae11      	add	r6, sp, #68	@ 0x44
 802b9f0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802b9f4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b9f8:	b161      	cbz	r1, 802ba14 <_vfiprintf_r+0x510>
 802b9fa:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802b9fe:	3301      	adds	r3, #1
 802ba00:	6031      	str	r1, [r6, #0]
 802ba02:	2101      	movs	r1, #1
 802ba04:	440a      	add	r2, r1
 802ba06:	2b07      	cmp	r3, #7
 802ba08:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ba0c:	6071      	str	r1, [r6, #4]
 802ba0e:	f300 8142 	bgt.w	802bc96 <_vfiprintf_r+0x792>
 802ba12:	3608      	adds	r6, #8
 802ba14:	9908      	ldr	r1, [sp, #32]
 802ba16:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ba1a:	b159      	cbz	r1, 802ba34 <_vfiprintf_r+0x530>
 802ba1c:	a90d      	add	r1, sp, #52	@ 0x34
 802ba1e:	3301      	adds	r3, #1
 802ba20:	6031      	str	r1, [r6, #0]
 802ba22:	2102      	movs	r1, #2
 802ba24:	440a      	add	r2, r1
 802ba26:	2b07      	cmp	r3, #7
 802ba28:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ba2c:	6071      	str	r1, [r6, #4]
 802ba2e:	f300 813b 	bgt.w	802bca8 <_vfiprintf_r+0x7a4>
 802ba32:	3608      	adds	r6, #8
 802ba34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ba36:	2b80      	cmp	r3, #128	@ 0x80
 802ba38:	d11f      	bne.n	802ba7a <_vfiprintf_r+0x576>
 802ba3a:	9b02      	ldr	r3, [sp, #8]
 802ba3c:	9a04      	ldr	r2, [sp, #16]
 802ba3e:	1a9d      	subs	r5, r3, r2
 802ba40:	2d00      	cmp	r5, #0
 802ba42:	dd1a      	ble.n	802ba7a <_vfiprintf_r+0x576>
 802ba44:	4b87      	ldr	r3, [pc, #540]	@ (802bc64 <_vfiprintf_r+0x760>)
 802ba46:	6033      	str	r3, [r6, #0]
 802ba48:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ba4c:	2d10      	cmp	r5, #16
 802ba4e:	f102 0201 	add.w	r2, r2, #1
 802ba52:	f106 0008 	add.w	r0, r6, #8
 802ba56:	f300 8130 	bgt.w	802bcba <_vfiprintf_r+0x7b6>
 802ba5a:	6075      	str	r5, [r6, #4]
 802ba5c:	2a07      	cmp	r2, #7
 802ba5e:	4465      	add	r5, ip
 802ba60:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802ba64:	f340 813c 	ble.w	802bce0 <_vfiprintf_r+0x7dc>
 802ba68:	9800      	ldr	r0, [sp, #0]
 802ba6a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ba6c:	4639      	mov	r1, r7
 802ba6e:	f7ff fd17 	bl	802b4a0 <__sprint_r>
 802ba72:	2800      	cmp	r0, #0
 802ba74:	f040 816f 	bne.w	802bd56 <_vfiprintf_r+0x852>
 802ba78:	ae11      	add	r6, sp, #68	@ 0x44
 802ba7a:	9b01      	ldr	r3, [sp, #4]
 802ba7c:	1ae4      	subs	r4, r4, r3
 802ba7e:	2c00      	cmp	r4, #0
 802ba80:	dd1a      	ble.n	802bab8 <_vfiprintf_r+0x5b4>
 802ba82:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ba86:	4877      	ldr	r0, [pc, #476]	@ (802bc64 <_vfiprintf_r+0x760>)
 802ba88:	6030      	str	r0, [r6, #0]
 802ba8a:	2c10      	cmp	r4, #16
 802ba8c:	f103 0301 	add.w	r3, r3, #1
 802ba90:	f106 0108 	add.w	r1, r6, #8
 802ba94:	f300 8126 	bgt.w	802bce4 <_vfiprintf_r+0x7e0>
 802ba98:	6074      	str	r4, [r6, #4]
 802ba9a:	2b07      	cmp	r3, #7
 802ba9c:	4414      	add	r4, r2
 802ba9e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802baa2:	f340 8130 	ble.w	802bd06 <_vfiprintf_r+0x802>
 802baa6:	9800      	ldr	r0, [sp, #0]
 802baa8:	aa0e      	add	r2, sp, #56	@ 0x38
 802baaa:	4639      	mov	r1, r7
 802baac:	f7ff fcf8 	bl	802b4a0 <__sprint_r>
 802bab0:	2800      	cmp	r0, #0
 802bab2:	f040 8150 	bne.w	802bd56 <_vfiprintf_r+0x852>
 802bab6:	ae11      	add	r6, sp, #68	@ 0x44
 802bab8:	9b01      	ldr	r3, [sp, #4]
 802baba:	9a01      	ldr	r2, [sp, #4]
 802babc:	6073      	str	r3, [r6, #4]
 802babe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bac0:	f8c6 9000 	str.w	r9, [r6]
 802bac4:	4413      	add	r3, r2
 802bac6:	9310      	str	r3, [sp, #64]	@ 0x40
 802bac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802baca:	3301      	adds	r3, #1
 802bacc:	2b07      	cmp	r3, #7
 802bace:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bad0:	f300 811b 	bgt.w	802bd0a <_vfiprintf_r+0x806>
 802bad4:	f106 0308 	add.w	r3, r6, #8
 802bad8:	f01a 0f04 	tst.w	sl, #4
 802badc:	f040 811d 	bne.w	802bd1a <_vfiprintf_r+0x816>
 802bae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bae4:	9904      	ldr	r1, [sp, #16]
 802bae6:	428a      	cmp	r2, r1
 802bae8:	bfac      	ite	ge
 802baea:	189b      	addge	r3, r3, r2
 802baec:	185b      	addlt	r3, r3, r1
 802baee:	9303      	str	r3, [sp, #12]
 802baf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802baf2:	b13b      	cbz	r3, 802bb04 <_vfiprintf_r+0x600>
 802baf4:	9800      	ldr	r0, [sp, #0]
 802baf6:	aa0e      	add	r2, sp, #56	@ 0x38
 802baf8:	4639      	mov	r1, r7
 802bafa:	f7ff fcd1 	bl	802b4a0 <__sprint_r>
 802bafe:	2800      	cmp	r0, #0
 802bb00:	f040 8129 	bne.w	802bd56 <_vfiprintf_r+0x852>
 802bb04:	2300      	movs	r3, #0
 802bb06:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bb08:	4645      	mov	r5, r8
 802bb0a:	ae11      	add	r6, sp, #68	@ 0x44
 802bb0c:	e55b      	b.n	802b5c6 <_vfiprintf_r+0xc2>
 802bb0e:	4648      	mov	r0, r9
 802bb10:	f7e4 fbc6 	bl	80102a0 <strlen>
 802bb14:	9001      	str	r0, [sp, #4]
 802bb16:	e734      	b.n	802b982 <_vfiprintf_r+0x47e>
 802bb18:	f04a 0a10 	orr.w	sl, sl, #16
 802bb1c:	f01a 0320 	ands.w	r3, sl, #32
 802bb20:	d008      	beq.n	802bb34 <_vfiprintf_r+0x630>
 802bb22:	3507      	adds	r5, #7
 802bb24:	f025 0507 	bic.w	r5, r5, #7
 802bb28:	46a8      	mov	r8, r5
 802bb2a:	686d      	ldr	r5, [r5, #4]
 802bb2c:	f858 4b08 	ldr.w	r4, [r8], #8
 802bb30:	2301      	movs	r3, #1
 802bb32:	e6d8      	b.n	802b8e6 <_vfiprintf_r+0x3e2>
 802bb34:	46a8      	mov	r8, r5
 802bb36:	f01a 0510 	ands.w	r5, sl, #16
 802bb3a:	f858 4b04 	ldr.w	r4, [r8], #4
 802bb3e:	d001      	beq.n	802bb44 <_vfiprintf_r+0x640>
 802bb40:	461d      	mov	r5, r3
 802bb42:	e7f5      	b.n	802bb30 <_vfiprintf_r+0x62c>
 802bb44:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bb48:	d001      	beq.n	802bb4e <_vfiprintf_r+0x64a>
 802bb4a:	b2a4      	uxth	r4, r4
 802bb4c:	e7f0      	b.n	802bb30 <_vfiprintf_r+0x62c>
 802bb4e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bb52:	d0ed      	beq.n	802bb30 <_vfiprintf_r+0x62c>
 802bb54:	b2e4      	uxtb	r4, r4
 802bb56:	e7f3      	b.n	802bb40 <_vfiprintf_r+0x63c>
 802bb58:	4a43      	ldr	r2, [pc, #268]	@ (802bc68 <_vfiprintf_r+0x764>)
 802bb5a:	e5c9      	b.n	802b6f0 <_vfiprintf_r+0x1ec>
 802bb5c:	46a8      	mov	r8, r5
 802bb5e:	f01a 0510 	ands.w	r5, sl, #16
 802bb62:	f858 4b04 	ldr.w	r4, [r8], #4
 802bb66:	d001      	beq.n	802bb6c <_vfiprintf_r+0x668>
 802bb68:	4615      	mov	r5, r2
 802bb6a:	e5cd      	b.n	802b708 <_vfiprintf_r+0x204>
 802bb6c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802bb70:	d001      	beq.n	802bb76 <_vfiprintf_r+0x672>
 802bb72:	b2a4      	uxth	r4, r4
 802bb74:	e5c8      	b.n	802b708 <_vfiprintf_r+0x204>
 802bb76:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bb7a:	f43f adc5 	beq.w	802b708 <_vfiprintf_r+0x204>
 802bb7e:	b2e4      	uxtb	r4, r4
 802bb80:	e7f2      	b.n	802bb68 <_vfiprintf_r+0x664>
 802bb82:	2c0a      	cmp	r4, #10
 802bb84:	f175 0300 	sbcs.w	r3, r5, #0
 802bb88:	d206      	bcs.n	802bb98 <_vfiprintf_r+0x694>
 802bb8a:	3430      	adds	r4, #48	@ 0x30
 802bb8c:	b2e4      	uxtb	r4, r4
 802bb8e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802bb92:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802bb96:	e131      	b.n	802bdfc <_vfiprintf_r+0x8f8>
 802bb98:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bb9a:	9308      	str	r3, [sp, #32]
 802bb9c:	9b04      	ldr	r3, [sp, #16]
 802bb9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802bba2:	f04f 0a00 	mov.w	sl, #0
 802bba6:	930a      	str	r3, [sp, #40]	@ 0x28
 802bba8:	220a      	movs	r2, #10
 802bbaa:	2300      	movs	r3, #0
 802bbac:	4620      	mov	r0, r4
 802bbae:	4629      	mov	r1, r5
 802bbb0:	f7e5 f8d2 	bl	8010d58 <__aeabi_uldivmod>
 802bbb4:	460b      	mov	r3, r1
 802bbb6:	9908      	ldr	r1, [sp, #32]
 802bbb8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802bbba:	3230      	adds	r2, #48	@ 0x30
 802bbbc:	f801 2c01 	strb.w	r2, [r1, #-1]
 802bbc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802bbc2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802bbc6:	f10a 0a01 	add.w	sl, sl, #1
 802bbca:	b1e2      	cbz	r2, 802bc06 <_vfiprintf_r+0x702>
 802bbcc:	9a06      	ldr	r2, [sp, #24]
 802bbce:	7812      	ldrb	r2, [r2, #0]
 802bbd0:	4552      	cmp	r2, sl
 802bbd2:	d118      	bne.n	802bc06 <_vfiprintf_r+0x702>
 802bbd4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802bbd8:	d015      	beq.n	802bc06 <_vfiprintf_r+0x702>
 802bbda:	2c0a      	cmp	r4, #10
 802bbdc:	f175 0200 	sbcs.w	r2, r5, #0
 802bbe0:	d311      	bcc.n	802bc06 <_vfiprintf_r+0x702>
 802bbe2:	9308      	str	r3, [sp, #32]
 802bbe4:	9b07      	ldr	r3, [sp, #28]
 802bbe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802bbe8:	eba9 0903 	sub.w	r9, r9, r3
 802bbec:	461a      	mov	r2, r3
 802bbee:	4648      	mov	r0, r9
 802bbf0:	f000 ff3d 	bl	802ca6e <strncpy>
 802bbf4:	9b06      	ldr	r3, [sp, #24]
 802bbf6:	785a      	ldrb	r2, [r3, #1]
 802bbf8:	9b08      	ldr	r3, [sp, #32]
 802bbfa:	b172      	cbz	r2, 802bc1a <_vfiprintf_r+0x716>
 802bbfc:	9a06      	ldr	r2, [sp, #24]
 802bbfe:	3201      	adds	r2, #1
 802bc00:	9206      	str	r2, [sp, #24]
 802bc02:	f04f 0a00 	mov.w	sl, #0
 802bc06:	2c0a      	cmp	r4, #10
 802bc08:	f175 0500 	sbcs.w	r5, r5, #0
 802bc0c:	f0c0 80f6 	bcc.w	802bdfc <_vfiprintf_r+0x8f8>
 802bc10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802bc12:	f8cd 9020 	str.w	r9, [sp, #32]
 802bc16:	461d      	mov	r5, r3
 802bc18:	e7c6      	b.n	802bba8 <_vfiprintf_r+0x6a4>
 802bc1a:	4692      	mov	sl, r2
 802bc1c:	e7f3      	b.n	802bc06 <_vfiprintf_r+0x702>
 802bc1e:	f004 030f 	and.w	r3, r4, #15
 802bc22:	9a05      	ldr	r2, [sp, #20]
 802bc24:	0924      	lsrs	r4, r4, #4
 802bc26:	5cd3      	ldrb	r3, [r2, r3]
 802bc28:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bc2c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802bc30:	092d      	lsrs	r5, r5, #4
 802bc32:	ea54 0305 	orrs.w	r3, r4, r5
 802bc36:	d1f2      	bne.n	802bc1e <_vfiprintf_r+0x71a>
 802bc38:	e0e0      	b.n	802bdfc <_vfiprintf_r+0x8f8>
 802bc3a:	b923      	cbnz	r3, 802bc46 <_vfiprintf_r+0x742>
 802bc3c:	f01a 0f01 	tst.w	sl, #1
 802bc40:	d001      	beq.n	802bc46 <_vfiprintf_r+0x742>
 802bc42:	2430      	movs	r4, #48	@ 0x30
 802bc44:	e7a3      	b.n	802bb8e <_vfiprintf_r+0x68a>
 802bc46:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bc4a:	e0d7      	b.n	802bdfc <_vfiprintf_r+0x8f8>
 802bc4c:	2b00      	cmp	r3, #0
 802bc4e:	f000 80a3 	beq.w	802bd98 <_vfiprintf_r+0x894>
 802bc52:	2400      	movs	r4, #0
 802bc54:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802bc58:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bc5c:	46a8      	mov	r8, r5
 802bc5e:	e5e0      	b.n	802b822 <_vfiprintf_r+0x31e>
 802bc60:	0803bcdf 	.word	0x0803bcdf
 802bc64:	0803bccf 	.word	0x0803bccf
 802bc68:	0803bc9c 	.word	0x0803bc9c
 802bc6c:	2110      	movs	r1, #16
 802bc6e:	6071      	str	r1, [r6, #4]
 802bc70:	2a07      	cmp	r2, #7
 802bc72:	4461      	add	r1, ip
 802bc74:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bc78:	dd08      	ble.n	802bc8c <_vfiprintf_r+0x788>
 802bc7a:	9800      	ldr	r0, [sp, #0]
 802bc7c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc7e:	4639      	mov	r1, r7
 802bc80:	f7ff fc0e 	bl	802b4a0 <__sprint_r>
 802bc84:	2800      	cmp	r0, #0
 802bc86:	d166      	bne.n	802bd56 <_vfiprintf_r+0x852>
 802bc88:	4b60      	ldr	r3, [pc, #384]	@ (802be0c <_vfiprintf_r+0x908>)
 802bc8a:	a811      	add	r0, sp, #68	@ 0x44
 802bc8c:	3d10      	subs	r5, #16
 802bc8e:	4606      	mov	r6, r0
 802bc90:	e694      	b.n	802b9bc <_vfiprintf_r+0x4b8>
 802bc92:	4606      	mov	r6, r0
 802bc94:	e6ac      	b.n	802b9f0 <_vfiprintf_r+0x4ec>
 802bc96:	9800      	ldr	r0, [sp, #0]
 802bc98:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc9a:	4639      	mov	r1, r7
 802bc9c:	f7ff fc00 	bl	802b4a0 <__sprint_r>
 802bca0:	2800      	cmp	r0, #0
 802bca2:	d158      	bne.n	802bd56 <_vfiprintf_r+0x852>
 802bca4:	ae11      	add	r6, sp, #68	@ 0x44
 802bca6:	e6b5      	b.n	802ba14 <_vfiprintf_r+0x510>
 802bca8:	9800      	ldr	r0, [sp, #0]
 802bcaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802bcac:	4639      	mov	r1, r7
 802bcae:	f7ff fbf7 	bl	802b4a0 <__sprint_r>
 802bcb2:	2800      	cmp	r0, #0
 802bcb4:	d14f      	bne.n	802bd56 <_vfiprintf_r+0x852>
 802bcb6:	ae11      	add	r6, sp, #68	@ 0x44
 802bcb8:	e6bc      	b.n	802ba34 <_vfiprintf_r+0x530>
 802bcba:	2110      	movs	r1, #16
 802bcbc:	6071      	str	r1, [r6, #4]
 802bcbe:	2a07      	cmp	r2, #7
 802bcc0:	4461      	add	r1, ip
 802bcc2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bcc6:	dd08      	ble.n	802bcda <_vfiprintf_r+0x7d6>
 802bcc8:	9800      	ldr	r0, [sp, #0]
 802bcca:	aa0e      	add	r2, sp, #56	@ 0x38
 802bccc:	4639      	mov	r1, r7
 802bcce:	f7ff fbe7 	bl	802b4a0 <__sprint_r>
 802bcd2:	2800      	cmp	r0, #0
 802bcd4:	d13f      	bne.n	802bd56 <_vfiprintf_r+0x852>
 802bcd6:	4b4e      	ldr	r3, [pc, #312]	@ (802be10 <_vfiprintf_r+0x90c>)
 802bcd8:	a811      	add	r0, sp, #68	@ 0x44
 802bcda:	3d10      	subs	r5, #16
 802bcdc:	4606      	mov	r6, r0
 802bcde:	e6b2      	b.n	802ba46 <_vfiprintf_r+0x542>
 802bce0:	4606      	mov	r6, r0
 802bce2:	e6ca      	b.n	802ba7a <_vfiprintf_r+0x576>
 802bce4:	2010      	movs	r0, #16
 802bce6:	4402      	add	r2, r0
 802bce8:	2b07      	cmp	r3, #7
 802bcea:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bcee:	6070      	str	r0, [r6, #4]
 802bcf0:	dd06      	ble.n	802bd00 <_vfiprintf_r+0x7fc>
 802bcf2:	9800      	ldr	r0, [sp, #0]
 802bcf4:	aa0e      	add	r2, sp, #56	@ 0x38
 802bcf6:	4639      	mov	r1, r7
 802bcf8:	f7ff fbd2 	bl	802b4a0 <__sprint_r>
 802bcfc:	bb58      	cbnz	r0, 802bd56 <_vfiprintf_r+0x852>
 802bcfe:	a911      	add	r1, sp, #68	@ 0x44
 802bd00:	3c10      	subs	r4, #16
 802bd02:	460e      	mov	r6, r1
 802bd04:	e6bd      	b.n	802ba82 <_vfiprintf_r+0x57e>
 802bd06:	460e      	mov	r6, r1
 802bd08:	e6d6      	b.n	802bab8 <_vfiprintf_r+0x5b4>
 802bd0a:	9800      	ldr	r0, [sp, #0]
 802bd0c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd0e:	4639      	mov	r1, r7
 802bd10:	f7ff fbc6 	bl	802b4a0 <__sprint_r>
 802bd14:	b9f8      	cbnz	r0, 802bd56 <_vfiprintf_r+0x852>
 802bd16:	ab11      	add	r3, sp, #68	@ 0x44
 802bd18:	e6de      	b.n	802bad8 <_vfiprintf_r+0x5d4>
 802bd1a:	9a02      	ldr	r2, [sp, #8]
 802bd1c:	9904      	ldr	r1, [sp, #16]
 802bd1e:	1a54      	subs	r4, r2, r1
 802bd20:	2c00      	cmp	r4, #0
 802bd22:	f77f aedd 	ble.w	802bae0 <_vfiprintf_r+0x5dc>
 802bd26:	4d39      	ldr	r5, [pc, #228]	@ (802be0c <_vfiprintf_r+0x908>)
 802bd28:	2610      	movs	r6, #16
 802bd2a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802bd2e:	2c10      	cmp	r4, #16
 802bd30:	f102 0201 	add.w	r2, r2, #1
 802bd34:	601d      	str	r5, [r3, #0]
 802bd36:	dc1d      	bgt.n	802bd74 <_vfiprintf_r+0x870>
 802bd38:	605c      	str	r4, [r3, #4]
 802bd3a:	2a07      	cmp	r2, #7
 802bd3c:	440c      	add	r4, r1
 802bd3e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802bd42:	f77f aecd 	ble.w	802bae0 <_vfiprintf_r+0x5dc>
 802bd46:	9800      	ldr	r0, [sp, #0]
 802bd48:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd4a:	4639      	mov	r1, r7
 802bd4c:	f7ff fba8 	bl	802b4a0 <__sprint_r>
 802bd50:	2800      	cmp	r0, #0
 802bd52:	f43f aec5 	beq.w	802bae0 <_vfiprintf_r+0x5dc>
 802bd56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bd58:	07d9      	lsls	r1, r3, #31
 802bd5a:	d405      	bmi.n	802bd68 <_vfiprintf_r+0x864>
 802bd5c:	89bb      	ldrh	r3, [r7, #12]
 802bd5e:	059a      	lsls	r2, r3, #22
 802bd60:	d402      	bmi.n	802bd68 <_vfiprintf_r+0x864>
 802bd62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bd64:	f002 f877 	bl	802de56 <__retarget_lock_release_recursive>
 802bd68:	89bb      	ldrh	r3, [r7, #12]
 802bd6a:	065b      	lsls	r3, r3, #25
 802bd6c:	f57f abfb 	bpl.w	802b566 <_vfiprintf_r+0x62>
 802bd70:	f7ff bbf6 	b.w	802b560 <_vfiprintf_r+0x5c>
 802bd74:	3110      	adds	r1, #16
 802bd76:	2a07      	cmp	r2, #7
 802bd78:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bd7c:	605e      	str	r6, [r3, #4]
 802bd7e:	dc02      	bgt.n	802bd86 <_vfiprintf_r+0x882>
 802bd80:	3308      	adds	r3, #8
 802bd82:	3c10      	subs	r4, #16
 802bd84:	e7d1      	b.n	802bd2a <_vfiprintf_r+0x826>
 802bd86:	9800      	ldr	r0, [sp, #0]
 802bd88:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd8a:	4639      	mov	r1, r7
 802bd8c:	f7ff fb88 	bl	802b4a0 <__sprint_r>
 802bd90:	2800      	cmp	r0, #0
 802bd92:	d1e0      	bne.n	802bd56 <_vfiprintf_r+0x852>
 802bd94:	ab11      	add	r3, sp, #68	@ 0x44
 802bd96:	e7f4      	b.n	802bd82 <_vfiprintf_r+0x87e>
 802bd98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bd9a:	b913      	cbnz	r3, 802bda2 <_vfiprintf_r+0x89e>
 802bd9c:	2300      	movs	r3, #0
 802bd9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bda0:	e7d9      	b.n	802bd56 <_vfiprintf_r+0x852>
 802bda2:	9800      	ldr	r0, [sp, #0]
 802bda4:	aa0e      	add	r2, sp, #56	@ 0x38
 802bda6:	4639      	mov	r1, r7
 802bda8:	f7ff fb7a 	bl	802b4a0 <__sprint_r>
 802bdac:	2800      	cmp	r0, #0
 802bdae:	d0f5      	beq.n	802bd9c <_vfiprintf_r+0x898>
 802bdb0:	e7d1      	b.n	802bd56 <_vfiprintf_r+0x852>
 802bdb2:	ea54 0205 	orrs.w	r2, r4, r5
 802bdb6:	f8cd a010 	str.w	sl, [sp, #16]
 802bdba:	f43f ada6 	beq.w	802b90a <_vfiprintf_r+0x406>
 802bdbe:	2b01      	cmp	r3, #1
 802bdc0:	f43f aedf 	beq.w	802bb82 <_vfiprintf_r+0x67e>
 802bdc4:	2b02      	cmp	r3, #2
 802bdc6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bdca:	f43f af28 	beq.w	802bc1e <_vfiprintf_r+0x71a>
 802bdce:	f004 0307 	and.w	r3, r4, #7
 802bdd2:	08e4      	lsrs	r4, r4, #3
 802bdd4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802bdd8:	08ed      	lsrs	r5, r5, #3
 802bdda:	3330      	adds	r3, #48	@ 0x30
 802bddc:	ea54 0105 	orrs.w	r1, r4, r5
 802bde0:	464a      	mov	r2, r9
 802bde2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bde6:	d1f2      	bne.n	802bdce <_vfiprintf_r+0x8ca>
 802bde8:	9904      	ldr	r1, [sp, #16]
 802bdea:	07c8      	lsls	r0, r1, #31
 802bdec:	d506      	bpl.n	802bdfc <_vfiprintf_r+0x8f8>
 802bdee:	2b30      	cmp	r3, #48	@ 0x30
 802bdf0:	d004      	beq.n	802bdfc <_vfiprintf_r+0x8f8>
 802bdf2:	2330      	movs	r3, #48	@ 0x30
 802bdf4:	f809 3c01 	strb.w	r3, [r9, #-1]
 802bdf8:	f1a2 0902 	sub.w	r9, r2, #2
 802bdfc:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bdfe:	eba3 0309 	sub.w	r3, r3, r9
 802be02:	9c01      	ldr	r4, [sp, #4]
 802be04:	f8dd a010 	ldr.w	sl, [sp, #16]
 802be08:	9301      	str	r3, [sp, #4]
 802be0a:	e5bb      	b.n	802b984 <_vfiprintf_r+0x480>
 802be0c:	0803bcdf 	.word	0x0803bcdf
 802be10:	0803bccf 	.word	0x0803bccf

0802be14 <__sbprintf>:
 802be14:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be16:	461f      	mov	r7, r3
 802be18:	898b      	ldrh	r3, [r1, #12]
 802be1a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802be1e:	f023 0302 	bic.w	r3, r3, #2
 802be22:	f8ad 300c 	strh.w	r3, [sp, #12]
 802be26:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802be28:	9319      	str	r3, [sp, #100]	@ 0x64
 802be2a:	89cb      	ldrh	r3, [r1, #14]
 802be2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802be30:	69cb      	ldr	r3, [r1, #28]
 802be32:	9307      	str	r3, [sp, #28]
 802be34:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802be36:	9309      	str	r3, [sp, #36]	@ 0x24
 802be38:	ab1a      	add	r3, sp, #104	@ 0x68
 802be3a:	9300      	str	r3, [sp, #0]
 802be3c:	9304      	str	r3, [sp, #16]
 802be3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802be42:	4615      	mov	r5, r2
 802be44:	4606      	mov	r6, r0
 802be46:	9302      	str	r3, [sp, #8]
 802be48:	9305      	str	r3, [sp, #20]
 802be4a:	a816      	add	r0, sp, #88	@ 0x58
 802be4c:	2300      	movs	r3, #0
 802be4e:	460c      	mov	r4, r1
 802be50:	9306      	str	r3, [sp, #24]
 802be52:	f001 fffb 	bl	802de4c <__retarget_lock_init_recursive>
 802be56:	462a      	mov	r2, r5
 802be58:	463b      	mov	r3, r7
 802be5a:	4669      	mov	r1, sp
 802be5c:	4630      	mov	r0, r6
 802be5e:	f7ff fb51 	bl	802b504 <_vfiprintf_r>
 802be62:	1e05      	subs	r5, r0, #0
 802be64:	db07      	blt.n	802be76 <__sbprintf+0x62>
 802be66:	4669      	mov	r1, sp
 802be68:	4630      	mov	r0, r6
 802be6a:	f000 f9d1 	bl	802c210 <_fflush_r>
 802be6e:	2800      	cmp	r0, #0
 802be70:	bf18      	it	ne
 802be72:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802be76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802be7a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802be7c:	065b      	lsls	r3, r3, #25
 802be7e:	bf42      	ittt	mi
 802be80:	89a3      	ldrhmi	r3, [r4, #12]
 802be82:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802be86:	81a3      	strhmi	r3, [r4, #12]
 802be88:	f001 ffe1 	bl	802de4e <__retarget_lock_close_recursive>
 802be8c:	4628      	mov	r0, r5
 802be8e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802be92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802be94 <putchar>:
 802be94:	4b02      	ldr	r3, [pc, #8]	@ (802bea0 <putchar+0xc>)
 802be96:	4601      	mov	r1, r0
 802be98:	6818      	ldr	r0, [r3, #0]
 802be9a:	6882      	ldr	r2, [r0, #8]
 802be9c:	f007 bacc 	b.w	8033438 <_putc_r>
 802bea0:	200002d8 	.word	0x200002d8

0802bea4 <_puts_r>:
 802bea4:	b530      	push	{r4, r5, lr}
 802bea6:	4605      	mov	r5, r0
 802bea8:	b089      	sub	sp, #36	@ 0x24
 802beaa:	4608      	mov	r0, r1
 802beac:	460c      	mov	r4, r1
 802beae:	f7e4 f9f7 	bl	80102a0 <strlen>
 802beb2:	4b1e      	ldr	r3, [pc, #120]	@ (802bf2c <_puts_r+0x88>)
 802beb4:	9306      	str	r3, [sp, #24]
 802beb6:	2301      	movs	r3, #1
 802beb8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802bebc:	9307      	str	r3, [sp, #28]
 802bebe:	4418      	add	r0, r3
 802bec0:	ab04      	add	r3, sp, #16
 802bec2:	9301      	str	r3, [sp, #4]
 802bec4:	2302      	movs	r3, #2
 802bec6:	9302      	str	r3, [sp, #8]
 802bec8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802beca:	68ac      	ldr	r4, [r5, #8]
 802becc:	9003      	str	r0, [sp, #12]
 802bece:	b913      	cbnz	r3, 802bed6 <_puts_r+0x32>
 802bed0:	4628      	mov	r0, r5
 802bed2:	f000 fadf 	bl	802c494 <__sinit>
 802bed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bed8:	07db      	lsls	r3, r3, #31
 802beda:	d405      	bmi.n	802bee8 <_puts_r+0x44>
 802bedc:	89a3      	ldrh	r3, [r4, #12]
 802bede:	0598      	lsls	r0, r3, #22
 802bee0:	d402      	bmi.n	802bee8 <_puts_r+0x44>
 802bee2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bee4:	f001 ffb5 	bl	802de52 <__retarget_lock_acquire_recursive>
 802bee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802beec:	0499      	lsls	r1, r3, #18
 802beee:	d406      	bmi.n	802befe <_puts_r+0x5a>
 802bef0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bef4:	81a3      	strh	r3, [r4, #12]
 802bef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802befc:	6663      	str	r3, [r4, #100]	@ 0x64
 802befe:	4628      	mov	r0, r5
 802bf00:	aa01      	add	r2, sp, #4
 802bf02:	4621      	mov	r1, r4
 802bf04:	f000 fb18 	bl	802c538 <__sfvwrite_r>
 802bf08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bf0a:	2800      	cmp	r0, #0
 802bf0c:	bf0c      	ite	eq
 802bf0e:	250a      	moveq	r5, #10
 802bf10:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bf14:	07da      	lsls	r2, r3, #31
 802bf16:	d405      	bmi.n	802bf24 <_puts_r+0x80>
 802bf18:	89a3      	ldrh	r3, [r4, #12]
 802bf1a:	059b      	lsls	r3, r3, #22
 802bf1c:	d402      	bmi.n	802bf24 <_puts_r+0x80>
 802bf1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bf20:	f001 ff99 	bl	802de56 <__retarget_lock_release_recursive>
 802bf24:	4628      	mov	r0, r5
 802bf26:	b009      	add	sp, #36	@ 0x24
 802bf28:	bd30      	pop	{r4, r5, pc}
 802bf2a:	bf00      	nop
 802bf2c:	0803bc79 	.word	0x0803bc79

0802bf30 <puts>:
 802bf30:	4b02      	ldr	r3, [pc, #8]	@ (802bf3c <puts+0xc>)
 802bf32:	4601      	mov	r1, r0
 802bf34:	6818      	ldr	r0, [r3, #0]
 802bf36:	f7ff bfb5 	b.w	802bea4 <_puts_r>
 802bf3a:	bf00      	nop
 802bf3c:	200002d8 	.word	0x200002d8

0802bf40 <srand>:
 802bf40:	4b03      	ldr	r3, [pc, #12]	@ (802bf50 <srand+0x10>)
 802bf42:	681b      	ldr	r3, [r3, #0]
 802bf44:	2200      	movs	r2, #0
 802bf46:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802bf4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802bf4e:	4770      	bx	lr
 802bf50:	200002d8 	.word	0x200002d8

0802bf54 <rand>:
 802bf54:	4b0a      	ldr	r3, [pc, #40]	@ (802bf80 <rand+0x2c>)
 802bf56:	480b      	ldr	r0, [pc, #44]	@ (802bf84 <rand+0x30>)
 802bf58:	6819      	ldr	r1, [r3, #0]
 802bf5a:	4a0b      	ldr	r2, [pc, #44]	@ (802bf88 <rand+0x34>)
 802bf5c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802bf60:	b510      	push	{r4, lr}
 802bf62:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802bf66:	4358      	muls	r0, r3
 802bf68:	fb02 0004 	mla	r0, r2, r4, r0
 802bf6c:	fba3 3202 	umull	r3, r2, r3, r2
 802bf70:	3301      	adds	r3, #1
 802bf72:	eb40 0002 	adc.w	r0, r0, r2
 802bf76:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802bf7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802bf7e:	bd10      	pop	{r4, pc}
 802bf80:	200002d8 	.word	0x200002d8
 802bf84:	5851f42d 	.word	0x5851f42d
 802bf88:	4c957f2d 	.word	0x4c957f2d

0802bf8c <snprintf>:
 802bf8c:	b40c      	push	{r2, r3}
 802bf8e:	b530      	push	{r4, r5, lr}
 802bf90:	4b17      	ldr	r3, [pc, #92]	@ (802bff0 <snprintf+0x64>)
 802bf92:	1e0c      	subs	r4, r1, #0
 802bf94:	681d      	ldr	r5, [r3, #0]
 802bf96:	b09d      	sub	sp, #116	@ 0x74
 802bf98:	da08      	bge.n	802bfac <snprintf+0x20>
 802bf9a:	238b      	movs	r3, #139	@ 0x8b
 802bf9c:	602b      	str	r3, [r5, #0]
 802bf9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bfa2:	b01d      	add	sp, #116	@ 0x74
 802bfa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bfa8:	b002      	add	sp, #8
 802bfaa:	4770      	bx	lr
 802bfac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802bfb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802bfb4:	bf14      	ite	ne
 802bfb6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802bfba:	4623      	moveq	r3, r4
 802bfbc:	9304      	str	r3, [sp, #16]
 802bfbe:	9307      	str	r3, [sp, #28]
 802bfc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802bfc4:	9002      	str	r0, [sp, #8]
 802bfc6:	9006      	str	r0, [sp, #24]
 802bfc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802bfcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802bfce:	ab21      	add	r3, sp, #132	@ 0x84
 802bfd0:	a902      	add	r1, sp, #8
 802bfd2:	4628      	mov	r0, r5
 802bfd4:	9301      	str	r3, [sp, #4]
 802bfd6:	f004 fe7b 	bl	8030cd0 <_svfprintf_r>
 802bfda:	1c43      	adds	r3, r0, #1
 802bfdc:	bfbc      	itt	lt
 802bfde:	238b      	movlt	r3, #139	@ 0x8b
 802bfe0:	602b      	strlt	r3, [r5, #0]
 802bfe2:	2c00      	cmp	r4, #0
 802bfe4:	d0dd      	beq.n	802bfa2 <snprintf+0x16>
 802bfe6:	9b02      	ldr	r3, [sp, #8]
 802bfe8:	2200      	movs	r2, #0
 802bfea:	701a      	strb	r2, [r3, #0]
 802bfec:	e7d9      	b.n	802bfa2 <snprintf+0x16>
 802bfee:	bf00      	nop
 802bff0:	200002d8 	.word	0x200002d8

0802bff4 <_strtol_l.constprop.0>:
 802bff4:	2b24      	cmp	r3, #36	@ 0x24
 802bff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bffa:	4686      	mov	lr, r0
 802bffc:	4690      	mov	r8, r2
 802bffe:	d801      	bhi.n	802c004 <_strtol_l.constprop.0+0x10>
 802c000:	2b01      	cmp	r3, #1
 802c002:	d106      	bne.n	802c012 <_strtol_l.constprop.0+0x1e>
 802c004:	f001 fef0 	bl	802dde8 <__errno>
 802c008:	2316      	movs	r3, #22
 802c00a:	6003      	str	r3, [r0, #0]
 802c00c:	2000      	movs	r0, #0
 802c00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c012:	4834      	ldr	r0, [pc, #208]	@ (802c0e4 <_strtol_l.constprop.0+0xf0>)
 802c014:	460d      	mov	r5, r1
 802c016:	462a      	mov	r2, r5
 802c018:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c01c:	5d06      	ldrb	r6, [r0, r4]
 802c01e:	f016 0608 	ands.w	r6, r6, #8
 802c022:	d1f8      	bne.n	802c016 <_strtol_l.constprop.0+0x22>
 802c024:	2c2d      	cmp	r4, #45	@ 0x2d
 802c026:	d12d      	bne.n	802c084 <_strtol_l.constprop.0+0x90>
 802c028:	782c      	ldrb	r4, [r5, #0]
 802c02a:	2601      	movs	r6, #1
 802c02c:	1c95      	adds	r5, r2, #2
 802c02e:	f033 0210 	bics.w	r2, r3, #16
 802c032:	d109      	bne.n	802c048 <_strtol_l.constprop.0+0x54>
 802c034:	2c30      	cmp	r4, #48	@ 0x30
 802c036:	d12a      	bne.n	802c08e <_strtol_l.constprop.0+0x9a>
 802c038:	782a      	ldrb	r2, [r5, #0]
 802c03a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c03e:	2a58      	cmp	r2, #88	@ 0x58
 802c040:	d125      	bne.n	802c08e <_strtol_l.constprop.0+0x9a>
 802c042:	786c      	ldrb	r4, [r5, #1]
 802c044:	2310      	movs	r3, #16
 802c046:	3502      	adds	r5, #2
 802c048:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c04c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c050:	2200      	movs	r2, #0
 802c052:	fbbc f9f3 	udiv	r9, ip, r3
 802c056:	4610      	mov	r0, r2
 802c058:	fb03 ca19 	mls	sl, r3, r9, ip
 802c05c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c060:	2f09      	cmp	r7, #9
 802c062:	d81b      	bhi.n	802c09c <_strtol_l.constprop.0+0xa8>
 802c064:	463c      	mov	r4, r7
 802c066:	42a3      	cmp	r3, r4
 802c068:	dd27      	ble.n	802c0ba <_strtol_l.constprop.0+0xc6>
 802c06a:	1c57      	adds	r7, r2, #1
 802c06c:	d007      	beq.n	802c07e <_strtol_l.constprop.0+0x8a>
 802c06e:	4581      	cmp	r9, r0
 802c070:	d320      	bcc.n	802c0b4 <_strtol_l.constprop.0+0xc0>
 802c072:	d101      	bne.n	802c078 <_strtol_l.constprop.0+0x84>
 802c074:	45a2      	cmp	sl, r4
 802c076:	db1d      	blt.n	802c0b4 <_strtol_l.constprop.0+0xc0>
 802c078:	fb00 4003 	mla	r0, r0, r3, r4
 802c07c:	2201      	movs	r2, #1
 802c07e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c082:	e7eb      	b.n	802c05c <_strtol_l.constprop.0+0x68>
 802c084:	2c2b      	cmp	r4, #43	@ 0x2b
 802c086:	bf04      	itt	eq
 802c088:	782c      	ldrbeq	r4, [r5, #0]
 802c08a:	1c95      	addeq	r5, r2, #2
 802c08c:	e7cf      	b.n	802c02e <_strtol_l.constprop.0+0x3a>
 802c08e:	2b00      	cmp	r3, #0
 802c090:	d1da      	bne.n	802c048 <_strtol_l.constprop.0+0x54>
 802c092:	2c30      	cmp	r4, #48	@ 0x30
 802c094:	bf0c      	ite	eq
 802c096:	2308      	moveq	r3, #8
 802c098:	230a      	movne	r3, #10
 802c09a:	e7d5      	b.n	802c048 <_strtol_l.constprop.0+0x54>
 802c09c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c0a0:	2f19      	cmp	r7, #25
 802c0a2:	d801      	bhi.n	802c0a8 <_strtol_l.constprop.0+0xb4>
 802c0a4:	3c37      	subs	r4, #55	@ 0x37
 802c0a6:	e7de      	b.n	802c066 <_strtol_l.constprop.0+0x72>
 802c0a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c0ac:	2f19      	cmp	r7, #25
 802c0ae:	d804      	bhi.n	802c0ba <_strtol_l.constprop.0+0xc6>
 802c0b0:	3c57      	subs	r4, #87	@ 0x57
 802c0b2:	e7d8      	b.n	802c066 <_strtol_l.constprop.0+0x72>
 802c0b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c0b8:	e7e1      	b.n	802c07e <_strtol_l.constprop.0+0x8a>
 802c0ba:	1c53      	adds	r3, r2, #1
 802c0bc:	d108      	bne.n	802c0d0 <_strtol_l.constprop.0+0xdc>
 802c0be:	2322      	movs	r3, #34	@ 0x22
 802c0c0:	f8ce 3000 	str.w	r3, [lr]
 802c0c4:	4660      	mov	r0, ip
 802c0c6:	f1b8 0f00 	cmp.w	r8, #0
 802c0ca:	d0a0      	beq.n	802c00e <_strtol_l.constprop.0+0x1a>
 802c0cc:	1e69      	subs	r1, r5, #1
 802c0ce:	e006      	b.n	802c0de <_strtol_l.constprop.0+0xea>
 802c0d0:	b106      	cbz	r6, 802c0d4 <_strtol_l.constprop.0+0xe0>
 802c0d2:	4240      	negs	r0, r0
 802c0d4:	f1b8 0f00 	cmp.w	r8, #0
 802c0d8:	d099      	beq.n	802c00e <_strtol_l.constprop.0+0x1a>
 802c0da:	2a00      	cmp	r2, #0
 802c0dc:	d1f6      	bne.n	802c0cc <_strtol_l.constprop.0+0xd8>
 802c0de:	f8c8 1000 	str.w	r1, [r8]
 802c0e2:	e794      	b.n	802c00e <_strtol_l.constprop.0+0x1a>
 802c0e4:	0803c039 	.word	0x0803c039

0802c0e8 <_strtol_r>:
 802c0e8:	f7ff bf84 	b.w	802bff4 <_strtol_l.constprop.0>

0802c0ec <strtol>:
 802c0ec:	4613      	mov	r3, r2
 802c0ee:	460a      	mov	r2, r1
 802c0f0:	4601      	mov	r1, r0
 802c0f2:	4802      	ldr	r0, [pc, #8]	@ (802c0fc <strtol+0x10>)
 802c0f4:	6800      	ldr	r0, [r0, #0]
 802c0f6:	f7ff bf7d 	b.w	802bff4 <_strtol_l.constprop.0>
 802c0fa:	bf00      	nop
 802c0fc:	200002d8 	.word	0x200002d8

0802c100 <__sflush_r>:
 802c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c104:	4605      	mov	r5, r0
 802c106:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c10a:	0706      	lsls	r6, r0, #28
 802c10c:	460c      	mov	r4, r1
 802c10e:	d457      	bmi.n	802c1c0 <__sflush_r+0xc0>
 802c110:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c114:	818b      	strh	r3, [r1, #12]
 802c116:	684b      	ldr	r3, [r1, #4]
 802c118:	2b00      	cmp	r3, #0
 802c11a:	dc02      	bgt.n	802c122 <__sflush_r+0x22>
 802c11c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c11e:	2b00      	cmp	r3, #0
 802c120:	dd4c      	ble.n	802c1bc <__sflush_r+0xbc>
 802c122:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c124:	2e00      	cmp	r6, #0
 802c126:	d049      	beq.n	802c1bc <__sflush_r+0xbc>
 802c128:	2300      	movs	r3, #0
 802c12a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c12e:	682f      	ldr	r7, [r5, #0]
 802c130:	69e1      	ldr	r1, [r4, #28]
 802c132:	602b      	str	r3, [r5, #0]
 802c134:	d034      	beq.n	802c1a0 <__sflush_r+0xa0>
 802c136:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c138:	89a3      	ldrh	r3, [r4, #12]
 802c13a:	0759      	lsls	r1, r3, #29
 802c13c:	d505      	bpl.n	802c14a <__sflush_r+0x4a>
 802c13e:	6863      	ldr	r3, [r4, #4]
 802c140:	1ad2      	subs	r2, r2, r3
 802c142:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c144:	b10b      	cbz	r3, 802c14a <__sflush_r+0x4a>
 802c146:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c148:	1ad2      	subs	r2, r2, r3
 802c14a:	2300      	movs	r3, #0
 802c14c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c14e:	69e1      	ldr	r1, [r4, #28]
 802c150:	4628      	mov	r0, r5
 802c152:	47b0      	blx	r6
 802c154:	1c43      	adds	r3, r0, #1
 802c156:	d106      	bne.n	802c166 <__sflush_r+0x66>
 802c158:	682a      	ldr	r2, [r5, #0]
 802c15a:	2a1d      	cmp	r2, #29
 802c15c:	d848      	bhi.n	802c1f0 <__sflush_r+0xf0>
 802c15e:	4b2b      	ldr	r3, [pc, #172]	@ (802c20c <__sflush_r+0x10c>)
 802c160:	4113      	asrs	r3, r2
 802c162:	07de      	lsls	r6, r3, #31
 802c164:	d444      	bmi.n	802c1f0 <__sflush_r+0xf0>
 802c166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c16a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c16e:	81a2      	strh	r2, [r4, #12]
 802c170:	2200      	movs	r2, #0
 802c172:	6062      	str	r2, [r4, #4]
 802c174:	04d9      	lsls	r1, r3, #19
 802c176:	6922      	ldr	r2, [r4, #16]
 802c178:	6022      	str	r2, [r4, #0]
 802c17a:	d504      	bpl.n	802c186 <__sflush_r+0x86>
 802c17c:	1c42      	adds	r2, r0, #1
 802c17e:	d101      	bne.n	802c184 <__sflush_r+0x84>
 802c180:	682b      	ldr	r3, [r5, #0]
 802c182:	b903      	cbnz	r3, 802c186 <__sflush_r+0x86>
 802c184:	6520      	str	r0, [r4, #80]	@ 0x50
 802c186:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c188:	602f      	str	r7, [r5, #0]
 802c18a:	b1b9      	cbz	r1, 802c1bc <__sflush_r+0xbc>
 802c18c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c190:	4299      	cmp	r1, r3
 802c192:	d002      	beq.n	802c19a <__sflush_r+0x9a>
 802c194:	4628      	mov	r0, r5
 802c196:	f002 fd61 	bl	802ec5c <_free_r>
 802c19a:	2300      	movs	r3, #0
 802c19c:	6323      	str	r3, [r4, #48]	@ 0x30
 802c19e:	e00d      	b.n	802c1bc <__sflush_r+0xbc>
 802c1a0:	2301      	movs	r3, #1
 802c1a2:	4628      	mov	r0, r5
 802c1a4:	47b0      	blx	r6
 802c1a6:	4602      	mov	r2, r0
 802c1a8:	1c50      	adds	r0, r2, #1
 802c1aa:	d1c5      	bne.n	802c138 <__sflush_r+0x38>
 802c1ac:	682b      	ldr	r3, [r5, #0]
 802c1ae:	2b00      	cmp	r3, #0
 802c1b0:	d0c2      	beq.n	802c138 <__sflush_r+0x38>
 802c1b2:	2b1d      	cmp	r3, #29
 802c1b4:	d001      	beq.n	802c1ba <__sflush_r+0xba>
 802c1b6:	2b16      	cmp	r3, #22
 802c1b8:	d11a      	bne.n	802c1f0 <__sflush_r+0xf0>
 802c1ba:	602f      	str	r7, [r5, #0]
 802c1bc:	2000      	movs	r0, #0
 802c1be:	e01e      	b.n	802c1fe <__sflush_r+0xfe>
 802c1c0:	690f      	ldr	r7, [r1, #16]
 802c1c2:	2f00      	cmp	r7, #0
 802c1c4:	d0fa      	beq.n	802c1bc <__sflush_r+0xbc>
 802c1c6:	0783      	lsls	r3, r0, #30
 802c1c8:	680e      	ldr	r6, [r1, #0]
 802c1ca:	bf08      	it	eq
 802c1cc:	694b      	ldreq	r3, [r1, #20]
 802c1ce:	600f      	str	r7, [r1, #0]
 802c1d0:	bf18      	it	ne
 802c1d2:	2300      	movne	r3, #0
 802c1d4:	eba6 0807 	sub.w	r8, r6, r7
 802c1d8:	608b      	str	r3, [r1, #8]
 802c1da:	f1b8 0f00 	cmp.w	r8, #0
 802c1de:	dded      	ble.n	802c1bc <__sflush_r+0xbc>
 802c1e0:	69e1      	ldr	r1, [r4, #28]
 802c1e2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c1e4:	4643      	mov	r3, r8
 802c1e6:	463a      	mov	r2, r7
 802c1e8:	4628      	mov	r0, r5
 802c1ea:	47b0      	blx	r6
 802c1ec:	2800      	cmp	r0, #0
 802c1ee:	dc08      	bgt.n	802c202 <__sflush_r+0x102>
 802c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c1f8:	81a3      	strh	r3, [r4, #12]
 802c1fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c202:	4407      	add	r7, r0
 802c204:	eba8 0800 	sub.w	r8, r8, r0
 802c208:	e7e7      	b.n	802c1da <__sflush_r+0xda>
 802c20a:	bf00      	nop
 802c20c:	dfbffffe 	.word	0xdfbffffe

0802c210 <_fflush_r>:
 802c210:	b538      	push	{r3, r4, r5, lr}
 802c212:	460c      	mov	r4, r1
 802c214:	4605      	mov	r5, r0
 802c216:	b118      	cbz	r0, 802c220 <_fflush_r+0x10>
 802c218:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c21a:	b90b      	cbnz	r3, 802c220 <_fflush_r+0x10>
 802c21c:	f000 f93a 	bl	802c494 <__sinit>
 802c220:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c224:	b1b8      	cbz	r0, 802c256 <_fflush_r+0x46>
 802c226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c228:	07db      	lsls	r3, r3, #31
 802c22a:	d404      	bmi.n	802c236 <_fflush_r+0x26>
 802c22c:	0581      	lsls	r1, r0, #22
 802c22e:	d402      	bmi.n	802c236 <_fflush_r+0x26>
 802c230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c232:	f001 fe0e 	bl	802de52 <__retarget_lock_acquire_recursive>
 802c236:	4628      	mov	r0, r5
 802c238:	4621      	mov	r1, r4
 802c23a:	f7ff ff61 	bl	802c100 <__sflush_r>
 802c23e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c240:	07da      	lsls	r2, r3, #31
 802c242:	4605      	mov	r5, r0
 802c244:	d405      	bmi.n	802c252 <_fflush_r+0x42>
 802c246:	89a3      	ldrh	r3, [r4, #12]
 802c248:	059b      	lsls	r3, r3, #22
 802c24a:	d402      	bmi.n	802c252 <_fflush_r+0x42>
 802c24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c24e:	f001 fe02 	bl	802de56 <__retarget_lock_release_recursive>
 802c252:	4628      	mov	r0, r5
 802c254:	bd38      	pop	{r3, r4, r5, pc}
 802c256:	4605      	mov	r5, r0
 802c258:	e7fb      	b.n	802c252 <_fflush_r+0x42>
	...

0802c25c <sprintf>:
 802c25c:	b40e      	push	{r1, r2, r3}
 802c25e:	b500      	push	{lr}
 802c260:	b09c      	sub	sp, #112	@ 0x70
 802c262:	ab1d      	add	r3, sp, #116	@ 0x74
 802c264:	9002      	str	r0, [sp, #8]
 802c266:	9006      	str	r0, [sp, #24]
 802c268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c26c:	4809      	ldr	r0, [pc, #36]	@ (802c294 <sprintf+0x38>)
 802c26e:	9107      	str	r1, [sp, #28]
 802c270:	9104      	str	r1, [sp, #16]
 802c272:	4909      	ldr	r1, [pc, #36]	@ (802c298 <sprintf+0x3c>)
 802c274:	f853 2b04 	ldr.w	r2, [r3], #4
 802c278:	9105      	str	r1, [sp, #20]
 802c27a:	6800      	ldr	r0, [r0, #0]
 802c27c:	9301      	str	r3, [sp, #4]
 802c27e:	a902      	add	r1, sp, #8
 802c280:	f004 fd26 	bl	8030cd0 <_svfprintf_r>
 802c284:	9b02      	ldr	r3, [sp, #8]
 802c286:	2200      	movs	r2, #0
 802c288:	701a      	strb	r2, [r3, #0]
 802c28a:	b01c      	add	sp, #112	@ 0x70
 802c28c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c290:	b003      	add	sp, #12
 802c292:	4770      	bx	lr
 802c294:	200002d8 	.word	0x200002d8
 802c298:	ffff0208 	.word	0xffff0208

0802c29c <sscanf>:
 802c29c:	b40e      	push	{r1, r2, r3}
 802c29e:	b530      	push	{r4, r5, lr}
 802c2a0:	b09c      	sub	sp, #112	@ 0x70
 802c2a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c2a4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c2a8:	f854 5b04 	ldr.w	r5, [r4], #4
 802c2ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c2b0:	9002      	str	r0, [sp, #8]
 802c2b2:	9006      	str	r0, [sp, #24]
 802c2b4:	f7e3 fff4 	bl	80102a0 <strlen>
 802c2b8:	4b0b      	ldr	r3, [pc, #44]	@ (802c2e8 <sscanf+0x4c>)
 802c2ba:	9003      	str	r0, [sp, #12]
 802c2bc:	9007      	str	r0, [sp, #28]
 802c2be:	930a      	str	r3, [sp, #40]	@ 0x28
 802c2c0:	480a      	ldr	r0, [pc, #40]	@ (802c2ec <sscanf+0x50>)
 802c2c2:	9401      	str	r4, [sp, #4]
 802c2c4:	2300      	movs	r3, #0
 802c2c6:	930e      	str	r3, [sp, #56]	@ 0x38
 802c2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c2ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c2ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c2d2:	462a      	mov	r2, r5
 802c2d4:	4623      	mov	r3, r4
 802c2d6:	a902      	add	r1, sp, #8
 802c2d8:	6800      	ldr	r0, [r0, #0]
 802c2da:	f005 ff3b 	bl	8032154 <__ssvfscanf_r>
 802c2de:	b01c      	add	sp, #112	@ 0x70
 802c2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c2e4:	b003      	add	sp, #12
 802c2e6:	4770      	bx	lr
 802c2e8:	0802c313 	.word	0x0802c313
 802c2ec:	200002d8 	.word	0x200002d8

0802c2f0 <__sread>:
 802c2f0:	b510      	push	{r4, lr}
 802c2f2:	460c      	mov	r4, r1
 802c2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c2f8:	f001 fd52 	bl	802dda0 <_read_r>
 802c2fc:	2800      	cmp	r0, #0
 802c2fe:	bfab      	itete	ge
 802c300:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c302:	89a3      	ldrhlt	r3, [r4, #12]
 802c304:	181b      	addge	r3, r3, r0
 802c306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c30a:	bfac      	ite	ge
 802c30c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c30e:	81a3      	strhlt	r3, [r4, #12]
 802c310:	bd10      	pop	{r4, pc}

0802c312 <__seofread>:
 802c312:	2000      	movs	r0, #0
 802c314:	4770      	bx	lr

0802c316 <__swrite>:
 802c316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c31a:	461f      	mov	r7, r3
 802c31c:	898b      	ldrh	r3, [r1, #12]
 802c31e:	05db      	lsls	r3, r3, #23
 802c320:	4605      	mov	r5, r0
 802c322:	460c      	mov	r4, r1
 802c324:	4616      	mov	r6, r2
 802c326:	d505      	bpl.n	802c334 <__swrite+0x1e>
 802c328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c32c:	2302      	movs	r3, #2
 802c32e:	2200      	movs	r2, #0
 802c330:	f001 fd24 	bl	802dd7c <_lseek_r>
 802c334:	89a3      	ldrh	r3, [r4, #12]
 802c336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c33a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c33e:	81a3      	strh	r3, [r4, #12]
 802c340:	4632      	mov	r2, r6
 802c342:	463b      	mov	r3, r7
 802c344:	4628      	mov	r0, r5
 802c346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c34a:	f001 bd3b 	b.w	802ddc4 <_write_r>

0802c34e <__sseek>:
 802c34e:	b510      	push	{r4, lr}
 802c350:	460c      	mov	r4, r1
 802c352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c356:	f001 fd11 	bl	802dd7c <_lseek_r>
 802c35a:	1c43      	adds	r3, r0, #1
 802c35c:	89a3      	ldrh	r3, [r4, #12]
 802c35e:	bf15      	itete	ne
 802c360:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c362:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c366:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c36a:	81a3      	strheq	r3, [r4, #12]
 802c36c:	bf18      	it	ne
 802c36e:	81a3      	strhne	r3, [r4, #12]
 802c370:	bd10      	pop	{r4, pc}

0802c372 <__sclose>:
 802c372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c376:	f001 bcc5 	b.w	802dd04 <_close_r>
	...

0802c37c <std>:
 802c37c:	2300      	movs	r3, #0
 802c37e:	b510      	push	{r4, lr}
 802c380:	4604      	mov	r4, r0
 802c382:	e9c0 3300 	strd	r3, r3, [r0]
 802c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c38a:	6083      	str	r3, [r0, #8]
 802c38c:	8181      	strh	r1, [r0, #12]
 802c38e:	6643      	str	r3, [r0, #100]	@ 0x64
 802c390:	81c2      	strh	r2, [r0, #14]
 802c392:	6183      	str	r3, [r0, #24]
 802c394:	4619      	mov	r1, r3
 802c396:	2208      	movs	r2, #8
 802c398:	305c      	adds	r0, #92	@ 0x5c
 802c39a:	f000 fb21 	bl	802c9e0 <memset>
 802c39e:	4b0d      	ldr	r3, [pc, #52]	@ (802c3d4 <std+0x58>)
 802c3a0:	6223      	str	r3, [r4, #32]
 802c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (802c3d8 <std+0x5c>)
 802c3a4:	6263      	str	r3, [r4, #36]	@ 0x24
 802c3a6:	4b0d      	ldr	r3, [pc, #52]	@ (802c3dc <std+0x60>)
 802c3a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c3aa:	4b0d      	ldr	r3, [pc, #52]	@ (802c3e0 <std+0x64>)
 802c3ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c3ae:	4b0d      	ldr	r3, [pc, #52]	@ (802c3e4 <std+0x68>)
 802c3b0:	61e4      	str	r4, [r4, #28]
 802c3b2:	429c      	cmp	r4, r3
 802c3b4:	d006      	beq.n	802c3c4 <std+0x48>
 802c3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c3ba:	4294      	cmp	r4, r2
 802c3bc:	d002      	beq.n	802c3c4 <std+0x48>
 802c3be:	33d0      	adds	r3, #208	@ 0xd0
 802c3c0:	429c      	cmp	r4, r3
 802c3c2:	d105      	bne.n	802c3d0 <std+0x54>
 802c3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c3cc:	f001 bd3e 	b.w	802de4c <__retarget_lock_init_recursive>
 802c3d0:	bd10      	pop	{r4, pc}
 802c3d2:	bf00      	nop
 802c3d4:	0802c2f1 	.word	0x0802c2f1
 802c3d8:	0802c317 	.word	0x0802c317
 802c3dc:	0802c34f 	.word	0x0802c34f
 802c3e0:	0802c373 	.word	0x0802c373
 802c3e4:	20019ee4 	.word	0x20019ee4

0802c3e8 <stdio_exit_handler>:
 802c3e8:	4a02      	ldr	r2, [pc, #8]	@ (802c3f4 <stdio_exit_handler+0xc>)
 802c3ea:	4903      	ldr	r1, [pc, #12]	@ (802c3f8 <stdio_exit_handler+0x10>)
 802c3ec:	4803      	ldr	r0, [pc, #12]	@ (802c3fc <stdio_exit_handler+0x14>)
 802c3ee:	f000 b9ef 	b.w	802c7d0 <_fwalk_sglue>
 802c3f2:	bf00      	nop
 802c3f4:	20000158 	.word	0x20000158
 802c3f8:	08033d91 	.word	0x08033d91
 802c3fc:	200002e0 	.word	0x200002e0

0802c400 <cleanup_stdio>:
 802c400:	6841      	ldr	r1, [r0, #4]
 802c402:	4b0c      	ldr	r3, [pc, #48]	@ (802c434 <cleanup_stdio+0x34>)
 802c404:	4299      	cmp	r1, r3
 802c406:	b510      	push	{r4, lr}
 802c408:	4604      	mov	r4, r0
 802c40a:	d001      	beq.n	802c410 <cleanup_stdio+0x10>
 802c40c:	f007 fcc0 	bl	8033d90 <_fclose_r>
 802c410:	68a1      	ldr	r1, [r4, #8]
 802c412:	4b09      	ldr	r3, [pc, #36]	@ (802c438 <cleanup_stdio+0x38>)
 802c414:	4299      	cmp	r1, r3
 802c416:	d002      	beq.n	802c41e <cleanup_stdio+0x1e>
 802c418:	4620      	mov	r0, r4
 802c41a:	f007 fcb9 	bl	8033d90 <_fclose_r>
 802c41e:	68e1      	ldr	r1, [r4, #12]
 802c420:	4b06      	ldr	r3, [pc, #24]	@ (802c43c <cleanup_stdio+0x3c>)
 802c422:	4299      	cmp	r1, r3
 802c424:	d004      	beq.n	802c430 <cleanup_stdio+0x30>
 802c426:	4620      	mov	r0, r4
 802c428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c42c:	f007 bcb0 	b.w	8033d90 <_fclose_r>
 802c430:	bd10      	pop	{r4, pc}
 802c432:	bf00      	nop
 802c434:	20019ee4 	.word	0x20019ee4
 802c438:	20019f4c 	.word	0x20019f4c
 802c43c:	20019fb4 	.word	0x20019fb4

0802c440 <global_stdio_init.part.0>:
 802c440:	b510      	push	{r4, lr}
 802c442:	4b0b      	ldr	r3, [pc, #44]	@ (802c470 <global_stdio_init.part.0+0x30>)
 802c444:	4c0b      	ldr	r4, [pc, #44]	@ (802c474 <global_stdio_init.part.0+0x34>)
 802c446:	4a0c      	ldr	r2, [pc, #48]	@ (802c478 <global_stdio_init.part.0+0x38>)
 802c448:	601a      	str	r2, [r3, #0]
 802c44a:	4620      	mov	r0, r4
 802c44c:	2200      	movs	r2, #0
 802c44e:	2104      	movs	r1, #4
 802c450:	f7ff ff94 	bl	802c37c <std>
 802c454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c458:	2201      	movs	r2, #1
 802c45a:	2109      	movs	r1, #9
 802c45c:	f7ff ff8e 	bl	802c37c <std>
 802c460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c464:	2202      	movs	r2, #2
 802c466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c46a:	2112      	movs	r1, #18
 802c46c:	f7ff bf86 	b.w	802c37c <std>
 802c470:	2001a01c 	.word	0x2001a01c
 802c474:	20019ee4 	.word	0x20019ee4
 802c478:	0802c3e9 	.word	0x0802c3e9

0802c47c <__sfp_lock_acquire>:
 802c47c:	4801      	ldr	r0, [pc, #4]	@ (802c484 <__sfp_lock_acquire+0x8>)
 802c47e:	f001 bce8 	b.w	802de52 <__retarget_lock_acquire_recursive>
 802c482:	bf00      	nop
 802c484:	2001a04c 	.word	0x2001a04c

0802c488 <__sfp_lock_release>:
 802c488:	4801      	ldr	r0, [pc, #4]	@ (802c490 <__sfp_lock_release+0x8>)
 802c48a:	f001 bce4 	b.w	802de56 <__retarget_lock_release_recursive>
 802c48e:	bf00      	nop
 802c490:	2001a04c 	.word	0x2001a04c

0802c494 <__sinit>:
 802c494:	b510      	push	{r4, lr}
 802c496:	4604      	mov	r4, r0
 802c498:	f7ff fff0 	bl	802c47c <__sfp_lock_acquire>
 802c49c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c49e:	b11b      	cbz	r3, 802c4a8 <__sinit+0x14>
 802c4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c4a4:	f7ff bff0 	b.w	802c488 <__sfp_lock_release>
 802c4a8:	4b04      	ldr	r3, [pc, #16]	@ (802c4bc <__sinit+0x28>)
 802c4aa:	6363      	str	r3, [r4, #52]	@ 0x34
 802c4ac:	4b04      	ldr	r3, [pc, #16]	@ (802c4c0 <__sinit+0x2c>)
 802c4ae:	681b      	ldr	r3, [r3, #0]
 802c4b0:	2b00      	cmp	r3, #0
 802c4b2:	d1f5      	bne.n	802c4a0 <__sinit+0xc>
 802c4b4:	f7ff ffc4 	bl	802c440 <global_stdio_init.part.0>
 802c4b8:	e7f2      	b.n	802c4a0 <__sinit+0xc>
 802c4ba:	bf00      	nop
 802c4bc:	0802c401 	.word	0x0802c401
 802c4c0:	2001a01c 	.word	0x2001a01c

0802c4c4 <_vsnprintf_r>:
 802c4c4:	b530      	push	{r4, r5, lr}
 802c4c6:	4614      	mov	r4, r2
 802c4c8:	2c00      	cmp	r4, #0
 802c4ca:	b09b      	sub	sp, #108	@ 0x6c
 802c4cc:	4605      	mov	r5, r0
 802c4ce:	461a      	mov	r2, r3
 802c4d0:	da05      	bge.n	802c4de <_vsnprintf_r+0x1a>
 802c4d2:	238b      	movs	r3, #139	@ 0x8b
 802c4d4:	6003      	str	r3, [r0, #0]
 802c4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c4da:	b01b      	add	sp, #108	@ 0x6c
 802c4dc:	bd30      	pop	{r4, r5, pc}
 802c4de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c4e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c4e6:	bf14      	ite	ne
 802c4e8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c4ec:	4623      	moveq	r3, r4
 802c4ee:	9302      	str	r3, [sp, #8]
 802c4f0:	9305      	str	r3, [sp, #20]
 802c4f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c4f6:	9100      	str	r1, [sp, #0]
 802c4f8:	9104      	str	r1, [sp, #16]
 802c4fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c4fe:	4669      	mov	r1, sp
 802c500:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802c502:	f004 fbe5 	bl	8030cd0 <_svfprintf_r>
 802c506:	1c43      	adds	r3, r0, #1
 802c508:	bfbc      	itt	lt
 802c50a:	238b      	movlt	r3, #139	@ 0x8b
 802c50c:	602b      	strlt	r3, [r5, #0]
 802c50e:	2c00      	cmp	r4, #0
 802c510:	d0e3      	beq.n	802c4da <_vsnprintf_r+0x16>
 802c512:	9b00      	ldr	r3, [sp, #0]
 802c514:	2200      	movs	r2, #0
 802c516:	701a      	strb	r2, [r3, #0]
 802c518:	e7df      	b.n	802c4da <_vsnprintf_r+0x16>
	...

0802c51c <vsnprintf>:
 802c51c:	b507      	push	{r0, r1, r2, lr}
 802c51e:	9300      	str	r3, [sp, #0]
 802c520:	4613      	mov	r3, r2
 802c522:	460a      	mov	r2, r1
 802c524:	4601      	mov	r1, r0
 802c526:	4803      	ldr	r0, [pc, #12]	@ (802c534 <vsnprintf+0x18>)
 802c528:	6800      	ldr	r0, [r0, #0]
 802c52a:	f7ff ffcb 	bl	802c4c4 <_vsnprintf_r>
 802c52e:	b003      	add	sp, #12
 802c530:	f85d fb04 	ldr.w	pc, [sp], #4
 802c534:	200002d8 	.word	0x200002d8

0802c538 <__sfvwrite_r>:
 802c538:	6893      	ldr	r3, [r2, #8]
 802c53a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c53e:	4606      	mov	r6, r0
 802c540:	460c      	mov	r4, r1
 802c542:	4691      	mov	r9, r2
 802c544:	b91b      	cbnz	r3, 802c54e <__sfvwrite_r+0x16>
 802c546:	2000      	movs	r0, #0
 802c548:	b003      	add	sp, #12
 802c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c54e:	898b      	ldrh	r3, [r1, #12]
 802c550:	0718      	lsls	r0, r3, #28
 802c552:	d550      	bpl.n	802c5f6 <__sfvwrite_r+0xbe>
 802c554:	690b      	ldr	r3, [r1, #16]
 802c556:	2b00      	cmp	r3, #0
 802c558:	d04d      	beq.n	802c5f6 <__sfvwrite_r+0xbe>
 802c55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c55e:	f8d9 8000 	ldr.w	r8, [r9]
 802c562:	f013 0702 	ands.w	r7, r3, #2
 802c566:	d16b      	bne.n	802c640 <__sfvwrite_r+0x108>
 802c568:	f013 0301 	ands.w	r3, r3, #1
 802c56c:	f000 809c 	beq.w	802c6a8 <__sfvwrite_r+0x170>
 802c570:	4638      	mov	r0, r7
 802c572:	46ba      	mov	sl, r7
 802c574:	46bb      	mov	fp, r7
 802c576:	f1bb 0f00 	cmp.w	fp, #0
 802c57a:	f000 8103 	beq.w	802c784 <__sfvwrite_r+0x24c>
 802c57e:	b950      	cbnz	r0, 802c596 <__sfvwrite_r+0x5e>
 802c580:	465a      	mov	r2, fp
 802c582:	210a      	movs	r1, #10
 802c584:	4650      	mov	r0, sl
 802c586:	f7e3 fe3b 	bl	8010200 <memchr>
 802c58a:	2800      	cmp	r0, #0
 802c58c:	f000 8100 	beq.w	802c790 <__sfvwrite_r+0x258>
 802c590:	3001      	adds	r0, #1
 802c592:	eba0 070a 	sub.w	r7, r0, sl
 802c596:	6820      	ldr	r0, [r4, #0]
 802c598:	6921      	ldr	r1, [r4, #16]
 802c59a:	68a5      	ldr	r5, [r4, #8]
 802c59c:	6963      	ldr	r3, [r4, #20]
 802c59e:	455f      	cmp	r7, fp
 802c5a0:	463a      	mov	r2, r7
 802c5a2:	bf28      	it	cs
 802c5a4:	465a      	movcs	r2, fp
 802c5a6:	4288      	cmp	r0, r1
 802c5a8:	f240 80f5 	bls.w	802c796 <__sfvwrite_r+0x25e>
 802c5ac:	441d      	add	r5, r3
 802c5ae:	42aa      	cmp	r2, r5
 802c5b0:	f340 80f1 	ble.w	802c796 <__sfvwrite_r+0x25e>
 802c5b4:	4651      	mov	r1, sl
 802c5b6:	462a      	mov	r2, r5
 802c5b8:	f000 f9f8 	bl	802c9ac <memmove>
 802c5bc:	6823      	ldr	r3, [r4, #0]
 802c5be:	442b      	add	r3, r5
 802c5c0:	6023      	str	r3, [r4, #0]
 802c5c2:	4621      	mov	r1, r4
 802c5c4:	4630      	mov	r0, r6
 802c5c6:	f7ff fe23 	bl	802c210 <_fflush_r>
 802c5ca:	2800      	cmp	r0, #0
 802c5cc:	d167      	bne.n	802c69e <__sfvwrite_r+0x166>
 802c5ce:	1b7f      	subs	r7, r7, r5
 802c5d0:	f040 80f9 	bne.w	802c7c6 <__sfvwrite_r+0x28e>
 802c5d4:	4621      	mov	r1, r4
 802c5d6:	4630      	mov	r0, r6
 802c5d8:	f7ff fe1a 	bl	802c210 <_fflush_r>
 802c5dc:	2800      	cmp	r0, #0
 802c5de:	d15e      	bne.n	802c69e <__sfvwrite_r+0x166>
 802c5e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c5e4:	1b5b      	subs	r3, r3, r5
 802c5e6:	44aa      	add	sl, r5
 802c5e8:	ebab 0b05 	sub.w	fp, fp, r5
 802c5ec:	f8c9 3008 	str.w	r3, [r9, #8]
 802c5f0:	2b00      	cmp	r3, #0
 802c5f2:	d1c0      	bne.n	802c576 <__sfvwrite_r+0x3e>
 802c5f4:	e7a7      	b.n	802c546 <__sfvwrite_r+0xe>
 802c5f6:	4621      	mov	r1, r4
 802c5f8:	4630      	mov	r0, r6
 802c5fa:	f000 f907 	bl	802c80c <__swsetup_r>
 802c5fe:	2800      	cmp	r0, #0
 802c600:	d0ab      	beq.n	802c55a <__sfvwrite_r+0x22>
 802c602:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c606:	e79f      	b.n	802c548 <__sfvwrite_r+0x10>
 802c608:	e9d8 a500 	ldrd	sl, r5, [r8]
 802c60c:	f108 0808 	add.w	r8, r8, #8
 802c610:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802c614:	69e1      	ldr	r1, [r4, #28]
 802c616:	2d00      	cmp	r5, #0
 802c618:	d0f6      	beq.n	802c608 <__sfvwrite_r+0xd0>
 802c61a:	42bd      	cmp	r5, r7
 802c61c:	462b      	mov	r3, r5
 802c61e:	4652      	mov	r2, sl
 802c620:	bf28      	it	cs
 802c622:	463b      	movcs	r3, r7
 802c624:	4630      	mov	r0, r6
 802c626:	47d8      	blx	fp
 802c628:	2800      	cmp	r0, #0
 802c62a:	dd38      	ble.n	802c69e <__sfvwrite_r+0x166>
 802c62c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c630:	1a1b      	subs	r3, r3, r0
 802c632:	4482      	add	sl, r0
 802c634:	1a2d      	subs	r5, r5, r0
 802c636:	f8c9 3008 	str.w	r3, [r9, #8]
 802c63a:	2b00      	cmp	r3, #0
 802c63c:	d1e8      	bne.n	802c610 <__sfvwrite_r+0xd8>
 802c63e:	e782      	b.n	802c546 <__sfvwrite_r+0xe>
 802c640:	f04f 0a00 	mov.w	sl, #0
 802c644:	4f61      	ldr	r7, [pc, #388]	@ (802c7cc <__sfvwrite_r+0x294>)
 802c646:	4655      	mov	r5, sl
 802c648:	e7e2      	b.n	802c610 <__sfvwrite_r+0xd8>
 802c64a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802c64e:	f108 0808 	add.w	r8, r8, #8
 802c652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c656:	6820      	ldr	r0, [r4, #0]
 802c658:	68a2      	ldr	r2, [r4, #8]
 802c65a:	f1ba 0f00 	cmp.w	sl, #0
 802c65e:	d0f4      	beq.n	802c64a <__sfvwrite_r+0x112>
 802c660:	0599      	lsls	r1, r3, #22
 802c662:	d563      	bpl.n	802c72c <__sfvwrite_r+0x1f4>
 802c664:	4552      	cmp	r2, sl
 802c666:	d836      	bhi.n	802c6d6 <__sfvwrite_r+0x19e>
 802c668:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802c66c:	d033      	beq.n	802c6d6 <__sfvwrite_r+0x19e>
 802c66e:	6921      	ldr	r1, [r4, #16]
 802c670:	6965      	ldr	r5, [r4, #20]
 802c672:	eba0 0b01 	sub.w	fp, r0, r1
 802c676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c67a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c67e:	f10b 0201 	add.w	r2, fp, #1
 802c682:	106d      	asrs	r5, r5, #1
 802c684:	4452      	add	r2, sl
 802c686:	4295      	cmp	r5, r2
 802c688:	bf38      	it	cc
 802c68a:	4615      	movcc	r5, r2
 802c68c:	055b      	lsls	r3, r3, #21
 802c68e:	d53d      	bpl.n	802c70c <__sfvwrite_r+0x1d4>
 802c690:	4629      	mov	r1, r5
 802c692:	4630      	mov	r0, r6
 802c694:	f002 fbfa 	bl	802ee8c <_malloc_r>
 802c698:	b948      	cbnz	r0, 802c6ae <__sfvwrite_r+0x176>
 802c69a:	230c      	movs	r3, #12
 802c69c:	6033      	str	r3, [r6, #0]
 802c69e:	89a3      	ldrh	r3, [r4, #12]
 802c6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c6a4:	81a3      	strh	r3, [r4, #12]
 802c6a6:	e7ac      	b.n	802c602 <__sfvwrite_r+0xca>
 802c6a8:	461f      	mov	r7, r3
 802c6aa:	469a      	mov	sl, r3
 802c6ac:	e7d1      	b.n	802c652 <__sfvwrite_r+0x11a>
 802c6ae:	465a      	mov	r2, fp
 802c6b0:	6921      	ldr	r1, [r4, #16]
 802c6b2:	9001      	str	r0, [sp, #4]
 802c6b4:	f001 fbd0 	bl	802de58 <memcpy>
 802c6b8:	89a2      	ldrh	r2, [r4, #12]
 802c6ba:	9b01      	ldr	r3, [sp, #4]
 802c6bc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c6c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c6c4:	81a2      	strh	r2, [r4, #12]
 802c6c6:	6123      	str	r3, [r4, #16]
 802c6c8:	6165      	str	r5, [r4, #20]
 802c6ca:	445b      	add	r3, fp
 802c6cc:	eba5 050b 	sub.w	r5, r5, fp
 802c6d0:	6023      	str	r3, [r4, #0]
 802c6d2:	4652      	mov	r2, sl
 802c6d4:	60a5      	str	r5, [r4, #8]
 802c6d6:	4552      	cmp	r2, sl
 802c6d8:	bf28      	it	cs
 802c6da:	4652      	movcs	r2, sl
 802c6dc:	6820      	ldr	r0, [r4, #0]
 802c6de:	9201      	str	r2, [sp, #4]
 802c6e0:	4639      	mov	r1, r7
 802c6e2:	f000 f963 	bl	802c9ac <memmove>
 802c6e6:	68a3      	ldr	r3, [r4, #8]
 802c6e8:	9a01      	ldr	r2, [sp, #4]
 802c6ea:	1a9b      	subs	r3, r3, r2
 802c6ec:	60a3      	str	r3, [r4, #8]
 802c6ee:	6823      	ldr	r3, [r4, #0]
 802c6f0:	4413      	add	r3, r2
 802c6f2:	4655      	mov	r5, sl
 802c6f4:	6023      	str	r3, [r4, #0]
 802c6f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c6fa:	1b5b      	subs	r3, r3, r5
 802c6fc:	442f      	add	r7, r5
 802c6fe:	ebaa 0a05 	sub.w	sl, sl, r5
 802c702:	f8c9 3008 	str.w	r3, [r9, #8]
 802c706:	2b00      	cmp	r3, #0
 802c708:	d1a3      	bne.n	802c652 <__sfvwrite_r+0x11a>
 802c70a:	e71c      	b.n	802c546 <__sfvwrite_r+0xe>
 802c70c:	462a      	mov	r2, r5
 802c70e:	4630      	mov	r0, r6
 802c710:	f007 fbcc 	bl	8033eac <_realloc_r>
 802c714:	4603      	mov	r3, r0
 802c716:	2800      	cmp	r0, #0
 802c718:	d1d5      	bne.n	802c6c6 <__sfvwrite_r+0x18e>
 802c71a:	6921      	ldr	r1, [r4, #16]
 802c71c:	4630      	mov	r0, r6
 802c71e:	f002 fa9d 	bl	802ec5c <_free_r>
 802c722:	89a3      	ldrh	r3, [r4, #12]
 802c724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802c728:	81a3      	strh	r3, [r4, #12]
 802c72a:	e7b6      	b.n	802c69a <__sfvwrite_r+0x162>
 802c72c:	6923      	ldr	r3, [r4, #16]
 802c72e:	4283      	cmp	r3, r0
 802c730:	d302      	bcc.n	802c738 <__sfvwrite_r+0x200>
 802c732:	6961      	ldr	r1, [r4, #20]
 802c734:	4551      	cmp	r1, sl
 802c736:	d915      	bls.n	802c764 <__sfvwrite_r+0x22c>
 802c738:	4552      	cmp	r2, sl
 802c73a:	bf28      	it	cs
 802c73c:	4652      	movcs	r2, sl
 802c73e:	4639      	mov	r1, r7
 802c740:	4615      	mov	r5, r2
 802c742:	f000 f933 	bl	802c9ac <memmove>
 802c746:	68a3      	ldr	r3, [r4, #8]
 802c748:	6822      	ldr	r2, [r4, #0]
 802c74a:	1b5b      	subs	r3, r3, r5
 802c74c:	442a      	add	r2, r5
 802c74e:	60a3      	str	r3, [r4, #8]
 802c750:	6022      	str	r2, [r4, #0]
 802c752:	2b00      	cmp	r3, #0
 802c754:	d1cf      	bne.n	802c6f6 <__sfvwrite_r+0x1be>
 802c756:	4621      	mov	r1, r4
 802c758:	4630      	mov	r0, r6
 802c75a:	f7ff fd59 	bl	802c210 <_fflush_r>
 802c75e:	2800      	cmp	r0, #0
 802c760:	d0c9      	beq.n	802c6f6 <__sfvwrite_r+0x1be>
 802c762:	e79c      	b.n	802c69e <__sfvwrite_r+0x166>
 802c764:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802c768:	4553      	cmp	r3, sl
 802c76a:	bf28      	it	cs
 802c76c:	4653      	movcs	r3, sl
 802c76e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c770:	fb93 f3f1 	sdiv	r3, r3, r1
 802c774:	463a      	mov	r2, r7
 802c776:	434b      	muls	r3, r1
 802c778:	4630      	mov	r0, r6
 802c77a:	69e1      	ldr	r1, [r4, #28]
 802c77c:	47a8      	blx	r5
 802c77e:	1e05      	subs	r5, r0, #0
 802c780:	dcb9      	bgt.n	802c6f6 <__sfvwrite_r+0x1be>
 802c782:	e78c      	b.n	802c69e <__sfvwrite_r+0x166>
 802c784:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802c788:	2000      	movs	r0, #0
 802c78a:	f108 0808 	add.w	r8, r8, #8
 802c78e:	e6f2      	b.n	802c576 <__sfvwrite_r+0x3e>
 802c790:	f10b 0701 	add.w	r7, fp, #1
 802c794:	e6ff      	b.n	802c596 <__sfvwrite_r+0x5e>
 802c796:	4293      	cmp	r3, r2
 802c798:	dc08      	bgt.n	802c7ac <__sfvwrite_r+0x274>
 802c79a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c79c:	69e1      	ldr	r1, [r4, #28]
 802c79e:	4652      	mov	r2, sl
 802c7a0:	4630      	mov	r0, r6
 802c7a2:	47a8      	blx	r5
 802c7a4:	1e05      	subs	r5, r0, #0
 802c7a6:	f73f af12 	bgt.w	802c5ce <__sfvwrite_r+0x96>
 802c7aa:	e778      	b.n	802c69e <__sfvwrite_r+0x166>
 802c7ac:	4651      	mov	r1, sl
 802c7ae:	9201      	str	r2, [sp, #4]
 802c7b0:	f000 f8fc 	bl	802c9ac <memmove>
 802c7b4:	9a01      	ldr	r2, [sp, #4]
 802c7b6:	68a3      	ldr	r3, [r4, #8]
 802c7b8:	1a9b      	subs	r3, r3, r2
 802c7ba:	60a3      	str	r3, [r4, #8]
 802c7bc:	6823      	ldr	r3, [r4, #0]
 802c7be:	4413      	add	r3, r2
 802c7c0:	6023      	str	r3, [r4, #0]
 802c7c2:	4615      	mov	r5, r2
 802c7c4:	e703      	b.n	802c5ce <__sfvwrite_r+0x96>
 802c7c6:	2001      	movs	r0, #1
 802c7c8:	e70a      	b.n	802c5e0 <__sfvwrite_r+0xa8>
 802c7ca:	bf00      	nop
 802c7cc:	7ffffc00 	.word	0x7ffffc00

0802c7d0 <_fwalk_sglue>:
 802c7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c7d4:	4607      	mov	r7, r0
 802c7d6:	4688      	mov	r8, r1
 802c7d8:	4614      	mov	r4, r2
 802c7da:	2600      	movs	r6, #0
 802c7dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c7e0:	f1b9 0901 	subs.w	r9, r9, #1
 802c7e4:	d505      	bpl.n	802c7f2 <_fwalk_sglue+0x22>
 802c7e6:	6824      	ldr	r4, [r4, #0]
 802c7e8:	2c00      	cmp	r4, #0
 802c7ea:	d1f7      	bne.n	802c7dc <_fwalk_sglue+0xc>
 802c7ec:	4630      	mov	r0, r6
 802c7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c7f2:	89ab      	ldrh	r3, [r5, #12]
 802c7f4:	2b01      	cmp	r3, #1
 802c7f6:	d907      	bls.n	802c808 <_fwalk_sglue+0x38>
 802c7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c7fc:	3301      	adds	r3, #1
 802c7fe:	d003      	beq.n	802c808 <_fwalk_sglue+0x38>
 802c800:	4629      	mov	r1, r5
 802c802:	4638      	mov	r0, r7
 802c804:	47c0      	blx	r8
 802c806:	4306      	orrs	r6, r0
 802c808:	3568      	adds	r5, #104	@ 0x68
 802c80a:	e7e9      	b.n	802c7e0 <_fwalk_sglue+0x10>

0802c80c <__swsetup_r>:
 802c80c:	b538      	push	{r3, r4, r5, lr}
 802c80e:	4b29      	ldr	r3, [pc, #164]	@ (802c8b4 <__swsetup_r+0xa8>)
 802c810:	4605      	mov	r5, r0
 802c812:	6818      	ldr	r0, [r3, #0]
 802c814:	460c      	mov	r4, r1
 802c816:	b118      	cbz	r0, 802c820 <__swsetup_r+0x14>
 802c818:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c81a:	b90b      	cbnz	r3, 802c820 <__swsetup_r+0x14>
 802c81c:	f7ff fe3a 	bl	802c494 <__sinit>
 802c820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c824:	0719      	lsls	r1, r3, #28
 802c826:	d422      	bmi.n	802c86e <__swsetup_r+0x62>
 802c828:	06da      	lsls	r2, r3, #27
 802c82a:	d407      	bmi.n	802c83c <__swsetup_r+0x30>
 802c82c:	2209      	movs	r2, #9
 802c82e:	602a      	str	r2, [r5, #0]
 802c830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c834:	81a3      	strh	r3, [r4, #12]
 802c836:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c83a:	e033      	b.n	802c8a4 <__swsetup_r+0x98>
 802c83c:	0758      	lsls	r0, r3, #29
 802c83e:	d512      	bpl.n	802c866 <__swsetup_r+0x5a>
 802c840:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c842:	b141      	cbz	r1, 802c856 <__swsetup_r+0x4a>
 802c844:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c848:	4299      	cmp	r1, r3
 802c84a:	d002      	beq.n	802c852 <__swsetup_r+0x46>
 802c84c:	4628      	mov	r0, r5
 802c84e:	f002 fa05 	bl	802ec5c <_free_r>
 802c852:	2300      	movs	r3, #0
 802c854:	6323      	str	r3, [r4, #48]	@ 0x30
 802c856:	89a3      	ldrh	r3, [r4, #12]
 802c858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c85c:	81a3      	strh	r3, [r4, #12]
 802c85e:	2300      	movs	r3, #0
 802c860:	6063      	str	r3, [r4, #4]
 802c862:	6923      	ldr	r3, [r4, #16]
 802c864:	6023      	str	r3, [r4, #0]
 802c866:	89a3      	ldrh	r3, [r4, #12]
 802c868:	f043 0308 	orr.w	r3, r3, #8
 802c86c:	81a3      	strh	r3, [r4, #12]
 802c86e:	6923      	ldr	r3, [r4, #16]
 802c870:	b94b      	cbnz	r3, 802c886 <__swsetup_r+0x7a>
 802c872:	89a3      	ldrh	r3, [r4, #12]
 802c874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c87c:	d003      	beq.n	802c886 <__swsetup_r+0x7a>
 802c87e:	4621      	mov	r1, r4
 802c880:	4628      	mov	r0, r5
 802c882:	f005 fc2b 	bl	80320dc <__smakebuf_r>
 802c886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c88a:	f013 0201 	ands.w	r2, r3, #1
 802c88e:	d00a      	beq.n	802c8a6 <__swsetup_r+0x9a>
 802c890:	2200      	movs	r2, #0
 802c892:	60a2      	str	r2, [r4, #8]
 802c894:	6962      	ldr	r2, [r4, #20]
 802c896:	4252      	negs	r2, r2
 802c898:	61a2      	str	r2, [r4, #24]
 802c89a:	6922      	ldr	r2, [r4, #16]
 802c89c:	b942      	cbnz	r2, 802c8b0 <__swsetup_r+0xa4>
 802c89e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c8a2:	d1c5      	bne.n	802c830 <__swsetup_r+0x24>
 802c8a4:	bd38      	pop	{r3, r4, r5, pc}
 802c8a6:	0799      	lsls	r1, r3, #30
 802c8a8:	bf58      	it	pl
 802c8aa:	6962      	ldrpl	r2, [r4, #20]
 802c8ac:	60a2      	str	r2, [r4, #8]
 802c8ae:	e7f4      	b.n	802c89a <__swsetup_r+0x8e>
 802c8b0:	2000      	movs	r0, #0
 802c8b2:	e7f7      	b.n	802c8a4 <__swsetup_r+0x98>
 802c8b4:	200002d8 	.word	0x200002d8

0802c8b8 <memcmp>:
 802c8b8:	b510      	push	{r4, lr}
 802c8ba:	3901      	subs	r1, #1
 802c8bc:	4402      	add	r2, r0
 802c8be:	4290      	cmp	r0, r2
 802c8c0:	d101      	bne.n	802c8c6 <memcmp+0xe>
 802c8c2:	2000      	movs	r0, #0
 802c8c4:	e005      	b.n	802c8d2 <memcmp+0x1a>
 802c8c6:	7803      	ldrb	r3, [r0, #0]
 802c8c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c8cc:	42a3      	cmp	r3, r4
 802c8ce:	d001      	beq.n	802c8d4 <memcmp+0x1c>
 802c8d0:	1b18      	subs	r0, r3, r4
 802c8d2:	bd10      	pop	{r4, pc}
 802c8d4:	3001      	adds	r0, #1
 802c8d6:	e7f2      	b.n	802c8be <memcmp+0x6>

0802c8d8 <__fputwc>:
 802c8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c8dc:	4680      	mov	r8, r0
 802c8de:	460f      	mov	r7, r1
 802c8e0:	4614      	mov	r4, r2
 802c8e2:	f001 fa05 	bl	802dcf0 <__locale_mb_cur_max>
 802c8e6:	2801      	cmp	r0, #1
 802c8e8:	4605      	mov	r5, r0
 802c8ea:	d11b      	bne.n	802c924 <__fputwc+0x4c>
 802c8ec:	1e7b      	subs	r3, r7, #1
 802c8ee:	2bfe      	cmp	r3, #254	@ 0xfe
 802c8f0:	d818      	bhi.n	802c924 <__fputwc+0x4c>
 802c8f2:	f88d 7004 	strb.w	r7, [sp, #4]
 802c8f6:	2600      	movs	r6, #0
 802c8f8:	f10d 0904 	add.w	r9, sp, #4
 802c8fc:	42ae      	cmp	r6, r5
 802c8fe:	d021      	beq.n	802c944 <__fputwc+0x6c>
 802c900:	68a3      	ldr	r3, [r4, #8]
 802c902:	f816 1009 	ldrb.w	r1, [r6, r9]
 802c906:	3b01      	subs	r3, #1
 802c908:	2b00      	cmp	r3, #0
 802c90a:	60a3      	str	r3, [r4, #8]
 802c90c:	da04      	bge.n	802c918 <__fputwc+0x40>
 802c90e:	69a2      	ldr	r2, [r4, #24]
 802c910:	4293      	cmp	r3, r2
 802c912:	db1b      	blt.n	802c94c <__fputwc+0x74>
 802c914:	290a      	cmp	r1, #10
 802c916:	d019      	beq.n	802c94c <__fputwc+0x74>
 802c918:	6823      	ldr	r3, [r4, #0]
 802c91a:	1c5a      	adds	r2, r3, #1
 802c91c:	6022      	str	r2, [r4, #0]
 802c91e:	7019      	strb	r1, [r3, #0]
 802c920:	3601      	adds	r6, #1
 802c922:	e7eb      	b.n	802c8fc <__fputwc+0x24>
 802c924:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802c928:	463a      	mov	r2, r7
 802c92a:	a901      	add	r1, sp, #4
 802c92c:	4640      	mov	r0, r8
 802c92e:	f001 faa1 	bl	802de74 <_wcrtomb_r>
 802c932:	1c43      	adds	r3, r0, #1
 802c934:	4605      	mov	r5, r0
 802c936:	d1de      	bne.n	802c8f6 <__fputwc+0x1e>
 802c938:	89a3      	ldrh	r3, [r4, #12]
 802c93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c93e:	81a3      	strh	r3, [r4, #12]
 802c940:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802c944:	4638      	mov	r0, r7
 802c946:	b003      	add	sp, #12
 802c948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c94c:	4622      	mov	r2, r4
 802c94e:	4640      	mov	r0, r8
 802c950:	f008 fb1d 	bl	8034f8e <__swbuf_r>
 802c954:	3001      	adds	r0, #1
 802c956:	d1e3      	bne.n	802c920 <__fputwc+0x48>
 802c958:	e7f2      	b.n	802c940 <__fputwc+0x68>

0802c95a <_fputwc_r>:
 802c95a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802c95c:	07db      	lsls	r3, r3, #31
 802c95e:	b570      	push	{r4, r5, r6, lr}
 802c960:	4605      	mov	r5, r0
 802c962:	460e      	mov	r6, r1
 802c964:	4614      	mov	r4, r2
 802c966:	d405      	bmi.n	802c974 <_fputwc_r+0x1a>
 802c968:	8993      	ldrh	r3, [r2, #12]
 802c96a:	0598      	lsls	r0, r3, #22
 802c96c:	d402      	bmi.n	802c974 <_fputwc_r+0x1a>
 802c96e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802c970:	f001 fa6f 	bl	802de52 <__retarget_lock_acquire_recursive>
 802c974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c978:	0499      	lsls	r1, r3, #18
 802c97a:	d406      	bmi.n	802c98a <_fputwc_r+0x30>
 802c97c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c980:	81a3      	strh	r3, [r4, #12]
 802c982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c984:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c988:	6663      	str	r3, [r4, #100]	@ 0x64
 802c98a:	4622      	mov	r2, r4
 802c98c:	4628      	mov	r0, r5
 802c98e:	4631      	mov	r1, r6
 802c990:	f7ff ffa2 	bl	802c8d8 <__fputwc>
 802c994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c996:	07da      	lsls	r2, r3, #31
 802c998:	4605      	mov	r5, r0
 802c99a:	d405      	bmi.n	802c9a8 <_fputwc_r+0x4e>
 802c99c:	89a3      	ldrh	r3, [r4, #12]
 802c99e:	059b      	lsls	r3, r3, #22
 802c9a0:	d402      	bmi.n	802c9a8 <_fputwc_r+0x4e>
 802c9a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c9a4:	f001 fa57 	bl	802de56 <__retarget_lock_release_recursive>
 802c9a8:	4628      	mov	r0, r5
 802c9aa:	bd70      	pop	{r4, r5, r6, pc}

0802c9ac <memmove>:
 802c9ac:	4288      	cmp	r0, r1
 802c9ae:	b510      	push	{r4, lr}
 802c9b0:	eb01 0402 	add.w	r4, r1, r2
 802c9b4:	d902      	bls.n	802c9bc <memmove+0x10>
 802c9b6:	4284      	cmp	r4, r0
 802c9b8:	4623      	mov	r3, r4
 802c9ba:	d807      	bhi.n	802c9cc <memmove+0x20>
 802c9bc:	1e43      	subs	r3, r0, #1
 802c9be:	42a1      	cmp	r1, r4
 802c9c0:	d008      	beq.n	802c9d4 <memmove+0x28>
 802c9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c9ca:	e7f8      	b.n	802c9be <memmove+0x12>
 802c9cc:	4402      	add	r2, r0
 802c9ce:	4601      	mov	r1, r0
 802c9d0:	428a      	cmp	r2, r1
 802c9d2:	d100      	bne.n	802c9d6 <memmove+0x2a>
 802c9d4:	bd10      	pop	{r4, pc}
 802c9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c9de:	e7f7      	b.n	802c9d0 <memmove+0x24>

0802c9e0 <memset>:
 802c9e0:	4402      	add	r2, r0
 802c9e2:	4603      	mov	r3, r0
 802c9e4:	4293      	cmp	r3, r2
 802c9e6:	d100      	bne.n	802c9ea <memset+0xa>
 802c9e8:	4770      	bx	lr
 802c9ea:	f803 1b01 	strb.w	r1, [r3], #1
 802c9ee:	e7f9      	b.n	802c9e4 <memset+0x4>

0802c9f0 <strcat>:
 802c9f0:	b510      	push	{r4, lr}
 802c9f2:	4602      	mov	r2, r0
 802c9f4:	7814      	ldrb	r4, [r2, #0]
 802c9f6:	4613      	mov	r3, r2
 802c9f8:	3201      	adds	r2, #1
 802c9fa:	2c00      	cmp	r4, #0
 802c9fc:	d1fa      	bne.n	802c9f4 <strcat+0x4>
 802c9fe:	3b01      	subs	r3, #1
 802ca00:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ca04:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ca08:	2a00      	cmp	r2, #0
 802ca0a:	d1f9      	bne.n	802ca00 <strcat+0x10>
 802ca0c:	bd10      	pop	{r4, pc}

0802ca0e <strchr>:
 802ca0e:	b2c9      	uxtb	r1, r1
 802ca10:	4603      	mov	r3, r0
 802ca12:	4618      	mov	r0, r3
 802ca14:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ca18:	b112      	cbz	r2, 802ca20 <strchr+0x12>
 802ca1a:	428a      	cmp	r2, r1
 802ca1c:	d1f9      	bne.n	802ca12 <strchr+0x4>
 802ca1e:	4770      	bx	lr
 802ca20:	2900      	cmp	r1, #0
 802ca22:	bf18      	it	ne
 802ca24:	2000      	movne	r0, #0
 802ca26:	4770      	bx	lr

0802ca28 <strcspn>:
 802ca28:	b570      	push	{r4, r5, r6, lr}
 802ca2a:	4603      	mov	r3, r0
 802ca2c:	461e      	mov	r6, r3
 802ca2e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802ca32:	b144      	cbz	r4, 802ca46 <strcspn+0x1e>
 802ca34:	1e4a      	subs	r2, r1, #1
 802ca36:	e001      	b.n	802ca3c <strcspn+0x14>
 802ca38:	42a5      	cmp	r5, r4
 802ca3a:	d004      	beq.n	802ca46 <strcspn+0x1e>
 802ca3c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802ca40:	2d00      	cmp	r5, #0
 802ca42:	d1f9      	bne.n	802ca38 <strcspn+0x10>
 802ca44:	e7f2      	b.n	802ca2c <strcspn+0x4>
 802ca46:	1a30      	subs	r0, r6, r0
 802ca48:	bd70      	pop	{r4, r5, r6, pc}

0802ca4a <strncmp>:
 802ca4a:	b510      	push	{r4, lr}
 802ca4c:	b16a      	cbz	r2, 802ca6a <strncmp+0x20>
 802ca4e:	3901      	subs	r1, #1
 802ca50:	1884      	adds	r4, r0, r2
 802ca52:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ca56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802ca5a:	429a      	cmp	r2, r3
 802ca5c:	d103      	bne.n	802ca66 <strncmp+0x1c>
 802ca5e:	42a0      	cmp	r0, r4
 802ca60:	d001      	beq.n	802ca66 <strncmp+0x1c>
 802ca62:	2a00      	cmp	r2, #0
 802ca64:	d1f5      	bne.n	802ca52 <strncmp+0x8>
 802ca66:	1ad0      	subs	r0, r2, r3
 802ca68:	bd10      	pop	{r4, pc}
 802ca6a:	4610      	mov	r0, r2
 802ca6c:	e7fc      	b.n	802ca68 <strncmp+0x1e>

0802ca6e <strncpy>:
 802ca6e:	b510      	push	{r4, lr}
 802ca70:	3901      	subs	r1, #1
 802ca72:	4603      	mov	r3, r0
 802ca74:	b132      	cbz	r2, 802ca84 <strncpy+0x16>
 802ca76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802ca7a:	f803 4b01 	strb.w	r4, [r3], #1
 802ca7e:	3a01      	subs	r2, #1
 802ca80:	2c00      	cmp	r4, #0
 802ca82:	d1f7      	bne.n	802ca74 <strncpy+0x6>
 802ca84:	441a      	add	r2, r3
 802ca86:	2100      	movs	r1, #0
 802ca88:	4293      	cmp	r3, r2
 802ca8a:	d100      	bne.n	802ca8e <strncpy+0x20>
 802ca8c:	bd10      	pop	{r4, pc}
 802ca8e:	f803 1b01 	strb.w	r1, [r3], #1
 802ca92:	e7f9      	b.n	802ca88 <strncpy+0x1a>

0802ca94 <strrchr>:
 802ca94:	b538      	push	{r3, r4, r5, lr}
 802ca96:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802ca9a:	4603      	mov	r3, r0
 802ca9c:	d10e      	bne.n	802cabc <strrchr+0x28>
 802ca9e:	4621      	mov	r1, r4
 802caa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802caa4:	f7ff bfb3 	b.w	802ca0e <strchr>
 802caa8:	1c43      	adds	r3, r0, #1
 802caaa:	4605      	mov	r5, r0
 802caac:	4621      	mov	r1, r4
 802caae:	4618      	mov	r0, r3
 802cab0:	f7ff ffad 	bl	802ca0e <strchr>
 802cab4:	2800      	cmp	r0, #0
 802cab6:	d1f7      	bne.n	802caa8 <strrchr+0x14>
 802cab8:	4628      	mov	r0, r5
 802caba:	bd38      	pop	{r3, r4, r5, pc}
 802cabc:	2500      	movs	r5, #0
 802cabe:	e7f5      	b.n	802caac <strrchr+0x18>

0802cac0 <strspn>:
 802cac0:	b570      	push	{r4, r5, r6, lr}
 802cac2:	4603      	mov	r3, r0
 802cac4:	461e      	mov	r6, r3
 802cac6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802caca:	b13c      	cbz	r4, 802cadc <strspn+0x1c>
 802cacc:	1e4a      	subs	r2, r1, #1
 802cace:	e001      	b.n	802cad4 <strspn+0x14>
 802cad0:	42a5      	cmp	r5, r4
 802cad2:	d0f7      	beq.n	802cac4 <strspn+0x4>
 802cad4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802cad8:	2d00      	cmp	r5, #0
 802cada:	d1f9      	bne.n	802cad0 <strspn+0x10>
 802cadc:	1a30      	subs	r0, r6, r0
 802cade:	bd70      	pop	{r4, r5, r6, pc}

0802cae0 <strstr>:
 802cae0:	780a      	ldrb	r2, [r1, #0]
 802cae2:	b570      	push	{r4, r5, r6, lr}
 802cae4:	b96a      	cbnz	r2, 802cb02 <strstr+0x22>
 802cae6:	bd70      	pop	{r4, r5, r6, pc}
 802cae8:	429a      	cmp	r2, r3
 802caea:	d109      	bne.n	802cb00 <strstr+0x20>
 802caec:	460c      	mov	r4, r1
 802caee:	4605      	mov	r5, r0
 802caf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802caf4:	2b00      	cmp	r3, #0
 802caf6:	d0f6      	beq.n	802cae6 <strstr+0x6>
 802caf8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802cafc:	429e      	cmp	r6, r3
 802cafe:	d0f7      	beq.n	802caf0 <strstr+0x10>
 802cb00:	3001      	adds	r0, #1
 802cb02:	7803      	ldrb	r3, [r0, #0]
 802cb04:	2b00      	cmp	r3, #0
 802cb06:	d1ef      	bne.n	802cae8 <strstr+0x8>
 802cb08:	4618      	mov	r0, r3
 802cb0a:	e7ec      	b.n	802cae6 <strstr+0x6>

0802cb0c <localtime_r>:
 802cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cb10:	460c      	mov	r4, r1
 802cb12:	4680      	mov	r8, r0
 802cb14:	f008 fab6 	bl	8035084 <__gettzinfo>
 802cb18:	4621      	mov	r1, r4
 802cb1a:	4605      	mov	r5, r0
 802cb1c:	4640      	mov	r0, r8
 802cb1e:	f008 fab5 	bl	803508c <gmtime_r>
 802cb22:	6943      	ldr	r3, [r0, #20]
 802cb24:	0799      	lsls	r1, r3, #30
 802cb26:	4604      	mov	r4, r0
 802cb28:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802cb2c:	d106      	bne.n	802cb3c <localtime_r+0x30>
 802cb2e:	2264      	movs	r2, #100	@ 0x64
 802cb30:	fb97 f3f2 	sdiv	r3, r7, r2
 802cb34:	fb02 7313 	mls	r3, r2, r3, r7
 802cb38:	2b00      	cmp	r3, #0
 802cb3a:	d170      	bne.n	802cc1e <localtime_r+0x112>
 802cb3c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cb40:	fb97 f3f2 	sdiv	r3, r7, r2
 802cb44:	fb02 7313 	mls	r3, r2, r3, r7
 802cb48:	fab3 f383 	clz	r3, r3
 802cb4c:	095b      	lsrs	r3, r3, #5
 802cb4e:	4e64      	ldr	r6, [pc, #400]	@ (802cce0 <localtime_r+0x1d4>)
 802cb50:	2230      	movs	r2, #48	@ 0x30
 802cb52:	fb02 6603 	mla	r6, r2, r3, r6
 802cb56:	f000 fe97 	bl	802d888 <__tz_lock>
 802cb5a:	f000 fea1 	bl	802d8a0 <_tzset_unlocked>
 802cb5e:	4b61      	ldr	r3, [pc, #388]	@ (802cce4 <localtime_r+0x1d8>)
 802cb60:	681b      	ldr	r3, [r3, #0]
 802cb62:	2b00      	cmp	r3, #0
 802cb64:	d06a      	beq.n	802cc3c <localtime_r+0x130>
 802cb66:	686b      	ldr	r3, [r5, #4]
 802cb68:	42bb      	cmp	r3, r7
 802cb6a:	d15a      	bne.n	802cc22 <localtime_r+0x116>
 802cb6c:	682f      	ldr	r7, [r5, #0]
 802cb6e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802cb72:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802cb76:	2f00      	cmp	r7, #0
 802cb78:	d15b      	bne.n	802cc32 <localtime_r+0x126>
 802cb7a:	4282      	cmp	r2, r0
 802cb7c:	eb73 0101 	sbcs.w	r1, r3, r1
 802cb80:	db5e      	blt.n	802cc40 <localtime_r+0x134>
 802cb82:	2301      	movs	r3, #1
 802cb84:	6223      	str	r3, [r4, #32]
 802cb86:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802cb88:	6861      	ldr	r1, [r4, #4]
 802cb8a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802cb8e:	fb93 f0f2 	sdiv	r0, r3, r2
 802cb92:	fb02 3310 	mls	r3, r2, r0, r3
 802cb96:	223c      	movs	r2, #60	@ 0x3c
 802cb98:	fb93 f5f2 	sdiv	r5, r3, r2
 802cb9c:	fb02 3215 	mls	r2, r2, r5, r3
 802cba0:	6823      	ldr	r3, [r4, #0]
 802cba2:	1a9b      	subs	r3, r3, r2
 802cba4:	68a2      	ldr	r2, [r4, #8]
 802cba6:	6023      	str	r3, [r4, #0]
 802cba8:	1b49      	subs	r1, r1, r5
 802cbaa:	1a12      	subs	r2, r2, r0
 802cbac:	2b3b      	cmp	r3, #59	@ 0x3b
 802cbae:	6061      	str	r1, [r4, #4]
 802cbb0:	60a2      	str	r2, [r4, #8]
 802cbb2:	dd51      	ble.n	802cc58 <localtime_r+0x14c>
 802cbb4:	3101      	adds	r1, #1
 802cbb6:	6061      	str	r1, [r4, #4]
 802cbb8:	3b3c      	subs	r3, #60	@ 0x3c
 802cbba:	6023      	str	r3, [r4, #0]
 802cbbc:	6863      	ldr	r3, [r4, #4]
 802cbbe:	2b3b      	cmp	r3, #59	@ 0x3b
 802cbc0:	dd50      	ble.n	802cc64 <localtime_r+0x158>
 802cbc2:	3201      	adds	r2, #1
 802cbc4:	60a2      	str	r2, [r4, #8]
 802cbc6:	3b3c      	subs	r3, #60	@ 0x3c
 802cbc8:	6063      	str	r3, [r4, #4]
 802cbca:	68a3      	ldr	r3, [r4, #8]
 802cbcc:	2b17      	cmp	r3, #23
 802cbce:	dd4f      	ble.n	802cc70 <localtime_r+0x164>
 802cbd0:	69e2      	ldr	r2, [r4, #28]
 802cbd2:	3201      	adds	r2, #1
 802cbd4:	61e2      	str	r2, [r4, #28]
 802cbd6:	69a2      	ldr	r2, [r4, #24]
 802cbd8:	3201      	adds	r2, #1
 802cbda:	2a07      	cmp	r2, #7
 802cbdc:	bfa8      	it	ge
 802cbde:	2200      	movge	r2, #0
 802cbe0:	61a2      	str	r2, [r4, #24]
 802cbe2:	68e2      	ldr	r2, [r4, #12]
 802cbe4:	3b18      	subs	r3, #24
 802cbe6:	3201      	adds	r2, #1
 802cbe8:	60a3      	str	r3, [r4, #8]
 802cbea:	6923      	ldr	r3, [r4, #16]
 802cbec:	60e2      	str	r2, [r4, #12]
 802cbee:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802cbf2:	428a      	cmp	r2, r1
 802cbf4:	dd0e      	ble.n	802cc14 <localtime_r+0x108>
 802cbf6:	2b0b      	cmp	r3, #11
 802cbf8:	eba2 0201 	sub.w	r2, r2, r1
 802cbfc:	60e2      	str	r2, [r4, #12]
 802cbfe:	f103 0201 	add.w	r2, r3, #1
 802cc02:	bf09      	itett	eq
 802cc04:	6963      	ldreq	r3, [r4, #20]
 802cc06:	6122      	strne	r2, [r4, #16]
 802cc08:	2200      	moveq	r2, #0
 802cc0a:	3301      	addeq	r3, #1
 802cc0c:	bf02      	ittt	eq
 802cc0e:	6122      	streq	r2, [r4, #16]
 802cc10:	6163      	streq	r3, [r4, #20]
 802cc12:	61e2      	streq	r2, [r4, #28]
 802cc14:	f000 fe3e 	bl	802d894 <__tz_unlock>
 802cc18:	4620      	mov	r0, r4
 802cc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc1e:	2301      	movs	r3, #1
 802cc20:	e795      	b.n	802cb4e <localtime_r+0x42>
 802cc22:	4638      	mov	r0, r7
 802cc24:	f000 fd86 	bl	802d734 <__tzcalc_limits>
 802cc28:	2800      	cmp	r0, #0
 802cc2a:	d19f      	bne.n	802cb6c <localtime_r+0x60>
 802cc2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802cc30:	e004      	b.n	802cc3c <localtime_r+0x130>
 802cc32:	4282      	cmp	r2, r0
 802cc34:	eb73 0101 	sbcs.w	r1, r3, r1
 802cc38:	da02      	bge.n	802cc40 <localtime_r+0x134>
 802cc3a:	2300      	movs	r3, #0
 802cc3c:	6223      	str	r3, [r4, #32]
 802cc3e:	e009      	b.n	802cc54 <localtime_r+0x148>
 802cc40:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802cc44:	4282      	cmp	r2, r0
 802cc46:	418b      	sbcs	r3, r1
 802cc48:	bfb4      	ite	lt
 802cc4a:	2301      	movlt	r3, #1
 802cc4c:	2300      	movge	r3, #0
 802cc4e:	6223      	str	r3, [r4, #32]
 802cc50:	2b00      	cmp	r3, #0
 802cc52:	d198      	bne.n	802cb86 <localtime_r+0x7a>
 802cc54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802cc56:	e797      	b.n	802cb88 <localtime_r+0x7c>
 802cc58:	2b00      	cmp	r3, #0
 802cc5a:	daaf      	bge.n	802cbbc <localtime_r+0xb0>
 802cc5c:	3901      	subs	r1, #1
 802cc5e:	6061      	str	r1, [r4, #4]
 802cc60:	333c      	adds	r3, #60	@ 0x3c
 802cc62:	e7aa      	b.n	802cbba <localtime_r+0xae>
 802cc64:	2b00      	cmp	r3, #0
 802cc66:	dab0      	bge.n	802cbca <localtime_r+0xbe>
 802cc68:	3a01      	subs	r2, #1
 802cc6a:	60a2      	str	r2, [r4, #8]
 802cc6c:	333c      	adds	r3, #60	@ 0x3c
 802cc6e:	e7ab      	b.n	802cbc8 <localtime_r+0xbc>
 802cc70:	2b00      	cmp	r3, #0
 802cc72:	dacf      	bge.n	802cc14 <localtime_r+0x108>
 802cc74:	69e2      	ldr	r2, [r4, #28]
 802cc76:	3a01      	subs	r2, #1
 802cc78:	61e2      	str	r2, [r4, #28]
 802cc7a:	69a2      	ldr	r2, [r4, #24]
 802cc7c:	3a01      	subs	r2, #1
 802cc7e:	bf48      	it	mi
 802cc80:	2206      	movmi	r2, #6
 802cc82:	61a2      	str	r2, [r4, #24]
 802cc84:	68e2      	ldr	r2, [r4, #12]
 802cc86:	3318      	adds	r3, #24
 802cc88:	3a01      	subs	r2, #1
 802cc8a:	60e2      	str	r2, [r4, #12]
 802cc8c:	60a3      	str	r3, [r4, #8]
 802cc8e:	2a00      	cmp	r2, #0
 802cc90:	d1c0      	bne.n	802cc14 <localtime_r+0x108>
 802cc92:	6923      	ldr	r3, [r4, #16]
 802cc94:	3b01      	subs	r3, #1
 802cc96:	d405      	bmi.n	802cca4 <localtime_r+0x198>
 802cc98:	6123      	str	r3, [r4, #16]
 802cc9a:	6923      	ldr	r3, [r4, #16]
 802cc9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802cca0:	60e3      	str	r3, [r4, #12]
 802cca2:	e7b7      	b.n	802cc14 <localtime_r+0x108>
 802cca4:	230b      	movs	r3, #11
 802cca6:	6123      	str	r3, [r4, #16]
 802cca8:	6963      	ldr	r3, [r4, #20]
 802ccaa:	1e5a      	subs	r2, r3, #1
 802ccac:	6162      	str	r2, [r4, #20]
 802ccae:	0792      	lsls	r2, r2, #30
 802ccb0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802ccb4:	d105      	bne.n	802ccc2 <localtime_r+0x1b6>
 802ccb6:	2164      	movs	r1, #100	@ 0x64
 802ccb8:	fb93 f2f1 	sdiv	r2, r3, r1
 802ccbc:	fb01 3212 	mls	r2, r1, r2, r3
 802ccc0:	b962      	cbnz	r2, 802ccdc <localtime_r+0x1d0>
 802ccc2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ccc6:	fb93 f1f2 	sdiv	r1, r3, r2
 802ccca:	fb02 3311 	mls	r3, r2, r1, r3
 802ccce:	fab3 f383 	clz	r3, r3
 802ccd2:	095b      	lsrs	r3, r3, #5
 802ccd4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802ccd8:	61e3      	str	r3, [r4, #28]
 802ccda:	e7de      	b.n	802cc9a <localtime_r+0x18e>
 802ccdc:	2301      	movs	r3, #1
 802ccde:	e7f9      	b.n	802ccd4 <localtime_r+0x1c8>
 802cce0:	0803bcf0 	.word	0x0803bcf0
 802cce4:	2001a040 	.word	0x2001a040

0802cce8 <iso_year_adjust>:
 802cce8:	6942      	ldr	r2, [r0, #20]
 802ccea:	2a00      	cmp	r2, #0
 802ccec:	f240 736c 	movw	r3, #1900	@ 0x76c
 802ccf0:	bfa8      	it	ge
 802ccf2:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802ccf6:	4413      	add	r3, r2
 802ccf8:	0792      	lsls	r2, r2, #30
 802ccfa:	d105      	bne.n	802cd08 <iso_year_adjust+0x20>
 802ccfc:	2164      	movs	r1, #100	@ 0x64
 802ccfe:	fb93 f2f1 	sdiv	r2, r3, r1
 802cd02:	fb01 3212 	mls	r2, r1, r2, r3
 802cd06:	b9ca      	cbnz	r2, 802cd3c <iso_year_adjust+0x54>
 802cd08:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cd0c:	fb93 f1f2 	sdiv	r1, r3, r2
 802cd10:	fb02 3311 	mls	r3, r2, r1, r3
 802cd14:	fab3 f383 	clz	r3, r3
 802cd18:	095b      	lsrs	r3, r3, #5
 802cd1a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802cd1e:	0040      	lsls	r0, r0, #1
 802cd20:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802cd24:	4418      	add	r0, r3
 802cd26:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802cd2a:	4298      	cmp	r0, r3
 802cd2c:	d027      	beq.n	802cd7e <iso_year_adjust+0x96>
 802cd2e:	dc11      	bgt.n	802cd54 <iso_year_adjust+0x6c>
 802cd30:	2801      	cmp	r0, #1
 802cd32:	dc0a      	bgt.n	802cd4a <iso_year_adjust+0x62>
 802cd34:	43c0      	mvns	r0, r0
 802cd36:	0fc0      	lsrs	r0, r0, #31
 802cd38:	4240      	negs	r0, r0
 802cd3a:	4770      	bx	lr
 802cd3c:	2301      	movs	r3, #1
 802cd3e:	e7ec      	b.n	802cd1a <iso_year_adjust+0x32>
 802cd40:	4b10      	ldr	r3, [pc, #64]	@ (802cd84 <iso_year_adjust+0x9c>)
 802cd42:	40c3      	lsrs	r3, r0
 802cd44:	f343 0000 	sbfx	r0, r3, #0, #1
 802cd48:	4770      	bx	lr
 802cd4a:	380a      	subs	r0, #10
 802cd4c:	2817      	cmp	r0, #23
 802cd4e:	d9f7      	bls.n	802cd40 <iso_year_adjust+0x58>
 802cd50:	2000      	movs	r0, #0
 802cd52:	4770      	bx	lr
 802cd54:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802cd58:	4298      	cmp	r0, r3
 802cd5a:	dc06      	bgt.n	802cd6a <iso_year_adjust+0x82>
 802cd5c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802cd60:	4298      	cmp	r0, r3
 802cd62:	bfd4      	ite	le
 802cd64:	2000      	movle	r0, #0
 802cd66:	2001      	movgt	r0, #1
 802cd68:	4770      	bx	lr
 802cd6a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802cd6e:	3802      	subs	r0, #2
 802cd70:	2815      	cmp	r0, #21
 802cd72:	d8ed      	bhi.n	802cd50 <iso_year_adjust+0x68>
 802cd74:	4b04      	ldr	r3, [pc, #16]	@ (802cd88 <iso_year_adjust+0xa0>)
 802cd76:	40c3      	lsrs	r3, r0
 802cd78:	f003 0001 	and.w	r0, r3, #1
 802cd7c:	4770      	bx	lr
 802cd7e:	2001      	movs	r0, #1
 802cd80:	4770      	bx	lr
 802cd82:	bf00      	nop
 802cd84:	00cc00cf 	.word	0x00cc00cf
 802cd88:	002a001f 	.word	0x002a001f

0802cd8c <__strftime.isra.0>:
 802cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd90:	b08f      	sub	sp, #60	@ 0x3c
 802cd92:	461e      	mov	r6, r3
 802cd94:	2300      	movs	r3, #0
 802cd96:	4607      	mov	r7, r0
 802cd98:	460d      	mov	r5, r1
 802cd9a:	9302      	str	r3, [sp, #8]
 802cd9c:	461c      	mov	r4, r3
 802cd9e:	7813      	ldrb	r3, [r2, #0]
 802cda0:	2b00      	cmp	r3, #0
 802cda2:	f000 84ae 	beq.w	802d702 <__strftime.isra.0+0x976>
 802cda6:	2b25      	cmp	r3, #37	@ 0x25
 802cda8:	d11f      	bne.n	802cdea <__strftime.isra.0+0x5e>
 802cdaa:	f892 9001 	ldrb.w	r9, [r2, #1]
 802cdae:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802cdb2:	d024      	beq.n	802cdfe <__strftime.isra.0+0x72>
 802cdb4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cdb8:	d021      	beq.n	802cdfe <__strftime.isra.0+0x72>
 802cdba:	f102 0801 	add.w	r8, r2, #1
 802cdbe:	f04f 0900 	mov.w	r9, #0
 802cdc2:	f898 2000 	ldrb.w	r2, [r8]
 802cdc6:	3a31      	subs	r2, #49	@ 0x31
 802cdc8:	2a08      	cmp	r2, #8
 802cdca:	d81b      	bhi.n	802ce04 <__strftime.isra.0+0x78>
 802cdcc:	220a      	movs	r2, #10
 802cdce:	4640      	mov	r0, r8
 802cdd0:	a906      	add	r1, sp, #24
 802cdd2:	f008 f88b 	bl	8034eec <strtoul>
 802cdd6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802cdda:	4602      	mov	r2, r0
 802cddc:	f898 1000 	ldrb.w	r1, [r8]
 802cde0:	2945      	cmp	r1, #69	@ 0x45
 802cde2:	d111      	bne.n	802ce08 <__strftime.isra.0+0x7c>
 802cde4:	f108 0801 	add.w	r8, r8, #1
 802cde8:	e010      	b.n	802ce0c <__strftime.isra.0+0x80>
 802cdea:	1e69      	subs	r1, r5, #1
 802cdec:	42a1      	cmp	r1, r4
 802cdee:	f240 815d 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802cdf2:	553b      	strb	r3, [r7, r4]
 802cdf4:	3201      	adds	r2, #1
 802cdf6:	f104 0a01 	add.w	sl, r4, #1
 802cdfa:	4654      	mov	r4, sl
 802cdfc:	e7cf      	b.n	802cd9e <__strftime.isra.0+0x12>
 802cdfe:	f102 0802 	add.w	r8, r2, #2
 802ce02:	e7de      	b.n	802cdc2 <__strftime.isra.0+0x36>
 802ce04:	2200      	movs	r2, #0
 802ce06:	e7e9      	b.n	802cddc <__strftime.isra.0+0x50>
 802ce08:	294f      	cmp	r1, #79	@ 0x4f
 802ce0a:	d0eb      	beq.n	802cde4 <__strftime.isra.0+0x58>
 802ce0c:	f898 0000 	ldrb.w	r0, [r8]
 802ce10:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802ce14:	2955      	cmp	r1, #85	@ 0x55
 802ce16:	f200 8149 	bhi.w	802d0ac <__strftime.isra.0+0x320>
 802ce1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802ce1e:	046a      	.short	0x046a
 802ce20:	01470147 	.word	0x01470147
 802ce24:	01470147 	.word	0x01470147
 802ce28:	01470147 	.word	0x01470147
 802ce2c:	01470147 	.word	0x01470147
 802ce30:	01470147 	.word	0x01470147
 802ce34:	01470147 	.word	0x01470147
 802ce38:	01470147 	.word	0x01470147
 802ce3c:	01470147 	.word	0x01470147
 802ce40:	01470147 	.word	0x01470147
 802ce44:	01470147 	.word	0x01470147
 802ce48:	01470147 	.word	0x01470147
 802ce4c:	01470147 	.word	0x01470147
 802ce50:	01470147 	.word	0x01470147
 802ce54:	00750147 	.word	0x00750147
 802ce58:	00dc00a3 	.word	0x00dc00a3
 802ce5c:	01470128 	.word	0x01470128
 802ce60:	01cb0159 	.word	0x01cb0159
 802ce64:	02590252 	.word	0x02590252
 802ce68:	01470147 	.word	0x01470147
 802ce6c:	02710147 	.word	0x02710147
 802ce70:	01470147 	.word	0x01470147
 802ce74:	0147027c 	.word	0x0147027c
 802ce78:	033402ac 	.word	0x033402ac
 802ce7c:	036a033e 	.word	0x036a033e
 802ce80:	03d80372 	.word	0x03d80372
 802ce84:	03ee00d8 	.word	0x03ee00d8
 802ce88:	01470440 	.word	0x01470440
 802ce8c:	01470147 	.word	0x01470147
 802ce90:	01470147 	.word	0x01470147
 802ce94:	00560147 	.word	0x00560147
 802ce98:	00ba008d 	.word	0x00ba008d
 802ce9c:	011d011d 	.word	0x011d011d
 802cea0:	017e0147 	.word	0x017e0147
 802cea4:	0147008d 	.word	0x0147008d
 802cea8:	0252026a 	.word	0x0252026a
 802ceac:	026e0259 	.word	0x026e0259
 802ceb0:	01470273 	.word	0x01470273
 802ceb4:	02a5027c 	.word	0x02a5027c
 802ceb8:	02b500d0 	.word	0x02b500d0
 802cebc:	035d0336 	.word	0x035d0336
 802cec0:	03cf03a4 	.word	0x03cf03a4
 802cec4:	03e000d4 	.word	0x03e000d4
 802cec8:	0403      	.short	0x0403
 802ceca:	69b3      	ldr	r3, [r6, #24]
 802cecc:	4aad      	ldr	r2, [pc, #692]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cece:	3318      	adds	r3, #24
 802ced0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802ced4:	4658      	mov	r0, fp
 802ced6:	f7e3 f9e3 	bl	80102a0 <strlen>
 802ceda:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cede:	eb04 0a00 	add.w	sl, r4, r0
 802cee2:	1e6b      	subs	r3, r5, #1
 802cee4:	45a2      	cmp	sl, r4
 802cee6:	d107      	bne.n	802cef8 <__strftime.isra.0+0x16c>
 802cee8:	f898 3000 	ldrb.w	r3, [r8]
 802ceec:	2b00      	cmp	r3, #0
 802ceee:	f000 8409 	beq.w	802d704 <__strftime.isra.0+0x978>
 802cef2:	f108 0201 	add.w	r2, r8, #1
 802cef6:	e780      	b.n	802cdfa <__strftime.isra.0+0x6e>
 802cef8:	42a3      	cmp	r3, r4
 802cefa:	f240 80d7 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802cefe:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf02:	553a      	strb	r2, [r7, r4]
 802cf04:	3401      	adds	r4, #1
 802cf06:	e7ed      	b.n	802cee4 <__strftime.isra.0+0x158>
 802cf08:	69b2      	ldr	r2, [r6, #24]
 802cf0a:	4b9e      	ldr	r3, [pc, #632]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cf0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802cf10:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802cf14:	4658      	mov	r0, fp
 802cf16:	f7e3 f9c3 	bl	80102a0 <strlen>
 802cf1a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf1e:	eb04 0a00 	add.w	sl, r4, r0
 802cf22:	1e6b      	subs	r3, r5, #1
 802cf24:	4554      	cmp	r4, sl
 802cf26:	d0df      	beq.n	802cee8 <__strftime.isra.0+0x15c>
 802cf28:	42a3      	cmp	r3, r4
 802cf2a:	f240 80bf 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802cf2e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf32:	553a      	strb	r2, [r7, r4]
 802cf34:	3401      	adds	r4, #1
 802cf36:	e7f5      	b.n	802cf24 <__strftime.isra.0+0x198>
 802cf38:	4b92      	ldr	r3, [pc, #584]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cf3a:	6932      	ldr	r2, [r6, #16]
 802cf3c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802cf40:	4658      	mov	r0, fp
 802cf42:	f7e3 f9ad 	bl	80102a0 <strlen>
 802cf46:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf4a:	eb04 0a00 	add.w	sl, r4, r0
 802cf4e:	1e6b      	subs	r3, r5, #1
 802cf50:	45a2      	cmp	sl, r4
 802cf52:	d0c9      	beq.n	802cee8 <__strftime.isra.0+0x15c>
 802cf54:	42a3      	cmp	r3, r4
 802cf56:	f240 80a9 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802cf5a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf5e:	553a      	strb	r2, [r7, r4]
 802cf60:	3401      	adds	r4, #1
 802cf62:	e7f5      	b.n	802cf50 <__strftime.isra.0+0x1c4>
 802cf64:	6933      	ldr	r3, [r6, #16]
 802cf66:	4a87      	ldr	r2, [pc, #540]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cf68:	330c      	adds	r3, #12
 802cf6a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802cf6e:	4658      	mov	r0, fp
 802cf70:	f7e3 f996 	bl	80102a0 <strlen>
 802cf74:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf78:	eb04 0a00 	add.w	sl, r4, r0
 802cf7c:	1e6b      	subs	r3, r5, #1
 802cf7e:	45a2      	cmp	sl, r4
 802cf80:	d0b2      	beq.n	802cee8 <__strftime.isra.0+0x15c>
 802cf82:	42a3      	cmp	r3, r4
 802cf84:	f240 8092 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802cf88:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf8c:	553a      	strb	r2, [r7, r4]
 802cf8e:	3401      	adds	r4, #1
 802cf90:	e7f5      	b.n	802cf7e <__strftime.isra.0+0x1f2>
 802cf92:	4b7c      	ldr	r3, [pc, #496]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cf94:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802cf98:	4650      	mov	r0, sl
 802cf9a:	f7e3 f981 	bl	80102a0 <strlen>
 802cf9e:	f89a 3000 	ldrb.w	r3, [sl]
 802cfa2:	2b00      	cmp	r3, #0
 802cfa4:	f000 8341 	beq.w	802d62a <__strftime.isra.0+0x89e>
 802cfa8:	4633      	mov	r3, r6
 802cfaa:	4652      	mov	r2, sl
 802cfac:	1b29      	subs	r1, r5, r4
 802cfae:	1938      	adds	r0, r7, r4
 802cfb0:	f7ff feec 	bl	802cd8c <__strftime.isra.0>
 802cfb4:	2800      	cmp	r0, #0
 802cfb6:	dd79      	ble.n	802d0ac <__strftime.isra.0+0x320>
 802cfb8:	eb04 0a00 	add.w	sl, r4, r0
 802cfbc:	e794      	b.n	802cee8 <__strftime.isra.0+0x15c>
 802cfbe:	4b71      	ldr	r3, [pc, #452]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cfc0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802cfc4:	e7e8      	b.n	802cf98 <__strftime.isra.0+0x20c>
 802cfc6:	4b6f      	ldr	r3, [pc, #444]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cfc8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802cfcc:	e7e4      	b.n	802cf98 <__strftime.isra.0+0x20c>
 802cfce:	4b6d      	ldr	r3, [pc, #436]	@ (802d184 <__strftime.isra.0+0x3f8>)
 802cfd0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802cfd4:	e7e0      	b.n	802cf98 <__strftime.isra.0+0x20c>
 802cfd6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802cfda:	496b      	ldr	r1, [pc, #428]	@ (802d188 <__strftime.isra.0+0x3fc>)
 802cfdc:	458a      	cmp	sl, r1
 802cfde:	bfac      	ite	ge
 802cfe0:	f04f 0b00 	movge.w	fp, #0
 802cfe4:	f04f 0b01 	movlt.w	fp, #1
 802cfe8:	f1ba 0f00 	cmp.w	sl, #0
 802cfec:	db12      	blt.n	802d014 <__strftime.isra.0+0x288>
 802cfee:	2064      	movs	r0, #100	@ 0x64
 802cff0:	fb9a f0f0 	sdiv	r0, sl, r0
 802cff4:	3013      	adds	r0, #19
 802cff6:	f1b9 0f00 	cmp.w	r9, #0
 802cffa:	d015      	beq.n	802d028 <__strftime.isra.0+0x29c>
 802cffc:	2863      	cmp	r0, #99	@ 0x63
 802cffe:	dd28      	ble.n	802d052 <__strftime.isra.0+0x2c6>
 802d000:	4b62      	ldr	r3, [pc, #392]	@ (802d18c <__strftime.isra.0+0x400>)
 802d002:	4963      	ldr	r1, [pc, #396]	@ (802d190 <__strftime.isra.0+0x404>)
 802d004:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d008:	bf0c      	ite	eq
 802d00a:	469c      	moveq	ip, r3
 802d00c:	468c      	movne	ip, r1
 802d00e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d1ac <__strftime.isra.0+0x420>
 802d012:	e00d      	b.n	802d030 <__strftime.isra.0+0x2a4>
 802d014:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d018:	9203      	str	r2, [sp, #12]
 802d01a:	f000 ff88 	bl	802df2e <abs>
 802d01e:	2164      	movs	r1, #100	@ 0x64
 802d020:	9a03      	ldr	r2, [sp, #12]
 802d022:	fb90 f0f1 	sdiv	r0, r0, r1
 802d026:	e7e6      	b.n	802cff6 <__strftime.isra.0+0x26a>
 802d028:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d190 <__strftime.isra.0+0x404>
 802d02c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d1b0 <__strftime.isra.0+0x424>
 802d030:	4b58      	ldr	r3, [pc, #352]	@ (802d194 <__strftime.isra.0+0x408>)
 802d032:	9001      	str	r0, [sp, #4]
 802d034:	2a02      	cmp	r2, #2
 802d036:	bf2c      	ite	cs
 802d038:	ebcb 0102 	rsbcs	r1, fp, r2
 802d03c:	f1cb 0102 	rsbcc	r1, fp, #2
 802d040:	4a51      	ldr	r2, [pc, #324]	@ (802d188 <__strftime.isra.0+0x3fc>)
 802d042:	9100      	str	r1, [sp, #0]
 802d044:	4592      	cmp	sl, r2
 802d046:	bfa8      	it	ge
 802d048:	4663      	movge	r3, ip
 802d04a:	4672      	mov	r2, lr
 802d04c:	1b29      	subs	r1, r5, r4
 802d04e:	1938      	adds	r0, r7, r4
 802d050:	e023      	b.n	802d09a <__strftime.isra.0+0x30e>
 802d052:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d190 <__strftime.isra.0+0x404>
 802d056:	e7da      	b.n	802d00e <__strftime.isra.0+0x282>
 802d058:	494f      	ldr	r1, [pc, #316]	@ (802d198 <__strftime.isra.0+0x40c>)
 802d05a:	4a50      	ldr	r2, [pc, #320]	@ (802d19c <__strftime.isra.0+0x410>)
 802d05c:	68f3      	ldr	r3, [r6, #12]
 802d05e:	2864      	cmp	r0, #100	@ 0x64
 802d060:	bf18      	it	ne
 802d062:	460a      	movne	r2, r1
 802d064:	1b29      	subs	r1, r5, r4
 802d066:	1938      	adds	r0, r7, r4
 802d068:	f002 f986 	bl	802f378 <sniprintf>
 802d06c:	e017      	b.n	802d09e <__strftime.isra.0+0x312>
 802d06e:	6970      	ldr	r0, [r6, #20]
 802d070:	6933      	ldr	r3, [r6, #16]
 802d072:	2800      	cmp	r0, #0
 802d074:	f103 0a01 	add.w	sl, r3, #1
 802d078:	eb07 0b04 	add.w	fp, r7, r4
 802d07c:	68f3      	ldr	r3, [r6, #12]
 802d07e:	eba5 0904 	sub.w	r9, r5, r4
 802d082:	db19      	blt.n	802d0b8 <__strftime.isra.0+0x32c>
 802d084:	2264      	movs	r2, #100	@ 0x64
 802d086:	fb90 fcf2 	sdiv	ip, r0, r2
 802d08a:	fb02 001c 	mls	r0, r2, ip, r0
 802d08e:	4a44      	ldr	r2, [pc, #272]	@ (802d1a0 <__strftime.isra.0+0x414>)
 802d090:	e9cd 3000 	strd	r3, r0, [sp]
 802d094:	4649      	mov	r1, r9
 802d096:	4653      	mov	r3, sl
 802d098:	4658      	mov	r0, fp
 802d09a:	f002 f96d 	bl	802f378 <sniprintf>
 802d09e:	2800      	cmp	r0, #0
 802d0a0:	db04      	blt.n	802d0ac <__strftime.isra.0+0x320>
 802d0a2:	eb00 0a04 	add.w	sl, r0, r4
 802d0a6:	4555      	cmp	r5, sl
 802d0a8:	f63f af1e 	bhi.w	802cee8 <__strftime.isra.0+0x15c>
 802d0ac:	f04f 0a00 	mov.w	sl, #0
 802d0b0:	4650      	mov	r0, sl
 802d0b2:	b00f      	add	sp, #60	@ 0x3c
 802d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0b8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d0bc:	9303      	str	r3, [sp, #12]
 802d0be:	f000 ff36 	bl	802df2e <abs>
 802d0c2:	2264      	movs	r2, #100	@ 0x64
 802d0c4:	9b03      	ldr	r3, [sp, #12]
 802d0c6:	fb90 fcf2 	sdiv	ip, r0, r2
 802d0ca:	fb0c 0012 	mls	r0, ip, r2, r0
 802d0ce:	e7de      	b.n	802d08e <__strftime.isra.0+0x302>
 802d0d0:	2125      	movs	r1, #37	@ 0x25
 802d0d2:	f88d 1018 	strb.w	r1, [sp, #24]
 802d0d6:	f1b9 0f00 	cmp.w	r9, #0
 802d0da:	d00b      	beq.n	802d0f4 <__strftime.isra.0+0x368>
 802d0dc:	2a05      	cmp	r2, #5
 802d0de:	f88d 9019 	strb.w	r9, [sp, #25]
 802d0e2:	d817      	bhi.n	802d114 <__strftime.isra.0+0x388>
 802d0e4:	f10d 001a 	add.w	r0, sp, #26
 802d0e8:	492e      	ldr	r1, [pc, #184]	@ (802d1a4 <__strftime.isra.0+0x418>)
 802d0ea:	f000 fe83 	bl	802ddf4 <strcpy>
 802d0ee:	4633      	mov	r3, r6
 802d0f0:	aa06      	add	r2, sp, #24
 802d0f2:	e75b      	b.n	802cfac <__strftime.isra.0+0x220>
 802d0f4:	232b      	movs	r3, #43	@ 0x2b
 802d0f6:	f88d 3019 	strb.w	r3, [sp, #25]
 802d0fa:	2304      	movs	r3, #4
 802d0fc:	4a2a      	ldr	r2, [pc, #168]	@ (802d1a8 <__strftime.isra.0+0x41c>)
 802d0fe:	211e      	movs	r1, #30
 802d100:	f10d 001a 	add.w	r0, sp, #26
 802d104:	f002 f938 	bl	802f378 <sniprintf>
 802d108:	2800      	cmp	r0, #0
 802d10a:	ddeb      	ble.n	802d0e4 <__strftime.isra.0+0x358>
 802d10c:	f10d 031a 	add.w	r3, sp, #26
 802d110:	4418      	add	r0, r3
 802d112:	e7e9      	b.n	802d0e8 <__strftime.isra.0+0x35c>
 802d114:	1f93      	subs	r3, r2, #6
 802d116:	d0e5      	beq.n	802d0e4 <__strftime.isra.0+0x358>
 802d118:	e7f0      	b.n	802d0fc <__strftime.isra.0+0x370>
 802d11a:	4630      	mov	r0, r6
 802d11c:	f7ff fde4 	bl	802cce8 <iso_year_adjust>
 802d120:	4682      	mov	sl, r0
 802d122:	6970      	ldr	r0, [r6, #20]
 802d124:	2800      	cmp	r0, #0
 802d126:	db11      	blt.n	802d14c <__strftime.isra.0+0x3c0>
 802d128:	2364      	movs	r3, #100	@ 0x64
 802d12a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d12e:	fb03 0012 	mls	r0, r3, r2, r0
 802d132:	2364      	movs	r3, #100	@ 0x64
 802d134:	4482      	add	sl, r0
 802d136:	fb9a f2f3 	sdiv	r2, sl, r3
 802d13a:	fb03 aa12 	mls	sl, r3, r2, sl
 802d13e:	449a      	add	sl, r3
 802d140:	fbba f2f3 	udiv	r2, sl, r3
 802d144:	fb03 a312 	mls	r3, r3, r2, sl
 802d148:	4a14      	ldr	r2, [pc, #80]	@ (802d19c <__strftime.isra.0+0x410>)
 802d14a:	e78b      	b.n	802d064 <__strftime.isra.0+0x2d8>
 802d14c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d150:	f000 feed 	bl	802df2e <abs>
 802d154:	2364      	movs	r3, #100	@ 0x64
 802d156:	f1ba 0f00 	cmp.w	sl, #0
 802d15a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d15e:	fb02 0013 	mls	r0, r2, r3, r0
 802d162:	da07      	bge.n	802d174 <__strftime.isra.0+0x3e8>
 802d164:	6972      	ldr	r2, [r6, #20]
 802d166:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d16a:	429a      	cmp	r2, r3
 802d16c:	bfb8      	it	lt
 802d16e:	f04f 0a01 	movlt.w	sl, #1
 802d172:	e7de      	b.n	802d132 <__strftime.isra.0+0x3a6>
 802d174:	d0dd      	beq.n	802d132 <__strftime.isra.0+0x3a6>
 802d176:	6972      	ldr	r2, [r6, #20]
 802d178:	4b03      	ldr	r3, [pc, #12]	@ (802d188 <__strftime.isra.0+0x3fc>)
 802d17a:	429a      	cmp	r2, r3
 802d17c:	bfb8      	it	lt
 802d17e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d182:	e7d6      	b.n	802d132 <__strftime.isra.0+0x3a6>
 802d184:	0803bf3c 	.word	0x0803bf3c
 802d188:	fffff894 	.word	0xfffff894
 802d18c:	0803bd5f 	.word	0x0803bd5f
 802d190:	0803bc7a 	.word	0x0803bc7a
 802d194:	0803bd61 	.word	0x0803bd61
 802d198:	0803bd63 	.word	0x0803bd63
 802d19c:	0803bd71 	.word	0x0803bd71
 802d1a0:	0803bd67 	.word	0x0803bd67
 802d1a4:	0803bd7a 	.word	0x0803bd7a
 802d1a8:	0803bd76 	.word	0x0803bd76
 802d1ac:	0803bd57 	.word	0x0803bd57
 802d1b0:	0803bd50 	.word	0x0803bd50
 802d1b4:	6971      	ldr	r1, [r6, #20]
 802d1b6:	48bc      	ldr	r0, [pc, #752]	@ (802d4a8 <__strftime.isra.0+0x71c>)
 802d1b8:	9205      	str	r2, [sp, #20]
 802d1ba:	4281      	cmp	r1, r0
 802d1bc:	bfac      	ite	ge
 802d1be:	2300      	movge	r3, #0
 802d1c0:	2301      	movlt	r3, #1
 802d1c2:	4630      	mov	r0, r6
 802d1c4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d1c8:	f7ff fd8e 	bl	802cce8 <iso_year_adjust>
 802d1cc:	9904      	ldr	r1, [sp, #16]
 802d1ce:	9a05      	ldr	r2, [sp, #20]
 802d1d0:	2900      	cmp	r1, #0
 802d1d2:	4682      	mov	sl, r0
 802d1d4:	db3a      	blt.n	802d24c <__strftime.isra.0+0x4c0>
 802d1d6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d1da:	fb91 fbfb 	sdiv	fp, r1, fp
 802d1de:	f10b 0b13 	add.w	fp, fp, #19
 802d1e2:	6970      	ldr	r0, [r6, #20]
 802d1e4:	2800      	cmp	r0, #0
 802d1e6:	db3e      	blt.n	802d266 <__strftime.isra.0+0x4da>
 802d1e8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d1ec:	f1ba 0f00 	cmp.w	sl, #0
 802d1f0:	fb90 fefc 	sdiv	lr, r0, ip
 802d1f4:	fb0c 001e 	mls	r0, ip, lr, r0
 802d1f8:	da4f      	bge.n	802d29a <__strftime.isra.0+0x50e>
 802d1fa:	4482      	add	sl, r0
 802d1fc:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d200:	d157      	bne.n	802d2b2 <__strftime.isra.0+0x526>
 802d202:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d206:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d20a:	9b03      	ldr	r3, [sp, #12]
 802d20c:	2164      	movs	r1, #100	@ 0x64
 802d20e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d212:	2b00      	cmp	r3, #0
 802d214:	f040 81f7 	bne.w	802d606 <__strftime.isra.0+0x87a>
 802d218:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d21c:	d104      	bne.n	802d228 <__strftime.isra.0+0x49c>
 802d21e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d222:	458a      	cmp	sl, r1
 802d224:	f200 8275 	bhi.w	802d712 <__strftime.isra.0+0x986>
 802d228:	a906      	add	r1, sp, #24
 802d22a:	2025      	movs	r0, #37	@ 0x25
 802d22c:	7008      	strb	r0, [r1, #0]
 802d22e:	f1b9 0f00 	cmp.w	r9, #0
 802d232:	f040 81f3 	bne.w	802d61c <__strftime.isra.0+0x890>
 802d236:	1c48      	adds	r0, r1, #1
 802d238:	499c      	ldr	r1, [pc, #624]	@ (802d4ac <__strftime.isra.0+0x720>)
 802d23a:	9203      	str	r2, [sp, #12]
 802d23c:	f000 fdda 	bl	802ddf4 <strcpy>
 802d240:	9a03      	ldr	r2, [sp, #12]
 802d242:	f8cd a000 	str.w	sl, [sp]
 802d246:	4613      	mov	r3, r2
 802d248:	aa06      	add	r2, sp, #24
 802d24a:	e098      	b.n	802d37e <__strftime.isra.0+0x5f2>
 802d24c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d250:	9205      	str	r2, [sp, #20]
 802d252:	9104      	str	r1, [sp, #16]
 802d254:	f000 fe6b 	bl	802df2e <abs>
 802d258:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d25c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d260:	fb90 fbfc 	sdiv	fp, r0, ip
 802d264:	e7bd      	b.n	802d1e2 <__strftime.isra.0+0x456>
 802d266:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d26a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d26e:	f000 fe5e 	bl	802df2e <abs>
 802d272:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d276:	f1ba 0f00 	cmp.w	sl, #0
 802d27a:	fb90 fefc 	sdiv	lr, r0, ip
 802d27e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d282:	fb0e 001c 	mls	r0, lr, ip, r0
 802d286:	da08      	bge.n	802d29a <__strftime.isra.0+0x50e>
 802d288:	6971      	ldr	r1, [r6, #20]
 802d28a:	4b89      	ldr	r3, [pc, #548]	@ (802d4b0 <__strftime.isra.0+0x724>)
 802d28c:	4299      	cmp	r1, r3
 802d28e:	dab4      	bge.n	802d1fa <__strftime.isra.0+0x46e>
 802d290:	f04f 0a01 	mov.w	sl, #1
 802d294:	f8cd a00c 	str.w	sl, [sp, #12]
 802d298:	e7af      	b.n	802d1fa <__strftime.isra.0+0x46e>
 802d29a:	f1ba 0f00 	cmp.w	sl, #0
 802d29e:	d0ac      	beq.n	802d1fa <__strftime.isra.0+0x46e>
 802d2a0:	4b81      	ldr	r3, [pc, #516]	@ (802d4a8 <__strftime.isra.0+0x71c>)
 802d2a2:	4299      	cmp	r1, r3
 802d2a4:	9b03      	ldr	r3, [sp, #12]
 802d2a6:	bfbc      	itt	lt
 802d2a8:	2301      	movlt	r3, #1
 802d2aa:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d2ae:	9303      	str	r3, [sp, #12]
 802d2b0:	e7a3      	b.n	802d1fa <__strftime.isra.0+0x46e>
 802d2b2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d2b6:	bf04      	itt	eq
 802d2b8:	f10b 0b01 	addeq.w	fp, fp, #1
 802d2bc:	f04f 0a00 	moveq.w	sl, #0
 802d2c0:	e7a3      	b.n	802d20a <__strftime.isra.0+0x47e>
 802d2c2:	497c      	ldr	r1, [pc, #496]	@ (802d4b4 <__strftime.isra.0+0x728>)
 802d2c4:	4a7c      	ldr	r2, [pc, #496]	@ (802d4b8 <__strftime.isra.0+0x72c>)
 802d2c6:	68b3      	ldr	r3, [r6, #8]
 802d2c8:	286b      	cmp	r0, #107	@ 0x6b
 802d2ca:	bf18      	it	ne
 802d2cc:	460a      	movne	r2, r1
 802d2ce:	e6c9      	b.n	802d064 <__strftime.isra.0+0x2d8>
 802d2d0:	68b3      	ldr	r3, [r6, #8]
 802d2d2:	b163      	cbz	r3, 802d2ee <__strftime.isra.0+0x562>
 802d2d4:	2b0c      	cmp	r3, #12
 802d2d6:	d004      	beq.n	802d2e2 <__strftime.isra.0+0x556>
 802d2d8:	210c      	movs	r1, #12
 802d2da:	fb93 f2f1 	sdiv	r2, r3, r1
 802d2de:	fb01 3312 	mls	r3, r1, r2, r3
 802d2e2:	4975      	ldr	r1, [pc, #468]	@ (802d4b8 <__strftime.isra.0+0x72c>)
 802d2e4:	4a73      	ldr	r2, [pc, #460]	@ (802d4b4 <__strftime.isra.0+0x728>)
 802d2e6:	2849      	cmp	r0, #73	@ 0x49
 802d2e8:	bf18      	it	ne
 802d2ea:	460a      	movne	r2, r1
 802d2ec:	e6ba      	b.n	802d064 <__strftime.isra.0+0x2d8>
 802d2ee:	230c      	movs	r3, #12
 802d2f0:	e7f7      	b.n	802d2e2 <__strftime.isra.0+0x556>
 802d2f2:	69f3      	ldr	r3, [r6, #28]
 802d2f4:	4a71      	ldr	r2, [pc, #452]	@ (802d4bc <__strftime.isra.0+0x730>)
 802d2f6:	3301      	adds	r3, #1
 802d2f8:	e6b4      	b.n	802d064 <__strftime.isra.0+0x2d8>
 802d2fa:	6933      	ldr	r3, [r6, #16]
 802d2fc:	3301      	adds	r3, #1
 802d2fe:	e723      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d300:	6873      	ldr	r3, [r6, #4]
 802d302:	e721      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d304:	1e6b      	subs	r3, r5, #1
 802d306:	429c      	cmp	r4, r3
 802d308:	f4bf aed0 	bcs.w	802d0ac <__strftime.isra.0+0x320>
 802d30c:	f104 0a01 	add.w	sl, r4, #1
 802d310:	230a      	movs	r3, #10
 802d312:	553b      	strb	r3, [r7, r4]
 802d314:	e5e8      	b.n	802cee8 <__strftime.isra.0+0x15c>
 802d316:	68b3      	ldr	r3, [r6, #8]
 802d318:	2b0b      	cmp	r3, #11
 802d31a:	4b69      	ldr	r3, [pc, #420]	@ (802d4c0 <__strftime.isra.0+0x734>)
 802d31c:	bfd4      	ite	le
 802d31e:	2200      	movle	r2, #0
 802d320:	2201      	movgt	r2, #1
 802d322:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d326:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d32a:	4658      	mov	r0, fp
 802d32c:	f7e2 ffb8 	bl	80102a0 <strlen>
 802d330:	eb04 0a00 	add.w	sl, r4, r0
 802d334:	4863      	ldr	r0, [pc, #396]	@ (802d4c4 <__strftime.isra.0+0x738>)
 802d336:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d33a:	1e69      	subs	r1, r5, #1
 802d33c:	45a2      	cmp	sl, r4
 802d33e:	f43f add3 	beq.w	802cee8 <__strftime.isra.0+0x15c>
 802d342:	42a1      	cmp	r1, r4
 802d344:	f67f aeb2 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802d348:	f898 2000 	ldrb.w	r2, [r8]
 802d34c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d350:	2a50      	cmp	r2, #80	@ 0x50
 802d352:	d106      	bne.n	802d362 <__strftime.isra.0+0x5d6>
 802d354:	5cc2      	ldrb	r2, [r0, r3]
 802d356:	f002 0203 	and.w	r2, r2, #3
 802d35a:	2a01      	cmp	r2, #1
 802d35c:	bf08      	it	eq
 802d35e:	3320      	addeq	r3, #32
 802d360:	b2db      	uxtb	r3, r3
 802d362:	553b      	strb	r3, [r7, r4]
 802d364:	3401      	adds	r4, #1
 802d366:	e7e9      	b.n	802d33c <__strftime.isra.0+0x5b0>
 802d368:	2203      	movs	r2, #3
 802d36a:	6933      	ldr	r3, [r6, #16]
 802d36c:	fb93 f3f2 	sdiv	r3, r3, r2
 802d370:	4a55      	ldr	r2, [pc, #340]	@ (802d4c8 <__strftime.isra.0+0x73c>)
 802d372:	3301      	adds	r3, #1
 802d374:	e676      	b.n	802d064 <__strftime.isra.0+0x2d8>
 802d376:	6873      	ldr	r3, [r6, #4]
 802d378:	9300      	str	r3, [sp, #0]
 802d37a:	68b3      	ldr	r3, [r6, #8]
 802d37c:	4a53      	ldr	r2, [pc, #332]	@ (802d4cc <__strftime.isra.0+0x740>)
 802d37e:	1b29      	subs	r1, r5, r4
 802d380:	1938      	adds	r0, r7, r4
 802d382:	f001 fff9 	bl	802f378 <sniprintf>
 802d386:	e68a      	b.n	802d09e <__strftime.isra.0+0x312>
 802d388:	6a33      	ldr	r3, [r6, #32]
 802d38a:	2b00      	cmp	r3, #0
 802d38c:	db78      	blt.n	802d480 <__strftime.isra.0+0x6f4>
 802d38e:	f000 fa7b 	bl	802d888 <__tz_lock>
 802d392:	9b02      	ldr	r3, [sp, #8]
 802d394:	b90b      	cbnz	r3, 802d39a <__strftime.isra.0+0x60e>
 802d396:	f000 fa83 	bl	802d8a0 <_tzset_unlocked>
 802d39a:	f007 fe73 	bl	8035084 <__gettzinfo>
 802d39e:	6a33      	ldr	r3, [r6, #32]
 802d3a0:	2b00      	cmp	r3, #0
 802d3a2:	bfd4      	ite	le
 802d3a4:	2200      	movle	r2, #0
 802d3a6:	2201      	movgt	r2, #1
 802d3a8:	2328      	movs	r3, #40	@ 0x28
 802d3aa:	fb02 3303 	mla	r3, r2, r3, r3
 802d3ae:	58c3      	ldr	r3, [r0, r3]
 802d3b0:	f1c3 0a00 	rsb	sl, r3, #0
 802d3b4:	f000 fa6e 	bl	802d894 <__tz_unlock>
 802d3b8:	2301      	movs	r3, #1
 802d3ba:	9302      	str	r3, [sp, #8]
 802d3bc:	6972      	ldr	r2, [r6, #20]
 802d3be:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802d3c2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802d3c6:	f16c 0c00 	sbc.w	ip, ip, #0
 802d3ca:	f1bc 0f00 	cmp.w	ip, #0
 802d3ce:	eba5 0104 	sub.w	r1, r5, r4
 802d3d2:	eb07 0004 	add.w	r0, r7, r4
 802d3d6:	da02      	bge.n	802d3de <__strftime.isra.0+0x652>
 802d3d8:	3303      	adds	r3, #3
 802d3da:	f14c 0c00 	adc.w	ip, ip, #0
 802d3de:	089b      	lsrs	r3, r3, #2
 802d3e0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802d3e4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802d3e8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d3ec:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802d3f0:	fb9e fefb 	sdiv	lr, lr, fp
 802d3f4:	ebb3 030e 	subs.w	r3, r3, lr
 802d3f8:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802d3fc:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802d400:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802d404:	fb9e fefb 	sdiv	lr, lr, fp
 802d408:	eb13 030e 	adds.w	r3, r3, lr
 802d40c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802d410:	3a46      	subs	r2, #70	@ 0x46
 802d412:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802d416:	fb0e f202 	mul.w	r2, lr, r2
 802d41a:	189b      	adds	r3, r3, r2
 802d41c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d420:	69f2      	ldr	r2, [r6, #28]
 802d422:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802d426:	189b      	adds	r3, r3, r2
 802d428:	f04f 0e18 	mov.w	lr, #24
 802d42c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d430:	fba3 230e 	umull	r2, r3, r3, lr
 802d434:	fb0e 330c 	mla	r3, lr, ip, r3
 802d438:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802d43c:	eb12 020c 	adds.w	r2, r2, ip
 802d440:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d444:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802d448:	fba2 2e0c 	umull	r2, lr, r2, ip
 802d44c:	fb0c ee03 	mla	lr, ip, r3, lr
 802d450:	eb12 030b 	adds.w	r3, r2, fp
 802d454:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802d458:	fba3 e30c 	umull	lr, r3, r3, ip
 802d45c:	fb0c 3302 	mla	r3, ip, r2, r3
 802d460:	f8d6 c000 	ldr.w	ip, [r6]
 802d464:	eb1e 020c 	adds.w	r2, lr, ip
 802d468:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d46c:	ebb2 020a 	subs.w	r2, r2, sl
 802d470:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802d474:	e9cd 2300 	strd	r2, r3, [sp]
 802d478:	4a15      	ldr	r2, [pc, #84]	@ (802d4d0 <__strftime.isra.0+0x744>)
 802d47a:	f001 ff7d 	bl	802f378 <sniprintf>
 802d47e:	e60e      	b.n	802d09e <__strftime.isra.0+0x312>
 802d480:	f04f 0a00 	mov.w	sl, #0
 802d484:	e79a      	b.n	802d3bc <__strftime.isra.0+0x630>
 802d486:	6833      	ldr	r3, [r6, #0]
 802d488:	e65e      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d48a:	1e6b      	subs	r3, r5, #1
 802d48c:	429c      	cmp	r4, r3
 802d48e:	f4bf ae0d 	bcs.w	802d0ac <__strftime.isra.0+0x320>
 802d492:	f104 0a01 	add.w	sl, r4, #1
 802d496:	2309      	movs	r3, #9
 802d498:	e73b      	b.n	802d312 <__strftime.isra.0+0x586>
 802d49a:	6833      	ldr	r3, [r6, #0]
 802d49c:	9301      	str	r3, [sp, #4]
 802d49e:	6873      	ldr	r3, [r6, #4]
 802d4a0:	9300      	str	r3, [sp, #0]
 802d4a2:	68b3      	ldr	r3, [r6, #8]
 802d4a4:	4a0b      	ldr	r2, [pc, #44]	@ (802d4d4 <__strftime.isra.0+0x748>)
 802d4a6:	e5d1      	b.n	802d04c <__strftime.isra.0+0x2c0>
 802d4a8:	fffff894 	.word	0xfffff894
 802d4ac:	0803bd82 	.word	0x0803bd82
 802d4b0:	fffff895 	.word	0xfffff895
 802d4b4:	0803bd71 	.word	0x0803bd71
 802d4b8:	0803bd63 	.word	0x0803bd63
 802d4bc:	0803bd86 	.word	0x0803bd86
 802d4c0:	0803bf3c 	.word	0x0803bf3c
 802d4c4:	0803c039 	.word	0x0803c039
 802d4c8:	0803bd8b 	.word	0x0803bd8b
 802d4cc:	0803bd9a 	.word	0x0803bd9a
 802d4d0:	0803bd90 	.word	0x0803bd90
 802d4d4:	0803bd95 	.word	0x0803bd95
 802d4d8:	1e6b      	subs	r3, r5, #1
 802d4da:	429c      	cmp	r4, r3
 802d4dc:	f4bf ade6 	bcs.w	802d0ac <__strftime.isra.0+0x320>
 802d4e0:	69b3      	ldr	r3, [r6, #24]
 802d4e2:	b91b      	cbnz	r3, 802d4ec <__strftime.isra.0+0x760>
 802d4e4:	2337      	movs	r3, #55	@ 0x37
 802d4e6:	f104 0a01 	add.w	sl, r4, #1
 802d4ea:	e712      	b.n	802d312 <__strftime.isra.0+0x586>
 802d4ec:	3330      	adds	r3, #48	@ 0x30
 802d4ee:	b2db      	uxtb	r3, r3
 802d4f0:	e7f9      	b.n	802d4e6 <__strftime.isra.0+0x75a>
 802d4f2:	69f3      	ldr	r3, [r6, #28]
 802d4f4:	69b2      	ldr	r2, [r6, #24]
 802d4f6:	3307      	adds	r3, #7
 802d4f8:	1a9b      	subs	r3, r3, r2
 802d4fa:	2207      	movs	r2, #7
 802d4fc:	fb93 f3f2 	sdiv	r3, r3, r2
 802d500:	e622      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d502:	4630      	mov	r0, r6
 802d504:	f7ff fbf0 	bl	802cce8 <iso_year_adjust>
 802d508:	69b2      	ldr	r2, [r6, #24]
 802d50a:	b132      	cbz	r2, 802d51a <__strftime.isra.0+0x78e>
 802d50c:	3a01      	subs	r2, #1
 802d50e:	2800      	cmp	r0, #0
 802d510:	69f3      	ldr	r3, [r6, #28]
 802d512:	dc26      	bgt.n	802d562 <__strftime.isra.0+0x7d6>
 802d514:	d103      	bne.n	802d51e <__strftime.isra.0+0x792>
 802d516:	330a      	adds	r3, #10
 802d518:	e7ee      	b.n	802d4f8 <__strftime.isra.0+0x76c>
 802d51a:	2206      	movs	r2, #6
 802d51c:	e7f7      	b.n	802d50e <__strftime.isra.0+0x782>
 802d51e:	1ad2      	subs	r2, r2, r3
 802d520:	6973      	ldr	r3, [r6, #20]
 802d522:	2b00      	cmp	r3, #0
 802d524:	f240 716b 	movw	r1, #1899	@ 0x76b
 802d528:	bfa8      	it	ge
 802d52a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802d52e:	440b      	add	r3, r1
 802d530:	0799      	lsls	r1, r3, #30
 802d532:	d105      	bne.n	802d540 <__strftime.isra.0+0x7b4>
 802d534:	2064      	movs	r0, #100	@ 0x64
 802d536:	fb93 f1f0 	sdiv	r1, r3, r0
 802d53a:	fb00 3111 	mls	r1, r0, r1, r3
 802d53e:	b971      	cbnz	r1, 802d55e <__strftime.isra.0+0x7d2>
 802d540:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802d544:	fb93 f0f1 	sdiv	r0, r3, r1
 802d548:	fb01 3310 	mls	r3, r1, r0, r3
 802d54c:	fab3 f383 	clz	r3, r3
 802d550:	095b      	lsrs	r3, r3, #5
 802d552:	1ad2      	subs	r2, r2, r3
 802d554:	2a04      	cmp	r2, #4
 802d556:	bfcc      	ite	gt
 802d558:	2334      	movgt	r3, #52	@ 0x34
 802d55a:	2335      	movle	r3, #53	@ 0x35
 802d55c:	e5f4      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d55e:	2301      	movs	r3, #1
 802d560:	e7f7      	b.n	802d552 <__strftime.isra.0+0x7c6>
 802d562:	2301      	movs	r3, #1
 802d564:	e5f0      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d566:	496c      	ldr	r1, [pc, #432]	@ (802d718 <__strftime.isra.0+0x98c>)
 802d568:	9203      	str	r2, [sp, #12]
 802d56a:	a806      	add	r0, sp, #24
 802d56c:	f000 fc42 	bl	802ddf4 <strcpy>
 802d570:	a806      	add	r0, sp, #24
 802d572:	f7e2 fe95 	bl	80102a0 <strlen>
 802d576:	ab06      	add	r3, sp, #24
 802d578:	eb03 0a00 	add.w	sl, r3, r0
 802d57c:	f10a 0a01 	add.w	sl, sl, #1
 802d580:	46d3      	mov	fp, sl
 802d582:	f1b9 0f00 	cmp.w	r9, #0
 802d586:	d009      	beq.n	802d59c <__strftime.isra.0+0x810>
 802d588:	9a03      	ldr	r2, [sp, #12]
 802d58a:	f803 9000 	strb.w	r9, [r3, r0]
 802d58e:	2a05      	cmp	r2, #5
 802d590:	d901      	bls.n	802d596 <__strftime.isra.0+0x80a>
 802d592:	1f93      	subs	r3, r2, #6
 802d594:	d106      	bne.n	802d5a4 <__strftime.isra.0+0x818>
 802d596:	4961      	ldr	r1, [pc, #388]	@ (802d71c <__strftime.isra.0+0x990>)
 802d598:	4658      	mov	r0, fp
 802d59a:	e5a6      	b.n	802d0ea <__strftime.isra.0+0x35e>
 802d59c:	aa06      	add	r2, sp, #24
 802d59e:	232b      	movs	r3, #43	@ 0x2b
 802d5a0:	5413      	strb	r3, [r2, r0]
 802d5a2:	2304      	movs	r3, #4
 802d5a4:	a90e      	add	r1, sp, #56	@ 0x38
 802d5a6:	4a5e      	ldr	r2, [pc, #376]	@ (802d720 <__strftime.isra.0+0x994>)
 802d5a8:	eba1 010a 	sub.w	r1, r1, sl
 802d5ac:	4650      	mov	r0, sl
 802d5ae:	f001 fee3 	bl	802f378 <sniprintf>
 802d5b2:	2800      	cmp	r0, #0
 802d5b4:	bfc8      	it	gt
 802d5b6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802d5ba:	e7ec      	b.n	802d596 <__strftime.isra.0+0x80a>
 802d5bc:	1e6b      	subs	r3, r5, #1
 802d5be:	429c      	cmp	r4, r3
 802d5c0:	f4bf ad74 	bcs.w	802d0ac <__strftime.isra.0+0x320>
 802d5c4:	69b3      	ldr	r3, [r6, #24]
 802d5c6:	f104 0a01 	add.w	sl, r4, #1
 802d5ca:	3330      	adds	r3, #48	@ 0x30
 802d5cc:	e6a1      	b.n	802d312 <__strftime.isra.0+0x586>
 802d5ce:	69b2      	ldr	r2, [r6, #24]
 802d5d0:	b11a      	cbz	r2, 802d5da <__strftime.isra.0+0x84e>
 802d5d2:	3a01      	subs	r2, #1
 802d5d4:	69f3      	ldr	r3, [r6, #28]
 802d5d6:	3307      	adds	r3, #7
 802d5d8:	e78e      	b.n	802d4f8 <__strftime.isra.0+0x76c>
 802d5da:	2206      	movs	r2, #6
 802d5dc:	e7fa      	b.n	802d5d4 <__strftime.isra.0+0x848>
 802d5de:	6970      	ldr	r0, [r6, #20]
 802d5e0:	2800      	cmp	r0, #0
 802d5e2:	db05      	blt.n	802d5f0 <__strftime.isra.0+0x864>
 802d5e4:	2364      	movs	r3, #100	@ 0x64
 802d5e6:	fb90 f2f3 	sdiv	r2, r0, r3
 802d5ea:	fb02 0313 	mls	r3, r2, r3, r0
 802d5ee:	e5ab      	b.n	802d148 <__strftime.isra.0+0x3bc>
 802d5f0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d5f4:	f000 fc9b 	bl	802df2e <abs>
 802d5f8:	e7f4      	b.n	802d5e4 <__strftime.isra.0+0x858>
 802d5fa:	6971      	ldr	r1, [r6, #20]
 802d5fc:	4849      	ldr	r0, [pc, #292]	@ (802d724 <__strftime.isra.0+0x998>)
 802d5fe:	4281      	cmp	r1, r0
 802d600:	da09      	bge.n	802d616 <__strftime.isra.0+0x88a>
 802d602:	eba0 0a01 	sub.w	sl, r0, r1
 802d606:	212d      	movs	r1, #45	@ 0x2d
 802d608:	f88d 1018 	strb.w	r1, [sp, #24]
 802d60c:	b102      	cbz	r2, 802d610 <__strftime.isra.0+0x884>
 802d60e:	3a01      	subs	r2, #1
 802d610:	f10d 0119 	add.w	r1, sp, #25
 802d614:	e609      	b.n	802d22a <__strftime.isra.0+0x49e>
 802d616:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802d61a:	e5fd      	b.n	802d218 <__strftime.isra.0+0x48c>
 802d61c:	2330      	movs	r3, #48	@ 0x30
 802d61e:	1c88      	adds	r0, r1, #2
 802d620:	704b      	strb	r3, [r1, #1]
 802d622:	e609      	b.n	802d238 <__strftime.isra.0+0x4ac>
 802d624:	6a33      	ldr	r3, [r6, #32]
 802d626:	2b00      	cmp	r3, #0
 802d628:	da01      	bge.n	802d62e <__strftime.isra.0+0x8a2>
 802d62a:	46a2      	mov	sl, r4
 802d62c:	e45c      	b.n	802cee8 <__strftime.isra.0+0x15c>
 802d62e:	f000 f92b 	bl	802d888 <__tz_lock>
 802d632:	9b02      	ldr	r3, [sp, #8]
 802d634:	b90b      	cbnz	r3, 802d63a <__strftime.isra.0+0x8ae>
 802d636:	f000 f933 	bl	802d8a0 <_tzset_unlocked>
 802d63a:	f007 fd23 	bl	8035084 <__gettzinfo>
 802d63e:	6a33      	ldr	r3, [r6, #32]
 802d640:	2b00      	cmp	r3, #0
 802d642:	bfd4      	ite	le
 802d644:	2200      	movle	r2, #0
 802d646:	2201      	movgt	r2, #1
 802d648:	2328      	movs	r3, #40	@ 0x28
 802d64a:	fb02 3303 	mla	r3, r2, r3, r3
 802d64e:	eb07 0a04 	add.w	sl, r7, r4
 802d652:	58c3      	ldr	r3, [r0, r3]
 802d654:	f1c3 0900 	rsb	r9, r3, #0
 802d658:	f000 f91c 	bl	802d894 <__tz_unlock>
 802d65c:	233c      	movs	r3, #60	@ 0x3c
 802d65e:	fb99 f0f3 	sdiv	r0, r9, r3
 802d662:	f001 fbfe 	bl	802ee62 <labs>
 802d666:	233c      	movs	r3, #60	@ 0x3c
 802d668:	eba5 0b04 	sub.w	fp, r5, r4
 802d66c:	fb90 f2f3 	sdiv	r2, r0, r3
 802d670:	fb02 0013 	mls	r0, r2, r3, r0
 802d674:	9000      	str	r0, [sp, #0]
 802d676:	4a2c      	ldr	r2, [pc, #176]	@ (802d728 <__strftime.isra.0+0x99c>)
 802d678:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802d67c:	4659      	mov	r1, fp
 802d67e:	4650      	mov	r0, sl
 802d680:	fb99 f3f3 	sdiv	r3, r9, r3
 802d684:	f001 fe78 	bl	802f378 <sniprintf>
 802d688:	2800      	cmp	r0, #0
 802d68a:	f6ff ad0f 	blt.w	802d0ac <__strftime.isra.0+0x320>
 802d68e:	eb00 0a04 	add.w	sl, r0, r4
 802d692:	4555      	cmp	r5, sl
 802d694:	f67f ad0a 	bls.w	802d0ac <__strftime.isra.0+0x320>
 802d698:	2301      	movs	r3, #1
 802d69a:	9302      	str	r3, [sp, #8]
 802d69c:	e424      	b.n	802cee8 <__strftime.isra.0+0x15c>
 802d69e:	6a33      	ldr	r3, [r6, #32]
 802d6a0:	2b00      	cmp	r3, #0
 802d6a2:	dbc2      	blt.n	802d62a <__strftime.isra.0+0x89e>
 802d6a4:	f000 f8f0 	bl	802d888 <__tz_lock>
 802d6a8:	9b02      	ldr	r3, [sp, #8]
 802d6aa:	b90b      	cbnz	r3, 802d6b0 <__strftime.isra.0+0x924>
 802d6ac:	f000 f8f8 	bl	802d8a0 <_tzset_unlocked>
 802d6b0:	6a33      	ldr	r3, [r6, #32]
 802d6b2:	4a1e      	ldr	r2, [pc, #120]	@ (802d72c <__strftime.isra.0+0x9a0>)
 802d6b4:	2b00      	cmp	r3, #0
 802d6b6:	bfd4      	ite	le
 802d6b8:	2300      	movle	r3, #0
 802d6ba:	2301      	movgt	r3, #1
 802d6bc:	46a2      	mov	sl, r4
 802d6be:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802d6c2:	4648      	mov	r0, r9
 802d6c4:	f7e2 fdec 	bl	80102a0 <strlen>
 802d6c8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802d6cc:	4420      	add	r0, r4
 802d6ce:	1e6b      	subs	r3, r5, #1
 802d6d0:	4550      	cmp	r0, sl
 802d6d2:	d102      	bne.n	802d6da <__strftime.isra.0+0x94e>
 802d6d4:	f000 f8de 	bl	802d894 <__tz_unlock>
 802d6d8:	e7de      	b.n	802d698 <__strftime.isra.0+0x90c>
 802d6da:	4553      	cmp	r3, sl
 802d6dc:	d906      	bls.n	802d6ec <__strftime.isra.0+0x960>
 802d6de:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802d6e2:	f807 200a 	strb.w	r2, [r7, sl]
 802d6e6:	f10a 0a01 	add.w	sl, sl, #1
 802d6ea:	e7f1      	b.n	802d6d0 <__strftime.isra.0+0x944>
 802d6ec:	f000 f8d2 	bl	802d894 <__tz_unlock>
 802d6f0:	e4dc      	b.n	802d0ac <__strftime.isra.0+0x320>
 802d6f2:	1e6b      	subs	r3, r5, #1
 802d6f4:	429c      	cmp	r4, r3
 802d6f6:	f4bf acd9 	bcs.w	802d0ac <__strftime.isra.0+0x320>
 802d6fa:	f104 0a01 	add.w	sl, r4, #1
 802d6fe:	2325      	movs	r3, #37	@ 0x25
 802d700:	e607      	b.n	802d312 <__strftime.isra.0+0x586>
 802d702:	46a2      	mov	sl, r4
 802d704:	2d00      	cmp	r5, #0
 802d706:	f43f acd3 	beq.w	802d0b0 <__strftime.isra.0+0x324>
 802d70a:	2300      	movs	r3, #0
 802d70c:	f807 300a 	strb.w	r3, [r7, sl]
 802d710:	e4ce      	b.n	802d0b0 <__strftime.isra.0+0x324>
 802d712:	4649      	mov	r1, r9
 802d714:	e778      	b.n	802d608 <__strftime.isra.0+0x87c>
 802d716:	bf00      	nop
 802d718:	0803bda4 	.word	0x0803bda4
 802d71c:	0803bf0c 	.word	0x0803bf0c
 802d720:	0803bd76 	.word	0x0803bd76
 802d724:	fffff894 	.word	0xfffff894
 802d728:	0803bdac 	.word	0x0803bdac
 802d72c:	20000164 	.word	0x20000164

0802d730 <strftime>:
 802d730:	f7ff bb2c 	b.w	802cd8c <__strftime.isra.0>

0802d734 <__tzcalc_limits>:
 802d734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d738:	4604      	mov	r4, r0
 802d73a:	f007 fca3 	bl	8035084 <__gettzinfo>
 802d73e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802d742:	429c      	cmp	r4, r3
 802d744:	f340 8099 	ble.w	802d87a <__tzcalc_limits+0x146>
 802d748:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802d74c:	19e5      	adds	r5, r4, r7
 802d74e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802d752:	f240 126d 	movw	r2, #365	@ 0x16d
 802d756:	10ad      	asrs	r5, r5, #2
 802d758:	fb02 5503 	mla	r5, r2, r3, r5
 802d75c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802d760:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802d764:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802d768:	4f45      	ldr	r7, [pc, #276]	@ (802d880 <__tzcalc_limits+0x14c>)
 802d76a:	fb93 f3f2 	sdiv	r3, r3, r2
 802d76e:	441d      	add	r5, r3
 802d770:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d774:	eb04 030c 	add.w	r3, r4, ip
 802d778:	6044      	str	r4, [r0, #4]
 802d77a:	fbb3 f3f2 	udiv	r3, r3, r2
 802d77e:	4601      	mov	r1, r0
 802d780:	441d      	add	r5, r3
 802d782:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802d786:	7a0b      	ldrb	r3, [r1, #8]
 802d788:	694a      	ldr	r2, [r1, #20]
 802d78a:	2b4a      	cmp	r3, #74	@ 0x4a
 802d78c:	d133      	bne.n	802d7f6 <__tzcalc_limits+0xc2>
 802d78e:	07a6      	lsls	r6, r4, #30
 802d790:	eb05 0302 	add.w	r3, r5, r2
 802d794:	d106      	bne.n	802d7a4 <__tzcalc_limits+0x70>
 802d796:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802d79a:	fb94 f6fe 	sdiv	r6, r4, lr
 802d79e:	fb0e 4616 	mls	r6, lr, r6, r4
 802d7a2:	b936      	cbnz	r6, 802d7b2 <__tzcalc_limits+0x7e>
 802d7a4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802d7a8:	fb94 f6fe 	sdiv	r6, r4, lr
 802d7ac:	fb0e 4616 	mls	r6, lr, r6, r4
 802d7b0:	b9fe      	cbnz	r6, 802d7f2 <__tzcalc_limits+0xbe>
 802d7b2:	2a3b      	cmp	r2, #59	@ 0x3b
 802d7b4:	bfd4      	ite	le
 802d7b6:	2200      	movle	r2, #0
 802d7b8:	2201      	movgt	r2, #1
 802d7ba:	4413      	add	r3, r2
 802d7bc:	3b01      	subs	r3, #1
 802d7be:	698a      	ldr	r2, [r1, #24]
 802d7c0:	17d6      	asrs	r6, r2, #31
 802d7c2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802d7c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802d7c8:	18d2      	adds	r2, r2, r3
 802d7ca:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802d7ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802d7d2:	3128      	adds	r1, #40	@ 0x28
 802d7d4:	458c      	cmp	ip, r1
 802d7d6:	d1d6      	bne.n	802d786 <__tzcalc_limits+0x52>
 802d7d8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802d7dc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802d7e0:	428c      	cmp	r4, r1
 802d7e2:	4193      	sbcs	r3, r2
 802d7e4:	bfb4      	ite	lt
 802d7e6:	2301      	movlt	r3, #1
 802d7e8:	2300      	movge	r3, #0
 802d7ea:	6003      	str	r3, [r0, #0]
 802d7ec:	2001      	movs	r0, #1
 802d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d7f2:	2200      	movs	r2, #0
 802d7f4:	e7e1      	b.n	802d7ba <__tzcalc_limits+0x86>
 802d7f6:	2b44      	cmp	r3, #68	@ 0x44
 802d7f8:	d101      	bne.n	802d7fe <__tzcalc_limits+0xca>
 802d7fa:	18ab      	adds	r3, r5, r2
 802d7fc:	e7df      	b.n	802d7be <__tzcalc_limits+0x8a>
 802d7fe:	07a3      	lsls	r3, r4, #30
 802d800:	d105      	bne.n	802d80e <__tzcalc_limits+0xda>
 802d802:	2664      	movs	r6, #100	@ 0x64
 802d804:	fb94 f3f6 	sdiv	r3, r4, r6
 802d808:	fb06 4313 	mls	r3, r6, r3, r4
 802d80c:	bb7b      	cbnz	r3, 802d86e <__tzcalc_limits+0x13a>
 802d80e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802d812:	fb94 f6f3 	sdiv	r6, r4, r3
 802d816:	fb03 4616 	mls	r6, r3, r6, r4
 802d81a:	fab6 f686 	clz	r6, r6
 802d81e:	0976      	lsrs	r6, r6, #5
 802d820:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802d884 <__tzcalc_limits+0x150>
 802d824:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802d828:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802d82c:	462b      	mov	r3, r5
 802d82e:	f04f 0800 	mov.w	r8, #0
 802d832:	fb0a e606 	mla	r6, sl, r6, lr
 802d836:	f108 0801 	add.w	r8, r8, #1
 802d83a:	45c1      	cmp	r9, r8
 802d83c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802d840:	dc17      	bgt.n	802d872 <__tzcalc_limits+0x13e>
 802d842:	f103 0804 	add.w	r8, r3, #4
 802d846:	2607      	movs	r6, #7
 802d848:	fb98 f6f6 	sdiv	r6, r8, r6
 802d84c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d850:	eba8 0606 	sub.w	r6, r8, r6
 802d854:	1b92      	subs	r2, r2, r6
 802d856:	690e      	ldr	r6, [r1, #16]
 802d858:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802d85c:	bf48      	it	mi
 802d85e:	3207      	addmi	r2, #7
 802d860:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d864:	4432      	add	r2, r6
 802d866:	4572      	cmp	r2, lr
 802d868:	da05      	bge.n	802d876 <__tzcalc_limits+0x142>
 802d86a:	4413      	add	r3, r2
 802d86c:	e7a7      	b.n	802d7be <__tzcalc_limits+0x8a>
 802d86e:	2601      	movs	r6, #1
 802d870:	e7d6      	b.n	802d820 <__tzcalc_limits+0xec>
 802d872:	4473      	add	r3, lr
 802d874:	e7df      	b.n	802d836 <__tzcalc_limits+0x102>
 802d876:	3a07      	subs	r2, #7
 802d878:	e7f5      	b.n	802d866 <__tzcalc_limits+0x132>
 802d87a:	2000      	movs	r0, #0
 802d87c:	e7b7      	b.n	802d7ee <__tzcalc_limits+0xba>
 802d87e:	bf00      	nop
 802d880:	00015180 	.word	0x00015180
 802d884:	0803bcec 	.word	0x0803bcec

0802d888 <__tz_lock>:
 802d888:	4801      	ldr	r0, [pc, #4]	@ (802d890 <__tz_lock+0x8>)
 802d88a:	f000 bae1 	b.w	802de50 <__retarget_lock_acquire>
 802d88e:	bf00      	nop
 802d890:	2001a048 	.word	0x2001a048

0802d894 <__tz_unlock>:
 802d894:	4801      	ldr	r0, [pc, #4]	@ (802d89c <__tz_unlock+0x8>)
 802d896:	f000 badd 	b.w	802de54 <__retarget_lock_release>
 802d89a:	bf00      	nop
 802d89c:	2001a048 	.word	0x2001a048

0802d8a0 <_tzset_unlocked>:
 802d8a0:	4b01      	ldr	r3, [pc, #4]	@ (802d8a8 <_tzset_unlocked+0x8>)
 802d8a2:	6818      	ldr	r0, [r3, #0]
 802d8a4:	f000 b802 	b.w	802d8ac <_tzset_unlocked_r>
 802d8a8:	200002d8 	.word	0x200002d8

0802d8ac <_tzset_unlocked_r>:
 802d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d8b0:	b08d      	sub	sp, #52	@ 0x34
 802d8b2:	4607      	mov	r7, r0
 802d8b4:	f007 fbe6 	bl	8035084 <__gettzinfo>
 802d8b8:	49bc      	ldr	r1, [pc, #752]	@ (802dbac <_tzset_unlocked_r+0x300>)
 802d8ba:	4dbd      	ldr	r5, [pc, #756]	@ (802dbb0 <_tzset_unlocked_r+0x304>)
 802d8bc:	4604      	mov	r4, r0
 802d8be:	4638      	mov	r0, r7
 802d8c0:	f001 fac8 	bl	802ee54 <_getenv_r>
 802d8c4:	4606      	mov	r6, r0
 802d8c6:	bb10      	cbnz	r0, 802d90e <_tzset_unlocked_r+0x62>
 802d8c8:	4bba      	ldr	r3, [pc, #744]	@ (802dbb4 <_tzset_unlocked_r+0x308>)
 802d8ca:	4abb      	ldr	r2, [pc, #748]	@ (802dbb8 <_tzset_unlocked_r+0x30c>)
 802d8cc:	6018      	str	r0, [r3, #0]
 802d8ce:	4bbb      	ldr	r3, [pc, #748]	@ (802dbbc <_tzset_unlocked_r+0x310>)
 802d8d0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802d8d2:	6018      	str	r0, [r3, #0]
 802d8d4:	4bba      	ldr	r3, [pc, #744]	@ (802dbc0 <_tzset_unlocked_r+0x314>)
 802d8d6:	6520      	str	r0, [r4, #80]	@ 0x50
 802d8d8:	e9c3 2200 	strd	r2, r2, [r3]
 802d8dc:	214a      	movs	r1, #74	@ 0x4a
 802d8de:	2200      	movs	r2, #0
 802d8e0:	2300      	movs	r3, #0
 802d8e2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802d8e6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802d8ea:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802d8ee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802d8f2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d8f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d8fa:	6828      	ldr	r0, [r5, #0]
 802d8fc:	7221      	strb	r1, [r4, #8]
 802d8fe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d902:	f001 fabb 	bl	802ee7c <free>
 802d906:	602e      	str	r6, [r5, #0]
 802d908:	b00d      	add	sp, #52	@ 0x34
 802d90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d90e:	6829      	ldr	r1, [r5, #0]
 802d910:	2900      	cmp	r1, #0
 802d912:	f040 808e 	bne.w	802da32 <_tzset_unlocked_r+0x186>
 802d916:	6828      	ldr	r0, [r5, #0]
 802d918:	f001 fab0 	bl	802ee7c <free>
 802d91c:	4630      	mov	r0, r6
 802d91e:	f7e2 fcbf 	bl	80102a0 <strlen>
 802d922:	1c41      	adds	r1, r0, #1
 802d924:	4638      	mov	r0, r7
 802d926:	f001 fab1 	bl	802ee8c <_malloc_r>
 802d92a:	6028      	str	r0, [r5, #0]
 802d92c:	2800      	cmp	r0, #0
 802d92e:	f040 8086 	bne.w	802da3e <_tzset_unlocked_r+0x192>
 802d932:	4aa2      	ldr	r2, [pc, #648]	@ (802dbbc <_tzset_unlocked_r+0x310>)
 802d934:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802dbc0 <_tzset_unlocked_r+0x314>
 802d938:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802dbb4 <_tzset_unlocked_r+0x308>
 802d93c:	2300      	movs	r3, #0
 802d93e:	6013      	str	r3, [r2, #0]
 802d940:	4aa0      	ldr	r2, [pc, #640]	@ (802dbc4 <_tzset_unlocked_r+0x318>)
 802d942:	f8ca 3000 	str.w	r3, [sl]
 802d946:	2000      	movs	r0, #0
 802d948:	2100      	movs	r1, #0
 802d94a:	e9c8 2200 	strd	r2, r2, [r8]
 802d94e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802d952:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802d956:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802d95a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802d95e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802d962:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802d966:	224a      	movs	r2, #74	@ 0x4a
 802d968:	7222      	strb	r2, [r4, #8]
 802d96a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d96c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802d970:	6523      	str	r3, [r4, #80]	@ 0x50
 802d972:	7833      	ldrb	r3, [r6, #0]
 802d974:	2b3a      	cmp	r3, #58	@ 0x3a
 802d976:	bf08      	it	eq
 802d978:	3601      	addeq	r6, #1
 802d97a:	7833      	ldrb	r3, [r6, #0]
 802d97c:	2b3c      	cmp	r3, #60	@ 0x3c
 802d97e:	d162      	bne.n	802da46 <_tzset_unlocked_r+0x19a>
 802d980:	1c75      	adds	r5, r6, #1
 802d982:	4a91      	ldr	r2, [pc, #580]	@ (802dbc8 <_tzset_unlocked_r+0x31c>)
 802d984:	4991      	ldr	r1, [pc, #580]	@ (802dbcc <_tzset_unlocked_r+0x320>)
 802d986:	ab0a      	add	r3, sp, #40	@ 0x28
 802d988:	4628      	mov	r0, r5
 802d98a:	f001 fccb 	bl	802f324 <siscanf>
 802d98e:	2800      	cmp	r0, #0
 802d990:	ddba      	ble.n	802d908 <_tzset_unlocked_r+0x5c>
 802d992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d994:	1eda      	subs	r2, r3, #3
 802d996:	2a07      	cmp	r2, #7
 802d998:	d8b6      	bhi.n	802d908 <_tzset_unlocked_r+0x5c>
 802d99a:	5ceb      	ldrb	r3, [r5, r3]
 802d99c:	2b3e      	cmp	r3, #62	@ 0x3e
 802d99e:	d1b3      	bne.n	802d908 <_tzset_unlocked_r+0x5c>
 802d9a0:	3602      	adds	r6, #2
 802d9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9a4:	18f5      	adds	r5, r6, r3
 802d9a6:	5cf3      	ldrb	r3, [r6, r3]
 802d9a8:	2b2d      	cmp	r3, #45	@ 0x2d
 802d9aa:	d15a      	bne.n	802da62 <_tzset_unlocked_r+0x1b6>
 802d9ac:	3501      	adds	r5, #1
 802d9ae:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d9b2:	2300      	movs	r3, #0
 802d9b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d9b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d9bc:	af08      	add	r7, sp, #32
 802d9be:	ab0a      	add	r3, sp, #40	@ 0x28
 802d9c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802d9c4:	9303      	str	r3, [sp, #12]
 802d9c6:	f10d 031e 	add.w	r3, sp, #30
 802d9ca:	9300      	str	r3, [sp, #0]
 802d9cc:	4980      	ldr	r1, [pc, #512]	@ (802dbd0 <_tzset_unlocked_r+0x324>)
 802d9ce:	ab0a      	add	r3, sp, #40	@ 0x28
 802d9d0:	aa07      	add	r2, sp, #28
 802d9d2:	4628      	mov	r0, r5
 802d9d4:	f001 fca6 	bl	802f324 <siscanf>
 802d9d8:	2800      	cmp	r0, #0
 802d9da:	dd95      	ble.n	802d908 <_tzset_unlocked_r+0x5c>
 802d9dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802d9e0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802d9e4:	223c      	movs	r2, #60	@ 0x3c
 802d9e6:	fb02 6603 	mla	r6, r2, r3, r6
 802d9ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802d9ee:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d9f2:	fb02 6603 	mla	r6, r2, r3, r6
 802d9f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9f8:	fb09 f606 	mul.w	r6, r9, r6
 802d9fc:	eb05 0903 	add.w	r9, r5, r3
 802da00:	5ceb      	ldrb	r3, [r5, r3]
 802da02:	2b3c      	cmp	r3, #60	@ 0x3c
 802da04:	f040 80ee 	bne.w	802dbe4 <_tzset_unlocked_r+0x338>
 802da08:	f109 0501 	add.w	r5, r9, #1
 802da0c:	4a71      	ldr	r2, [pc, #452]	@ (802dbd4 <_tzset_unlocked_r+0x328>)
 802da0e:	496f      	ldr	r1, [pc, #444]	@ (802dbcc <_tzset_unlocked_r+0x320>)
 802da10:	ab0a      	add	r3, sp, #40	@ 0x28
 802da12:	4628      	mov	r0, r5
 802da14:	f001 fc86 	bl	802f324 <siscanf>
 802da18:	2800      	cmp	r0, #0
 802da1a:	dc28      	bgt.n	802da6e <_tzset_unlocked_r+0x1c2>
 802da1c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802da20:	2b3e      	cmp	r3, #62	@ 0x3e
 802da22:	d124      	bne.n	802da6e <_tzset_unlocked_r+0x1c2>
 802da24:	4b68      	ldr	r3, [pc, #416]	@ (802dbc8 <_tzset_unlocked_r+0x31c>)
 802da26:	62a6      	str	r6, [r4, #40]	@ 0x28
 802da28:	e9c8 3300 	strd	r3, r3, [r8]
 802da2c:	f8ca 6000 	str.w	r6, [sl]
 802da30:	e76a      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802da32:	f7e2 fbd5 	bl	80101e0 <strcmp>
 802da36:	2800      	cmp	r0, #0
 802da38:	f47f af6d 	bne.w	802d916 <_tzset_unlocked_r+0x6a>
 802da3c:	e764      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802da3e:	4631      	mov	r1, r6
 802da40:	f000 f9d8 	bl	802ddf4 <strcpy>
 802da44:	e775      	b.n	802d932 <_tzset_unlocked_r+0x86>
 802da46:	4a60      	ldr	r2, [pc, #384]	@ (802dbc8 <_tzset_unlocked_r+0x31c>)
 802da48:	4963      	ldr	r1, [pc, #396]	@ (802dbd8 <_tzset_unlocked_r+0x32c>)
 802da4a:	ab0a      	add	r3, sp, #40	@ 0x28
 802da4c:	4630      	mov	r0, r6
 802da4e:	f001 fc69 	bl	802f324 <siscanf>
 802da52:	2800      	cmp	r0, #0
 802da54:	f77f af58 	ble.w	802d908 <_tzset_unlocked_r+0x5c>
 802da58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da5a:	3b03      	subs	r3, #3
 802da5c:	2b07      	cmp	r3, #7
 802da5e:	d9a0      	bls.n	802d9a2 <_tzset_unlocked_r+0xf6>
 802da60:	e752      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802da62:	2b2b      	cmp	r3, #43	@ 0x2b
 802da64:	bf08      	it	eq
 802da66:	3501      	addeq	r5, #1
 802da68:	f04f 0901 	mov.w	r9, #1
 802da6c:	e7a1      	b.n	802d9b2 <_tzset_unlocked_r+0x106>
 802da6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da70:	1eda      	subs	r2, r3, #3
 802da72:	2a07      	cmp	r2, #7
 802da74:	f63f af48 	bhi.w	802d908 <_tzset_unlocked_r+0x5c>
 802da78:	5ceb      	ldrb	r3, [r5, r3]
 802da7a:	2b3e      	cmp	r3, #62	@ 0x3e
 802da7c:	f47f af44 	bne.w	802d908 <_tzset_unlocked_r+0x5c>
 802da80:	f109 0902 	add.w	r9, r9, #2
 802da84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da86:	eb09 0503 	add.w	r5, r9, r3
 802da8a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802da8e:	2b2d      	cmp	r3, #45	@ 0x2d
 802da90:	f040 80b7 	bne.w	802dc02 <_tzset_unlocked_r+0x356>
 802da94:	3501      	adds	r5, #1
 802da96:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802da9a:	2300      	movs	r3, #0
 802da9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802daa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802daa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 802daa8:	930a      	str	r3, [sp, #40]	@ 0x28
 802daaa:	ab0a      	add	r3, sp, #40	@ 0x28
 802daac:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802dab0:	9301      	str	r3, [sp, #4]
 802dab2:	f10d 031e 	add.w	r3, sp, #30
 802dab6:	9300      	str	r3, [sp, #0]
 802dab8:	4945      	ldr	r1, [pc, #276]	@ (802dbd0 <_tzset_unlocked_r+0x324>)
 802daba:	ab0a      	add	r3, sp, #40	@ 0x28
 802dabc:	aa07      	add	r2, sp, #28
 802dabe:	4628      	mov	r0, r5
 802dac0:	f001 fc30 	bl	802f324 <siscanf>
 802dac4:	2800      	cmp	r0, #0
 802dac6:	f300 80a2 	bgt.w	802dc0e <_tzset_unlocked_r+0x362>
 802daca:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802dace:	9304      	str	r3, [sp, #16]
 802dad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dad2:	4627      	mov	r7, r4
 802dad4:	441d      	add	r5, r3
 802dad6:	f04f 0b00 	mov.w	fp, #0
 802dada:	782b      	ldrb	r3, [r5, #0]
 802dadc:	2b2c      	cmp	r3, #44	@ 0x2c
 802dade:	bf08      	it	eq
 802dae0:	3501      	addeq	r5, #1
 802dae2:	f895 9000 	ldrb.w	r9, [r5]
 802dae6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802daea:	f040 80a3 	bne.w	802dc34 <_tzset_unlocked_r+0x388>
 802daee:	ab0a      	add	r3, sp, #40	@ 0x28
 802daf0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802daf4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802daf8:	aa09      	add	r2, sp, #36	@ 0x24
 802dafa:	9200      	str	r2, [sp, #0]
 802dafc:	4937      	ldr	r1, [pc, #220]	@ (802dbdc <_tzset_unlocked_r+0x330>)
 802dafe:	9303      	str	r3, [sp, #12]
 802db00:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802db04:	4628      	mov	r0, r5
 802db06:	f001 fc0d 	bl	802f324 <siscanf>
 802db0a:	2803      	cmp	r0, #3
 802db0c:	f47f aefc 	bne.w	802d908 <_tzset_unlocked_r+0x5c>
 802db10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802db14:	1e4b      	subs	r3, r1, #1
 802db16:	2b0b      	cmp	r3, #11
 802db18:	f63f aef6 	bhi.w	802d908 <_tzset_unlocked_r+0x5c>
 802db1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802db20:	1e53      	subs	r3, r2, #1
 802db22:	2b04      	cmp	r3, #4
 802db24:	f63f aef0 	bhi.w	802d908 <_tzset_unlocked_r+0x5c>
 802db28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802db2c:	2b06      	cmp	r3, #6
 802db2e:	f63f aeeb 	bhi.w	802d908 <_tzset_unlocked_r+0x5c>
 802db32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802db36:	f887 9008 	strb.w	r9, [r7, #8]
 802db3a:	617b      	str	r3, [r7, #20]
 802db3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802db3e:	eb05 0903 	add.w	r9, r5, r3
 802db42:	2500      	movs	r5, #0
 802db44:	f04f 0302 	mov.w	r3, #2
 802db48:	f8ad 301c 	strh.w	r3, [sp, #28]
 802db4c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802db50:	f8ad 5020 	strh.w	r5, [sp, #32]
 802db54:	950a      	str	r5, [sp, #40]	@ 0x28
 802db56:	f899 3000 	ldrb.w	r3, [r9]
 802db5a:	2b2f      	cmp	r3, #47	@ 0x2f
 802db5c:	f040 8096 	bne.w	802dc8c <_tzset_unlocked_r+0x3e0>
 802db60:	ab0a      	add	r3, sp, #40	@ 0x28
 802db62:	aa08      	add	r2, sp, #32
 802db64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802db68:	f10d 021e 	add.w	r2, sp, #30
 802db6c:	9200      	str	r2, [sp, #0]
 802db6e:	491c      	ldr	r1, [pc, #112]	@ (802dbe0 <_tzset_unlocked_r+0x334>)
 802db70:	9303      	str	r3, [sp, #12]
 802db72:	aa07      	add	r2, sp, #28
 802db74:	4648      	mov	r0, r9
 802db76:	f001 fbd5 	bl	802f324 <siscanf>
 802db7a:	42a8      	cmp	r0, r5
 802db7c:	f300 8086 	bgt.w	802dc8c <_tzset_unlocked_r+0x3e0>
 802db80:	214a      	movs	r1, #74	@ 0x4a
 802db82:	2200      	movs	r2, #0
 802db84:	2300      	movs	r3, #0
 802db86:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802db8a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802db8e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802db92:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802db96:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802db9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802db9e:	7221      	strb	r1, [r4, #8]
 802dba0:	62a5      	str	r5, [r4, #40]	@ 0x28
 802dba2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802dba6:	6525      	str	r5, [r4, #80]	@ 0x50
 802dba8:	e6ae      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802dbaa:	bf00      	nop
 802dbac:	0803bdb8 	.word	0x0803bdb8
 802dbb0:	2001a020 	.word	0x2001a020
 802dbb4:	2001a03c 	.word	0x2001a03c
 802dbb8:	0803bdbb 	.word	0x0803bdbb
 802dbbc:	2001a040 	.word	0x2001a040
 802dbc0:	20000164 	.word	0x20000164
 802dbc4:	0803bc7a 	.word	0x0803bc7a
 802dbc8:	2001a030 	.word	0x2001a030
 802dbcc:	0803bdbf 	.word	0x0803bdbf
 802dbd0:	0803bdf4 	.word	0x0803bdf4
 802dbd4:	2001a024 	.word	0x2001a024
 802dbd8:	0803bdd2 	.word	0x0803bdd2
 802dbdc:	0803bde0 	.word	0x0803bde0
 802dbe0:	0803bdf3 	.word	0x0803bdf3
 802dbe4:	4a3e      	ldr	r2, [pc, #248]	@ (802dce0 <_tzset_unlocked_r+0x434>)
 802dbe6:	493f      	ldr	r1, [pc, #252]	@ (802dce4 <_tzset_unlocked_r+0x438>)
 802dbe8:	ab0a      	add	r3, sp, #40	@ 0x28
 802dbea:	4648      	mov	r0, r9
 802dbec:	f001 fb9a 	bl	802f324 <siscanf>
 802dbf0:	2800      	cmp	r0, #0
 802dbf2:	f77f af17 	ble.w	802da24 <_tzset_unlocked_r+0x178>
 802dbf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dbf8:	3b03      	subs	r3, #3
 802dbfa:	2b07      	cmp	r3, #7
 802dbfc:	f67f af42 	bls.w	802da84 <_tzset_unlocked_r+0x1d8>
 802dc00:	e682      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802dc02:	2b2b      	cmp	r3, #43	@ 0x2b
 802dc04:	bf08      	it	eq
 802dc06:	3501      	addeq	r5, #1
 802dc08:	f04f 0901 	mov.w	r9, #1
 802dc0c:	e745      	b.n	802da9a <_tzset_unlocked_r+0x1ee>
 802dc0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dc12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dc16:	213c      	movs	r1, #60	@ 0x3c
 802dc18:	fb01 3302 	mla	r3, r1, r2, r3
 802dc1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802dc20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802dc24:	fb01 3302 	mla	r3, r1, r2, r3
 802dc28:	fb09 f303 	mul.w	r3, r9, r3
 802dc2c:	e74f      	b.n	802dace <_tzset_unlocked_r+0x222>
 802dc2e:	f04f 0b01 	mov.w	fp, #1
 802dc32:	e752      	b.n	802dada <_tzset_unlocked_r+0x22e>
 802dc34:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802dc38:	bf06      	itte	eq
 802dc3a:	3501      	addeq	r5, #1
 802dc3c:	464b      	moveq	r3, r9
 802dc3e:	2344      	movne	r3, #68	@ 0x44
 802dc40:	220a      	movs	r2, #10
 802dc42:	a90b      	add	r1, sp, #44	@ 0x2c
 802dc44:	4628      	mov	r0, r5
 802dc46:	9305      	str	r3, [sp, #20]
 802dc48:	f007 f950 	bl	8034eec <strtoul>
 802dc4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802dc50:	9b05      	ldr	r3, [sp, #20]
 802dc52:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802dc56:	45a9      	cmp	r9, r5
 802dc58:	d114      	bne.n	802dc84 <_tzset_unlocked_r+0x3d8>
 802dc5a:	234d      	movs	r3, #77	@ 0x4d
 802dc5c:	f1bb 0f00 	cmp.w	fp, #0
 802dc60:	d107      	bne.n	802dc72 <_tzset_unlocked_r+0x3c6>
 802dc62:	7223      	strb	r3, [r4, #8]
 802dc64:	2103      	movs	r1, #3
 802dc66:	2302      	movs	r3, #2
 802dc68:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802dc6c:	f8c4 b014 	str.w	fp, [r4, #20]
 802dc70:	e767      	b.n	802db42 <_tzset_unlocked_r+0x296>
 802dc72:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802dc76:	220b      	movs	r2, #11
 802dc78:	2301      	movs	r3, #1
 802dc7a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802dc7e:	2300      	movs	r3, #0
 802dc80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802dc82:	e75e      	b.n	802db42 <_tzset_unlocked_r+0x296>
 802dc84:	b280      	uxth	r0, r0
 802dc86:	723b      	strb	r3, [r7, #8]
 802dc88:	6178      	str	r0, [r7, #20]
 802dc8a:	e75a      	b.n	802db42 <_tzset_unlocked_r+0x296>
 802dc8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dc90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dc94:	213c      	movs	r1, #60	@ 0x3c
 802dc96:	fb01 3302 	mla	r3, r1, r2, r3
 802dc9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802dc9e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802dca2:	fb01 3302 	mla	r3, r1, r2, r3
 802dca6:	61bb      	str	r3, [r7, #24]
 802dca8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802dcaa:	3728      	adds	r7, #40	@ 0x28
 802dcac:	444d      	add	r5, r9
 802dcae:	f1bb 0f00 	cmp.w	fp, #0
 802dcb2:	d0bc      	beq.n	802dc2e <_tzset_unlocked_r+0x382>
 802dcb4:	9b04      	ldr	r3, [sp, #16]
 802dcb6:	6523      	str	r3, [r4, #80]	@ 0x50
 802dcb8:	4b0b      	ldr	r3, [pc, #44]	@ (802dce8 <_tzset_unlocked_r+0x43c>)
 802dcba:	f8c8 3000 	str.w	r3, [r8]
 802dcbe:	6860      	ldr	r0, [r4, #4]
 802dcc0:	4b07      	ldr	r3, [pc, #28]	@ (802dce0 <_tzset_unlocked_r+0x434>)
 802dcc2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802dcc4:	f8c8 3004 	str.w	r3, [r8, #4]
 802dcc8:	f7ff fd34 	bl	802d734 <__tzcalc_limits>
 802dccc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802dcce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802dcd0:	f8ca 2000 	str.w	r2, [sl]
 802dcd4:	1a9b      	subs	r3, r3, r2
 802dcd6:	4a05      	ldr	r2, [pc, #20]	@ (802dcec <_tzset_unlocked_r+0x440>)
 802dcd8:	bf18      	it	ne
 802dcda:	2301      	movne	r3, #1
 802dcdc:	6013      	str	r3, [r2, #0]
 802dcde:	e613      	b.n	802d908 <_tzset_unlocked_r+0x5c>
 802dce0:	2001a024 	.word	0x2001a024
 802dce4:	0803bdd2 	.word	0x0803bdd2
 802dce8:	2001a030 	.word	0x2001a030
 802dcec:	2001a040 	.word	0x2001a040

0802dcf0 <__locale_mb_cur_max>:
 802dcf0:	4b01      	ldr	r3, [pc, #4]	@ (802dcf8 <__locale_mb_cur_max+0x8>)
 802dcf2:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802dcf6:	4770      	bx	lr
 802dcf8:	2000016c 	.word	0x2000016c

0802dcfc <_localeconv_r>:
 802dcfc:	4800      	ldr	r0, [pc, #0]	@ (802dd00 <_localeconv_r+0x4>)
 802dcfe:	4770      	bx	lr
 802dd00:	2000025c 	.word	0x2000025c

0802dd04 <_close_r>:
 802dd04:	b538      	push	{r3, r4, r5, lr}
 802dd06:	4d06      	ldr	r5, [pc, #24]	@ (802dd20 <_close_r+0x1c>)
 802dd08:	2300      	movs	r3, #0
 802dd0a:	4604      	mov	r4, r0
 802dd0c:	4608      	mov	r0, r1
 802dd0e:	602b      	str	r3, [r5, #0]
 802dd10:	f7e4 fb7c 	bl	801240c <_close>
 802dd14:	1c43      	adds	r3, r0, #1
 802dd16:	d102      	bne.n	802dd1e <_close_r+0x1a>
 802dd18:	682b      	ldr	r3, [r5, #0]
 802dd1a:	b103      	cbz	r3, 802dd1e <_close_r+0x1a>
 802dd1c:	6023      	str	r3, [r4, #0]
 802dd1e:	bd38      	pop	{r3, r4, r5, pc}
 802dd20:	2001a044 	.word	0x2001a044

0802dd24 <_reclaim_reent>:
 802dd24:	4b14      	ldr	r3, [pc, #80]	@ (802dd78 <_reclaim_reent+0x54>)
 802dd26:	681b      	ldr	r3, [r3, #0]
 802dd28:	4283      	cmp	r3, r0
 802dd2a:	b570      	push	{r4, r5, r6, lr}
 802dd2c:	4604      	mov	r4, r0
 802dd2e:	d022      	beq.n	802dd76 <_reclaim_reent+0x52>
 802dd30:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802dd32:	b153      	cbz	r3, 802dd4a <_reclaim_reent+0x26>
 802dd34:	2500      	movs	r5, #0
 802dd36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802dd38:	5959      	ldr	r1, [r3, r5]
 802dd3a:	b9b1      	cbnz	r1, 802dd6a <_reclaim_reent+0x46>
 802dd3c:	3504      	adds	r5, #4
 802dd3e:	2d80      	cmp	r5, #128	@ 0x80
 802dd40:	d1f9      	bne.n	802dd36 <_reclaim_reent+0x12>
 802dd42:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802dd44:	4620      	mov	r0, r4
 802dd46:	f000 ff89 	bl	802ec5c <_free_r>
 802dd4a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802dd4c:	b111      	cbz	r1, 802dd54 <_reclaim_reent+0x30>
 802dd4e:	4620      	mov	r0, r4
 802dd50:	f000 ff84 	bl	802ec5c <_free_r>
 802dd54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802dd56:	b111      	cbz	r1, 802dd5e <_reclaim_reent+0x3a>
 802dd58:	4620      	mov	r0, r4
 802dd5a:	f000 ff7f 	bl	802ec5c <_free_r>
 802dd5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802dd60:	b14b      	cbz	r3, 802dd76 <_reclaim_reent+0x52>
 802dd62:	4620      	mov	r0, r4
 802dd64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dd68:	4718      	bx	r3
 802dd6a:	680e      	ldr	r6, [r1, #0]
 802dd6c:	4620      	mov	r0, r4
 802dd6e:	f000 ff75 	bl	802ec5c <_free_r>
 802dd72:	4631      	mov	r1, r6
 802dd74:	e7e1      	b.n	802dd3a <_reclaim_reent+0x16>
 802dd76:	bd70      	pop	{r4, r5, r6, pc}
 802dd78:	200002d8 	.word	0x200002d8

0802dd7c <_lseek_r>:
 802dd7c:	b538      	push	{r3, r4, r5, lr}
 802dd7e:	4d07      	ldr	r5, [pc, #28]	@ (802dd9c <_lseek_r+0x20>)
 802dd80:	4604      	mov	r4, r0
 802dd82:	4608      	mov	r0, r1
 802dd84:	4611      	mov	r1, r2
 802dd86:	2200      	movs	r2, #0
 802dd88:	602a      	str	r2, [r5, #0]
 802dd8a:	461a      	mov	r2, r3
 802dd8c:	f7e4 fb48 	bl	8012420 <_lseek>
 802dd90:	1c43      	adds	r3, r0, #1
 802dd92:	d102      	bne.n	802dd9a <_lseek_r+0x1e>
 802dd94:	682b      	ldr	r3, [r5, #0]
 802dd96:	b103      	cbz	r3, 802dd9a <_lseek_r+0x1e>
 802dd98:	6023      	str	r3, [r4, #0]
 802dd9a:	bd38      	pop	{r3, r4, r5, pc}
 802dd9c:	2001a044 	.word	0x2001a044

0802dda0 <_read_r>:
 802dda0:	b538      	push	{r3, r4, r5, lr}
 802dda2:	4d07      	ldr	r5, [pc, #28]	@ (802ddc0 <_read_r+0x20>)
 802dda4:	4604      	mov	r4, r0
 802dda6:	4608      	mov	r0, r1
 802dda8:	4611      	mov	r1, r2
 802ddaa:	2200      	movs	r2, #0
 802ddac:	602a      	str	r2, [r5, #0]
 802ddae:	461a      	mov	r2, r3
 802ddb0:	f7e4 fb0e 	bl	80123d0 <_read>
 802ddb4:	1c43      	adds	r3, r0, #1
 802ddb6:	d102      	bne.n	802ddbe <_read_r+0x1e>
 802ddb8:	682b      	ldr	r3, [r5, #0]
 802ddba:	b103      	cbz	r3, 802ddbe <_read_r+0x1e>
 802ddbc:	6023      	str	r3, [r4, #0]
 802ddbe:	bd38      	pop	{r3, r4, r5, pc}
 802ddc0:	2001a044 	.word	0x2001a044

0802ddc4 <_write_r>:
 802ddc4:	b538      	push	{r3, r4, r5, lr}
 802ddc6:	4d07      	ldr	r5, [pc, #28]	@ (802dde4 <_write_r+0x20>)
 802ddc8:	4604      	mov	r4, r0
 802ddca:	4608      	mov	r0, r1
 802ddcc:	4611      	mov	r1, r2
 802ddce:	2200      	movs	r2, #0
 802ddd0:	602a      	str	r2, [r5, #0]
 802ddd2:	461a      	mov	r2, r3
 802ddd4:	f7e4 fb0c 	bl	80123f0 <_write>
 802ddd8:	1c43      	adds	r3, r0, #1
 802ddda:	d102      	bne.n	802dde2 <_write_r+0x1e>
 802dddc:	682b      	ldr	r3, [r5, #0]
 802ddde:	b103      	cbz	r3, 802dde2 <_write_r+0x1e>
 802dde0:	6023      	str	r3, [r4, #0]
 802dde2:	bd38      	pop	{r3, r4, r5, pc}
 802dde4:	2001a044 	.word	0x2001a044

0802dde8 <__errno>:
 802dde8:	4b01      	ldr	r3, [pc, #4]	@ (802ddf0 <__errno+0x8>)
 802ddea:	6818      	ldr	r0, [r3, #0]
 802ddec:	4770      	bx	lr
 802ddee:	bf00      	nop
 802ddf0:	200002d8 	.word	0x200002d8

0802ddf4 <strcpy>:
 802ddf4:	4603      	mov	r3, r0
 802ddf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ddfa:	f803 2b01 	strb.w	r2, [r3], #1
 802ddfe:	2a00      	cmp	r2, #0
 802de00:	d1f9      	bne.n	802ddf6 <strcpy+0x2>
 802de02:	4770      	bx	lr

0802de04 <__libc_init_array>:
 802de04:	b570      	push	{r4, r5, r6, lr}
 802de06:	4d0d      	ldr	r5, [pc, #52]	@ (802de3c <__libc_init_array+0x38>)
 802de08:	4c0d      	ldr	r4, [pc, #52]	@ (802de40 <__libc_init_array+0x3c>)
 802de0a:	1b64      	subs	r4, r4, r5
 802de0c:	10a4      	asrs	r4, r4, #2
 802de0e:	2600      	movs	r6, #0
 802de10:	42a6      	cmp	r6, r4
 802de12:	d109      	bne.n	802de28 <__libc_init_array+0x24>
 802de14:	4d0b      	ldr	r5, [pc, #44]	@ (802de44 <__libc_init_array+0x40>)
 802de16:	4c0c      	ldr	r4, [pc, #48]	@ (802de48 <__libc_init_array+0x44>)
 802de18:	f007 ff60 	bl	8035cdc <_init>
 802de1c:	1b64      	subs	r4, r4, r5
 802de1e:	10a4      	asrs	r4, r4, #2
 802de20:	2600      	movs	r6, #0
 802de22:	42a6      	cmp	r6, r4
 802de24:	d105      	bne.n	802de32 <__libc_init_array+0x2e>
 802de26:	bd70      	pop	{r4, r5, r6, pc}
 802de28:	f855 3b04 	ldr.w	r3, [r5], #4
 802de2c:	4798      	blx	r3
 802de2e:	3601      	adds	r6, #1
 802de30:	e7ee      	b.n	802de10 <__libc_init_array+0xc>
 802de32:	f855 3b04 	ldr.w	r3, [r5], #4
 802de36:	4798      	blx	r3
 802de38:	3601      	adds	r6, #1
 802de3a:	e7f2      	b.n	802de22 <__libc_init_array+0x1e>
 802de3c:	0803c448 	.word	0x0803c448
 802de40:	0803c448 	.word	0x0803c448
 802de44:	0803c448 	.word	0x0803c448
 802de48:	0803c450 	.word	0x0803c450

0802de4c <__retarget_lock_init_recursive>:
 802de4c:	4770      	bx	lr

0802de4e <__retarget_lock_close_recursive>:
 802de4e:	4770      	bx	lr

0802de50 <__retarget_lock_acquire>:
 802de50:	4770      	bx	lr

0802de52 <__retarget_lock_acquire_recursive>:
 802de52:	4770      	bx	lr

0802de54 <__retarget_lock_release>:
 802de54:	4770      	bx	lr

0802de56 <__retarget_lock_release_recursive>:
 802de56:	4770      	bx	lr

0802de58 <memcpy>:
 802de58:	440a      	add	r2, r1
 802de5a:	4291      	cmp	r1, r2
 802de5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802de60:	d100      	bne.n	802de64 <memcpy+0xc>
 802de62:	4770      	bx	lr
 802de64:	b510      	push	{r4, lr}
 802de66:	f811 4b01 	ldrb.w	r4, [r1], #1
 802de6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802de6e:	4291      	cmp	r1, r2
 802de70:	d1f9      	bne.n	802de66 <memcpy+0xe>
 802de72:	bd10      	pop	{r4, pc}

0802de74 <_wcrtomb_r>:
 802de74:	b5f0      	push	{r4, r5, r6, r7, lr}
 802de76:	4c09      	ldr	r4, [pc, #36]	@ (802de9c <_wcrtomb_r+0x28>)
 802de78:	b085      	sub	sp, #20
 802de7a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802de7e:	4605      	mov	r5, r0
 802de80:	461e      	mov	r6, r3
 802de82:	b909      	cbnz	r1, 802de88 <_wcrtomb_r+0x14>
 802de84:	460a      	mov	r2, r1
 802de86:	a901      	add	r1, sp, #4
 802de88:	47b8      	blx	r7
 802de8a:	1c43      	adds	r3, r0, #1
 802de8c:	bf01      	itttt	eq
 802de8e:	2300      	moveq	r3, #0
 802de90:	6033      	streq	r3, [r6, #0]
 802de92:	238a      	moveq	r3, #138	@ 0x8a
 802de94:	602b      	streq	r3, [r5, #0]
 802de96:	b005      	add	sp, #20
 802de98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802de9a:	bf00      	nop
 802de9c:	2000016c 	.word	0x2000016c

0802dea0 <frexp>:
 802dea0:	b570      	push	{r4, r5, r6, lr}
 802dea2:	2100      	movs	r1, #0
 802dea4:	ec55 4b10 	vmov	r4, r5, d0
 802dea8:	6001      	str	r1, [r0, #0]
 802deaa:	4915      	ldr	r1, [pc, #84]	@ (802df00 <frexp+0x60>)
 802deac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802deb0:	428a      	cmp	r2, r1
 802deb2:	4606      	mov	r6, r0
 802deb4:	462b      	mov	r3, r5
 802deb6:	d820      	bhi.n	802defa <frexp+0x5a>
 802deb8:	4621      	mov	r1, r4
 802deba:	4311      	orrs	r1, r2
 802debc:	d01d      	beq.n	802defa <frexp+0x5a>
 802debe:	4911      	ldr	r1, [pc, #68]	@ (802df04 <frexp+0x64>)
 802dec0:	4029      	ands	r1, r5
 802dec2:	b961      	cbnz	r1, 802dede <frexp+0x3e>
 802dec4:	4b10      	ldr	r3, [pc, #64]	@ (802df08 <frexp+0x68>)
 802dec6:	2200      	movs	r2, #0
 802dec8:	4620      	mov	r0, r4
 802deca:	4629      	mov	r1, r5
 802decc:	f7e2 fbac 	bl	8010628 <__aeabi_dmul>
 802ded0:	460b      	mov	r3, r1
 802ded2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802ded6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802deda:	4604      	mov	r4, r0
 802dedc:	6031      	str	r1, [r6, #0]
 802dede:	6831      	ldr	r1, [r6, #0]
 802dee0:	1512      	asrs	r2, r2, #20
 802dee2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802dee6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802deea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802deee:	4411      	add	r1, r2
 802def0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802def4:	6031      	str	r1, [r6, #0]
 802def6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802defa:	ec45 4b10 	vmov	d0, r4, r5
 802defe:	bd70      	pop	{r4, r5, r6, pc}
 802df00:	7fefffff 	.word	0x7fefffff
 802df04:	7ff00000 	.word	0x7ff00000
 802df08:	43500000 	.word	0x43500000

0802df0c <register_fini>:
 802df0c:	4b02      	ldr	r3, [pc, #8]	@ (802df18 <register_fini+0xc>)
 802df0e:	b113      	cbz	r3, 802df16 <register_fini+0xa>
 802df10:	4802      	ldr	r0, [pc, #8]	@ (802df1c <register_fini+0x10>)
 802df12:	f000 b810 	b.w	802df36 <atexit>
 802df16:	4770      	bx	lr
 802df18:	00000000 	.word	0x00000000
 802df1c:	0803539d 	.word	0x0803539d

0802df20 <abort>:
 802df20:	b508      	push	{r3, lr}
 802df22:	2006      	movs	r0, #6
 802df24:	f007 f8a6 	bl	8035074 <raise>
 802df28:	2001      	movs	r0, #1
 802df2a:	f7e4 fa4b 	bl	80123c4 <_exit>

0802df2e <abs>:
 802df2e:	2800      	cmp	r0, #0
 802df30:	bfb8      	it	lt
 802df32:	4240      	neglt	r0, r0
 802df34:	4770      	bx	lr

0802df36 <atexit>:
 802df36:	2300      	movs	r3, #0
 802df38:	4601      	mov	r1, r0
 802df3a:	461a      	mov	r2, r3
 802df3c:	4618      	mov	r0, r3
 802df3e:	f007 bb01 	b.w	8035544 <__register_exitproc>

0802df42 <quorem>:
 802df42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df46:	6903      	ldr	r3, [r0, #16]
 802df48:	690c      	ldr	r4, [r1, #16]
 802df4a:	42a3      	cmp	r3, r4
 802df4c:	4607      	mov	r7, r0
 802df4e:	db7e      	blt.n	802e04e <quorem+0x10c>
 802df50:	3c01      	subs	r4, #1
 802df52:	f101 0814 	add.w	r8, r1, #20
 802df56:	00a3      	lsls	r3, r4, #2
 802df58:	f100 0514 	add.w	r5, r0, #20
 802df5c:	9300      	str	r3, [sp, #0]
 802df5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802df62:	9301      	str	r3, [sp, #4]
 802df64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802df68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802df6c:	3301      	adds	r3, #1
 802df6e:	429a      	cmp	r2, r3
 802df70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802df74:	fbb2 f6f3 	udiv	r6, r2, r3
 802df78:	d32e      	bcc.n	802dfd8 <quorem+0x96>
 802df7a:	f04f 0a00 	mov.w	sl, #0
 802df7e:	46c4      	mov	ip, r8
 802df80:	46ae      	mov	lr, r5
 802df82:	46d3      	mov	fp, sl
 802df84:	f85c 3b04 	ldr.w	r3, [ip], #4
 802df88:	b298      	uxth	r0, r3
 802df8a:	fb06 a000 	mla	r0, r6, r0, sl
 802df8e:	0c02      	lsrs	r2, r0, #16
 802df90:	0c1b      	lsrs	r3, r3, #16
 802df92:	fb06 2303 	mla	r3, r6, r3, r2
 802df96:	f8de 2000 	ldr.w	r2, [lr]
 802df9a:	b280      	uxth	r0, r0
 802df9c:	b292      	uxth	r2, r2
 802df9e:	1a12      	subs	r2, r2, r0
 802dfa0:	445a      	add	r2, fp
 802dfa2:	f8de 0000 	ldr.w	r0, [lr]
 802dfa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802dfaa:	b29b      	uxth	r3, r3
 802dfac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802dfb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802dfb4:	b292      	uxth	r2, r2
 802dfb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802dfba:	45e1      	cmp	r9, ip
 802dfbc:	f84e 2b04 	str.w	r2, [lr], #4
 802dfc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802dfc4:	d2de      	bcs.n	802df84 <quorem+0x42>
 802dfc6:	9b00      	ldr	r3, [sp, #0]
 802dfc8:	58eb      	ldr	r3, [r5, r3]
 802dfca:	b92b      	cbnz	r3, 802dfd8 <quorem+0x96>
 802dfcc:	9b01      	ldr	r3, [sp, #4]
 802dfce:	3b04      	subs	r3, #4
 802dfd0:	429d      	cmp	r5, r3
 802dfd2:	461a      	mov	r2, r3
 802dfd4:	d32f      	bcc.n	802e036 <quorem+0xf4>
 802dfd6:	613c      	str	r4, [r7, #16]
 802dfd8:	4638      	mov	r0, r7
 802dfda:	f005 fce3 	bl	80339a4 <__mcmp>
 802dfde:	2800      	cmp	r0, #0
 802dfe0:	db25      	blt.n	802e02e <quorem+0xec>
 802dfe2:	4629      	mov	r1, r5
 802dfe4:	2000      	movs	r0, #0
 802dfe6:	f858 2b04 	ldr.w	r2, [r8], #4
 802dfea:	f8d1 c000 	ldr.w	ip, [r1]
 802dfee:	fa1f fe82 	uxth.w	lr, r2
 802dff2:	fa1f f38c 	uxth.w	r3, ip
 802dff6:	eba3 030e 	sub.w	r3, r3, lr
 802dffa:	4403      	add	r3, r0
 802dffc:	0c12      	lsrs	r2, r2, #16
 802dffe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802e002:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802e006:	b29b      	uxth	r3, r3
 802e008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e00c:	45c1      	cmp	r9, r8
 802e00e:	f841 3b04 	str.w	r3, [r1], #4
 802e012:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e016:	d2e6      	bcs.n	802dfe6 <quorem+0xa4>
 802e018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e01c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e020:	b922      	cbnz	r2, 802e02c <quorem+0xea>
 802e022:	3b04      	subs	r3, #4
 802e024:	429d      	cmp	r5, r3
 802e026:	461a      	mov	r2, r3
 802e028:	d30b      	bcc.n	802e042 <quorem+0x100>
 802e02a:	613c      	str	r4, [r7, #16]
 802e02c:	3601      	adds	r6, #1
 802e02e:	4630      	mov	r0, r6
 802e030:	b003      	add	sp, #12
 802e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e036:	6812      	ldr	r2, [r2, #0]
 802e038:	3b04      	subs	r3, #4
 802e03a:	2a00      	cmp	r2, #0
 802e03c:	d1cb      	bne.n	802dfd6 <quorem+0x94>
 802e03e:	3c01      	subs	r4, #1
 802e040:	e7c6      	b.n	802dfd0 <quorem+0x8e>
 802e042:	6812      	ldr	r2, [r2, #0]
 802e044:	3b04      	subs	r3, #4
 802e046:	2a00      	cmp	r2, #0
 802e048:	d1ef      	bne.n	802e02a <quorem+0xe8>
 802e04a:	3c01      	subs	r4, #1
 802e04c:	e7ea      	b.n	802e024 <quorem+0xe2>
 802e04e:	2000      	movs	r0, #0
 802e050:	e7ee      	b.n	802e030 <quorem+0xee>
 802e052:	0000      	movs	r0, r0
 802e054:	0000      	movs	r0, r0
	...

0802e058 <_dtoa_r>:
 802e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e05c:	b099      	sub	sp, #100	@ 0x64
 802e05e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e062:	9109      	str	r1, [sp, #36]	@ 0x24
 802e064:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802e066:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e068:	920e      	str	r2, [sp, #56]	@ 0x38
 802e06a:	ec55 4b10 	vmov	r4, r5, d0
 802e06e:	4683      	mov	fp, r0
 802e070:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e072:	b149      	cbz	r1, 802e088 <_dtoa_r+0x30>
 802e074:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e076:	604a      	str	r2, [r1, #4]
 802e078:	2301      	movs	r3, #1
 802e07a:	4093      	lsls	r3, r2
 802e07c:	608b      	str	r3, [r1, #8]
 802e07e:	f005 fa40 	bl	8033502 <_Bfree>
 802e082:	2300      	movs	r3, #0
 802e084:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802e088:	1e2b      	subs	r3, r5, #0
 802e08a:	bfb9      	ittee	lt
 802e08c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e090:	9303      	strlt	r3, [sp, #12]
 802e092:	2300      	movge	r3, #0
 802e094:	6033      	strge	r3, [r6, #0]
 802e096:	9f03      	ldr	r7, [sp, #12]
 802e098:	4b97      	ldr	r3, [pc, #604]	@ (802e2f8 <_dtoa_r+0x2a0>)
 802e09a:	bfbc      	itt	lt
 802e09c:	2201      	movlt	r2, #1
 802e09e:	6032      	strlt	r2, [r6, #0]
 802e0a0:	43bb      	bics	r3, r7
 802e0a2:	d114      	bne.n	802e0ce <_dtoa_r+0x76>
 802e0a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e0a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e0aa:	6013      	str	r3, [r2, #0]
 802e0ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e0b0:	4323      	orrs	r3, r4
 802e0b2:	f000 854c 	beq.w	802eb4e <_dtoa_r+0xaf6>
 802e0b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e0b8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e310 <_dtoa_r+0x2b8>
 802e0bc:	b11b      	cbz	r3, 802e0c6 <_dtoa_r+0x6e>
 802e0be:	f10a 0303 	add.w	r3, sl, #3
 802e0c2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e0c4:	6013      	str	r3, [r2, #0]
 802e0c6:	4650      	mov	r0, sl
 802e0c8:	b019      	add	sp, #100	@ 0x64
 802e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e0ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e0d2:	2200      	movs	r2, #0
 802e0d4:	ec51 0b17 	vmov	r0, r1, d7
 802e0d8:	2300      	movs	r3, #0
 802e0da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e0de:	f7e2 fd0b 	bl	8010af8 <__aeabi_dcmpeq>
 802e0e2:	4680      	mov	r8, r0
 802e0e4:	b150      	cbz	r0, 802e0fc <_dtoa_r+0xa4>
 802e0e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e0e8:	2301      	movs	r3, #1
 802e0ea:	6013      	str	r3, [r2, #0]
 802e0ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e0ee:	b113      	cbz	r3, 802e0f6 <_dtoa_r+0x9e>
 802e0f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e0f2:	4b82      	ldr	r3, [pc, #520]	@ (802e2fc <_dtoa_r+0x2a4>)
 802e0f4:	6013      	str	r3, [r2, #0]
 802e0f6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802e314 <_dtoa_r+0x2bc>
 802e0fa:	e7e4      	b.n	802e0c6 <_dtoa_r+0x6e>
 802e0fc:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e100:	aa16      	add	r2, sp, #88	@ 0x58
 802e102:	a917      	add	r1, sp, #92	@ 0x5c
 802e104:	4658      	mov	r0, fp
 802e106:	f005 fd6d 	bl	8033be4 <__d2b>
 802e10a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e10e:	4681      	mov	r9, r0
 802e110:	2e00      	cmp	r6, #0
 802e112:	d077      	beq.n	802e204 <_dtoa_r+0x1ac>
 802e114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e116:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e11a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e122:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e126:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e12a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e12e:	4619      	mov	r1, r3
 802e130:	2200      	movs	r2, #0
 802e132:	4b73      	ldr	r3, [pc, #460]	@ (802e300 <_dtoa_r+0x2a8>)
 802e134:	f7e2 f8c0 	bl	80102b8 <__aeabi_dsub>
 802e138:	a369      	add	r3, pc, #420	@ (adr r3, 802e2e0 <_dtoa_r+0x288>)
 802e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e13e:	f7e2 fa73 	bl	8010628 <__aeabi_dmul>
 802e142:	a369      	add	r3, pc, #420	@ (adr r3, 802e2e8 <_dtoa_r+0x290>)
 802e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e148:	f7e2 f8b8 	bl	80102bc <__adddf3>
 802e14c:	4604      	mov	r4, r0
 802e14e:	4630      	mov	r0, r6
 802e150:	460d      	mov	r5, r1
 802e152:	f7e2 f9ff 	bl	8010554 <__aeabi_i2d>
 802e156:	a366      	add	r3, pc, #408	@ (adr r3, 802e2f0 <_dtoa_r+0x298>)
 802e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e15c:	f7e2 fa64 	bl	8010628 <__aeabi_dmul>
 802e160:	4602      	mov	r2, r0
 802e162:	460b      	mov	r3, r1
 802e164:	4620      	mov	r0, r4
 802e166:	4629      	mov	r1, r5
 802e168:	f7e2 f8a8 	bl	80102bc <__adddf3>
 802e16c:	4604      	mov	r4, r0
 802e16e:	460d      	mov	r5, r1
 802e170:	f7e2 fd0a 	bl	8010b88 <__aeabi_d2iz>
 802e174:	2200      	movs	r2, #0
 802e176:	4607      	mov	r7, r0
 802e178:	2300      	movs	r3, #0
 802e17a:	4620      	mov	r0, r4
 802e17c:	4629      	mov	r1, r5
 802e17e:	f7e2 fcc5 	bl	8010b0c <__aeabi_dcmplt>
 802e182:	b140      	cbz	r0, 802e196 <_dtoa_r+0x13e>
 802e184:	4638      	mov	r0, r7
 802e186:	f7e2 f9e5 	bl	8010554 <__aeabi_i2d>
 802e18a:	4622      	mov	r2, r4
 802e18c:	462b      	mov	r3, r5
 802e18e:	f7e2 fcb3 	bl	8010af8 <__aeabi_dcmpeq>
 802e192:	b900      	cbnz	r0, 802e196 <_dtoa_r+0x13e>
 802e194:	3f01      	subs	r7, #1
 802e196:	2f16      	cmp	r7, #22
 802e198:	d851      	bhi.n	802e23e <_dtoa_r+0x1e6>
 802e19a:	4b5a      	ldr	r3, [pc, #360]	@ (802e304 <_dtoa_r+0x2ac>)
 802e19c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e1a8:	f7e2 fcb0 	bl	8010b0c <__aeabi_dcmplt>
 802e1ac:	2800      	cmp	r0, #0
 802e1ae:	d048      	beq.n	802e242 <_dtoa_r+0x1ea>
 802e1b0:	3f01      	subs	r7, #1
 802e1b2:	2300      	movs	r3, #0
 802e1b4:	9312      	str	r3, [sp, #72]	@ 0x48
 802e1b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e1b8:	1b9b      	subs	r3, r3, r6
 802e1ba:	1e5a      	subs	r2, r3, #1
 802e1bc:	bf44      	itt	mi
 802e1be:	f1c3 0801 	rsbmi	r8, r3, #1
 802e1c2:	2300      	movmi	r3, #0
 802e1c4:	9208      	str	r2, [sp, #32]
 802e1c6:	bf54      	ite	pl
 802e1c8:	f04f 0800 	movpl.w	r8, #0
 802e1cc:	9308      	strmi	r3, [sp, #32]
 802e1ce:	2f00      	cmp	r7, #0
 802e1d0:	db39      	blt.n	802e246 <_dtoa_r+0x1ee>
 802e1d2:	9b08      	ldr	r3, [sp, #32]
 802e1d4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e1d6:	443b      	add	r3, r7
 802e1d8:	9308      	str	r3, [sp, #32]
 802e1da:	2300      	movs	r3, #0
 802e1dc:	930a      	str	r3, [sp, #40]	@ 0x28
 802e1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e1e0:	2b09      	cmp	r3, #9
 802e1e2:	d865      	bhi.n	802e2b0 <_dtoa_r+0x258>
 802e1e4:	2b05      	cmp	r3, #5
 802e1e6:	bfc4      	itt	gt
 802e1e8:	3b04      	subgt	r3, #4
 802e1ea:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e1ee:	f1a3 0302 	sub.w	r3, r3, #2
 802e1f2:	bfcc      	ite	gt
 802e1f4:	2400      	movgt	r4, #0
 802e1f6:	2401      	movle	r4, #1
 802e1f8:	2b03      	cmp	r3, #3
 802e1fa:	d864      	bhi.n	802e2c6 <_dtoa_r+0x26e>
 802e1fc:	e8df f003 	tbb	[pc, r3]
 802e200:	5635372a 	.word	0x5635372a
 802e204:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e208:	441e      	add	r6, r3
 802e20a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e20e:	2b20      	cmp	r3, #32
 802e210:	bfc1      	itttt	gt
 802e212:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e216:	409f      	lslgt	r7, r3
 802e218:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e21c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e220:	bfd6      	itet	le
 802e222:	f1c3 0320 	rsble	r3, r3, #32
 802e226:	ea47 0003 	orrgt.w	r0, r7, r3
 802e22a:	fa04 f003 	lslle.w	r0, r4, r3
 802e22e:	f7e2 f981 	bl	8010534 <__aeabi_ui2d>
 802e232:	2201      	movs	r2, #1
 802e234:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e238:	3e01      	subs	r6, #1
 802e23a:	9214      	str	r2, [sp, #80]	@ 0x50
 802e23c:	e777      	b.n	802e12e <_dtoa_r+0xd6>
 802e23e:	2301      	movs	r3, #1
 802e240:	e7b8      	b.n	802e1b4 <_dtoa_r+0x15c>
 802e242:	9012      	str	r0, [sp, #72]	@ 0x48
 802e244:	e7b7      	b.n	802e1b6 <_dtoa_r+0x15e>
 802e246:	427b      	negs	r3, r7
 802e248:	930a      	str	r3, [sp, #40]	@ 0x28
 802e24a:	2300      	movs	r3, #0
 802e24c:	eba8 0807 	sub.w	r8, r8, r7
 802e250:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e252:	e7c4      	b.n	802e1de <_dtoa_r+0x186>
 802e254:	2300      	movs	r3, #0
 802e256:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e25a:	2b00      	cmp	r3, #0
 802e25c:	dc36      	bgt.n	802e2cc <_dtoa_r+0x274>
 802e25e:	2301      	movs	r3, #1
 802e260:	9300      	str	r3, [sp, #0]
 802e262:	9307      	str	r3, [sp, #28]
 802e264:	461a      	mov	r2, r3
 802e266:	920e      	str	r2, [sp, #56]	@ 0x38
 802e268:	e00b      	b.n	802e282 <_dtoa_r+0x22a>
 802e26a:	2301      	movs	r3, #1
 802e26c:	e7f3      	b.n	802e256 <_dtoa_r+0x1fe>
 802e26e:	2300      	movs	r3, #0
 802e270:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e274:	18fb      	adds	r3, r7, r3
 802e276:	9300      	str	r3, [sp, #0]
 802e278:	3301      	adds	r3, #1
 802e27a:	2b01      	cmp	r3, #1
 802e27c:	9307      	str	r3, [sp, #28]
 802e27e:	bfb8      	it	lt
 802e280:	2301      	movlt	r3, #1
 802e282:	2100      	movs	r1, #0
 802e284:	2204      	movs	r2, #4
 802e286:	f102 0014 	add.w	r0, r2, #20
 802e28a:	4298      	cmp	r0, r3
 802e28c:	d922      	bls.n	802e2d4 <_dtoa_r+0x27c>
 802e28e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e292:	4658      	mov	r0, fp
 802e294:	f005 f910 	bl	80334b8 <_Balloc>
 802e298:	4682      	mov	sl, r0
 802e29a:	2800      	cmp	r0, #0
 802e29c:	d13c      	bne.n	802e318 <_dtoa_r+0x2c0>
 802e29e:	4b1a      	ldr	r3, [pc, #104]	@ (802e308 <_dtoa_r+0x2b0>)
 802e2a0:	4602      	mov	r2, r0
 802e2a2:	f240 11af 	movw	r1, #431	@ 0x1af
 802e2a6:	4819      	ldr	r0, [pc, #100]	@ (802e30c <_dtoa_r+0x2b4>)
 802e2a8:	f7fb fe48 	bl	8029f3c <__assert_func>
 802e2ac:	2301      	movs	r3, #1
 802e2ae:	e7df      	b.n	802e270 <_dtoa_r+0x218>
 802e2b0:	2401      	movs	r4, #1
 802e2b2:	2300      	movs	r3, #0
 802e2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 802e2b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e2b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e2bc:	9300      	str	r3, [sp, #0]
 802e2be:	9307      	str	r3, [sp, #28]
 802e2c0:	2200      	movs	r2, #0
 802e2c2:	2312      	movs	r3, #18
 802e2c4:	e7cf      	b.n	802e266 <_dtoa_r+0x20e>
 802e2c6:	2301      	movs	r3, #1
 802e2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e2ca:	e7f5      	b.n	802e2b8 <_dtoa_r+0x260>
 802e2cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e2ce:	9300      	str	r3, [sp, #0]
 802e2d0:	9307      	str	r3, [sp, #28]
 802e2d2:	e7d6      	b.n	802e282 <_dtoa_r+0x22a>
 802e2d4:	3101      	adds	r1, #1
 802e2d6:	0052      	lsls	r2, r2, #1
 802e2d8:	e7d5      	b.n	802e286 <_dtoa_r+0x22e>
 802e2da:	bf00      	nop
 802e2dc:	f3af 8000 	nop.w
 802e2e0:	636f4361 	.word	0x636f4361
 802e2e4:	3fd287a7 	.word	0x3fd287a7
 802e2e8:	8b60c8b3 	.word	0x8b60c8b3
 802e2ec:	3fc68a28 	.word	0x3fc68a28
 802e2f0:	509f79fb 	.word	0x509f79fb
 802e2f4:	3fd34413 	.word	0x3fd34413
 802e2f8:	7ff00000 	.word	0x7ff00000
 802e2fc:	0803bcae 	.word	0x0803bcae
 802e300:	3ff80000 	.word	0x3ff80000
 802e304:	0803c2c8 	.word	0x0803c2c8
 802e308:	0803c146 	.word	0x0803c146
 802e30c:	0803c157 	.word	0x0803c157
 802e310:	0803c142 	.word	0x0803c142
 802e314:	0803bcad 	.word	0x0803bcad
 802e318:	9b07      	ldr	r3, [sp, #28]
 802e31a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802e31e:	2b0e      	cmp	r3, #14
 802e320:	f200 80a4 	bhi.w	802e46c <_dtoa_r+0x414>
 802e324:	2c00      	cmp	r4, #0
 802e326:	f000 80a1 	beq.w	802e46c <_dtoa_r+0x414>
 802e32a:	2f00      	cmp	r7, #0
 802e32c:	dd33      	ble.n	802e396 <_dtoa_r+0x33e>
 802e32e:	4bae      	ldr	r3, [pc, #696]	@ (802e5e8 <_dtoa_r+0x590>)
 802e330:	f007 020f 	and.w	r2, r7, #15
 802e334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e338:	ed93 7b00 	vldr	d7, [r3]
 802e33c:	05f8      	lsls	r0, r7, #23
 802e33e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e342:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e346:	d516      	bpl.n	802e376 <_dtoa_r+0x31e>
 802e348:	4ba8      	ldr	r3, [pc, #672]	@ (802e5ec <_dtoa_r+0x594>)
 802e34a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e34e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e352:	f7e2 fa93 	bl	801087c <__aeabi_ddiv>
 802e356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e35a:	f004 040f 	and.w	r4, r4, #15
 802e35e:	2603      	movs	r6, #3
 802e360:	4da2      	ldr	r5, [pc, #648]	@ (802e5ec <_dtoa_r+0x594>)
 802e362:	b954      	cbnz	r4, 802e37a <_dtoa_r+0x322>
 802e364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e36c:	f7e2 fa86 	bl	801087c <__aeabi_ddiv>
 802e370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e374:	e028      	b.n	802e3c8 <_dtoa_r+0x370>
 802e376:	2602      	movs	r6, #2
 802e378:	e7f2      	b.n	802e360 <_dtoa_r+0x308>
 802e37a:	07e1      	lsls	r1, r4, #31
 802e37c:	d508      	bpl.n	802e390 <_dtoa_r+0x338>
 802e37e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e382:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e386:	f7e2 f94f 	bl	8010628 <__aeabi_dmul>
 802e38a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802e38e:	3601      	adds	r6, #1
 802e390:	1064      	asrs	r4, r4, #1
 802e392:	3508      	adds	r5, #8
 802e394:	e7e5      	b.n	802e362 <_dtoa_r+0x30a>
 802e396:	f000 80d2 	beq.w	802e53e <_dtoa_r+0x4e6>
 802e39a:	427c      	negs	r4, r7
 802e39c:	4b92      	ldr	r3, [pc, #584]	@ (802e5e8 <_dtoa_r+0x590>)
 802e39e:	4d93      	ldr	r5, [pc, #588]	@ (802e5ec <_dtoa_r+0x594>)
 802e3a0:	f004 020f 	and.w	r2, r4, #15
 802e3a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e3b0:	f7e2 f93a 	bl	8010628 <__aeabi_dmul>
 802e3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3b8:	1124      	asrs	r4, r4, #4
 802e3ba:	2300      	movs	r3, #0
 802e3bc:	2602      	movs	r6, #2
 802e3be:	2c00      	cmp	r4, #0
 802e3c0:	f040 80b2 	bne.w	802e528 <_dtoa_r+0x4d0>
 802e3c4:	2b00      	cmp	r3, #0
 802e3c6:	d1d3      	bne.n	802e370 <_dtoa_r+0x318>
 802e3c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e3ca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e3ce:	2b00      	cmp	r3, #0
 802e3d0:	f000 80b7 	beq.w	802e542 <_dtoa_r+0x4ea>
 802e3d4:	4b86      	ldr	r3, [pc, #536]	@ (802e5f0 <_dtoa_r+0x598>)
 802e3d6:	2200      	movs	r2, #0
 802e3d8:	4620      	mov	r0, r4
 802e3da:	4629      	mov	r1, r5
 802e3dc:	f7e2 fb96 	bl	8010b0c <__aeabi_dcmplt>
 802e3e0:	2800      	cmp	r0, #0
 802e3e2:	f000 80ae 	beq.w	802e542 <_dtoa_r+0x4ea>
 802e3e6:	9b07      	ldr	r3, [sp, #28]
 802e3e8:	2b00      	cmp	r3, #0
 802e3ea:	f000 80aa 	beq.w	802e542 <_dtoa_r+0x4ea>
 802e3ee:	9b00      	ldr	r3, [sp, #0]
 802e3f0:	2b00      	cmp	r3, #0
 802e3f2:	dd37      	ble.n	802e464 <_dtoa_r+0x40c>
 802e3f4:	1e7b      	subs	r3, r7, #1
 802e3f6:	9304      	str	r3, [sp, #16]
 802e3f8:	4620      	mov	r0, r4
 802e3fa:	4b7e      	ldr	r3, [pc, #504]	@ (802e5f4 <_dtoa_r+0x59c>)
 802e3fc:	2200      	movs	r2, #0
 802e3fe:	4629      	mov	r1, r5
 802e400:	f7e2 f912 	bl	8010628 <__aeabi_dmul>
 802e404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e408:	9c00      	ldr	r4, [sp, #0]
 802e40a:	3601      	adds	r6, #1
 802e40c:	4630      	mov	r0, r6
 802e40e:	f7e2 f8a1 	bl	8010554 <__aeabi_i2d>
 802e412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e416:	f7e2 f907 	bl	8010628 <__aeabi_dmul>
 802e41a:	4b77      	ldr	r3, [pc, #476]	@ (802e5f8 <_dtoa_r+0x5a0>)
 802e41c:	2200      	movs	r2, #0
 802e41e:	f7e1 ff4d 	bl	80102bc <__adddf3>
 802e422:	4605      	mov	r5, r0
 802e424:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802e428:	2c00      	cmp	r4, #0
 802e42a:	f040 808d 	bne.w	802e548 <_dtoa_r+0x4f0>
 802e42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e432:	4b72      	ldr	r3, [pc, #456]	@ (802e5fc <_dtoa_r+0x5a4>)
 802e434:	2200      	movs	r2, #0
 802e436:	f7e1 ff3f 	bl	80102b8 <__aeabi_dsub>
 802e43a:	4602      	mov	r2, r0
 802e43c:	460b      	mov	r3, r1
 802e43e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e442:	462a      	mov	r2, r5
 802e444:	4633      	mov	r3, r6
 802e446:	f7e2 fb7f 	bl	8010b48 <__aeabi_dcmpgt>
 802e44a:	2800      	cmp	r0, #0
 802e44c:	f040 828c 	bne.w	802e968 <_dtoa_r+0x910>
 802e450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e454:	462a      	mov	r2, r5
 802e456:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802e45a:	f7e2 fb57 	bl	8010b0c <__aeabi_dcmplt>
 802e45e:	2800      	cmp	r0, #0
 802e460:	f040 8129 	bne.w	802e6b6 <_dtoa_r+0x65e>
 802e464:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802e468:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e46c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802e46e:	2b00      	cmp	r3, #0
 802e470:	f2c0 815b 	blt.w	802e72a <_dtoa_r+0x6d2>
 802e474:	2f0e      	cmp	r7, #14
 802e476:	f300 8158 	bgt.w	802e72a <_dtoa_r+0x6d2>
 802e47a:	4b5b      	ldr	r3, [pc, #364]	@ (802e5e8 <_dtoa_r+0x590>)
 802e47c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e480:	ed93 7b00 	vldr	d7, [r3]
 802e484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e486:	2b00      	cmp	r3, #0
 802e488:	ed8d 7b00 	vstr	d7, [sp]
 802e48c:	da03      	bge.n	802e496 <_dtoa_r+0x43e>
 802e48e:	9b07      	ldr	r3, [sp, #28]
 802e490:	2b00      	cmp	r3, #0
 802e492:	f340 8102 	ble.w	802e69a <_dtoa_r+0x642>
 802e496:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e49a:	4656      	mov	r6, sl
 802e49c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4a0:	4620      	mov	r0, r4
 802e4a2:	4629      	mov	r1, r5
 802e4a4:	f7e2 f9ea 	bl	801087c <__aeabi_ddiv>
 802e4a8:	f7e2 fb6e 	bl	8010b88 <__aeabi_d2iz>
 802e4ac:	4680      	mov	r8, r0
 802e4ae:	f7e2 f851 	bl	8010554 <__aeabi_i2d>
 802e4b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4b6:	f7e2 f8b7 	bl	8010628 <__aeabi_dmul>
 802e4ba:	4602      	mov	r2, r0
 802e4bc:	460b      	mov	r3, r1
 802e4be:	4620      	mov	r0, r4
 802e4c0:	4629      	mov	r1, r5
 802e4c2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802e4c6:	f7e1 fef7 	bl	80102b8 <__aeabi_dsub>
 802e4ca:	f806 4b01 	strb.w	r4, [r6], #1
 802e4ce:	9d07      	ldr	r5, [sp, #28]
 802e4d0:	eba6 040a 	sub.w	r4, r6, sl
 802e4d4:	42a5      	cmp	r5, r4
 802e4d6:	4602      	mov	r2, r0
 802e4d8:	460b      	mov	r3, r1
 802e4da:	f040 8118 	bne.w	802e70e <_dtoa_r+0x6b6>
 802e4de:	f7e1 feed 	bl	80102bc <__adddf3>
 802e4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4e6:	4604      	mov	r4, r0
 802e4e8:	460d      	mov	r5, r1
 802e4ea:	f7e2 fb2d 	bl	8010b48 <__aeabi_dcmpgt>
 802e4ee:	2800      	cmp	r0, #0
 802e4f0:	f040 80fa 	bne.w	802e6e8 <_dtoa_r+0x690>
 802e4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4f8:	4620      	mov	r0, r4
 802e4fa:	4629      	mov	r1, r5
 802e4fc:	f7e2 fafc 	bl	8010af8 <__aeabi_dcmpeq>
 802e500:	b118      	cbz	r0, 802e50a <_dtoa_r+0x4b2>
 802e502:	f018 0f01 	tst.w	r8, #1
 802e506:	f040 80ef 	bne.w	802e6e8 <_dtoa_r+0x690>
 802e50a:	4649      	mov	r1, r9
 802e50c:	4658      	mov	r0, fp
 802e50e:	f004 fff8 	bl	8033502 <_Bfree>
 802e512:	2300      	movs	r3, #0
 802e514:	7033      	strb	r3, [r6, #0]
 802e516:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e518:	3701      	adds	r7, #1
 802e51a:	601f      	str	r7, [r3, #0]
 802e51c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e51e:	2b00      	cmp	r3, #0
 802e520:	f43f add1 	beq.w	802e0c6 <_dtoa_r+0x6e>
 802e524:	601e      	str	r6, [r3, #0]
 802e526:	e5ce      	b.n	802e0c6 <_dtoa_r+0x6e>
 802e528:	07e2      	lsls	r2, r4, #31
 802e52a:	d505      	bpl.n	802e538 <_dtoa_r+0x4e0>
 802e52c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e530:	f7e2 f87a 	bl	8010628 <__aeabi_dmul>
 802e534:	3601      	adds	r6, #1
 802e536:	2301      	movs	r3, #1
 802e538:	1064      	asrs	r4, r4, #1
 802e53a:	3508      	adds	r5, #8
 802e53c:	e73f      	b.n	802e3be <_dtoa_r+0x366>
 802e53e:	2602      	movs	r6, #2
 802e540:	e742      	b.n	802e3c8 <_dtoa_r+0x370>
 802e542:	9c07      	ldr	r4, [sp, #28]
 802e544:	9704      	str	r7, [sp, #16]
 802e546:	e761      	b.n	802e40c <_dtoa_r+0x3b4>
 802e548:	4b27      	ldr	r3, [pc, #156]	@ (802e5e8 <_dtoa_r+0x590>)
 802e54a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802e550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e554:	4454      	add	r4, sl
 802e556:	2900      	cmp	r1, #0
 802e558:	d054      	beq.n	802e604 <_dtoa_r+0x5ac>
 802e55a:	4929      	ldr	r1, [pc, #164]	@ (802e600 <_dtoa_r+0x5a8>)
 802e55c:	2000      	movs	r0, #0
 802e55e:	f7e2 f98d 	bl	801087c <__aeabi_ddiv>
 802e562:	4633      	mov	r3, r6
 802e564:	462a      	mov	r2, r5
 802e566:	f7e1 fea7 	bl	80102b8 <__aeabi_dsub>
 802e56a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e56e:	4656      	mov	r6, sl
 802e570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e574:	f7e2 fb08 	bl	8010b88 <__aeabi_d2iz>
 802e578:	4605      	mov	r5, r0
 802e57a:	f7e1 ffeb 	bl	8010554 <__aeabi_i2d>
 802e57e:	4602      	mov	r2, r0
 802e580:	460b      	mov	r3, r1
 802e582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e586:	f7e1 fe97 	bl	80102b8 <__aeabi_dsub>
 802e58a:	3530      	adds	r5, #48	@ 0x30
 802e58c:	4602      	mov	r2, r0
 802e58e:	460b      	mov	r3, r1
 802e590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e594:	f806 5b01 	strb.w	r5, [r6], #1
 802e598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e59c:	f7e2 fab6 	bl	8010b0c <__aeabi_dcmplt>
 802e5a0:	2800      	cmp	r0, #0
 802e5a2:	d172      	bne.n	802e68a <_dtoa_r+0x632>
 802e5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e5a8:	4911      	ldr	r1, [pc, #68]	@ (802e5f0 <_dtoa_r+0x598>)
 802e5aa:	2000      	movs	r0, #0
 802e5ac:	f7e1 fe84 	bl	80102b8 <__aeabi_dsub>
 802e5b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e5b4:	f7e2 faaa 	bl	8010b0c <__aeabi_dcmplt>
 802e5b8:	2800      	cmp	r0, #0
 802e5ba:	f040 8096 	bne.w	802e6ea <_dtoa_r+0x692>
 802e5be:	42a6      	cmp	r6, r4
 802e5c0:	f43f af50 	beq.w	802e464 <_dtoa_r+0x40c>
 802e5c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e5c8:	4b0a      	ldr	r3, [pc, #40]	@ (802e5f4 <_dtoa_r+0x59c>)
 802e5ca:	2200      	movs	r2, #0
 802e5cc:	f7e2 f82c 	bl	8010628 <__aeabi_dmul>
 802e5d0:	4b08      	ldr	r3, [pc, #32]	@ (802e5f4 <_dtoa_r+0x59c>)
 802e5d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e5d6:	2200      	movs	r2, #0
 802e5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e5dc:	f7e2 f824 	bl	8010628 <__aeabi_dmul>
 802e5e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e5e4:	e7c4      	b.n	802e570 <_dtoa_r+0x518>
 802e5e6:	bf00      	nop
 802e5e8:	0803c2c8 	.word	0x0803c2c8
 802e5ec:	0803c2a0 	.word	0x0803c2a0
 802e5f0:	3ff00000 	.word	0x3ff00000
 802e5f4:	40240000 	.word	0x40240000
 802e5f8:	401c0000 	.word	0x401c0000
 802e5fc:	40140000 	.word	0x40140000
 802e600:	3fe00000 	.word	0x3fe00000
 802e604:	4631      	mov	r1, r6
 802e606:	4628      	mov	r0, r5
 802e608:	f7e2 f80e 	bl	8010628 <__aeabi_dmul>
 802e60c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e610:	9415      	str	r4, [sp, #84]	@ 0x54
 802e612:	4656      	mov	r6, sl
 802e614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e618:	f7e2 fab6 	bl	8010b88 <__aeabi_d2iz>
 802e61c:	4605      	mov	r5, r0
 802e61e:	f7e1 ff99 	bl	8010554 <__aeabi_i2d>
 802e622:	4602      	mov	r2, r0
 802e624:	460b      	mov	r3, r1
 802e626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e62a:	f7e1 fe45 	bl	80102b8 <__aeabi_dsub>
 802e62e:	3530      	adds	r5, #48	@ 0x30
 802e630:	f806 5b01 	strb.w	r5, [r6], #1
 802e634:	4602      	mov	r2, r0
 802e636:	460b      	mov	r3, r1
 802e638:	42a6      	cmp	r6, r4
 802e63a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e63e:	f04f 0200 	mov.w	r2, #0
 802e642:	d124      	bne.n	802e68e <_dtoa_r+0x636>
 802e644:	4bac      	ldr	r3, [pc, #688]	@ (802e8f8 <_dtoa_r+0x8a0>)
 802e646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e64a:	f7e1 fe37 	bl	80102bc <__adddf3>
 802e64e:	4602      	mov	r2, r0
 802e650:	460b      	mov	r3, r1
 802e652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e656:	f7e2 fa77 	bl	8010b48 <__aeabi_dcmpgt>
 802e65a:	2800      	cmp	r0, #0
 802e65c:	d145      	bne.n	802e6ea <_dtoa_r+0x692>
 802e65e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e662:	49a5      	ldr	r1, [pc, #660]	@ (802e8f8 <_dtoa_r+0x8a0>)
 802e664:	2000      	movs	r0, #0
 802e666:	f7e1 fe27 	bl	80102b8 <__aeabi_dsub>
 802e66a:	4602      	mov	r2, r0
 802e66c:	460b      	mov	r3, r1
 802e66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e672:	f7e2 fa4b 	bl	8010b0c <__aeabi_dcmplt>
 802e676:	2800      	cmp	r0, #0
 802e678:	f43f aef4 	beq.w	802e464 <_dtoa_r+0x40c>
 802e67c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802e67e:	1e73      	subs	r3, r6, #1
 802e680:	9315      	str	r3, [sp, #84]	@ 0x54
 802e682:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802e686:	2b30      	cmp	r3, #48	@ 0x30
 802e688:	d0f8      	beq.n	802e67c <_dtoa_r+0x624>
 802e68a:	9f04      	ldr	r7, [sp, #16]
 802e68c:	e73d      	b.n	802e50a <_dtoa_r+0x4b2>
 802e68e:	4b9b      	ldr	r3, [pc, #620]	@ (802e8fc <_dtoa_r+0x8a4>)
 802e690:	f7e1 ffca 	bl	8010628 <__aeabi_dmul>
 802e694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e698:	e7bc      	b.n	802e614 <_dtoa_r+0x5bc>
 802e69a:	d10c      	bne.n	802e6b6 <_dtoa_r+0x65e>
 802e69c:	4b98      	ldr	r3, [pc, #608]	@ (802e900 <_dtoa_r+0x8a8>)
 802e69e:	2200      	movs	r2, #0
 802e6a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802e6a4:	f7e1 ffc0 	bl	8010628 <__aeabi_dmul>
 802e6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e6ac:	f7e2 fa42 	bl	8010b34 <__aeabi_dcmpge>
 802e6b0:	2800      	cmp	r0, #0
 802e6b2:	f000 8157 	beq.w	802e964 <_dtoa_r+0x90c>
 802e6b6:	2400      	movs	r4, #0
 802e6b8:	4625      	mov	r5, r4
 802e6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e6bc:	43db      	mvns	r3, r3
 802e6be:	9304      	str	r3, [sp, #16]
 802e6c0:	4656      	mov	r6, sl
 802e6c2:	2700      	movs	r7, #0
 802e6c4:	4621      	mov	r1, r4
 802e6c6:	4658      	mov	r0, fp
 802e6c8:	f004 ff1b 	bl	8033502 <_Bfree>
 802e6cc:	2d00      	cmp	r5, #0
 802e6ce:	d0dc      	beq.n	802e68a <_dtoa_r+0x632>
 802e6d0:	b12f      	cbz	r7, 802e6de <_dtoa_r+0x686>
 802e6d2:	42af      	cmp	r7, r5
 802e6d4:	d003      	beq.n	802e6de <_dtoa_r+0x686>
 802e6d6:	4639      	mov	r1, r7
 802e6d8:	4658      	mov	r0, fp
 802e6da:	f004 ff12 	bl	8033502 <_Bfree>
 802e6de:	4629      	mov	r1, r5
 802e6e0:	4658      	mov	r0, fp
 802e6e2:	f004 ff0e 	bl	8033502 <_Bfree>
 802e6e6:	e7d0      	b.n	802e68a <_dtoa_r+0x632>
 802e6e8:	9704      	str	r7, [sp, #16]
 802e6ea:	4633      	mov	r3, r6
 802e6ec:	461e      	mov	r6, r3
 802e6ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e6f2:	2a39      	cmp	r2, #57	@ 0x39
 802e6f4:	d107      	bne.n	802e706 <_dtoa_r+0x6ae>
 802e6f6:	459a      	cmp	sl, r3
 802e6f8:	d1f8      	bne.n	802e6ec <_dtoa_r+0x694>
 802e6fa:	9a04      	ldr	r2, [sp, #16]
 802e6fc:	3201      	adds	r2, #1
 802e6fe:	9204      	str	r2, [sp, #16]
 802e700:	2230      	movs	r2, #48	@ 0x30
 802e702:	f88a 2000 	strb.w	r2, [sl]
 802e706:	781a      	ldrb	r2, [r3, #0]
 802e708:	3201      	adds	r2, #1
 802e70a:	701a      	strb	r2, [r3, #0]
 802e70c:	e7bd      	b.n	802e68a <_dtoa_r+0x632>
 802e70e:	4b7b      	ldr	r3, [pc, #492]	@ (802e8fc <_dtoa_r+0x8a4>)
 802e710:	2200      	movs	r2, #0
 802e712:	f7e1 ff89 	bl	8010628 <__aeabi_dmul>
 802e716:	2200      	movs	r2, #0
 802e718:	2300      	movs	r3, #0
 802e71a:	4604      	mov	r4, r0
 802e71c:	460d      	mov	r5, r1
 802e71e:	f7e2 f9eb 	bl	8010af8 <__aeabi_dcmpeq>
 802e722:	2800      	cmp	r0, #0
 802e724:	f43f aeba 	beq.w	802e49c <_dtoa_r+0x444>
 802e728:	e6ef      	b.n	802e50a <_dtoa_r+0x4b2>
 802e72a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802e72c:	2a00      	cmp	r2, #0
 802e72e:	f000 80db 	beq.w	802e8e8 <_dtoa_r+0x890>
 802e732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e734:	2a01      	cmp	r2, #1
 802e736:	f300 80bf 	bgt.w	802e8b8 <_dtoa_r+0x860>
 802e73a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802e73c:	2a00      	cmp	r2, #0
 802e73e:	f000 80b7 	beq.w	802e8b0 <_dtoa_r+0x858>
 802e742:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802e746:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e748:	4646      	mov	r6, r8
 802e74a:	9a08      	ldr	r2, [sp, #32]
 802e74c:	2101      	movs	r1, #1
 802e74e:	441a      	add	r2, r3
 802e750:	4658      	mov	r0, fp
 802e752:	4498      	add	r8, r3
 802e754:	9208      	str	r2, [sp, #32]
 802e756:	f004 ffb9 	bl	80336cc <__i2b>
 802e75a:	4605      	mov	r5, r0
 802e75c:	b15e      	cbz	r6, 802e776 <_dtoa_r+0x71e>
 802e75e:	9b08      	ldr	r3, [sp, #32]
 802e760:	2b00      	cmp	r3, #0
 802e762:	dd08      	ble.n	802e776 <_dtoa_r+0x71e>
 802e764:	42b3      	cmp	r3, r6
 802e766:	9a08      	ldr	r2, [sp, #32]
 802e768:	bfa8      	it	ge
 802e76a:	4633      	movge	r3, r6
 802e76c:	eba8 0803 	sub.w	r8, r8, r3
 802e770:	1af6      	subs	r6, r6, r3
 802e772:	1ad3      	subs	r3, r2, r3
 802e774:	9308      	str	r3, [sp, #32]
 802e776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e778:	b1f3      	cbz	r3, 802e7b8 <_dtoa_r+0x760>
 802e77a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e77c:	2b00      	cmp	r3, #0
 802e77e:	f000 80b7 	beq.w	802e8f0 <_dtoa_r+0x898>
 802e782:	b18c      	cbz	r4, 802e7a8 <_dtoa_r+0x750>
 802e784:	4629      	mov	r1, r5
 802e786:	4622      	mov	r2, r4
 802e788:	4658      	mov	r0, fp
 802e78a:	f005 f85f 	bl	803384c <__pow5mult>
 802e78e:	464a      	mov	r2, r9
 802e790:	4601      	mov	r1, r0
 802e792:	4605      	mov	r5, r0
 802e794:	4658      	mov	r0, fp
 802e796:	f004 ffaf 	bl	80336f8 <__multiply>
 802e79a:	4649      	mov	r1, r9
 802e79c:	9004      	str	r0, [sp, #16]
 802e79e:	4658      	mov	r0, fp
 802e7a0:	f004 feaf 	bl	8033502 <_Bfree>
 802e7a4:	9b04      	ldr	r3, [sp, #16]
 802e7a6:	4699      	mov	r9, r3
 802e7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e7aa:	1b1a      	subs	r2, r3, r4
 802e7ac:	d004      	beq.n	802e7b8 <_dtoa_r+0x760>
 802e7ae:	4649      	mov	r1, r9
 802e7b0:	4658      	mov	r0, fp
 802e7b2:	f005 f84b 	bl	803384c <__pow5mult>
 802e7b6:	4681      	mov	r9, r0
 802e7b8:	2101      	movs	r1, #1
 802e7ba:	4658      	mov	r0, fp
 802e7bc:	f004 ff86 	bl	80336cc <__i2b>
 802e7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e7c2:	4604      	mov	r4, r0
 802e7c4:	2b00      	cmp	r3, #0
 802e7c6:	f000 81cc 	beq.w	802eb62 <_dtoa_r+0xb0a>
 802e7ca:	461a      	mov	r2, r3
 802e7cc:	4601      	mov	r1, r0
 802e7ce:	4658      	mov	r0, fp
 802e7d0:	f005 f83c 	bl	803384c <__pow5mult>
 802e7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e7d6:	2b01      	cmp	r3, #1
 802e7d8:	4604      	mov	r4, r0
 802e7da:	f300 8095 	bgt.w	802e908 <_dtoa_r+0x8b0>
 802e7de:	9b02      	ldr	r3, [sp, #8]
 802e7e0:	2b00      	cmp	r3, #0
 802e7e2:	f040 8087 	bne.w	802e8f4 <_dtoa_r+0x89c>
 802e7e6:	9b03      	ldr	r3, [sp, #12]
 802e7e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e7ec:	2b00      	cmp	r3, #0
 802e7ee:	f040 8089 	bne.w	802e904 <_dtoa_r+0x8ac>
 802e7f2:	9b03      	ldr	r3, [sp, #12]
 802e7f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e7f8:	0d1b      	lsrs	r3, r3, #20
 802e7fa:	051b      	lsls	r3, r3, #20
 802e7fc:	b12b      	cbz	r3, 802e80a <_dtoa_r+0x7b2>
 802e7fe:	9b08      	ldr	r3, [sp, #32]
 802e800:	3301      	adds	r3, #1
 802e802:	9308      	str	r3, [sp, #32]
 802e804:	f108 0801 	add.w	r8, r8, #1
 802e808:	2301      	movs	r3, #1
 802e80a:	930a      	str	r3, [sp, #40]	@ 0x28
 802e80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e80e:	2b00      	cmp	r3, #0
 802e810:	f000 81ad 	beq.w	802eb6e <_dtoa_r+0xb16>
 802e814:	6923      	ldr	r3, [r4, #16]
 802e816:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e81a:	6918      	ldr	r0, [r3, #16]
 802e81c:	f004 ff0a 	bl	8033634 <__hi0bits>
 802e820:	f1c0 0020 	rsb	r0, r0, #32
 802e824:	9b08      	ldr	r3, [sp, #32]
 802e826:	4418      	add	r0, r3
 802e828:	f010 001f 	ands.w	r0, r0, #31
 802e82c:	d077      	beq.n	802e91e <_dtoa_r+0x8c6>
 802e82e:	f1c0 0320 	rsb	r3, r0, #32
 802e832:	2b04      	cmp	r3, #4
 802e834:	dd6b      	ble.n	802e90e <_dtoa_r+0x8b6>
 802e836:	9b08      	ldr	r3, [sp, #32]
 802e838:	f1c0 001c 	rsb	r0, r0, #28
 802e83c:	4403      	add	r3, r0
 802e83e:	4480      	add	r8, r0
 802e840:	4406      	add	r6, r0
 802e842:	9308      	str	r3, [sp, #32]
 802e844:	f1b8 0f00 	cmp.w	r8, #0
 802e848:	dd05      	ble.n	802e856 <_dtoa_r+0x7fe>
 802e84a:	4649      	mov	r1, r9
 802e84c:	4642      	mov	r2, r8
 802e84e:	4658      	mov	r0, fp
 802e850:	f005 f83c 	bl	80338cc <__lshift>
 802e854:	4681      	mov	r9, r0
 802e856:	9b08      	ldr	r3, [sp, #32]
 802e858:	2b00      	cmp	r3, #0
 802e85a:	dd05      	ble.n	802e868 <_dtoa_r+0x810>
 802e85c:	4621      	mov	r1, r4
 802e85e:	461a      	mov	r2, r3
 802e860:	4658      	mov	r0, fp
 802e862:	f005 f833 	bl	80338cc <__lshift>
 802e866:	4604      	mov	r4, r0
 802e868:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e86a:	2b00      	cmp	r3, #0
 802e86c:	d059      	beq.n	802e922 <_dtoa_r+0x8ca>
 802e86e:	4621      	mov	r1, r4
 802e870:	4648      	mov	r0, r9
 802e872:	f005 f897 	bl	80339a4 <__mcmp>
 802e876:	2800      	cmp	r0, #0
 802e878:	da53      	bge.n	802e922 <_dtoa_r+0x8ca>
 802e87a:	1e7b      	subs	r3, r7, #1
 802e87c:	9304      	str	r3, [sp, #16]
 802e87e:	4649      	mov	r1, r9
 802e880:	2300      	movs	r3, #0
 802e882:	220a      	movs	r2, #10
 802e884:	4658      	mov	r0, fp
 802e886:	f004 fe45 	bl	8033514 <__multadd>
 802e88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e88c:	4681      	mov	r9, r0
 802e88e:	2b00      	cmp	r3, #0
 802e890:	f000 816f 	beq.w	802eb72 <_dtoa_r+0xb1a>
 802e894:	2300      	movs	r3, #0
 802e896:	4629      	mov	r1, r5
 802e898:	220a      	movs	r2, #10
 802e89a:	4658      	mov	r0, fp
 802e89c:	f004 fe3a 	bl	8033514 <__multadd>
 802e8a0:	9b00      	ldr	r3, [sp, #0]
 802e8a2:	2b00      	cmp	r3, #0
 802e8a4:	4605      	mov	r5, r0
 802e8a6:	dc67      	bgt.n	802e978 <_dtoa_r+0x920>
 802e8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e8aa:	2b02      	cmp	r3, #2
 802e8ac:	dc41      	bgt.n	802e932 <_dtoa_r+0x8da>
 802e8ae:	e063      	b.n	802e978 <_dtoa_r+0x920>
 802e8b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e8b2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802e8b6:	e746      	b.n	802e746 <_dtoa_r+0x6ee>
 802e8b8:	9b07      	ldr	r3, [sp, #28]
 802e8ba:	1e5c      	subs	r4, r3, #1
 802e8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e8be:	42a3      	cmp	r3, r4
 802e8c0:	bfbf      	itttt	lt
 802e8c2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802e8c4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802e8c6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802e8c8:	1ae3      	sublt	r3, r4, r3
 802e8ca:	bfb4      	ite	lt
 802e8cc:	18d2      	addlt	r2, r2, r3
 802e8ce:	1b1c      	subge	r4, r3, r4
 802e8d0:	9b07      	ldr	r3, [sp, #28]
 802e8d2:	bfbc      	itt	lt
 802e8d4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802e8d6:	2400      	movlt	r4, #0
 802e8d8:	2b00      	cmp	r3, #0
 802e8da:	bfb5      	itete	lt
 802e8dc:	eba8 0603 	sublt.w	r6, r8, r3
 802e8e0:	9b07      	ldrge	r3, [sp, #28]
 802e8e2:	2300      	movlt	r3, #0
 802e8e4:	4646      	movge	r6, r8
 802e8e6:	e730      	b.n	802e74a <_dtoa_r+0x6f2>
 802e8e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e8ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802e8ec:	4646      	mov	r6, r8
 802e8ee:	e735      	b.n	802e75c <_dtoa_r+0x704>
 802e8f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e8f2:	e75c      	b.n	802e7ae <_dtoa_r+0x756>
 802e8f4:	2300      	movs	r3, #0
 802e8f6:	e788      	b.n	802e80a <_dtoa_r+0x7b2>
 802e8f8:	3fe00000 	.word	0x3fe00000
 802e8fc:	40240000 	.word	0x40240000
 802e900:	40140000 	.word	0x40140000
 802e904:	9b02      	ldr	r3, [sp, #8]
 802e906:	e780      	b.n	802e80a <_dtoa_r+0x7b2>
 802e908:	2300      	movs	r3, #0
 802e90a:	930a      	str	r3, [sp, #40]	@ 0x28
 802e90c:	e782      	b.n	802e814 <_dtoa_r+0x7bc>
 802e90e:	d099      	beq.n	802e844 <_dtoa_r+0x7ec>
 802e910:	9a08      	ldr	r2, [sp, #32]
 802e912:	331c      	adds	r3, #28
 802e914:	441a      	add	r2, r3
 802e916:	4498      	add	r8, r3
 802e918:	441e      	add	r6, r3
 802e91a:	9208      	str	r2, [sp, #32]
 802e91c:	e792      	b.n	802e844 <_dtoa_r+0x7ec>
 802e91e:	4603      	mov	r3, r0
 802e920:	e7f6      	b.n	802e910 <_dtoa_r+0x8b8>
 802e922:	9b07      	ldr	r3, [sp, #28]
 802e924:	9704      	str	r7, [sp, #16]
 802e926:	2b00      	cmp	r3, #0
 802e928:	dc20      	bgt.n	802e96c <_dtoa_r+0x914>
 802e92a:	9300      	str	r3, [sp, #0]
 802e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e92e:	2b02      	cmp	r3, #2
 802e930:	dd1e      	ble.n	802e970 <_dtoa_r+0x918>
 802e932:	9b00      	ldr	r3, [sp, #0]
 802e934:	2b00      	cmp	r3, #0
 802e936:	f47f aec0 	bne.w	802e6ba <_dtoa_r+0x662>
 802e93a:	4621      	mov	r1, r4
 802e93c:	2205      	movs	r2, #5
 802e93e:	4658      	mov	r0, fp
 802e940:	f004 fde8 	bl	8033514 <__multadd>
 802e944:	4601      	mov	r1, r0
 802e946:	4604      	mov	r4, r0
 802e948:	4648      	mov	r0, r9
 802e94a:	f005 f82b 	bl	80339a4 <__mcmp>
 802e94e:	2800      	cmp	r0, #0
 802e950:	f77f aeb3 	ble.w	802e6ba <_dtoa_r+0x662>
 802e954:	4656      	mov	r6, sl
 802e956:	2331      	movs	r3, #49	@ 0x31
 802e958:	f806 3b01 	strb.w	r3, [r6], #1
 802e95c:	9b04      	ldr	r3, [sp, #16]
 802e95e:	3301      	adds	r3, #1
 802e960:	9304      	str	r3, [sp, #16]
 802e962:	e6ae      	b.n	802e6c2 <_dtoa_r+0x66a>
 802e964:	9c07      	ldr	r4, [sp, #28]
 802e966:	9704      	str	r7, [sp, #16]
 802e968:	4625      	mov	r5, r4
 802e96a:	e7f3      	b.n	802e954 <_dtoa_r+0x8fc>
 802e96c:	9b07      	ldr	r3, [sp, #28]
 802e96e:	9300      	str	r3, [sp, #0]
 802e970:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e972:	2b00      	cmp	r3, #0
 802e974:	f000 8101 	beq.w	802eb7a <_dtoa_r+0xb22>
 802e978:	2e00      	cmp	r6, #0
 802e97a:	dd05      	ble.n	802e988 <_dtoa_r+0x930>
 802e97c:	4629      	mov	r1, r5
 802e97e:	4632      	mov	r2, r6
 802e980:	4658      	mov	r0, fp
 802e982:	f004 ffa3 	bl	80338cc <__lshift>
 802e986:	4605      	mov	r5, r0
 802e988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e98a:	2b00      	cmp	r3, #0
 802e98c:	d059      	beq.n	802ea42 <_dtoa_r+0x9ea>
 802e98e:	6869      	ldr	r1, [r5, #4]
 802e990:	4658      	mov	r0, fp
 802e992:	f004 fd91 	bl	80334b8 <_Balloc>
 802e996:	4606      	mov	r6, r0
 802e998:	b920      	cbnz	r0, 802e9a4 <_dtoa_r+0x94c>
 802e99a:	4b83      	ldr	r3, [pc, #524]	@ (802eba8 <_dtoa_r+0xb50>)
 802e99c:	4602      	mov	r2, r0
 802e99e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802e9a2:	e480      	b.n	802e2a6 <_dtoa_r+0x24e>
 802e9a4:	692a      	ldr	r2, [r5, #16]
 802e9a6:	3202      	adds	r2, #2
 802e9a8:	0092      	lsls	r2, r2, #2
 802e9aa:	f105 010c 	add.w	r1, r5, #12
 802e9ae:	300c      	adds	r0, #12
 802e9b0:	f7ff fa52 	bl	802de58 <memcpy>
 802e9b4:	2201      	movs	r2, #1
 802e9b6:	4631      	mov	r1, r6
 802e9b8:	4658      	mov	r0, fp
 802e9ba:	f004 ff87 	bl	80338cc <__lshift>
 802e9be:	f10a 0301 	add.w	r3, sl, #1
 802e9c2:	9307      	str	r3, [sp, #28]
 802e9c4:	9b00      	ldr	r3, [sp, #0]
 802e9c6:	4453      	add	r3, sl
 802e9c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e9ca:	9b02      	ldr	r3, [sp, #8]
 802e9cc:	f003 0301 	and.w	r3, r3, #1
 802e9d0:	462f      	mov	r7, r5
 802e9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 802e9d4:	4605      	mov	r5, r0
 802e9d6:	9b07      	ldr	r3, [sp, #28]
 802e9d8:	4621      	mov	r1, r4
 802e9da:	3b01      	subs	r3, #1
 802e9dc:	4648      	mov	r0, r9
 802e9de:	9300      	str	r3, [sp, #0]
 802e9e0:	f7ff faaf 	bl	802df42 <quorem>
 802e9e4:	4639      	mov	r1, r7
 802e9e6:	9002      	str	r0, [sp, #8]
 802e9e8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e9ec:	4648      	mov	r0, r9
 802e9ee:	f004 ffd9 	bl	80339a4 <__mcmp>
 802e9f2:	462a      	mov	r2, r5
 802e9f4:	9008      	str	r0, [sp, #32]
 802e9f6:	4621      	mov	r1, r4
 802e9f8:	4658      	mov	r0, fp
 802e9fa:	f004 ffef 	bl	80339dc <__mdiff>
 802e9fe:	68c2      	ldr	r2, [r0, #12]
 802ea00:	4606      	mov	r6, r0
 802ea02:	bb02      	cbnz	r2, 802ea46 <_dtoa_r+0x9ee>
 802ea04:	4601      	mov	r1, r0
 802ea06:	4648      	mov	r0, r9
 802ea08:	f004 ffcc 	bl	80339a4 <__mcmp>
 802ea0c:	4602      	mov	r2, r0
 802ea0e:	4631      	mov	r1, r6
 802ea10:	4658      	mov	r0, fp
 802ea12:	920e      	str	r2, [sp, #56]	@ 0x38
 802ea14:	f004 fd75 	bl	8033502 <_Bfree>
 802ea18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ea1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ea1c:	9e07      	ldr	r6, [sp, #28]
 802ea1e:	ea43 0102 	orr.w	r1, r3, r2
 802ea22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ea24:	4319      	orrs	r1, r3
 802ea26:	d110      	bne.n	802ea4a <_dtoa_r+0x9f2>
 802ea28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea2c:	d029      	beq.n	802ea82 <_dtoa_r+0xa2a>
 802ea2e:	9b08      	ldr	r3, [sp, #32]
 802ea30:	2b00      	cmp	r3, #0
 802ea32:	dd02      	ble.n	802ea3a <_dtoa_r+0x9e2>
 802ea34:	9b02      	ldr	r3, [sp, #8]
 802ea36:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802ea3a:	9b00      	ldr	r3, [sp, #0]
 802ea3c:	f883 8000 	strb.w	r8, [r3]
 802ea40:	e640      	b.n	802e6c4 <_dtoa_r+0x66c>
 802ea42:	4628      	mov	r0, r5
 802ea44:	e7bb      	b.n	802e9be <_dtoa_r+0x966>
 802ea46:	2201      	movs	r2, #1
 802ea48:	e7e1      	b.n	802ea0e <_dtoa_r+0x9b6>
 802ea4a:	9b08      	ldr	r3, [sp, #32]
 802ea4c:	2b00      	cmp	r3, #0
 802ea4e:	db04      	blt.n	802ea5a <_dtoa_r+0xa02>
 802ea50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ea52:	430b      	orrs	r3, r1
 802ea54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ea56:	430b      	orrs	r3, r1
 802ea58:	d120      	bne.n	802ea9c <_dtoa_r+0xa44>
 802ea5a:	2a00      	cmp	r2, #0
 802ea5c:	dded      	ble.n	802ea3a <_dtoa_r+0x9e2>
 802ea5e:	4649      	mov	r1, r9
 802ea60:	2201      	movs	r2, #1
 802ea62:	4658      	mov	r0, fp
 802ea64:	f004 ff32 	bl	80338cc <__lshift>
 802ea68:	4621      	mov	r1, r4
 802ea6a:	4681      	mov	r9, r0
 802ea6c:	f004 ff9a 	bl	80339a4 <__mcmp>
 802ea70:	2800      	cmp	r0, #0
 802ea72:	dc03      	bgt.n	802ea7c <_dtoa_r+0xa24>
 802ea74:	d1e1      	bne.n	802ea3a <_dtoa_r+0x9e2>
 802ea76:	f018 0f01 	tst.w	r8, #1
 802ea7a:	d0de      	beq.n	802ea3a <_dtoa_r+0x9e2>
 802ea7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea80:	d1d8      	bne.n	802ea34 <_dtoa_r+0x9dc>
 802ea82:	9a00      	ldr	r2, [sp, #0]
 802ea84:	2339      	movs	r3, #57	@ 0x39
 802ea86:	7013      	strb	r3, [r2, #0]
 802ea88:	4633      	mov	r3, r6
 802ea8a:	461e      	mov	r6, r3
 802ea8c:	3b01      	subs	r3, #1
 802ea8e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802ea92:	2a39      	cmp	r2, #57	@ 0x39
 802ea94:	d052      	beq.n	802eb3c <_dtoa_r+0xae4>
 802ea96:	3201      	adds	r2, #1
 802ea98:	701a      	strb	r2, [r3, #0]
 802ea9a:	e613      	b.n	802e6c4 <_dtoa_r+0x66c>
 802ea9c:	2a00      	cmp	r2, #0
 802ea9e:	dd07      	ble.n	802eab0 <_dtoa_r+0xa58>
 802eaa0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802eaa4:	d0ed      	beq.n	802ea82 <_dtoa_r+0xa2a>
 802eaa6:	9a00      	ldr	r2, [sp, #0]
 802eaa8:	f108 0301 	add.w	r3, r8, #1
 802eaac:	7013      	strb	r3, [r2, #0]
 802eaae:	e609      	b.n	802e6c4 <_dtoa_r+0x66c>
 802eab0:	9b07      	ldr	r3, [sp, #28]
 802eab2:	9a07      	ldr	r2, [sp, #28]
 802eab4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802eab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802eaba:	4293      	cmp	r3, r2
 802eabc:	d028      	beq.n	802eb10 <_dtoa_r+0xab8>
 802eabe:	4649      	mov	r1, r9
 802eac0:	2300      	movs	r3, #0
 802eac2:	220a      	movs	r2, #10
 802eac4:	4658      	mov	r0, fp
 802eac6:	f004 fd25 	bl	8033514 <__multadd>
 802eaca:	42af      	cmp	r7, r5
 802eacc:	4681      	mov	r9, r0
 802eace:	f04f 0300 	mov.w	r3, #0
 802ead2:	f04f 020a 	mov.w	r2, #10
 802ead6:	4639      	mov	r1, r7
 802ead8:	4658      	mov	r0, fp
 802eada:	d107      	bne.n	802eaec <_dtoa_r+0xa94>
 802eadc:	f004 fd1a 	bl	8033514 <__multadd>
 802eae0:	4607      	mov	r7, r0
 802eae2:	4605      	mov	r5, r0
 802eae4:	9b07      	ldr	r3, [sp, #28]
 802eae6:	3301      	adds	r3, #1
 802eae8:	9307      	str	r3, [sp, #28]
 802eaea:	e774      	b.n	802e9d6 <_dtoa_r+0x97e>
 802eaec:	f004 fd12 	bl	8033514 <__multadd>
 802eaf0:	4629      	mov	r1, r5
 802eaf2:	4607      	mov	r7, r0
 802eaf4:	2300      	movs	r3, #0
 802eaf6:	220a      	movs	r2, #10
 802eaf8:	4658      	mov	r0, fp
 802eafa:	f004 fd0b 	bl	8033514 <__multadd>
 802eafe:	4605      	mov	r5, r0
 802eb00:	e7f0      	b.n	802eae4 <_dtoa_r+0xa8c>
 802eb02:	9b00      	ldr	r3, [sp, #0]
 802eb04:	2b00      	cmp	r3, #0
 802eb06:	bfcc      	ite	gt
 802eb08:	461e      	movgt	r6, r3
 802eb0a:	2601      	movle	r6, #1
 802eb0c:	4456      	add	r6, sl
 802eb0e:	2700      	movs	r7, #0
 802eb10:	4649      	mov	r1, r9
 802eb12:	2201      	movs	r2, #1
 802eb14:	4658      	mov	r0, fp
 802eb16:	f004 fed9 	bl	80338cc <__lshift>
 802eb1a:	4621      	mov	r1, r4
 802eb1c:	4681      	mov	r9, r0
 802eb1e:	f004 ff41 	bl	80339a4 <__mcmp>
 802eb22:	2800      	cmp	r0, #0
 802eb24:	dcb0      	bgt.n	802ea88 <_dtoa_r+0xa30>
 802eb26:	d102      	bne.n	802eb2e <_dtoa_r+0xad6>
 802eb28:	f018 0f01 	tst.w	r8, #1
 802eb2c:	d1ac      	bne.n	802ea88 <_dtoa_r+0xa30>
 802eb2e:	4633      	mov	r3, r6
 802eb30:	461e      	mov	r6, r3
 802eb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802eb36:	2a30      	cmp	r2, #48	@ 0x30
 802eb38:	d0fa      	beq.n	802eb30 <_dtoa_r+0xad8>
 802eb3a:	e5c3      	b.n	802e6c4 <_dtoa_r+0x66c>
 802eb3c:	459a      	cmp	sl, r3
 802eb3e:	d1a4      	bne.n	802ea8a <_dtoa_r+0xa32>
 802eb40:	9b04      	ldr	r3, [sp, #16]
 802eb42:	3301      	adds	r3, #1
 802eb44:	9304      	str	r3, [sp, #16]
 802eb46:	2331      	movs	r3, #49	@ 0x31
 802eb48:	f88a 3000 	strb.w	r3, [sl]
 802eb4c:	e5ba      	b.n	802e6c4 <_dtoa_r+0x66c>
 802eb4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802eb50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802ebac <_dtoa_r+0xb54>
 802eb54:	2b00      	cmp	r3, #0
 802eb56:	f43f aab6 	beq.w	802e0c6 <_dtoa_r+0x6e>
 802eb5a:	f10a 0308 	add.w	r3, sl, #8
 802eb5e:	f7ff bab0 	b.w	802e0c2 <_dtoa_r+0x6a>
 802eb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eb64:	2b01      	cmp	r3, #1
 802eb66:	f77f ae3a 	ble.w	802e7de <_dtoa_r+0x786>
 802eb6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eb6c:	930a      	str	r3, [sp, #40]	@ 0x28
 802eb6e:	2001      	movs	r0, #1
 802eb70:	e658      	b.n	802e824 <_dtoa_r+0x7cc>
 802eb72:	9b00      	ldr	r3, [sp, #0]
 802eb74:	2b00      	cmp	r3, #0
 802eb76:	f77f aed9 	ble.w	802e92c <_dtoa_r+0x8d4>
 802eb7a:	4656      	mov	r6, sl
 802eb7c:	4621      	mov	r1, r4
 802eb7e:	4648      	mov	r0, r9
 802eb80:	f7ff f9df 	bl	802df42 <quorem>
 802eb84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802eb88:	f806 8b01 	strb.w	r8, [r6], #1
 802eb8c:	9b00      	ldr	r3, [sp, #0]
 802eb8e:	eba6 020a 	sub.w	r2, r6, sl
 802eb92:	4293      	cmp	r3, r2
 802eb94:	ddb5      	ble.n	802eb02 <_dtoa_r+0xaaa>
 802eb96:	4649      	mov	r1, r9
 802eb98:	2300      	movs	r3, #0
 802eb9a:	220a      	movs	r2, #10
 802eb9c:	4658      	mov	r0, fp
 802eb9e:	f004 fcb9 	bl	8033514 <__multadd>
 802eba2:	4681      	mov	r9, r0
 802eba4:	e7ea      	b.n	802eb7c <_dtoa_r+0xb24>
 802eba6:	bf00      	nop
 802eba8:	0803c146 	.word	0x0803c146
 802ebac:	0803c139 	.word	0x0803c139

0802ebb0 <_malloc_trim_r>:
 802ebb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ebb4:	4606      	mov	r6, r0
 802ebb6:	2008      	movs	r0, #8
 802ebb8:	4689      	mov	r9, r1
 802ebba:	f006 fb53 	bl	8035264 <sysconf>
 802ebbe:	4f24      	ldr	r7, [pc, #144]	@ (802ec50 <_malloc_trim_r+0xa0>)
 802ebc0:	4680      	mov	r8, r0
 802ebc2:	4630      	mov	r0, r6
 802ebc4:	f004 fc6c 	bl	80334a0 <__malloc_lock>
 802ebc8:	68bb      	ldr	r3, [r7, #8]
 802ebca:	685d      	ldr	r5, [r3, #4]
 802ebcc:	f025 0503 	bic.w	r5, r5, #3
 802ebd0:	f1a5 0411 	sub.w	r4, r5, #17
 802ebd4:	eba4 0409 	sub.w	r4, r4, r9
 802ebd8:	4444      	add	r4, r8
 802ebda:	fbb4 f4f8 	udiv	r4, r4, r8
 802ebde:	3c01      	subs	r4, #1
 802ebe0:	fb08 f404 	mul.w	r4, r8, r4
 802ebe4:	45a0      	cmp	r8, r4
 802ebe6:	dd05      	ble.n	802ebf4 <_malloc_trim_r+0x44>
 802ebe8:	4630      	mov	r0, r6
 802ebea:	f004 fc5f 	bl	80334ac <__malloc_unlock>
 802ebee:	2000      	movs	r0, #0
 802ebf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ebf4:	2100      	movs	r1, #0
 802ebf6:	4630      	mov	r0, r6
 802ebf8:	f006 fb24 	bl	8035244 <_sbrk_r>
 802ebfc:	68bb      	ldr	r3, [r7, #8]
 802ebfe:	442b      	add	r3, r5
 802ec00:	4298      	cmp	r0, r3
 802ec02:	d1f1      	bne.n	802ebe8 <_malloc_trim_r+0x38>
 802ec04:	4261      	negs	r1, r4
 802ec06:	4630      	mov	r0, r6
 802ec08:	f006 fb1c 	bl	8035244 <_sbrk_r>
 802ec0c:	3001      	adds	r0, #1
 802ec0e:	d110      	bne.n	802ec32 <_malloc_trim_r+0x82>
 802ec10:	2100      	movs	r1, #0
 802ec12:	4630      	mov	r0, r6
 802ec14:	f006 fb16 	bl	8035244 <_sbrk_r>
 802ec18:	68ba      	ldr	r2, [r7, #8]
 802ec1a:	1a83      	subs	r3, r0, r2
 802ec1c:	2b0f      	cmp	r3, #15
 802ec1e:	dde3      	ble.n	802ebe8 <_malloc_trim_r+0x38>
 802ec20:	490c      	ldr	r1, [pc, #48]	@ (802ec54 <_malloc_trim_r+0xa4>)
 802ec22:	6809      	ldr	r1, [r1, #0]
 802ec24:	1a40      	subs	r0, r0, r1
 802ec26:	490c      	ldr	r1, [pc, #48]	@ (802ec58 <_malloc_trim_r+0xa8>)
 802ec28:	f043 0301 	orr.w	r3, r3, #1
 802ec2c:	6008      	str	r0, [r1, #0]
 802ec2e:	6053      	str	r3, [r2, #4]
 802ec30:	e7da      	b.n	802ebe8 <_malloc_trim_r+0x38>
 802ec32:	68bb      	ldr	r3, [r7, #8]
 802ec34:	4a08      	ldr	r2, [pc, #32]	@ (802ec58 <_malloc_trim_r+0xa8>)
 802ec36:	1b2d      	subs	r5, r5, r4
 802ec38:	f045 0501 	orr.w	r5, r5, #1
 802ec3c:	605d      	str	r5, [r3, #4]
 802ec3e:	6813      	ldr	r3, [r2, #0]
 802ec40:	4630      	mov	r0, r6
 802ec42:	1b1b      	subs	r3, r3, r4
 802ec44:	6013      	str	r3, [r2, #0]
 802ec46:	f004 fc31 	bl	80334ac <__malloc_unlock>
 802ec4a:	2001      	movs	r0, #1
 802ec4c:	e7d0      	b.n	802ebf0 <_malloc_trim_r+0x40>
 802ec4e:	bf00      	nop
 802ec50:	2000040c 	.word	0x2000040c
 802ec54:	20000404 	.word	0x20000404
 802ec58:	2001a054 	.word	0x2001a054

0802ec5c <_free_r>:
 802ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec5e:	4604      	mov	r4, r0
 802ec60:	460f      	mov	r7, r1
 802ec62:	2900      	cmp	r1, #0
 802ec64:	f000 80b1 	beq.w	802edca <_free_r+0x16e>
 802ec68:	f004 fc1a 	bl	80334a0 <__malloc_lock>
 802ec6c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802ec70:	4d56      	ldr	r5, [pc, #344]	@ (802edcc <_free_r+0x170>)
 802ec72:	f022 0001 	bic.w	r0, r2, #1
 802ec76:	f1a7 0308 	sub.w	r3, r7, #8
 802ec7a:	eb03 0c00 	add.w	ip, r3, r0
 802ec7e:	68a9      	ldr	r1, [r5, #8]
 802ec80:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802ec84:	4561      	cmp	r1, ip
 802ec86:	f026 0603 	bic.w	r6, r6, #3
 802ec8a:	f002 0201 	and.w	r2, r2, #1
 802ec8e:	d11b      	bne.n	802ecc8 <_free_r+0x6c>
 802ec90:	4406      	add	r6, r0
 802ec92:	b93a      	cbnz	r2, 802eca4 <_free_r+0x48>
 802ec94:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802ec98:	1a9b      	subs	r3, r3, r2
 802ec9a:	4416      	add	r6, r2
 802ec9c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802eca0:	60ca      	str	r2, [r1, #12]
 802eca2:	6091      	str	r1, [r2, #8]
 802eca4:	f046 0201 	orr.w	r2, r6, #1
 802eca8:	605a      	str	r2, [r3, #4]
 802ecaa:	60ab      	str	r3, [r5, #8]
 802ecac:	4b48      	ldr	r3, [pc, #288]	@ (802edd0 <_free_r+0x174>)
 802ecae:	681b      	ldr	r3, [r3, #0]
 802ecb0:	42b3      	cmp	r3, r6
 802ecb2:	d804      	bhi.n	802ecbe <_free_r+0x62>
 802ecb4:	4b47      	ldr	r3, [pc, #284]	@ (802edd4 <_free_r+0x178>)
 802ecb6:	4620      	mov	r0, r4
 802ecb8:	6819      	ldr	r1, [r3, #0]
 802ecba:	f7ff ff79 	bl	802ebb0 <_malloc_trim_r>
 802ecbe:	4620      	mov	r0, r4
 802ecc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ecc4:	f004 bbf2 	b.w	80334ac <__malloc_unlock>
 802ecc8:	f8cc 6004 	str.w	r6, [ip, #4]
 802eccc:	2a00      	cmp	r2, #0
 802ecce:	d138      	bne.n	802ed42 <_free_r+0xe6>
 802ecd0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802ecd4:	1a5b      	subs	r3, r3, r1
 802ecd6:	4408      	add	r0, r1
 802ecd8:	6899      	ldr	r1, [r3, #8]
 802ecda:	f105 0708 	add.w	r7, r5, #8
 802ecde:	42b9      	cmp	r1, r7
 802ece0:	d031      	beq.n	802ed46 <_free_r+0xea>
 802ece2:	68df      	ldr	r7, [r3, #12]
 802ece4:	60cf      	str	r7, [r1, #12]
 802ece6:	60b9      	str	r1, [r7, #8]
 802ece8:	eb0c 0106 	add.w	r1, ip, r6
 802ecec:	6849      	ldr	r1, [r1, #4]
 802ecee:	07c9      	lsls	r1, r1, #31
 802ecf0:	d40b      	bmi.n	802ed0a <_free_r+0xae>
 802ecf2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802ecf6:	4430      	add	r0, r6
 802ecf8:	bb3a      	cbnz	r2, 802ed4a <_free_r+0xee>
 802ecfa:	4e37      	ldr	r6, [pc, #220]	@ (802edd8 <_free_r+0x17c>)
 802ecfc:	42b1      	cmp	r1, r6
 802ecfe:	d124      	bne.n	802ed4a <_free_r+0xee>
 802ed00:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802ed04:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802ed08:	2201      	movs	r2, #1
 802ed0a:	f040 0101 	orr.w	r1, r0, #1
 802ed0e:	6059      	str	r1, [r3, #4]
 802ed10:	5018      	str	r0, [r3, r0]
 802ed12:	2a00      	cmp	r2, #0
 802ed14:	d1d3      	bne.n	802ecbe <_free_r+0x62>
 802ed16:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802ed1a:	d21b      	bcs.n	802ed54 <_free_r+0xf8>
 802ed1c:	08c2      	lsrs	r2, r0, #3
 802ed1e:	2101      	movs	r1, #1
 802ed20:	0940      	lsrs	r0, r0, #5
 802ed22:	4081      	lsls	r1, r0
 802ed24:	6868      	ldr	r0, [r5, #4]
 802ed26:	3201      	adds	r2, #1
 802ed28:	4301      	orrs	r1, r0
 802ed2a:	6069      	str	r1, [r5, #4]
 802ed2c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802ed30:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802ed34:	3908      	subs	r1, #8
 802ed36:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802ed3a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802ed3e:	60c3      	str	r3, [r0, #12]
 802ed40:	e7bd      	b.n	802ecbe <_free_r+0x62>
 802ed42:	2200      	movs	r2, #0
 802ed44:	e7d0      	b.n	802ece8 <_free_r+0x8c>
 802ed46:	2201      	movs	r2, #1
 802ed48:	e7ce      	b.n	802ece8 <_free_r+0x8c>
 802ed4a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802ed4e:	60ce      	str	r6, [r1, #12]
 802ed50:	60b1      	str	r1, [r6, #8]
 802ed52:	e7da      	b.n	802ed0a <_free_r+0xae>
 802ed54:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802ed58:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802ed5c:	d214      	bcs.n	802ed88 <_free_r+0x12c>
 802ed5e:	0982      	lsrs	r2, r0, #6
 802ed60:	3238      	adds	r2, #56	@ 0x38
 802ed62:	1c51      	adds	r1, r2, #1
 802ed64:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802ed68:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802ed6c:	428e      	cmp	r6, r1
 802ed6e:	d125      	bne.n	802edbc <_free_r+0x160>
 802ed70:	2001      	movs	r0, #1
 802ed72:	1092      	asrs	r2, r2, #2
 802ed74:	fa00 f202 	lsl.w	r2, r0, r2
 802ed78:	6868      	ldr	r0, [r5, #4]
 802ed7a:	4302      	orrs	r2, r0
 802ed7c:	606a      	str	r2, [r5, #4]
 802ed7e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802ed82:	60b3      	str	r3, [r6, #8]
 802ed84:	60cb      	str	r3, [r1, #12]
 802ed86:	e79a      	b.n	802ecbe <_free_r+0x62>
 802ed88:	2a14      	cmp	r2, #20
 802ed8a:	d801      	bhi.n	802ed90 <_free_r+0x134>
 802ed8c:	325b      	adds	r2, #91	@ 0x5b
 802ed8e:	e7e8      	b.n	802ed62 <_free_r+0x106>
 802ed90:	2a54      	cmp	r2, #84	@ 0x54
 802ed92:	d802      	bhi.n	802ed9a <_free_r+0x13e>
 802ed94:	0b02      	lsrs	r2, r0, #12
 802ed96:	326e      	adds	r2, #110	@ 0x6e
 802ed98:	e7e3      	b.n	802ed62 <_free_r+0x106>
 802ed9a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802ed9e:	d802      	bhi.n	802eda6 <_free_r+0x14a>
 802eda0:	0bc2      	lsrs	r2, r0, #15
 802eda2:	3277      	adds	r2, #119	@ 0x77
 802eda4:	e7dd      	b.n	802ed62 <_free_r+0x106>
 802eda6:	f240 5154 	movw	r1, #1364	@ 0x554
 802edaa:	428a      	cmp	r2, r1
 802edac:	bf9a      	itte	ls
 802edae:	0c82      	lsrls	r2, r0, #18
 802edb0:	327c      	addls	r2, #124	@ 0x7c
 802edb2:	227e      	movhi	r2, #126	@ 0x7e
 802edb4:	e7d5      	b.n	802ed62 <_free_r+0x106>
 802edb6:	6889      	ldr	r1, [r1, #8]
 802edb8:	428e      	cmp	r6, r1
 802edba:	d004      	beq.n	802edc6 <_free_r+0x16a>
 802edbc:	684a      	ldr	r2, [r1, #4]
 802edbe:	f022 0203 	bic.w	r2, r2, #3
 802edc2:	4282      	cmp	r2, r0
 802edc4:	d8f7      	bhi.n	802edb6 <_free_r+0x15a>
 802edc6:	68ce      	ldr	r6, [r1, #12]
 802edc8:	e7d9      	b.n	802ed7e <_free_r+0x122>
 802edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802edcc:	2000040c 	.word	0x2000040c
 802edd0:	20000408 	.word	0x20000408
 802edd4:	2001a084 	.word	0x2001a084
 802edd8:	20000414 	.word	0x20000414

0802eddc <_findenv_r>:
 802eddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ede0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802ee50 <_findenv_r+0x74>
 802ede4:	4606      	mov	r6, r0
 802ede6:	4689      	mov	r9, r1
 802ede8:	4617      	mov	r7, r2
 802edea:	f006 fc31 	bl	8035650 <__env_lock>
 802edee:	f8da 4000 	ldr.w	r4, [sl]
 802edf2:	b134      	cbz	r4, 802ee02 <_findenv_r+0x26>
 802edf4:	464b      	mov	r3, r9
 802edf6:	4698      	mov	r8, r3
 802edf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802edfc:	b13a      	cbz	r2, 802ee0e <_findenv_r+0x32>
 802edfe:	2a3d      	cmp	r2, #61	@ 0x3d
 802ee00:	d1f9      	bne.n	802edf6 <_findenv_r+0x1a>
 802ee02:	4630      	mov	r0, r6
 802ee04:	f006 fc2a 	bl	803565c <__env_unlock>
 802ee08:	2000      	movs	r0, #0
 802ee0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee0e:	eba8 0809 	sub.w	r8, r8, r9
 802ee12:	46a3      	mov	fp, r4
 802ee14:	f854 0b04 	ldr.w	r0, [r4], #4
 802ee18:	2800      	cmp	r0, #0
 802ee1a:	d0f2      	beq.n	802ee02 <_findenv_r+0x26>
 802ee1c:	4642      	mov	r2, r8
 802ee1e:	4649      	mov	r1, r9
 802ee20:	f7fd fe13 	bl	802ca4a <strncmp>
 802ee24:	2800      	cmp	r0, #0
 802ee26:	d1f4      	bne.n	802ee12 <_findenv_r+0x36>
 802ee28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802ee2c:	eb03 0508 	add.w	r5, r3, r8
 802ee30:	f813 3008 	ldrb.w	r3, [r3, r8]
 802ee34:	2b3d      	cmp	r3, #61	@ 0x3d
 802ee36:	d1ec      	bne.n	802ee12 <_findenv_r+0x36>
 802ee38:	f8da 3000 	ldr.w	r3, [sl]
 802ee3c:	ebab 0303 	sub.w	r3, fp, r3
 802ee40:	109b      	asrs	r3, r3, #2
 802ee42:	4630      	mov	r0, r6
 802ee44:	603b      	str	r3, [r7, #0]
 802ee46:	f006 fc09 	bl	803565c <__env_unlock>
 802ee4a:	1c68      	adds	r0, r5, #1
 802ee4c:	e7dd      	b.n	802ee0a <_findenv_r+0x2e>
 802ee4e:	bf00      	nop
 802ee50:	20000014 	.word	0x20000014

0802ee54 <_getenv_r>:
 802ee54:	b507      	push	{r0, r1, r2, lr}
 802ee56:	aa01      	add	r2, sp, #4
 802ee58:	f7ff ffc0 	bl	802eddc <_findenv_r>
 802ee5c:	b003      	add	sp, #12
 802ee5e:	f85d fb04 	ldr.w	pc, [sp], #4

0802ee62 <labs>:
 802ee62:	2800      	cmp	r0, #0
 802ee64:	bfb8      	it	lt
 802ee66:	4240      	neglt	r0, r0
 802ee68:	4770      	bx	lr
	...

0802ee6c <malloc>:
 802ee6c:	4b02      	ldr	r3, [pc, #8]	@ (802ee78 <malloc+0xc>)
 802ee6e:	4601      	mov	r1, r0
 802ee70:	6818      	ldr	r0, [r3, #0]
 802ee72:	f000 b80b 	b.w	802ee8c <_malloc_r>
 802ee76:	bf00      	nop
 802ee78:	200002d8 	.word	0x200002d8

0802ee7c <free>:
 802ee7c:	4b02      	ldr	r3, [pc, #8]	@ (802ee88 <free+0xc>)
 802ee7e:	4601      	mov	r1, r0
 802ee80:	6818      	ldr	r0, [r3, #0]
 802ee82:	f7ff beeb 	b.w	802ec5c <_free_r>
 802ee86:	bf00      	nop
 802ee88:	200002d8 	.word	0x200002d8

0802ee8c <_malloc_r>:
 802ee8c:	f101 030b 	add.w	r3, r1, #11
 802ee90:	2b16      	cmp	r3, #22
 802ee92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee96:	4605      	mov	r5, r0
 802ee98:	d906      	bls.n	802eea8 <_malloc_r+0x1c>
 802ee9a:	f033 0707 	bics.w	r7, r3, #7
 802ee9e:	d504      	bpl.n	802eeaa <_malloc_r+0x1e>
 802eea0:	230c      	movs	r3, #12
 802eea2:	602b      	str	r3, [r5, #0]
 802eea4:	2400      	movs	r4, #0
 802eea6:	e1a3      	b.n	802f1f0 <_malloc_r+0x364>
 802eea8:	2710      	movs	r7, #16
 802eeaa:	42b9      	cmp	r1, r7
 802eeac:	d8f8      	bhi.n	802eea0 <_malloc_r+0x14>
 802eeae:	4628      	mov	r0, r5
 802eeb0:	f004 faf6 	bl	80334a0 <__malloc_lock>
 802eeb4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802eeb8:	4eaf      	ldr	r6, [pc, #700]	@ (802f178 <_malloc_r+0x2ec>)
 802eeba:	d237      	bcs.n	802ef2c <_malloc_r+0xa0>
 802eebc:	f107 0208 	add.w	r2, r7, #8
 802eec0:	4432      	add	r2, r6
 802eec2:	f1a2 0108 	sub.w	r1, r2, #8
 802eec6:	6854      	ldr	r4, [r2, #4]
 802eec8:	428c      	cmp	r4, r1
 802eeca:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802eece:	d102      	bne.n	802eed6 <_malloc_r+0x4a>
 802eed0:	68d4      	ldr	r4, [r2, #12]
 802eed2:	42a2      	cmp	r2, r4
 802eed4:	d010      	beq.n	802eef8 <_malloc_r+0x6c>
 802eed6:	6863      	ldr	r3, [r4, #4]
 802eed8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802eedc:	f023 0303 	bic.w	r3, r3, #3
 802eee0:	60ca      	str	r2, [r1, #12]
 802eee2:	4423      	add	r3, r4
 802eee4:	6091      	str	r1, [r2, #8]
 802eee6:	685a      	ldr	r2, [r3, #4]
 802eee8:	f042 0201 	orr.w	r2, r2, #1
 802eeec:	605a      	str	r2, [r3, #4]
 802eeee:	4628      	mov	r0, r5
 802eef0:	f004 fadc 	bl	80334ac <__malloc_unlock>
 802eef4:	3408      	adds	r4, #8
 802eef6:	e17b      	b.n	802f1f0 <_malloc_r+0x364>
 802eef8:	3302      	adds	r3, #2
 802eefa:	6934      	ldr	r4, [r6, #16]
 802eefc:	499f      	ldr	r1, [pc, #636]	@ (802f17c <_malloc_r+0x2f0>)
 802eefe:	428c      	cmp	r4, r1
 802ef00:	d077      	beq.n	802eff2 <_malloc_r+0x166>
 802ef02:	6862      	ldr	r2, [r4, #4]
 802ef04:	f022 0c03 	bic.w	ip, r2, #3
 802ef08:	ebac 0007 	sub.w	r0, ip, r7
 802ef0c:	280f      	cmp	r0, #15
 802ef0e:	dd48      	ble.n	802efa2 <_malloc_r+0x116>
 802ef10:	19e2      	adds	r2, r4, r7
 802ef12:	f040 0301 	orr.w	r3, r0, #1
 802ef16:	f047 0701 	orr.w	r7, r7, #1
 802ef1a:	6067      	str	r7, [r4, #4]
 802ef1c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802ef20:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802ef24:	6053      	str	r3, [r2, #4]
 802ef26:	f844 000c 	str.w	r0, [r4, ip]
 802ef2a:	e7e0      	b.n	802eeee <_malloc_r+0x62>
 802ef2c:	0a7b      	lsrs	r3, r7, #9
 802ef2e:	d02a      	beq.n	802ef86 <_malloc_r+0xfa>
 802ef30:	2b04      	cmp	r3, #4
 802ef32:	d812      	bhi.n	802ef5a <_malloc_r+0xce>
 802ef34:	09bb      	lsrs	r3, r7, #6
 802ef36:	3338      	adds	r3, #56	@ 0x38
 802ef38:	1c5a      	adds	r2, r3, #1
 802ef3a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802ef3e:	f1a2 0c08 	sub.w	ip, r2, #8
 802ef42:	6854      	ldr	r4, [r2, #4]
 802ef44:	4564      	cmp	r4, ip
 802ef46:	d006      	beq.n	802ef56 <_malloc_r+0xca>
 802ef48:	6862      	ldr	r2, [r4, #4]
 802ef4a:	f022 0203 	bic.w	r2, r2, #3
 802ef4e:	1bd0      	subs	r0, r2, r7
 802ef50:	280f      	cmp	r0, #15
 802ef52:	dd1c      	ble.n	802ef8e <_malloc_r+0x102>
 802ef54:	3b01      	subs	r3, #1
 802ef56:	3301      	adds	r3, #1
 802ef58:	e7cf      	b.n	802eefa <_malloc_r+0x6e>
 802ef5a:	2b14      	cmp	r3, #20
 802ef5c:	d801      	bhi.n	802ef62 <_malloc_r+0xd6>
 802ef5e:	335b      	adds	r3, #91	@ 0x5b
 802ef60:	e7ea      	b.n	802ef38 <_malloc_r+0xac>
 802ef62:	2b54      	cmp	r3, #84	@ 0x54
 802ef64:	d802      	bhi.n	802ef6c <_malloc_r+0xe0>
 802ef66:	0b3b      	lsrs	r3, r7, #12
 802ef68:	336e      	adds	r3, #110	@ 0x6e
 802ef6a:	e7e5      	b.n	802ef38 <_malloc_r+0xac>
 802ef6c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802ef70:	d802      	bhi.n	802ef78 <_malloc_r+0xec>
 802ef72:	0bfb      	lsrs	r3, r7, #15
 802ef74:	3377      	adds	r3, #119	@ 0x77
 802ef76:	e7df      	b.n	802ef38 <_malloc_r+0xac>
 802ef78:	f240 5254 	movw	r2, #1364	@ 0x554
 802ef7c:	4293      	cmp	r3, r2
 802ef7e:	d804      	bhi.n	802ef8a <_malloc_r+0xfe>
 802ef80:	0cbb      	lsrs	r3, r7, #18
 802ef82:	337c      	adds	r3, #124	@ 0x7c
 802ef84:	e7d8      	b.n	802ef38 <_malloc_r+0xac>
 802ef86:	233f      	movs	r3, #63	@ 0x3f
 802ef88:	e7d6      	b.n	802ef38 <_malloc_r+0xac>
 802ef8a:	237e      	movs	r3, #126	@ 0x7e
 802ef8c:	e7d4      	b.n	802ef38 <_malloc_r+0xac>
 802ef8e:	2800      	cmp	r0, #0
 802ef90:	68e1      	ldr	r1, [r4, #12]
 802ef92:	db04      	blt.n	802ef9e <_malloc_r+0x112>
 802ef94:	68a3      	ldr	r3, [r4, #8]
 802ef96:	60d9      	str	r1, [r3, #12]
 802ef98:	608b      	str	r3, [r1, #8]
 802ef9a:	18a3      	adds	r3, r4, r2
 802ef9c:	e7a3      	b.n	802eee6 <_malloc_r+0x5a>
 802ef9e:	460c      	mov	r4, r1
 802efa0:	e7d0      	b.n	802ef44 <_malloc_r+0xb8>
 802efa2:	2800      	cmp	r0, #0
 802efa4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802efa8:	db07      	blt.n	802efba <_malloc_r+0x12e>
 802efaa:	44a4      	add	ip, r4
 802efac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802efb0:	f043 0301 	orr.w	r3, r3, #1
 802efb4:	f8cc 3004 	str.w	r3, [ip, #4]
 802efb8:	e799      	b.n	802eeee <_malloc_r+0x62>
 802efba:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802efbe:	6870      	ldr	r0, [r6, #4]
 802efc0:	f080 8095 	bcs.w	802f0ee <_malloc_r+0x262>
 802efc4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802efc8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802efcc:	f04f 0c01 	mov.w	ip, #1
 802efd0:	3201      	adds	r2, #1
 802efd2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802efd6:	ea4c 0000 	orr.w	r0, ip, r0
 802efda:	6070      	str	r0, [r6, #4]
 802efdc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802efe0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802efe4:	3808      	subs	r0, #8
 802efe6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802efea:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802efee:	f8cc 400c 	str.w	r4, [ip, #12]
 802eff2:	1098      	asrs	r0, r3, #2
 802eff4:	2201      	movs	r2, #1
 802eff6:	4082      	lsls	r2, r0
 802eff8:	6870      	ldr	r0, [r6, #4]
 802effa:	4290      	cmp	r0, r2
 802effc:	d326      	bcc.n	802f04c <_malloc_r+0x1c0>
 802effe:	4210      	tst	r0, r2
 802f000:	d106      	bne.n	802f010 <_malloc_r+0x184>
 802f002:	f023 0303 	bic.w	r3, r3, #3
 802f006:	0052      	lsls	r2, r2, #1
 802f008:	4210      	tst	r0, r2
 802f00a:	f103 0304 	add.w	r3, r3, #4
 802f00e:	d0fa      	beq.n	802f006 <_malloc_r+0x17a>
 802f010:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802f014:	46c1      	mov	r9, r8
 802f016:	469e      	mov	lr, r3
 802f018:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802f01c:	454c      	cmp	r4, r9
 802f01e:	f040 80b9 	bne.w	802f194 <_malloc_r+0x308>
 802f022:	f10e 0e01 	add.w	lr, lr, #1
 802f026:	f01e 0f03 	tst.w	lr, #3
 802f02a:	f109 0908 	add.w	r9, r9, #8
 802f02e:	d1f3      	bne.n	802f018 <_malloc_r+0x18c>
 802f030:	0798      	lsls	r0, r3, #30
 802f032:	f040 80e3 	bne.w	802f1fc <_malloc_r+0x370>
 802f036:	6873      	ldr	r3, [r6, #4]
 802f038:	ea23 0302 	bic.w	r3, r3, r2
 802f03c:	6073      	str	r3, [r6, #4]
 802f03e:	6870      	ldr	r0, [r6, #4]
 802f040:	0052      	lsls	r2, r2, #1
 802f042:	4290      	cmp	r0, r2
 802f044:	d302      	bcc.n	802f04c <_malloc_r+0x1c0>
 802f046:	2a00      	cmp	r2, #0
 802f048:	f040 80e5 	bne.w	802f216 <_malloc_r+0x38a>
 802f04c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802f050:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f054:	f023 0903 	bic.w	r9, r3, #3
 802f058:	45b9      	cmp	r9, r7
 802f05a:	d304      	bcc.n	802f066 <_malloc_r+0x1da>
 802f05c:	eba9 0207 	sub.w	r2, r9, r7
 802f060:	2a0f      	cmp	r2, #15
 802f062:	f300 8141 	bgt.w	802f2e8 <_malloc_r+0x45c>
 802f066:	4b46      	ldr	r3, [pc, #280]	@ (802f180 <_malloc_r+0x2f4>)
 802f068:	6819      	ldr	r1, [r3, #0]
 802f06a:	3110      	adds	r1, #16
 802f06c:	4439      	add	r1, r7
 802f06e:	2008      	movs	r0, #8
 802f070:	9101      	str	r1, [sp, #4]
 802f072:	f006 f8f7 	bl	8035264 <sysconf>
 802f076:	4a43      	ldr	r2, [pc, #268]	@ (802f184 <_malloc_r+0x2f8>)
 802f078:	9901      	ldr	r1, [sp, #4]
 802f07a:	6813      	ldr	r3, [r2, #0]
 802f07c:	3301      	adds	r3, #1
 802f07e:	bf1f      	itttt	ne
 802f080:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802f084:	1809      	addne	r1, r1, r0
 802f086:	4243      	negne	r3, r0
 802f088:	4019      	andne	r1, r3
 802f08a:	4680      	mov	r8, r0
 802f08c:	4628      	mov	r0, r5
 802f08e:	9101      	str	r1, [sp, #4]
 802f090:	f006 f8d8 	bl	8035244 <_sbrk_r>
 802f094:	1c42      	adds	r2, r0, #1
 802f096:	eb0a 0b09 	add.w	fp, sl, r9
 802f09a:	4604      	mov	r4, r0
 802f09c:	f000 80f7 	beq.w	802f28e <_malloc_r+0x402>
 802f0a0:	4583      	cmp	fp, r0
 802f0a2:	9901      	ldr	r1, [sp, #4]
 802f0a4:	4a37      	ldr	r2, [pc, #220]	@ (802f184 <_malloc_r+0x2f8>)
 802f0a6:	d902      	bls.n	802f0ae <_malloc_r+0x222>
 802f0a8:	45b2      	cmp	sl, r6
 802f0aa:	f040 80f0 	bne.w	802f28e <_malloc_r+0x402>
 802f0ae:	4b36      	ldr	r3, [pc, #216]	@ (802f188 <_malloc_r+0x2fc>)
 802f0b0:	6818      	ldr	r0, [r3, #0]
 802f0b2:	45a3      	cmp	fp, r4
 802f0b4:	eb00 0e01 	add.w	lr, r0, r1
 802f0b8:	f8c3 e000 	str.w	lr, [r3]
 802f0bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802f0c0:	f040 80ab 	bne.w	802f21a <_malloc_r+0x38e>
 802f0c4:	ea1b 0f0c 	tst.w	fp, ip
 802f0c8:	f040 80a7 	bne.w	802f21a <_malloc_r+0x38e>
 802f0cc:	68b2      	ldr	r2, [r6, #8]
 802f0ce:	4449      	add	r1, r9
 802f0d0:	f041 0101 	orr.w	r1, r1, #1
 802f0d4:	6051      	str	r1, [r2, #4]
 802f0d6:	4a2d      	ldr	r2, [pc, #180]	@ (802f18c <_malloc_r+0x300>)
 802f0d8:	681b      	ldr	r3, [r3, #0]
 802f0da:	6811      	ldr	r1, [r2, #0]
 802f0dc:	428b      	cmp	r3, r1
 802f0de:	bf88      	it	hi
 802f0e0:	6013      	strhi	r3, [r2, #0]
 802f0e2:	4a2b      	ldr	r2, [pc, #172]	@ (802f190 <_malloc_r+0x304>)
 802f0e4:	6811      	ldr	r1, [r2, #0]
 802f0e6:	428b      	cmp	r3, r1
 802f0e8:	bf88      	it	hi
 802f0ea:	6013      	strhi	r3, [r2, #0]
 802f0ec:	e0cf      	b.n	802f28e <_malloc_r+0x402>
 802f0ee:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802f0f2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802f0f6:	d218      	bcs.n	802f12a <_malloc_r+0x29e>
 802f0f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802f0fc:	3238      	adds	r2, #56	@ 0x38
 802f0fe:	f102 0e01 	add.w	lr, r2, #1
 802f102:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802f106:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802f10a:	45f0      	cmp	r8, lr
 802f10c:	d12b      	bne.n	802f166 <_malloc_r+0x2da>
 802f10e:	1092      	asrs	r2, r2, #2
 802f110:	f04f 0c01 	mov.w	ip, #1
 802f114:	fa0c f202 	lsl.w	r2, ip, r2
 802f118:	4302      	orrs	r2, r0
 802f11a:	6072      	str	r2, [r6, #4]
 802f11c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802f120:	f8c8 4008 	str.w	r4, [r8, #8]
 802f124:	f8ce 400c 	str.w	r4, [lr, #12]
 802f128:	e763      	b.n	802eff2 <_malloc_r+0x166>
 802f12a:	2a14      	cmp	r2, #20
 802f12c:	d801      	bhi.n	802f132 <_malloc_r+0x2a6>
 802f12e:	325b      	adds	r2, #91	@ 0x5b
 802f130:	e7e5      	b.n	802f0fe <_malloc_r+0x272>
 802f132:	2a54      	cmp	r2, #84	@ 0x54
 802f134:	d803      	bhi.n	802f13e <_malloc_r+0x2b2>
 802f136:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802f13a:	326e      	adds	r2, #110	@ 0x6e
 802f13c:	e7df      	b.n	802f0fe <_malloc_r+0x272>
 802f13e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f142:	d803      	bhi.n	802f14c <_malloc_r+0x2c0>
 802f144:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802f148:	3277      	adds	r2, #119	@ 0x77
 802f14a:	e7d8      	b.n	802f0fe <_malloc_r+0x272>
 802f14c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802f150:	4572      	cmp	r2, lr
 802f152:	bf9a      	itte	ls
 802f154:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802f158:	327c      	addls	r2, #124	@ 0x7c
 802f15a:	227e      	movhi	r2, #126	@ 0x7e
 802f15c:	e7cf      	b.n	802f0fe <_malloc_r+0x272>
 802f15e:	f8de e008 	ldr.w	lr, [lr, #8]
 802f162:	45f0      	cmp	r8, lr
 802f164:	d005      	beq.n	802f172 <_malloc_r+0x2e6>
 802f166:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f16a:	f022 0203 	bic.w	r2, r2, #3
 802f16e:	4562      	cmp	r2, ip
 802f170:	d8f5      	bhi.n	802f15e <_malloc_r+0x2d2>
 802f172:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f176:	e7d1      	b.n	802f11c <_malloc_r+0x290>
 802f178:	2000040c 	.word	0x2000040c
 802f17c:	20000414 	.word	0x20000414
 802f180:	2001a084 	.word	0x2001a084
 802f184:	20000404 	.word	0x20000404
 802f188:	2001a054 	.word	0x2001a054
 802f18c:	2001a080 	.word	0x2001a080
 802f190:	2001a07c 	.word	0x2001a07c
 802f194:	6860      	ldr	r0, [r4, #4]
 802f196:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f19a:	f020 0003 	bic.w	r0, r0, #3
 802f19e:	eba0 0a07 	sub.w	sl, r0, r7
 802f1a2:	f1ba 0f0f 	cmp.w	sl, #15
 802f1a6:	dd12      	ble.n	802f1ce <_malloc_r+0x342>
 802f1a8:	68a3      	ldr	r3, [r4, #8]
 802f1aa:	19e2      	adds	r2, r4, r7
 802f1ac:	f047 0701 	orr.w	r7, r7, #1
 802f1b0:	6067      	str	r7, [r4, #4]
 802f1b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f1b6:	f8cc 3008 	str.w	r3, [ip, #8]
 802f1ba:	f04a 0301 	orr.w	r3, sl, #1
 802f1be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f1c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f1c6:	6053      	str	r3, [r2, #4]
 802f1c8:	f844 a000 	str.w	sl, [r4, r0]
 802f1cc:	e68f      	b.n	802eeee <_malloc_r+0x62>
 802f1ce:	f1ba 0f00 	cmp.w	sl, #0
 802f1d2:	db11      	blt.n	802f1f8 <_malloc_r+0x36c>
 802f1d4:	4420      	add	r0, r4
 802f1d6:	6843      	ldr	r3, [r0, #4]
 802f1d8:	f043 0301 	orr.w	r3, r3, #1
 802f1dc:	6043      	str	r3, [r0, #4]
 802f1de:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f1e2:	4628      	mov	r0, r5
 802f1e4:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f1e8:	f8cc 3008 	str.w	r3, [ip, #8]
 802f1ec:	f004 f95e 	bl	80334ac <__malloc_unlock>
 802f1f0:	4620      	mov	r0, r4
 802f1f2:	b003      	add	sp, #12
 802f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f1f8:	4664      	mov	r4, ip
 802f1fa:	e70f      	b.n	802f01c <_malloc_r+0x190>
 802f1fc:	f858 0908 	ldr.w	r0, [r8], #-8
 802f200:	4540      	cmp	r0, r8
 802f202:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f206:	f43f af13 	beq.w	802f030 <_malloc_r+0x1a4>
 802f20a:	e718      	b.n	802f03e <_malloc_r+0x1b2>
 802f20c:	3304      	adds	r3, #4
 802f20e:	0052      	lsls	r2, r2, #1
 802f210:	4210      	tst	r0, r2
 802f212:	d0fb      	beq.n	802f20c <_malloc_r+0x380>
 802f214:	e6fc      	b.n	802f010 <_malloc_r+0x184>
 802f216:	4673      	mov	r3, lr
 802f218:	e7fa      	b.n	802f210 <_malloc_r+0x384>
 802f21a:	6810      	ldr	r0, [r2, #0]
 802f21c:	3001      	adds	r0, #1
 802f21e:	bf1b      	ittet	ne
 802f220:	eba4 0b0b 	subne.w	fp, r4, fp
 802f224:	eb0b 020e 	addne.w	r2, fp, lr
 802f228:	6014      	streq	r4, [r2, #0]
 802f22a:	601a      	strne	r2, [r3, #0]
 802f22c:	f014 0b07 	ands.w	fp, r4, #7
 802f230:	bf1a      	itte	ne
 802f232:	f1cb 0008 	rsbne	r0, fp, #8
 802f236:	1824      	addne	r4, r4, r0
 802f238:	4658      	moveq	r0, fp
 802f23a:	1862      	adds	r2, r4, r1
 802f23c:	ea02 010c 	and.w	r1, r2, ip
 802f240:	4480      	add	r8, r0
 802f242:	eba8 0801 	sub.w	r8, r8, r1
 802f246:	ea08 080c 	and.w	r8, r8, ip
 802f24a:	4641      	mov	r1, r8
 802f24c:	4628      	mov	r0, r5
 802f24e:	9201      	str	r2, [sp, #4]
 802f250:	f005 fff8 	bl	8035244 <_sbrk_r>
 802f254:	1c43      	adds	r3, r0, #1
 802f256:	9a01      	ldr	r2, [sp, #4]
 802f258:	4b28      	ldr	r3, [pc, #160]	@ (802f2fc <_malloc_r+0x470>)
 802f25a:	d107      	bne.n	802f26c <_malloc_r+0x3e0>
 802f25c:	f1bb 0f00 	cmp.w	fp, #0
 802f260:	d023      	beq.n	802f2aa <_malloc_r+0x41e>
 802f262:	f1ab 0008 	sub.w	r0, fp, #8
 802f266:	4410      	add	r0, r2
 802f268:	f04f 0800 	mov.w	r8, #0
 802f26c:	681a      	ldr	r2, [r3, #0]
 802f26e:	60b4      	str	r4, [r6, #8]
 802f270:	1b00      	subs	r0, r0, r4
 802f272:	4440      	add	r0, r8
 802f274:	4442      	add	r2, r8
 802f276:	f040 0001 	orr.w	r0, r0, #1
 802f27a:	45b2      	cmp	sl, r6
 802f27c:	601a      	str	r2, [r3, #0]
 802f27e:	6060      	str	r0, [r4, #4]
 802f280:	f43f af29 	beq.w	802f0d6 <_malloc_r+0x24a>
 802f284:	f1b9 0f0f 	cmp.w	r9, #15
 802f288:	d812      	bhi.n	802f2b0 <_malloc_r+0x424>
 802f28a:	2301      	movs	r3, #1
 802f28c:	6063      	str	r3, [r4, #4]
 802f28e:	68b3      	ldr	r3, [r6, #8]
 802f290:	685b      	ldr	r3, [r3, #4]
 802f292:	f023 0303 	bic.w	r3, r3, #3
 802f296:	42bb      	cmp	r3, r7
 802f298:	eba3 0207 	sub.w	r2, r3, r7
 802f29c:	d301      	bcc.n	802f2a2 <_malloc_r+0x416>
 802f29e:	2a0f      	cmp	r2, #15
 802f2a0:	dc22      	bgt.n	802f2e8 <_malloc_r+0x45c>
 802f2a2:	4628      	mov	r0, r5
 802f2a4:	f004 f902 	bl	80334ac <__malloc_unlock>
 802f2a8:	e5fc      	b.n	802eea4 <_malloc_r+0x18>
 802f2aa:	4610      	mov	r0, r2
 802f2ac:	46d8      	mov	r8, fp
 802f2ae:	e7dd      	b.n	802f26c <_malloc_r+0x3e0>
 802f2b0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f2b4:	f1a9 090c 	sub.w	r9, r9, #12
 802f2b8:	f029 0907 	bic.w	r9, r9, #7
 802f2bc:	f002 0201 	and.w	r2, r2, #1
 802f2c0:	ea42 0209 	orr.w	r2, r2, r9
 802f2c4:	f8ca 2004 	str.w	r2, [sl, #4]
 802f2c8:	2105      	movs	r1, #5
 802f2ca:	eb0a 0209 	add.w	r2, sl, r9
 802f2ce:	f1b9 0f0f 	cmp.w	r9, #15
 802f2d2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f2d6:	f67f aefe 	bls.w	802f0d6 <_malloc_r+0x24a>
 802f2da:	f10a 0108 	add.w	r1, sl, #8
 802f2de:	4628      	mov	r0, r5
 802f2e0:	f7ff fcbc 	bl	802ec5c <_free_r>
 802f2e4:	4b05      	ldr	r3, [pc, #20]	@ (802f2fc <_malloc_r+0x470>)
 802f2e6:	e6f6      	b.n	802f0d6 <_malloc_r+0x24a>
 802f2e8:	68b4      	ldr	r4, [r6, #8]
 802f2ea:	f047 0301 	orr.w	r3, r7, #1
 802f2ee:	4427      	add	r7, r4
 802f2f0:	f042 0201 	orr.w	r2, r2, #1
 802f2f4:	6063      	str	r3, [r4, #4]
 802f2f6:	60b7      	str	r7, [r6, #8]
 802f2f8:	607a      	str	r2, [r7, #4]
 802f2fa:	e5f8      	b.n	802eeee <_malloc_r+0x62>
 802f2fc:	2001a054 	.word	0x2001a054

0802f300 <__ascii_mbtowc>:
 802f300:	b082      	sub	sp, #8
 802f302:	b901      	cbnz	r1, 802f306 <__ascii_mbtowc+0x6>
 802f304:	a901      	add	r1, sp, #4
 802f306:	b142      	cbz	r2, 802f31a <__ascii_mbtowc+0x1a>
 802f308:	b14b      	cbz	r3, 802f31e <__ascii_mbtowc+0x1e>
 802f30a:	7813      	ldrb	r3, [r2, #0]
 802f30c:	600b      	str	r3, [r1, #0]
 802f30e:	7812      	ldrb	r2, [r2, #0]
 802f310:	1e10      	subs	r0, r2, #0
 802f312:	bf18      	it	ne
 802f314:	2001      	movne	r0, #1
 802f316:	b002      	add	sp, #8
 802f318:	4770      	bx	lr
 802f31a:	4610      	mov	r0, r2
 802f31c:	e7fb      	b.n	802f316 <__ascii_mbtowc+0x16>
 802f31e:	f06f 0001 	mvn.w	r0, #1
 802f322:	e7f8      	b.n	802f316 <__ascii_mbtowc+0x16>

0802f324 <siscanf>:
 802f324:	b40e      	push	{r1, r2, r3}
 802f326:	b530      	push	{r4, r5, lr}
 802f328:	b09c      	sub	sp, #112	@ 0x70
 802f32a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802f32c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802f330:	f854 5b04 	ldr.w	r5, [r4], #4
 802f334:	f8ad 2014 	strh.w	r2, [sp, #20]
 802f338:	9002      	str	r0, [sp, #8]
 802f33a:	9006      	str	r0, [sp, #24]
 802f33c:	f7e0 ffb0 	bl	80102a0 <strlen>
 802f340:	4b0b      	ldr	r3, [pc, #44]	@ (802f370 <siscanf+0x4c>)
 802f342:	9003      	str	r0, [sp, #12]
 802f344:	9007      	str	r0, [sp, #28]
 802f346:	930a      	str	r3, [sp, #40]	@ 0x28
 802f348:	480a      	ldr	r0, [pc, #40]	@ (802f374 <siscanf+0x50>)
 802f34a:	9401      	str	r4, [sp, #4]
 802f34c:	2300      	movs	r3, #0
 802f34e:	930e      	str	r3, [sp, #56]	@ 0x38
 802f350:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f356:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f35a:	462a      	mov	r2, r5
 802f35c:	4623      	mov	r3, r4
 802f35e:	a902      	add	r1, sp, #8
 802f360:	6800      	ldr	r0, [r0, #0]
 802f362:	f000 fd99 	bl	802fe98 <__ssvfiscanf_r>
 802f366:	b01c      	add	sp, #112	@ 0x70
 802f368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f36c:	b003      	add	sp, #12
 802f36e:	4770      	bx	lr
 802f370:	0802c313 	.word	0x0802c313
 802f374:	200002d8 	.word	0x200002d8

0802f378 <sniprintf>:
 802f378:	b40c      	push	{r2, r3}
 802f37a:	b530      	push	{r4, r5, lr}
 802f37c:	4b17      	ldr	r3, [pc, #92]	@ (802f3dc <sniprintf+0x64>)
 802f37e:	1e0c      	subs	r4, r1, #0
 802f380:	681d      	ldr	r5, [r3, #0]
 802f382:	b09d      	sub	sp, #116	@ 0x74
 802f384:	da08      	bge.n	802f398 <sniprintf+0x20>
 802f386:	238b      	movs	r3, #139	@ 0x8b
 802f388:	602b      	str	r3, [r5, #0]
 802f38a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f38e:	b01d      	add	sp, #116	@ 0x74
 802f390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f394:	b002      	add	sp, #8
 802f396:	4770      	bx	lr
 802f398:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802f39c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802f3a0:	bf14      	ite	ne
 802f3a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802f3a6:	4623      	moveq	r3, r4
 802f3a8:	9304      	str	r3, [sp, #16]
 802f3aa:	9307      	str	r3, [sp, #28]
 802f3ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f3b0:	9002      	str	r0, [sp, #8]
 802f3b2:	9006      	str	r0, [sp, #24]
 802f3b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f3b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802f3ba:	ab21      	add	r3, sp, #132	@ 0x84
 802f3bc:	a902      	add	r1, sp, #8
 802f3be:	4628      	mov	r0, r5
 802f3c0:	9301      	str	r3, [sp, #4]
 802f3c2:	f000 f88b 	bl	802f4dc <_svfiprintf_r>
 802f3c6:	1c43      	adds	r3, r0, #1
 802f3c8:	bfbc      	itt	lt
 802f3ca:	238b      	movlt	r3, #139	@ 0x8b
 802f3cc:	602b      	strlt	r3, [r5, #0]
 802f3ce:	2c00      	cmp	r4, #0
 802f3d0:	d0dd      	beq.n	802f38e <sniprintf+0x16>
 802f3d2:	9b02      	ldr	r3, [sp, #8]
 802f3d4:	2200      	movs	r2, #0
 802f3d6:	701a      	strb	r2, [r3, #0]
 802f3d8:	e7d9      	b.n	802f38e <sniprintf+0x16>
 802f3da:	bf00      	nop
 802f3dc:	200002d8 	.word	0x200002d8

0802f3e0 <__ssprint_r>:
 802f3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f3e4:	6893      	ldr	r3, [r2, #8]
 802f3e6:	f8d2 b000 	ldr.w	fp, [r2]
 802f3ea:	9001      	str	r0, [sp, #4]
 802f3ec:	460c      	mov	r4, r1
 802f3ee:	4617      	mov	r7, r2
 802f3f0:	2b00      	cmp	r3, #0
 802f3f2:	d157      	bne.n	802f4a4 <__ssprint_r+0xc4>
 802f3f4:	2000      	movs	r0, #0
 802f3f6:	2300      	movs	r3, #0
 802f3f8:	607b      	str	r3, [r7, #4]
 802f3fa:	b003      	add	sp, #12
 802f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f400:	e9db a800 	ldrd	sl, r8, [fp]
 802f404:	f10b 0b08 	add.w	fp, fp, #8
 802f408:	68a6      	ldr	r6, [r4, #8]
 802f40a:	6820      	ldr	r0, [r4, #0]
 802f40c:	f1b8 0f00 	cmp.w	r8, #0
 802f410:	d0f6      	beq.n	802f400 <__ssprint_r+0x20>
 802f412:	45b0      	cmp	r8, r6
 802f414:	d32e      	bcc.n	802f474 <__ssprint_r+0x94>
 802f416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f41a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802f41e:	d029      	beq.n	802f474 <__ssprint_r+0x94>
 802f420:	6921      	ldr	r1, [r4, #16]
 802f422:	6965      	ldr	r5, [r4, #20]
 802f424:	eba0 0901 	sub.w	r9, r0, r1
 802f428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f430:	f109 0001 	add.w	r0, r9, #1
 802f434:	106d      	asrs	r5, r5, #1
 802f436:	4440      	add	r0, r8
 802f438:	4285      	cmp	r5, r0
 802f43a:	bf38      	it	cc
 802f43c:	4605      	movcc	r5, r0
 802f43e:	0553      	lsls	r3, r2, #21
 802f440:	d534      	bpl.n	802f4ac <__ssprint_r+0xcc>
 802f442:	9801      	ldr	r0, [sp, #4]
 802f444:	4629      	mov	r1, r5
 802f446:	f7ff fd21 	bl	802ee8c <_malloc_r>
 802f44a:	4606      	mov	r6, r0
 802f44c:	2800      	cmp	r0, #0
 802f44e:	d038      	beq.n	802f4c2 <__ssprint_r+0xe2>
 802f450:	464a      	mov	r2, r9
 802f452:	6921      	ldr	r1, [r4, #16]
 802f454:	f7fe fd00 	bl	802de58 <memcpy>
 802f458:	89a2      	ldrh	r2, [r4, #12]
 802f45a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802f45e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802f462:	81a2      	strh	r2, [r4, #12]
 802f464:	6126      	str	r6, [r4, #16]
 802f466:	6165      	str	r5, [r4, #20]
 802f468:	444e      	add	r6, r9
 802f46a:	eba5 0509 	sub.w	r5, r5, r9
 802f46e:	6026      	str	r6, [r4, #0]
 802f470:	60a5      	str	r5, [r4, #8]
 802f472:	4646      	mov	r6, r8
 802f474:	4546      	cmp	r6, r8
 802f476:	bf28      	it	cs
 802f478:	4646      	movcs	r6, r8
 802f47a:	4632      	mov	r2, r6
 802f47c:	4651      	mov	r1, sl
 802f47e:	6820      	ldr	r0, [r4, #0]
 802f480:	f7fd fa94 	bl	802c9ac <memmove>
 802f484:	68a2      	ldr	r2, [r4, #8]
 802f486:	1b92      	subs	r2, r2, r6
 802f488:	60a2      	str	r2, [r4, #8]
 802f48a:	6822      	ldr	r2, [r4, #0]
 802f48c:	4432      	add	r2, r6
 802f48e:	6022      	str	r2, [r4, #0]
 802f490:	68ba      	ldr	r2, [r7, #8]
 802f492:	eba2 0308 	sub.w	r3, r2, r8
 802f496:	44c2      	add	sl, r8
 802f498:	60bb      	str	r3, [r7, #8]
 802f49a:	2b00      	cmp	r3, #0
 802f49c:	d0aa      	beq.n	802f3f4 <__ssprint_r+0x14>
 802f49e:	f04f 0800 	mov.w	r8, #0
 802f4a2:	e7b1      	b.n	802f408 <__ssprint_r+0x28>
 802f4a4:	f04f 0a00 	mov.w	sl, #0
 802f4a8:	46d0      	mov	r8, sl
 802f4aa:	e7ad      	b.n	802f408 <__ssprint_r+0x28>
 802f4ac:	9801      	ldr	r0, [sp, #4]
 802f4ae:	462a      	mov	r2, r5
 802f4b0:	f004 fcfc 	bl	8033eac <_realloc_r>
 802f4b4:	4606      	mov	r6, r0
 802f4b6:	2800      	cmp	r0, #0
 802f4b8:	d1d4      	bne.n	802f464 <__ssprint_r+0x84>
 802f4ba:	6921      	ldr	r1, [r4, #16]
 802f4bc:	9801      	ldr	r0, [sp, #4]
 802f4be:	f7ff fbcd 	bl	802ec5c <_free_r>
 802f4c2:	9a01      	ldr	r2, [sp, #4]
 802f4c4:	230c      	movs	r3, #12
 802f4c6:	6013      	str	r3, [r2, #0]
 802f4c8:	89a3      	ldrh	r3, [r4, #12]
 802f4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802f4ce:	81a3      	strh	r3, [r4, #12]
 802f4d0:	2300      	movs	r3, #0
 802f4d2:	60bb      	str	r3, [r7, #8]
 802f4d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f4d8:	e78d      	b.n	802f3f6 <__ssprint_r+0x16>
	...

0802f4dc <_svfiprintf_r>:
 802f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4e0:	461d      	mov	r5, r3
 802f4e2:	898b      	ldrh	r3, [r1, #12]
 802f4e4:	b0bb      	sub	sp, #236	@ 0xec
 802f4e6:	468b      	mov	fp, r1
 802f4e8:	0619      	lsls	r1, r3, #24
 802f4ea:	9001      	str	r0, [sp, #4]
 802f4ec:	9202      	str	r2, [sp, #8]
 802f4ee:	d514      	bpl.n	802f51a <_svfiprintf_r+0x3e>
 802f4f0:	f8db 3010 	ldr.w	r3, [fp, #16]
 802f4f4:	b98b      	cbnz	r3, 802f51a <_svfiprintf_r+0x3e>
 802f4f6:	2140      	movs	r1, #64	@ 0x40
 802f4f8:	f7ff fcc8 	bl	802ee8c <_malloc_r>
 802f4fc:	f8cb 0000 	str.w	r0, [fp]
 802f500:	f8cb 0010 	str.w	r0, [fp, #16]
 802f504:	b930      	cbnz	r0, 802f514 <_svfiprintf_r+0x38>
 802f506:	9a01      	ldr	r2, [sp, #4]
 802f508:	230c      	movs	r3, #12
 802f50a:	6013      	str	r3, [r2, #0]
 802f50c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f510:	9304      	str	r3, [sp, #16]
 802f512:	e3df      	b.n	802fcd4 <_svfiprintf_r+0x7f8>
 802f514:	2340      	movs	r3, #64	@ 0x40
 802f516:	f8cb 3014 	str.w	r3, [fp, #20]
 802f51a:	2300      	movs	r3, #0
 802f51c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802f520:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802f524:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802f528:	ae11      	add	r6, sp, #68	@ 0x44
 802f52a:	960e      	str	r6, [sp, #56]	@ 0x38
 802f52c:	9304      	str	r3, [sp, #16]
 802f52e:	9b02      	ldr	r3, [sp, #8]
 802f530:	461c      	mov	r4, r3
 802f532:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f536:	b10a      	cbz	r2, 802f53c <_svfiprintf_r+0x60>
 802f538:	2a25      	cmp	r2, #37	@ 0x25
 802f53a:	d1f9      	bne.n	802f530 <_svfiprintf_r+0x54>
 802f53c:	9a02      	ldr	r2, [sp, #8]
 802f53e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f540:	1aa7      	subs	r7, r4, r2
 802f542:	d00c      	beq.n	802f55e <_svfiprintf_r+0x82>
 802f544:	443b      	add	r3, r7
 802f546:	9310      	str	r3, [sp, #64]	@ 0x40
 802f548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f54a:	3301      	adds	r3, #1
 802f54c:	2b07      	cmp	r3, #7
 802f54e:	e9c6 2700 	strd	r2, r7, [r6]
 802f552:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f554:	dc76      	bgt.n	802f644 <_svfiprintf_r+0x168>
 802f556:	3608      	adds	r6, #8
 802f558:	9b04      	ldr	r3, [sp, #16]
 802f55a:	443b      	add	r3, r7
 802f55c:	9304      	str	r3, [sp, #16]
 802f55e:	7823      	ldrb	r3, [r4, #0]
 802f560:	2b00      	cmp	r3, #0
 802f562:	f000 83ce 	beq.w	802fd02 <_svfiprintf_r+0x826>
 802f566:	2300      	movs	r3, #0
 802f568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f56c:	3401      	adds	r4, #1
 802f56e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f572:	9200      	str	r2, [sp, #0]
 802f574:	9303      	str	r3, [sp, #12]
 802f576:	4699      	mov	r9, r3
 802f578:	4622      	mov	r2, r4
 802f57a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f57e:	9202      	str	r2, [sp, #8]
 802f580:	f1a3 0220 	sub.w	r2, r3, #32
 802f584:	2a5a      	cmp	r2, #90	@ 0x5a
 802f586:	f200 8318 	bhi.w	802fbba <_svfiprintf_r+0x6de>
 802f58a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f58e:	009a      	.short	0x009a
 802f590:	03160316 	.word	0x03160316
 802f594:	031600a2 	.word	0x031600a2
 802f598:	03160316 	.word	0x03160316
 802f59c:	03160082 	.word	0x03160082
 802f5a0:	00a50316 	.word	0x00a50316
 802f5a4:	031600af 	.word	0x031600af
 802f5a8:	00b100ac 	.word	0x00b100ac
 802f5ac:	00cc0316 	.word	0x00cc0316
 802f5b0:	00cf00cf 	.word	0x00cf00cf
 802f5b4:	00cf00cf 	.word	0x00cf00cf
 802f5b8:	00cf00cf 	.word	0x00cf00cf
 802f5bc:	00cf00cf 	.word	0x00cf00cf
 802f5c0:	031600cf 	.word	0x031600cf
 802f5c4:	03160316 	.word	0x03160316
 802f5c8:	03160316 	.word	0x03160316
 802f5cc:	03160316 	.word	0x03160316
 802f5d0:	03160316 	.word	0x03160316
 802f5d4:	010600f9 	.word	0x010600f9
 802f5d8:	03160316 	.word	0x03160316
 802f5dc:	03160316 	.word	0x03160316
 802f5e0:	03160316 	.word	0x03160316
 802f5e4:	03160316 	.word	0x03160316
 802f5e8:	03160316 	.word	0x03160316
 802f5ec:	03160154 	.word	0x03160154
 802f5f0:	03160316 	.word	0x03160316
 802f5f4:	0316019b 	.word	0x0316019b
 802f5f8:	0316027d 	.word	0x0316027d
 802f5fc:	029d0316 	.word	0x029d0316
 802f600:	03160316 	.word	0x03160316
 802f604:	03160316 	.word	0x03160316
 802f608:	03160316 	.word	0x03160316
 802f60c:	03160316 	.word	0x03160316
 802f610:	03160316 	.word	0x03160316
 802f614:	010800f9 	.word	0x010800f9
 802f618:	03160316 	.word	0x03160316
 802f61c:	00df0316 	.word	0x00df0316
 802f620:	00f30108 	.word	0x00f30108
 802f624:	00ec0316 	.word	0x00ec0316
 802f628:	01340316 	.word	0x01340316
 802f62c:	018a0156 	.word	0x018a0156
 802f630:	031600f3 	.word	0x031600f3
 802f634:	0098019b 	.word	0x0098019b
 802f638:	0316027f 	.word	0x0316027f
 802f63c:	00650316 	.word	0x00650316
 802f640:	00980316 	.word	0x00980316
 802f644:	9801      	ldr	r0, [sp, #4]
 802f646:	aa0e      	add	r2, sp, #56	@ 0x38
 802f648:	4659      	mov	r1, fp
 802f64a:	f7ff fec9 	bl	802f3e0 <__ssprint_r>
 802f64e:	2800      	cmp	r0, #0
 802f650:	f040 833b 	bne.w	802fcca <_svfiprintf_r+0x7ee>
 802f654:	ae11      	add	r6, sp, #68	@ 0x44
 802f656:	e77f      	b.n	802f558 <_svfiprintf_r+0x7c>
 802f658:	4a99      	ldr	r2, [pc, #612]	@ (802f8c0 <_svfiprintf_r+0x3e4>)
 802f65a:	9205      	str	r2, [sp, #20]
 802f65c:	f019 0220 	ands.w	r2, r9, #32
 802f660:	f000 8234 	beq.w	802facc <_svfiprintf_r+0x5f0>
 802f664:	3507      	adds	r5, #7
 802f666:	f025 0507 	bic.w	r5, r5, #7
 802f66a:	462f      	mov	r7, r5
 802f66c:	686d      	ldr	r5, [r5, #4]
 802f66e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f672:	f019 0f01 	tst.w	r9, #1
 802f676:	d009      	beq.n	802f68c <_svfiprintf_r+0x1b0>
 802f678:	ea54 0205 	orrs.w	r2, r4, r5
 802f67c:	bf1f      	itttt	ne
 802f67e:	2230      	movne	r2, #48	@ 0x30
 802f680:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802f684:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802f688:	f049 0902 	orrne.w	r9, r9, #2
 802f68c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f690:	e113      	b.n	802f8ba <_svfiprintf_r+0x3de>
 802f692:	9801      	ldr	r0, [sp, #4]
 802f694:	f7fe fb32 	bl	802dcfc <_localeconv_r>
 802f698:	6843      	ldr	r3, [r0, #4]
 802f69a:	9308      	str	r3, [sp, #32]
 802f69c:	4618      	mov	r0, r3
 802f69e:	f7e0 fdff 	bl	80102a0 <strlen>
 802f6a2:	9007      	str	r0, [sp, #28]
 802f6a4:	9801      	ldr	r0, [sp, #4]
 802f6a6:	f7fe fb29 	bl	802dcfc <_localeconv_r>
 802f6aa:	6883      	ldr	r3, [r0, #8]
 802f6ac:	9306      	str	r3, [sp, #24]
 802f6ae:	9b07      	ldr	r3, [sp, #28]
 802f6b0:	b12b      	cbz	r3, 802f6be <_svfiprintf_r+0x1e2>
 802f6b2:	9b06      	ldr	r3, [sp, #24]
 802f6b4:	b11b      	cbz	r3, 802f6be <_svfiprintf_r+0x1e2>
 802f6b6:	781b      	ldrb	r3, [r3, #0]
 802f6b8:	b10b      	cbz	r3, 802f6be <_svfiprintf_r+0x1e2>
 802f6ba:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802f6be:	9c02      	ldr	r4, [sp, #8]
 802f6c0:	e75a      	b.n	802f578 <_svfiprintf_r+0x9c>
 802f6c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f6c6:	2b00      	cmp	r3, #0
 802f6c8:	d1f9      	bne.n	802f6be <_svfiprintf_r+0x1e2>
 802f6ca:	2320      	movs	r3, #32
 802f6cc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f6d0:	e7f5      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f6d2:	f049 0901 	orr.w	r9, r9, #1
 802f6d6:	e7f2      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 802f6dc:	9303      	str	r3, [sp, #12]
 802f6de:	2b00      	cmp	r3, #0
 802f6e0:	daed      	bge.n	802f6be <_svfiprintf_r+0x1e2>
 802f6e2:	425b      	negs	r3, r3
 802f6e4:	9303      	str	r3, [sp, #12]
 802f6e6:	f049 0904 	orr.w	r9, r9, #4
 802f6ea:	e7e8      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f6ec:	232b      	movs	r3, #43	@ 0x2b
 802f6ee:	e7ed      	b.n	802f6cc <_svfiprintf_r+0x1f0>
 802f6f0:	9a02      	ldr	r2, [sp, #8]
 802f6f2:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 802f6f8:	d111      	bne.n	802f71e <_svfiprintf_r+0x242>
 802f6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 802f6fe:	9202      	str	r2, [sp, #8]
 802f700:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802f704:	9300      	str	r3, [sp, #0]
 802f706:	e7da      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f708:	9b00      	ldr	r3, [sp, #0]
 802f70a:	fb00 1303 	mla	r3, r0, r3, r1
 802f70e:	9300      	str	r3, [sp, #0]
 802f710:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f714:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f718:	2909      	cmp	r1, #9
 802f71a:	d9f5      	bls.n	802f708 <_svfiprintf_r+0x22c>
 802f71c:	e72f      	b.n	802f57e <_svfiprintf_r+0xa2>
 802f71e:	2100      	movs	r1, #0
 802f720:	9100      	str	r1, [sp, #0]
 802f722:	200a      	movs	r0, #10
 802f724:	e7f6      	b.n	802f714 <_svfiprintf_r+0x238>
 802f726:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802f72a:	e7c8      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f72c:	2100      	movs	r1, #0
 802f72e:	9a02      	ldr	r2, [sp, #8]
 802f730:	9103      	str	r1, [sp, #12]
 802f732:	200a      	movs	r0, #10
 802f734:	9903      	ldr	r1, [sp, #12]
 802f736:	3b30      	subs	r3, #48	@ 0x30
 802f738:	fb00 3301 	mla	r3, r0, r1, r3
 802f73c:	9303      	str	r3, [sp, #12]
 802f73e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f742:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f746:	2909      	cmp	r1, #9
 802f748:	d9f4      	bls.n	802f734 <_svfiprintf_r+0x258>
 802f74a:	e718      	b.n	802f57e <_svfiprintf_r+0xa2>
 802f74c:	9b02      	ldr	r3, [sp, #8]
 802f74e:	781b      	ldrb	r3, [r3, #0]
 802f750:	2b68      	cmp	r3, #104	@ 0x68
 802f752:	bf01      	itttt	eq
 802f754:	9b02      	ldreq	r3, [sp, #8]
 802f756:	3301      	addeq	r3, #1
 802f758:	9302      	streq	r3, [sp, #8]
 802f75a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802f75e:	bf18      	it	ne
 802f760:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802f764:	e7ab      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f766:	9b02      	ldr	r3, [sp, #8]
 802f768:	781b      	ldrb	r3, [r3, #0]
 802f76a:	2b6c      	cmp	r3, #108	@ 0x6c
 802f76c:	d105      	bne.n	802f77a <_svfiprintf_r+0x29e>
 802f76e:	9b02      	ldr	r3, [sp, #8]
 802f770:	3301      	adds	r3, #1
 802f772:	9302      	str	r3, [sp, #8]
 802f774:	f049 0920 	orr.w	r9, r9, #32
 802f778:	e7a1      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f77a:	f049 0910 	orr.w	r9, r9, #16
 802f77e:	e79e      	b.n	802f6be <_svfiprintf_r+0x1e2>
 802f780:	462f      	mov	r7, r5
 802f782:	2400      	movs	r4, #0
 802f784:	f857 3b04 	ldr.w	r3, [r7], #4
 802f788:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f78c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f790:	2301      	movs	r3, #1
 802f792:	9300      	str	r3, [sp, #0]
 802f794:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802f798:	e0aa      	b.n	802f8f0 <_svfiprintf_r+0x414>
 802f79a:	f049 0910 	orr.w	r9, r9, #16
 802f79e:	f019 0f20 	tst.w	r9, #32
 802f7a2:	d011      	beq.n	802f7c8 <_svfiprintf_r+0x2ec>
 802f7a4:	3507      	adds	r5, #7
 802f7a6:	f025 0507 	bic.w	r5, r5, #7
 802f7aa:	462f      	mov	r7, r5
 802f7ac:	686d      	ldr	r5, [r5, #4]
 802f7ae:	f857 4b08 	ldr.w	r4, [r7], #8
 802f7b2:	2d00      	cmp	r5, #0
 802f7b4:	da06      	bge.n	802f7c4 <_svfiprintf_r+0x2e8>
 802f7b6:	4264      	negs	r4, r4
 802f7b8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802f7bc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802f7c0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f7c4:	2301      	movs	r3, #1
 802f7c6:	e048      	b.n	802f85a <_svfiprintf_r+0x37e>
 802f7c8:	462f      	mov	r7, r5
 802f7ca:	f019 0f10 	tst.w	r9, #16
 802f7ce:	f857 5b04 	ldr.w	r5, [r7], #4
 802f7d2:	d002      	beq.n	802f7da <_svfiprintf_r+0x2fe>
 802f7d4:	462c      	mov	r4, r5
 802f7d6:	17ed      	asrs	r5, r5, #31
 802f7d8:	e7eb      	b.n	802f7b2 <_svfiprintf_r+0x2d6>
 802f7da:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f7de:	d003      	beq.n	802f7e8 <_svfiprintf_r+0x30c>
 802f7e0:	b22c      	sxth	r4, r5
 802f7e2:	f345 35c0 	sbfx	r5, r5, #15, #1
 802f7e6:	e7e4      	b.n	802f7b2 <_svfiprintf_r+0x2d6>
 802f7e8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f7ec:	d0f2      	beq.n	802f7d4 <_svfiprintf_r+0x2f8>
 802f7ee:	b26c      	sxtb	r4, r5
 802f7f0:	f345 15c0 	sbfx	r5, r5, #7, #1
 802f7f4:	e7dd      	b.n	802f7b2 <_svfiprintf_r+0x2d6>
 802f7f6:	f019 0f20 	tst.w	r9, #32
 802f7fa:	d007      	beq.n	802f80c <_svfiprintf_r+0x330>
 802f7fc:	9a04      	ldr	r2, [sp, #16]
 802f7fe:	682b      	ldr	r3, [r5, #0]
 802f800:	9904      	ldr	r1, [sp, #16]
 802f802:	17d2      	asrs	r2, r2, #31
 802f804:	e9c3 1200 	strd	r1, r2, [r3]
 802f808:	3504      	adds	r5, #4
 802f80a:	e690      	b.n	802f52e <_svfiprintf_r+0x52>
 802f80c:	f019 0f10 	tst.w	r9, #16
 802f810:	d003      	beq.n	802f81a <_svfiprintf_r+0x33e>
 802f812:	682b      	ldr	r3, [r5, #0]
 802f814:	9a04      	ldr	r2, [sp, #16]
 802f816:	601a      	str	r2, [r3, #0]
 802f818:	e7f6      	b.n	802f808 <_svfiprintf_r+0x32c>
 802f81a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f81e:	d003      	beq.n	802f828 <_svfiprintf_r+0x34c>
 802f820:	682b      	ldr	r3, [r5, #0]
 802f822:	9a04      	ldr	r2, [sp, #16]
 802f824:	801a      	strh	r2, [r3, #0]
 802f826:	e7ef      	b.n	802f808 <_svfiprintf_r+0x32c>
 802f828:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f82c:	d0f1      	beq.n	802f812 <_svfiprintf_r+0x336>
 802f82e:	682b      	ldr	r3, [r5, #0]
 802f830:	9a04      	ldr	r2, [sp, #16]
 802f832:	701a      	strb	r2, [r3, #0]
 802f834:	e7e8      	b.n	802f808 <_svfiprintf_r+0x32c>
 802f836:	f049 0910 	orr.w	r9, r9, #16
 802f83a:	f019 0320 	ands.w	r3, r9, #32
 802f83e:	d01e      	beq.n	802f87e <_svfiprintf_r+0x3a2>
 802f840:	3507      	adds	r5, #7
 802f842:	f025 0507 	bic.w	r5, r5, #7
 802f846:	462f      	mov	r7, r5
 802f848:	686d      	ldr	r5, [r5, #4]
 802f84a:	f857 4b08 	ldr.w	r4, [r7], #8
 802f84e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f852:	2300      	movs	r3, #0
 802f854:	2200      	movs	r2, #0
 802f856:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802f85a:	9a00      	ldr	r2, [sp, #0]
 802f85c:	3201      	adds	r2, #1
 802f85e:	f000 8259 	beq.w	802fd14 <_svfiprintf_r+0x838>
 802f862:	ea54 0205 	orrs.w	r2, r4, r5
 802f866:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802f86a:	f040 8258 	bne.w	802fd1e <_svfiprintf_r+0x842>
 802f86e:	9a00      	ldr	r2, [sp, #0]
 802f870:	2a00      	cmp	r2, #0
 802f872:	f000 8199 	beq.w	802fba8 <_svfiprintf_r+0x6cc>
 802f876:	2b01      	cmp	r3, #1
 802f878:	f040 8254 	bne.w	802fd24 <_svfiprintf_r+0x848>
 802f87c:	e13d      	b.n	802fafa <_svfiprintf_r+0x61e>
 802f87e:	462f      	mov	r7, r5
 802f880:	f019 0510 	ands.w	r5, r9, #16
 802f884:	f857 4b04 	ldr.w	r4, [r7], #4
 802f888:	d001      	beq.n	802f88e <_svfiprintf_r+0x3b2>
 802f88a:	461d      	mov	r5, r3
 802f88c:	e7df      	b.n	802f84e <_svfiprintf_r+0x372>
 802f88e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f892:	d001      	beq.n	802f898 <_svfiprintf_r+0x3bc>
 802f894:	b2a4      	uxth	r4, r4
 802f896:	e7da      	b.n	802f84e <_svfiprintf_r+0x372>
 802f898:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f89c:	d0d7      	beq.n	802f84e <_svfiprintf_r+0x372>
 802f89e:	b2e4      	uxtb	r4, r4
 802f8a0:	e7f3      	b.n	802f88a <_svfiprintf_r+0x3ae>
 802f8a2:	462f      	mov	r7, r5
 802f8a4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802f8a8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802f8ac:	f857 4b04 	ldr.w	r4, [r7], #4
 802f8b0:	4b03      	ldr	r3, [pc, #12]	@ (802f8c0 <_svfiprintf_r+0x3e4>)
 802f8b2:	9305      	str	r3, [sp, #20]
 802f8b4:	2500      	movs	r5, #0
 802f8b6:	f049 0902 	orr.w	r9, r9, #2
 802f8ba:	2302      	movs	r3, #2
 802f8bc:	e7ca      	b.n	802f854 <_svfiprintf_r+0x378>
 802f8be:	bf00      	nop
 802f8c0:	0803bc8b 	.word	0x0803bc8b
 802f8c4:	9b00      	ldr	r3, [sp, #0]
 802f8c6:	462f      	mov	r7, r5
 802f8c8:	1c5a      	adds	r2, r3, #1
 802f8ca:	f04f 0500 	mov.w	r5, #0
 802f8ce:	f857 8b04 	ldr.w	r8, [r7], #4
 802f8d2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802f8d6:	f000 80d2 	beq.w	802fa7e <_svfiprintf_r+0x5a2>
 802f8da:	461a      	mov	r2, r3
 802f8dc:	4629      	mov	r1, r5
 802f8de:	4640      	mov	r0, r8
 802f8e0:	f7e0 fc8e 	bl	8010200 <memchr>
 802f8e4:	4604      	mov	r4, r0
 802f8e6:	b118      	cbz	r0, 802f8f0 <_svfiprintf_r+0x414>
 802f8e8:	eba0 0308 	sub.w	r3, r0, r8
 802f8ec:	9300      	str	r3, [sp, #0]
 802f8ee:	462c      	mov	r4, r5
 802f8f0:	9d00      	ldr	r5, [sp, #0]
 802f8f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f8f6:	42a5      	cmp	r5, r4
 802f8f8:	bfb8      	it	lt
 802f8fa:	4625      	movlt	r5, r4
 802f8fc:	b103      	cbz	r3, 802f900 <_svfiprintf_r+0x424>
 802f8fe:	3501      	adds	r5, #1
 802f900:	f019 0302 	ands.w	r3, r9, #2
 802f904:	9309      	str	r3, [sp, #36]	@ 0x24
 802f906:	bf18      	it	ne
 802f908:	3502      	addne	r5, #2
 802f90a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802f90e:	930a      	str	r3, [sp, #40]	@ 0x28
 802f910:	d123      	bne.n	802f95a <_svfiprintf_r+0x47e>
 802f912:	9b03      	ldr	r3, [sp, #12]
 802f914:	eba3 0a05 	sub.w	sl, r3, r5
 802f918:	f1ba 0f00 	cmp.w	sl, #0
 802f91c:	dd1d      	ble.n	802f95a <_svfiprintf_r+0x47e>
 802f91e:	4bac      	ldr	r3, [pc, #688]	@ (802fbd0 <_svfiprintf_r+0x6f4>)
 802f920:	6033      	str	r3, [r6, #0]
 802f922:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f926:	f1ba 0f10 	cmp.w	sl, #16
 802f92a:	f102 0201 	add.w	r2, r2, #1
 802f92e:	f106 0008 	add.w	r0, r6, #8
 802f932:	f300 8153 	bgt.w	802fbdc <_svfiprintf_r+0x700>
 802f936:	eb0c 010a 	add.w	r1, ip, sl
 802f93a:	2a07      	cmp	r2, #7
 802f93c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f940:	f8c6 a004 	str.w	sl, [r6, #4]
 802f944:	f340 815e 	ble.w	802fc04 <_svfiprintf_r+0x728>
 802f948:	9801      	ldr	r0, [sp, #4]
 802f94a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f94c:	4659      	mov	r1, fp
 802f94e:	f7ff fd47 	bl	802f3e0 <__ssprint_r>
 802f952:	2800      	cmp	r0, #0
 802f954:	f040 81b9 	bne.w	802fcca <_svfiprintf_r+0x7ee>
 802f958:	ae11      	add	r6, sp, #68	@ 0x44
 802f95a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802f95e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f962:	b161      	cbz	r1, 802f97e <_svfiprintf_r+0x4a2>
 802f964:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802f968:	3301      	adds	r3, #1
 802f96a:	6031      	str	r1, [r6, #0]
 802f96c:	2101      	movs	r1, #1
 802f96e:	440a      	add	r2, r1
 802f970:	2b07      	cmp	r3, #7
 802f972:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f976:	6071      	str	r1, [r6, #4]
 802f978:	f300 8146 	bgt.w	802fc08 <_svfiprintf_r+0x72c>
 802f97c:	3608      	adds	r6, #8
 802f97e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f980:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f984:	b159      	cbz	r1, 802f99e <_svfiprintf_r+0x4c2>
 802f986:	a90d      	add	r1, sp, #52	@ 0x34
 802f988:	3301      	adds	r3, #1
 802f98a:	6031      	str	r1, [r6, #0]
 802f98c:	2102      	movs	r1, #2
 802f98e:	440a      	add	r2, r1
 802f990:	2b07      	cmp	r3, #7
 802f992:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f996:	6071      	str	r1, [r6, #4]
 802f998:	f300 813f 	bgt.w	802fc1a <_svfiprintf_r+0x73e>
 802f99c:	3608      	adds	r6, #8
 802f99e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f9a0:	2b80      	cmp	r3, #128	@ 0x80
 802f9a2:	d123      	bne.n	802f9ec <_svfiprintf_r+0x510>
 802f9a4:	9b03      	ldr	r3, [sp, #12]
 802f9a6:	eba3 0a05 	sub.w	sl, r3, r5
 802f9aa:	f1ba 0f00 	cmp.w	sl, #0
 802f9ae:	dd1d      	ble.n	802f9ec <_svfiprintf_r+0x510>
 802f9b0:	4b88      	ldr	r3, [pc, #544]	@ (802fbd4 <_svfiprintf_r+0x6f8>)
 802f9b2:	6033      	str	r3, [r6, #0]
 802f9b4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f9b8:	f1ba 0f10 	cmp.w	sl, #16
 802f9bc:	f102 0201 	add.w	r2, r2, #1
 802f9c0:	f106 0008 	add.w	r0, r6, #8
 802f9c4:	f300 8132 	bgt.w	802fc2c <_svfiprintf_r+0x750>
 802f9c8:	eb0c 010a 	add.w	r1, ip, sl
 802f9cc:	2a07      	cmp	r2, #7
 802f9ce:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f9d2:	f8c6 a004 	str.w	sl, [r6, #4]
 802f9d6:	f340 813d 	ble.w	802fc54 <_svfiprintf_r+0x778>
 802f9da:	9801      	ldr	r0, [sp, #4]
 802f9dc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f9de:	4659      	mov	r1, fp
 802f9e0:	f7ff fcfe 	bl	802f3e0 <__ssprint_r>
 802f9e4:	2800      	cmp	r0, #0
 802f9e6:	f040 8170 	bne.w	802fcca <_svfiprintf_r+0x7ee>
 802f9ea:	ae11      	add	r6, sp, #68	@ 0x44
 802f9ec:	9b00      	ldr	r3, [sp, #0]
 802f9ee:	1ae4      	subs	r4, r4, r3
 802f9f0:	2c00      	cmp	r4, #0
 802f9f2:	dd1a      	ble.n	802fa2a <_svfiprintf_r+0x54e>
 802f9f4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f9f8:	4876      	ldr	r0, [pc, #472]	@ (802fbd4 <_svfiprintf_r+0x6f8>)
 802f9fa:	6030      	str	r0, [r6, #0]
 802f9fc:	2c10      	cmp	r4, #16
 802f9fe:	f103 0301 	add.w	r3, r3, #1
 802fa02:	f106 0108 	add.w	r1, r6, #8
 802fa06:	f300 8127 	bgt.w	802fc58 <_svfiprintf_r+0x77c>
 802fa0a:	6074      	str	r4, [r6, #4]
 802fa0c:	2b07      	cmp	r3, #7
 802fa0e:	4414      	add	r4, r2
 802fa10:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802fa14:	f340 8131 	ble.w	802fc7a <_svfiprintf_r+0x79e>
 802fa18:	9801      	ldr	r0, [sp, #4]
 802fa1a:	aa0e      	add	r2, sp, #56	@ 0x38
 802fa1c:	4659      	mov	r1, fp
 802fa1e:	f7ff fcdf 	bl	802f3e0 <__ssprint_r>
 802fa22:	2800      	cmp	r0, #0
 802fa24:	f040 8151 	bne.w	802fcca <_svfiprintf_r+0x7ee>
 802fa28:	ae11      	add	r6, sp, #68	@ 0x44
 802fa2a:	9b00      	ldr	r3, [sp, #0]
 802fa2c:	9a00      	ldr	r2, [sp, #0]
 802fa2e:	6073      	str	r3, [r6, #4]
 802fa30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fa32:	f8c6 8000 	str.w	r8, [r6]
 802fa36:	4413      	add	r3, r2
 802fa38:	9310      	str	r3, [sp, #64]	@ 0x40
 802fa3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fa3c:	3301      	adds	r3, #1
 802fa3e:	2b07      	cmp	r3, #7
 802fa40:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fa42:	f300 811c 	bgt.w	802fc7e <_svfiprintf_r+0x7a2>
 802fa46:	f106 0308 	add.w	r3, r6, #8
 802fa4a:	f019 0f04 	tst.w	r9, #4
 802fa4e:	f040 811e 	bne.w	802fc8e <_svfiprintf_r+0x7b2>
 802fa52:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802fa56:	42aa      	cmp	r2, r5
 802fa58:	bfac      	ite	ge
 802fa5a:	189b      	addge	r3, r3, r2
 802fa5c:	195b      	addlt	r3, r3, r5
 802fa5e:	9304      	str	r3, [sp, #16]
 802fa60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fa62:	b13b      	cbz	r3, 802fa74 <_svfiprintf_r+0x598>
 802fa64:	9801      	ldr	r0, [sp, #4]
 802fa66:	aa0e      	add	r2, sp, #56	@ 0x38
 802fa68:	4659      	mov	r1, fp
 802fa6a:	f7ff fcb9 	bl	802f3e0 <__ssprint_r>
 802fa6e:	2800      	cmp	r0, #0
 802fa70:	f040 812b 	bne.w	802fcca <_svfiprintf_r+0x7ee>
 802fa74:	2300      	movs	r3, #0
 802fa76:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fa78:	463d      	mov	r5, r7
 802fa7a:	ae11      	add	r6, sp, #68	@ 0x44
 802fa7c:	e557      	b.n	802f52e <_svfiprintf_r+0x52>
 802fa7e:	4640      	mov	r0, r8
 802fa80:	f7e0 fc0e 	bl	80102a0 <strlen>
 802fa84:	9000      	str	r0, [sp, #0]
 802fa86:	e732      	b.n	802f8ee <_svfiprintf_r+0x412>
 802fa88:	f049 0910 	orr.w	r9, r9, #16
 802fa8c:	f019 0320 	ands.w	r3, r9, #32
 802fa90:	d008      	beq.n	802faa4 <_svfiprintf_r+0x5c8>
 802fa92:	3507      	adds	r5, #7
 802fa94:	f025 0507 	bic.w	r5, r5, #7
 802fa98:	462f      	mov	r7, r5
 802fa9a:	686d      	ldr	r5, [r5, #4]
 802fa9c:	f857 4b08 	ldr.w	r4, [r7], #8
 802faa0:	2301      	movs	r3, #1
 802faa2:	e6d7      	b.n	802f854 <_svfiprintf_r+0x378>
 802faa4:	462f      	mov	r7, r5
 802faa6:	f019 0510 	ands.w	r5, r9, #16
 802faaa:	f857 4b04 	ldr.w	r4, [r7], #4
 802faae:	d001      	beq.n	802fab4 <_svfiprintf_r+0x5d8>
 802fab0:	461d      	mov	r5, r3
 802fab2:	e7f5      	b.n	802faa0 <_svfiprintf_r+0x5c4>
 802fab4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802fab8:	d001      	beq.n	802fabe <_svfiprintf_r+0x5e2>
 802faba:	b2a4      	uxth	r4, r4
 802fabc:	e7f0      	b.n	802faa0 <_svfiprintf_r+0x5c4>
 802fabe:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fac2:	d0ed      	beq.n	802faa0 <_svfiprintf_r+0x5c4>
 802fac4:	b2e4      	uxtb	r4, r4
 802fac6:	e7f3      	b.n	802fab0 <_svfiprintf_r+0x5d4>
 802fac8:	4a43      	ldr	r2, [pc, #268]	@ (802fbd8 <_svfiprintf_r+0x6fc>)
 802faca:	e5c6      	b.n	802f65a <_svfiprintf_r+0x17e>
 802facc:	462f      	mov	r7, r5
 802face:	f019 0510 	ands.w	r5, r9, #16
 802fad2:	f857 4b04 	ldr.w	r4, [r7], #4
 802fad6:	d001      	beq.n	802fadc <_svfiprintf_r+0x600>
 802fad8:	4615      	mov	r5, r2
 802fada:	e5ca      	b.n	802f672 <_svfiprintf_r+0x196>
 802fadc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802fae0:	d001      	beq.n	802fae6 <_svfiprintf_r+0x60a>
 802fae2:	b2a4      	uxth	r4, r4
 802fae4:	e5c5      	b.n	802f672 <_svfiprintf_r+0x196>
 802fae6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802faea:	f43f adc2 	beq.w	802f672 <_svfiprintf_r+0x196>
 802faee:	b2e4      	uxtb	r4, r4
 802faf0:	e7f2      	b.n	802fad8 <_svfiprintf_r+0x5fc>
 802faf2:	2c0a      	cmp	r4, #10
 802faf4:	f175 0300 	sbcs.w	r3, r5, #0
 802faf8:	d206      	bcs.n	802fb08 <_svfiprintf_r+0x62c>
 802fafa:	3430      	adds	r4, #48	@ 0x30
 802fafc:	b2e4      	uxtb	r4, r4
 802fafe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802fb02:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802fb06:	e129      	b.n	802fd5c <_svfiprintf_r+0x880>
 802fb08:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fb0a:	9309      	str	r3, [sp, #36]	@ 0x24
 802fb0c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802fb10:	f04f 0900 	mov.w	r9, #0
 802fb14:	930a      	str	r3, [sp, #40]	@ 0x28
 802fb16:	220a      	movs	r2, #10
 802fb18:	2300      	movs	r3, #0
 802fb1a:	4620      	mov	r0, r4
 802fb1c:	4629      	mov	r1, r5
 802fb1e:	f7e1 f91b 	bl	8010d58 <__aeabi_uldivmod>
 802fb22:	460b      	mov	r3, r1
 802fb24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802fb26:	900b      	str	r0, [sp, #44]	@ 0x2c
 802fb28:	3230      	adds	r2, #48	@ 0x30
 802fb2a:	f801 2c01 	strb.w	r2, [r1, #-1]
 802fb2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802fb30:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802fb34:	f109 0901 	add.w	r9, r9, #1
 802fb38:	b1e2      	cbz	r2, 802fb74 <_svfiprintf_r+0x698>
 802fb3a:	9a06      	ldr	r2, [sp, #24]
 802fb3c:	7812      	ldrb	r2, [r2, #0]
 802fb3e:	454a      	cmp	r2, r9
 802fb40:	d118      	bne.n	802fb74 <_svfiprintf_r+0x698>
 802fb42:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802fb46:	d015      	beq.n	802fb74 <_svfiprintf_r+0x698>
 802fb48:	2c0a      	cmp	r4, #10
 802fb4a:	f175 0200 	sbcs.w	r2, r5, #0
 802fb4e:	d311      	bcc.n	802fb74 <_svfiprintf_r+0x698>
 802fb50:	9309      	str	r3, [sp, #36]	@ 0x24
 802fb52:	9b07      	ldr	r3, [sp, #28]
 802fb54:	9908      	ldr	r1, [sp, #32]
 802fb56:	eba8 0803 	sub.w	r8, r8, r3
 802fb5a:	461a      	mov	r2, r3
 802fb5c:	4640      	mov	r0, r8
 802fb5e:	f7fc ff86 	bl	802ca6e <strncpy>
 802fb62:	9b06      	ldr	r3, [sp, #24]
 802fb64:	785a      	ldrb	r2, [r3, #1]
 802fb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fb68:	b172      	cbz	r2, 802fb88 <_svfiprintf_r+0x6ac>
 802fb6a:	9a06      	ldr	r2, [sp, #24]
 802fb6c:	3201      	adds	r2, #1
 802fb6e:	9206      	str	r2, [sp, #24]
 802fb70:	f04f 0900 	mov.w	r9, #0
 802fb74:	2c0a      	cmp	r4, #10
 802fb76:	f175 0500 	sbcs.w	r5, r5, #0
 802fb7a:	f0c0 80ef 	bcc.w	802fd5c <_svfiprintf_r+0x880>
 802fb7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802fb80:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802fb84:	461d      	mov	r5, r3
 802fb86:	e7c6      	b.n	802fb16 <_svfiprintf_r+0x63a>
 802fb88:	4691      	mov	r9, r2
 802fb8a:	e7f3      	b.n	802fb74 <_svfiprintf_r+0x698>
 802fb8c:	f004 030f 	and.w	r3, r4, #15
 802fb90:	9a05      	ldr	r2, [sp, #20]
 802fb92:	0924      	lsrs	r4, r4, #4
 802fb94:	5cd3      	ldrb	r3, [r2, r3]
 802fb96:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fb9a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802fb9e:	092d      	lsrs	r5, r5, #4
 802fba0:	ea54 0305 	orrs.w	r3, r4, r5
 802fba4:	d1f2      	bne.n	802fb8c <_svfiprintf_r+0x6b0>
 802fba6:	e0d9      	b.n	802fd5c <_svfiprintf_r+0x880>
 802fba8:	b923      	cbnz	r3, 802fbb4 <_svfiprintf_r+0x6d8>
 802fbaa:	f019 0f01 	tst.w	r9, #1
 802fbae:	d001      	beq.n	802fbb4 <_svfiprintf_r+0x6d8>
 802fbb0:	2430      	movs	r4, #48	@ 0x30
 802fbb2:	e7a4      	b.n	802fafe <_svfiprintf_r+0x622>
 802fbb4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fbb8:	e0d0      	b.n	802fd5c <_svfiprintf_r+0x880>
 802fbba:	2b00      	cmp	r3, #0
 802fbbc:	f000 80a1 	beq.w	802fd02 <_svfiprintf_r+0x826>
 802fbc0:	2400      	movs	r4, #0
 802fbc2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fbc6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fbca:	462f      	mov	r7, r5
 802fbcc:	e5e0      	b.n	802f790 <_svfiprintf_r+0x2b4>
 802fbce:	bf00      	nop
 802fbd0:	0803c1bf 	.word	0x0803c1bf
 802fbd4:	0803c1af 	.word	0x0803c1af
 802fbd8:	0803bc9c 	.word	0x0803bc9c
 802fbdc:	2110      	movs	r1, #16
 802fbde:	6071      	str	r1, [r6, #4]
 802fbe0:	2a07      	cmp	r2, #7
 802fbe2:	4461      	add	r1, ip
 802fbe4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fbe8:	dd08      	ble.n	802fbfc <_svfiprintf_r+0x720>
 802fbea:	9801      	ldr	r0, [sp, #4]
 802fbec:	aa0e      	add	r2, sp, #56	@ 0x38
 802fbee:	4659      	mov	r1, fp
 802fbf0:	f7ff fbf6 	bl	802f3e0 <__ssprint_r>
 802fbf4:	2800      	cmp	r0, #0
 802fbf6:	d168      	bne.n	802fcca <_svfiprintf_r+0x7ee>
 802fbf8:	4b5c      	ldr	r3, [pc, #368]	@ (802fd6c <_svfiprintf_r+0x890>)
 802fbfa:	a811      	add	r0, sp, #68	@ 0x44
 802fbfc:	f1aa 0a10 	sub.w	sl, sl, #16
 802fc00:	4606      	mov	r6, r0
 802fc02:	e68d      	b.n	802f920 <_svfiprintf_r+0x444>
 802fc04:	4606      	mov	r6, r0
 802fc06:	e6a8      	b.n	802f95a <_svfiprintf_r+0x47e>
 802fc08:	9801      	ldr	r0, [sp, #4]
 802fc0a:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc0c:	4659      	mov	r1, fp
 802fc0e:	f7ff fbe7 	bl	802f3e0 <__ssprint_r>
 802fc12:	2800      	cmp	r0, #0
 802fc14:	d159      	bne.n	802fcca <_svfiprintf_r+0x7ee>
 802fc16:	ae11      	add	r6, sp, #68	@ 0x44
 802fc18:	e6b1      	b.n	802f97e <_svfiprintf_r+0x4a2>
 802fc1a:	9801      	ldr	r0, [sp, #4]
 802fc1c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc1e:	4659      	mov	r1, fp
 802fc20:	f7ff fbde 	bl	802f3e0 <__ssprint_r>
 802fc24:	2800      	cmp	r0, #0
 802fc26:	d150      	bne.n	802fcca <_svfiprintf_r+0x7ee>
 802fc28:	ae11      	add	r6, sp, #68	@ 0x44
 802fc2a:	e6b8      	b.n	802f99e <_svfiprintf_r+0x4c2>
 802fc2c:	2110      	movs	r1, #16
 802fc2e:	6071      	str	r1, [r6, #4]
 802fc30:	2a07      	cmp	r2, #7
 802fc32:	4461      	add	r1, ip
 802fc34:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fc38:	dd08      	ble.n	802fc4c <_svfiprintf_r+0x770>
 802fc3a:	9801      	ldr	r0, [sp, #4]
 802fc3c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc3e:	4659      	mov	r1, fp
 802fc40:	f7ff fbce 	bl	802f3e0 <__ssprint_r>
 802fc44:	2800      	cmp	r0, #0
 802fc46:	d140      	bne.n	802fcca <_svfiprintf_r+0x7ee>
 802fc48:	4b49      	ldr	r3, [pc, #292]	@ (802fd70 <_svfiprintf_r+0x894>)
 802fc4a:	a811      	add	r0, sp, #68	@ 0x44
 802fc4c:	f1aa 0a10 	sub.w	sl, sl, #16
 802fc50:	4606      	mov	r6, r0
 802fc52:	e6ae      	b.n	802f9b2 <_svfiprintf_r+0x4d6>
 802fc54:	4606      	mov	r6, r0
 802fc56:	e6c9      	b.n	802f9ec <_svfiprintf_r+0x510>
 802fc58:	2010      	movs	r0, #16
 802fc5a:	4402      	add	r2, r0
 802fc5c:	2b07      	cmp	r3, #7
 802fc5e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fc62:	6070      	str	r0, [r6, #4]
 802fc64:	dd06      	ble.n	802fc74 <_svfiprintf_r+0x798>
 802fc66:	9801      	ldr	r0, [sp, #4]
 802fc68:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc6a:	4659      	mov	r1, fp
 802fc6c:	f7ff fbb8 	bl	802f3e0 <__ssprint_r>
 802fc70:	bb58      	cbnz	r0, 802fcca <_svfiprintf_r+0x7ee>
 802fc72:	a911      	add	r1, sp, #68	@ 0x44
 802fc74:	3c10      	subs	r4, #16
 802fc76:	460e      	mov	r6, r1
 802fc78:	e6bc      	b.n	802f9f4 <_svfiprintf_r+0x518>
 802fc7a:	460e      	mov	r6, r1
 802fc7c:	e6d5      	b.n	802fa2a <_svfiprintf_r+0x54e>
 802fc7e:	9801      	ldr	r0, [sp, #4]
 802fc80:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc82:	4659      	mov	r1, fp
 802fc84:	f7ff fbac 	bl	802f3e0 <__ssprint_r>
 802fc88:	b9f8      	cbnz	r0, 802fcca <_svfiprintf_r+0x7ee>
 802fc8a:	ab11      	add	r3, sp, #68	@ 0x44
 802fc8c:	e6dd      	b.n	802fa4a <_svfiprintf_r+0x56e>
 802fc8e:	9a03      	ldr	r2, [sp, #12]
 802fc90:	1b54      	subs	r4, r2, r5
 802fc92:	2c00      	cmp	r4, #0
 802fc94:	f77f aedd 	ble.w	802fa52 <_svfiprintf_r+0x576>
 802fc98:	4e34      	ldr	r6, [pc, #208]	@ (802fd6c <_svfiprintf_r+0x890>)
 802fc9a:	f04f 0810 	mov.w	r8, #16
 802fc9e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802fca2:	2c10      	cmp	r4, #16
 802fca4:	f102 0201 	add.w	r2, r2, #1
 802fca8:	601e      	str	r6, [r3, #0]
 802fcaa:	dc17      	bgt.n	802fcdc <_svfiprintf_r+0x800>
 802fcac:	605c      	str	r4, [r3, #4]
 802fcae:	2a07      	cmp	r2, #7
 802fcb0:	440c      	add	r4, r1
 802fcb2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802fcb6:	f77f aecc 	ble.w	802fa52 <_svfiprintf_r+0x576>
 802fcba:	9801      	ldr	r0, [sp, #4]
 802fcbc:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcbe:	4659      	mov	r1, fp
 802fcc0:	f7ff fb8e 	bl	802f3e0 <__ssprint_r>
 802fcc4:	2800      	cmp	r0, #0
 802fcc6:	f43f aec4 	beq.w	802fa52 <_svfiprintf_r+0x576>
 802fcca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802fcce:	065b      	lsls	r3, r3, #25
 802fcd0:	f53f ac1c 	bmi.w	802f50c <_svfiprintf_r+0x30>
 802fcd4:	9804      	ldr	r0, [sp, #16]
 802fcd6:	b03b      	add	sp, #236	@ 0xec
 802fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fcdc:	3110      	adds	r1, #16
 802fcde:	2a07      	cmp	r2, #7
 802fce0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fce4:	f8c3 8004 	str.w	r8, [r3, #4]
 802fce8:	dc02      	bgt.n	802fcf0 <_svfiprintf_r+0x814>
 802fcea:	3308      	adds	r3, #8
 802fcec:	3c10      	subs	r4, #16
 802fcee:	e7d6      	b.n	802fc9e <_svfiprintf_r+0x7c2>
 802fcf0:	9801      	ldr	r0, [sp, #4]
 802fcf2:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcf4:	4659      	mov	r1, fp
 802fcf6:	f7ff fb73 	bl	802f3e0 <__ssprint_r>
 802fcfa:	2800      	cmp	r0, #0
 802fcfc:	d1e5      	bne.n	802fcca <_svfiprintf_r+0x7ee>
 802fcfe:	ab11      	add	r3, sp, #68	@ 0x44
 802fd00:	e7f4      	b.n	802fcec <_svfiprintf_r+0x810>
 802fd02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fd04:	2b00      	cmp	r3, #0
 802fd06:	d0e0      	beq.n	802fcca <_svfiprintf_r+0x7ee>
 802fd08:	9801      	ldr	r0, [sp, #4]
 802fd0a:	aa0e      	add	r2, sp, #56	@ 0x38
 802fd0c:	4659      	mov	r1, fp
 802fd0e:	f7ff fb67 	bl	802f3e0 <__ssprint_r>
 802fd12:	e7da      	b.n	802fcca <_svfiprintf_r+0x7ee>
 802fd14:	ea54 0205 	orrs.w	r2, r4, r5
 802fd18:	46ca      	mov	sl, r9
 802fd1a:	f43f adac 	beq.w	802f876 <_svfiprintf_r+0x39a>
 802fd1e:	2b01      	cmp	r3, #1
 802fd20:	f43f aee7 	beq.w	802faf2 <_svfiprintf_r+0x616>
 802fd24:	2b02      	cmp	r3, #2
 802fd26:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fd2a:	f43f af2f 	beq.w	802fb8c <_svfiprintf_r+0x6b0>
 802fd2e:	f004 0307 	and.w	r3, r4, #7
 802fd32:	08e4      	lsrs	r4, r4, #3
 802fd34:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802fd38:	08ed      	lsrs	r5, r5, #3
 802fd3a:	3330      	adds	r3, #48	@ 0x30
 802fd3c:	ea54 0105 	orrs.w	r1, r4, r5
 802fd40:	4642      	mov	r2, r8
 802fd42:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fd46:	d1f2      	bne.n	802fd2e <_svfiprintf_r+0x852>
 802fd48:	f01a 0f01 	tst.w	sl, #1
 802fd4c:	d006      	beq.n	802fd5c <_svfiprintf_r+0x880>
 802fd4e:	2b30      	cmp	r3, #48	@ 0x30
 802fd50:	d004      	beq.n	802fd5c <_svfiprintf_r+0x880>
 802fd52:	2330      	movs	r3, #48	@ 0x30
 802fd54:	f808 3c01 	strb.w	r3, [r8, #-1]
 802fd58:	f1a2 0802 	sub.w	r8, r2, #2
 802fd5c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fd5e:	eba3 0308 	sub.w	r3, r3, r8
 802fd62:	9c00      	ldr	r4, [sp, #0]
 802fd64:	9300      	str	r3, [sp, #0]
 802fd66:	46d1      	mov	r9, sl
 802fd68:	e5c2      	b.n	802f8f0 <_svfiprintf_r+0x414>
 802fd6a:	bf00      	nop
 802fd6c:	0803c1bf 	.word	0x0803c1bf
 802fd70:	0803c1af 	.word	0x0803c1af

0802fd74 <_sungetc_r>:
 802fd74:	b538      	push	{r3, r4, r5, lr}
 802fd76:	1c4b      	adds	r3, r1, #1
 802fd78:	4614      	mov	r4, r2
 802fd7a:	d103      	bne.n	802fd84 <_sungetc_r+0x10>
 802fd7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802fd80:	4628      	mov	r0, r5
 802fd82:	bd38      	pop	{r3, r4, r5, pc}
 802fd84:	8993      	ldrh	r3, [r2, #12]
 802fd86:	f023 0320 	bic.w	r3, r3, #32
 802fd8a:	8193      	strh	r3, [r2, #12]
 802fd8c:	6853      	ldr	r3, [r2, #4]
 802fd8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802fd90:	b2cd      	uxtb	r5, r1
 802fd92:	b18a      	cbz	r2, 802fdb8 <_sungetc_r+0x44>
 802fd94:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802fd96:	429a      	cmp	r2, r3
 802fd98:	dd08      	ble.n	802fdac <_sungetc_r+0x38>
 802fd9a:	6823      	ldr	r3, [r4, #0]
 802fd9c:	1e5a      	subs	r2, r3, #1
 802fd9e:	6022      	str	r2, [r4, #0]
 802fda0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802fda4:	6863      	ldr	r3, [r4, #4]
 802fda6:	3301      	adds	r3, #1
 802fda8:	6063      	str	r3, [r4, #4]
 802fdaa:	e7e9      	b.n	802fd80 <_sungetc_r+0xc>
 802fdac:	4621      	mov	r1, r4
 802fdae:	f005 f8a7 	bl	8034f00 <__submore>
 802fdb2:	2800      	cmp	r0, #0
 802fdb4:	d0f1      	beq.n	802fd9a <_sungetc_r+0x26>
 802fdb6:	e7e1      	b.n	802fd7c <_sungetc_r+0x8>
 802fdb8:	6921      	ldr	r1, [r4, #16]
 802fdba:	6822      	ldr	r2, [r4, #0]
 802fdbc:	b141      	cbz	r1, 802fdd0 <_sungetc_r+0x5c>
 802fdbe:	4291      	cmp	r1, r2
 802fdc0:	d206      	bcs.n	802fdd0 <_sungetc_r+0x5c>
 802fdc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802fdc6:	42a9      	cmp	r1, r5
 802fdc8:	d102      	bne.n	802fdd0 <_sungetc_r+0x5c>
 802fdca:	3a01      	subs	r2, #1
 802fdcc:	6022      	str	r2, [r4, #0]
 802fdce:	e7ea      	b.n	802fda6 <_sungetc_r+0x32>
 802fdd0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802fdd4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fdd8:	6323      	str	r3, [r4, #48]	@ 0x30
 802fdda:	2303      	movs	r3, #3
 802fddc:	6363      	str	r3, [r4, #52]	@ 0x34
 802fdde:	4623      	mov	r3, r4
 802fde0:	f803 5f42 	strb.w	r5, [r3, #66]!
 802fde4:	6023      	str	r3, [r4, #0]
 802fde6:	2301      	movs	r3, #1
 802fde8:	e7de      	b.n	802fda8 <_sungetc_r+0x34>

0802fdea <__ssrefill_r>:
 802fdea:	b510      	push	{r4, lr}
 802fdec:	460c      	mov	r4, r1
 802fdee:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802fdf0:	b169      	cbz	r1, 802fe0e <__ssrefill_r+0x24>
 802fdf2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fdf6:	4299      	cmp	r1, r3
 802fdf8:	d001      	beq.n	802fdfe <__ssrefill_r+0x14>
 802fdfa:	f7fe ff2f 	bl	802ec5c <_free_r>
 802fdfe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802fe00:	6063      	str	r3, [r4, #4]
 802fe02:	2000      	movs	r0, #0
 802fe04:	6320      	str	r0, [r4, #48]	@ 0x30
 802fe06:	b113      	cbz	r3, 802fe0e <__ssrefill_r+0x24>
 802fe08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802fe0a:	6023      	str	r3, [r4, #0]
 802fe0c:	bd10      	pop	{r4, pc}
 802fe0e:	6923      	ldr	r3, [r4, #16]
 802fe10:	6023      	str	r3, [r4, #0]
 802fe12:	2300      	movs	r3, #0
 802fe14:	6063      	str	r3, [r4, #4]
 802fe16:	89a3      	ldrh	r3, [r4, #12]
 802fe18:	f043 0320 	orr.w	r3, r3, #32
 802fe1c:	81a3      	strh	r3, [r4, #12]
 802fe1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fe22:	e7f3      	b.n	802fe0c <__ssrefill_r+0x22>

0802fe24 <_sfread_r>:
 802fe24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fe28:	461f      	mov	r7, r3
 802fe2a:	4613      	mov	r3, r2
 802fe2c:	437b      	muls	r3, r7
 802fe2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802fe30:	9000      	str	r0, [sp, #0]
 802fe32:	4688      	mov	r8, r1
 802fe34:	4691      	mov	r9, r2
 802fe36:	d028      	beq.n	802fe8a <_sfread_r+0x66>
 802fe38:	461e      	mov	r6, r3
 802fe3a:	f04f 0b00 	mov.w	fp, #0
 802fe3e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802fe42:	42b5      	cmp	r5, r6
 802fe44:	d30b      	bcc.n	802fe5e <_sfread_r+0x3a>
 802fe46:	4632      	mov	r2, r6
 802fe48:	4640      	mov	r0, r8
 802fe4a:	f7fe f805 	bl	802de58 <memcpy>
 802fe4e:	6862      	ldr	r2, [r4, #4]
 802fe50:	6821      	ldr	r1, [r4, #0]
 802fe52:	1b92      	subs	r2, r2, r6
 802fe54:	4431      	add	r1, r6
 802fe56:	6062      	str	r2, [r4, #4]
 802fe58:	6021      	str	r1, [r4, #0]
 802fe5a:	463b      	mov	r3, r7
 802fe5c:	e015      	b.n	802fe8a <_sfread_r+0x66>
 802fe5e:	462a      	mov	r2, r5
 802fe60:	4640      	mov	r0, r8
 802fe62:	9301      	str	r3, [sp, #4]
 802fe64:	f7fd fff8 	bl	802de58 <memcpy>
 802fe68:	6822      	ldr	r2, [r4, #0]
 802fe6a:	9800      	ldr	r0, [sp, #0]
 802fe6c:	442a      	add	r2, r5
 802fe6e:	e9c4 2b00 	strd	r2, fp, [r4]
 802fe72:	4621      	mov	r1, r4
 802fe74:	f7ff ffb9 	bl	802fdea <__ssrefill_r>
 802fe78:	44a8      	add	r8, r5
 802fe7a:	9b01      	ldr	r3, [sp, #4]
 802fe7c:	eba6 0a05 	sub.w	sl, r6, r5
 802fe80:	b138      	cbz	r0, 802fe92 <_sfread_r+0x6e>
 802fe82:	441d      	add	r5, r3
 802fe84:	1bad      	subs	r5, r5, r6
 802fe86:	fbb5 f3f9 	udiv	r3, r5, r9
 802fe8a:	4618      	mov	r0, r3
 802fe8c:	b003      	add	sp, #12
 802fe8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fe92:	4656      	mov	r6, sl
 802fe94:	e7d3      	b.n	802fe3e <_sfread_r+0x1a>
	...

0802fe98 <__ssvfiscanf_r>:
 802fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fe9c:	b0df      	sub	sp, #380	@ 0x17c
 802fe9e:	af02      	add	r7, sp, #8
 802fea0:	460c      	mov	r4, r1
 802fea2:	623b      	str	r3, [r7, #32]
 802fea4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802fea8:	6278      	str	r0, [r7, #36]	@ 0x24
 802feaa:	049d      	lsls	r5, r3, #18
 802feac:	60ba      	str	r2, [r7, #8]
 802feae:	d406      	bmi.n	802febe <__ssvfiscanf_r+0x26>
 802feb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802feb4:	818b      	strh	r3, [r1, #12]
 802feb6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802feb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802febc:	664b      	str	r3, [r1, #100]	@ 0x64
 802febe:	2300      	movs	r3, #0
 802fec0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802fec4:	60fb      	str	r3, [r7, #12]
 802fec6:	469b      	mov	fp, r3
 802fec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802feca:	61fb      	str	r3, [r7, #28]
 802fecc:	e005      	b.n	802feda <__ssvfiscanf_r+0x42>
 802fece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fed0:	4621      	mov	r1, r4
 802fed2:	f7ff ff8a 	bl	802fdea <__ssrefill_r>
 802fed6:	b168      	cbz	r0, 802fef4 <__ssvfiscanf_r+0x5c>
 802fed8:	60bd      	str	r5, [r7, #8]
 802feda:	68bd      	ldr	r5, [r7, #8]
 802fedc:	f815 3b01 	ldrb.w	r3, [r5], #1
 802fee0:	637b      	str	r3, [r7, #52]	@ 0x34
 802fee2:	b333      	cbz	r3, 802ff32 <__ssvfiscanf_r+0x9a>
 802fee4:	4a75      	ldr	r2, [pc, #468]	@ (80300bc <__ssvfiscanf_r+0x224>)
 802fee6:	5cd6      	ldrb	r6, [r2, r3]
 802fee8:	f016 0608 	ands.w	r6, r6, #8
 802feec:	d011      	beq.n	802ff12 <__ssvfiscanf_r+0x7a>
 802feee:	6863      	ldr	r3, [r4, #4]
 802fef0:	2b00      	cmp	r3, #0
 802fef2:	ddec      	ble.n	802fece <__ssvfiscanf_r+0x36>
 802fef4:	6823      	ldr	r3, [r4, #0]
 802fef6:	4971      	ldr	r1, [pc, #452]	@ (80300bc <__ssvfiscanf_r+0x224>)
 802fef8:	781a      	ldrb	r2, [r3, #0]
 802fefa:	5c8a      	ldrb	r2, [r1, r2]
 802fefc:	0710      	lsls	r0, r2, #28
 802fefe:	d5eb      	bpl.n	802fed8 <__ssvfiscanf_r+0x40>
 802ff00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ff02:	3201      	adds	r2, #1
 802ff04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802ff06:	6862      	ldr	r2, [r4, #4]
 802ff08:	3301      	adds	r3, #1
 802ff0a:	3a01      	subs	r2, #1
 802ff0c:	6062      	str	r2, [r4, #4]
 802ff0e:	6023      	str	r3, [r4, #0]
 802ff10:	e7ed      	b.n	802feee <__ssvfiscanf_r+0x56>
 802ff12:	2b25      	cmp	r3, #37	@ 0x25
 802ff14:	d15f      	bne.n	802ffd6 <__ssvfiscanf_r+0x13e>
 802ff16:	62be      	str	r6, [r7, #40]	@ 0x28
 802ff18:	462a      	mov	r2, r5
 802ff1a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ff1e:	60ba      	str	r2, [r7, #8]
 802ff20:	2b7a      	cmp	r3, #122	@ 0x7a
 802ff22:	d806      	bhi.n	802ff32 <__ssvfiscanf_r+0x9a>
 802ff24:	2b42      	cmp	r3, #66	@ 0x42
 802ff26:	d809      	bhi.n	802ff3c <__ssvfiscanf_r+0xa4>
 802ff28:	2b2a      	cmp	r3, #42	@ 0x2a
 802ff2a:	d079      	beq.n	8030020 <__ssvfiscanf_r+0x188>
 802ff2c:	d844      	bhi.n	802ffb8 <__ssvfiscanf_r+0x120>
 802ff2e:	2b25      	cmp	r3, #37	@ 0x25
 802ff30:	d050      	beq.n	802ffd4 <__ssvfiscanf_r+0x13c>
 802ff32:	f1bb 0f00 	cmp.w	fp, #0
 802ff36:	f000 810e 	beq.w	8030156 <__ssvfiscanf_r+0x2be>
 802ff3a:	e107      	b.n	803014c <__ssvfiscanf_r+0x2b4>
 802ff3c:	3b43      	subs	r3, #67	@ 0x43
 802ff3e:	2b37      	cmp	r3, #55	@ 0x37
 802ff40:	f200 80fd 	bhi.w	803013e <__ssvfiscanf_r+0x2a6>
 802ff44:	e8df f013 	tbh	[pc, r3, lsl #1]
 802ff48:	00a40117 	.word	0x00a40117
 802ff4c:	00fb00fb 	.word	0x00fb00fb
 802ff50:	00fb00fb 	.word	0x00fb00fb
 802ff54:	00fb00fb 	.word	0x00fb00fb
 802ff58:	008e00fb 	.word	0x008e00fb
 802ff5c:	00fb00fb 	.word	0x00fb00fb
 802ff60:	00fb00a8 	.word	0x00fb00a8
 802ff64:	00fb00fb 	.word	0x00fb00fb
 802ff68:	00fb00c0 	.word	0x00fb00c0
 802ff6c:	00fb00fb 	.word	0x00fb00fb
 802ff70:	00b400fb 	.word	0x00b400fb
 802ff74:	00fb00fb 	.word	0x00fb00fb
 802ff78:	00fb010d 	.word	0x00fb010d
 802ff7c:	00fb00fb 	.word	0x00fb00fb
 802ff80:	00fb00fb 	.word	0x00fb00fb
 802ff84:	00fb00fb 	.word	0x00fb00fb
 802ff88:	00a60119 	.word	0x00a60119
 802ff8c:	00fb00fb 	.word	0x00fb00fb
 802ff90:	008100fb 	.word	0x008100fb
 802ff94:	008e013e 	.word	0x008e013e
 802ff98:	007300fb 	.word	0x007300fb
 802ff9c:	01200095 	.word	0x01200095
 802ffa0:	011d00aa 	.word	0x011d00aa
 802ffa4:	00fb00fb 	.word	0x00fb00fb
 802ffa8:	009200c2 	.word	0x009200c2
 802ffac:	00fb00b0 	.word	0x00fb00b0
 802ffb0:	00b400fb 	.word	0x00b400fb
 802ffb4:	009200fb 	.word	0x009200fb
 802ffb8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802ffbc:	2a09      	cmp	r2, #9
 802ffbe:	d8b8      	bhi.n	802ff32 <__ssvfiscanf_r+0x9a>
 802ffc0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802ffc4:	d1b5      	bne.n	802ff32 <__ssvfiscanf_r+0x9a>
 802ffc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802ffc8:	220a      	movs	r2, #10
 802ffca:	fb02 3301 	mla	r3, r2, r1, r3
 802ffce:	3b30      	subs	r3, #48	@ 0x30
 802ffd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 802ffd2:	e02a      	b.n	803002a <__ssvfiscanf_r+0x192>
 802ffd4:	68bd      	ldr	r5, [r7, #8]
 802ffd6:	6863      	ldr	r3, [r4, #4]
 802ffd8:	2b00      	cmp	r3, #0
 802ffda:	dd0e      	ble.n	802fffa <__ssvfiscanf_r+0x162>
 802ffdc:	6823      	ldr	r3, [r4, #0]
 802ffde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802ffe2:	7819      	ldrb	r1, [r3, #0]
 802ffe4:	4291      	cmp	r1, r2
 802ffe6:	d1a4      	bne.n	802ff32 <__ssvfiscanf_r+0x9a>
 802ffe8:	3301      	adds	r3, #1
 802ffea:	6862      	ldr	r2, [r4, #4]
 802ffec:	6023      	str	r3, [r4, #0]
 802ffee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fff0:	3a01      	subs	r2, #1
 802fff2:	3301      	adds	r3, #1
 802fff4:	6062      	str	r2, [r4, #4]
 802fff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fff8:	e76e      	b.n	802fed8 <__ssvfiscanf_r+0x40>
 802fffa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fffc:	4621      	mov	r1, r4
 802fffe:	f7ff fef4 	bl	802fdea <__ssrefill_r>
 8030002:	2800      	cmp	r0, #0
 8030004:	d0ea      	beq.n	802ffdc <__ssvfiscanf_r+0x144>
 8030006:	69fb      	ldr	r3, [r7, #28]
 8030008:	b113      	cbz	r3, 8030010 <__ssvfiscanf_r+0x178>
 803000a:	89a3      	ldrh	r3, [r4, #12]
 803000c:	065b      	lsls	r3, r3, #25
 803000e:	d590      	bpl.n	802ff32 <__ssvfiscanf_r+0x9a>
 8030010:	f1bb 0f00 	cmp.w	fp, #0
 8030014:	f040 8654 	bne.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803001c:	61fb      	str	r3, [r7, #28]
 803001e:	e09a      	b.n	8030156 <__ssvfiscanf_r+0x2be>
 8030020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030022:	4333      	orrs	r3, r6
 8030024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030026:	d184      	bne.n	802ff32 <__ssvfiscanf_r+0x9a>
 8030028:	2610      	movs	r6, #16
 803002a:	68bd      	ldr	r5, [r7, #8]
 803002c:	e774      	b.n	802ff18 <__ssvfiscanf_r+0x80>
 803002e:	0731      	lsls	r1, r6, #28
 8030030:	f47f af7f 	bne.w	802ff32 <__ssvfiscanf_r+0x9a>
 8030034:	786b      	ldrb	r3, [r5, #1]
 8030036:	2b6c      	cmp	r3, #108	@ 0x6c
 8030038:	d104      	bne.n	8030044 <__ssvfiscanf_r+0x1ac>
 803003a:	1cab      	adds	r3, r5, #2
 803003c:	60bb      	str	r3, [r7, #8]
 803003e:	f046 0602 	orr.w	r6, r6, #2
 8030042:	e7f2      	b.n	803002a <__ssvfiscanf_r+0x192>
 8030044:	f046 0601 	orr.w	r6, r6, #1
 8030048:	e7ef      	b.n	803002a <__ssvfiscanf_r+0x192>
 803004a:	0732      	lsls	r2, r6, #28
 803004c:	f47f af71 	bne.w	802ff32 <__ssvfiscanf_r+0x9a>
 8030050:	786b      	ldrb	r3, [r5, #1]
 8030052:	2b68      	cmp	r3, #104	@ 0x68
 8030054:	bf03      	ittte	eq
 8030056:	1cab      	addeq	r3, r5, #2
 8030058:	60bb      	streq	r3, [r7, #8]
 803005a:	f046 0608 	orreq.w	r6, r6, #8
 803005e:	f046 0604 	orrne.w	r6, r6, #4
 8030062:	e7e2      	b.n	803002a <__ssvfiscanf_r+0x192>
 8030064:	0733      	lsls	r3, r6, #28
 8030066:	f47f af64 	bne.w	802ff32 <__ssvfiscanf_r+0x9a>
 803006a:	e7e8      	b.n	803003e <__ssvfiscanf_r+0x1a6>
 803006c:	0735      	lsls	r5, r6, #28
 803006e:	d0dc      	beq.n	803002a <__ssvfiscanf_r+0x192>
 8030070:	e75f      	b.n	802ff32 <__ssvfiscanf_r+0x9a>
 8030072:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8030076:	f47f af5c 	bne.w	802ff32 <__ssvfiscanf_r+0x9a>
 803007a:	f1bb 0f00 	cmp.w	fp, #0
 803007e:	d104      	bne.n	803008a <__ssvfiscanf_r+0x1f2>
 8030080:	b082      	sub	sp, #8
 8030082:	f10d 0b08 	add.w	fp, sp, #8
 8030086:	e9cb 3300 	strd	r3, r3, [fp]
 803008a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803008e:	e7cc      	b.n	803002a <__ssvfiscanf_r+0x192>
 8030090:	f046 0601 	orr.w	r6, r6, #1
 8030094:	4b0a      	ldr	r3, [pc, #40]	@ (80300c0 <__ssvfiscanf_r+0x228>)
 8030096:	e008      	b.n	80300aa <__ssvfiscanf_r+0x212>
 8030098:	f046 0601 	orr.w	r6, r6, #1
 803009c:	4b09      	ldr	r3, [pc, #36]	@ (80300c4 <__ssvfiscanf_r+0x22c>)
 803009e:	60fb      	str	r3, [r7, #12]
 80300a0:	2308      	movs	r3, #8
 80300a2:	617b      	str	r3, [r7, #20]
 80300a4:	2503      	movs	r5, #3
 80300a6:	e012      	b.n	80300ce <__ssvfiscanf_r+0x236>
 80300a8:	4b06      	ldr	r3, [pc, #24]	@ (80300c4 <__ssvfiscanf_r+0x22c>)
 80300aa:	60fb      	str	r3, [r7, #12]
 80300ac:	230a      	movs	r3, #10
 80300ae:	e7f8      	b.n	80300a2 <__ssvfiscanf_r+0x20a>
 80300b0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80300b4:	4b03      	ldr	r3, [pc, #12]	@ (80300c4 <__ssvfiscanf_r+0x22c>)
 80300b6:	60fb      	str	r3, [r7, #12]
 80300b8:	2310      	movs	r3, #16
 80300ba:	e7f2      	b.n	80300a2 <__ssvfiscanf_r+0x20a>
 80300bc:	0803c039 	.word	0x0803c039
 80300c0:	0802c0e9 	.word	0x0802c0e9
 80300c4:	08034ee9 	.word	0x08034ee9
 80300c8:	f046 0601 	orr.w	r6, r6, #1
 80300cc:	2502      	movs	r5, #2
 80300ce:	6863      	ldr	r3, [r4, #4]
 80300d0:	2b00      	cmp	r3, #0
 80300d2:	dd7b      	ble.n	80301cc <__ssvfiscanf_r+0x334>
 80300d4:	0671      	lsls	r1, r6, #25
 80300d6:	d407      	bmi.n	80300e8 <__ssvfiscanf_r+0x250>
 80300d8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8030464 <__ssvfiscanf_r+0x5cc>
 80300dc:	6823      	ldr	r3, [r4, #0]
 80300de:	781a      	ldrb	r2, [r3, #0]
 80300e0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80300e4:	0712      	lsls	r2, r2, #28
 80300e6:	d479      	bmi.n	80301dc <__ssvfiscanf_r+0x344>
 80300e8:	2d02      	cmp	r5, #2
 80300ea:	f000 836f 	beq.w	80307cc <__ssvfiscanf_r+0x934>
 80300ee:	2d03      	cmp	r5, #3
 80300f0:	f000 84f6 	beq.w	8030ae0 <__ssvfiscanf_r+0xc48>
 80300f4:	f006 0310 	and.w	r3, r6, #16
 80300f8:	2d01      	cmp	r5, #1
 80300fa:	613b      	str	r3, [r7, #16]
 80300fc:	f006 0501 	and.w	r5, r6, #1
 8030100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030102:	f000 81b1 	beq.w	8030468 <__ssvfiscanf_r+0x5d0>
 8030106:	2b01      	cmp	r3, #1
 8030108:	bf38      	it	cc
 803010a:	2301      	movcc	r3, #1
 803010c:	4698      	mov	r8, r3
 803010e:	693b      	ldr	r3, [r7, #16]
 8030110:	2d00      	cmp	r5, #0
 8030112:	f000 813b 	beq.w	803038c <__ssvfiscanf_r+0x4f4>
 8030116:	2b00      	cmp	r3, #0
 8030118:	f040 80d8 	bne.w	80302cc <__ssvfiscanf_r+0x434>
 803011c:	6a3b      	ldr	r3, [r7, #32]
 803011e:	0636      	lsls	r6, r6, #24
 8030120:	f853 5b04 	ldr.w	r5, [r3], #4
 8030124:	623b      	str	r3, [r7, #32]
 8030126:	f140 80d7 	bpl.w	80302d8 <__ssvfiscanf_r+0x440>
 803012a:	b145      	cbz	r5, 803013e <__ssvfiscanf_r+0x2a6>
 803012c:	2080      	movs	r0, #128	@ 0x80
 803012e:	f7fe fe9d 	bl	802ee6c <malloc>
 8030132:	4606      	mov	r6, r0
 8030134:	2800      	cmp	r0, #0
 8030136:	d164      	bne.n	8030202 <__ssvfiscanf_r+0x36a>
 8030138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803013c:	61fb      	str	r3, [r7, #28]
 803013e:	f1bb 0f00 	cmp.w	fp, #0
 8030142:	d008      	beq.n	8030156 <__ssvfiscanf_r+0x2be>
 8030144:	69fb      	ldr	r3, [r7, #28]
 8030146:	3301      	adds	r3, #1
 8030148:	f000 85ba 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 803014c:	f8db 0000 	ldr.w	r0, [fp]
 8030150:	b108      	cbz	r0, 8030156 <__ssvfiscanf_r+0x2be>
 8030152:	f7fe fe93 	bl	802ee7c <free>
 8030156:	69f8      	ldr	r0, [r7, #28]
 8030158:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 803015c:	46bd      	mov	sp, r7
 803015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030162:	68b9      	ldr	r1, [r7, #8]
 8030164:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8030168:	f003 fe67 	bl	8033e3a <__sccl>
 803016c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8030170:	60b8      	str	r0, [r7, #8]
 8030172:	2501      	movs	r5, #1
 8030174:	e7ab      	b.n	80300ce <__ssvfiscanf_r+0x236>
 8030176:	f046 0601 	orr.w	r6, r6, #1
 803017a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803017e:	2500      	movs	r5, #0
 8030180:	e7a5      	b.n	80300ce <__ssvfiscanf_r+0x236>
 8030182:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030186:	e795      	b.n	80300b4 <__ssvfiscanf_r+0x21c>
 8030188:	06f0      	lsls	r0, r6, #27
 803018a:	f53f aea6 	bmi.w	802feda <__ssvfiscanf_r+0x42>
 803018e:	6a3a      	ldr	r2, [r7, #32]
 8030190:	0731      	lsls	r1, r6, #28
 8030192:	f852 3b04 	ldr.w	r3, [r2], #4
 8030196:	623a      	str	r2, [r7, #32]
 8030198:	d502      	bpl.n	80301a0 <__ssvfiscanf_r+0x308>
 803019a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803019c:	701a      	strb	r2, [r3, #0]
 803019e:	e69c      	b.n	802feda <__ssvfiscanf_r+0x42>
 80301a0:	0772      	lsls	r2, r6, #29
 80301a2:	d502      	bpl.n	80301aa <__ssvfiscanf_r+0x312>
 80301a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301a6:	801a      	strh	r2, [r3, #0]
 80301a8:	e697      	b.n	802feda <__ssvfiscanf_r+0x42>
 80301aa:	07f5      	lsls	r5, r6, #31
 80301ac:	d502      	bpl.n	80301b4 <__ssvfiscanf_r+0x31c>
 80301ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301b0:	601a      	str	r2, [r3, #0]
 80301b2:	e692      	b.n	802feda <__ssvfiscanf_r+0x42>
 80301b4:	07b0      	lsls	r0, r6, #30
 80301b6:	d5fa      	bpl.n	80301ae <__ssvfiscanf_r+0x316>
 80301b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80301bc:	17d2      	asrs	r2, r2, #31
 80301be:	e9c3 1200 	strd	r1, r2, [r3]
 80301c2:	e68a      	b.n	802feda <__ssvfiscanf_r+0x42>
 80301c4:	4ba6      	ldr	r3, [pc, #664]	@ (8030460 <__ssvfiscanf_r+0x5c8>)
 80301c6:	60fb      	str	r3, [r7, #12]
 80301c8:	2300      	movs	r3, #0
 80301ca:	e76a      	b.n	80300a2 <__ssvfiscanf_r+0x20a>
 80301cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301ce:	4621      	mov	r1, r4
 80301d0:	f7ff fe0b 	bl	802fdea <__ssrefill_r>
 80301d4:	2800      	cmp	r0, #0
 80301d6:	f43f af7d 	beq.w	80300d4 <__ssvfiscanf_r+0x23c>
 80301da:	e714      	b.n	8030006 <__ssvfiscanf_r+0x16e>
 80301dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301de:	3201      	adds	r2, #1
 80301e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80301e2:	6862      	ldr	r2, [r4, #4]
 80301e4:	3a01      	subs	r2, #1
 80301e6:	2a00      	cmp	r2, #0
 80301e8:	6062      	str	r2, [r4, #4]
 80301ea:	dd02      	ble.n	80301f2 <__ssvfiscanf_r+0x35a>
 80301ec:	3301      	adds	r3, #1
 80301ee:	6023      	str	r3, [r4, #0]
 80301f0:	e774      	b.n	80300dc <__ssvfiscanf_r+0x244>
 80301f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301f4:	4621      	mov	r1, r4
 80301f6:	f7ff fdf8 	bl	802fdea <__ssrefill_r>
 80301fa:	2800      	cmp	r0, #0
 80301fc:	f43f af6e 	beq.w	80300dc <__ssvfiscanf_r+0x244>
 8030200:	e701      	b.n	8030006 <__ssvfiscanf_r+0x16e>
 8030202:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030206:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803020a:	6028      	str	r0, [r5, #0]
 803020c:	4599      	cmp	r9, r3
 803020e:	d314      	bcc.n	803023a <__ssvfiscanf_r+0x3a2>
 8030210:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030214:	4293      	cmp	r3, r2
 8030216:	f200 8553 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 803021a:	3308      	adds	r3, #8
 803021c:	fa1f fa83 	uxth.w	sl, r3
 8030220:	f8db 0000 	ldr.w	r0, [fp]
 8030224:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030228:	f003 fdaa 	bl	8033d80 <realloc>
 803022c:	2800      	cmp	r0, #0
 803022e:	f000 8547 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030232:	f8cb 0000 	str.w	r0, [fp]
 8030236:	f8ab a004 	strh.w	sl, [fp, #4]
 803023a:	f8db 3000 	ldr.w	r3, [fp]
 803023e:	f109 0201 	add.w	r2, r9, #1
 8030242:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030246:	46aa      	mov	sl, r5
 8030248:	f8ab 2006 	strh.w	r2, [fp, #6]
 803024c:	4635      	mov	r5, r6
 803024e:	f04f 0920 	mov.w	r9, #32
 8030252:	2200      	movs	r2, #0
 8030254:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030256:	f7fd fd4b 	bl	802dcf0 <__locale_mb_cur_max>
 803025a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803025c:	4290      	cmp	r0, r2
 803025e:	f43f aed2 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 8030262:	6821      	ldr	r1, [r4, #0]
 8030264:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8030268:	f811 0b01 	ldrb.w	r0, [r1], #1
 803026c:	f80c 0002 	strb.w	r0, [ip, r2]
 8030270:	1c53      	adds	r3, r2, #1
 8030272:	6862      	ldr	r2, [r4, #4]
 8030274:	3a01      	subs	r2, #1
 8030276:	e9c4 1200 	strd	r1, r2, [r4]
 803027a:	69ba      	ldr	r2, [r7, #24]
 803027c:	2a03      	cmp	r2, #3
 803027e:	d102      	bne.n	8030286 <__ssvfiscanf_r+0x3ee>
 8030280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030282:	2a04      	cmp	r2, #4
 8030284:	d007      	beq.n	8030296 <__ssvfiscanf_r+0x3fe>
 8030286:	2208      	movs	r2, #8
 8030288:	2100      	movs	r1, #0
 803028a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803028e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030290:	f7fc fba6 	bl	802c9e0 <memset>
 8030294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030296:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803029a:	9200      	str	r2, [sp, #0]
 803029c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803029e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80302a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80302a4:	4629      	mov	r1, r5
 80302a6:	f005 f925 	bl	80354f4 <_mbrtowc_r>
 80302aa:	4603      	mov	r3, r0
 80302ac:	61b8      	str	r0, [r7, #24]
 80302ae:	1c58      	adds	r0, r3, #1
 80302b0:	f43f aea9 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 80302b4:	461a      	mov	r2, r3
 80302b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80302b8:	b9b2      	cbnz	r2, 80302e8 <__ssvfiscanf_r+0x450>
 80302ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80302bc:	441a      	add	r2, r3
 80302be:	4613      	mov	r3, r2
 80302c0:	693a      	ldr	r2, [r7, #16]
 80302c2:	b172      	cbz	r2, 80302e2 <__ssvfiscanf_r+0x44a>
 80302c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80302c6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80302ca:	e019      	b.n	8030300 <__ssvfiscanf_r+0x468>
 80302cc:	f04f 0900 	mov.w	r9, #0
 80302d0:	464e      	mov	r6, r9
 80302d2:	46ca      	mov	sl, r9
 80302d4:	464d      	mov	r5, r9
 80302d6:	e7bc      	b.n	8030252 <__ssvfiscanf_r+0x3ba>
 80302d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80302dc:	464e      	mov	r6, r9
 80302de:	46ca      	mov	sl, r9
 80302e0:	e7b7      	b.n	8030252 <__ssvfiscanf_r+0x3ba>
 80302e2:	693a      	ldr	r2, [r7, #16]
 80302e4:	602a      	str	r2, [r5, #0]
 80302e6:	e7ed      	b.n	80302c4 <__ssvfiscanf_r+0x42c>
 80302e8:	69ba      	ldr	r2, [r7, #24]
 80302ea:	3202      	adds	r2, #2
 80302ec:	d024      	beq.n	8030338 <__ssvfiscanf_r+0x4a0>
 80302ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80302f0:	441a      	add	r2, r3
 80302f2:	69bb      	ldr	r3, [r7, #24]
 80302f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80302f6:	2b03      	cmp	r3, #3
 80302f8:	d1e5      	bne.n	80302c6 <__ssvfiscanf_r+0x42e>
 80302fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80302fc:	2b04      	cmp	r3, #4
 80302fe:	d1e2      	bne.n	80302c6 <__ssvfiscanf_r+0x42e>
 8030300:	693b      	ldr	r3, [r7, #16]
 8030302:	b9bb      	cbnz	r3, 8030334 <__ssvfiscanf_r+0x49c>
 8030304:	f1ba 0f00 	cmp.w	sl, #0
 8030308:	d013      	beq.n	8030332 <__ssvfiscanf_r+0x49a>
 803030a:	1bab      	subs	r3, r5, r6
 803030c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030310:	d80f      	bhi.n	8030332 <__ssvfiscanf_r+0x49a>
 8030312:	4630      	mov	r0, r6
 8030314:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030318:	62bb      	str	r3, [r7, #40]	@ 0x28
 803031a:	f003 fd31 	bl	8033d80 <realloc>
 803031e:	4606      	mov	r6, r0
 8030320:	2800      	cmp	r0, #0
 8030322:	f43f af09 	beq.w	8030138 <__ssvfiscanf_r+0x2a0>
 8030326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030328:	f8ca 0000 	str.w	r0, [sl]
 803032c:	18c5      	adds	r5, r0, r3
 803032e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030332:	3504      	adds	r5, #4
 8030334:	2200      	movs	r2, #0
 8030336:	e000      	b.n	803033a <__ssvfiscanf_r+0x4a2>
 8030338:	461a      	mov	r2, r3
 803033a:	6863      	ldr	r3, [r4, #4]
 803033c:	2b00      	cmp	r3, #0
 803033e:	dc13      	bgt.n	8030368 <__ssvfiscanf_r+0x4d0>
 8030340:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030342:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030344:	4621      	mov	r1, r4
 8030346:	f7ff fd50 	bl	802fdea <__ssrefill_r>
 803034a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803034c:	b160      	cbz	r0, 8030368 <__ssvfiscanf_r+0x4d0>
 803034e:	2a00      	cmp	r2, #0
 8030350:	f47f ae59 	bne.w	8030006 <__ssvfiscanf_r+0x16e>
 8030354:	f1ba 0f00 	cmp.w	sl, #0
 8030358:	d10b      	bne.n	8030372 <__ssvfiscanf_r+0x4da>
 803035a:	693b      	ldr	r3, [r7, #16]
 803035c:	2b00      	cmp	r3, #0
 803035e:	f47f adbc 	bne.w	802feda <__ssvfiscanf_r+0x42>
 8030362:	69fb      	ldr	r3, [r7, #28]
 8030364:	3301      	adds	r3, #1
 8030366:	e5b0      	b.n	802feca <__ssvfiscanf_r+0x32>
 8030368:	f1b8 0f00 	cmp.w	r8, #0
 803036c:	f47f af72 	bne.w	8030254 <__ssvfiscanf_r+0x3bc>
 8030370:	e7f0      	b.n	8030354 <__ssvfiscanf_r+0x4bc>
 8030372:	1ba9      	subs	r1, r5, r6
 8030374:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8030378:	d9ef      	bls.n	803035a <__ssvfiscanf_r+0x4c2>
 803037a:	f8da 0000 	ldr.w	r0, [sl]
 803037e:	f003 fcff 	bl	8033d80 <realloc>
 8030382:	2800      	cmp	r0, #0
 8030384:	d0e9      	beq.n	803035a <__ssvfiscanf_r+0x4c2>
 8030386:	f8ca 0000 	str.w	r0, [sl]
 803038a:	e7e6      	b.n	803035a <__ssvfiscanf_r+0x4c2>
 803038c:	b1db      	cbz	r3, 80303c6 <__ssvfiscanf_r+0x52e>
 803038e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030392:	4598      	cmp	r8, r3
 8030394:	dd10      	ble.n	80303b8 <__ssvfiscanf_r+0x520>
 8030396:	441a      	add	r2, r3
 8030398:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803039a:	6022      	str	r2, [r4, #0]
 803039c:	4621      	mov	r1, r4
 803039e:	441d      	add	r5, r3
 80303a0:	eba8 0803 	sub.w	r8, r8, r3
 80303a4:	f7ff fd21 	bl	802fdea <__ssrefill_r>
 80303a8:	2800      	cmp	r0, #0
 80303aa:	d0f0      	beq.n	803038e <__ssvfiscanf_r+0x4f6>
 80303ac:	2d00      	cmp	r5, #0
 80303ae:	f43f ae2a 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 80303b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80303b4:	442b      	add	r3, r5
 80303b6:	e201      	b.n	80307bc <__ssvfiscanf_r+0x924>
 80303b8:	eba3 0308 	sub.w	r3, r3, r8
 80303bc:	4442      	add	r2, r8
 80303be:	4445      	add	r5, r8
 80303c0:	6063      	str	r3, [r4, #4]
 80303c2:	6022      	str	r2, [r4, #0]
 80303c4:	e7f5      	b.n	80303b2 <__ssvfiscanf_r+0x51a>
 80303c6:	6a3b      	ldr	r3, [r7, #32]
 80303c8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80303cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80303d0:	623b      	str	r3, [r7, #32]
 80303d2:	d02d      	beq.n	8030430 <__ssvfiscanf_r+0x598>
 80303d4:	2d00      	cmp	r5, #0
 80303d6:	f43f adac 	beq.w	802ff32 <__ssvfiscanf_r+0x9a>
 80303da:	4640      	mov	r0, r8
 80303dc:	f7fe fd46 	bl	802ee6c <malloc>
 80303e0:	4681      	mov	r9, r0
 80303e2:	2800      	cmp	r0, #0
 80303e4:	f43f ae14 	beq.w	8030010 <__ssvfiscanf_r+0x178>
 80303e8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80303ec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80303f0:	6028      	str	r0, [r5, #0]
 80303f2:	45b2      	cmp	sl, r6
 80303f4:	d312      	bcc.n	803041c <__ssvfiscanf_r+0x584>
 80303f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80303fa:	429e      	cmp	r6, r3
 80303fc:	f200 8460 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030400:	3608      	adds	r6, #8
 8030402:	b2b6      	uxth	r6, r6
 8030404:	f8db 0000 	ldr.w	r0, [fp]
 8030408:	00b1      	lsls	r1, r6, #2
 803040a:	f003 fcb9 	bl	8033d80 <realloc>
 803040e:	2800      	cmp	r0, #0
 8030410:	f000 8456 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030414:	f8cb 0000 	str.w	r0, [fp]
 8030418:	f8ab 6004 	strh.w	r6, [fp, #4]
 803041c:	f8db 3000 	ldr.w	r3, [fp]
 8030420:	f10a 0201 	add.w	r2, sl, #1
 8030424:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8030428:	462e      	mov	r6, r5
 803042a:	f8ab 2006 	strh.w	r2, [fp, #6]
 803042e:	464d      	mov	r5, r9
 8030430:	9400      	str	r4, [sp, #0]
 8030432:	4629      	mov	r1, r5
 8030434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030436:	4643      	mov	r3, r8
 8030438:	2201      	movs	r2, #1
 803043a:	f7ff fcf3 	bl	802fe24 <_sfread_r>
 803043e:	4605      	mov	r5, r0
 8030440:	2800      	cmp	r0, #0
 8030442:	f43f ade0 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 8030446:	b13e      	cbz	r6, 8030458 <__ssvfiscanf_r+0x5c0>
 8030448:	4580      	cmp	r8, r0
 803044a:	d905      	bls.n	8030458 <__ssvfiscanf_r+0x5c0>
 803044c:	4601      	mov	r1, r0
 803044e:	6830      	ldr	r0, [r6, #0]
 8030450:	f003 fc96 	bl	8033d80 <realloc>
 8030454:	b100      	cbz	r0, 8030458 <__ssvfiscanf_r+0x5c0>
 8030456:	6030      	str	r0, [r6, #0]
 8030458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803045a:	442b      	add	r3, r5
 803045c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803045e:	e780      	b.n	8030362 <__ssvfiscanf_r+0x4ca>
 8030460:	0802c0e9 	.word	0x0802c0e9
 8030464:	0803c039 	.word	0x0803c039
 8030468:	2b00      	cmp	r3, #0
 803046a:	bf08      	it	eq
 803046c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030472:	693b      	ldr	r3, [r7, #16]
 8030474:	2d00      	cmp	r5, #0
 8030476:	f000 8100 	beq.w	803067a <__ssvfiscanf_r+0x7e2>
 803047a:	2b00      	cmp	r3, #0
 803047c:	f040 80a5 	bne.w	80305ca <__ssvfiscanf_r+0x732>
 8030480:	6a3b      	ldr	r3, [r7, #32]
 8030482:	0631      	lsls	r1, r6, #24
 8030484:	f853 5b04 	ldr.w	r5, [r3], #4
 8030488:	623b      	str	r3, [r7, #32]
 803048a:	f140 80a5 	bpl.w	80305d8 <__ssvfiscanf_r+0x740>
 803048e:	2d00      	cmp	r5, #0
 8030490:	f43f ae55 	beq.w	803013e <__ssvfiscanf_r+0x2a6>
 8030494:	2080      	movs	r0, #128	@ 0x80
 8030496:	f7fe fce9 	bl	802ee6c <malloc>
 803049a:	4680      	mov	r8, r0
 803049c:	2800      	cmp	r0, #0
 803049e:	f43f ae4b 	beq.w	8030138 <__ssvfiscanf_r+0x2a0>
 80304a2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 80304a6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80304aa:	6028      	str	r0, [r5, #0]
 80304ac:	429e      	cmp	r6, r3
 80304ae:	d314      	bcc.n	80304da <__ssvfiscanf_r+0x642>
 80304b0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80304b4:	4293      	cmp	r3, r2
 80304b6:	f200 8403 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 80304ba:	3308      	adds	r3, #8
 80304bc:	fa1f f983 	uxth.w	r9, r3
 80304c0:	f8db 0000 	ldr.w	r0, [fp]
 80304c4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80304c8:	f003 fc5a 	bl	8033d80 <realloc>
 80304cc:	2800      	cmp	r0, #0
 80304ce:	f000 83f7 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 80304d2:	f8cb 0000 	str.w	r0, [fp]
 80304d6:	f8ab 9004 	strh.w	r9, [fp, #4]
 80304da:	f8db 3000 	ldr.w	r3, [fp]
 80304de:	1c72      	adds	r2, r6, #1
 80304e0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80304e4:	46aa      	mov	sl, r5
 80304e6:	f8ab 2006 	strh.w	r2, [fp, #6]
 80304ea:	4645      	mov	r5, r8
 80304ec:	f04f 0920 	mov.w	r9, #32
 80304f0:	2600      	movs	r6, #0
 80304f2:	f7fd fbfd 	bl	802dcf0 <__locale_mb_cur_max>
 80304f6:	4286      	cmp	r6, r0
 80304f8:	f43f ad85 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 80304fc:	1c73      	adds	r3, r6, #1
 80304fe:	607b      	str	r3, [r7, #4]
 8030500:	6823      	ldr	r3, [r4, #0]
 8030502:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030506:	f813 2b01 	ldrb.w	r2, [r3], #1
 803050a:	558a      	strb	r2, [r1, r6]
 803050c:	6862      	ldr	r2, [r4, #4]
 803050e:	3a01      	subs	r2, #1
 8030510:	e9c4 3200 	strd	r3, r2, [r4]
 8030514:	69bb      	ldr	r3, [r7, #24]
 8030516:	2b03      	cmp	r3, #3
 8030518:	d102      	bne.n	8030520 <__ssvfiscanf_r+0x688>
 803051a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803051c:	2b04      	cmp	r3, #4
 803051e:	d005      	beq.n	803052c <__ssvfiscanf_r+0x694>
 8030520:	2208      	movs	r2, #8
 8030522:	2100      	movs	r1, #0
 8030524:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8030528:	f7fc fa5a 	bl	802c9e0 <memset>
 803052c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8030530:	9300      	str	r3, [sp, #0]
 8030532:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030536:	687b      	ldr	r3, [r7, #4]
 8030538:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803053a:	4629      	mov	r1, r5
 803053c:	f004 ffda 	bl	80354f4 <_mbrtowc_r>
 8030540:	1c42      	adds	r2, r0, #1
 8030542:	61b8      	str	r0, [r7, #24]
 8030544:	f43f ad5f 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 8030548:	2800      	cmp	r0, #0
 803054a:	d14a      	bne.n	80305e2 <__ssvfiscanf_r+0x74a>
 803054c:	6028      	str	r0, [r5, #0]
 803054e:	682e      	ldr	r6, [r5, #0]
 8030550:	1c73      	adds	r3, r6, #1
 8030552:	d056      	beq.n	8030602 <__ssvfiscanf_r+0x76a>
 8030554:	2208      	movs	r2, #8
 8030556:	2100      	movs	r1, #0
 8030558:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803055c:	f7fc fa40 	bl	802c9e0 <memset>
 8030560:	4b99      	ldr	r3, [pc, #612]	@ (80307c8 <__ssvfiscanf_r+0x930>)
 8030562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8030568:	603b      	str	r3, [r7, #0]
 803056a:	4632      	mov	r2, r6
 803056c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030570:	683e      	ldr	r6, [r7, #0]
 8030572:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030576:	47b0      	blx	r6
 8030578:	2801      	cmp	r0, #1
 803057a:	d144      	bne.n	8030606 <__ssvfiscanf_r+0x76e>
 803057c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030580:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030584:	5c9b      	ldrb	r3, [r3, r2]
 8030586:	2b00      	cmp	r3, #0
 8030588:	d148      	bne.n	803061c <__ssvfiscanf_r+0x784>
 803058a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 803058e:	687b      	ldr	r3, [r7, #4]
 8030590:	2b00      	cmp	r3, #0
 8030592:	d13a      	bne.n	803060a <__ssvfiscanf_r+0x772>
 8030594:	693b      	ldr	r3, [r7, #16]
 8030596:	2b00      	cmp	r3, #0
 8030598:	f47f ac9f 	bne.w	802feda <__ssvfiscanf_r+0x42>
 803059c:	602b      	str	r3, [r5, #0]
 803059e:	f1ba 0f00 	cmp.w	sl, #0
 80305a2:	f43f aede 	beq.w	8030362 <__ssvfiscanf_r+0x4ca>
 80305a6:	eba5 0108 	sub.w	r1, r5, r8
 80305aa:	108b      	asrs	r3, r1, #2
 80305ac:	3301      	adds	r3, #1
 80305ae:	4599      	cmp	r9, r3
 80305b0:	f67f aed7 	bls.w	8030362 <__ssvfiscanf_r+0x4ca>
 80305b4:	f8da 0000 	ldr.w	r0, [sl]
 80305b8:	3104      	adds	r1, #4
 80305ba:	f003 fbe1 	bl	8033d80 <realloc>
 80305be:	2800      	cmp	r0, #0
 80305c0:	f43f aecf 	beq.w	8030362 <__ssvfiscanf_r+0x4ca>
 80305c4:	f8ca 0000 	str.w	r0, [sl]
 80305c8:	e6cb      	b.n	8030362 <__ssvfiscanf_r+0x4ca>
 80305ca:	f04f 0900 	mov.w	r9, #0
 80305ce:	46c8      	mov	r8, r9
 80305d0:	46ca      	mov	sl, r9
 80305d2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80305d6:	e78b      	b.n	80304f0 <__ssvfiscanf_r+0x658>
 80305d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80305dc:	46c8      	mov	r8, r9
 80305de:	46ca      	mov	sl, r9
 80305e0:	e786      	b.n	80304f0 <__ssvfiscanf_r+0x658>
 80305e2:	69bb      	ldr	r3, [r7, #24]
 80305e4:	3302      	adds	r3, #2
 80305e6:	d1b2      	bne.n	803054e <__ssvfiscanf_r+0x6b6>
 80305e8:	687e      	ldr	r6, [r7, #4]
 80305ea:	6863      	ldr	r3, [r4, #4]
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	dc3f      	bgt.n	8030670 <__ssvfiscanf_r+0x7d8>
 80305f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80305f2:	4621      	mov	r1, r4
 80305f4:	f7ff fbf9 	bl	802fdea <__ssrefill_r>
 80305f8:	2800      	cmp	r0, #0
 80305fa:	d039      	beq.n	8030670 <__ssvfiscanf_r+0x7d8>
 80305fc:	2e00      	cmp	r6, #0
 80305fe:	d0c9      	beq.n	8030594 <__ssvfiscanf_r+0x6fc>
 8030600:	e501      	b.n	8030006 <__ssvfiscanf_r+0x16e>
 8030602:	4632      	mov	r2, r6
 8030604:	e7bc      	b.n	8030580 <__ssvfiscanf_r+0x6e8>
 8030606:	2200      	movs	r2, #0
 8030608:	e7ba      	b.n	8030580 <__ssvfiscanf_r+0x6e8>
 803060a:	687b      	ldr	r3, [r7, #4]
 803060c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803060e:	3b01      	subs	r3, #1
 8030610:	4622      	mov	r2, r4
 8030612:	5cf1      	ldrb	r1, [r6, r3]
 8030614:	607b      	str	r3, [r7, #4]
 8030616:	f7ff fbad 	bl	802fd74 <_sungetc_r>
 803061a:	e7b8      	b.n	803058e <__ssvfiscanf_r+0x6f6>
 803061c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803061e:	687a      	ldr	r2, [r7, #4]
 8030620:	4413      	add	r3, r2
 8030622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030624:	69bb      	ldr	r3, [r7, #24]
 8030626:	2b03      	cmp	r3, #3
 8030628:	d102      	bne.n	8030630 <__ssvfiscanf_r+0x798>
 803062a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803062c:	2b04      	cmp	r3, #4
 803062e:	d002      	beq.n	8030636 <__ssvfiscanf_r+0x79e>
 8030630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030632:	3b01      	subs	r3, #1
 8030634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030636:	693b      	ldr	r3, [r7, #16]
 8030638:	b9c3      	cbnz	r3, 803066c <__ssvfiscanf_r+0x7d4>
 803063a:	3504      	adds	r5, #4
 803063c:	f1ba 0f00 	cmp.w	sl, #0
 8030640:	d014      	beq.n	803066c <__ssvfiscanf_r+0x7d4>
 8030642:	eba5 0608 	sub.w	r6, r5, r8
 8030646:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 803064a:	d80d      	bhi.n	8030668 <__ssvfiscanf_r+0x7d0>
 803064c:	4640      	mov	r0, r8
 803064e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030652:	f003 fb95 	bl	8033d80 <realloc>
 8030656:	4680      	mov	r8, r0
 8030658:	2800      	cmp	r0, #0
 803065a:	f43f ad6d 	beq.w	8030138 <__ssvfiscanf_r+0x2a0>
 803065e:	1985      	adds	r5, r0, r6
 8030660:	f8ca 0000 	str.w	r0, [sl]
 8030664:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030668:	693e      	ldr	r6, [r7, #16]
 803066a:	e7be      	b.n	80305ea <__ssvfiscanf_r+0x752>
 803066c:	2600      	movs	r6, #0
 803066e:	e7bc      	b.n	80305ea <__ssvfiscanf_r+0x752>
 8030670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030672:	2b00      	cmp	r3, #0
 8030674:	f47f af3d 	bne.w	80304f2 <__ssvfiscanf_r+0x65a>
 8030678:	e78c      	b.n	8030594 <__ssvfiscanf_r+0x6fc>
 803067a:	b1e3      	cbz	r3, 80306b6 <__ssvfiscanf_r+0x81e>
 803067c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030680:	6823      	ldr	r3, [r4, #0]
 8030682:	781a      	ldrb	r2, [r3, #0]
 8030684:	5cb2      	ldrb	r2, [r6, r2]
 8030686:	b91a      	cbnz	r2, 8030690 <__ssvfiscanf_r+0x7f8>
 8030688:	2d00      	cmp	r5, #0
 803068a:	f47f ae92 	bne.w	80303b2 <__ssvfiscanf_r+0x51a>
 803068e:	e450      	b.n	802ff32 <__ssvfiscanf_r+0x9a>
 8030690:	3301      	adds	r3, #1
 8030692:	6862      	ldr	r2, [r4, #4]
 8030694:	6023      	str	r3, [r4, #0]
 8030696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030698:	3501      	adds	r5, #1
 803069a:	3a01      	subs	r2, #1
 803069c:	42ab      	cmp	r3, r5
 803069e:	6062      	str	r2, [r4, #4]
 80306a0:	f43f ae87 	beq.w	80303b2 <__ssvfiscanf_r+0x51a>
 80306a4:	2a00      	cmp	r2, #0
 80306a6:	dceb      	bgt.n	8030680 <__ssvfiscanf_r+0x7e8>
 80306a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80306aa:	4621      	mov	r1, r4
 80306ac:	f7ff fb9d 	bl	802fdea <__ssrefill_r>
 80306b0:	2800      	cmp	r0, #0
 80306b2:	d0e5      	beq.n	8030680 <__ssvfiscanf_r+0x7e8>
 80306b4:	e67d      	b.n	80303b2 <__ssvfiscanf_r+0x51a>
 80306b6:	6a3b      	ldr	r3, [r7, #32]
 80306b8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 80306bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80306c0:	623b      	str	r3, [r7, #32]
 80306c2:	d07e      	beq.n	80307c2 <__ssvfiscanf_r+0x92a>
 80306c4:	2d00      	cmp	r5, #0
 80306c6:	f43f ac34 	beq.w	802ff32 <__ssvfiscanf_r+0x9a>
 80306ca:	2020      	movs	r0, #32
 80306cc:	f7fe fbce 	bl	802ee6c <malloc>
 80306d0:	4680      	mov	r8, r0
 80306d2:	2800      	cmp	r0, #0
 80306d4:	f43f ac9c 	beq.w	8030010 <__ssvfiscanf_r+0x178>
 80306d8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80306dc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80306e0:	6028      	str	r0, [r5, #0]
 80306e2:	45b1      	cmp	r9, r6
 80306e4:	d312      	bcc.n	803070c <__ssvfiscanf_r+0x874>
 80306e6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80306ea:	429e      	cmp	r6, r3
 80306ec:	f200 82e8 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 80306f0:	3608      	adds	r6, #8
 80306f2:	b2b6      	uxth	r6, r6
 80306f4:	f8db 0000 	ldr.w	r0, [fp]
 80306f8:	00b1      	lsls	r1, r6, #2
 80306fa:	f003 fb41 	bl	8033d80 <realloc>
 80306fe:	2800      	cmp	r0, #0
 8030700:	f000 82de 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030704:	f8cb 0000 	str.w	r0, [fp]
 8030708:	f8ab 6004 	strh.w	r6, [fp, #4]
 803070c:	f8db 3000 	ldr.w	r3, [fp]
 8030710:	f109 0201 	add.w	r2, r9, #1
 8030714:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030718:	46aa      	mov	sl, r5
 803071a:	f8ab 2006 	strh.w	r2, [fp, #6]
 803071e:	4645      	mov	r5, r8
 8030720:	f04f 0920 	mov.w	r9, #32
 8030724:	462e      	mov	r6, r5
 8030726:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 803072a:	6823      	ldr	r3, [r4, #0]
 803072c:	781a      	ldrb	r2, [r3, #0]
 803072e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030732:	b362      	cbz	r2, 803078e <__ssvfiscanf_r+0x8f6>
 8030734:	6862      	ldr	r2, [r4, #4]
 8030736:	3a01      	subs	r2, #1
 8030738:	6062      	str	r2, [r4, #4]
 803073a:	1c5a      	adds	r2, r3, #1
 803073c:	6022      	str	r2, [r4, #0]
 803073e:	781b      	ldrb	r3, [r3, #0]
 8030740:	f805 3b01 	strb.w	r3, [r5], #1
 8030744:	f1ba 0f00 	cmp.w	sl, #0
 8030748:	d011      	beq.n	803076e <__ssvfiscanf_r+0x8d6>
 803074a:	1bab      	subs	r3, r5, r6
 803074c:	454b      	cmp	r3, r9
 803074e:	d30e      	bcc.n	803076e <__ssvfiscanf_r+0x8d6>
 8030750:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030754:	4630      	mov	r0, r6
 8030756:	4649      	mov	r1, r9
 8030758:	613b      	str	r3, [r7, #16]
 803075a:	f003 fb11 	bl	8033d80 <realloc>
 803075e:	4606      	mov	r6, r0
 8030760:	2800      	cmp	r0, #0
 8030762:	f43f ac55 	beq.w	8030010 <__ssvfiscanf_r+0x178>
 8030766:	693b      	ldr	r3, [r7, #16]
 8030768:	f8ca 0000 	str.w	r0, [sl]
 803076c:	18c5      	adds	r5, r0, r3
 803076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030770:	3b01      	subs	r3, #1
 8030772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030774:	d00b      	beq.n	803078e <__ssvfiscanf_r+0x8f6>
 8030776:	6863      	ldr	r3, [r4, #4]
 8030778:	2b00      	cmp	r3, #0
 803077a:	dcd6      	bgt.n	803072a <__ssvfiscanf_r+0x892>
 803077c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803077e:	4621      	mov	r1, r4
 8030780:	f7ff fb33 	bl	802fdea <__ssrefill_r>
 8030784:	2800      	cmp	r0, #0
 8030786:	d0d0      	beq.n	803072a <__ssvfiscanf_r+0x892>
 8030788:	42b5      	cmp	r5, r6
 803078a:	f43f ac3c 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 803078e:	1bae      	subs	r6, r5, r6
 8030790:	f43f abcf 	beq.w	802ff32 <__ssvfiscanf_r+0x9a>
 8030794:	2300      	movs	r3, #0
 8030796:	702b      	strb	r3, [r5, #0]
 8030798:	f1ba 0f00 	cmp.w	sl, #0
 803079c:	d009      	beq.n	80307b2 <__ssvfiscanf_r+0x91a>
 803079e:	1c71      	adds	r1, r6, #1
 80307a0:	4589      	cmp	r9, r1
 80307a2:	d906      	bls.n	80307b2 <__ssvfiscanf_r+0x91a>
 80307a4:	f8da 0000 	ldr.w	r0, [sl]
 80307a8:	f003 faea 	bl	8033d80 <realloc>
 80307ac:	b108      	cbz	r0, 80307b2 <__ssvfiscanf_r+0x91a>
 80307ae:	f8ca 0000 	str.w	r0, [sl]
 80307b2:	69fb      	ldr	r3, [r7, #28]
 80307b4:	3301      	adds	r3, #1
 80307b6:	61fb      	str	r3, [r7, #28]
 80307b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80307ba:	4433      	add	r3, r6
 80307bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80307be:	f7ff bb8c 	b.w	802feda <__ssvfiscanf_r+0x42>
 80307c2:	46ca      	mov	sl, r9
 80307c4:	e7ae      	b.n	8030724 <__ssvfiscanf_r+0x88c>
 80307c6:	bf00      	nop
 80307c8:	2000016c 	.word	0x2000016c
 80307cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80307ce:	2b00      	cmp	r3, #0
 80307d0:	bf08      	it	eq
 80307d2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80307d6:	f016 0501 	ands.w	r5, r6, #1
 80307da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80307dc:	f006 0810 	and.w	r8, r6, #16
 80307e0:	f000 80e1 	beq.w	80309a6 <__ssvfiscanf_r+0xb0e>
 80307e4:	f1b8 0f00 	cmp.w	r8, #0
 80307e8:	f040 8089 	bne.w	80308fe <__ssvfiscanf_r+0xa66>
 80307ec:	6a3b      	ldr	r3, [r7, #32]
 80307ee:	0636      	lsls	r6, r6, #24
 80307f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80307f4:	623b      	str	r3, [r7, #32]
 80307f6:	f140 8089 	bpl.w	803090c <__ssvfiscanf_r+0xa74>
 80307fa:	2d00      	cmp	r5, #0
 80307fc:	f43f ac9f 	beq.w	803013e <__ssvfiscanf_r+0x2a6>
 8030800:	2080      	movs	r0, #128	@ 0x80
 8030802:	f7fe fb33 	bl	802ee6c <malloc>
 8030806:	4606      	mov	r6, r0
 8030808:	2800      	cmp	r0, #0
 803080a:	f43f ac95 	beq.w	8030138 <__ssvfiscanf_r+0x2a0>
 803080e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030812:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030816:	6028      	str	r0, [r5, #0]
 8030818:	4599      	cmp	r9, r3
 803081a:	d314      	bcc.n	8030846 <__ssvfiscanf_r+0x9ae>
 803081c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030820:	4293      	cmp	r3, r2
 8030822:	f200 824d 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030826:	3308      	adds	r3, #8
 8030828:	fa1f fa83 	uxth.w	sl, r3
 803082c:	f8db 0000 	ldr.w	r0, [fp]
 8030830:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030834:	f003 faa4 	bl	8033d80 <realloc>
 8030838:	2800      	cmp	r0, #0
 803083a:	f000 8241 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 803083e:	f8cb 0000 	str.w	r0, [fp]
 8030842:	f8ab a004 	strh.w	sl, [fp, #4]
 8030846:	f8db 3000 	ldr.w	r3, [fp]
 803084a:	f109 0201 	add.w	r2, r9, #1
 803084e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030852:	46aa      	mov	sl, r5
 8030854:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030858:	4635      	mov	r5, r6
 803085a:	f04f 0920 	mov.w	r9, #32
 803085e:	2300      	movs	r3, #0
 8030860:	6822      	ldr	r2, [r4, #0]
 8030862:	499e      	ldr	r1, [pc, #632]	@ (8030adc <__ssvfiscanf_r+0xc44>)
 8030864:	7812      	ldrb	r2, [r2, #0]
 8030866:	5c8a      	ldrb	r2, [r1, r2]
 8030868:	0711      	lsls	r1, r2, #28
 803086a:	d43c      	bmi.n	80308e6 <__ssvfiscanf_r+0xa4e>
 803086c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803086e:	2a00      	cmp	r2, #0
 8030870:	d039      	beq.n	80308e6 <__ssvfiscanf_r+0xa4e>
 8030872:	613b      	str	r3, [r7, #16]
 8030874:	f7fd fa3c 	bl	802dcf0 <__locale_mb_cur_max>
 8030878:	693b      	ldr	r3, [r7, #16]
 803087a:	4298      	cmp	r0, r3
 803087c:	f43f abc3 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 8030880:	1c5a      	adds	r2, r3, #1
 8030882:	613a      	str	r2, [r7, #16]
 8030884:	6822      	ldr	r2, [r4, #0]
 8030886:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803088a:	f812 0b01 	ldrb.w	r0, [r2], #1
 803088e:	54c8      	strb	r0, [r1, r3]
 8030890:	6863      	ldr	r3, [r4, #4]
 8030892:	3b01      	subs	r3, #1
 8030894:	e9c4 2300 	strd	r2, r3, [r4]
 8030898:	69bb      	ldr	r3, [r7, #24]
 803089a:	2b03      	cmp	r3, #3
 803089c:	d102      	bne.n	80308a4 <__ssvfiscanf_r+0xa0c>
 803089e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80308a0:	2b04      	cmp	r3, #4
 80308a2:	d005      	beq.n	80308b0 <__ssvfiscanf_r+0xa18>
 80308a4:	2208      	movs	r2, #8
 80308a6:	2100      	movs	r1, #0
 80308a8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80308ac:	f7fc f898 	bl	802c9e0 <memset>
 80308b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80308b4:	9300      	str	r3, [sp, #0]
 80308b6:	693b      	ldr	r3, [r7, #16]
 80308b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80308ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80308be:	4629      	mov	r1, r5
 80308c0:	f004 fe18 	bl	80354f4 <_mbrtowc_r>
 80308c4:	4603      	mov	r3, r0
 80308c6:	61b8      	str	r0, [r7, #24]
 80308c8:	1c58      	adds	r0, r3, #1
 80308ca:	f43f ab9c 	beq.w	8030006 <__ssvfiscanf_r+0x16e>
 80308ce:	bb0b      	cbnz	r3, 8030914 <__ssvfiscanf_r+0xa7c>
 80308d0:	602b      	str	r3, [r5, #0]
 80308d2:	6828      	ldr	r0, [r5, #0]
 80308d4:	f004 fe28 	bl	8035528 <iswspace>
 80308d8:	4603      	mov	r3, r0
 80308da:	2800      	cmp	r0, #0
 80308dc:	d037      	beq.n	803094e <__ssvfiscanf_r+0xab6>
 80308de:	693a      	ldr	r2, [r7, #16]
 80308e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80308e4:	bb4a      	cbnz	r2, 803093a <__ssvfiscanf_r+0xaa2>
 80308e6:	f1b8 0f00 	cmp.w	r8, #0
 80308ea:	f47f aaf6 	bne.w	802feda <__ssvfiscanf_r+0x42>
 80308ee:	f8c5 8000 	str.w	r8, [r5]
 80308f2:	f1ba 0f00 	cmp.w	sl, #0
 80308f6:	f43f ad34 	beq.w	8030362 <__ssvfiscanf_r+0x4ca>
 80308fa:	1ba9      	subs	r1, r5, r6
 80308fc:	e655      	b.n	80305aa <__ssvfiscanf_r+0x712>
 80308fe:	f04f 0900 	mov.w	r9, #0
 8030902:	464e      	mov	r6, r9
 8030904:	46ca      	mov	sl, r9
 8030906:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 803090a:	e7a8      	b.n	803085e <__ssvfiscanf_r+0x9c6>
 803090c:	46c1      	mov	r9, r8
 803090e:	4646      	mov	r6, r8
 8030910:	46c2      	mov	sl, r8
 8030912:	e7a4      	b.n	803085e <__ssvfiscanf_r+0x9c6>
 8030914:	69bb      	ldr	r3, [r7, #24]
 8030916:	3302      	adds	r3, #2
 8030918:	d1db      	bne.n	80308d2 <__ssvfiscanf_r+0xa3a>
 803091a:	693b      	ldr	r3, [r7, #16]
 803091c:	6862      	ldr	r2, [r4, #4]
 803091e:	2a00      	cmp	r2, #0
 8030920:	dc9e      	bgt.n	8030860 <__ssvfiscanf_r+0x9c8>
 8030922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030924:	613b      	str	r3, [r7, #16]
 8030926:	4621      	mov	r1, r4
 8030928:	f7ff fa5f 	bl	802fdea <__ssrefill_r>
 803092c:	693b      	ldr	r3, [r7, #16]
 803092e:	2800      	cmp	r0, #0
 8030930:	d096      	beq.n	8030860 <__ssvfiscanf_r+0x9c8>
 8030932:	2b00      	cmp	r3, #0
 8030934:	f47f ab67 	bne.w	8030006 <__ssvfiscanf_r+0x16e>
 8030938:	e7d5      	b.n	80308e6 <__ssvfiscanf_r+0xa4e>
 803093a:	693a      	ldr	r2, [r7, #16]
 803093c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803093e:	3a01      	subs	r2, #1
 8030940:	613a      	str	r2, [r7, #16]
 8030942:	6939      	ldr	r1, [r7, #16]
 8030944:	4622      	mov	r2, r4
 8030946:	5c59      	ldrb	r1, [r3, r1]
 8030948:	f7ff fa14 	bl	802fd74 <_sungetc_r>
 803094c:	e7c7      	b.n	80308de <__ssvfiscanf_r+0xa46>
 803094e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030950:	6939      	ldr	r1, [r7, #16]
 8030952:	440a      	add	r2, r1
 8030954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030956:	69ba      	ldr	r2, [r7, #24]
 8030958:	2a03      	cmp	r2, #3
 803095a:	d102      	bne.n	8030962 <__ssvfiscanf_r+0xaca>
 803095c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 803095e:	2a04      	cmp	r2, #4
 8030960:	d002      	beq.n	8030968 <__ssvfiscanf_r+0xad0>
 8030962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030964:	3a01      	subs	r2, #1
 8030966:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030968:	f1b8 0f00 	cmp.w	r8, #0
 803096c:	d1d6      	bne.n	803091c <__ssvfiscanf_r+0xa84>
 803096e:	3504      	adds	r5, #4
 8030970:	f1ba 0f00 	cmp.w	sl, #0
 8030974:	d015      	beq.n	80309a2 <__ssvfiscanf_r+0xb0a>
 8030976:	1bab      	subs	r3, r5, r6
 8030978:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803097c:	d80f      	bhi.n	803099e <__ssvfiscanf_r+0xb06>
 803097e:	4630      	mov	r0, r6
 8030980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030984:	613b      	str	r3, [r7, #16]
 8030986:	f003 f9fb 	bl	8033d80 <realloc>
 803098a:	4606      	mov	r6, r0
 803098c:	2800      	cmp	r0, #0
 803098e:	f43f abd3 	beq.w	8030138 <__ssvfiscanf_r+0x2a0>
 8030992:	693b      	ldr	r3, [r7, #16]
 8030994:	f8ca 0000 	str.w	r0, [sl]
 8030998:	18c5      	adds	r5, r0, r3
 803099a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803099e:	4643      	mov	r3, r8
 80309a0:	e7bc      	b.n	803091c <__ssvfiscanf_r+0xa84>
 80309a2:	4653      	mov	r3, sl
 80309a4:	e7ba      	b.n	803091c <__ssvfiscanf_r+0xa84>
 80309a6:	f1b8 0f00 	cmp.w	r8, #0
 80309aa:	d019      	beq.n	80309e0 <__ssvfiscanf_r+0xb48>
 80309ac:	4e4b      	ldr	r6, [pc, #300]	@ (8030adc <__ssvfiscanf_r+0xc44>)
 80309ae:	6823      	ldr	r3, [r4, #0]
 80309b0:	781a      	ldrb	r2, [r3, #0]
 80309b2:	5cb2      	ldrb	r2, [r6, r2]
 80309b4:	0712      	lsls	r2, r2, #28
 80309b6:	f53f acfc 	bmi.w	80303b2 <__ssvfiscanf_r+0x51a>
 80309ba:	3301      	adds	r3, #1
 80309bc:	6862      	ldr	r2, [r4, #4]
 80309be:	6023      	str	r3, [r4, #0]
 80309c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80309c2:	3501      	adds	r5, #1
 80309c4:	3a01      	subs	r2, #1
 80309c6:	429d      	cmp	r5, r3
 80309c8:	6062      	str	r2, [r4, #4]
 80309ca:	f43f acf2 	beq.w	80303b2 <__ssvfiscanf_r+0x51a>
 80309ce:	2a00      	cmp	r2, #0
 80309d0:	dced      	bgt.n	80309ae <__ssvfiscanf_r+0xb16>
 80309d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80309d4:	4621      	mov	r1, r4
 80309d6:	f7ff fa08 	bl	802fdea <__ssrefill_r>
 80309da:	2800      	cmp	r0, #0
 80309dc:	d0e7      	beq.n	80309ae <__ssvfiscanf_r+0xb16>
 80309de:	e4e8      	b.n	80303b2 <__ssvfiscanf_r+0x51a>
 80309e0:	6a3b      	ldr	r3, [r7, #32]
 80309e2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80309e6:	f853 5b04 	ldr.w	r5, [r3], #4
 80309ea:	623b      	str	r3, [r7, #32]
 80309ec:	d074      	beq.n	8030ad8 <__ssvfiscanf_r+0xc40>
 80309ee:	2d00      	cmp	r5, #0
 80309f0:	f43f aa9f 	beq.w	802ff32 <__ssvfiscanf_r+0x9a>
 80309f4:	2020      	movs	r0, #32
 80309f6:	f7fe fa39 	bl	802ee6c <malloc>
 80309fa:	4680      	mov	r8, r0
 80309fc:	2800      	cmp	r0, #0
 80309fe:	f43f ab07 	beq.w	8030010 <__ssvfiscanf_r+0x178>
 8030a02:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030a06:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030a0a:	6028      	str	r0, [r5, #0]
 8030a0c:	45b1      	cmp	r9, r6
 8030a0e:	d312      	bcc.n	8030a36 <__ssvfiscanf_r+0xb9e>
 8030a10:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030a14:	429e      	cmp	r6, r3
 8030a16:	f200 8153 	bhi.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030a1a:	3608      	adds	r6, #8
 8030a1c:	b2b6      	uxth	r6, r6
 8030a1e:	f8db 0000 	ldr.w	r0, [fp]
 8030a22:	00b1      	lsls	r1, r6, #2
 8030a24:	f003 f9ac 	bl	8033d80 <realloc>
 8030a28:	2800      	cmp	r0, #0
 8030a2a:	f000 8149 	beq.w	8030cc0 <__ssvfiscanf_r+0xe28>
 8030a2e:	f8cb 0000 	str.w	r0, [fp]
 8030a32:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030a36:	f8db 3000 	ldr.w	r3, [fp]
 8030a3a:	f109 0201 	add.w	r2, r9, #1
 8030a3e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030a42:	46aa      	mov	sl, r5
 8030a44:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030a48:	4645      	mov	r5, r8
 8030a4a:	2620      	movs	r6, #32
 8030a4c:	46a9      	mov	r9, r5
 8030a4e:	6823      	ldr	r3, [r4, #0]
 8030a50:	4922      	ldr	r1, [pc, #136]	@ (8030adc <__ssvfiscanf_r+0xc44>)
 8030a52:	781a      	ldrb	r2, [r3, #0]
 8030a54:	5c8a      	ldrb	r2, [r1, r2]
 8030a56:	0710      	lsls	r0, r2, #28
 8030a58:	d428      	bmi.n	8030aac <__ssvfiscanf_r+0xc14>
 8030a5a:	6862      	ldr	r2, [r4, #4]
 8030a5c:	3a01      	subs	r2, #1
 8030a5e:	6062      	str	r2, [r4, #4]
 8030a60:	1c5a      	adds	r2, r3, #1
 8030a62:	6022      	str	r2, [r4, #0]
 8030a64:	781b      	ldrb	r3, [r3, #0]
 8030a66:	f805 3b01 	strb.w	r3, [r5], #1
 8030a6a:	f1ba 0f00 	cmp.w	sl, #0
 8030a6e:	d010      	beq.n	8030a92 <__ssvfiscanf_r+0xbfa>
 8030a70:	eba5 0809 	sub.w	r8, r5, r9
 8030a74:	45b0      	cmp	r8, r6
 8030a76:	d30c      	bcc.n	8030a92 <__ssvfiscanf_r+0xbfa>
 8030a78:	0076      	lsls	r6, r6, #1
 8030a7a:	4648      	mov	r0, r9
 8030a7c:	4631      	mov	r1, r6
 8030a7e:	f003 f97f 	bl	8033d80 <realloc>
 8030a82:	4681      	mov	r9, r0
 8030a84:	2800      	cmp	r0, #0
 8030a86:	f43f aac3 	beq.w	8030010 <__ssvfiscanf_r+0x178>
 8030a8a:	eb00 0508 	add.w	r5, r0, r8
 8030a8e:	f8ca 0000 	str.w	r0, [sl]
 8030a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a94:	3b01      	subs	r3, #1
 8030a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a98:	d008      	beq.n	8030aac <__ssvfiscanf_r+0xc14>
 8030a9a:	6863      	ldr	r3, [r4, #4]
 8030a9c:	2b00      	cmp	r3, #0
 8030a9e:	dcd6      	bgt.n	8030a4e <__ssvfiscanf_r+0xbb6>
 8030aa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030aa2:	4621      	mov	r1, r4
 8030aa4:	f7ff f9a1 	bl	802fdea <__ssrefill_r>
 8030aa8:	2800      	cmp	r0, #0
 8030aaa:	d0d0      	beq.n	8030a4e <__ssvfiscanf_r+0xbb6>
 8030aac:	2300      	movs	r3, #0
 8030aae:	702b      	strb	r3, [r5, #0]
 8030ab0:	eba5 0509 	sub.w	r5, r5, r9
 8030ab4:	f1ba 0f00 	cmp.w	sl, #0
 8030ab8:	f43f acce 	beq.w	8030458 <__ssvfiscanf_r+0x5c0>
 8030abc:	1c69      	adds	r1, r5, #1
 8030abe:	428e      	cmp	r6, r1
 8030ac0:	f67f acca 	bls.w	8030458 <__ssvfiscanf_r+0x5c0>
 8030ac4:	f8da 0000 	ldr.w	r0, [sl]
 8030ac8:	f003 f95a 	bl	8033d80 <realloc>
 8030acc:	2800      	cmp	r0, #0
 8030ace:	f43f acc3 	beq.w	8030458 <__ssvfiscanf_r+0x5c0>
 8030ad2:	f8ca 0000 	str.w	r0, [sl]
 8030ad6:	e4bf      	b.n	8030458 <__ssvfiscanf_r+0x5c0>
 8030ad8:	46b2      	mov	sl, r6
 8030ada:	e7b7      	b.n	8030a4c <__ssvfiscanf_r+0xbb4>
 8030adc:	0803c039 	.word	0x0803c039
 8030ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030ae2:	3b01      	subs	r3, #1
 8030ae4:	2b26      	cmp	r3, #38	@ 0x26
 8030ae6:	bf81      	itttt	hi
 8030ae8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8030aea:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8030aee:	2327      	movhi	r3, #39	@ 0x27
 8030af0:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030af2:	bf98      	it	ls
 8030af4:	f04f 0800 	movls.w	r8, #0
 8030af8:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8030afc:	f04f 0900 	mov.w	r9, #0
 8030b00:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8030b04:	6822      	ldr	r2, [r4, #0]
 8030b06:	7813      	ldrb	r3, [r2, #0]
 8030b08:	2b39      	cmp	r3, #57	@ 0x39
 8030b0a:	d80f      	bhi.n	8030b2c <__ssvfiscanf_r+0xc94>
 8030b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8030b0e:	d91a      	bls.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030b10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8030b14:	290e      	cmp	r1, #14
 8030b16:	d816      	bhi.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030b18:	e8df f001 	tbb	[pc, r1]
 8030b1c:	15771577 	.word	0x15771577
 8030b20:	67673e15 	.word	0x67673e15
 8030b24:	67676767 	.word	0x67676767
 8030b28:	6f67      	.short	0x6f67
 8030b2a:	6f          	.byte	0x6f
 8030b2b:	00          	.byte	0x00
 8030b2c:	2b66      	cmp	r3, #102	@ 0x66
 8030b2e:	d831      	bhi.n	8030b94 <__ssvfiscanf_r+0xcfc>
 8030b30:	2b60      	cmp	r3, #96	@ 0x60
 8030b32:	d803      	bhi.n	8030b3c <__ssvfiscanf_r+0xca4>
 8030b34:	2b46      	cmp	r3, #70	@ 0x46
 8030b36:	d804      	bhi.n	8030b42 <__ssvfiscanf_r+0xcaa>
 8030b38:	2b40      	cmp	r3, #64	@ 0x40
 8030b3a:	d904      	bls.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030b3c:	6979      	ldr	r1, [r7, #20]
 8030b3e:	290a      	cmp	r1, #10
 8030b40:	e061      	b.n	8030c06 <__ssvfiscanf_r+0xd6e>
 8030b42:	2b58      	cmp	r3, #88	@ 0x58
 8030b44:	d066      	beq.n	8030c14 <__ssvfiscanf_r+0xd7c>
 8030b46:	05f1      	lsls	r1, r6, #23
 8030b48:	d511      	bpl.n	8030b6e <__ssvfiscanf_r+0xcd6>
 8030b4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030b4e:	459a      	cmp	sl, r3
 8030b50:	d908      	bls.n	8030b64 <__ssvfiscanf_r+0xccc>
 8030b52:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8030b56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b58:	4622      	mov	r2, r4
 8030b5a:	f7ff f90b 	bl	802fd74 <_sungetc_r>
 8030b5e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030b62:	46c2      	mov	sl, r8
 8030b64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030b68:	459a      	cmp	sl, r3
 8030b6a:	f43f a9e2 	beq.w	802ff32 <__ssvfiscanf_r+0x9a>
 8030b6e:	f016 0210 	ands.w	r2, r6, #16
 8030b72:	d16b      	bne.n	8030c4c <__ssvfiscanf_r+0xdb4>
 8030b74:	697b      	ldr	r3, [r7, #20]
 8030b76:	f88a 2000 	strb.w	r2, [sl]
 8030b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b7c:	68fd      	ldr	r5, [r7, #12]
 8030b7e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030b82:	47a8      	blx	r5
 8030b84:	6a3b      	ldr	r3, [r7, #32]
 8030b86:	06b2      	lsls	r2, r6, #26
 8030b88:	f103 0804 	add.w	r8, r3, #4
 8030b8c:	d555      	bpl.n	8030c3a <__ssvfiscanf_r+0xda2>
 8030b8e:	681b      	ldr	r3, [r3, #0]
 8030b90:	6018      	str	r0, [r3, #0]
 8030b92:	e057      	b.n	8030c44 <__ssvfiscanf_r+0xdac>
 8030b94:	2b78      	cmp	r3, #120	@ 0x78
 8030b96:	e7d5      	b.n	8030b44 <__ssvfiscanf_r+0xcac>
 8030b98:	0531      	lsls	r1, r6, #20
 8030b9a:	d509      	bpl.n	8030bb0 <__ssvfiscanf_r+0xd18>
 8030b9c:	6979      	ldr	r1, [r7, #20]
 8030b9e:	b919      	cbnz	r1, 8030ba8 <__ssvfiscanf_r+0xd10>
 8030ba0:	2108      	movs	r1, #8
 8030ba2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030ba6:	6179      	str	r1, [r7, #20]
 8030ba8:	0575      	lsls	r5, r6, #21
 8030baa:	d506      	bpl.n	8030bba <__ssvfiscanf_r+0xd22>
 8030bac:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8030bb0:	4655      	mov	r5, sl
 8030bb2:	f805 3b01 	strb.w	r3, [r5], #1
 8030bb6:	46aa      	mov	sl, r5
 8030bb8:	e00b      	b.n	8030bd2 <__ssvfiscanf_r+0xd3a>
 8030bba:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8030bbe:	f1b8 0f00 	cmp.w	r8, #0
 8030bc2:	d004      	beq.n	8030bce <__ssvfiscanf_r+0xd36>
 8030bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030bc6:	3301      	adds	r3, #1
 8030bc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8030bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030bce:	f109 0901 	add.w	r9, r9, #1
 8030bd2:	6863      	ldr	r3, [r4, #4]
 8030bd4:	3b01      	subs	r3, #1
 8030bd6:	2b00      	cmp	r3, #0
 8030bd8:	6063      	str	r3, [r4, #4]
 8030bda:	dd27      	ble.n	8030c2c <__ssvfiscanf_r+0xd94>
 8030bdc:	3201      	adds	r2, #1
 8030bde:	6022      	str	r2, [r4, #0]
 8030be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030be2:	3b01      	subs	r3, #1
 8030be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030be6:	d18d      	bne.n	8030b04 <__ssvfiscanf_r+0xc6c>
 8030be8:	e7ad      	b.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030bea:	6978      	ldr	r0, [r7, #20]
 8030bec:	4936      	ldr	r1, [pc, #216]	@ (8030cc8 <__ssvfiscanf_r+0xe30>)
 8030bee:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030bf2:	6179      	str	r1, [r7, #20]
 8030bf4:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030bf8:	e7da      	b.n	8030bb0 <__ssvfiscanf_r+0xd18>
 8030bfa:	6978      	ldr	r0, [r7, #20]
 8030bfc:	4932      	ldr	r1, [pc, #200]	@ (8030cc8 <__ssvfiscanf_r+0xe30>)
 8030bfe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030c02:	6179      	str	r1, [r7, #20]
 8030c04:	2908      	cmp	r1, #8
 8030c06:	dcf5      	bgt.n	8030bf4 <__ssvfiscanf_r+0xd5c>
 8030c08:	e79d      	b.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030c0a:	0630      	lsls	r0, r6, #24
 8030c0c:	d59b      	bpl.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030c0e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030c12:	e7cd      	b.n	8030bb0 <__ssvfiscanf_r+0xd18>
 8030c14:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8030c18:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030c1c:	d193      	bne.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030c1e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8030c22:	2110      	movs	r1, #16
 8030c24:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8030c28:	6179      	str	r1, [r7, #20]
 8030c2a:	e7c1      	b.n	8030bb0 <__ssvfiscanf_r+0xd18>
 8030c2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c2e:	4621      	mov	r1, r4
 8030c30:	f7ff f8db 	bl	802fdea <__ssrefill_r>
 8030c34:	2800      	cmp	r0, #0
 8030c36:	d0d3      	beq.n	8030be0 <__ssvfiscanf_r+0xd48>
 8030c38:	e785      	b.n	8030b46 <__ssvfiscanf_r+0xcae>
 8030c3a:	0733      	lsls	r3, r6, #28
 8030c3c:	d50d      	bpl.n	8030c5a <__ssvfiscanf_r+0xdc2>
 8030c3e:	6a3b      	ldr	r3, [r7, #32]
 8030c40:	681b      	ldr	r3, [r3, #0]
 8030c42:	7018      	strb	r0, [r3, #0]
 8030c44:	69fb      	ldr	r3, [r7, #28]
 8030c46:	3301      	adds	r3, #1
 8030c48:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8030c4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030c50:	ebaa 0503 	sub.w	r5, sl, r3
 8030c54:	444d      	add	r5, r9
 8030c56:	f7ff bbac 	b.w	80303b2 <__ssvfiscanf_r+0x51a>
 8030c5a:	0775      	lsls	r5, r6, #29
 8030c5c:	d503      	bpl.n	8030c66 <__ssvfiscanf_r+0xdce>
 8030c5e:	6a3b      	ldr	r3, [r7, #32]
 8030c60:	681b      	ldr	r3, [r3, #0]
 8030c62:	8018      	strh	r0, [r3, #0]
 8030c64:	e7ee      	b.n	8030c44 <__ssvfiscanf_r+0xdac>
 8030c66:	f016 0201 	ands.w	r2, r6, #1
 8030c6a:	d001      	beq.n	8030c70 <__ssvfiscanf_r+0xdd8>
 8030c6c:	6a3b      	ldr	r3, [r7, #32]
 8030c6e:	e78e      	b.n	8030b8e <__ssvfiscanf_r+0xcf6>
 8030c70:	07b1      	lsls	r1, r6, #30
 8030c72:	d5fb      	bpl.n	8030c6c <__ssvfiscanf_r+0xdd4>
 8030c74:	4b15      	ldr	r3, [pc, #84]	@ (8030ccc <__ssvfiscanf_r+0xe34>)
 8030c76:	68f9      	ldr	r1, [r7, #12]
 8030c78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c7a:	4299      	cmp	r1, r3
 8030c7c:	697b      	ldr	r3, [r7, #20]
 8030c7e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030c82:	d106      	bne.n	8030c92 <__ssvfiscanf_r+0xdfa>
 8030c84:	f004 fc34 	bl	80354f0 <_strtoull_r>
 8030c88:	6a3b      	ldr	r3, [r7, #32]
 8030c8a:	681b      	ldr	r3, [r3, #0]
 8030c8c:	e9c3 0100 	strd	r0, r1, [r3]
 8030c90:	e7d8      	b.n	8030c44 <__ssvfiscanf_r+0xdac>
 8030c92:	f004 fb81 	bl	8035398 <_strtoll_r>
 8030c96:	e7f7      	b.n	8030c88 <__ssvfiscanf_r+0xdf0>
 8030c98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030c9c:	6818      	ldr	r0, [r3, #0]
 8030c9e:	f7fe f8ed 	bl	802ee7c <free>
 8030ca2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030ca6:	3401      	adds	r4, #1
 8030ca8:	601e      	str	r6, [r3, #0]
 8030caa:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8030cae:	f8db 5000 	ldr.w	r5, [fp]
 8030cb2:	42a3      	cmp	r3, r4
 8030cb4:	dcf0      	bgt.n	8030c98 <__ssvfiscanf_r+0xe00>
 8030cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030cba:	61fb      	str	r3, [r7, #28]
 8030cbc:	f7ff ba46 	b.w	803014c <__ssvfiscanf_r+0x2b4>
 8030cc0:	2400      	movs	r4, #0
 8030cc2:	4626      	mov	r6, r4
 8030cc4:	e7f1      	b.n	8030caa <__ssvfiscanf_r+0xe12>
 8030cc6:	bf00      	nop
 8030cc8:	0803c1d0 	.word	0x0803c1d0
 8030ccc:	08034ee9 	.word	0x08034ee9

08030cd0 <_svfprintf_r>:
 8030cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030cd4:	b0d3      	sub	sp, #332	@ 0x14c
 8030cd6:	468b      	mov	fp, r1
 8030cd8:	4691      	mov	r9, r2
 8030cda:	461e      	mov	r6, r3
 8030cdc:	9003      	str	r0, [sp, #12]
 8030cde:	f7fd f80d 	bl	802dcfc <_localeconv_r>
 8030ce2:	6803      	ldr	r3, [r0, #0]
 8030ce4:	9316      	str	r3, [sp, #88]	@ 0x58
 8030ce6:	4618      	mov	r0, r3
 8030ce8:	f7df fada 	bl	80102a0 <strlen>
 8030cec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030cf0:	900d      	str	r0, [sp, #52]	@ 0x34
 8030cf2:	061b      	lsls	r3, r3, #24
 8030cf4:	d515      	bpl.n	8030d22 <_svfprintf_r+0x52>
 8030cf6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8030cfa:	b993      	cbnz	r3, 8030d22 <_svfprintf_r+0x52>
 8030cfc:	9803      	ldr	r0, [sp, #12]
 8030cfe:	2140      	movs	r1, #64	@ 0x40
 8030d00:	f7fe f8c4 	bl	802ee8c <_malloc_r>
 8030d04:	f8cb 0000 	str.w	r0, [fp]
 8030d08:	f8cb 0010 	str.w	r0, [fp, #16]
 8030d0c:	b930      	cbnz	r0, 8030d1c <_svfprintf_r+0x4c>
 8030d0e:	9a03      	ldr	r2, [sp, #12]
 8030d10:	230c      	movs	r3, #12
 8030d12:	6013      	str	r3, [r2, #0]
 8030d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030d18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d1a:	e1f7      	b.n	803110c <_svfprintf_r+0x43c>
 8030d1c:	2340      	movs	r3, #64	@ 0x40
 8030d1e:	f8cb 3014 	str.w	r3, [fp, #20]
 8030d22:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030f70 <_svfprintf_r+0x2a0>
 8030d26:	2300      	movs	r3, #0
 8030d28:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8030d2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030d30:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8030d34:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d36:	9426      	str	r4, [sp, #152]	@ 0x98
 8030d38:	9304      	str	r3, [sp, #16]
 8030d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8030d3c:	9312      	str	r3, [sp, #72]	@ 0x48
 8030d3e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030d40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d42:	464b      	mov	r3, r9
 8030d44:	461d      	mov	r5, r3
 8030d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030d4a:	b10a      	cbz	r2, 8030d50 <_svfprintf_r+0x80>
 8030d4c:	2a25      	cmp	r2, #37	@ 0x25
 8030d4e:	d1f9      	bne.n	8030d44 <_svfprintf_r+0x74>
 8030d50:	ebb5 0709 	subs.w	r7, r5, r9
 8030d54:	d00d      	beq.n	8030d72 <_svfprintf_r+0xa2>
 8030d56:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d58:	443b      	add	r3, r7
 8030d5a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030d5c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030d5e:	3301      	adds	r3, #1
 8030d60:	2b07      	cmp	r3, #7
 8030d62:	e9c4 9700 	strd	r9, r7, [r4]
 8030d66:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030d68:	dc75      	bgt.n	8030e56 <_svfprintf_r+0x186>
 8030d6a:	3408      	adds	r4, #8
 8030d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030d6e:	443b      	add	r3, r7
 8030d70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d72:	782b      	ldrb	r3, [r5, #0]
 8030d74:	2b00      	cmp	r3, #0
 8030d76:	f001 8148 	beq.w	803200a <_svfprintf_r+0x133a>
 8030d7a:	2200      	movs	r2, #0
 8030d7c:	1c6b      	adds	r3, r5, #1
 8030d7e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030d82:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8030d86:	920e      	str	r2, [sp, #56]	@ 0x38
 8030d88:	4615      	mov	r5, r2
 8030d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030d8e:	9206      	str	r2, [sp, #24]
 8030d90:	930c      	str	r3, [sp, #48]	@ 0x30
 8030d92:	9b06      	ldr	r3, [sp, #24]
 8030d94:	3b20      	subs	r3, #32
 8030d96:	2b5a      	cmp	r3, #90	@ 0x5a
 8030d98:	f200 85a4 	bhi.w	80318e4 <_svfprintf_r+0xc14>
 8030d9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8030da0:	05a2009d 	.word	0x05a2009d
 8030da4:	00a505a2 	.word	0x00a505a2
 8030da8:	05a205a2 	.word	0x05a205a2
 8030dac:	008505a2 	.word	0x008505a2
 8030db0:	05a205a2 	.word	0x05a205a2
 8030db4:	00b200a8 	.word	0x00b200a8
 8030db8:	00af05a2 	.word	0x00af05a2
 8030dbc:	05a200b4 	.word	0x05a200b4
 8030dc0:	00d100ce 	.word	0x00d100ce
 8030dc4:	00d100d1 	.word	0x00d100d1
 8030dc8:	00d100d1 	.word	0x00d100d1
 8030dcc:	00d100d1 	.word	0x00d100d1
 8030dd0:	00d100d1 	.word	0x00d100d1
 8030dd4:	05a205a2 	.word	0x05a205a2
 8030dd8:	05a205a2 	.word	0x05a205a2
 8030ddc:	05a205a2 	.word	0x05a205a2
 8030de0:	014705a2 	.word	0x014705a2
 8030de4:	010805a2 	.word	0x010805a2
 8030de8:	0147011b 	.word	0x0147011b
 8030dec:	01470147 	.word	0x01470147
 8030df0:	05a205a2 	.word	0x05a205a2
 8030df4:	05a205a2 	.word	0x05a205a2
 8030df8:	05a200e2 	.word	0x05a200e2
 8030dfc:	049d05a2 	.word	0x049d05a2
 8030e00:	05a205a2 	.word	0x05a205a2
 8030e04:	04e705a2 	.word	0x04e705a2
 8030e08:	050805a2 	.word	0x050805a2
 8030e0c:	05a205a2 	.word	0x05a205a2
 8030e10:	05a2052a 	.word	0x05a2052a
 8030e14:	05a205a2 	.word	0x05a205a2
 8030e18:	05a205a2 	.word	0x05a205a2
 8030e1c:	05a205a2 	.word	0x05a205a2
 8030e20:	014705a2 	.word	0x014705a2
 8030e24:	010805a2 	.word	0x010805a2
 8030e28:	0147011d 	.word	0x0147011d
 8030e2c:	01470147 	.word	0x01470147
 8030e30:	011d00ee 	.word	0x011d00ee
 8030e34:	05a20102 	.word	0x05a20102
 8030e38:	05a200fb 	.word	0x05a200fb
 8030e3c:	049f047e 	.word	0x049f047e
 8030e40:	010204d6 	.word	0x010204d6
 8030e44:	04e705a2 	.word	0x04e705a2
 8030e48:	050a009b 	.word	0x050a009b
 8030e4c:	05a205a2 	.word	0x05a205a2
 8030e50:	05a20065 	.word	0x05a20065
 8030e54:	009b      	.short	0x009b
 8030e56:	9803      	ldr	r0, [sp, #12]
 8030e58:	aa26      	add	r2, sp, #152	@ 0x98
 8030e5a:	4659      	mov	r1, fp
 8030e5c:	f7fe fac0 	bl	802f3e0 <__ssprint_r>
 8030e60:	2800      	cmp	r0, #0
 8030e62:	f040 814e 	bne.w	8031102 <_svfprintf_r+0x432>
 8030e66:	ac29      	add	r4, sp, #164	@ 0xa4
 8030e68:	e780      	b.n	8030d6c <_svfprintf_r+0x9c>
 8030e6a:	4b43      	ldr	r3, [pc, #268]	@ (8030f78 <_svfprintf_r+0x2a8>)
 8030e6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8030e6e:	f015 0320 	ands.w	r3, r5, #32
 8030e72:	f000 84c2 	beq.w	80317fa <_svfprintf_r+0xb2a>
 8030e76:	3607      	adds	r6, #7
 8030e78:	f026 0307 	bic.w	r3, r6, #7
 8030e7c:	461a      	mov	r2, r3
 8030e7e:	685f      	ldr	r7, [r3, #4]
 8030e80:	f852 6b08 	ldr.w	r6, [r2], #8
 8030e84:	9207      	str	r2, [sp, #28]
 8030e86:	07eb      	lsls	r3, r5, #31
 8030e88:	d50a      	bpl.n	8030ea0 <_svfprintf_r+0x1d0>
 8030e8a:	ea56 0307 	orrs.w	r3, r6, r7
 8030e8e:	d007      	beq.n	8030ea0 <_svfprintf_r+0x1d0>
 8030e90:	2330      	movs	r3, #48	@ 0x30
 8030e92:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8030e96:	9b06      	ldr	r3, [sp, #24]
 8030e98:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8030e9c:	f045 0502 	orr.w	r5, r5, #2
 8030ea0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030ea4:	2302      	movs	r3, #2
 8030ea6:	f000 bc28 	b.w	80316fa <_svfprintf_r+0xa2a>
 8030eaa:	9803      	ldr	r0, [sp, #12]
 8030eac:	f7fc ff26 	bl	802dcfc <_localeconv_r>
 8030eb0:	6843      	ldr	r3, [r0, #4]
 8030eb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030eb4:	4618      	mov	r0, r3
 8030eb6:	f7df f9f3 	bl	80102a0 <strlen>
 8030eba:	9012      	str	r0, [sp, #72]	@ 0x48
 8030ebc:	9803      	ldr	r0, [sp, #12]
 8030ebe:	f7fc ff1d 	bl	802dcfc <_localeconv_r>
 8030ec2:	6883      	ldr	r3, [r0, #8]
 8030ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8030ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030ec8:	b12b      	cbz	r3, 8030ed6 <_svfprintf_r+0x206>
 8030eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030ecc:	b11b      	cbz	r3, 8030ed6 <_svfprintf_r+0x206>
 8030ece:	781b      	ldrb	r3, [r3, #0]
 8030ed0:	b10b      	cbz	r3, 8030ed6 <_svfprintf_r+0x206>
 8030ed2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8030ed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030ed8:	e757      	b.n	8030d8a <_svfprintf_r+0xba>
 8030eda:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8030ede:	2b00      	cmp	r3, #0
 8030ee0:	d1f9      	bne.n	8030ed6 <_svfprintf_r+0x206>
 8030ee2:	2320      	movs	r3, #32
 8030ee4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030ee8:	e7f5      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030eea:	f045 0501 	orr.w	r5, r5, #1
 8030eee:	e7f2      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030ef0:	f856 3b04 	ldr.w	r3, [r6], #4
 8030ef4:	930e      	str	r3, [sp, #56]	@ 0x38
 8030ef6:	2b00      	cmp	r3, #0
 8030ef8:	daed      	bge.n	8030ed6 <_svfprintf_r+0x206>
 8030efa:	425b      	negs	r3, r3
 8030efc:	930e      	str	r3, [sp, #56]	@ 0x38
 8030efe:	f045 0504 	orr.w	r5, r5, #4
 8030f02:	e7e8      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030f04:	232b      	movs	r3, #43	@ 0x2b
 8030f06:	e7ed      	b.n	8030ee4 <_svfprintf_r+0x214>
 8030f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f0e:	9206      	str	r2, [sp, #24]
 8030f10:	2a2a      	cmp	r2, #42	@ 0x2a
 8030f12:	d10f      	bne.n	8030f34 <_svfprintf_r+0x264>
 8030f14:	f856 2b04 	ldr.w	r2, [r6], #4
 8030f18:	930c      	str	r3, [sp, #48]	@ 0x30
 8030f1a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8030f1e:	e7da      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030f20:	fb01 2808 	mla	r8, r1, r8, r2
 8030f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f28:	9206      	str	r2, [sp, #24]
 8030f2a:	9a06      	ldr	r2, [sp, #24]
 8030f2c:	3a30      	subs	r2, #48	@ 0x30
 8030f2e:	2a09      	cmp	r2, #9
 8030f30:	d9f6      	bls.n	8030f20 <_svfprintf_r+0x250>
 8030f32:	e72d      	b.n	8030d90 <_svfprintf_r+0xc0>
 8030f34:	f04f 0800 	mov.w	r8, #0
 8030f38:	210a      	movs	r1, #10
 8030f3a:	e7f6      	b.n	8030f2a <_svfprintf_r+0x25a>
 8030f3c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8030f40:	e7c9      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030f42:	2200      	movs	r2, #0
 8030f44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f46:	920e      	str	r2, [sp, #56]	@ 0x38
 8030f48:	210a      	movs	r1, #10
 8030f4a:	9a06      	ldr	r2, [sp, #24]
 8030f4c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8030f4e:	3a30      	subs	r2, #48	@ 0x30
 8030f50:	fb01 2200 	mla	r2, r1, r0, r2
 8030f54:	920e      	str	r2, [sp, #56]	@ 0x38
 8030f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f5a:	9206      	str	r2, [sp, #24]
 8030f5c:	3a30      	subs	r2, #48	@ 0x30
 8030f5e:	2a09      	cmp	r2, #9
 8030f60:	d9f3      	bls.n	8030f4a <_svfprintf_r+0x27a>
 8030f62:	e715      	b.n	8030d90 <_svfprintf_r+0xc0>
 8030f64:	f045 0508 	orr.w	r5, r5, #8
 8030f68:	e7b5      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030f6a:	bf00      	nop
 8030f6c:	f3af 8000 	nop.w
	...
 8030f78:	0803bc8b 	.word	0x0803bc8b
 8030f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f7e:	781b      	ldrb	r3, [r3, #0]
 8030f80:	2b68      	cmp	r3, #104	@ 0x68
 8030f82:	bf01      	itttt	eq
 8030f84:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8030f86:	3301      	addeq	r3, #1
 8030f88:	930c      	streq	r3, [sp, #48]	@ 0x30
 8030f8a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8030f8e:	bf18      	it	ne
 8030f90:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8030f94:	e79f      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f98:	781b      	ldrb	r3, [r3, #0]
 8030f9a:	2b6c      	cmp	r3, #108	@ 0x6c
 8030f9c:	d105      	bne.n	8030faa <_svfprintf_r+0x2da>
 8030f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030fa0:	3301      	adds	r3, #1
 8030fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8030fa4:	f045 0520 	orr.w	r5, r5, #32
 8030fa8:	e795      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030faa:	f045 0510 	orr.w	r5, r5, #16
 8030fae:	e792      	b.n	8030ed6 <_svfprintf_r+0x206>
 8030fb0:	4632      	mov	r2, r6
 8030fb2:	f852 3b04 	ldr.w	r3, [r2], #4
 8030fb6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030fba:	2300      	movs	r3, #0
 8030fbc:	9207      	str	r2, [sp, #28]
 8030fbe:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030fc2:	469a      	mov	sl, r3
 8030fc4:	f04f 0801 	mov.w	r8, #1
 8030fc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8030fca:	461f      	mov	r7, r3
 8030fcc:	9308      	str	r3, [sp, #32]
 8030fce:	461e      	mov	r6, r3
 8030fd0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030fd4:	e1d2      	b.n	803137c <_svfprintf_r+0x6ac>
 8030fd6:	f045 0510 	orr.w	r5, r5, #16
 8030fda:	06af      	lsls	r7, r5, #26
 8030fdc:	d512      	bpl.n	8031004 <_svfprintf_r+0x334>
 8030fde:	3607      	adds	r6, #7
 8030fe0:	f026 0307 	bic.w	r3, r6, #7
 8030fe4:	461a      	mov	r2, r3
 8030fe6:	685f      	ldr	r7, [r3, #4]
 8030fe8:	f852 6b08 	ldr.w	r6, [r2], #8
 8030fec:	9207      	str	r2, [sp, #28]
 8030fee:	2f00      	cmp	r7, #0
 8030ff0:	da06      	bge.n	8031000 <_svfprintf_r+0x330>
 8030ff2:	4276      	negs	r6, r6
 8030ff4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030ff8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8030ffc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031000:	2301      	movs	r3, #1
 8031002:	e37d      	b.n	8031700 <_svfprintf_r+0xa30>
 8031004:	4633      	mov	r3, r6
 8031006:	06ee      	lsls	r6, r5, #27
 8031008:	f853 7b04 	ldr.w	r7, [r3], #4
 803100c:	9307      	str	r3, [sp, #28]
 803100e:	d502      	bpl.n	8031016 <_svfprintf_r+0x346>
 8031010:	463e      	mov	r6, r7
 8031012:	17ff      	asrs	r7, r7, #31
 8031014:	e7eb      	b.n	8030fee <_svfprintf_r+0x31e>
 8031016:	0668      	lsls	r0, r5, #25
 8031018:	d503      	bpl.n	8031022 <_svfprintf_r+0x352>
 803101a:	b23e      	sxth	r6, r7
 803101c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8031020:	e7e5      	b.n	8030fee <_svfprintf_r+0x31e>
 8031022:	05a9      	lsls	r1, r5, #22
 8031024:	d5f4      	bpl.n	8031010 <_svfprintf_r+0x340>
 8031026:	b27e      	sxtb	r6, r7
 8031028:	f347 17c0 	sbfx	r7, r7, #7, #1
 803102c:	e7df      	b.n	8030fee <_svfprintf_r+0x31e>
 803102e:	3607      	adds	r6, #7
 8031030:	f026 0307 	bic.w	r3, r6, #7
 8031034:	ecb3 7b02 	vldmia	r3!, {d7}
 8031038:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803103c:	9307      	str	r3, [sp, #28]
 803103e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031040:	931a      	str	r3, [sp, #104]	@ 0x68
 8031042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8031048:	931b      	str	r3, [sp, #108]	@ 0x6c
 803104a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803104e:	4b81      	ldr	r3, [pc, #516]	@ (8031254 <_svfprintf_r+0x584>)
 8031050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031054:	f7df fd82 	bl	8010b5c <__aeabi_dcmpun>
 8031058:	bb10      	cbnz	r0, 80310a0 <_svfprintf_r+0x3d0>
 803105a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803105e:	4b7d      	ldr	r3, [pc, #500]	@ (8031254 <_svfprintf_r+0x584>)
 8031060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031064:	f7df fd5c 	bl	8010b20 <__aeabi_dcmple>
 8031068:	b9d0      	cbnz	r0, 80310a0 <_svfprintf_r+0x3d0>
 803106a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803106e:	2200      	movs	r2, #0
 8031070:	2300      	movs	r3, #0
 8031072:	f7df fd4b 	bl	8010b0c <__aeabi_dcmplt>
 8031076:	b110      	cbz	r0, 803107e <_svfprintf_r+0x3ae>
 8031078:	232d      	movs	r3, #45	@ 0x2d
 803107a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803107e:	4a76      	ldr	r2, [pc, #472]	@ (8031258 <_svfprintf_r+0x588>)
 8031080:	4b76      	ldr	r3, [pc, #472]	@ (803125c <_svfprintf_r+0x58c>)
 8031082:	9906      	ldr	r1, [sp, #24]
 8031084:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8031088:	2947      	cmp	r1, #71	@ 0x47
 803108a:	bfd4      	ite	le
 803108c:	4691      	movle	r9, r2
 803108e:	4699      	movgt	r9, r3
 8031090:	f04f 0a00 	mov.w	sl, #0
 8031094:	f04f 0803 	mov.w	r8, #3
 8031098:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803109c:	f000 bfec 	b.w	8032078 <_svfprintf_r+0x13a8>
 80310a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80310a4:	4610      	mov	r0, r2
 80310a6:	4619      	mov	r1, r3
 80310a8:	f7df fd58 	bl	8010b5c <__aeabi_dcmpun>
 80310ac:	4682      	mov	sl, r0
 80310ae:	b140      	cbz	r0, 80310c2 <_svfprintf_r+0x3f2>
 80310b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80310b2:	4a6b      	ldr	r2, [pc, #428]	@ (8031260 <_svfprintf_r+0x590>)
 80310b4:	2b00      	cmp	r3, #0
 80310b6:	bfbc      	itt	lt
 80310b8:	232d      	movlt	r3, #45	@ 0x2d
 80310ba:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80310be:	4b69      	ldr	r3, [pc, #420]	@ (8031264 <_svfprintf_r+0x594>)
 80310c0:	e7df      	b.n	8031082 <_svfprintf_r+0x3b2>
 80310c2:	9b06      	ldr	r3, [sp, #24]
 80310c4:	2b61      	cmp	r3, #97	@ 0x61
 80310c6:	d025      	beq.n	8031114 <_svfprintf_r+0x444>
 80310c8:	2b41      	cmp	r3, #65	@ 0x41
 80310ca:	d125      	bne.n	8031118 <_svfprintf_r+0x448>
 80310cc:	2358      	movs	r3, #88	@ 0x58
 80310ce:	2230      	movs	r2, #48	@ 0x30
 80310d0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80310d4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80310d8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80310dc:	f045 0502 	orr.w	r5, r5, #2
 80310e0:	f340 80a5 	ble.w	803122e <_svfprintf_r+0x55e>
 80310e4:	9803      	ldr	r0, [sp, #12]
 80310e6:	f108 0101 	add.w	r1, r8, #1
 80310ea:	f7fd fecf 	bl	802ee8c <_malloc_r>
 80310ee:	4681      	mov	r9, r0
 80310f0:	2800      	cmp	r0, #0
 80310f2:	f040 80a1 	bne.w	8031238 <_svfprintf_r+0x568>
 80310f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80310fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80310fe:	f8ab 300c 	strh.w	r3, [fp, #12]
 8031102:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031106:	065b      	lsls	r3, r3, #25
 8031108:	f53f ae04 	bmi.w	8030d14 <_svfprintf_r+0x44>
 803110c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803110e:	b053      	add	sp, #332	@ 0x14c
 8031110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031114:	2378      	movs	r3, #120	@ 0x78
 8031116:	e7da      	b.n	80310ce <_svfprintf_r+0x3fe>
 8031118:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803111c:	f000 808e 	beq.w	803123c <_svfprintf_r+0x56c>
 8031120:	9b06      	ldr	r3, [sp, #24]
 8031122:	f023 0320 	bic.w	r3, r3, #32
 8031126:	2b47      	cmp	r3, #71	@ 0x47
 8031128:	d105      	bne.n	8031136 <_svfprintf_r+0x466>
 803112a:	f1b8 0f00 	cmp.w	r8, #0
 803112e:	d102      	bne.n	8031136 <_svfprintf_r+0x466>
 8031130:	46c2      	mov	sl, r8
 8031132:	f04f 0801 	mov.w	r8, #1
 8031136:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803113a:	9311      	str	r3, [sp, #68]	@ 0x44
 803113c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803113e:	2b00      	cmp	r3, #0
 8031140:	da7f      	bge.n	8031242 <_svfprintf_r+0x572>
 8031142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031144:	9314      	str	r3, [sp, #80]	@ 0x50
 8031146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031148:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803114c:	9315      	str	r3, [sp, #84]	@ 0x54
 803114e:	232d      	movs	r3, #45	@ 0x2d
 8031150:	931c      	str	r3, [sp, #112]	@ 0x70
 8031152:	9b06      	ldr	r3, [sp, #24]
 8031154:	f023 0320 	bic.w	r3, r3, #32
 8031158:	2b41      	cmp	r3, #65	@ 0x41
 803115a:	9308      	str	r3, [sp, #32]
 803115c:	f040 81e6 	bne.w	803152c <_svfprintf_r+0x85c>
 8031160:	a820      	add	r0, sp, #128	@ 0x80
 8031162:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031166:	f7fc fe9b 	bl	802dea0 <frexp>
 803116a:	2200      	movs	r2, #0
 803116c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8031170:	ec51 0b10 	vmov	r0, r1, d0
 8031174:	f7df fa58 	bl	8010628 <__aeabi_dmul>
 8031178:	4602      	mov	r2, r0
 803117a:	460b      	mov	r3, r1
 803117c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031180:	2200      	movs	r2, #0
 8031182:	2300      	movs	r3, #0
 8031184:	f7df fcb8 	bl	8010af8 <__aeabi_dcmpeq>
 8031188:	b108      	cbz	r0, 803118e <_svfprintf_r+0x4be>
 803118a:	2301      	movs	r3, #1
 803118c:	9320      	str	r3, [sp, #128]	@ 0x80
 803118e:	4a36      	ldr	r2, [pc, #216]	@ (8031268 <_svfprintf_r+0x598>)
 8031190:	4b36      	ldr	r3, [pc, #216]	@ (803126c <_svfprintf_r+0x59c>)
 8031192:	9906      	ldr	r1, [sp, #24]
 8031194:	2961      	cmp	r1, #97	@ 0x61
 8031196:	bf18      	it	ne
 8031198:	461a      	movne	r2, r3
 803119a:	9210      	str	r2, [sp, #64]	@ 0x40
 803119c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80311a0:	464e      	mov	r6, r9
 80311a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311a6:	4b32      	ldr	r3, [pc, #200]	@ (8031270 <_svfprintf_r+0x5a0>)
 80311a8:	2200      	movs	r2, #0
 80311aa:	f7df fa3d 	bl	8010628 <__aeabi_dmul>
 80311ae:	4602      	mov	r2, r0
 80311b0:	460b      	mov	r3, r1
 80311b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80311b6:	f7df fce7 	bl	8010b88 <__aeabi_d2iz>
 80311ba:	9013      	str	r0, [sp, #76]	@ 0x4c
 80311bc:	f7df f9ca 	bl	8010554 <__aeabi_i2d>
 80311c0:	4602      	mov	r2, r0
 80311c2:	460b      	mov	r3, r1
 80311c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311c8:	f7df f876 	bl	80102b8 <__aeabi_dsub>
 80311cc:	4602      	mov	r2, r0
 80311ce:	460b      	mov	r3, r1
 80311d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80311d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80311d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80311d8:	5c9b      	ldrb	r3, [r3, r2]
 80311da:	f806 3b01 	strb.w	r3, [r6], #1
 80311de:	1c7a      	adds	r2, r7, #1
 80311e0:	d006      	beq.n	80311f0 <_svfprintf_r+0x520>
 80311e2:	1e7b      	subs	r3, r7, #1
 80311e4:	931d      	str	r3, [sp, #116]	@ 0x74
 80311e6:	2200      	movs	r2, #0
 80311e8:	2300      	movs	r3, #0
 80311ea:	f7df fc85 	bl	8010af8 <__aeabi_dcmpeq>
 80311ee:	b370      	cbz	r0, 803124e <_svfprintf_r+0x57e>
 80311f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311f4:	4b1f      	ldr	r3, [pc, #124]	@ (8031274 <_svfprintf_r+0x5a4>)
 80311f6:	2200      	movs	r2, #0
 80311f8:	f7df fca6 	bl	8010b48 <__aeabi_dcmpgt>
 80311fc:	2800      	cmp	r0, #0
 80311fe:	d13b      	bne.n	8031278 <_svfprintf_r+0x5a8>
 8031200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031204:	4b1b      	ldr	r3, [pc, #108]	@ (8031274 <_svfprintf_r+0x5a4>)
 8031206:	2200      	movs	r2, #0
 8031208:	f7df fc76 	bl	8010af8 <__aeabi_dcmpeq>
 803120c:	b110      	cbz	r0, 8031214 <_svfprintf_r+0x544>
 803120e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031210:	07db      	lsls	r3, r3, #31
 8031212:	d431      	bmi.n	8031278 <_svfprintf_r+0x5a8>
 8031214:	4633      	mov	r3, r6
 8031216:	19f1      	adds	r1, r6, r7
 8031218:	2030      	movs	r0, #48	@ 0x30
 803121a:	1aca      	subs	r2, r1, r3
 803121c:	2a00      	cmp	r2, #0
 803121e:	f280 8182 	bge.w	8031526 <_svfprintf_r+0x856>
 8031222:	1c7b      	adds	r3, r7, #1
 8031224:	3701      	adds	r7, #1
 8031226:	bfb8      	it	lt
 8031228:	2300      	movlt	r3, #0
 803122a:	441e      	add	r6, r3
 803122c:	e038      	b.n	80312a0 <_svfprintf_r+0x5d0>
 803122e:	f04f 0a00 	mov.w	sl, #0
 8031232:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8031236:	e77e      	b.n	8031136 <_svfprintf_r+0x466>
 8031238:	4682      	mov	sl, r0
 803123a:	e77c      	b.n	8031136 <_svfprintf_r+0x466>
 803123c:	f04f 0806 	mov.w	r8, #6
 8031240:	e779      	b.n	8031136 <_svfprintf_r+0x466>
 8031242:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8031246:	2300      	movs	r3, #0
 8031248:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803124c:	e780      	b.n	8031150 <_svfprintf_r+0x480>
 803124e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8031250:	e7a7      	b.n	80311a2 <_svfprintf_r+0x4d2>
 8031252:	bf00      	nop
 8031254:	7fefffff 	.word	0x7fefffff
 8031258:	0803bc7b 	.word	0x0803bc7b
 803125c:	0803bc7f 	.word	0x0803bc7f
 8031260:	0803bc83 	.word	0x0803bc83
 8031264:	0803bc87 	.word	0x0803bc87
 8031268:	0803bc8b 	.word	0x0803bc8b
 803126c:	0803bc9c 	.word	0x0803bc9c
 8031270:	40300000 	.word	0x40300000
 8031274:	3fe00000 	.word	0x3fe00000
 8031278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803127a:	9624      	str	r6, [sp, #144]	@ 0x90
 803127c:	7bd9      	ldrb	r1, [r3, #15]
 803127e:	2030      	movs	r0, #48	@ 0x30
 8031280:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031282:	1e53      	subs	r3, r2, #1
 8031284:	9324      	str	r3, [sp, #144]	@ 0x90
 8031286:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803128a:	428b      	cmp	r3, r1
 803128c:	f000 8148 	beq.w	8031520 <_svfprintf_r+0x850>
 8031290:	2b39      	cmp	r3, #57	@ 0x39
 8031292:	bf0b      	itete	eq
 8031294:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8031296:	3301      	addne	r3, #1
 8031298:	7a9b      	ldrbeq	r3, [r3, #10]
 803129a:	b2db      	uxtbne	r3, r3
 803129c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80312a0:	eba6 0309 	sub.w	r3, r6, r9
 80312a4:	9304      	str	r3, [sp, #16]
 80312a6:	9b08      	ldr	r3, [sp, #32]
 80312a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80312aa:	2b47      	cmp	r3, #71	@ 0x47
 80312ac:	f040 8187 	bne.w	80315be <_svfprintf_r+0x8ee>
 80312b0:	1cf1      	adds	r1, r6, #3
 80312b2:	db02      	blt.n	80312ba <_svfprintf_r+0x5ea>
 80312b4:	4546      	cmp	r6, r8
 80312b6:	f340 81a5 	ble.w	8031604 <_svfprintf_r+0x934>
 80312ba:	9b06      	ldr	r3, [sp, #24]
 80312bc:	3b02      	subs	r3, #2
 80312be:	9306      	str	r3, [sp, #24]
 80312c0:	9906      	ldr	r1, [sp, #24]
 80312c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80312c6:	f021 0120 	bic.w	r1, r1, #32
 80312ca:	2941      	cmp	r1, #65	@ 0x41
 80312cc:	bf08      	it	eq
 80312ce:	320f      	addeq	r2, #15
 80312d0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80312d4:	bf06      	itte	eq
 80312d6:	b2d2      	uxtbeq	r2, r2
 80312d8:	2101      	moveq	r1, #1
 80312da:	2100      	movne	r1, #0
 80312dc:	2b00      	cmp	r3, #0
 80312de:	9320      	str	r3, [sp, #128]	@ 0x80
 80312e0:	bfb8      	it	lt
 80312e2:	f1c6 0301 	rsblt	r3, r6, #1
 80312e6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80312ea:	bfb4      	ite	lt
 80312ec:	222d      	movlt	r2, #45	@ 0x2d
 80312ee:	222b      	movge	r2, #43	@ 0x2b
 80312f0:	2b09      	cmp	r3, #9
 80312f2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80312f6:	f340 8178 	ble.w	80315ea <_svfprintf_r+0x91a>
 80312fa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80312fe:	270a      	movs	r7, #10
 8031300:	4602      	mov	r2, r0
 8031302:	fbb3 f6f7 	udiv	r6, r3, r7
 8031306:	fb07 3116 	mls	r1, r7, r6, r3
 803130a:	3130      	adds	r1, #48	@ 0x30
 803130c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8031310:	4619      	mov	r1, r3
 8031312:	2963      	cmp	r1, #99	@ 0x63
 8031314:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8031318:	4633      	mov	r3, r6
 803131a:	dcf1      	bgt.n	8031300 <_svfprintf_r+0x630>
 803131c:	3330      	adds	r3, #48	@ 0x30
 803131e:	1e91      	subs	r1, r2, #2
 8031320:	f800 3c01 	strb.w	r3, [r0, #-1]
 8031324:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8031328:	460b      	mov	r3, r1
 803132a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803132e:	4283      	cmp	r3, r0
 8031330:	f0c0 8156 	bcc.w	80315e0 <_svfprintf_r+0x910>
 8031334:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8031338:	1a9b      	subs	r3, r3, r2
 803133a:	4281      	cmp	r1, r0
 803133c:	bf88      	it	hi
 803133e:	2300      	movhi	r3, #0
 8031340:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031344:	441a      	add	r2, r3
 8031346:	ab22      	add	r3, sp, #136	@ 0x88
 8031348:	1ad3      	subs	r3, r2, r3
 803134a:	9a04      	ldr	r2, [sp, #16]
 803134c:	9318      	str	r3, [sp, #96]	@ 0x60
 803134e:	2a01      	cmp	r2, #1
 8031350:	eb03 0802 	add.w	r8, r3, r2
 8031354:	dc01      	bgt.n	803135a <_svfprintf_r+0x68a>
 8031356:	07ea      	lsls	r2, r5, #31
 8031358:	d501      	bpl.n	803135e <_svfprintf_r+0x68e>
 803135a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803135c:	4498      	add	r8, r3
 803135e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031362:	2700      	movs	r7, #0
 8031364:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8031368:	9311      	str	r3, [sp, #68]	@ 0x44
 803136a:	9708      	str	r7, [sp, #32]
 803136c:	463e      	mov	r6, r7
 803136e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8031370:	2b00      	cmp	r3, #0
 8031372:	f040 818f 	bne.w	8031694 <_svfprintf_r+0x9c4>
 8031376:	2300      	movs	r3, #0
 8031378:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803137a:	9310      	str	r3, [sp, #64]	@ 0x40
 803137c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803137e:	4543      	cmp	r3, r8
 8031380:	bfb8      	it	lt
 8031382:	4643      	movlt	r3, r8
 8031384:	9311      	str	r3, [sp, #68]	@ 0x44
 8031386:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803138a:	b113      	cbz	r3, 8031392 <_svfprintf_r+0x6c2>
 803138c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803138e:	3301      	adds	r3, #1
 8031390:	9311      	str	r3, [sp, #68]	@ 0x44
 8031392:	f015 0302 	ands.w	r3, r5, #2
 8031396:	931c      	str	r3, [sp, #112]	@ 0x70
 8031398:	bf1e      	ittt	ne
 803139a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803139c:	3302      	addne	r3, #2
 803139e:	9311      	strne	r3, [sp, #68]	@ 0x44
 80313a0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80313a4:	931d      	str	r3, [sp, #116]	@ 0x74
 80313a6:	d122      	bne.n	80313ee <_svfprintf_r+0x71e>
 80313a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80313aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80313ac:	1a9b      	subs	r3, r3, r2
 80313ae:	2b00      	cmp	r3, #0
 80313b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80313b2:	dd1c      	ble.n	80313ee <_svfprintf_r+0x71e>
 80313b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80313b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80313ba:	2810      	cmp	r0, #16
 80313bc:	489e      	ldr	r0, [pc, #632]	@ (8031638 <_svfprintf_r+0x968>)
 80313be:	6020      	str	r0, [r4, #0]
 80313c0:	f102 0201 	add.w	r2, r2, #1
 80313c4:	f104 0108 	add.w	r1, r4, #8
 80313c8:	f300 8298 	bgt.w	80318fc <_svfprintf_r+0xc2c>
 80313cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80313ce:	6060      	str	r0, [r4, #4]
 80313d0:	4403      	add	r3, r0
 80313d2:	2a07      	cmp	r2, #7
 80313d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80313d8:	f340 82a5 	ble.w	8031926 <_svfprintf_r+0xc56>
 80313dc:	9803      	ldr	r0, [sp, #12]
 80313de:	aa26      	add	r2, sp, #152	@ 0x98
 80313e0:	4659      	mov	r1, fp
 80313e2:	f7fd fffd 	bl	802f3e0 <__ssprint_r>
 80313e6:	2800      	cmp	r0, #0
 80313e8:	f040 85ed 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 80313ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80313ee:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80313f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80313f4:	b16a      	cbz	r2, 8031412 <_svfprintf_r+0x742>
 80313f6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80313fa:	6022      	str	r2, [r4, #0]
 80313fc:	2201      	movs	r2, #1
 80313fe:	4413      	add	r3, r2
 8031400:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031402:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031404:	6062      	str	r2, [r4, #4]
 8031406:	4413      	add	r3, r2
 8031408:	2b07      	cmp	r3, #7
 803140a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803140c:	f300 828d 	bgt.w	803192a <_svfprintf_r+0xc5a>
 8031410:	3408      	adds	r4, #8
 8031412:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8031414:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031416:	b162      	cbz	r2, 8031432 <_svfprintf_r+0x762>
 8031418:	aa1f      	add	r2, sp, #124	@ 0x7c
 803141a:	6022      	str	r2, [r4, #0]
 803141c:	2202      	movs	r2, #2
 803141e:	4413      	add	r3, r2
 8031420:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031422:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031424:	6062      	str	r2, [r4, #4]
 8031426:	3301      	adds	r3, #1
 8031428:	2b07      	cmp	r3, #7
 803142a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803142c:	f300 8287 	bgt.w	803193e <_svfprintf_r+0xc6e>
 8031430:	3408      	adds	r4, #8
 8031432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8031434:	2b80      	cmp	r3, #128	@ 0x80
 8031436:	d122      	bne.n	803147e <_svfprintf_r+0x7ae>
 8031438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803143a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803143c:	1a9b      	subs	r3, r3, r2
 803143e:	2b00      	cmp	r3, #0
 8031440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031442:	dd1c      	ble.n	803147e <_svfprintf_r+0x7ae>
 8031444:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031446:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803144a:	2810      	cmp	r0, #16
 803144c:	487b      	ldr	r0, [pc, #492]	@ (803163c <_svfprintf_r+0x96c>)
 803144e:	6020      	str	r0, [r4, #0]
 8031450:	f102 0201 	add.w	r2, r2, #1
 8031454:	f104 0108 	add.w	r1, r4, #8
 8031458:	f300 827b 	bgt.w	8031952 <_svfprintf_r+0xc82>
 803145c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803145e:	6060      	str	r0, [r4, #4]
 8031460:	4403      	add	r3, r0
 8031462:	2a07      	cmp	r2, #7
 8031464:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031468:	f340 8288 	ble.w	803197c <_svfprintf_r+0xcac>
 803146c:	9803      	ldr	r0, [sp, #12]
 803146e:	aa26      	add	r2, sp, #152	@ 0x98
 8031470:	4659      	mov	r1, fp
 8031472:	f7fd ffb5 	bl	802f3e0 <__ssprint_r>
 8031476:	2800      	cmp	r0, #0
 8031478:	f040 85a5 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803147c:	ac29      	add	r4, sp, #164	@ 0xa4
 803147e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031480:	eba3 0308 	sub.w	r3, r3, r8
 8031484:	2b00      	cmp	r3, #0
 8031486:	9310      	str	r3, [sp, #64]	@ 0x40
 8031488:	dd1c      	ble.n	80314c4 <_svfprintf_r+0x7f4>
 803148a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803148c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031490:	2810      	cmp	r0, #16
 8031492:	486a      	ldr	r0, [pc, #424]	@ (803163c <_svfprintf_r+0x96c>)
 8031494:	6020      	str	r0, [r4, #0]
 8031496:	f102 0201 	add.w	r2, r2, #1
 803149a:	f104 0108 	add.w	r1, r4, #8
 803149e:	f300 826f 	bgt.w	8031980 <_svfprintf_r+0xcb0>
 80314a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80314a4:	6060      	str	r0, [r4, #4]
 80314a6:	4403      	add	r3, r0
 80314a8:	2a07      	cmp	r2, #7
 80314aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80314ae:	f340 827c 	ble.w	80319aa <_svfprintf_r+0xcda>
 80314b2:	9803      	ldr	r0, [sp, #12]
 80314b4:	aa26      	add	r2, sp, #152	@ 0x98
 80314b6:	4659      	mov	r1, fp
 80314b8:	f7fd ff92 	bl	802f3e0 <__ssprint_r>
 80314bc:	2800      	cmp	r0, #0
 80314be:	f040 8582 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 80314c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80314c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80314c8:	05ea      	lsls	r2, r5, #23
 80314ca:	f100 8275 	bmi.w	80319b8 <_svfprintf_r+0xce8>
 80314ce:	4443      	add	r3, r8
 80314d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80314d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80314d4:	3301      	adds	r3, #1
 80314d6:	2b07      	cmp	r3, #7
 80314d8:	e9c4 9800 	strd	r9, r8, [r4]
 80314dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80314de:	f300 82b1 	bgt.w	8031a44 <_svfprintf_r+0xd74>
 80314e2:	3408      	adds	r4, #8
 80314e4:	076a      	lsls	r2, r5, #29
 80314e6:	f100 8550 	bmi.w	8031f8a <_svfprintf_r+0x12ba>
 80314ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80314ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80314f0:	428a      	cmp	r2, r1
 80314f2:	bfac      	ite	ge
 80314f4:	189b      	addge	r3, r3, r2
 80314f6:	185b      	addlt	r3, r3, r1
 80314f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80314fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314fc:	b13b      	cbz	r3, 803150e <_svfprintf_r+0x83e>
 80314fe:	9803      	ldr	r0, [sp, #12]
 8031500:	aa26      	add	r2, sp, #152	@ 0x98
 8031502:	4659      	mov	r1, fp
 8031504:	f7fd ff6c 	bl	802f3e0 <__ssprint_r>
 8031508:	2800      	cmp	r0, #0
 803150a:	f040 855c 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803150e:	2300      	movs	r3, #0
 8031510:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031512:	f1ba 0f00 	cmp.w	sl, #0
 8031516:	f040 8572 	bne.w	8031ffe <_svfprintf_r+0x132e>
 803151a:	9e07      	ldr	r6, [sp, #28]
 803151c:	ac29      	add	r4, sp, #164	@ 0xa4
 803151e:	e0c6      	b.n	80316ae <_svfprintf_r+0x9de>
 8031520:	f802 0c01 	strb.w	r0, [r2, #-1]
 8031524:	e6ac      	b.n	8031280 <_svfprintf_r+0x5b0>
 8031526:	f803 0b01 	strb.w	r0, [r3], #1
 803152a:	e676      	b.n	803121a <_svfprintf_r+0x54a>
 803152c:	9b08      	ldr	r3, [sp, #32]
 803152e:	2b46      	cmp	r3, #70	@ 0x46
 8031530:	d005      	beq.n	803153e <_svfprintf_r+0x86e>
 8031532:	2b45      	cmp	r3, #69	@ 0x45
 8031534:	d11a      	bne.n	803156c <_svfprintf_r+0x89c>
 8031536:	f108 0601 	add.w	r6, r8, #1
 803153a:	2102      	movs	r1, #2
 803153c:	e001      	b.n	8031542 <_svfprintf_r+0x872>
 803153e:	4646      	mov	r6, r8
 8031540:	2103      	movs	r1, #3
 8031542:	ab24      	add	r3, sp, #144	@ 0x90
 8031544:	9301      	str	r3, [sp, #4]
 8031546:	ab21      	add	r3, sp, #132	@ 0x84
 8031548:	9300      	str	r3, [sp, #0]
 803154a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803154e:	ab20      	add	r3, sp, #128	@ 0x80
 8031550:	9803      	ldr	r0, [sp, #12]
 8031552:	4632      	mov	r2, r6
 8031554:	f7fc fd80 	bl	802e058 <_dtoa_r>
 8031558:	9b08      	ldr	r3, [sp, #32]
 803155a:	2b47      	cmp	r3, #71	@ 0x47
 803155c:	4681      	mov	r9, r0
 803155e:	d119      	bne.n	8031594 <_svfprintf_r+0x8c4>
 8031560:	07e8      	lsls	r0, r5, #31
 8031562:	d405      	bmi.n	8031570 <_svfprintf_r+0x8a0>
 8031564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031566:	eba3 0309 	sub.w	r3, r3, r9
 803156a:	e69b      	b.n	80312a4 <_svfprintf_r+0x5d4>
 803156c:	4646      	mov	r6, r8
 803156e:	e7e4      	b.n	803153a <_svfprintf_r+0x86a>
 8031570:	eb09 0706 	add.w	r7, r9, r6
 8031574:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031578:	2200      	movs	r2, #0
 803157a:	2300      	movs	r3, #0
 803157c:	f7df fabc 	bl	8010af8 <__aeabi_dcmpeq>
 8031580:	b100      	cbz	r0, 8031584 <_svfprintf_r+0x8b4>
 8031582:	9724      	str	r7, [sp, #144]	@ 0x90
 8031584:	2230      	movs	r2, #48	@ 0x30
 8031586:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031588:	429f      	cmp	r7, r3
 803158a:	d9eb      	bls.n	8031564 <_svfprintf_r+0x894>
 803158c:	1c59      	adds	r1, r3, #1
 803158e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031590:	701a      	strb	r2, [r3, #0]
 8031592:	e7f8      	b.n	8031586 <_svfprintf_r+0x8b6>
 8031594:	9b08      	ldr	r3, [sp, #32]
 8031596:	2b46      	cmp	r3, #70	@ 0x46
 8031598:	eb00 0706 	add.w	r7, r0, r6
 803159c:	d1ea      	bne.n	8031574 <_svfprintf_r+0x8a4>
 803159e:	7803      	ldrb	r3, [r0, #0]
 80315a0:	2b30      	cmp	r3, #48	@ 0x30
 80315a2:	d109      	bne.n	80315b8 <_svfprintf_r+0x8e8>
 80315a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80315a8:	2200      	movs	r2, #0
 80315aa:	2300      	movs	r3, #0
 80315ac:	f7df faa4 	bl	8010af8 <__aeabi_dcmpeq>
 80315b0:	b910      	cbnz	r0, 80315b8 <_svfprintf_r+0x8e8>
 80315b2:	f1c6 0601 	rsb	r6, r6, #1
 80315b6:	9620      	str	r6, [sp, #128]	@ 0x80
 80315b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80315ba:	441f      	add	r7, r3
 80315bc:	e7da      	b.n	8031574 <_svfprintf_r+0x8a4>
 80315be:	9b08      	ldr	r3, [sp, #32]
 80315c0:	2b46      	cmp	r3, #70	@ 0x46
 80315c2:	f47f ae7d 	bne.w	80312c0 <_svfprintf_r+0x5f0>
 80315c6:	f005 0301 	and.w	r3, r5, #1
 80315ca:	2e00      	cmp	r6, #0
 80315cc:	ea43 0308 	orr.w	r3, r3, r8
 80315d0:	dd25      	ble.n	803161e <_svfprintf_r+0x94e>
 80315d2:	b37b      	cbz	r3, 8031634 <_svfprintf_r+0x964>
 80315d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80315d6:	18f3      	adds	r3, r6, r3
 80315d8:	4498      	add	r8, r3
 80315da:	2366      	movs	r3, #102	@ 0x66
 80315dc:	9306      	str	r3, [sp, #24]
 80315de:	e033      	b.n	8031648 <_svfprintf_r+0x978>
 80315e0:	f813 7b01 	ldrb.w	r7, [r3], #1
 80315e4:	f806 7f01 	strb.w	r7, [r6, #1]!
 80315e8:	e6a1      	b.n	803132e <_svfprintf_r+0x65e>
 80315ea:	b941      	cbnz	r1, 80315fe <_svfprintf_r+0x92e>
 80315ec:	2230      	movs	r2, #48	@ 0x30
 80315ee:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80315f2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80315f6:	3330      	adds	r3, #48	@ 0x30
 80315f8:	f802 3b01 	strb.w	r3, [r2], #1
 80315fc:	e6a3      	b.n	8031346 <_svfprintf_r+0x676>
 80315fe:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031602:	e7f8      	b.n	80315f6 <_svfprintf_r+0x926>
 8031604:	9b04      	ldr	r3, [sp, #16]
 8031606:	429e      	cmp	r6, r3
 8031608:	da0d      	bge.n	8031626 <_svfprintf_r+0x956>
 803160a:	9b04      	ldr	r3, [sp, #16]
 803160c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803160e:	2e00      	cmp	r6, #0
 8031610:	eb03 0802 	add.w	r8, r3, r2
 8031614:	dc0c      	bgt.n	8031630 <_svfprintf_r+0x960>
 8031616:	f1c6 0301 	rsb	r3, r6, #1
 803161a:	4498      	add	r8, r3
 803161c:	e008      	b.n	8031630 <_svfprintf_r+0x960>
 803161e:	b17b      	cbz	r3, 8031640 <_svfprintf_r+0x970>
 8031620:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031622:	3301      	adds	r3, #1
 8031624:	e7d8      	b.n	80315d8 <_svfprintf_r+0x908>
 8031626:	07eb      	lsls	r3, r5, #31
 8031628:	d521      	bpl.n	803166e <_svfprintf_r+0x99e>
 803162a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803162c:	eb06 0803 	add.w	r8, r6, r3
 8031630:	2367      	movs	r3, #103	@ 0x67
 8031632:	e7d3      	b.n	80315dc <_svfprintf_r+0x90c>
 8031634:	46b0      	mov	r8, r6
 8031636:	e7d0      	b.n	80315da <_svfprintf_r+0x90a>
 8031638:	0803c202 	.word	0x0803c202
 803163c:	0803c1f2 	.word	0x0803c1f2
 8031640:	2366      	movs	r3, #102	@ 0x66
 8031642:	9306      	str	r3, [sp, #24]
 8031644:	f04f 0801 	mov.w	r8, #1
 8031648:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803164c:	9308      	str	r3, [sp, #32]
 803164e:	d01f      	beq.n	8031690 <_svfprintf_r+0x9c0>
 8031650:	2700      	movs	r7, #0
 8031652:	2e00      	cmp	r6, #0
 8031654:	9708      	str	r7, [sp, #32]
 8031656:	f77f ae8a 	ble.w	803136e <_svfprintf_r+0x69e>
 803165a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803165c:	781b      	ldrb	r3, [r3, #0]
 803165e:	2bff      	cmp	r3, #255	@ 0xff
 8031660:	d107      	bne.n	8031672 <_svfprintf_r+0x9a2>
 8031662:	9b08      	ldr	r3, [sp, #32]
 8031664:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031666:	443b      	add	r3, r7
 8031668:	fb02 8803 	mla	r8, r2, r3, r8
 803166c:	e67f      	b.n	803136e <_svfprintf_r+0x69e>
 803166e:	46b0      	mov	r8, r6
 8031670:	e7de      	b.n	8031630 <_svfprintf_r+0x960>
 8031672:	42b3      	cmp	r3, r6
 8031674:	daf5      	bge.n	8031662 <_svfprintf_r+0x992>
 8031676:	1af6      	subs	r6, r6, r3
 8031678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803167a:	785b      	ldrb	r3, [r3, #1]
 803167c:	b133      	cbz	r3, 803168c <_svfprintf_r+0x9bc>
 803167e:	9b08      	ldr	r3, [sp, #32]
 8031680:	3301      	adds	r3, #1
 8031682:	9308      	str	r3, [sp, #32]
 8031684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031686:	3301      	adds	r3, #1
 8031688:	9309      	str	r3, [sp, #36]	@ 0x24
 803168a:	e7e6      	b.n	803165a <_svfprintf_r+0x98a>
 803168c:	3701      	adds	r7, #1
 803168e:	e7e4      	b.n	803165a <_svfprintf_r+0x98a>
 8031690:	9f08      	ldr	r7, [sp, #32]
 8031692:	e66c      	b.n	803136e <_svfprintf_r+0x69e>
 8031694:	232d      	movs	r3, #45	@ 0x2d
 8031696:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803169a:	e66c      	b.n	8031376 <_svfprintf_r+0x6a6>
 803169c:	06af      	lsls	r7, r5, #26
 803169e:	d50a      	bpl.n	80316b6 <_svfprintf_r+0x9e6>
 80316a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316a2:	6833      	ldr	r3, [r6, #0]
 80316a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80316a6:	17d2      	asrs	r2, r2, #31
 80316a8:	e9c3 1200 	strd	r1, r2, [r3]
 80316ac:	3604      	adds	r6, #4
 80316ae:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80316b2:	f7ff bb46 	b.w	8030d42 <_svfprintf_r+0x72>
 80316b6:	06e8      	lsls	r0, r5, #27
 80316b8:	d503      	bpl.n	80316c2 <_svfprintf_r+0x9f2>
 80316ba:	6833      	ldr	r3, [r6, #0]
 80316bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316be:	601a      	str	r2, [r3, #0]
 80316c0:	e7f4      	b.n	80316ac <_svfprintf_r+0x9dc>
 80316c2:	0669      	lsls	r1, r5, #25
 80316c4:	d503      	bpl.n	80316ce <_svfprintf_r+0x9fe>
 80316c6:	6833      	ldr	r3, [r6, #0]
 80316c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316ca:	801a      	strh	r2, [r3, #0]
 80316cc:	e7ee      	b.n	80316ac <_svfprintf_r+0x9dc>
 80316ce:	05aa      	lsls	r2, r5, #22
 80316d0:	d5f3      	bpl.n	80316ba <_svfprintf_r+0x9ea>
 80316d2:	6833      	ldr	r3, [r6, #0]
 80316d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316d6:	701a      	strb	r2, [r3, #0]
 80316d8:	e7e8      	b.n	80316ac <_svfprintf_r+0x9dc>
 80316da:	f045 0510 	orr.w	r5, r5, #16
 80316de:	f015 0320 	ands.w	r3, r5, #32
 80316e2:	d020      	beq.n	8031726 <_svfprintf_r+0xa56>
 80316e4:	3607      	adds	r6, #7
 80316e6:	f026 0307 	bic.w	r3, r6, #7
 80316ea:	461a      	mov	r2, r3
 80316ec:	685f      	ldr	r7, [r3, #4]
 80316ee:	f852 6b08 	ldr.w	r6, [r2], #8
 80316f2:	9207      	str	r2, [sp, #28]
 80316f4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80316f8:	2300      	movs	r3, #0
 80316fa:	2200      	movs	r2, #0
 80316fc:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031700:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031704:	f000 848c 	beq.w	8032020 <_svfprintf_r+0x1350>
 8031708:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803170c:	9208      	str	r2, [sp, #32]
 803170e:	ea56 0207 	orrs.w	r2, r6, r7
 8031712:	f040 848a 	bne.w	803202a <_svfprintf_r+0x135a>
 8031716:	f1b8 0f00 	cmp.w	r8, #0
 803171a:	f000 80db 	beq.w	80318d4 <_svfprintf_r+0xc04>
 803171e:	2b01      	cmp	r3, #1
 8031720:	f040 8486 	bne.w	8032030 <_svfprintf_r+0x1360>
 8031724:	e083      	b.n	803182e <_svfprintf_r+0xb5e>
 8031726:	4632      	mov	r2, r6
 8031728:	f015 0710 	ands.w	r7, r5, #16
 803172c:	f852 6b04 	ldr.w	r6, [r2], #4
 8031730:	9207      	str	r2, [sp, #28]
 8031732:	d001      	beq.n	8031738 <_svfprintf_r+0xa68>
 8031734:	461f      	mov	r7, r3
 8031736:	e7dd      	b.n	80316f4 <_svfprintf_r+0xa24>
 8031738:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803173c:	d001      	beq.n	8031742 <_svfprintf_r+0xa72>
 803173e:	b2b6      	uxth	r6, r6
 8031740:	e7d8      	b.n	80316f4 <_svfprintf_r+0xa24>
 8031742:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031746:	d0d5      	beq.n	80316f4 <_svfprintf_r+0xa24>
 8031748:	b2f6      	uxtb	r6, r6
 803174a:	e7f3      	b.n	8031734 <_svfprintf_r+0xa64>
 803174c:	4633      	mov	r3, r6
 803174e:	2278      	movs	r2, #120	@ 0x78
 8031750:	f853 6b04 	ldr.w	r6, [r3], #4
 8031754:	9307      	str	r3, [sp, #28]
 8031756:	f647 0330 	movw	r3, #30768	@ 0x7830
 803175a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 803175e:	4b94      	ldr	r3, [pc, #592]	@ (80319b0 <_svfprintf_r+0xce0>)
 8031760:	9319      	str	r3, [sp, #100]	@ 0x64
 8031762:	2700      	movs	r7, #0
 8031764:	f045 0502 	orr.w	r5, r5, #2
 8031768:	2302      	movs	r3, #2
 803176a:	9206      	str	r2, [sp, #24]
 803176c:	e7c5      	b.n	80316fa <_svfprintf_r+0xa2a>
 803176e:	4633      	mov	r3, r6
 8031770:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031774:	f853 9b04 	ldr.w	r9, [r3], #4
 8031778:	9307      	str	r3, [sp, #28]
 803177a:	f04f 0600 	mov.w	r6, #0
 803177e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031782:	d00f      	beq.n	80317a4 <_svfprintf_r+0xad4>
 8031784:	4642      	mov	r2, r8
 8031786:	4631      	mov	r1, r6
 8031788:	4648      	mov	r0, r9
 803178a:	f7de fd39 	bl	8010200 <memchr>
 803178e:	4682      	mov	sl, r0
 8031790:	2800      	cmp	r0, #0
 8031792:	f43f ac81 	beq.w	8031098 <_svfprintf_r+0x3c8>
 8031796:	eba0 0809 	sub.w	r8, r0, r9
 803179a:	46b2      	mov	sl, r6
 803179c:	9610      	str	r6, [sp, #64]	@ 0x40
 803179e:	4637      	mov	r7, r6
 80317a0:	9608      	str	r6, [sp, #32]
 80317a2:	e5eb      	b.n	803137c <_svfprintf_r+0x6ac>
 80317a4:	4648      	mov	r0, r9
 80317a6:	f7de fd7b 	bl	80102a0 <strlen>
 80317aa:	46b2      	mov	sl, r6
 80317ac:	4680      	mov	r8, r0
 80317ae:	e473      	b.n	8031098 <_svfprintf_r+0x3c8>
 80317b0:	f045 0510 	orr.w	r5, r5, #16
 80317b4:	f015 0320 	ands.w	r3, r5, #32
 80317b8:	d009      	beq.n	80317ce <_svfprintf_r+0xafe>
 80317ba:	3607      	adds	r6, #7
 80317bc:	f026 0307 	bic.w	r3, r6, #7
 80317c0:	461a      	mov	r2, r3
 80317c2:	685f      	ldr	r7, [r3, #4]
 80317c4:	f852 6b08 	ldr.w	r6, [r2], #8
 80317c8:	9207      	str	r2, [sp, #28]
 80317ca:	2301      	movs	r3, #1
 80317cc:	e795      	b.n	80316fa <_svfprintf_r+0xa2a>
 80317ce:	4632      	mov	r2, r6
 80317d0:	f015 0710 	ands.w	r7, r5, #16
 80317d4:	f852 6b04 	ldr.w	r6, [r2], #4
 80317d8:	9207      	str	r2, [sp, #28]
 80317da:	d001      	beq.n	80317e0 <_svfprintf_r+0xb10>
 80317dc:	461f      	mov	r7, r3
 80317de:	e7f4      	b.n	80317ca <_svfprintf_r+0xafa>
 80317e0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80317e4:	d001      	beq.n	80317ea <_svfprintf_r+0xb1a>
 80317e6:	b2b6      	uxth	r6, r6
 80317e8:	e7ef      	b.n	80317ca <_svfprintf_r+0xafa>
 80317ea:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80317ee:	d0ec      	beq.n	80317ca <_svfprintf_r+0xafa>
 80317f0:	b2f6      	uxtb	r6, r6
 80317f2:	e7f3      	b.n	80317dc <_svfprintf_r+0xb0c>
 80317f4:	4b6f      	ldr	r3, [pc, #444]	@ (80319b4 <_svfprintf_r+0xce4>)
 80317f6:	f7ff bb39 	b.w	8030e6c <_svfprintf_r+0x19c>
 80317fa:	4632      	mov	r2, r6
 80317fc:	f015 0710 	ands.w	r7, r5, #16
 8031800:	f852 6b04 	ldr.w	r6, [r2], #4
 8031804:	9207      	str	r2, [sp, #28]
 8031806:	d002      	beq.n	803180e <_svfprintf_r+0xb3e>
 8031808:	461f      	mov	r7, r3
 803180a:	f7ff bb3c 	b.w	8030e86 <_svfprintf_r+0x1b6>
 803180e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031812:	d002      	beq.n	803181a <_svfprintf_r+0xb4a>
 8031814:	b2b6      	uxth	r6, r6
 8031816:	f7ff bb36 	b.w	8030e86 <_svfprintf_r+0x1b6>
 803181a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803181e:	f43f ab32 	beq.w	8030e86 <_svfprintf_r+0x1b6>
 8031822:	b2f6      	uxtb	r6, r6
 8031824:	e7f0      	b.n	8031808 <_svfprintf_r+0xb38>
 8031826:	2e0a      	cmp	r6, #10
 8031828:	f177 0300 	sbcs.w	r3, r7, #0
 803182c:	d207      	bcs.n	803183e <_svfprintf_r+0xb6e>
 803182e:	3630      	adds	r6, #48	@ 0x30
 8031830:	b2f6      	uxtb	r6, r6
 8031832:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8031836:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803183a:	f000 bc15 	b.w	8032068 <_svfprintf_r+0x1398>
 803183e:	2300      	movs	r3, #0
 8031840:	9304      	str	r3, [sp, #16]
 8031842:	9b08      	ldr	r3, [sp, #32]
 8031844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8031848:	ad52      	add	r5, sp, #328	@ 0x148
 803184a:	9310      	str	r3, [sp, #64]	@ 0x40
 803184c:	220a      	movs	r2, #10
 803184e:	2300      	movs	r3, #0
 8031850:	4630      	mov	r0, r6
 8031852:	4639      	mov	r1, r7
 8031854:	f7df fa80 	bl	8010d58 <__aeabi_uldivmod>
 8031858:	9b04      	ldr	r3, [sp, #16]
 803185a:	9011      	str	r0, [sp, #68]	@ 0x44
 803185c:	3301      	adds	r3, #1
 803185e:	9304      	str	r3, [sp, #16]
 8031860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031862:	3230      	adds	r2, #48	@ 0x30
 8031864:	468a      	mov	sl, r1
 8031866:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803186a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803186e:	b1d3      	cbz	r3, 80318a6 <_svfprintf_r+0xbd6>
 8031870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031872:	9a04      	ldr	r2, [sp, #16]
 8031874:	781b      	ldrb	r3, [r3, #0]
 8031876:	429a      	cmp	r2, r3
 8031878:	d115      	bne.n	80318a6 <_svfprintf_r+0xbd6>
 803187a:	2aff      	cmp	r2, #255	@ 0xff
 803187c:	d013      	beq.n	80318a6 <_svfprintf_r+0xbd6>
 803187e:	2e0a      	cmp	r6, #10
 8031880:	f177 0300 	sbcs.w	r3, r7, #0
 8031884:	d30f      	bcc.n	80318a6 <_svfprintf_r+0xbd6>
 8031886:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031888:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803188a:	eba9 0903 	sub.w	r9, r9, r3
 803188e:	461a      	mov	r2, r3
 8031890:	4648      	mov	r0, r9
 8031892:	f7fb f8ec 	bl	802ca6e <strncpy>
 8031896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031898:	785b      	ldrb	r3, [r3, #1]
 803189a:	b11b      	cbz	r3, 80318a4 <_svfprintf_r+0xbd4>
 803189c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803189e:	3301      	adds	r3, #1
 80318a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80318a2:	2300      	movs	r3, #0
 80318a4:	9304      	str	r3, [sp, #16]
 80318a6:	2e0a      	cmp	r6, #10
 80318a8:	f177 0700 	sbcs.w	r7, r7, #0
 80318ac:	f0c0 83dc 	bcc.w	8032068 <_svfprintf_r+0x1398>
 80318b0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80318b2:	4657      	mov	r7, sl
 80318b4:	464d      	mov	r5, r9
 80318b6:	e7c9      	b.n	803184c <_svfprintf_r+0xb7c>
 80318b8:	f006 030f 	and.w	r3, r6, #15
 80318bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80318be:	0936      	lsrs	r6, r6, #4
 80318c0:	5cd3      	ldrb	r3, [r2, r3]
 80318c2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80318c6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80318ca:	093f      	lsrs	r7, r7, #4
 80318cc:	ea56 0307 	orrs.w	r3, r6, r7
 80318d0:	d1f2      	bne.n	80318b8 <_svfprintf_r+0xbe8>
 80318d2:	e3c9      	b.n	8032068 <_svfprintf_r+0x1398>
 80318d4:	b91b      	cbnz	r3, 80318de <_svfprintf_r+0xc0e>
 80318d6:	07e9      	lsls	r1, r5, #31
 80318d8:	d501      	bpl.n	80318de <_svfprintf_r+0xc0e>
 80318da:	2630      	movs	r6, #48	@ 0x30
 80318dc:	e7a9      	b.n	8031832 <_svfprintf_r+0xb62>
 80318de:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80318e2:	e3c1      	b.n	8032068 <_svfprintf_r+0x1398>
 80318e4:	9b06      	ldr	r3, [sp, #24]
 80318e6:	2b00      	cmp	r3, #0
 80318e8:	f000 838f 	beq.w	803200a <_svfprintf_r+0x133a>
 80318ec:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80318f0:	2300      	movs	r3, #0
 80318f2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80318f6:	9607      	str	r6, [sp, #28]
 80318f8:	f7ff bb63 	b.w	8030fc2 <_svfprintf_r+0x2f2>
 80318fc:	2010      	movs	r0, #16
 80318fe:	4403      	add	r3, r0
 8031900:	2a07      	cmp	r2, #7
 8031902:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031906:	6060      	str	r0, [r4, #4]
 8031908:	dd08      	ble.n	803191c <_svfprintf_r+0xc4c>
 803190a:	9803      	ldr	r0, [sp, #12]
 803190c:	aa26      	add	r2, sp, #152	@ 0x98
 803190e:	4659      	mov	r1, fp
 8031910:	f7fd fd66 	bl	802f3e0 <__ssprint_r>
 8031914:	2800      	cmp	r0, #0
 8031916:	f040 8356 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803191a:	a929      	add	r1, sp, #164	@ 0xa4
 803191c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803191e:	3b10      	subs	r3, #16
 8031920:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031922:	460c      	mov	r4, r1
 8031924:	e546      	b.n	80313b4 <_svfprintf_r+0x6e4>
 8031926:	460c      	mov	r4, r1
 8031928:	e561      	b.n	80313ee <_svfprintf_r+0x71e>
 803192a:	9803      	ldr	r0, [sp, #12]
 803192c:	aa26      	add	r2, sp, #152	@ 0x98
 803192e:	4659      	mov	r1, fp
 8031930:	f7fd fd56 	bl	802f3e0 <__ssprint_r>
 8031934:	2800      	cmp	r0, #0
 8031936:	f040 8346 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803193a:	ac29      	add	r4, sp, #164	@ 0xa4
 803193c:	e569      	b.n	8031412 <_svfprintf_r+0x742>
 803193e:	9803      	ldr	r0, [sp, #12]
 8031940:	aa26      	add	r2, sp, #152	@ 0x98
 8031942:	4659      	mov	r1, fp
 8031944:	f7fd fd4c 	bl	802f3e0 <__ssprint_r>
 8031948:	2800      	cmp	r0, #0
 803194a:	f040 833c 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803194e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031950:	e56f      	b.n	8031432 <_svfprintf_r+0x762>
 8031952:	2010      	movs	r0, #16
 8031954:	4403      	add	r3, r0
 8031956:	2a07      	cmp	r2, #7
 8031958:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803195c:	6060      	str	r0, [r4, #4]
 803195e:	dd08      	ble.n	8031972 <_svfprintf_r+0xca2>
 8031960:	9803      	ldr	r0, [sp, #12]
 8031962:	aa26      	add	r2, sp, #152	@ 0x98
 8031964:	4659      	mov	r1, fp
 8031966:	f7fd fd3b 	bl	802f3e0 <__ssprint_r>
 803196a:	2800      	cmp	r0, #0
 803196c:	f040 832b 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031970:	a929      	add	r1, sp, #164	@ 0xa4
 8031972:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031974:	3b10      	subs	r3, #16
 8031976:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031978:	460c      	mov	r4, r1
 803197a:	e563      	b.n	8031444 <_svfprintf_r+0x774>
 803197c:	460c      	mov	r4, r1
 803197e:	e57e      	b.n	803147e <_svfprintf_r+0x7ae>
 8031980:	2010      	movs	r0, #16
 8031982:	4403      	add	r3, r0
 8031984:	2a07      	cmp	r2, #7
 8031986:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803198a:	6060      	str	r0, [r4, #4]
 803198c:	dd08      	ble.n	80319a0 <_svfprintf_r+0xcd0>
 803198e:	9803      	ldr	r0, [sp, #12]
 8031990:	aa26      	add	r2, sp, #152	@ 0x98
 8031992:	4659      	mov	r1, fp
 8031994:	f7fd fd24 	bl	802f3e0 <__ssprint_r>
 8031998:	2800      	cmp	r0, #0
 803199a:	f040 8314 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 803199e:	a929      	add	r1, sp, #164	@ 0xa4
 80319a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80319a2:	3b10      	subs	r3, #16
 80319a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80319a6:	460c      	mov	r4, r1
 80319a8:	e56f      	b.n	803148a <_svfprintf_r+0x7ba>
 80319aa:	460c      	mov	r4, r1
 80319ac:	e58a      	b.n	80314c4 <_svfprintf_r+0x7f4>
 80319ae:	bf00      	nop
 80319b0:	0803bc8b 	.word	0x0803bc8b
 80319b4:	0803bc9c 	.word	0x0803bc9c
 80319b8:	9b06      	ldr	r3, [sp, #24]
 80319ba:	2b65      	cmp	r3, #101	@ 0x65
 80319bc:	f340 8246 	ble.w	8031e4c <_svfprintf_r+0x117c>
 80319c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80319c4:	2200      	movs	r2, #0
 80319c6:	2300      	movs	r3, #0
 80319c8:	f7df f896 	bl	8010af8 <__aeabi_dcmpeq>
 80319cc:	2800      	cmp	r0, #0
 80319ce:	d06a      	beq.n	8031aa6 <_svfprintf_r+0xdd6>
 80319d0:	4b73      	ldr	r3, [pc, #460]	@ (8031ba0 <_svfprintf_r+0xed0>)
 80319d2:	6023      	str	r3, [r4, #0]
 80319d4:	2301      	movs	r3, #1
 80319d6:	6063      	str	r3, [r4, #4]
 80319d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80319da:	3301      	adds	r3, #1
 80319dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80319de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80319e0:	3301      	adds	r3, #1
 80319e2:	2b07      	cmp	r3, #7
 80319e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80319e6:	dc37      	bgt.n	8031a58 <_svfprintf_r+0xd88>
 80319e8:	3408      	adds	r4, #8
 80319ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80319ec:	9a04      	ldr	r2, [sp, #16]
 80319ee:	4293      	cmp	r3, r2
 80319f0:	db02      	blt.n	80319f8 <_svfprintf_r+0xd28>
 80319f2:	07ef      	lsls	r7, r5, #31
 80319f4:	f57f ad76 	bpl.w	80314e4 <_svfprintf_r+0x814>
 80319f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80319fa:	6023      	str	r3, [r4, #0]
 80319fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80319fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031a00:	6063      	str	r3, [r4, #4]
 8031a02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031a04:	4413      	add	r3, r2
 8031a06:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031a08:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031a0a:	3301      	adds	r3, #1
 8031a0c:	2b07      	cmp	r3, #7
 8031a0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031a10:	dc2c      	bgt.n	8031a6c <_svfprintf_r+0xd9c>
 8031a12:	3408      	adds	r4, #8
 8031a14:	9b04      	ldr	r3, [sp, #16]
 8031a16:	1e5e      	subs	r6, r3, #1
 8031a18:	2e00      	cmp	r6, #0
 8031a1a:	f77f ad63 	ble.w	80314e4 <_svfprintf_r+0x814>
 8031a1e:	4f61      	ldr	r7, [pc, #388]	@ (8031ba4 <_svfprintf_r+0xed4>)
 8031a20:	f04f 0810 	mov.w	r8, #16
 8031a24:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031a28:	2e10      	cmp	r6, #16
 8031a2a:	f103 0301 	add.w	r3, r3, #1
 8031a2e:	f104 0108 	add.w	r1, r4, #8
 8031a32:	6027      	str	r7, [r4, #0]
 8031a34:	dc24      	bgt.n	8031a80 <_svfprintf_r+0xdb0>
 8031a36:	6066      	str	r6, [r4, #4]
 8031a38:	2b07      	cmp	r3, #7
 8031a3a:	4416      	add	r6, r2
 8031a3c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031a40:	f340 82a0 	ble.w	8031f84 <_svfprintf_r+0x12b4>
 8031a44:	9803      	ldr	r0, [sp, #12]
 8031a46:	aa26      	add	r2, sp, #152	@ 0x98
 8031a48:	4659      	mov	r1, fp
 8031a4a:	f7fd fcc9 	bl	802f3e0 <__ssprint_r>
 8031a4e:	2800      	cmp	r0, #0
 8031a50:	f040 82b9 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031a54:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a56:	e545      	b.n	80314e4 <_svfprintf_r+0x814>
 8031a58:	9803      	ldr	r0, [sp, #12]
 8031a5a:	aa26      	add	r2, sp, #152	@ 0x98
 8031a5c:	4659      	mov	r1, fp
 8031a5e:	f7fd fcbf 	bl	802f3e0 <__ssprint_r>
 8031a62:	2800      	cmp	r0, #0
 8031a64:	f040 82af 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031a68:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a6a:	e7be      	b.n	80319ea <_svfprintf_r+0xd1a>
 8031a6c:	9803      	ldr	r0, [sp, #12]
 8031a6e:	aa26      	add	r2, sp, #152	@ 0x98
 8031a70:	4659      	mov	r1, fp
 8031a72:	f7fd fcb5 	bl	802f3e0 <__ssprint_r>
 8031a76:	2800      	cmp	r0, #0
 8031a78:	f040 82a5 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031a7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a7e:	e7c9      	b.n	8031a14 <_svfprintf_r+0xd44>
 8031a80:	3210      	adds	r2, #16
 8031a82:	2b07      	cmp	r3, #7
 8031a84:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031a88:	f8c4 8004 	str.w	r8, [r4, #4]
 8031a8c:	dd08      	ble.n	8031aa0 <_svfprintf_r+0xdd0>
 8031a8e:	9803      	ldr	r0, [sp, #12]
 8031a90:	aa26      	add	r2, sp, #152	@ 0x98
 8031a92:	4659      	mov	r1, fp
 8031a94:	f7fd fca4 	bl	802f3e0 <__ssprint_r>
 8031a98:	2800      	cmp	r0, #0
 8031a9a:	f040 8294 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031a9e:	a929      	add	r1, sp, #164	@ 0xa4
 8031aa0:	3e10      	subs	r6, #16
 8031aa2:	460c      	mov	r4, r1
 8031aa4:	e7be      	b.n	8031a24 <_svfprintf_r+0xd54>
 8031aa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031aa8:	2b00      	cmp	r3, #0
 8031aaa:	dc7d      	bgt.n	8031ba8 <_svfprintf_r+0xed8>
 8031aac:	4b3c      	ldr	r3, [pc, #240]	@ (8031ba0 <_svfprintf_r+0xed0>)
 8031aae:	6023      	str	r3, [r4, #0]
 8031ab0:	2301      	movs	r3, #1
 8031ab2:	6063      	str	r3, [r4, #4]
 8031ab4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031ab6:	3301      	adds	r3, #1
 8031ab8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031aba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031abc:	3301      	adds	r3, #1
 8031abe:	2b07      	cmp	r3, #7
 8031ac0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ac2:	dc46      	bgt.n	8031b52 <_svfprintf_r+0xe82>
 8031ac4:	3408      	adds	r4, #8
 8031ac6:	9904      	ldr	r1, [sp, #16]
 8031ac8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031aca:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031acc:	430b      	orrs	r3, r1
 8031ace:	f005 0101 	and.w	r1, r5, #1
 8031ad2:	430b      	orrs	r3, r1
 8031ad4:	f43f ad06 	beq.w	80314e4 <_svfprintf_r+0x814>
 8031ad8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031ada:	6023      	str	r3, [r4, #0]
 8031adc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031ade:	6063      	str	r3, [r4, #4]
 8031ae0:	441a      	add	r2, r3
 8031ae2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031ae4:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031ae6:	3301      	adds	r3, #1
 8031ae8:	2b07      	cmp	r3, #7
 8031aea:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031aec:	dc3b      	bgt.n	8031b66 <_svfprintf_r+0xe96>
 8031aee:	f104 0308 	add.w	r3, r4, #8
 8031af2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031af4:	2e00      	cmp	r6, #0
 8031af6:	da1b      	bge.n	8031b30 <_svfprintf_r+0xe60>
 8031af8:	4f2a      	ldr	r7, [pc, #168]	@ (8031ba4 <_svfprintf_r+0xed4>)
 8031afa:	4276      	negs	r6, r6
 8031afc:	461a      	mov	r2, r3
 8031afe:	2410      	movs	r4, #16
 8031b00:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8031b04:	2e10      	cmp	r6, #16
 8031b06:	f101 0101 	add.w	r1, r1, #1
 8031b0a:	f103 0308 	add.w	r3, r3, #8
 8031b0e:	6017      	str	r7, [r2, #0]
 8031b10:	dc33      	bgt.n	8031b7a <_svfprintf_r+0xeaa>
 8031b12:	6056      	str	r6, [r2, #4]
 8031b14:	2907      	cmp	r1, #7
 8031b16:	4406      	add	r6, r0
 8031b18:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8031b1c:	dd08      	ble.n	8031b30 <_svfprintf_r+0xe60>
 8031b1e:	9803      	ldr	r0, [sp, #12]
 8031b20:	aa26      	add	r2, sp, #152	@ 0x98
 8031b22:	4659      	mov	r1, fp
 8031b24:	f7fd fc5c 	bl	802f3e0 <__ssprint_r>
 8031b28:	2800      	cmp	r0, #0
 8031b2a:	f040 824c 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031b2e:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b30:	9a04      	ldr	r2, [sp, #16]
 8031b32:	9904      	ldr	r1, [sp, #16]
 8031b34:	605a      	str	r2, [r3, #4]
 8031b36:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031b38:	f8c3 9000 	str.w	r9, [r3]
 8031b3c:	440a      	add	r2, r1
 8031b3e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031b40:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031b42:	3201      	adds	r2, #1
 8031b44:	2a07      	cmp	r2, #7
 8031b46:	9227      	str	r2, [sp, #156]	@ 0x9c
 8031b48:	f73f af7c 	bgt.w	8031a44 <_svfprintf_r+0xd74>
 8031b4c:	f103 0408 	add.w	r4, r3, #8
 8031b50:	e4c8      	b.n	80314e4 <_svfprintf_r+0x814>
 8031b52:	9803      	ldr	r0, [sp, #12]
 8031b54:	aa26      	add	r2, sp, #152	@ 0x98
 8031b56:	4659      	mov	r1, fp
 8031b58:	f7fd fc42 	bl	802f3e0 <__ssprint_r>
 8031b5c:	2800      	cmp	r0, #0
 8031b5e:	f040 8232 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031b62:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b64:	e7af      	b.n	8031ac6 <_svfprintf_r+0xdf6>
 8031b66:	9803      	ldr	r0, [sp, #12]
 8031b68:	aa26      	add	r2, sp, #152	@ 0x98
 8031b6a:	4659      	mov	r1, fp
 8031b6c:	f7fd fc38 	bl	802f3e0 <__ssprint_r>
 8031b70:	2800      	cmp	r0, #0
 8031b72:	f040 8228 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031b76:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b78:	e7bb      	b.n	8031af2 <_svfprintf_r+0xe22>
 8031b7a:	3010      	adds	r0, #16
 8031b7c:	2907      	cmp	r1, #7
 8031b7e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031b82:	6054      	str	r4, [r2, #4]
 8031b84:	dd08      	ble.n	8031b98 <_svfprintf_r+0xec8>
 8031b86:	9803      	ldr	r0, [sp, #12]
 8031b88:	aa26      	add	r2, sp, #152	@ 0x98
 8031b8a:	4659      	mov	r1, fp
 8031b8c:	f7fd fc28 	bl	802f3e0 <__ssprint_r>
 8031b90:	2800      	cmp	r0, #0
 8031b92:	f040 8218 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031b96:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b98:	3e10      	subs	r6, #16
 8031b9a:	461a      	mov	r2, r3
 8031b9c:	e7b0      	b.n	8031b00 <_svfprintf_r+0xe30>
 8031b9e:	bf00      	nop
 8031ba0:	0803bcad 	.word	0x0803bcad
 8031ba4:	0803c1f2 	.word	0x0803c1f2
 8031ba8:	9b04      	ldr	r3, [sp, #16]
 8031baa:	444b      	add	r3, r9
 8031bac:	9306      	str	r3, [sp, #24]
 8031bae:	9b04      	ldr	r3, [sp, #16]
 8031bb0:	42b3      	cmp	r3, r6
 8031bb2:	bfa8      	it	ge
 8031bb4:	4633      	movge	r3, r6
 8031bb6:	2b00      	cmp	r3, #0
 8031bb8:	4698      	mov	r8, r3
 8031bba:	dd0b      	ble.n	8031bd4 <_svfprintf_r+0xf04>
 8031bbc:	e9c4 9300 	strd	r9, r3, [r4]
 8031bc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031bc2:	4443      	add	r3, r8
 8031bc4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031bc6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031bc8:	3301      	adds	r3, #1
 8031bca:	2b07      	cmp	r3, #7
 8031bcc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031bce:	f300 8089 	bgt.w	8031ce4 <_svfprintf_r+0x1014>
 8031bd2:	3408      	adds	r4, #8
 8031bd4:	4643      	mov	r3, r8
 8031bd6:	2b00      	cmp	r3, #0
 8031bd8:	bfac      	ite	ge
 8031bda:	eba6 0808 	subge.w	r8, r6, r8
 8031bde:	46b0      	movlt	r8, r6
 8031be0:	f1b8 0f00 	cmp.w	r8, #0
 8031be4:	dd1b      	ble.n	8031c1e <_svfprintf_r+0xf4e>
 8031be6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031bea:	4897      	ldr	r0, [pc, #604]	@ (8031e48 <_svfprintf_r+0x1178>)
 8031bec:	6020      	str	r0, [r4, #0]
 8031bee:	f1b8 0f10 	cmp.w	r8, #16
 8031bf2:	f102 0201 	add.w	r2, r2, #1
 8031bf6:	f104 0108 	add.w	r1, r4, #8
 8031bfa:	dc7d      	bgt.n	8031cf8 <_svfprintf_r+0x1028>
 8031bfc:	4443      	add	r3, r8
 8031bfe:	2a07      	cmp	r2, #7
 8031c00:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031c04:	f8c4 8004 	str.w	r8, [r4, #4]
 8031c08:	f340 808a 	ble.w	8031d20 <_svfprintf_r+0x1050>
 8031c0c:	9803      	ldr	r0, [sp, #12]
 8031c0e:	aa26      	add	r2, sp, #152	@ 0x98
 8031c10:	4659      	mov	r1, fp
 8031c12:	f7fd fbe5 	bl	802f3e0 <__ssprint_r>
 8031c16:	2800      	cmp	r0, #0
 8031c18:	f040 81d5 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031c1c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c1e:	eb09 0806 	add.w	r8, r9, r6
 8031c22:	056e      	lsls	r6, r5, #21
 8031c24:	d508      	bpl.n	8031c38 <_svfprintf_r+0xf68>
 8031c26:	9b08      	ldr	r3, [sp, #32]
 8031c28:	2b00      	cmp	r3, #0
 8031c2a:	d17b      	bne.n	8031d24 <_svfprintf_r+0x1054>
 8031c2c:	2f00      	cmp	r7, #0
 8031c2e:	d17b      	bne.n	8031d28 <_svfprintf_r+0x1058>
 8031c30:	9b06      	ldr	r3, [sp, #24]
 8031c32:	4598      	cmp	r8, r3
 8031c34:	bf28      	it	cs
 8031c36:	4698      	movcs	r8, r3
 8031c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031c3a:	9a04      	ldr	r2, [sp, #16]
 8031c3c:	4293      	cmp	r3, r2
 8031c3e:	db01      	blt.n	8031c44 <_svfprintf_r+0xf74>
 8031c40:	07e8      	lsls	r0, r5, #31
 8031c42:	d50e      	bpl.n	8031c62 <_svfprintf_r+0xf92>
 8031c44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031c46:	6023      	str	r3, [r4, #0]
 8031c48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031c4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031c4c:	6063      	str	r3, [r4, #4]
 8031c4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c50:	4413      	add	r3, r2
 8031c52:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c56:	3301      	adds	r3, #1
 8031c58:	2b07      	cmp	r3, #7
 8031c5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c5c:	f300 80df 	bgt.w	8031e1e <_svfprintf_r+0x114e>
 8031c60:	3408      	adds	r4, #8
 8031c62:	9b04      	ldr	r3, [sp, #16]
 8031c64:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031c66:	1bdf      	subs	r7, r3, r7
 8031c68:	9b06      	ldr	r3, [sp, #24]
 8031c6a:	eba3 0308 	sub.w	r3, r3, r8
 8031c6e:	429f      	cmp	r7, r3
 8031c70:	bfa8      	it	ge
 8031c72:	461f      	movge	r7, r3
 8031c74:	2f00      	cmp	r7, #0
 8031c76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c78:	dd0a      	ble.n	8031c90 <_svfprintf_r+0xfc0>
 8031c7a:	443b      	add	r3, r7
 8031c7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c80:	3301      	adds	r3, #1
 8031c82:	2b07      	cmp	r3, #7
 8031c84:	e9c4 8700 	strd	r8, r7, [r4]
 8031c88:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c8a:	f300 80d2 	bgt.w	8031e32 <_svfprintf_r+0x1162>
 8031c8e:	3408      	adds	r4, #8
 8031c90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031c92:	9b04      	ldr	r3, [sp, #16]
 8031c94:	2f00      	cmp	r7, #0
 8031c96:	eba3 0606 	sub.w	r6, r3, r6
 8031c9a:	bfa8      	it	ge
 8031c9c:	1bf6      	subge	r6, r6, r7
 8031c9e:	2e00      	cmp	r6, #0
 8031ca0:	f77f ac20 	ble.w	80314e4 <_svfprintf_r+0x814>
 8031ca4:	4f68      	ldr	r7, [pc, #416]	@ (8031e48 <_svfprintf_r+0x1178>)
 8031ca6:	f04f 0810 	mov.w	r8, #16
 8031caa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031cae:	2e10      	cmp	r6, #16
 8031cb0:	f103 0301 	add.w	r3, r3, #1
 8031cb4:	f104 0108 	add.w	r1, r4, #8
 8031cb8:	6027      	str	r7, [r4, #0]
 8031cba:	f77f aebc 	ble.w	8031a36 <_svfprintf_r+0xd66>
 8031cbe:	3210      	adds	r2, #16
 8031cc0:	2b07      	cmp	r3, #7
 8031cc2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031cc6:	f8c4 8004 	str.w	r8, [r4, #4]
 8031cca:	dd08      	ble.n	8031cde <_svfprintf_r+0x100e>
 8031ccc:	9803      	ldr	r0, [sp, #12]
 8031cce:	aa26      	add	r2, sp, #152	@ 0x98
 8031cd0:	4659      	mov	r1, fp
 8031cd2:	f7fd fb85 	bl	802f3e0 <__ssprint_r>
 8031cd6:	2800      	cmp	r0, #0
 8031cd8:	f040 8175 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031cdc:	a929      	add	r1, sp, #164	@ 0xa4
 8031cde:	3e10      	subs	r6, #16
 8031ce0:	460c      	mov	r4, r1
 8031ce2:	e7e2      	b.n	8031caa <_svfprintf_r+0xfda>
 8031ce4:	9803      	ldr	r0, [sp, #12]
 8031ce6:	aa26      	add	r2, sp, #152	@ 0x98
 8031ce8:	4659      	mov	r1, fp
 8031cea:	f7fd fb79 	bl	802f3e0 <__ssprint_r>
 8031cee:	2800      	cmp	r0, #0
 8031cf0:	f040 8169 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031cf4:	ac29      	add	r4, sp, #164	@ 0xa4
 8031cf6:	e76d      	b.n	8031bd4 <_svfprintf_r+0xf04>
 8031cf8:	2010      	movs	r0, #16
 8031cfa:	4403      	add	r3, r0
 8031cfc:	2a07      	cmp	r2, #7
 8031cfe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031d02:	6060      	str	r0, [r4, #4]
 8031d04:	dd08      	ble.n	8031d18 <_svfprintf_r+0x1048>
 8031d06:	9803      	ldr	r0, [sp, #12]
 8031d08:	aa26      	add	r2, sp, #152	@ 0x98
 8031d0a:	4659      	mov	r1, fp
 8031d0c:	f7fd fb68 	bl	802f3e0 <__ssprint_r>
 8031d10:	2800      	cmp	r0, #0
 8031d12:	f040 8158 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031d16:	a929      	add	r1, sp, #164	@ 0xa4
 8031d18:	f1a8 0810 	sub.w	r8, r8, #16
 8031d1c:	460c      	mov	r4, r1
 8031d1e:	e762      	b.n	8031be6 <_svfprintf_r+0xf16>
 8031d20:	460c      	mov	r4, r1
 8031d22:	e77c      	b.n	8031c1e <_svfprintf_r+0xf4e>
 8031d24:	2f00      	cmp	r7, #0
 8031d26:	d04a      	beq.n	8031dbe <_svfprintf_r+0x10ee>
 8031d28:	3f01      	subs	r7, #1
 8031d2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031d2c:	6023      	str	r3, [r4, #0]
 8031d2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031d30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031d32:	6063      	str	r3, [r4, #4]
 8031d34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d36:	4413      	add	r3, r2
 8031d38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d3c:	3301      	adds	r3, #1
 8031d3e:	2b07      	cmp	r3, #7
 8031d40:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d42:	dc43      	bgt.n	8031dcc <_svfprintf_r+0x10fc>
 8031d44:	3408      	adds	r4, #8
 8031d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d48:	781a      	ldrb	r2, [r3, #0]
 8031d4a:	9b06      	ldr	r3, [sp, #24]
 8031d4c:	eba3 0308 	sub.w	r3, r3, r8
 8031d50:	429a      	cmp	r2, r3
 8031d52:	bfa8      	it	ge
 8031d54:	461a      	movge	r2, r3
 8031d56:	2a00      	cmp	r2, #0
 8031d58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d5a:	4691      	mov	r9, r2
 8031d5c:	dd09      	ble.n	8031d72 <_svfprintf_r+0x10a2>
 8031d5e:	4413      	add	r3, r2
 8031d60:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d62:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d64:	3301      	adds	r3, #1
 8031d66:	2b07      	cmp	r3, #7
 8031d68:	e9c4 8200 	strd	r8, r2, [r4]
 8031d6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d6e:	dc37      	bgt.n	8031de0 <_svfprintf_r+0x1110>
 8031d70:	3408      	adds	r4, #8
 8031d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d74:	781e      	ldrb	r6, [r3, #0]
 8031d76:	f1b9 0f00 	cmp.w	r9, #0
 8031d7a:	bfa8      	it	ge
 8031d7c:	eba6 0609 	subge.w	r6, r6, r9
 8031d80:	2e00      	cmp	r6, #0
 8031d82:	dd18      	ble.n	8031db6 <_svfprintf_r+0x10e6>
 8031d84:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031d88:	482f      	ldr	r0, [pc, #188]	@ (8031e48 <_svfprintf_r+0x1178>)
 8031d8a:	6020      	str	r0, [r4, #0]
 8031d8c:	2e10      	cmp	r6, #16
 8031d8e:	f103 0301 	add.w	r3, r3, #1
 8031d92:	f104 0108 	add.w	r1, r4, #8
 8031d96:	dc2d      	bgt.n	8031df4 <_svfprintf_r+0x1124>
 8031d98:	6066      	str	r6, [r4, #4]
 8031d9a:	2b07      	cmp	r3, #7
 8031d9c:	4416      	add	r6, r2
 8031d9e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031da2:	dd3a      	ble.n	8031e1a <_svfprintf_r+0x114a>
 8031da4:	9803      	ldr	r0, [sp, #12]
 8031da6:	aa26      	add	r2, sp, #152	@ 0x98
 8031da8:	4659      	mov	r1, fp
 8031daa:	f7fd fb19 	bl	802f3e0 <__ssprint_r>
 8031dae:	2800      	cmp	r0, #0
 8031db0:	f040 8109 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031db4:	ac29      	add	r4, sp, #164	@ 0xa4
 8031db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031db8:	781b      	ldrb	r3, [r3, #0]
 8031dba:	4498      	add	r8, r3
 8031dbc:	e733      	b.n	8031c26 <_svfprintf_r+0xf56>
 8031dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031dc0:	3b01      	subs	r3, #1
 8031dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8031dc4:	9b08      	ldr	r3, [sp, #32]
 8031dc6:	3b01      	subs	r3, #1
 8031dc8:	9308      	str	r3, [sp, #32]
 8031dca:	e7ae      	b.n	8031d2a <_svfprintf_r+0x105a>
 8031dcc:	9803      	ldr	r0, [sp, #12]
 8031dce:	aa26      	add	r2, sp, #152	@ 0x98
 8031dd0:	4659      	mov	r1, fp
 8031dd2:	f7fd fb05 	bl	802f3e0 <__ssprint_r>
 8031dd6:	2800      	cmp	r0, #0
 8031dd8:	f040 80f5 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031ddc:	ac29      	add	r4, sp, #164	@ 0xa4
 8031dde:	e7b2      	b.n	8031d46 <_svfprintf_r+0x1076>
 8031de0:	9803      	ldr	r0, [sp, #12]
 8031de2:	aa26      	add	r2, sp, #152	@ 0x98
 8031de4:	4659      	mov	r1, fp
 8031de6:	f7fd fafb 	bl	802f3e0 <__ssprint_r>
 8031dea:	2800      	cmp	r0, #0
 8031dec:	f040 80eb 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031df0:	ac29      	add	r4, sp, #164	@ 0xa4
 8031df2:	e7be      	b.n	8031d72 <_svfprintf_r+0x10a2>
 8031df4:	2010      	movs	r0, #16
 8031df6:	4402      	add	r2, r0
 8031df8:	2b07      	cmp	r3, #7
 8031dfa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031dfe:	6060      	str	r0, [r4, #4]
 8031e00:	dd08      	ble.n	8031e14 <_svfprintf_r+0x1144>
 8031e02:	9803      	ldr	r0, [sp, #12]
 8031e04:	aa26      	add	r2, sp, #152	@ 0x98
 8031e06:	4659      	mov	r1, fp
 8031e08:	f7fd faea 	bl	802f3e0 <__ssprint_r>
 8031e0c:	2800      	cmp	r0, #0
 8031e0e:	f040 80da 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031e12:	a929      	add	r1, sp, #164	@ 0xa4
 8031e14:	3e10      	subs	r6, #16
 8031e16:	460c      	mov	r4, r1
 8031e18:	e7b4      	b.n	8031d84 <_svfprintf_r+0x10b4>
 8031e1a:	460c      	mov	r4, r1
 8031e1c:	e7cb      	b.n	8031db6 <_svfprintf_r+0x10e6>
 8031e1e:	9803      	ldr	r0, [sp, #12]
 8031e20:	aa26      	add	r2, sp, #152	@ 0x98
 8031e22:	4659      	mov	r1, fp
 8031e24:	f7fd fadc 	bl	802f3e0 <__ssprint_r>
 8031e28:	2800      	cmp	r0, #0
 8031e2a:	f040 80cc 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031e2e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031e30:	e717      	b.n	8031c62 <_svfprintf_r+0xf92>
 8031e32:	9803      	ldr	r0, [sp, #12]
 8031e34:	aa26      	add	r2, sp, #152	@ 0x98
 8031e36:	4659      	mov	r1, fp
 8031e38:	f7fd fad2 	bl	802f3e0 <__ssprint_r>
 8031e3c:	2800      	cmp	r0, #0
 8031e3e:	f040 80c2 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031e42:	ac29      	add	r4, sp, #164	@ 0xa4
 8031e44:	e724      	b.n	8031c90 <_svfprintf_r+0xfc0>
 8031e46:	bf00      	nop
 8031e48:	0803c1f2 	.word	0x0803c1f2
 8031e4c:	9904      	ldr	r1, [sp, #16]
 8031e4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031e50:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031e52:	2901      	cmp	r1, #1
 8031e54:	f103 0301 	add.w	r3, r3, #1
 8031e58:	f102 0201 	add.w	r2, r2, #1
 8031e5c:	f104 0608 	add.w	r6, r4, #8
 8031e60:	dc02      	bgt.n	8031e68 <_svfprintf_r+0x1198>
 8031e62:	07e9      	lsls	r1, r5, #31
 8031e64:	f140 8083 	bpl.w	8031f6e <_svfprintf_r+0x129e>
 8031e68:	2101      	movs	r1, #1
 8031e6a:	2a07      	cmp	r2, #7
 8031e6c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031e70:	f8c4 9000 	str.w	r9, [r4]
 8031e74:	6061      	str	r1, [r4, #4]
 8031e76:	dd08      	ble.n	8031e8a <_svfprintf_r+0x11ba>
 8031e78:	9803      	ldr	r0, [sp, #12]
 8031e7a:	aa26      	add	r2, sp, #152	@ 0x98
 8031e7c:	4659      	mov	r1, fp
 8031e7e:	f7fd faaf 	bl	802f3e0 <__ssprint_r>
 8031e82:	2800      	cmp	r0, #0
 8031e84:	f040 809f 	bne.w	8031fc6 <_svfprintf_r+0x12f6>
 8031e88:	ae29      	add	r6, sp, #164	@ 0xa4
 8031e8a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031e8c:	6033      	str	r3, [r6, #0]
 8031e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031e90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031e92:	6073      	str	r3, [r6, #4]
 8031e94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031e96:	4413      	add	r3, r2
 8031e98:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031e9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031e9c:	3301      	adds	r3, #1
 8031e9e:	2b07      	cmp	r3, #7
 8031ea0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ea2:	dc33      	bgt.n	8031f0c <_svfprintf_r+0x123c>
 8031ea4:	3608      	adds	r6, #8
 8031ea6:	9b04      	ldr	r3, [sp, #16]
 8031ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031eac:	1e5c      	subs	r4, r3, #1
 8031eae:	2200      	movs	r2, #0
 8031eb0:	2300      	movs	r3, #0
 8031eb2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8031eb6:	f7de fe1f 	bl	8010af8 <__aeabi_dcmpeq>
 8031eba:	2800      	cmp	r0, #0
 8031ebc:	d12f      	bne.n	8031f1e <_svfprintf_r+0x124e>
 8031ebe:	f109 0201 	add.w	r2, r9, #1
 8031ec2:	e9c6 2400 	strd	r2, r4, [r6]
 8031ec6:	9a04      	ldr	r2, [sp, #16]
 8031ec8:	f108 0301 	add.w	r3, r8, #1
 8031ecc:	3f01      	subs	r7, #1
 8031ece:	4417      	add	r7, r2
 8031ed0:	2b07      	cmp	r3, #7
 8031ed2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8031ed6:	dd53      	ble.n	8031f80 <_svfprintf_r+0x12b0>
 8031ed8:	9803      	ldr	r0, [sp, #12]
 8031eda:	aa26      	add	r2, sp, #152	@ 0x98
 8031edc:	4659      	mov	r1, fp
 8031ede:	f7fd fa7f 	bl	802f3e0 <__ssprint_r>
 8031ee2:	2800      	cmp	r0, #0
 8031ee4:	d16f      	bne.n	8031fc6 <_svfprintf_r+0x12f6>
 8031ee6:	ae29      	add	r6, sp, #164	@ 0xa4
 8031ee8:	ab22      	add	r3, sp, #136	@ 0x88
 8031eea:	6033      	str	r3, [r6, #0]
 8031eec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8031eee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8031ef0:	6073      	str	r3, [r6, #4]
 8031ef2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031ef4:	4413      	add	r3, r2
 8031ef6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031ef8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031efa:	3301      	adds	r3, #1
 8031efc:	2b07      	cmp	r3, #7
 8031efe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031f00:	f73f ada0 	bgt.w	8031a44 <_svfprintf_r+0xd74>
 8031f04:	f106 0408 	add.w	r4, r6, #8
 8031f08:	f7ff baec 	b.w	80314e4 <_svfprintf_r+0x814>
 8031f0c:	9803      	ldr	r0, [sp, #12]
 8031f0e:	aa26      	add	r2, sp, #152	@ 0x98
 8031f10:	4659      	mov	r1, fp
 8031f12:	f7fd fa65 	bl	802f3e0 <__ssprint_r>
 8031f16:	2800      	cmp	r0, #0
 8031f18:	d155      	bne.n	8031fc6 <_svfprintf_r+0x12f6>
 8031f1a:	ae29      	add	r6, sp, #164	@ 0xa4
 8031f1c:	e7c3      	b.n	8031ea6 <_svfprintf_r+0x11d6>
 8031f1e:	9b04      	ldr	r3, [sp, #16]
 8031f20:	2b01      	cmp	r3, #1
 8031f22:	dde1      	ble.n	8031ee8 <_svfprintf_r+0x1218>
 8031f24:	4f57      	ldr	r7, [pc, #348]	@ (8032084 <_svfprintf_r+0x13b4>)
 8031f26:	f04f 0810 	mov.w	r8, #16
 8031f2a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031f2e:	2c10      	cmp	r4, #16
 8031f30:	f103 0301 	add.w	r3, r3, #1
 8031f34:	f106 0108 	add.w	r1, r6, #8
 8031f38:	6037      	str	r7, [r6, #0]
 8031f3a:	dc07      	bgt.n	8031f4c <_svfprintf_r+0x127c>
 8031f3c:	6074      	str	r4, [r6, #4]
 8031f3e:	2b07      	cmp	r3, #7
 8031f40:	4414      	add	r4, r2
 8031f42:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8031f46:	dcc7      	bgt.n	8031ed8 <_svfprintf_r+0x1208>
 8031f48:	460e      	mov	r6, r1
 8031f4a:	e7cd      	b.n	8031ee8 <_svfprintf_r+0x1218>
 8031f4c:	3210      	adds	r2, #16
 8031f4e:	2b07      	cmp	r3, #7
 8031f50:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031f54:	f8c6 8004 	str.w	r8, [r6, #4]
 8031f58:	dd06      	ble.n	8031f68 <_svfprintf_r+0x1298>
 8031f5a:	9803      	ldr	r0, [sp, #12]
 8031f5c:	aa26      	add	r2, sp, #152	@ 0x98
 8031f5e:	4659      	mov	r1, fp
 8031f60:	f7fd fa3e 	bl	802f3e0 <__ssprint_r>
 8031f64:	bb78      	cbnz	r0, 8031fc6 <_svfprintf_r+0x12f6>
 8031f66:	a929      	add	r1, sp, #164	@ 0xa4
 8031f68:	3c10      	subs	r4, #16
 8031f6a:	460e      	mov	r6, r1
 8031f6c:	e7dd      	b.n	8031f2a <_svfprintf_r+0x125a>
 8031f6e:	2101      	movs	r1, #1
 8031f70:	2a07      	cmp	r2, #7
 8031f72:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031f76:	f8c4 9000 	str.w	r9, [r4]
 8031f7a:	6061      	str	r1, [r4, #4]
 8031f7c:	ddb4      	ble.n	8031ee8 <_svfprintf_r+0x1218>
 8031f7e:	e7ab      	b.n	8031ed8 <_svfprintf_r+0x1208>
 8031f80:	3608      	adds	r6, #8
 8031f82:	e7b1      	b.n	8031ee8 <_svfprintf_r+0x1218>
 8031f84:	460c      	mov	r4, r1
 8031f86:	f7ff baad 	b.w	80314e4 <_svfprintf_r+0x814>
 8031f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031f8c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031f8e:	1a9d      	subs	r5, r3, r2
 8031f90:	2d00      	cmp	r5, #0
 8031f92:	f77f aaaa 	ble.w	80314ea <_svfprintf_r+0x81a>
 8031f96:	4e3c      	ldr	r6, [pc, #240]	@ (8032088 <_svfprintf_r+0x13b8>)
 8031f98:	2710      	movs	r7, #16
 8031f9a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031f9e:	2d10      	cmp	r5, #16
 8031fa0:	f103 0301 	add.w	r3, r3, #1
 8031fa4:	6026      	str	r6, [r4, #0]
 8031fa6:	dc18      	bgt.n	8031fda <_svfprintf_r+0x130a>
 8031fa8:	442a      	add	r2, r5
 8031faa:	2b07      	cmp	r3, #7
 8031fac:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031fb0:	6065      	str	r5, [r4, #4]
 8031fb2:	f77f aa9a 	ble.w	80314ea <_svfprintf_r+0x81a>
 8031fb6:	9803      	ldr	r0, [sp, #12]
 8031fb8:	aa26      	add	r2, sp, #152	@ 0x98
 8031fba:	4659      	mov	r1, fp
 8031fbc:	f7fd fa10 	bl	802f3e0 <__ssprint_r>
 8031fc0:	2800      	cmp	r0, #0
 8031fc2:	f43f aa92 	beq.w	80314ea <_svfprintf_r+0x81a>
 8031fc6:	f1ba 0f00 	cmp.w	sl, #0
 8031fca:	f43f a89a 	beq.w	8031102 <_svfprintf_r+0x432>
 8031fce:	9803      	ldr	r0, [sp, #12]
 8031fd0:	4651      	mov	r1, sl
 8031fd2:	f7fc fe43 	bl	802ec5c <_free_r>
 8031fd6:	f7ff b894 	b.w	8031102 <_svfprintf_r+0x432>
 8031fda:	3210      	adds	r2, #16
 8031fdc:	2b07      	cmp	r3, #7
 8031fde:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031fe2:	6067      	str	r7, [r4, #4]
 8031fe4:	dc02      	bgt.n	8031fec <_svfprintf_r+0x131c>
 8031fe6:	3408      	adds	r4, #8
 8031fe8:	3d10      	subs	r5, #16
 8031fea:	e7d6      	b.n	8031f9a <_svfprintf_r+0x12ca>
 8031fec:	9803      	ldr	r0, [sp, #12]
 8031fee:	aa26      	add	r2, sp, #152	@ 0x98
 8031ff0:	4659      	mov	r1, fp
 8031ff2:	f7fd f9f5 	bl	802f3e0 <__ssprint_r>
 8031ff6:	2800      	cmp	r0, #0
 8031ff8:	d1e5      	bne.n	8031fc6 <_svfprintf_r+0x12f6>
 8031ffa:	ac29      	add	r4, sp, #164	@ 0xa4
 8031ffc:	e7f4      	b.n	8031fe8 <_svfprintf_r+0x1318>
 8031ffe:	9803      	ldr	r0, [sp, #12]
 8032000:	4651      	mov	r1, sl
 8032002:	f7fc fe2b 	bl	802ec5c <_free_r>
 8032006:	f7ff ba88 	b.w	803151a <_svfprintf_r+0x84a>
 803200a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803200c:	2b00      	cmp	r3, #0
 803200e:	f43f a878 	beq.w	8031102 <_svfprintf_r+0x432>
 8032012:	9803      	ldr	r0, [sp, #12]
 8032014:	aa26      	add	r2, sp, #152	@ 0x98
 8032016:	4659      	mov	r1, fp
 8032018:	f7fd f9e2 	bl	802f3e0 <__ssprint_r>
 803201c:	f7ff b871 	b.w	8031102 <_svfprintf_r+0x432>
 8032020:	ea56 0207 	orrs.w	r2, r6, r7
 8032024:	9508      	str	r5, [sp, #32]
 8032026:	f43f ab7a 	beq.w	803171e <_svfprintf_r+0xa4e>
 803202a:	2b01      	cmp	r3, #1
 803202c:	f43f abfb 	beq.w	8031826 <_svfprintf_r+0xb56>
 8032030:	2b02      	cmp	r3, #2
 8032032:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8032036:	f43f ac3f 	beq.w	80318b8 <_svfprintf_r+0xbe8>
 803203a:	f006 0307 	and.w	r3, r6, #7
 803203e:	08f6      	lsrs	r6, r6, #3
 8032040:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8032044:	08ff      	lsrs	r7, r7, #3
 8032046:	3330      	adds	r3, #48	@ 0x30
 8032048:	ea56 0107 	orrs.w	r1, r6, r7
 803204c:	464a      	mov	r2, r9
 803204e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8032052:	d1f2      	bne.n	803203a <_svfprintf_r+0x136a>
 8032054:	9908      	ldr	r1, [sp, #32]
 8032056:	07c8      	lsls	r0, r1, #31
 8032058:	d506      	bpl.n	8032068 <_svfprintf_r+0x1398>
 803205a:	2b30      	cmp	r3, #48	@ 0x30
 803205c:	d004      	beq.n	8032068 <_svfprintf_r+0x1398>
 803205e:	2330      	movs	r3, #48	@ 0x30
 8032060:	f809 3c01 	strb.w	r3, [r9, #-1]
 8032064:	f1a2 0902 	sub.w	r9, r2, #2
 8032068:	ab52      	add	r3, sp, #328	@ 0x148
 803206a:	9d08      	ldr	r5, [sp, #32]
 803206c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8032070:	f04f 0a00 	mov.w	sl, #0
 8032074:	eba3 0809 	sub.w	r8, r3, r9
 8032078:	4657      	mov	r7, sl
 803207a:	f8cd a020 	str.w	sl, [sp, #32]
 803207e:	4656      	mov	r6, sl
 8032080:	f7ff b97c 	b.w	803137c <_svfprintf_r+0x6ac>
 8032084:	0803c1f2 	.word	0x0803c1f2
 8032088:	0803c202 	.word	0x0803c202

0803208c <__swhatbuf_r>:
 803208c:	b570      	push	{r4, r5, r6, lr}
 803208e:	460c      	mov	r4, r1
 8032090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032094:	2900      	cmp	r1, #0
 8032096:	b096      	sub	sp, #88	@ 0x58
 8032098:	4615      	mov	r5, r2
 803209a:	461e      	mov	r6, r3
 803209c:	da07      	bge.n	80320ae <__swhatbuf_r+0x22>
 803209e:	89a1      	ldrh	r1, [r4, #12]
 80320a0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80320a4:	d117      	bne.n	80320d6 <__swhatbuf_r+0x4a>
 80320a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80320aa:	4608      	mov	r0, r1
 80320ac:	e00f      	b.n	80320ce <__swhatbuf_r+0x42>
 80320ae:	466a      	mov	r2, sp
 80320b0:	f003 f892 	bl	80351d8 <_fstat_r>
 80320b4:	2800      	cmp	r0, #0
 80320b6:	dbf2      	blt.n	803209e <__swhatbuf_r+0x12>
 80320b8:	9901      	ldr	r1, [sp, #4]
 80320ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80320be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80320c2:	4259      	negs	r1, r3
 80320c4:	4159      	adcs	r1, r3
 80320c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80320ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80320ce:	6031      	str	r1, [r6, #0]
 80320d0:	602b      	str	r3, [r5, #0]
 80320d2:	b016      	add	sp, #88	@ 0x58
 80320d4:	bd70      	pop	{r4, r5, r6, pc}
 80320d6:	2100      	movs	r1, #0
 80320d8:	2340      	movs	r3, #64	@ 0x40
 80320da:	e7e6      	b.n	80320aa <__swhatbuf_r+0x1e>

080320dc <__smakebuf_r>:
 80320dc:	898b      	ldrh	r3, [r1, #12]
 80320de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80320e0:	079d      	lsls	r5, r3, #30
 80320e2:	4606      	mov	r6, r0
 80320e4:	460c      	mov	r4, r1
 80320e6:	d507      	bpl.n	80320f8 <__smakebuf_r+0x1c>
 80320e8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80320ec:	6023      	str	r3, [r4, #0]
 80320ee:	6123      	str	r3, [r4, #16]
 80320f0:	2301      	movs	r3, #1
 80320f2:	6163      	str	r3, [r4, #20]
 80320f4:	b003      	add	sp, #12
 80320f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80320f8:	ab01      	add	r3, sp, #4
 80320fa:	466a      	mov	r2, sp
 80320fc:	f7ff ffc6 	bl	803208c <__swhatbuf_r>
 8032100:	9f00      	ldr	r7, [sp, #0]
 8032102:	4605      	mov	r5, r0
 8032104:	4639      	mov	r1, r7
 8032106:	4630      	mov	r0, r6
 8032108:	f7fc fec0 	bl	802ee8c <_malloc_r>
 803210c:	b948      	cbnz	r0, 8032122 <__smakebuf_r+0x46>
 803210e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032112:	059a      	lsls	r2, r3, #22
 8032114:	d4ee      	bmi.n	80320f4 <__smakebuf_r+0x18>
 8032116:	f023 0303 	bic.w	r3, r3, #3
 803211a:	f043 0302 	orr.w	r3, r3, #2
 803211e:	81a3      	strh	r3, [r4, #12]
 8032120:	e7e2      	b.n	80320e8 <__smakebuf_r+0xc>
 8032122:	89a3      	ldrh	r3, [r4, #12]
 8032124:	6020      	str	r0, [r4, #0]
 8032126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803212a:	81a3      	strh	r3, [r4, #12]
 803212c:	9b01      	ldr	r3, [sp, #4]
 803212e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8032132:	b15b      	cbz	r3, 803214c <__smakebuf_r+0x70>
 8032134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8032138:	4630      	mov	r0, r6
 803213a:	f003 f85f 	bl	80351fc <_isatty_r>
 803213e:	b128      	cbz	r0, 803214c <__smakebuf_r+0x70>
 8032140:	89a3      	ldrh	r3, [r4, #12]
 8032142:	f023 0303 	bic.w	r3, r3, #3
 8032146:	f043 0301 	orr.w	r3, r3, #1
 803214a:	81a3      	strh	r3, [r4, #12]
 803214c:	89a3      	ldrh	r3, [r4, #12]
 803214e:	431d      	orrs	r5, r3
 8032150:	81a5      	strh	r5, [r4, #12]
 8032152:	e7cf      	b.n	80320f4 <__smakebuf_r+0x18>

08032154 <__ssvfscanf_r>:
 8032154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032158:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803215c:	461d      	mov	r5, r3
 803215e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8032162:	af02      	add	r7, sp, #8
 8032164:	049e      	lsls	r6, r3, #18
 8032166:	62b8      	str	r0, [r7, #40]	@ 0x28
 8032168:	460c      	mov	r4, r1
 803216a:	617a      	str	r2, [r7, #20]
 803216c:	d406      	bmi.n	803217c <__ssvfscanf_r+0x28>
 803216e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032172:	818b      	strh	r3, [r1, #12]
 8032174:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8032176:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803217a:	664b      	str	r3, [r1, #100]	@ 0x64
 803217c:	2300      	movs	r3, #0
 803217e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032182:	61bb      	str	r3, [r7, #24]
 8032184:	637b      	str	r3, [r7, #52]	@ 0x34
 8032186:	633b      	str	r3, [r7, #48]	@ 0x30
 8032188:	627b      	str	r3, [r7, #36]	@ 0x24
 803218a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803218e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8032194:	2b00      	cmp	r3, #0
 8032196:	f000 80d3 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 803219a:	4a84      	ldr	r2, [pc, #528]	@ (80323ac <__ssvfscanf_r+0x258>)
 803219c:	5cd6      	ldrb	r6, [r2, r3]
 803219e:	f016 0608 	ands.w	r6, r6, #8
 80321a2:	d01b      	beq.n	80321dc <__ssvfscanf_r+0x88>
 80321a4:	6863      	ldr	r3, [r4, #4]
 80321a6:	2b00      	cmp	r3, #0
 80321a8:	dd08      	ble.n	80321bc <__ssvfscanf_r+0x68>
 80321aa:	6823      	ldr	r3, [r4, #0]
 80321ac:	497f      	ldr	r1, [pc, #508]	@ (80323ac <__ssvfscanf_r+0x258>)
 80321ae:	781a      	ldrb	r2, [r3, #0]
 80321b0:	5c8a      	ldrb	r2, [r1, r2]
 80321b2:	0710      	lsls	r0, r2, #28
 80321b4:	d409      	bmi.n	80321ca <__ssvfscanf_r+0x76>
 80321b6:	f8c7 8014 	str.w	r8, [r7, #20]
 80321ba:	e7e6      	b.n	803218a <__ssvfscanf_r+0x36>
 80321bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80321be:	4621      	mov	r1, r4
 80321c0:	f7fd fe13 	bl	802fdea <__ssrefill_r>
 80321c4:	2800      	cmp	r0, #0
 80321c6:	d0f0      	beq.n	80321aa <__ssvfscanf_r+0x56>
 80321c8:	e7f5      	b.n	80321b6 <__ssvfscanf_r+0x62>
 80321ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80321cc:	3201      	adds	r2, #1
 80321ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80321d0:	6862      	ldr	r2, [r4, #4]
 80321d2:	3301      	adds	r3, #1
 80321d4:	3a01      	subs	r2, #1
 80321d6:	6062      	str	r2, [r4, #4]
 80321d8:	6023      	str	r3, [r4, #0]
 80321da:	e7e3      	b.n	80321a4 <__ssvfscanf_r+0x50>
 80321dc:	2b25      	cmp	r3, #37	@ 0x25
 80321de:	d163      	bne.n	80322a8 <__ssvfscanf_r+0x154>
 80321e0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80321e2:	4642      	mov	r2, r8
 80321e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80321e8:	617a      	str	r2, [r7, #20]
 80321ea:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 80321ee:	2a55      	cmp	r2, #85	@ 0x55
 80321f0:	f200 816e 	bhi.w	80324d0 <__ssvfscanf_r+0x37c>
 80321f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80321f8:	016c0056 	.word	0x016c0056
 80321fc:	016c016c 	.word	0x016c016c
 8032200:	007d016c 	.word	0x007d016c
 8032204:	016c016c 	.word	0x016c016c
 8032208:	016c016c 	.word	0x016c016c
 803220c:	00b9016c 	.word	0x00b9016c
 8032210:	00b900b9 	.word	0x00b900b9
 8032214:	00b900b9 	.word	0x00b900b9
 8032218:	00b900b9 	.word	0x00b900b9
 803221c:	00b900b9 	.word	0x00b900b9
 8032220:	016c00b9 	.word	0x016c00b9
 8032224:	016c016c 	.word	0x016c016c
 8032228:	016c016c 	.word	0x016c016c
 803222c:	016c016c 	.word	0x016c016c
 8032230:	016c00e0 	.word	0x016c00e0
 8032234:	00c3010a 	.word	0x00c3010a
 8032238:	00e000e0 	.word	0x00e000e0
 803223c:	016c00e0 	.word	0x016c00e0
 8032240:	016c016c 	.word	0x016c016c
 8032244:	00a2016c 	.word	0x00a2016c
 8032248:	016c016c 	.word	0x016c016c
 803224c:	016c00c7 	.word	0x016c00c7
 8032250:	016c016c 	.word	0x016c016c
 8032254:	016c00fa 	.word	0x016c00fa
 8032258:	016c016c 	.word	0x016c016c
 803225c:	00d4016c 	.word	0x00d4016c
 8032260:	016c016c 	.word	0x016c016c
 8032264:	016c00ff 	.word	0x016c00ff
 8032268:	016c016c 	.word	0x016c016c
 803226c:	016c016c 	.word	0x016c016c
 8032270:	016c00e0 	.word	0x016c00e0
 8032274:	00c5010c 	.word	0x00c5010c
 8032278:	00e000e0 	.word	0x00e000e0
 803227c:	009400e0 	.word	0x009400e0
 8032280:	00a20130 	.word	0x00a20130
 8032284:	0085016c 	.word	0x0085016c
 8032288:	011400ac 	.word	0x011400ac
 803228c:	011100c9 	.word	0x011100c9
 8032290:	016c016c 	.word	0x016c016c
 8032294:	00a900fc 	.word	0x00a900fc
 8032298:	016c00d0 	.word	0x016c00d0
 803229c:	00d4016c 	.word	0x00d4016c
 80322a0:	00a9016c 	.word	0x00a9016c
 80322a4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80322a8:	6863      	ldr	r3, [r4, #4]
 80322aa:	2b00      	cmp	r3, #0
 80322ac:	dd0e      	ble.n	80322cc <__ssvfscanf_r+0x178>
 80322ae:	6823      	ldr	r3, [r4, #0]
 80322b0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80322b4:	7819      	ldrb	r1, [r3, #0]
 80322b6:	4291      	cmp	r1, r2
 80322b8:	d142      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 80322ba:	3301      	adds	r3, #1
 80322bc:	6862      	ldr	r2, [r4, #4]
 80322be:	6023      	str	r3, [r4, #0]
 80322c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80322c2:	3a01      	subs	r2, #1
 80322c4:	3301      	adds	r3, #1
 80322c6:	6062      	str	r2, [r4, #4]
 80322c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80322ca:	e774      	b.n	80321b6 <__ssvfscanf_r+0x62>
 80322cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322ce:	4621      	mov	r1, r4
 80322d0:	f7fd fd8b 	bl	802fdea <__ssrefill_r>
 80322d4:	2800      	cmp	r0, #0
 80322d6:	d0ea      	beq.n	80322ae <__ssvfscanf_r+0x15a>
 80322d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80322da:	b113      	cbz	r3, 80322e2 <__ssvfscanf_r+0x18e>
 80322dc:	89a3      	ldrh	r3, [r4, #12]
 80322de:	065b      	lsls	r3, r3, #25
 80322e0:	d52e      	bpl.n	8032340 <__ssvfscanf_r+0x1ec>
 80322e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80322e4:	2b00      	cmp	r3, #0
 80322e6:	f041 809d 	bne.w	8033424 <__ssvfscanf_r+0x12d0>
 80322ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80322ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80322f0:	e0f9      	b.n	80324e6 <__ssvfscanf_r+0x392>
 80322f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80322f4:	4333      	orrs	r3, r6
 80322f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80322f8:	d122      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 80322fa:	2610      	movs	r6, #16
 80322fc:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032300:	e76f      	b.n	80321e2 <__ssvfscanf_r+0x8e>
 8032302:	0731      	lsls	r1, r6, #28
 8032304:	d11c      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 8032306:	f898 3001 	ldrb.w	r3, [r8, #1]
 803230a:	2b6c      	cmp	r3, #108	@ 0x6c
 803230c:	d105      	bne.n	803231a <__ssvfscanf_r+0x1c6>
 803230e:	f108 0302 	add.w	r3, r8, #2
 8032312:	617b      	str	r3, [r7, #20]
 8032314:	f046 0602 	orr.w	r6, r6, #2
 8032318:	e7f0      	b.n	80322fc <__ssvfscanf_r+0x1a8>
 803231a:	f046 0601 	orr.w	r6, r6, #1
 803231e:	e7ed      	b.n	80322fc <__ssvfscanf_r+0x1a8>
 8032320:	0732      	lsls	r2, r6, #28
 8032322:	d10d      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 8032324:	f898 3001 	ldrb.w	r3, [r8, #1]
 8032328:	2b68      	cmp	r3, #104	@ 0x68
 803232a:	bf03      	ittte	eq
 803232c:	f108 0302 	addeq.w	r3, r8, #2
 8032330:	617b      	streq	r3, [r7, #20]
 8032332:	f046 0608 	orreq.w	r6, r6, #8
 8032336:	f046 0604 	orrne.w	r6, r6, #4
 803233a:	e7df      	b.n	80322fc <__ssvfscanf_r+0x1a8>
 803233c:	0733      	lsls	r3, r6, #28
 803233e:	d0e9      	beq.n	8032314 <__ssvfscanf_r+0x1c0>
 8032340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032342:	2b00      	cmp	r3, #0
 8032344:	f000 80cf 	beq.w	80324e6 <__ssvfscanf_r+0x392>
 8032348:	e0c8      	b.n	80324dc <__ssvfscanf_r+0x388>
 803234a:	0730      	lsls	r0, r6, #28
 803234c:	d0d6      	beq.n	80322fc <__ssvfscanf_r+0x1a8>
 803234e:	e7f7      	b.n	8032340 <__ssvfscanf_r+0x1ec>
 8032350:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8032354:	d1f4      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 8032356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8032358:	b922      	cbnz	r2, 8032364 <__ssvfscanf_r+0x210>
 803235a:	b082      	sub	sp, #8
 803235c:	aa02      	add	r2, sp, #8
 803235e:	e9c2 3300 	strd	r3, r3, [r2]
 8032362:	637a      	str	r2, [r7, #52]	@ 0x34
 8032364:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8032368:	e7c8      	b.n	80322fc <__ssvfscanf_r+0x1a8>
 803236a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803236e:	d1e7      	bne.n	8032340 <__ssvfscanf_r+0x1ec>
 8032370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032372:	220a      	movs	r2, #10
 8032374:	fb02 3301 	mla	r3, r2, r1, r3
 8032378:	3b30      	subs	r3, #48	@ 0x30
 803237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803237c:	e7be      	b.n	80322fc <__ssvfscanf_r+0x1a8>
 803237e:	f046 0601 	orr.w	r6, r6, #1
 8032382:	4b0b      	ldr	r3, [pc, #44]	@ (80323b0 <__ssvfscanf_r+0x25c>)
 8032384:	e009      	b.n	803239a <__ssvfscanf_r+0x246>
 8032386:	f046 0601 	orr.w	r6, r6, #1
 803238a:	4b0a      	ldr	r3, [pc, #40]	@ (80323b4 <__ssvfscanf_r+0x260>)
 803238c:	61bb      	str	r3, [r7, #24]
 803238e:	2308      	movs	r3, #8
 8032390:	61fb      	str	r3, [r7, #28]
 8032392:	f04f 0803 	mov.w	r8, #3
 8032396:	e011      	b.n	80323bc <__ssvfscanf_r+0x268>
 8032398:	4b06      	ldr	r3, [pc, #24]	@ (80323b4 <__ssvfscanf_r+0x260>)
 803239a:	61bb      	str	r3, [r7, #24]
 803239c:	230a      	movs	r3, #10
 803239e:	e7f7      	b.n	8032390 <__ssvfscanf_r+0x23c>
 80323a0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80323a4:	4b03      	ldr	r3, [pc, #12]	@ (80323b4 <__ssvfscanf_r+0x260>)
 80323a6:	61bb      	str	r3, [r7, #24]
 80323a8:	2310      	movs	r3, #16
 80323aa:	e7f1      	b.n	8032390 <__ssvfscanf_r+0x23c>
 80323ac:	0803c039 	.word	0x0803c039
 80323b0:	0802c0e9 	.word	0x0802c0e9
 80323b4:	08034ee9 	.word	0x08034ee9
 80323b8:	f04f 0804 	mov.w	r8, #4
 80323bc:	6863      	ldr	r3, [r4, #4]
 80323be:	2b00      	cmp	r3, #0
 80323c0:	dd4e      	ble.n	8032460 <__ssvfscanf_r+0x30c>
 80323c2:	0673      	lsls	r3, r6, #25
 80323c4:	d407      	bmi.n	80323d6 <__ssvfscanf_r+0x282>
 80323c6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 80326c4 <__ssvfscanf_r+0x570>
 80323ca:	6823      	ldr	r3, [r4, #0]
 80323cc:	781a      	ldrb	r2, [r3, #0]
 80323ce:	f819 2002 	ldrb.w	r2, [r9, r2]
 80323d2:	0710      	lsls	r0, r2, #28
 80323d4:	d44b      	bmi.n	803246e <__ssvfscanf_r+0x31a>
 80323d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80323da:	f1b8 0f03 	cmp.w	r8, #3
 80323de:	d858      	bhi.n	8032492 <__ssvfscanf_r+0x33e>
 80323e0:	e8df f018 	tbh	[pc, r8, lsl #1]
 80323e4:	037801c1 	.word	0x037801c1
 80323e8:	05f30514 	.word	0x05f30514
 80323ec:	f046 0601 	orr.w	r6, r6, #1
 80323f0:	f04f 0802 	mov.w	r8, #2
 80323f4:	e7e2      	b.n	80323bc <__ssvfscanf_r+0x268>
 80323f6:	6979      	ldr	r1, [r7, #20]
 80323f8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80323fc:	f001 fd1d 	bl	8033e3a <__sccl>
 8032400:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032404:	6178      	str	r0, [r7, #20]
 8032406:	f04f 0801 	mov.w	r8, #1
 803240a:	e7d7      	b.n	80323bc <__ssvfscanf_r+0x268>
 803240c:	f046 0601 	orr.w	r6, r6, #1
 8032410:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032414:	f04f 0800 	mov.w	r8, #0
 8032418:	e7d0      	b.n	80323bc <__ssvfscanf_r+0x268>
 803241a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 803241e:	e7c1      	b.n	80323a4 <__ssvfscanf_r+0x250>
 8032420:	06f1      	lsls	r1, r6, #27
 8032422:	f53f aeb2 	bmi.w	803218a <__ssvfscanf_r+0x36>
 8032426:	0732      	lsls	r2, r6, #28
 8032428:	f855 3b04 	ldr.w	r3, [r5], #4
 803242c:	d502      	bpl.n	8032434 <__ssvfscanf_r+0x2e0>
 803242e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032430:	701a      	strb	r2, [r3, #0]
 8032432:	e6aa      	b.n	803218a <__ssvfscanf_r+0x36>
 8032434:	0770      	lsls	r0, r6, #29
 8032436:	d502      	bpl.n	803243e <__ssvfscanf_r+0x2ea>
 8032438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803243a:	801a      	strh	r2, [r3, #0]
 803243c:	e6a5      	b.n	803218a <__ssvfscanf_r+0x36>
 803243e:	07f1      	lsls	r1, r6, #31
 8032440:	d502      	bpl.n	8032448 <__ssvfscanf_r+0x2f4>
 8032442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032444:	601a      	str	r2, [r3, #0]
 8032446:	e6a0      	b.n	803218a <__ssvfscanf_r+0x36>
 8032448:	07b2      	lsls	r2, r6, #30
 803244a:	d5fa      	bpl.n	8032442 <__ssvfscanf_r+0x2ee>
 803244c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803244e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8032450:	17d2      	asrs	r2, r2, #31
 8032452:	e9c3 1200 	strd	r1, r2, [r3]
 8032456:	e698      	b.n	803218a <__ssvfscanf_r+0x36>
 8032458:	4b99      	ldr	r3, [pc, #612]	@ (80326c0 <__ssvfscanf_r+0x56c>)
 803245a:	61bb      	str	r3, [r7, #24]
 803245c:	2300      	movs	r3, #0
 803245e:	e797      	b.n	8032390 <__ssvfscanf_r+0x23c>
 8032460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032462:	4621      	mov	r1, r4
 8032464:	f7fd fcc1 	bl	802fdea <__ssrefill_r>
 8032468:	2800      	cmp	r0, #0
 803246a:	d0aa      	beq.n	80323c2 <__ssvfscanf_r+0x26e>
 803246c:	e734      	b.n	80322d8 <__ssvfscanf_r+0x184>
 803246e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032470:	3201      	adds	r2, #1
 8032472:	633a      	str	r2, [r7, #48]	@ 0x30
 8032474:	6862      	ldr	r2, [r4, #4]
 8032476:	3a01      	subs	r2, #1
 8032478:	2a00      	cmp	r2, #0
 803247a:	6062      	str	r2, [r4, #4]
 803247c:	dd02      	ble.n	8032484 <__ssvfscanf_r+0x330>
 803247e:	3301      	adds	r3, #1
 8032480:	6023      	str	r3, [r4, #0]
 8032482:	e7a2      	b.n	80323ca <__ssvfscanf_r+0x276>
 8032484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032486:	4621      	mov	r1, r4
 8032488:	f7fd fcaf 	bl	802fdea <__ssrefill_r>
 803248c:	2800      	cmp	r0, #0
 803248e:	d09c      	beq.n	80323ca <__ssvfscanf_r+0x276>
 8032490:	e722      	b.n	80322d8 <__ssvfscanf_r+0x184>
 8032492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032494:	2b01      	cmp	r3, #1
 8032496:	bf38      	it	cc
 8032498:	2301      	movcc	r3, #1
 803249a:	4698      	mov	r8, r3
 803249c:	f016 0301 	ands.w	r3, r6, #1
 80324a0:	f006 0b10 	and.w	fp, r6, #16
 80324a4:	f000 80eb 	beq.w	803267e <__ssvfscanf_r+0x52a>
 80324a8:	f1bb 0f00 	cmp.w	fp, #0
 80324ac:	f040 8085 	bne.w	80325ba <__ssvfscanf_r+0x466>
 80324b0:	462b      	mov	r3, r5
 80324b2:	0631      	lsls	r1, r6, #24
 80324b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80324b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80324ba:	f140 8085 	bpl.w	80325c8 <__ssvfscanf_r+0x474>
 80324be:	b13d      	cbz	r5, 80324d0 <__ssvfscanf_r+0x37c>
 80324c0:	2080      	movs	r0, #128	@ 0x80
 80324c2:	f7fc fcd3 	bl	802ee6c <malloc>
 80324c6:	4606      	mov	r6, r0
 80324c8:	b998      	cbnz	r0, 80324f2 <__ssvfscanf_r+0x39e>
 80324ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80324ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80324d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324d2:	b143      	cbz	r3, 80324e6 <__ssvfscanf_r+0x392>
 80324d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80324d6:	3301      	adds	r3, #1
 80324d8:	f000 87a4 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 80324dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324de:	6818      	ldr	r0, [r3, #0]
 80324e0:	b108      	cbz	r0, 80324e6 <__ssvfscanf_r+0x392>
 80324e2:	f7fc fccb 	bl	802ee7c <free>
 80324e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80324e8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 80324ec:	46bd      	mov	sp, r7
 80324ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80324f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324f4:	6028      	str	r0, [r5, #0]
 80324f6:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80324fa:	889b      	ldrh	r3, [r3, #4]
 80324fc:	4599      	cmp	r9, r3
 80324fe:	d314      	bcc.n	803252a <__ssvfscanf_r+0x3d6>
 8032500:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032504:	4293      	cmp	r3, r2
 8032506:	f200 878d 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 803250a:	3308      	adds	r3, #8
 803250c:	fa1f fa83 	uxth.w	sl, r3
 8032510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032512:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032516:	6818      	ldr	r0, [r3, #0]
 8032518:	f001 fc32 	bl	8033d80 <realloc>
 803251c:	2800      	cmp	r0, #0
 803251e:	f000 8781 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 8032522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032524:	6018      	str	r0, [r3, #0]
 8032526:	f8a3 a004 	strh.w	sl, [r3, #4]
 803252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803252c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803252e:	681b      	ldr	r3, [r3, #0]
 8032530:	f109 0201 	add.w	r2, r9, #1
 8032534:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032538:	46aa      	mov	sl, r5
 803253a:	80ca      	strh	r2, [r1, #6]
 803253c:	4635      	mov	r5, r6
 803253e:	f04f 0920 	mov.w	r9, #32
 8032542:	2200      	movs	r2, #0
 8032544:	613a      	str	r2, [r7, #16]
 8032546:	f7fb fbd3 	bl	802dcf0 <__locale_mb_cur_max>
 803254a:	693a      	ldr	r2, [r7, #16]
 803254c:	4290      	cmp	r0, r2
 803254e:	f43f aec3 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032552:	6821      	ldr	r1, [r4, #0]
 8032554:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8032558:	f811 0b01 	ldrb.w	r0, [r1], #1
 803255c:	f80c 0002 	strb.w	r0, [ip, r2]
 8032560:	1c53      	adds	r3, r2, #1
 8032562:	6862      	ldr	r2, [r4, #4]
 8032564:	3a01      	subs	r2, #1
 8032566:	e9c4 1200 	strd	r1, r2, [r4]
 803256a:	6a3a      	ldr	r2, [r7, #32]
 803256c:	2a03      	cmp	r2, #3
 803256e:	d102      	bne.n	8032576 <__ssvfscanf_r+0x422>
 8032570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032572:	2a04      	cmp	r2, #4
 8032574:	d007      	beq.n	8032586 <__ssvfscanf_r+0x432>
 8032576:	2208      	movs	r2, #8
 8032578:	2100      	movs	r1, #0
 803257a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803257e:	623b      	str	r3, [r7, #32]
 8032580:	f7fa fa2e 	bl	802c9e0 <memset>
 8032584:	6a3b      	ldr	r3, [r7, #32]
 8032586:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803258a:	9200      	str	r2, [sp, #0]
 803258c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803258e:	613b      	str	r3, [r7, #16]
 8032590:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032594:	4629      	mov	r1, r5
 8032596:	f002 ffad 	bl	80354f4 <_mbrtowc_r>
 803259a:	1c42      	adds	r2, r0, #1
 803259c:	6238      	str	r0, [r7, #32]
 803259e:	f43f ae9b 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 80325a2:	693b      	ldr	r3, [r7, #16]
 80325a4:	b9b8      	cbnz	r0, 80325d6 <__ssvfscanf_r+0x482>
 80325a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80325a8:	441a      	add	r2, r3
 80325aa:	4613      	mov	r3, r2
 80325ac:	f1bb 0f00 	cmp.w	fp, #0
 80325b0:	d00e      	beq.n	80325d0 <__ssvfscanf_r+0x47c>
 80325b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80325b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80325b8:	e019      	b.n	80325ee <__ssvfscanf_r+0x49a>
 80325ba:	f04f 0900 	mov.w	r9, #0
 80325be:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80325c0:	464e      	mov	r6, r9
 80325c2:	46ca      	mov	sl, r9
 80325c4:	464d      	mov	r5, r9
 80325c6:	e7bc      	b.n	8032542 <__ssvfscanf_r+0x3ee>
 80325c8:	46d9      	mov	r9, fp
 80325ca:	465e      	mov	r6, fp
 80325cc:	46da      	mov	sl, fp
 80325ce:	e7b8      	b.n	8032542 <__ssvfscanf_r+0x3ee>
 80325d0:	f8c5 b000 	str.w	fp, [r5]
 80325d4:	e7ed      	b.n	80325b2 <__ssvfscanf_r+0x45e>
 80325d6:	6a3a      	ldr	r2, [r7, #32]
 80325d8:	3202      	adds	r2, #2
 80325da:	d025      	beq.n	8032628 <__ssvfscanf_r+0x4d4>
 80325dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80325de:	441a      	add	r2, r3
 80325e0:	6a3b      	ldr	r3, [r7, #32]
 80325e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80325e4:	2b03      	cmp	r3, #3
 80325e6:	d1e5      	bne.n	80325b4 <__ssvfscanf_r+0x460>
 80325e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80325ea:	2b04      	cmp	r3, #4
 80325ec:	d1e2      	bne.n	80325b4 <__ssvfscanf_r+0x460>
 80325ee:	f1bb 0f00 	cmp.w	fp, #0
 80325f2:	d117      	bne.n	8032624 <__ssvfscanf_r+0x4d0>
 80325f4:	f1ba 0f00 	cmp.w	sl, #0
 80325f8:	d013      	beq.n	8032622 <__ssvfscanf_r+0x4ce>
 80325fa:	1bab      	subs	r3, r5, r6
 80325fc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8032600:	d80f      	bhi.n	8032622 <__ssvfscanf_r+0x4ce>
 8032602:	4630      	mov	r0, r6
 8032604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032608:	613b      	str	r3, [r7, #16]
 803260a:	f001 fbb9 	bl	8033d80 <realloc>
 803260e:	4606      	mov	r6, r0
 8032610:	2800      	cmp	r0, #0
 8032612:	f43f af5a 	beq.w	80324ca <__ssvfscanf_r+0x376>
 8032616:	693b      	ldr	r3, [r7, #16]
 8032618:	f8ca 0000 	str.w	r0, [sl]
 803261c:	18c5      	adds	r5, r0, r3
 803261e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032622:	3504      	adds	r5, #4
 8032624:	2200      	movs	r2, #0
 8032626:	e000      	b.n	803262a <__ssvfscanf_r+0x4d6>
 8032628:	461a      	mov	r2, r3
 803262a:	6863      	ldr	r3, [r4, #4]
 803262c:	2b00      	cmp	r3, #0
 803262e:	dc14      	bgt.n	803265a <__ssvfscanf_r+0x506>
 8032630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032632:	613a      	str	r2, [r7, #16]
 8032634:	4621      	mov	r1, r4
 8032636:	f7fd fbd8 	bl	802fdea <__ssrefill_r>
 803263a:	693a      	ldr	r2, [r7, #16]
 803263c:	b168      	cbz	r0, 803265a <__ssvfscanf_r+0x506>
 803263e:	2a00      	cmp	r2, #0
 8032640:	f47f ae4a 	bne.w	80322d8 <__ssvfscanf_r+0x184>
 8032644:	f1ba 0f00 	cmp.w	sl, #0
 8032648:	d10c      	bne.n	8032664 <__ssvfscanf_r+0x510>
 803264a:	f1bb 0f00 	cmp.w	fp, #0
 803264e:	d102      	bne.n	8032656 <__ssvfscanf_r+0x502>
 8032650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032652:	3301      	adds	r3, #1
 8032654:	627b      	str	r3, [r7, #36]	@ 0x24
 8032656:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8032658:	e597      	b.n	803218a <__ssvfscanf_r+0x36>
 803265a:	f1b8 0f00 	cmp.w	r8, #0
 803265e:	f47f af71 	bne.w	8032544 <__ssvfscanf_r+0x3f0>
 8032662:	e7ef      	b.n	8032644 <__ssvfscanf_r+0x4f0>
 8032664:	1ba9      	subs	r1, r5, r6
 8032666:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803266a:	d9ee      	bls.n	803264a <__ssvfscanf_r+0x4f6>
 803266c:	f8da 0000 	ldr.w	r0, [sl]
 8032670:	f001 fb86 	bl	8033d80 <realloc>
 8032674:	2800      	cmp	r0, #0
 8032676:	d0e8      	beq.n	803264a <__ssvfscanf_r+0x4f6>
 8032678:	f8ca 0000 	str.w	r0, [sl]
 803267c:	e7e5      	b.n	803264a <__ssvfscanf_r+0x4f6>
 803267e:	f1bb 0f00 	cmp.w	fp, #0
 8032682:	d021      	beq.n	80326c8 <__ssvfscanf_r+0x574>
 8032684:	461e      	mov	r6, r3
 8032686:	e9d4 2300 	ldrd	r2, r3, [r4]
 803268a:	4598      	cmp	r8, r3
 803268c:	dd11      	ble.n	80326b2 <__ssvfscanf_r+0x55e>
 803268e:	441a      	add	r2, r3
 8032690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032692:	6022      	str	r2, [r4, #0]
 8032694:	4621      	mov	r1, r4
 8032696:	441e      	add	r6, r3
 8032698:	eba8 0803 	sub.w	r8, r8, r3
 803269c:	f7fd fba5 	bl	802fdea <__ssrefill_r>
 80326a0:	2800      	cmp	r0, #0
 80326a2:	d0f0      	beq.n	8032686 <__ssvfscanf_r+0x532>
 80326a4:	2e00      	cmp	r6, #0
 80326a6:	f43f ae17 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 80326aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80326ac:	4433      	add	r3, r6
 80326ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80326b0:	e56b      	b.n	803218a <__ssvfscanf_r+0x36>
 80326b2:	eba3 0308 	sub.w	r3, r3, r8
 80326b6:	4442      	add	r2, r8
 80326b8:	4446      	add	r6, r8
 80326ba:	6063      	str	r3, [r4, #4]
 80326bc:	6022      	str	r2, [r4, #0]
 80326be:	e7f4      	b.n	80326aa <__ssvfscanf_r+0x556>
 80326c0:	0802c0e9 	.word	0x0802c0e9
 80326c4:	0803c039 	.word	0x0803c039
 80326c8:	46a9      	mov	r9, r5
 80326ca:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80326ce:	f859 5b04 	ldr.w	r5, [r9], #4
 80326d2:	d02c      	beq.n	803272e <__ssvfscanf_r+0x5da>
 80326d4:	2d00      	cmp	r5, #0
 80326d6:	f43f ae33 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 80326da:	4640      	mov	r0, r8
 80326dc:	f7fc fbc6 	bl	802ee6c <malloc>
 80326e0:	4682      	mov	sl, r0
 80326e2:	2800      	cmp	r0, #0
 80326e4:	f43f adfd 	beq.w	80322e2 <__ssvfscanf_r+0x18e>
 80326e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80326ea:	6028      	str	r0, [r5, #0]
 80326ec:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 80326f0:	889e      	ldrh	r6, [r3, #4]
 80326f2:	45b3      	cmp	fp, r6
 80326f4:	d311      	bcc.n	803271a <__ssvfscanf_r+0x5c6>
 80326f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80326fa:	429e      	cmp	r6, r3
 80326fc:	f200 8692 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 8032700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032702:	3608      	adds	r6, #8
 8032704:	b2b6      	uxth	r6, r6
 8032706:	6818      	ldr	r0, [r3, #0]
 8032708:	00b1      	lsls	r1, r6, #2
 803270a:	f001 fb39 	bl	8033d80 <realloc>
 803270e:	2800      	cmp	r0, #0
 8032710:	f000 8688 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 8032714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032716:	6018      	str	r0, [r3, #0]
 8032718:	809e      	strh	r6, [r3, #4]
 803271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803271c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803271e:	681b      	ldr	r3, [r3, #0]
 8032720:	f10b 0201 	add.w	r2, fp, #1
 8032724:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8032728:	462e      	mov	r6, r5
 803272a:	80ca      	strh	r2, [r1, #6]
 803272c:	4655      	mov	r5, sl
 803272e:	9400      	str	r4, [sp, #0]
 8032730:	4629      	mov	r1, r5
 8032732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032734:	4643      	mov	r3, r8
 8032736:	2201      	movs	r2, #1
 8032738:	f7fd fb74 	bl	802fe24 <_sfread_r>
 803273c:	4605      	mov	r5, r0
 803273e:	2800      	cmp	r0, #0
 8032740:	f43f adca 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032744:	b13e      	cbz	r6, 8032756 <__ssvfscanf_r+0x602>
 8032746:	4580      	cmp	r8, r0
 8032748:	d905      	bls.n	8032756 <__ssvfscanf_r+0x602>
 803274a:	4601      	mov	r1, r0
 803274c:	6830      	ldr	r0, [r6, #0]
 803274e:	f001 fb17 	bl	8033d80 <realloc>
 8032752:	b100      	cbz	r0, 8032756 <__ssvfscanf_r+0x602>
 8032754:	6030      	str	r0, [r6, #0]
 8032756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032758:	442b      	add	r3, r5
 803275a:	633b      	str	r3, [r7, #48]	@ 0x30
 803275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803275e:	3301      	adds	r3, #1
 8032760:	627b      	str	r3, [r7, #36]	@ 0x24
 8032762:	464d      	mov	r5, r9
 8032764:	e511      	b.n	803218a <__ssvfscanf_r+0x36>
 8032766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032768:	2b00      	cmp	r3, #0
 803276a:	bf08      	it	eq
 803276c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032770:	f016 0801 	ands.w	r8, r6, #1
 8032774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032776:	f006 0a10 	and.w	sl, r6, #16
 803277a:	f000 8101 	beq.w	8032980 <__ssvfscanf_r+0x82c>
 803277e:	f1ba 0f00 	cmp.w	sl, #0
 8032782:	f040 80a4 	bne.w	80328ce <__ssvfscanf_r+0x77a>
 8032786:	462b      	mov	r3, r5
 8032788:	f853 5b04 	ldr.w	r5, [r3], #4
 803278c:	60fb      	str	r3, [r7, #12]
 803278e:	0633      	lsls	r3, r6, #24
 8032790:	f140 80a5 	bpl.w	80328de <__ssvfscanf_r+0x78a>
 8032794:	2d00      	cmp	r5, #0
 8032796:	f43f ae9b 	beq.w	80324d0 <__ssvfscanf_r+0x37c>
 803279a:	2080      	movs	r0, #128	@ 0x80
 803279c:	f7fc fb66 	bl	802ee6c <malloc>
 80327a0:	4680      	mov	r8, r0
 80327a2:	2800      	cmp	r0, #0
 80327a4:	f43f ae91 	beq.w	80324ca <__ssvfscanf_r+0x376>
 80327a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327aa:	6028      	str	r0, [r5, #0]
 80327ac:	88de      	ldrh	r6, [r3, #6]
 80327ae:	889b      	ldrh	r3, [r3, #4]
 80327b0:	429e      	cmp	r6, r3
 80327b2:	d314      	bcc.n	80327de <__ssvfscanf_r+0x68a>
 80327b4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80327b8:	4293      	cmp	r3, r2
 80327ba:	f200 8633 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 80327be:	3308      	adds	r3, #8
 80327c0:	fa1f f983 	uxth.w	r9, r3
 80327c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327c6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80327ca:	6818      	ldr	r0, [r3, #0]
 80327cc:	f001 fad8 	bl	8033d80 <realloc>
 80327d0:	2800      	cmp	r0, #0
 80327d2:	f000 8627 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 80327d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327d8:	6018      	str	r0, [r3, #0]
 80327da:	f8a3 9004 	strh.w	r9, [r3, #4]
 80327de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80327e2:	681b      	ldr	r3, [r3, #0]
 80327e4:	1c72      	adds	r2, r6, #1
 80327e6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80327ea:	46ab      	mov	fp, r5
 80327ec:	80ca      	strh	r2, [r1, #6]
 80327ee:	4645      	mov	r5, r8
 80327f0:	f04f 0920 	mov.w	r9, #32
 80327f4:	2600      	movs	r6, #0
 80327f6:	f7fb fa7b 	bl	802dcf0 <__locale_mb_cur_max>
 80327fa:	42b0      	cmp	r0, r6
 80327fc:	f43f ad6c 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032800:	1c73      	adds	r3, r6, #1
 8032802:	613b      	str	r3, [r7, #16]
 8032804:	6823      	ldr	r3, [r4, #0]
 8032806:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803280a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803280e:	558a      	strb	r2, [r1, r6]
 8032810:	6862      	ldr	r2, [r4, #4]
 8032812:	3a01      	subs	r2, #1
 8032814:	e9c4 3200 	strd	r3, r2, [r4]
 8032818:	6a3b      	ldr	r3, [r7, #32]
 803281a:	2b03      	cmp	r3, #3
 803281c:	d102      	bne.n	8032824 <__ssvfscanf_r+0x6d0>
 803281e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032820:	2b04      	cmp	r3, #4
 8032822:	d005      	beq.n	8032830 <__ssvfscanf_r+0x6dc>
 8032824:	2208      	movs	r2, #8
 8032826:	2100      	movs	r1, #0
 8032828:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803282c:	f7fa f8d8 	bl	802c9e0 <memset>
 8032830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8032834:	9300      	str	r3, [sp, #0]
 8032836:	693b      	ldr	r3, [r7, #16]
 8032838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803283a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803283e:	4629      	mov	r1, r5
 8032840:	f002 fe58 	bl	80354f4 <_mbrtowc_r>
 8032844:	1c46      	adds	r6, r0, #1
 8032846:	6238      	str	r0, [r7, #32]
 8032848:	f43f ad46 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 803284c:	2800      	cmp	r0, #0
 803284e:	d14a      	bne.n	80328e6 <__ssvfscanf_r+0x792>
 8032850:	6028      	str	r0, [r5, #0]
 8032852:	682e      	ldr	r6, [r5, #0]
 8032854:	1c70      	adds	r0, r6, #1
 8032856:	d056      	beq.n	8032906 <__ssvfscanf_r+0x7b2>
 8032858:	2208      	movs	r2, #8
 803285a:	2100      	movs	r1, #0
 803285c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032860:	f7fa f8be 	bl	802c9e0 <memset>
 8032864:	4b9a      	ldr	r3, [pc, #616]	@ (8032ad0 <__ssvfscanf_r+0x97c>)
 8032866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803286c:	60bb      	str	r3, [r7, #8]
 803286e:	4632      	mov	r2, r6
 8032870:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032874:	68be      	ldr	r6, [r7, #8]
 8032876:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803287a:	47b0      	blx	r6
 803287c:	2801      	cmp	r0, #1
 803287e:	d144      	bne.n	803290a <__ssvfscanf_r+0x7b6>
 8032880:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032884:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032888:	5c9b      	ldrb	r3, [r3, r2]
 803288a:	2b00      	cmp	r3, #0
 803288c:	d148      	bne.n	8032920 <__ssvfscanf_r+0x7cc>
 803288e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032892:	693b      	ldr	r3, [r7, #16]
 8032894:	2b00      	cmp	r3, #0
 8032896:	d13a      	bne.n	803290e <__ssvfscanf_r+0x7ba>
 8032898:	f1ba 0f00 	cmp.w	sl, #0
 803289c:	d115      	bne.n	80328ca <__ssvfscanf_r+0x776>
 803289e:	f8c5 a000 	str.w	sl, [r5]
 80328a2:	f1bb 0f00 	cmp.w	fp, #0
 80328a6:	d00d      	beq.n	80328c4 <__ssvfscanf_r+0x770>
 80328a8:	eba5 0108 	sub.w	r1, r5, r8
 80328ac:	108b      	asrs	r3, r1, #2
 80328ae:	3301      	adds	r3, #1
 80328b0:	4599      	cmp	r9, r3
 80328b2:	d907      	bls.n	80328c4 <__ssvfscanf_r+0x770>
 80328b4:	f8db 0000 	ldr.w	r0, [fp]
 80328b8:	3104      	adds	r1, #4
 80328ba:	f001 fa61 	bl	8033d80 <realloc>
 80328be:	b108      	cbz	r0, 80328c4 <__ssvfscanf_r+0x770>
 80328c0:	f8cb 0000 	str.w	r0, [fp]
 80328c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80328c6:	3301      	adds	r3, #1
 80328c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80328ca:	68fd      	ldr	r5, [r7, #12]
 80328cc:	e45d      	b.n	803218a <__ssvfscanf_r+0x36>
 80328ce:	f04f 0900 	mov.w	r9, #0
 80328d2:	60fd      	str	r5, [r7, #12]
 80328d4:	46c8      	mov	r8, r9
 80328d6:	46cb      	mov	fp, r9
 80328d8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80328dc:	e78a      	b.n	80327f4 <__ssvfscanf_r+0x6a0>
 80328de:	46d1      	mov	r9, sl
 80328e0:	46d0      	mov	r8, sl
 80328e2:	46d3      	mov	fp, sl
 80328e4:	e786      	b.n	80327f4 <__ssvfscanf_r+0x6a0>
 80328e6:	6a3b      	ldr	r3, [r7, #32]
 80328e8:	3302      	adds	r3, #2
 80328ea:	d1b2      	bne.n	8032852 <__ssvfscanf_r+0x6fe>
 80328ec:	693e      	ldr	r6, [r7, #16]
 80328ee:	6863      	ldr	r3, [r4, #4]
 80328f0:	2b00      	cmp	r3, #0
 80328f2:	dc40      	bgt.n	8032976 <__ssvfscanf_r+0x822>
 80328f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328f6:	4621      	mov	r1, r4
 80328f8:	f7fd fa77 	bl	802fdea <__ssrefill_r>
 80328fc:	2800      	cmp	r0, #0
 80328fe:	d03a      	beq.n	8032976 <__ssvfscanf_r+0x822>
 8032900:	2e00      	cmp	r6, #0
 8032902:	d0c9      	beq.n	8032898 <__ssvfscanf_r+0x744>
 8032904:	e4e8      	b.n	80322d8 <__ssvfscanf_r+0x184>
 8032906:	4632      	mov	r2, r6
 8032908:	e7bc      	b.n	8032884 <__ssvfscanf_r+0x730>
 803290a:	2200      	movs	r2, #0
 803290c:	e7ba      	b.n	8032884 <__ssvfscanf_r+0x730>
 803290e:	693b      	ldr	r3, [r7, #16]
 8032910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032912:	3b01      	subs	r3, #1
 8032914:	4622      	mov	r2, r4
 8032916:	5cf1      	ldrb	r1, [r6, r3]
 8032918:	613b      	str	r3, [r7, #16]
 803291a:	f7fd fa2b 	bl	802fd74 <_sungetc_r>
 803291e:	e7b8      	b.n	8032892 <__ssvfscanf_r+0x73e>
 8032920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032922:	693a      	ldr	r2, [r7, #16]
 8032924:	4413      	add	r3, r2
 8032926:	633b      	str	r3, [r7, #48]	@ 0x30
 8032928:	6a3b      	ldr	r3, [r7, #32]
 803292a:	2b03      	cmp	r3, #3
 803292c:	d102      	bne.n	8032934 <__ssvfscanf_r+0x7e0>
 803292e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032930:	2b04      	cmp	r3, #4
 8032932:	d002      	beq.n	803293a <__ssvfscanf_r+0x7e6>
 8032934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032936:	3b01      	subs	r3, #1
 8032938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803293a:	f1ba 0f00 	cmp.w	sl, #0
 803293e:	d118      	bne.n	8032972 <__ssvfscanf_r+0x81e>
 8032940:	3504      	adds	r5, #4
 8032942:	f1bb 0f00 	cmp.w	fp, #0
 8032946:	d014      	beq.n	8032972 <__ssvfscanf_r+0x81e>
 8032948:	eba5 0608 	sub.w	r6, r5, r8
 803294c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8032950:	d80d      	bhi.n	803296e <__ssvfscanf_r+0x81a>
 8032952:	4640      	mov	r0, r8
 8032954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032958:	f001 fa12 	bl	8033d80 <realloc>
 803295c:	4680      	mov	r8, r0
 803295e:	2800      	cmp	r0, #0
 8032960:	f43f adb3 	beq.w	80324ca <__ssvfscanf_r+0x376>
 8032964:	1985      	adds	r5, r0, r6
 8032966:	f8cb 0000 	str.w	r0, [fp]
 803296a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803296e:	4656      	mov	r6, sl
 8032970:	e7bd      	b.n	80328ee <__ssvfscanf_r+0x79a>
 8032972:	2600      	movs	r6, #0
 8032974:	e7bb      	b.n	80328ee <__ssvfscanf_r+0x79a>
 8032976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032978:	2b00      	cmp	r3, #0
 803297a:	f47f af3c 	bne.w	80327f6 <__ssvfscanf_r+0x6a2>
 803297e:	e78b      	b.n	8032898 <__ssvfscanf_r+0x744>
 8032980:	f1ba 0f00 	cmp.w	sl, #0
 8032984:	d01e      	beq.n	80329c4 <__ssvfscanf_r+0x870>
 8032986:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803298a:	6823      	ldr	r3, [r4, #0]
 803298c:	781a      	ldrb	r2, [r3, #0]
 803298e:	5cb2      	ldrb	r2, [r6, r2]
 8032990:	b91a      	cbnz	r2, 803299a <__ssvfscanf_r+0x846>
 8032992:	f1b8 0f00 	cmp.w	r8, #0
 8032996:	d112      	bne.n	80329be <__ssvfscanf_r+0x86a>
 8032998:	e4d2      	b.n	8032340 <__ssvfscanf_r+0x1ec>
 803299a:	3301      	adds	r3, #1
 803299c:	6862      	ldr	r2, [r4, #4]
 803299e:	6023      	str	r3, [r4, #0]
 80329a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80329a2:	f108 0801 	add.w	r8, r8, #1
 80329a6:	3a01      	subs	r2, #1
 80329a8:	4543      	cmp	r3, r8
 80329aa:	6062      	str	r2, [r4, #4]
 80329ac:	d007      	beq.n	80329be <__ssvfscanf_r+0x86a>
 80329ae:	2a00      	cmp	r2, #0
 80329b0:	dceb      	bgt.n	803298a <__ssvfscanf_r+0x836>
 80329b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329b4:	4621      	mov	r1, r4
 80329b6:	f7fd fa18 	bl	802fdea <__ssrefill_r>
 80329ba:	2800      	cmp	r0, #0
 80329bc:	d0e5      	beq.n	803298a <__ssvfscanf_r+0x836>
 80329be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80329c0:	4443      	add	r3, r8
 80329c2:	e674      	b.n	80326ae <__ssvfscanf_r+0x55a>
 80329c4:	46a9      	mov	r9, r5
 80329c6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80329ca:	f859 8b04 	ldr.w	r8, [r9], #4
 80329ce:	d07d      	beq.n	8032acc <__ssvfscanf_r+0x978>
 80329d0:	f1b8 0f00 	cmp.w	r8, #0
 80329d4:	f43f acb4 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 80329d8:	2020      	movs	r0, #32
 80329da:	f7fc fa47 	bl	802ee6c <malloc>
 80329de:	4606      	mov	r6, r0
 80329e0:	2800      	cmp	r0, #0
 80329e2:	f43f ac7e 	beq.w	80322e2 <__ssvfscanf_r+0x18e>
 80329e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329e8:	f8c8 0000 	str.w	r0, [r8]
 80329ec:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80329f0:	889d      	ldrh	r5, [r3, #4]
 80329f2:	45aa      	cmp	sl, r5
 80329f4:	d311      	bcc.n	8032a1a <__ssvfscanf_r+0x8c6>
 80329f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80329fa:	429d      	cmp	r5, r3
 80329fc:	f200 8512 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 8032a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a02:	3508      	adds	r5, #8
 8032a04:	b2ad      	uxth	r5, r5
 8032a06:	6818      	ldr	r0, [r3, #0]
 8032a08:	00a9      	lsls	r1, r5, #2
 8032a0a:	f001 f9b9 	bl	8033d80 <realloc>
 8032a0e:	2800      	cmp	r0, #0
 8032a10:	f000 8508 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 8032a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a16:	6018      	str	r0, [r3, #0]
 8032a18:	809d      	strh	r5, [r3, #4]
 8032a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032a1e:	681b      	ldr	r3, [r3, #0]
 8032a20:	f10a 0201 	add.w	r2, sl, #1
 8032a24:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8032a28:	80ca      	strh	r2, [r1, #6]
 8032a2a:	46c2      	mov	sl, r8
 8032a2c:	46b0      	mov	r8, r6
 8032a2e:	2620      	movs	r6, #32
 8032a30:	4645      	mov	r5, r8
 8032a32:	6823      	ldr	r3, [r4, #0]
 8032a34:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8032a38:	781a      	ldrb	r2, [r3, #0]
 8032a3a:	5c8a      	ldrb	r2, [r1, r2]
 8032a3c:	b35a      	cbz	r2, 8032a96 <__ssvfscanf_r+0x942>
 8032a3e:	6862      	ldr	r2, [r4, #4]
 8032a40:	3a01      	subs	r2, #1
 8032a42:	6062      	str	r2, [r4, #4]
 8032a44:	1c5a      	adds	r2, r3, #1
 8032a46:	6022      	str	r2, [r4, #0]
 8032a48:	781b      	ldrb	r3, [r3, #0]
 8032a4a:	f808 3b01 	strb.w	r3, [r8], #1
 8032a4e:	f1ba 0f00 	cmp.w	sl, #0
 8032a52:	d010      	beq.n	8032a76 <__ssvfscanf_r+0x922>
 8032a54:	eba8 0b05 	sub.w	fp, r8, r5
 8032a58:	45b3      	cmp	fp, r6
 8032a5a:	d30c      	bcc.n	8032a76 <__ssvfscanf_r+0x922>
 8032a5c:	0076      	lsls	r6, r6, #1
 8032a5e:	4628      	mov	r0, r5
 8032a60:	4631      	mov	r1, r6
 8032a62:	f001 f98d 	bl	8033d80 <realloc>
 8032a66:	4605      	mov	r5, r0
 8032a68:	2800      	cmp	r0, #0
 8032a6a:	f43f ac3a 	beq.w	80322e2 <__ssvfscanf_r+0x18e>
 8032a6e:	eb00 080b 	add.w	r8, r0, fp
 8032a72:	f8ca 0000 	str.w	r0, [sl]
 8032a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032a78:	3b01      	subs	r3, #1
 8032a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032a7c:	d00b      	beq.n	8032a96 <__ssvfscanf_r+0x942>
 8032a7e:	6863      	ldr	r3, [r4, #4]
 8032a80:	2b00      	cmp	r3, #0
 8032a82:	dcd6      	bgt.n	8032a32 <__ssvfscanf_r+0x8de>
 8032a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032a86:	4621      	mov	r1, r4
 8032a88:	f7fd f9af 	bl	802fdea <__ssrefill_r>
 8032a8c:	2800      	cmp	r0, #0
 8032a8e:	d0d0      	beq.n	8032a32 <__ssvfscanf_r+0x8de>
 8032a90:	45a8      	cmp	r8, r5
 8032a92:	f43f ac21 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032a96:	ebb8 0505 	subs.w	r5, r8, r5
 8032a9a:	f43f ac51 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 8032a9e:	2300      	movs	r3, #0
 8032aa0:	f888 3000 	strb.w	r3, [r8]
 8032aa4:	f1ba 0f00 	cmp.w	sl, #0
 8032aa8:	d009      	beq.n	8032abe <__ssvfscanf_r+0x96a>
 8032aaa:	1c69      	adds	r1, r5, #1
 8032aac:	428e      	cmp	r6, r1
 8032aae:	d906      	bls.n	8032abe <__ssvfscanf_r+0x96a>
 8032ab0:	f8da 0000 	ldr.w	r0, [sl]
 8032ab4:	f001 f964 	bl	8033d80 <realloc>
 8032ab8:	b108      	cbz	r0, 8032abe <__ssvfscanf_r+0x96a>
 8032aba:	f8ca 0000 	str.w	r0, [sl]
 8032abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032ac0:	3301      	adds	r3, #1
 8032ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8032ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032ac6:	442b      	add	r3, r5
 8032ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8032aca:	e64a      	b.n	8032762 <__ssvfscanf_r+0x60e>
 8032acc:	46b2      	mov	sl, r6
 8032ace:	e7af      	b.n	8032a30 <__ssvfscanf_r+0x8dc>
 8032ad0:	2000016c 	.word	0x2000016c
 8032ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032ad6:	2b00      	cmp	r3, #0
 8032ad8:	bf08      	it	eq
 8032ada:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032ade:	f016 0901 	ands.w	r9, r6, #1
 8032ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032ae4:	f006 0810 	and.w	r8, r6, #16
 8032ae8:	f000 80ef 	beq.w	8032cca <__ssvfscanf_r+0xb76>
 8032aec:	f1b8 0f00 	cmp.w	r8, #0
 8032af0:	f040 8098 	bne.w	8032c24 <__ssvfscanf_r+0xad0>
 8032af4:	462b      	mov	r3, r5
 8032af6:	0631      	lsls	r1, r6, #24
 8032af8:	f853 5b04 	ldr.w	r5, [r3], #4
 8032afc:	613b      	str	r3, [r7, #16]
 8032afe:	f140 8099 	bpl.w	8032c34 <__ssvfscanf_r+0xae0>
 8032b02:	2d00      	cmp	r5, #0
 8032b04:	f43f ace4 	beq.w	80324d0 <__ssvfscanf_r+0x37c>
 8032b08:	2080      	movs	r0, #128	@ 0x80
 8032b0a:	f7fc f9af 	bl	802ee6c <malloc>
 8032b0e:	4606      	mov	r6, r0
 8032b10:	2800      	cmp	r0, #0
 8032b12:	f43f acda 	beq.w	80324ca <__ssvfscanf_r+0x376>
 8032b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b18:	6028      	str	r0, [r5, #0]
 8032b1a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8032b1e:	889b      	ldrh	r3, [r3, #4]
 8032b20:	4599      	cmp	r9, r3
 8032b22:	d314      	bcc.n	8032b4e <__ssvfscanf_r+0x9fa>
 8032b24:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032b28:	4293      	cmp	r3, r2
 8032b2a:	f200 847b 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 8032b2e:	3308      	adds	r3, #8
 8032b30:	fa1f fa83 	uxth.w	sl, r3
 8032b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b36:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032b3a:	6818      	ldr	r0, [r3, #0]
 8032b3c:	f001 f920 	bl	8033d80 <realloc>
 8032b40:	2800      	cmp	r0, #0
 8032b42:	f000 846f 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 8032b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b48:	6018      	str	r0, [r3, #0]
 8032b4a:	f8a3 a004 	strh.w	sl, [r3, #4]
 8032b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032b52:	681b      	ldr	r3, [r3, #0]
 8032b54:	f109 0201 	add.w	r2, r9, #1
 8032b58:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032b5c:	46aa      	mov	sl, r5
 8032b5e:	80ca      	strh	r2, [r1, #6]
 8032b60:	4635      	mov	r5, r6
 8032b62:	f04f 0920 	mov.w	r9, #32
 8032b66:	2300      	movs	r3, #0
 8032b68:	6822      	ldr	r2, [r4, #0]
 8032b6a:	49a7      	ldr	r1, [pc, #668]	@ (8032e08 <__ssvfscanf_r+0xcb4>)
 8032b6c:	7812      	ldrb	r2, [r2, #0]
 8032b6e:	5c8a      	ldrb	r2, [r1, r2]
 8032b70:	0710      	lsls	r0, r2, #28
 8032b72:	d43c      	bmi.n	8032bee <__ssvfscanf_r+0xa9a>
 8032b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032b76:	2a00      	cmp	r2, #0
 8032b78:	d039      	beq.n	8032bee <__ssvfscanf_r+0xa9a>
 8032b7a:	60fb      	str	r3, [r7, #12]
 8032b7c:	f7fb f8b8 	bl	802dcf0 <__locale_mb_cur_max>
 8032b80:	68fb      	ldr	r3, [r7, #12]
 8032b82:	4298      	cmp	r0, r3
 8032b84:	f43f aba8 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032b88:	6822      	ldr	r2, [r4, #0]
 8032b8a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032b8e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8032b92:	54c8      	strb	r0, [r1, r3]
 8032b94:	f103 0b01 	add.w	fp, r3, #1
 8032b98:	6863      	ldr	r3, [r4, #4]
 8032b9a:	3b01      	subs	r3, #1
 8032b9c:	e9c4 2300 	strd	r2, r3, [r4]
 8032ba0:	6a3b      	ldr	r3, [r7, #32]
 8032ba2:	2b03      	cmp	r3, #3
 8032ba4:	d102      	bne.n	8032bac <__ssvfscanf_r+0xa58>
 8032ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032ba8:	2b04      	cmp	r3, #4
 8032baa:	d005      	beq.n	8032bb8 <__ssvfscanf_r+0xa64>
 8032bac:	2208      	movs	r2, #8
 8032bae:	2100      	movs	r1, #0
 8032bb0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032bb4:	f7f9 ff14 	bl	802c9e0 <memset>
 8032bb8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032bbc:	9300      	str	r3, [sp, #0]
 8032bbe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032bc4:	465b      	mov	r3, fp
 8032bc6:	4629      	mov	r1, r5
 8032bc8:	f002 fc94 	bl	80354f4 <_mbrtowc_r>
 8032bcc:	1c42      	adds	r2, r0, #1
 8032bce:	6238      	str	r0, [r7, #32]
 8032bd0:	f43f ab82 	beq.w	80322d8 <__ssvfscanf_r+0x184>
 8032bd4:	bb90      	cbnz	r0, 8032c3c <__ssvfscanf_r+0xae8>
 8032bd6:	6028      	str	r0, [r5, #0]
 8032bd8:	6828      	ldr	r0, [r5, #0]
 8032bda:	f002 fca5 	bl	8035528 <iswspace>
 8032bde:	4603      	mov	r3, r0
 8032be0:	2800      	cmp	r0, #0
 8032be2:	d047      	beq.n	8032c74 <__ssvfscanf_r+0xb20>
 8032be4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032be8:	f1bb 0f00 	cmp.w	fp, #0
 8032bec:	d139      	bne.n	8032c62 <__ssvfscanf_r+0xb0e>
 8032bee:	f1b8 0f00 	cmp.w	r8, #0
 8032bf2:	d114      	bne.n	8032c1e <__ssvfscanf_r+0xaca>
 8032bf4:	f8c5 8000 	str.w	r8, [r5]
 8032bf8:	f1ba 0f00 	cmp.w	sl, #0
 8032bfc:	d00c      	beq.n	8032c18 <__ssvfscanf_r+0xac4>
 8032bfe:	1ba9      	subs	r1, r5, r6
 8032c00:	108b      	asrs	r3, r1, #2
 8032c02:	3301      	adds	r3, #1
 8032c04:	4599      	cmp	r9, r3
 8032c06:	d907      	bls.n	8032c18 <__ssvfscanf_r+0xac4>
 8032c08:	f8da 0000 	ldr.w	r0, [sl]
 8032c0c:	3104      	adds	r1, #4
 8032c0e:	f001 f8b7 	bl	8033d80 <realloc>
 8032c12:	b108      	cbz	r0, 8032c18 <__ssvfscanf_r+0xac4>
 8032c14:	f8ca 0000 	str.w	r0, [sl]
 8032c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032c1a:	3301      	adds	r3, #1
 8032c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8032c1e:	693d      	ldr	r5, [r7, #16]
 8032c20:	f7ff bab3 	b.w	803218a <__ssvfscanf_r+0x36>
 8032c24:	f04f 0900 	mov.w	r9, #0
 8032c28:	613d      	str	r5, [r7, #16]
 8032c2a:	464e      	mov	r6, r9
 8032c2c:	46ca      	mov	sl, r9
 8032c2e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032c32:	e798      	b.n	8032b66 <__ssvfscanf_r+0xa12>
 8032c34:	46c1      	mov	r9, r8
 8032c36:	4646      	mov	r6, r8
 8032c38:	46c2      	mov	sl, r8
 8032c3a:	e794      	b.n	8032b66 <__ssvfscanf_r+0xa12>
 8032c3c:	6a3b      	ldr	r3, [r7, #32]
 8032c3e:	3302      	adds	r3, #2
 8032c40:	d1ca      	bne.n	8032bd8 <__ssvfscanf_r+0xa84>
 8032c42:	465b      	mov	r3, fp
 8032c44:	6862      	ldr	r2, [r4, #4]
 8032c46:	2a00      	cmp	r2, #0
 8032c48:	dc8e      	bgt.n	8032b68 <__ssvfscanf_r+0xa14>
 8032c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c4c:	60fb      	str	r3, [r7, #12]
 8032c4e:	4621      	mov	r1, r4
 8032c50:	f7fd f8cb 	bl	802fdea <__ssrefill_r>
 8032c54:	68fb      	ldr	r3, [r7, #12]
 8032c56:	2800      	cmp	r0, #0
 8032c58:	d086      	beq.n	8032b68 <__ssvfscanf_r+0xa14>
 8032c5a:	2b00      	cmp	r3, #0
 8032c5c:	f47f ab3c 	bne.w	80322d8 <__ssvfscanf_r+0x184>
 8032c60:	e7c5      	b.n	8032bee <__ssvfscanf_r+0xa9a>
 8032c62:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c68:	f813 100b 	ldrb.w	r1, [r3, fp]
 8032c6c:	4622      	mov	r2, r4
 8032c6e:	f7fd f881 	bl	802fd74 <_sungetc_r>
 8032c72:	e7b7      	b.n	8032be4 <__ssvfscanf_r+0xa90>
 8032c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032c76:	445a      	add	r2, fp
 8032c78:	633a      	str	r2, [r7, #48]	@ 0x30
 8032c7a:	6a3a      	ldr	r2, [r7, #32]
 8032c7c:	2a03      	cmp	r2, #3
 8032c7e:	d102      	bne.n	8032c86 <__ssvfscanf_r+0xb32>
 8032c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032c82:	2a04      	cmp	r2, #4
 8032c84:	d002      	beq.n	8032c8c <__ssvfscanf_r+0xb38>
 8032c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032c88:	3a01      	subs	r2, #1
 8032c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8032c8c:	f1b8 0f00 	cmp.w	r8, #0
 8032c90:	d1d8      	bne.n	8032c44 <__ssvfscanf_r+0xaf0>
 8032c92:	3504      	adds	r5, #4
 8032c94:	f1ba 0f00 	cmp.w	sl, #0
 8032c98:	d015      	beq.n	8032cc6 <__ssvfscanf_r+0xb72>
 8032c9a:	eba5 0b06 	sub.w	fp, r5, r6
 8032c9e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8032ca2:	d80e      	bhi.n	8032cc2 <__ssvfscanf_r+0xb6e>
 8032ca4:	4630      	mov	r0, r6
 8032ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032caa:	f001 f869 	bl	8033d80 <realloc>
 8032cae:	4606      	mov	r6, r0
 8032cb0:	2800      	cmp	r0, #0
 8032cb2:	f43f ac0a 	beq.w	80324ca <__ssvfscanf_r+0x376>
 8032cb6:	eb00 050b 	add.w	r5, r0, fp
 8032cba:	f8ca 0000 	str.w	r0, [sl]
 8032cbe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032cc2:	4643      	mov	r3, r8
 8032cc4:	e7be      	b.n	8032c44 <__ssvfscanf_r+0xaf0>
 8032cc6:	4653      	mov	r3, sl
 8032cc8:	e7bc      	b.n	8032c44 <__ssvfscanf_r+0xaf0>
 8032cca:	f1b8 0f00 	cmp.w	r8, #0
 8032cce:	d01a      	beq.n	8032d06 <__ssvfscanf_r+0xbb2>
 8032cd0:	4e4d      	ldr	r6, [pc, #308]	@ (8032e08 <__ssvfscanf_r+0xcb4>)
 8032cd2:	6823      	ldr	r3, [r4, #0]
 8032cd4:	781a      	ldrb	r2, [r3, #0]
 8032cd6:	5cb2      	ldrb	r2, [r6, r2]
 8032cd8:	0711      	lsls	r1, r2, #28
 8032cda:	d411      	bmi.n	8032d00 <__ssvfscanf_r+0xbac>
 8032cdc:	3301      	adds	r3, #1
 8032cde:	6862      	ldr	r2, [r4, #4]
 8032ce0:	6023      	str	r3, [r4, #0]
 8032ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032ce4:	f109 0901 	add.w	r9, r9, #1
 8032ce8:	3a01      	subs	r2, #1
 8032cea:	454b      	cmp	r3, r9
 8032cec:	6062      	str	r2, [r4, #4]
 8032cee:	d007      	beq.n	8032d00 <__ssvfscanf_r+0xbac>
 8032cf0:	2a00      	cmp	r2, #0
 8032cf2:	dcee      	bgt.n	8032cd2 <__ssvfscanf_r+0xb7e>
 8032cf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032cf6:	4621      	mov	r1, r4
 8032cf8:	f7fd f877 	bl	802fdea <__ssrefill_r>
 8032cfc:	2800      	cmp	r0, #0
 8032cfe:	d0e8      	beq.n	8032cd2 <__ssvfscanf_r+0xb7e>
 8032d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032d02:	444b      	add	r3, r9
 8032d04:	e4d3      	b.n	80326ae <__ssvfscanf_r+0x55a>
 8032d06:	46a8      	mov	r8, r5
 8032d08:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032d0c:	f858 5b04 	ldr.w	r5, [r8], #4
 8032d10:	d077      	beq.n	8032e02 <__ssvfscanf_r+0xcae>
 8032d12:	2d00      	cmp	r5, #0
 8032d14:	f43f ab14 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 8032d18:	2020      	movs	r0, #32
 8032d1a:	f7fc f8a7 	bl	802ee6c <malloc>
 8032d1e:	4681      	mov	r9, r0
 8032d20:	2800      	cmp	r0, #0
 8032d22:	f43f aade 	beq.w	80322e2 <__ssvfscanf_r+0x18e>
 8032d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d28:	6028      	str	r0, [r5, #0]
 8032d2a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032d2e:	889e      	ldrh	r6, [r3, #4]
 8032d30:	45b2      	cmp	sl, r6
 8032d32:	d311      	bcc.n	8032d58 <__ssvfscanf_r+0xc04>
 8032d34:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032d38:	429e      	cmp	r6, r3
 8032d3a:	f200 8373 	bhi.w	8033424 <__ssvfscanf_r+0x12d0>
 8032d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d40:	3608      	adds	r6, #8
 8032d42:	b2b6      	uxth	r6, r6
 8032d44:	6818      	ldr	r0, [r3, #0]
 8032d46:	00b1      	lsls	r1, r6, #2
 8032d48:	f001 f81a 	bl	8033d80 <realloc>
 8032d4c:	2800      	cmp	r0, #0
 8032d4e:	f000 8369 	beq.w	8033424 <__ssvfscanf_r+0x12d0>
 8032d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d54:	6018      	str	r0, [r3, #0]
 8032d56:	809e      	strh	r6, [r3, #4]
 8032d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032d5c:	681b      	ldr	r3, [r3, #0]
 8032d5e:	f10a 0201 	add.w	r2, sl, #1
 8032d62:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032d66:	80ca      	strh	r2, [r1, #6]
 8032d68:	46aa      	mov	sl, r5
 8032d6a:	2620      	movs	r6, #32
 8032d6c:	464d      	mov	r5, r9
 8032d6e:	46a9      	mov	r9, r5
 8032d70:	6823      	ldr	r3, [r4, #0]
 8032d72:	4925      	ldr	r1, [pc, #148]	@ (8032e08 <__ssvfscanf_r+0xcb4>)
 8032d74:	781a      	ldrb	r2, [r3, #0]
 8032d76:	5c8a      	ldrb	r2, [r1, r2]
 8032d78:	0712      	lsls	r2, r2, #28
 8032d7a:	d428      	bmi.n	8032dce <__ssvfscanf_r+0xc7a>
 8032d7c:	6862      	ldr	r2, [r4, #4]
 8032d7e:	3a01      	subs	r2, #1
 8032d80:	6062      	str	r2, [r4, #4]
 8032d82:	1c5a      	adds	r2, r3, #1
 8032d84:	6022      	str	r2, [r4, #0]
 8032d86:	781b      	ldrb	r3, [r3, #0]
 8032d88:	f805 3b01 	strb.w	r3, [r5], #1
 8032d8c:	f1ba 0f00 	cmp.w	sl, #0
 8032d90:	d010      	beq.n	8032db4 <__ssvfscanf_r+0xc60>
 8032d92:	eba5 0b09 	sub.w	fp, r5, r9
 8032d96:	45b3      	cmp	fp, r6
 8032d98:	d30c      	bcc.n	8032db4 <__ssvfscanf_r+0xc60>
 8032d9a:	0076      	lsls	r6, r6, #1
 8032d9c:	4648      	mov	r0, r9
 8032d9e:	4631      	mov	r1, r6
 8032da0:	f000 ffee 	bl	8033d80 <realloc>
 8032da4:	4681      	mov	r9, r0
 8032da6:	2800      	cmp	r0, #0
 8032da8:	f43f aa9b 	beq.w	80322e2 <__ssvfscanf_r+0x18e>
 8032dac:	eb00 050b 	add.w	r5, r0, fp
 8032db0:	f8ca 0000 	str.w	r0, [sl]
 8032db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032db6:	3b01      	subs	r3, #1
 8032db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032dba:	d008      	beq.n	8032dce <__ssvfscanf_r+0xc7a>
 8032dbc:	6863      	ldr	r3, [r4, #4]
 8032dbe:	2b00      	cmp	r3, #0
 8032dc0:	dcd6      	bgt.n	8032d70 <__ssvfscanf_r+0xc1c>
 8032dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032dc4:	4621      	mov	r1, r4
 8032dc6:	f7fd f810 	bl	802fdea <__ssrefill_r>
 8032dca:	2800      	cmp	r0, #0
 8032dcc:	d0d0      	beq.n	8032d70 <__ssvfscanf_r+0xc1c>
 8032dce:	2300      	movs	r3, #0
 8032dd0:	702b      	strb	r3, [r5, #0]
 8032dd2:	eba5 0509 	sub.w	r5, r5, r9
 8032dd6:	f1ba 0f00 	cmp.w	sl, #0
 8032dda:	d009      	beq.n	8032df0 <__ssvfscanf_r+0xc9c>
 8032ddc:	1c69      	adds	r1, r5, #1
 8032dde:	428e      	cmp	r6, r1
 8032de0:	d906      	bls.n	8032df0 <__ssvfscanf_r+0xc9c>
 8032de2:	f8da 0000 	ldr.w	r0, [sl]
 8032de6:	f000 ffcb 	bl	8033d80 <realloc>
 8032dea:	b108      	cbz	r0, 8032df0 <__ssvfscanf_r+0xc9c>
 8032dec:	f8ca 0000 	str.w	r0, [sl]
 8032df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032df2:	442b      	add	r3, r5
 8032df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8032df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032df8:	3301      	adds	r3, #1
 8032dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8032dfc:	4645      	mov	r5, r8
 8032dfe:	f7ff b9c4 	b.w	803218a <__ssvfscanf_r+0x36>
 8032e02:	46b2      	mov	sl, r6
 8032e04:	e7b3      	b.n	8032d6e <__ssvfscanf_r+0xc1a>
 8032e06:	bf00      	nop
 8032e08:	0803c039 	.word	0x0803c039
 8032e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032e0e:	3b01      	subs	r3, #1
 8032e10:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032e14:	bf81      	itttt	hi
 8032e16:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032e18:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 8032e1c:	eb03 090c 	addhi.w	r9, r3, ip
 8032e20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8032e24:	bf8c      	ite	hi
 8032e26:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8032e28:	f04f 0900 	movls.w	r9, #0
 8032e2c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8032e30:	f04f 0a00 	mov.w	sl, #0
 8032e34:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8032e38:	6822      	ldr	r2, [r4, #0]
 8032e3a:	7813      	ldrb	r3, [r2, #0]
 8032e3c:	2b39      	cmp	r3, #57	@ 0x39
 8032e3e:	d80f      	bhi.n	8032e60 <__ssvfscanf_r+0xd0c>
 8032e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8032e42:	d91a      	bls.n	8032e7a <__ssvfscanf_r+0xd26>
 8032e44:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8032e48:	290e      	cmp	r1, #14
 8032e4a:	d816      	bhi.n	8032e7a <__ssvfscanf_r+0xd26>
 8032e4c:	e8df f001 	tbb	[pc, r1]
 8032e50:	15781578 	.word	0x15781578
 8032e54:	68683f15 	.word	0x68683f15
 8032e58:	68686868 	.word	0x68686868
 8032e5c:	7068      	.short	0x7068
 8032e5e:	70          	.byte	0x70
 8032e5f:	00          	.byte	0x00
 8032e60:	2b66      	cmp	r3, #102	@ 0x66
 8032e62:	d832      	bhi.n	8032eca <__ssvfscanf_r+0xd76>
 8032e64:	2b60      	cmp	r3, #96	@ 0x60
 8032e66:	d803      	bhi.n	8032e70 <__ssvfscanf_r+0xd1c>
 8032e68:	2b46      	cmp	r3, #70	@ 0x46
 8032e6a:	d804      	bhi.n	8032e76 <__ssvfscanf_r+0xd22>
 8032e6c:	2b40      	cmp	r3, #64	@ 0x40
 8032e6e:	d904      	bls.n	8032e7a <__ssvfscanf_r+0xd26>
 8032e70:	69f9      	ldr	r1, [r7, #28]
 8032e72:	290a      	cmp	r1, #10
 8032e74:	e062      	b.n	8032f3c <__ssvfscanf_r+0xde8>
 8032e76:	2b58      	cmp	r3, #88	@ 0x58
 8032e78:	d068      	beq.n	8032f4c <__ssvfscanf_r+0xdf8>
 8032e7a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8032e7e:	d011      	beq.n	8032ea4 <__ssvfscanf_r+0xd50>
 8032e80:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e84:	4598      	cmp	r8, r3
 8032e86:	d908      	bls.n	8032e9a <__ssvfscanf_r+0xd46>
 8032e88:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8032e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e8e:	4622      	mov	r2, r4
 8032e90:	f7fc ff70 	bl	802fd74 <_sungetc_r>
 8032e94:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8032e98:	46c8      	mov	r8, r9
 8032e9a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e9e:	4598      	cmp	r8, r3
 8032ea0:	f43f aa4e 	beq.w	8032340 <__ssvfscanf_r+0x1ec>
 8032ea4:	f01b 0210 	ands.w	r2, fp, #16
 8032ea8:	d16c      	bne.n	8032f84 <__ssvfscanf_r+0xe30>
 8032eaa:	69fb      	ldr	r3, [r7, #28]
 8032eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032eae:	69be      	ldr	r6, [r7, #24]
 8032eb0:	f888 2000 	strb.w	r2, [r8]
 8032eb4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032eb8:	47b0      	blx	r6
 8032eba:	f01b 0f20 	tst.w	fp, #32
 8032ebe:	f105 0904 	add.w	r9, r5, #4
 8032ec2:	d056      	beq.n	8032f72 <__ssvfscanf_r+0xe1e>
 8032ec4:	682b      	ldr	r3, [r5, #0]
 8032ec6:	6018      	str	r0, [r3, #0]
 8032ec8:	e058      	b.n	8032f7c <__ssvfscanf_r+0xe28>
 8032eca:	2b78      	cmp	r3, #120	@ 0x78
 8032ecc:	e7d4      	b.n	8032e78 <__ssvfscanf_r+0xd24>
 8032ece:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8032ed2:	d00a      	beq.n	8032eea <__ssvfscanf_r+0xd96>
 8032ed4:	69f9      	ldr	r1, [r7, #28]
 8032ed6:	b919      	cbnz	r1, 8032ee0 <__ssvfscanf_r+0xd8c>
 8032ed8:	2108      	movs	r1, #8
 8032eda:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8032ede:	61f9      	str	r1, [r7, #28]
 8032ee0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8032ee4:	d004      	beq.n	8032ef0 <__ssvfscanf_r+0xd9c>
 8032ee6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8032eea:	f808 3b01 	strb.w	r3, [r8], #1
 8032eee:	e00b      	b.n	8032f08 <__ssvfscanf_r+0xdb4>
 8032ef0:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032ef4:	f1b9 0f00 	cmp.w	r9, #0
 8032ef8:	d004      	beq.n	8032f04 <__ssvfscanf_r+0xdb0>
 8032efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032efc:	3301      	adds	r3, #1
 8032efe:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8032f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032f04:	f10a 0a01 	add.w	sl, sl, #1
 8032f08:	6863      	ldr	r3, [r4, #4]
 8032f0a:	3b01      	subs	r3, #1
 8032f0c:	2b00      	cmp	r3, #0
 8032f0e:	6063      	str	r3, [r4, #4]
 8032f10:	dd28      	ble.n	8032f64 <__ssvfscanf_r+0xe10>
 8032f12:	3201      	adds	r2, #1
 8032f14:	6022      	str	r2, [r4, #0]
 8032f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032f18:	3b01      	subs	r3, #1
 8032f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032f1c:	d18c      	bne.n	8032e38 <__ssvfscanf_r+0xce4>
 8032f1e:	e7ac      	b.n	8032e7a <__ssvfscanf_r+0xd26>
 8032f20:	69f8      	ldr	r0, [r7, #28]
 8032f22:	499b      	ldr	r1, [pc, #620]	@ (8033190 <__ssvfscanf_r+0x103c>)
 8032f24:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032f28:	61f9      	str	r1, [r7, #28]
 8032f2a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8032f2e:	e7dc      	b.n	8032eea <__ssvfscanf_r+0xd96>
 8032f30:	69f8      	ldr	r0, [r7, #28]
 8032f32:	4997      	ldr	r1, [pc, #604]	@ (8033190 <__ssvfscanf_r+0x103c>)
 8032f34:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032f38:	61f9      	str	r1, [r7, #28]
 8032f3a:	2908      	cmp	r1, #8
 8032f3c:	dcf5      	bgt.n	8032f2a <__ssvfscanf_r+0xdd6>
 8032f3e:	e79c      	b.n	8032e7a <__ssvfscanf_r+0xd26>
 8032f40:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8032f44:	d099      	beq.n	8032e7a <__ssvfscanf_r+0xd26>
 8032f46:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8032f4a:	e7ce      	b.n	8032eea <__ssvfscanf_r+0xd96>
 8032f4c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8032f50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8032f54:	d191      	bne.n	8032e7a <__ssvfscanf_r+0xd26>
 8032f56:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8032f5a:	2110      	movs	r1, #16
 8032f5c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032f60:	61f9      	str	r1, [r7, #28]
 8032f62:	e7c2      	b.n	8032eea <__ssvfscanf_r+0xd96>
 8032f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f66:	4621      	mov	r1, r4
 8032f68:	f7fc ff3f 	bl	802fdea <__ssrefill_r>
 8032f6c:	2800      	cmp	r0, #0
 8032f6e:	d0d2      	beq.n	8032f16 <__ssvfscanf_r+0xdc2>
 8032f70:	e783      	b.n	8032e7a <__ssvfscanf_r+0xd26>
 8032f72:	f01b 0f08 	tst.w	fp, #8
 8032f76:	d00b      	beq.n	8032f90 <__ssvfscanf_r+0xe3c>
 8032f78:	682b      	ldr	r3, [r5, #0]
 8032f7a:	7018      	strb	r0, [r3, #0]
 8032f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032f7e:	3301      	adds	r3, #1
 8032f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8032f82:	464d      	mov	r5, r9
 8032f84:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032f88:	eba8 0803 	sub.w	r8, r8, r3
 8032f8c:	44d0      	add	r8, sl
 8032f8e:	e516      	b.n	80329be <__ssvfscanf_r+0x86a>
 8032f90:	f01b 0f04 	tst.w	fp, #4
 8032f94:	d002      	beq.n	8032f9c <__ssvfscanf_r+0xe48>
 8032f96:	682b      	ldr	r3, [r5, #0]
 8032f98:	8018      	strh	r0, [r3, #0]
 8032f9a:	e7ef      	b.n	8032f7c <__ssvfscanf_r+0xe28>
 8032f9c:	f01b 0201 	ands.w	r2, fp, #1
 8032fa0:	d190      	bne.n	8032ec4 <__ssvfscanf_r+0xd70>
 8032fa2:	f01b 0f02 	tst.w	fp, #2
 8032fa6:	d08d      	beq.n	8032ec4 <__ssvfscanf_r+0xd70>
 8032fa8:	4b7a      	ldr	r3, [pc, #488]	@ (8033194 <__ssvfscanf_r+0x1040>)
 8032faa:	69b9      	ldr	r1, [r7, #24]
 8032fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032fae:	4299      	cmp	r1, r3
 8032fb0:	69fb      	ldr	r3, [r7, #28]
 8032fb2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032fb6:	d105      	bne.n	8032fc4 <__ssvfscanf_r+0xe70>
 8032fb8:	f002 fa9a 	bl	80354f0 <_strtoull_r>
 8032fbc:	682b      	ldr	r3, [r5, #0]
 8032fbe:	e9c3 0100 	strd	r0, r1, [r3]
 8032fc2:	e7db      	b.n	8032f7c <__ssvfscanf_r+0xe28>
 8032fc4:	f002 f9e8 	bl	8035398 <_strtoll_r>
 8032fc8:	e7f8      	b.n	8032fbc <__ssvfscanf_r+0xe68>
 8032fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032fcc:	f7fa fe96 	bl	802dcfc <_localeconv_r>
 8032fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032fd2:	6802      	ldr	r2, [r0, #0]
 8032fd4:	3b01      	subs	r3, #1
 8032fd6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032fda:	f04f 0800 	mov.w	r8, #0
 8032fde:	bf88      	it	hi
 8032fe0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032fe2:	f8c7 8010 	str.w	r8, [r7, #16]
 8032fe6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8032fea:	bf81      	itttt	hi
 8032fec:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032ff0:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032ff4:	181b      	addhi	r3, r3, r0
 8032ff6:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032ff8:	bf98      	it	ls
 8032ffa:	2300      	movls	r3, #0
 8032ffc:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8033000:	46c3      	mov	fp, r8
 8033002:	46c2      	mov	sl, r8
 8033004:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8033008:	6821      	ldr	r1, [r4, #0]
 803300a:	6079      	str	r1, [r7, #4]
 803300c:	7808      	ldrb	r0, [r1, #0]
 803300e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8033012:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8033016:	f200 8123 	bhi.w	8033260 <__ssvfscanf_r+0x110c>
 803301a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803301e:	0089      	.short	0x0089
 8033020:	00890121 	.word	0x00890121
 8033024:	01210121 	.word	0x01210121
 8033028:	006f004f 	.word	0x006f004f
 803302c:	006f006f 	.word	0x006f006f
 8033030:	006f006f 	.word	0x006f006f
 8033034:	006f006f 	.word	0x006f006f
 8033038:	006f006f 	.word	0x006f006f
 803303c:	01210121 	.word	0x01210121
 8033040:	01210121 	.word	0x01210121
 8033044:	01210121 	.word	0x01210121
 8033048:	00af0121 	.word	0x00af0121
 803304c:	006d006d 	.word	0x006d006d
 8033050:	011e006d 	.word	0x011e006d
 8033054:	012100ed 	.word	0x012100ed
 8033058:	00d60121 	.word	0x00d60121
 803305c:	01210121 	.word	0x01210121
 8033060:	01210121 	.word	0x01210121
 8033064:	01210090 	.word	0x01210090
 8033068:	01210104 	.word	0x01210104
 803306c:	01210121 	.word	0x01210121
 8033070:	012100f8 	.word	0x012100f8
 8033074:	01210121 	.word	0x01210121
 8033078:	00fe0073 	.word	0x00fe0073
 803307c:	01210121 	.word	0x01210121
 8033080:	01210121 	.word	0x01210121
 8033084:	01210121 	.word	0x01210121
 8033088:	00af0121 	.word	0x00af0121
 803308c:	006d006d 	.word	0x006d006d
 8033090:	011e006d 	.word	0x011e006d
 8033094:	012100ed 	.word	0x012100ed
 8033098:	00d60121 	.word	0x00d60121
 803309c:	01210121 	.word	0x01210121
 80330a0:	01210121 	.word	0x01210121
 80330a4:	01210090 	.word	0x01210090
 80330a8:	01210104 	.word	0x01210104
 80330ac:	01210121 	.word	0x01210121
 80330b0:	012100f8 	.word	0x012100f8
 80330b4:	01210121 	.word	0x01210121
 80330b8:	00fe0073 	.word	0x00fe0073
 80330bc:	05f1      	lsls	r1, r6, #23
 80330be:	d51d      	bpl.n	80330fc <__ssvfscanf_r+0xfa8>
 80330c0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80330c4:	f10a 0a01 	add.w	sl, sl, #1
 80330c8:	b11b      	cbz	r3, 80330d2 <__ssvfscanf_r+0xf7e>
 80330ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80330cc:	3001      	adds	r0, #1
 80330ce:	3b01      	subs	r3, #1
 80330d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80330d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80330d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80330d6:	3001      	adds	r0, #1
 80330d8:	6338      	str	r0, [r7, #48]	@ 0x30
 80330da:	6860      	ldr	r0, [r4, #4]
 80330dc:	3801      	subs	r0, #1
 80330de:	3901      	subs	r1, #1
 80330e0:	2800      	cmp	r0, #0
 80330e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80330e4:	6060      	str	r0, [r4, #4]
 80330e6:	f340 80cc 	ble.w	8033282 <__ssvfscanf_r+0x112e>
 80330ea:	6879      	ldr	r1, [r7, #4]
 80330ec:	3101      	adds	r1, #1
 80330ee:	6021      	str	r1, [r4, #0]
 80330f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80330f2:	2900      	cmp	r1, #0
 80330f4:	d188      	bne.n	8033008 <__ssvfscanf_r+0xeb4>
 80330f6:	e052      	b.n	803319e <__ssvfscanf_r+0x104a>
 80330f8:	0531      	lsls	r1, r6, #20
 80330fa:	d550      	bpl.n	803319e <__ssvfscanf_r+0x104a>
 80330fc:	eb1b 0c08 	adds.w	ip, fp, r8
 8033100:	d041      	beq.n	8033186 <__ssvfscanf_r+0x1032>
 8033102:	e04c      	b.n	803319e <__ssvfscanf_r+0x104a>
 8033104:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8033108:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803310c:	d147      	bne.n	803319e <__ssvfscanf_r+0x104a>
 803310e:	f1ba 0f01 	cmp.w	sl, #1
 8033112:	d144      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033116:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803311a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803311e:	3901      	subs	r1, #1
 8033120:	f809 cb01 	strb.w	ip, [r9], #1
 8033124:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8033128:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803312a:	f04f 0a00 	mov.w	sl, #0
 803312e:	e003      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 8033130:	0631      	lsls	r1, r6, #24
 8033132:	d534      	bpl.n	803319e <__ssvfscanf_r+0x104a>
 8033134:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8033138:	f809 0b01 	strb.w	r0, [r9], #1
 803313c:	e7c9      	b.n	80330d2 <__ssvfscanf_r+0xf7e>
 803313e:	f1bb 0f00 	cmp.w	fp, #0
 8033142:	d10c      	bne.n	803315e <__ssvfscanf_r+0x100a>
 8033144:	f1ba 0f00 	cmp.w	sl, #0
 8033148:	d10d      	bne.n	8033166 <__ssvfscanf_r+0x1012>
 803314a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803314e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8033152:	d108      	bne.n	8033166 <__ssvfscanf_r+0x1012>
 8033154:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033158:	f04f 0b01 	mov.w	fp, #1
 803315c:	e7ec      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 803315e:	f1bb 0f02 	cmp.w	fp, #2
 8033162:	f000 8088 	beq.w	8033276 <__ssvfscanf_r+0x1122>
 8033166:	f1b8 0f01 	cmp.w	r8, #1
 803316a:	d002      	beq.n	8033172 <__ssvfscanf_r+0x101e>
 803316c:	f1b8 0f04 	cmp.w	r8, #4
 8033170:	d115      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033172:	f108 0801 	add.w	r8, r8, #1
 8033176:	fa5f f888 	uxtb.w	r8, r8
 803317a:	e7dd      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 803317c:	0531      	lsls	r1, r6, #20
 803317e:	d50b      	bpl.n	8033198 <__ssvfscanf_r+0x1044>
 8033180:	eb1b 0c08 	adds.w	ip, fp, r8
 8033184:	d108      	bne.n	8033198 <__ssvfscanf_r+0x1044>
 8033186:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803318a:	46e0      	mov	r8, ip
 803318c:	46e3      	mov	fp, ip
 803318e:	e7d3      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 8033190:	0803c218 	.word	0x0803c218
 8033194:	08034ee9 	.word	0x08034ee9
 8033198:	f1bb 0f01 	cmp.w	fp, #1
 803319c:	d06e      	beq.n	803327c <__ssvfscanf_r+0x1128>
 803319e:	f1ba 0f00 	cmp.w	sl, #0
 80331a2:	d001      	beq.n	80331a8 <__ssvfscanf_r+0x1054>
 80331a4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80331a8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80331ac:	f1bb 0f01 	cmp.w	fp, #1
 80331b0:	d873      	bhi.n	803329a <__ssvfscanf_r+0x1146>
 80331b2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80331b6:	45a9      	cmp	r9, r5
 80331b8:	f67f a8c2 	bls.w	8032340 <__ssvfscanf_r+0x1ec>
 80331bc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80331c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331c2:	4622      	mov	r2, r4
 80331c4:	f7fc fdd6 	bl	802fd74 <_sungetc_r>
 80331c8:	e7f5      	b.n	80331b6 <__ssvfscanf_r+0x1062>
 80331ca:	f1b8 0f00 	cmp.w	r8, #0
 80331ce:	d10d      	bne.n	80331ec <__ssvfscanf_r+0x1098>
 80331d0:	f1ba 0f00 	cmp.w	sl, #0
 80331d4:	d1e6      	bne.n	80331a4 <__ssvfscanf_r+0x1050>
 80331d6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80331da:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80331de:	f040 8124 	bne.w	803342a <__ssvfscanf_r+0x12d6>
 80331e2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80331e6:	f04f 0801 	mov.w	r8, #1
 80331ea:	e7a5      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 80331ec:	f1b8 0f03 	cmp.w	r8, #3
 80331f0:	d0bf      	beq.n	8033172 <__ssvfscanf_r+0x101e>
 80331f2:	f1b8 0f05 	cmp.w	r8, #5
 80331f6:	e7bb      	b.n	8033170 <__ssvfscanf_r+0x101c>
 80331f8:	0531      	lsls	r1, r6, #20
 80331fa:	d502      	bpl.n	8033202 <__ssvfscanf_r+0x10ae>
 80331fc:	eb1b 0c08 	adds.w	ip, fp, r8
 8033200:	d0c1      	beq.n	8033186 <__ssvfscanf_r+0x1032>
 8033202:	f1b8 0f02 	cmp.w	r8, #2
 8033206:	d1ca      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033208:	f04f 0803 	mov.w	r8, #3
 803320c:	e794      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 803320e:	f1b8 0f06 	cmp.w	r8, #6
 8033212:	d1c4      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033214:	f04f 0807 	mov.w	r8, #7
 8033218:	e78e      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 803321a:	f1b8 0f07 	cmp.w	r8, #7
 803321e:	d1be      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033220:	f04f 0808 	mov.w	r8, #8
 8033224:	e788      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 8033226:	0531      	lsls	r1, r6, #20
 8033228:	d5b9      	bpl.n	803319e <__ssvfscanf_r+0x104a>
 803322a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803322e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8033232:	d005      	beq.n	8033240 <__ssvfscanf_r+0x10ec>
 8033234:	0571      	lsls	r1, r6, #21
 8033236:	d5b2      	bpl.n	803319e <__ssvfscanf_r+0x104a>
 8033238:	f1ba 0f00 	cmp.w	sl, #0
 803323c:	f000 80f5 	beq.w	803342a <__ssvfscanf_r+0x12d6>
 8033240:	05b1      	lsls	r1, r6, #22
 8033242:	bf58      	it	pl
 8033244:	6939      	ldrpl	r1, [r7, #16]
 8033246:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803324a:	bf5c      	itt	pl
 803324c:	ebaa 0101 	subpl.w	r1, sl, r1
 8033250:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8033254:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8033258:	e767      	b.n	803312a <__ssvfscanf_r+0xfd6>
 803325a:	0531      	lsls	r1, r6, #20
 803325c:	d5e5      	bpl.n	803322a <__ssvfscanf_r+0x10d6>
 803325e:	e74d      	b.n	80330fc <__ssvfscanf_r+0xfa8>
 8033260:	f892 c000 	ldrb.w	ip, [r2]
 8033264:	4584      	cmp	ip, r0
 8033266:	d19a      	bne.n	803319e <__ssvfscanf_r+0x104a>
 8033268:	05b1      	lsls	r1, r6, #22
 803326a:	d598      	bpl.n	803319e <__ssvfscanf_r+0x104a>
 803326c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8033270:	f8c7 a010 	str.w	sl, [r7, #16]
 8033274:	e760      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 8033276:	f04f 0b03 	mov.w	fp, #3
 803327a:	e75d      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 803327c:	f04f 0b02 	mov.w	fp, #2
 8033280:	e75a      	b.n	8033138 <__ssvfscanf_r+0xfe4>
 8033282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033284:	4621      	mov	r1, r4
 8033286:	e9c7 2300 	strd	r2, r3, [r7]
 803328a:	f7fc fdae 	bl	802fdea <__ssrefill_r>
 803328e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033292:	2800      	cmp	r0, #0
 8033294:	f43f af2c 	beq.w	80330f0 <__ssvfscanf_r+0xf9c>
 8033298:	e781      	b.n	803319e <__ssvfscanf_r+0x104a>
 803329a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803329e:	2b06      	cmp	r3, #6
 80332a0:	d827      	bhi.n	80332f2 <__ssvfscanf_r+0x119e>
 80332a2:	f1b8 0f02 	cmp.w	r8, #2
 80332a6:	d834      	bhi.n	8033312 <__ssvfscanf_r+0x11be>
 80332a8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80332ac:	45a9      	cmp	r9, r5
 80332ae:	f67f a847 	bls.w	8032340 <__ssvfscanf_r+0x1ec>
 80332b2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80332b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332b8:	4622      	mov	r2, r4
 80332ba:	f7fc fd5b 	bl	802fd74 <_sungetc_r>
 80332be:	e7f5      	b.n	80332ac <__ssvfscanf_r+0x1158>
 80332c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80332c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80332c8:	4622      	mov	r2, r4
 80332ca:	f7fc fd53 	bl	802fd74 <_sungetc_r>
 80332ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80332d0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80332d4:	fa5f fb8b 	uxtb.w	fp, fp
 80332d8:	f1bb 0f02 	cmp.w	fp, #2
 80332dc:	d1f0      	bne.n	80332c0 <__ssvfscanf_r+0x116c>
 80332de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80332e0:	f1a8 0803 	sub.w	r8, r8, #3
 80332e4:	fa5f f888 	uxtb.w	r8, r8
 80332e8:	eba3 0308 	sub.w	r3, r3, r8
 80332ec:	eba9 0908 	sub.w	r9, r9, r8
 80332f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80332f2:	05f3      	lsls	r3, r6, #23
 80332f4:	d52d      	bpl.n	8033352 <__ssvfscanf_r+0x11fe>
 80332f6:	0570      	lsls	r0, r6, #21
 80332f8:	d50e      	bpl.n	8033318 <__ssvfscanf_r+0x11c4>
 80332fa:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80332fe:	45a9      	cmp	r9, r5
 8033300:	f67f a81e 	bls.w	8032340 <__ssvfscanf_r+0x1ec>
 8033304:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803330a:	4622      	mov	r2, r4
 803330c:	f7fc fd32 	bl	802fd74 <_sungetc_r>
 8033310:	e7f5      	b.n	80332fe <__ssvfscanf_r+0x11aa>
 8033312:	46c3      	mov	fp, r8
 8033314:	464b      	mov	r3, r9
 8033316:	e7db      	b.n	80332d0 <__ssvfscanf_r+0x117c>
 8033318:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803331e:	2965      	cmp	r1, #101	@ 0x65
 8033320:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8033324:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8033328:	d00c      	beq.n	8033344 <__ssvfscanf_r+0x11f0>
 803332a:	2945      	cmp	r1, #69	@ 0x45
 803332c:	d00a      	beq.n	8033344 <__ssvfscanf_r+0x11f0>
 803332e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033330:	4622      	mov	r2, r4
 8033332:	f7fc fd1f 	bl	802fd74 <_sungetc_r>
 8033336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033338:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803333c:	f1a9 0802 	sub.w	r8, r9, #2
 8033340:	f1a3 0b02 	sub.w	fp, r3, #2
 8033344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033346:	4622      	mov	r2, r4
 8033348:	f7fc fd14 	bl	802fd74 <_sungetc_r>
 803334c:	46c1      	mov	r9, r8
 803334e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8033352:	f016 0210 	ands.w	r2, r6, #16
 8033356:	f47e af18 	bne.w	803218a <__ssvfscanf_r+0x36>
 803335a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803335e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033362:	f889 2000 	strb.w	r2, [r9]
 8033366:	d119      	bne.n	803339c <__ssvfscanf_r+0x1248>
 8033368:	693b      	ldr	r3, [r7, #16]
 803336a:	4553      	cmp	r3, sl
 803336c:	eba3 020a 	sub.w	r2, r3, sl
 8033370:	d121      	bne.n	80333b6 <__ssvfscanf_r+0x1262>
 8033372:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033378:	2200      	movs	r2, #0
 803337a:	f001 fd41 	bl	8034e00 <_strtod_r>
 803337e:	07f1      	lsls	r1, r6, #31
 8033380:	ec59 8b10 	vmov	r8, r9, d0
 8033384:	f105 0a04 	add.w	sl, r5, #4
 8033388:	d520      	bpl.n	80333cc <__ssvfscanf_r+0x1278>
 803338a:	682b      	ldr	r3, [r5, #0]
 803338c:	ed83 0b00 	vstr	d0, [r3]
 8033390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033392:	3301      	adds	r3, #1
 8033394:	627b      	str	r3, [r7, #36]	@ 0x24
 8033396:	4655      	mov	r5, sl
 8033398:	f7fe bef7 	b.w	803218a <__ssvfscanf_r+0x36>
 803339c:	68fb      	ldr	r3, [r7, #12]
 803339e:	2b00      	cmp	r3, #0
 80333a0:	d0e7      	beq.n	8033372 <__ssvfscanf_r+0x121e>
 80333a2:	68b9      	ldr	r1, [r7, #8]
 80333a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80333a6:	230a      	movs	r3, #10
 80333a8:	3101      	adds	r1, #1
 80333aa:	f7f8 fe9d 	bl	802c0e8 <_strtol_r>
 80333ae:	68fb      	ldr	r3, [r7, #12]
 80333b0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80333b4:	1ac2      	subs	r2, r0, r3
 80333b6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80333ba:	4599      	cmp	r9, r3
 80333bc:	bf28      	it	cs
 80333be:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80333c2:	491b      	ldr	r1, [pc, #108]	@ (8033430 <__ssvfscanf_r+0x12dc>)
 80333c4:	4648      	mov	r0, r9
 80333c6:	f7f8 ff49 	bl	802c25c <sprintf>
 80333ca:	e7d2      	b.n	8033372 <__ssvfscanf_r+0x121e>
 80333cc:	07b2      	lsls	r2, r6, #30
 80333ce:	682d      	ldr	r5, [r5, #0]
 80333d0:	d502      	bpl.n	80333d8 <__ssvfscanf_r+0x1284>
 80333d2:	ed85 0b00 	vstr	d0, [r5]
 80333d6:	e7db      	b.n	8033390 <__ssvfscanf_r+0x123c>
 80333d8:	4642      	mov	r2, r8
 80333da:	464b      	mov	r3, r9
 80333dc:	4640      	mov	r0, r8
 80333de:	4649      	mov	r1, r9
 80333e0:	f7dd fbbc 	bl	8010b5c <__aeabi_dcmpun>
 80333e4:	b128      	cbz	r0, 80333f2 <__ssvfscanf_r+0x129e>
 80333e6:	4813      	ldr	r0, [pc, #76]	@ (8033434 <__ssvfscanf_r+0x12e0>)
 80333e8:	f002 f8f6 	bl	80355d8 <nanf>
 80333ec:	ed85 0a00 	vstr	s0, [r5]
 80333f0:	e7ce      	b.n	8033390 <__ssvfscanf_r+0x123c>
 80333f2:	4640      	mov	r0, r8
 80333f4:	4649      	mov	r1, r9
 80333f6:	f7dd fc0f 	bl	8010c18 <__aeabi_d2f>
 80333fa:	6028      	str	r0, [r5, #0]
 80333fc:	e7c8      	b.n	8033390 <__ssvfscanf_r+0x123c>
 80333fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033402:	6818      	ldr	r0, [r3, #0]
 8033404:	f7fb fd3a 	bl	802ee7c <free>
 8033408:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803340c:	3401      	adds	r4, #1
 803340e:	601e      	str	r6, [r3, #0]
 8033410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033412:	681d      	ldr	r5, [r3, #0]
 8033414:	88db      	ldrh	r3, [r3, #6]
 8033416:	42a3      	cmp	r3, r4
 8033418:	dcf1      	bgt.n	80333fe <__ssvfscanf_r+0x12aa>
 803341a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033420:	f7ff b85c 	b.w	80324dc <__ssvfscanf_r+0x388>
 8033424:	2400      	movs	r4, #0
 8033426:	4626      	mov	r6, r4
 8033428:	e7f2      	b.n	8033410 <__ssvfscanf_r+0x12bc>
 803342a:	f04f 0a00 	mov.w	sl, #0
 803342e:	e6bb      	b.n	80331a8 <__ssvfscanf_r+0x1054>
 8033430:	0803c212 	.word	0x0803c212
 8033434:	0803bc7a 	.word	0x0803bc7a

08033438 <_putc_r>:
 8033438:	b570      	push	{r4, r5, r6, lr}
 803343a:	460d      	mov	r5, r1
 803343c:	4614      	mov	r4, r2
 803343e:	4606      	mov	r6, r0
 8033440:	b118      	cbz	r0, 803344a <_putc_r+0x12>
 8033442:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033444:	b90b      	cbnz	r3, 803344a <_putc_r+0x12>
 8033446:	f7f9 f825 	bl	802c494 <__sinit>
 803344a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803344c:	07d8      	lsls	r0, r3, #31
 803344e:	d405      	bmi.n	803345c <_putc_r+0x24>
 8033450:	89a3      	ldrh	r3, [r4, #12]
 8033452:	0599      	lsls	r1, r3, #22
 8033454:	d402      	bmi.n	803345c <_putc_r+0x24>
 8033456:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033458:	f7fa fcfb 	bl	802de52 <__retarget_lock_acquire_recursive>
 803345c:	68a3      	ldr	r3, [r4, #8]
 803345e:	3b01      	subs	r3, #1
 8033460:	2b00      	cmp	r3, #0
 8033462:	60a3      	str	r3, [r4, #8]
 8033464:	da05      	bge.n	8033472 <_putc_r+0x3a>
 8033466:	69a2      	ldr	r2, [r4, #24]
 8033468:	4293      	cmp	r3, r2
 803346a:	db12      	blt.n	8033492 <_putc_r+0x5a>
 803346c:	b2eb      	uxtb	r3, r5
 803346e:	2b0a      	cmp	r3, #10
 8033470:	d00f      	beq.n	8033492 <_putc_r+0x5a>
 8033472:	6823      	ldr	r3, [r4, #0]
 8033474:	1c5a      	adds	r2, r3, #1
 8033476:	6022      	str	r2, [r4, #0]
 8033478:	701d      	strb	r5, [r3, #0]
 803347a:	b2ed      	uxtb	r5, r5
 803347c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803347e:	07da      	lsls	r2, r3, #31
 8033480:	d405      	bmi.n	803348e <_putc_r+0x56>
 8033482:	89a3      	ldrh	r3, [r4, #12]
 8033484:	059b      	lsls	r3, r3, #22
 8033486:	d402      	bmi.n	803348e <_putc_r+0x56>
 8033488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803348a:	f7fa fce4 	bl	802de56 <__retarget_lock_release_recursive>
 803348e:	4628      	mov	r0, r5
 8033490:	bd70      	pop	{r4, r5, r6, pc}
 8033492:	4629      	mov	r1, r5
 8033494:	4622      	mov	r2, r4
 8033496:	4630      	mov	r0, r6
 8033498:	f001 fd79 	bl	8034f8e <__swbuf_r>
 803349c:	4605      	mov	r5, r0
 803349e:	e7ed      	b.n	803347c <_putc_r+0x44>

080334a0 <__malloc_lock>:
 80334a0:	4801      	ldr	r0, [pc, #4]	@ (80334a8 <__malloc_lock+0x8>)
 80334a2:	f7fa bcd6 	b.w	802de52 <__retarget_lock_acquire_recursive>
 80334a6:	bf00      	nop
 80334a8:	2001a04a 	.word	0x2001a04a

080334ac <__malloc_unlock>:
 80334ac:	4801      	ldr	r0, [pc, #4]	@ (80334b4 <__malloc_unlock+0x8>)
 80334ae:	f7fa bcd2 	b.w	802de56 <__retarget_lock_release_recursive>
 80334b2:	bf00      	nop
 80334b4:	2001a04a 	.word	0x2001a04a

080334b8 <_Balloc>:
 80334b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80334ba:	b570      	push	{r4, r5, r6, lr}
 80334bc:	4605      	mov	r5, r0
 80334be:	460c      	mov	r4, r1
 80334c0:	b17b      	cbz	r3, 80334e2 <_Balloc+0x2a>
 80334c2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80334c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80334c8:	b9a0      	cbnz	r0, 80334f4 <_Balloc+0x3c>
 80334ca:	2101      	movs	r1, #1
 80334cc:	fa01 f604 	lsl.w	r6, r1, r4
 80334d0:	1d72      	adds	r2, r6, #5
 80334d2:	0092      	lsls	r2, r2, #2
 80334d4:	4628      	mov	r0, r5
 80334d6:	f002 f885 	bl	80355e4 <_calloc_r>
 80334da:	b148      	cbz	r0, 80334f0 <_Balloc+0x38>
 80334dc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80334e0:	e00b      	b.n	80334fa <_Balloc+0x42>
 80334e2:	2221      	movs	r2, #33	@ 0x21
 80334e4:	2104      	movs	r1, #4
 80334e6:	f002 f87d 	bl	80355e4 <_calloc_r>
 80334ea:	6468      	str	r0, [r5, #68]	@ 0x44
 80334ec:	2800      	cmp	r0, #0
 80334ee:	d1e8      	bne.n	80334c2 <_Balloc+0xa>
 80334f0:	2000      	movs	r0, #0
 80334f2:	bd70      	pop	{r4, r5, r6, pc}
 80334f4:	6802      	ldr	r2, [r0, #0]
 80334f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80334fa:	2300      	movs	r3, #0
 80334fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8033500:	e7f7      	b.n	80334f2 <_Balloc+0x3a>

08033502 <_Bfree>:
 8033502:	b131      	cbz	r1, 8033512 <_Bfree+0x10>
 8033504:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033506:	684a      	ldr	r2, [r1, #4]
 8033508:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803350c:	6008      	str	r0, [r1, #0]
 803350e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8033512:	4770      	bx	lr

08033514 <__multadd>:
 8033514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033518:	690d      	ldr	r5, [r1, #16]
 803351a:	4607      	mov	r7, r0
 803351c:	460c      	mov	r4, r1
 803351e:	461e      	mov	r6, r3
 8033520:	f101 0c14 	add.w	ip, r1, #20
 8033524:	2000      	movs	r0, #0
 8033526:	f8dc 3000 	ldr.w	r3, [ip]
 803352a:	b299      	uxth	r1, r3
 803352c:	fb02 6101 	mla	r1, r2, r1, r6
 8033530:	0c1e      	lsrs	r6, r3, #16
 8033532:	0c0b      	lsrs	r3, r1, #16
 8033534:	fb02 3306 	mla	r3, r2, r6, r3
 8033538:	b289      	uxth	r1, r1
 803353a:	3001      	adds	r0, #1
 803353c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8033540:	4285      	cmp	r5, r0
 8033542:	f84c 1b04 	str.w	r1, [ip], #4
 8033546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803354a:	dcec      	bgt.n	8033526 <__multadd+0x12>
 803354c:	b30e      	cbz	r6, 8033592 <__multadd+0x7e>
 803354e:	68a3      	ldr	r3, [r4, #8]
 8033550:	42ab      	cmp	r3, r5
 8033552:	dc19      	bgt.n	8033588 <__multadd+0x74>
 8033554:	6861      	ldr	r1, [r4, #4]
 8033556:	4638      	mov	r0, r7
 8033558:	3101      	adds	r1, #1
 803355a:	f7ff ffad 	bl	80334b8 <_Balloc>
 803355e:	4680      	mov	r8, r0
 8033560:	b928      	cbnz	r0, 803356e <__multadd+0x5a>
 8033562:	4602      	mov	r2, r0
 8033564:	4b0c      	ldr	r3, [pc, #48]	@ (8033598 <__multadd+0x84>)
 8033566:	480d      	ldr	r0, [pc, #52]	@ (803359c <__multadd+0x88>)
 8033568:	21ba      	movs	r1, #186	@ 0xba
 803356a:	f7f6 fce7 	bl	8029f3c <__assert_func>
 803356e:	6922      	ldr	r2, [r4, #16]
 8033570:	3202      	adds	r2, #2
 8033572:	f104 010c 	add.w	r1, r4, #12
 8033576:	0092      	lsls	r2, r2, #2
 8033578:	300c      	adds	r0, #12
 803357a:	f7fa fc6d 	bl	802de58 <memcpy>
 803357e:	4621      	mov	r1, r4
 8033580:	4638      	mov	r0, r7
 8033582:	f7ff ffbe 	bl	8033502 <_Bfree>
 8033586:	4644      	mov	r4, r8
 8033588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803358c:	3501      	adds	r5, #1
 803358e:	615e      	str	r6, [r3, #20]
 8033590:	6125      	str	r5, [r4, #16]
 8033592:	4620      	mov	r0, r4
 8033594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033598:	0803c146 	.word	0x0803c146
 803359c:	0803c23a 	.word	0x0803c23a

080335a0 <__s2b>:
 80335a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80335a4:	460c      	mov	r4, r1
 80335a6:	4615      	mov	r5, r2
 80335a8:	461f      	mov	r7, r3
 80335aa:	2209      	movs	r2, #9
 80335ac:	3308      	adds	r3, #8
 80335ae:	4606      	mov	r6, r0
 80335b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80335b4:	2100      	movs	r1, #0
 80335b6:	2201      	movs	r2, #1
 80335b8:	429a      	cmp	r2, r3
 80335ba:	db09      	blt.n	80335d0 <__s2b+0x30>
 80335bc:	4630      	mov	r0, r6
 80335be:	f7ff ff7b 	bl	80334b8 <_Balloc>
 80335c2:	b940      	cbnz	r0, 80335d6 <__s2b+0x36>
 80335c4:	4602      	mov	r2, r0
 80335c6:	4b19      	ldr	r3, [pc, #100]	@ (803362c <__s2b+0x8c>)
 80335c8:	4819      	ldr	r0, [pc, #100]	@ (8033630 <__s2b+0x90>)
 80335ca:	21d3      	movs	r1, #211	@ 0xd3
 80335cc:	f7f6 fcb6 	bl	8029f3c <__assert_func>
 80335d0:	0052      	lsls	r2, r2, #1
 80335d2:	3101      	adds	r1, #1
 80335d4:	e7f0      	b.n	80335b8 <__s2b+0x18>
 80335d6:	9b08      	ldr	r3, [sp, #32]
 80335d8:	6143      	str	r3, [r0, #20]
 80335da:	2d09      	cmp	r5, #9
 80335dc:	f04f 0301 	mov.w	r3, #1
 80335e0:	6103      	str	r3, [r0, #16]
 80335e2:	dd16      	ble.n	8033612 <__s2b+0x72>
 80335e4:	f104 0909 	add.w	r9, r4, #9
 80335e8:	46c8      	mov	r8, r9
 80335ea:	442c      	add	r4, r5
 80335ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80335f0:	4601      	mov	r1, r0
 80335f2:	3b30      	subs	r3, #48	@ 0x30
 80335f4:	220a      	movs	r2, #10
 80335f6:	4630      	mov	r0, r6
 80335f8:	f7ff ff8c 	bl	8033514 <__multadd>
 80335fc:	45a0      	cmp	r8, r4
 80335fe:	d1f5      	bne.n	80335ec <__s2b+0x4c>
 8033600:	f1a5 0408 	sub.w	r4, r5, #8
 8033604:	444c      	add	r4, r9
 8033606:	1b2d      	subs	r5, r5, r4
 8033608:	1963      	adds	r3, r4, r5
 803360a:	42bb      	cmp	r3, r7
 803360c:	db04      	blt.n	8033618 <__s2b+0x78>
 803360e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033612:	340a      	adds	r4, #10
 8033614:	2509      	movs	r5, #9
 8033616:	e7f6      	b.n	8033606 <__s2b+0x66>
 8033618:	f814 3b01 	ldrb.w	r3, [r4], #1
 803361c:	4601      	mov	r1, r0
 803361e:	3b30      	subs	r3, #48	@ 0x30
 8033620:	220a      	movs	r2, #10
 8033622:	4630      	mov	r0, r6
 8033624:	f7ff ff76 	bl	8033514 <__multadd>
 8033628:	e7ee      	b.n	8033608 <__s2b+0x68>
 803362a:	bf00      	nop
 803362c:	0803c146 	.word	0x0803c146
 8033630:	0803c23a 	.word	0x0803c23a

08033634 <__hi0bits>:
 8033634:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8033638:	4603      	mov	r3, r0
 803363a:	bf36      	itet	cc
 803363c:	0403      	lslcc	r3, r0, #16
 803363e:	2000      	movcs	r0, #0
 8033640:	2010      	movcc	r0, #16
 8033642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8033646:	bf3c      	itt	cc
 8033648:	021b      	lslcc	r3, r3, #8
 803364a:	3008      	addcc	r0, #8
 803364c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8033650:	bf3c      	itt	cc
 8033652:	011b      	lslcc	r3, r3, #4
 8033654:	3004      	addcc	r0, #4
 8033656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803365a:	bf3c      	itt	cc
 803365c:	009b      	lslcc	r3, r3, #2
 803365e:	3002      	addcc	r0, #2
 8033660:	2b00      	cmp	r3, #0
 8033662:	db05      	blt.n	8033670 <__hi0bits+0x3c>
 8033664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8033668:	f100 0001 	add.w	r0, r0, #1
 803366c:	bf08      	it	eq
 803366e:	2020      	moveq	r0, #32
 8033670:	4770      	bx	lr

08033672 <__lo0bits>:
 8033672:	6803      	ldr	r3, [r0, #0]
 8033674:	4602      	mov	r2, r0
 8033676:	f013 0007 	ands.w	r0, r3, #7
 803367a:	d00b      	beq.n	8033694 <__lo0bits+0x22>
 803367c:	07d9      	lsls	r1, r3, #31
 803367e:	d421      	bmi.n	80336c4 <__lo0bits+0x52>
 8033680:	0798      	lsls	r0, r3, #30
 8033682:	bf49      	itett	mi
 8033684:	085b      	lsrmi	r3, r3, #1
 8033686:	089b      	lsrpl	r3, r3, #2
 8033688:	2001      	movmi	r0, #1
 803368a:	6013      	strmi	r3, [r2, #0]
 803368c:	bf5c      	itt	pl
 803368e:	6013      	strpl	r3, [r2, #0]
 8033690:	2002      	movpl	r0, #2
 8033692:	4770      	bx	lr
 8033694:	b299      	uxth	r1, r3
 8033696:	b909      	cbnz	r1, 803369c <__lo0bits+0x2a>
 8033698:	0c1b      	lsrs	r3, r3, #16
 803369a:	2010      	movs	r0, #16
 803369c:	b2d9      	uxtb	r1, r3
 803369e:	b909      	cbnz	r1, 80336a4 <__lo0bits+0x32>
 80336a0:	3008      	adds	r0, #8
 80336a2:	0a1b      	lsrs	r3, r3, #8
 80336a4:	0719      	lsls	r1, r3, #28
 80336a6:	bf04      	itt	eq
 80336a8:	091b      	lsreq	r3, r3, #4
 80336aa:	3004      	addeq	r0, #4
 80336ac:	0799      	lsls	r1, r3, #30
 80336ae:	bf04      	itt	eq
 80336b0:	089b      	lsreq	r3, r3, #2
 80336b2:	3002      	addeq	r0, #2
 80336b4:	07d9      	lsls	r1, r3, #31
 80336b6:	d403      	bmi.n	80336c0 <__lo0bits+0x4e>
 80336b8:	085b      	lsrs	r3, r3, #1
 80336ba:	f100 0001 	add.w	r0, r0, #1
 80336be:	d003      	beq.n	80336c8 <__lo0bits+0x56>
 80336c0:	6013      	str	r3, [r2, #0]
 80336c2:	4770      	bx	lr
 80336c4:	2000      	movs	r0, #0
 80336c6:	4770      	bx	lr
 80336c8:	2020      	movs	r0, #32
 80336ca:	4770      	bx	lr

080336cc <__i2b>:
 80336cc:	b510      	push	{r4, lr}
 80336ce:	460c      	mov	r4, r1
 80336d0:	2101      	movs	r1, #1
 80336d2:	f7ff fef1 	bl	80334b8 <_Balloc>
 80336d6:	4602      	mov	r2, r0
 80336d8:	b928      	cbnz	r0, 80336e6 <__i2b+0x1a>
 80336da:	4b05      	ldr	r3, [pc, #20]	@ (80336f0 <__i2b+0x24>)
 80336dc:	4805      	ldr	r0, [pc, #20]	@ (80336f4 <__i2b+0x28>)
 80336de:	f240 1145 	movw	r1, #325	@ 0x145
 80336e2:	f7f6 fc2b 	bl	8029f3c <__assert_func>
 80336e6:	2301      	movs	r3, #1
 80336e8:	6144      	str	r4, [r0, #20]
 80336ea:	6103      	str	r3, [r0, #16]
 80336ec:	bd10      	pop	{r4, pc}
 80336ee:	bf00      	nop
 80336f0:	0803c146 	.word	0x0803c146
 80336f4:	0803c23a 	.word	0x0803c23a

080336f8 <__multiply>:
 80336f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80336fc:	4614      	mov	r4, r2
 80336fe:	690a      	ldr	r2, [r1, #16]
 8033700:	6923      	ldr	r3, [r4, #16]
 8033702:	429a      	cmp	r2, r3
 8033704:	bfa8      	it	ge
 8033706:	4623      	movge	r3, r4
 8033708:	460f      	mov	r7, r1
 803370a:	bfa4      	itt	ge
 803370c:	460c      	movge	r4, r1
 803370e:	461f      	movge	r7, r3
 8033710:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8033714:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8033718:	68a3      	ldr	r3, [r4, #8]
 803371a:	6861      	ldr	r1, [r4, #4]
 803371c:	eb0a 0609 	add.w	r6, sl, r9
 8033720:	42b3      	cmp	r3, r6
 8033722:	b085      	sub	sp, #20
 8033724:	bfb8      	it	lt
 8033726:	3101      	addlt	r1, #1
 8033728:	f7ff fec6 	bl	80334b8 <_Balloc>
 803372c:	b930      	cbnz	r0, 803373c <__multiply+0x44>
 803372e:	4602      	mov	r2, r0
 8033730:	4b44      	ldr	r3, [pc, #272]	@ (8033844 <__multiply+0x14c>)
 8033732:	4845      	ldr	r0, [pc, #276]	@ (8033848 <__multiply+0x150>)
 8033734:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8033738:	f7f6 fc00 	bl	8029f3c <__assert_func>
 803373c:	f100 0514 	add.w	r5, r0, #20
 8033740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8033744:	462b      	mov	r3, r5
 8033746:	2200      	movs	r2, #0
 8033748:	4543      	cmp	r3, r8
 803374a:	d321      	bcc.n	8033790 <__multiply+0x98>
 803374c:	f107 0114 	add.w	r1, r7, #20
 8033750:	f104 0214 	add.w	r2, r4, #20
 8033754:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8033758:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803375c:	9302      	str	r3, [sp, #8]
 803375e:	1b13      	subs	r3, r2, r4
 8033760:	3b15      	subs	r3, #21
 8033762:	f023 0303 	bic.w	r3, r3, #3
 8033766:	3304      	adds	r3, #4
 8033768:	f104 0715 	add.w	r7, r4, #21
 803376c:	42ba      	cmp	r2, r7
 803376e:	bf38      	it	cc
 8033770:	2304      	movcc	r3, #4
 8033772:	9301      	str	r3, [sp, #4]
 8033774:	9b02      	ldr	r3, [sp, #8]
 8033776:	9103      	str	r1, [sp, #12]
 8033778:	428b      	cmp	r3, r1
 803377a:	d80c      	bhi.n	8033796 <__multiply+0x9e>
 803377c:	2e00      	cmp	r6, #0
 803377e:	dd03      	ble.n	8033788 <__multiply+0x90>
 8033780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033784:	2b00      	cmp	r3, #0
 8033786:	d05b      	beq.n	8033840 <__multiply+0x148>
 8033788:	6106      	str	r6, [r0, #16]
 803378a:	b005      	add	sp, #20
 803378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033790:	f843 2b04 	str.w	r2, [r3], #4
 8033794:	e7d8      	b.n	8033748 <__multiply+0x50>
 8033796:	f8b1 a000 	ldrh.w	sl, [r1]
 803379a:	f1ba 0f00 	cmp.w	sl, #0
 803379e:	d024      	beq.n	80337ea <__multiply+0xf2>
 80337a0:	f104 0e14 	add.w	lr, r4, #20
 80337a4:	46a9      	mov	r9, r5
 80337a6:	f04f 0c00 	mov.w	ip, #0
 80337aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80337ae:	f8d9 3000 	ldr.w	r3, [r9]
 80337b2:	fa1f fb87 	uxth.w	fp, r7
 80337b6:	b29b      	uxth	r3, r3
 80337b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80337bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80337c0:	f8d9 7000 	ldr.w	r7, [r9]
 80337c4:	4463      	add	r3, ip
 80337c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80337ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80337ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80337d2:	b29b      	uxth	r3, r3
 80337d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80337d8:	4572      	cmp	r2, lr
 80337da:	f849 3b04 	str.w	r3, [r9], #4
 80337de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80337e2:	d8e2      	bhi.n	80337aa <__multiply+0xb2>
 80337e4:	9b01      	ldr	r3, [sp, #4]
 80337e6:	f845 c003 	str.w	ip, [r5, r3]
 80337ea:	9b03      	ldr	r3, [sp, #12]
 80337ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80337f0:	3104      	adds	r1, #4
 80337f2:	f1b9 0f00 	cmp.w	r9, #0
 80337f6:	d021      	beq.n	803383c <__multiply+0x144>
 80337f8:	682b      	ldr	r3, [r5, #0]
 80337fa:	f104 0c14 	add.w	ip, r4, #20
 80337fe:	46ae      	mov	lr, r5
 8033800:	f04f 0a00 	mov.w	sl, #0
 8033804:	f8bc b000 	ldrh.w	fp, [ip]
 8033808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803380c:	fb09 770b 	mla	r7, r9, fp, r7
 8033810:	4457      	add	r7, sl
 8033812:	b29b      	uxth	r3, r3
 8033814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033818:	f84e 3b04 	str.w	r3, [lr], #4
 803381c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033824:	f8be 3000 	ldrh.w	r3, [lr]
 8033828:	fb09 330a 	mla	r3, r9, sl, r3
 803382c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8033830:	4562      	cmp	r2, ip
 8033832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033836:	d8e5      	bhi.n	8033804 <__multiply+0x10c>
 8033838:	9f01      	ldr	r7, [sp, #4]
 803383a:	51eb      	str	r3, [r5, r7]
 803383c:	3504      	adds	r5, #4
 803383e:	e799      	b.n	8033774 <__multiply+0x7c>
 8033840:	3e01      	subs	r6, #1
 8033842:	e79b      	b.n	803377c <__multiply+0x84>
 8033844:	0803c146 	.word	0x0803c146
 8033848:	0803c23a 	.word	0x0803c23a

0803384c <__pow5mult>:
 803384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033850:	4615      	mov	r5, r2
 8033852:	f012 0203 	ands.w	r2, r2, #3
 8033856:	4607      	mov	r7, r0
 8033858:	460e      	mov	r6, r1
 803385a:	d007      	beq.n	803386c <__pow5mult+0x20>
 803385c:	4c1a      	ldr	r4, [pc, #104]	@ (80338c8 <__pow5mult+0x7c>)
 803385e:	3a01      	subs	r2, #1
 8033860:	2300      	movs	r3, #0
 8033862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033866:	f7ff fe55 	bl	8033514 <__multadd>
 803386a:	4606      	mov	r6, r0
 803386c:	10ad      	asrs	r5, r5, #2
 803386e:	d027      	beq.n	80338c0 <__pow5mult+0x74>
 8033870:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033872:	b944      	cbnz	r4, 8033886 <__pow5mult+0x3a>
 8033874:	f240 2171 	movw	r1, #625	@ 0x271
 8033878:	4638      	mov	r0, r7
 803387a:	f7ff ff27 	bl	80336cc <__i2b>
 803387e:	2300      	movs	r3, #0
 8033880:	6438      	str	r0, [r7, #64]	@ 0x40
 8033882:	4604      	mov	r4, r0
 8033884:	6003      	str	r3, [r0, #0]
 8033886:	f04f 0900 	mov.w	r9, #0
 803388a:	07eb      	lsls	r3, r5, #31
 803388c:	d50a      	bpl.n	80338a4 <__pow5mult+0x58>
 803388e:	4631      	mov	r1, r6
 8033890:	4622      	mov	r2, r4
 8033892:	4638      	mov	r0, r7
 8033894:	f7ff ff30 	bl	80336f8 <__multiply>
 8033898:	4631      	mov	r1, r6
 803389a:	4680      	mov	r8, r0
 803389c:	4638      	mov	r0, r7
 803389e:	f7ff fe30 	bl	8033502 <_Bfree>
 80338a2:	4646      	mov	r6, r8
 80338a4:	106d      	asrs	r5, r5, #1
 80338a6:	d00b      	beq.n	80338c0 <__pow5mult+0x74>
 80338a8:	6820      	ldr	r0, [r4, #0]
 80338aa:	b938      	cbnz	r0, 80338bc <__pow5mult+0x70>
 80338ac:	4622      	mov	r2, r4
 80338ae:	4621      	mov	r1, r4
 80338b0:	4638      	mov	r0, r7
 80338b2:	f7ff ff21 	bl	80336f8 <__multiply>
 80338b6:	6020      	str	r0, [r4, #0]
 80338b8:	f8c0 9000 	str.w	r9, [r0]
 80338bc:	4604      	mov	r4, r0
 80338be:	e7e4      	b.n	803388a <__pow5mult+0x3e>
 80338c0:	4630      	mov	r0, r6
 80338c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80338c6:	bf00      	nop
 80338c8:	0803c294 	.word	0x0803c294

080338cc <__lshift>:
 80338cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80338d0:	460c      	mov	r4, r1
 80338d2:	6849      	ldr	r1, [r1, #4]
 80338d4:	6923      	ldr	r3, [r4, #16]
 80338d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80338da:	68a3      	ldr	r3, [r4, #8]
 80338dc:	4607      	mov	r7, r0
 80338de:	4691      	mov	r9, r2
 80338e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80338e4:	f108 0601 	add.w	r6, r8, #1
 80338e8:	42b3      	cmp	r3, r6
 80338ea:	db0b      	blt.n	8033904 <__lshift+0x38>
 80338ec:	4638      	mov	r0, r7
 80338ee:	f7ff fde3 	bl	80334b8 <_Balloc>
 80338f2:	4605      	mov	r5, r0
 80338f4:	b948      	cbnz	r0, 803390a <__lshift+0x3e>
 80338f6:	4602      	mov	r2, r0
 80338f8:	4b28      	ldr	r3, [pc, #160]	@ (803399c <__lshift+0xd0>)
 80338fa:	4829      	ldr	r0, [pc, #164]	@ (80339a0 <__lshift+0xd4>)
 80338fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8033900:	f7f6 fb1c 	bl	8029f3c <__assert_func>
 8033904:	3101      	adds	r1, #1
 8033906:	005b      	lsls	r3, r3, #1
 8033908:	e7ee      	b.n	80338e8 <__lshift+0x1c>
 803390a:	2300      	movs	r3, #0
 803390c:	f100 0114 	add.w	r1, r0, #20
 8033910:	f100 0210 	add.w	r2, r0, #16
 8033914:	4618      	mov	r0, r3
 8033916:	4553      	cmp	r3, sl
 8033918:	db33      	blt.n	8033982 <__lshift+0xb6>
 803391a:	6920      	ldr	r0, [r4, #16]
 803391c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8033920:	f104 0314 	add.w	r3, r4, #20
 8033924:	f019 091f 	ands.w	r9, r9, #31
 8033928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803392c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8033930:	d02b      	beq.n	803398a <__lshift+0xbe>
 8033932:	f1c9 0e20 	rsb	lr, r9, #32
 8033936:	468a      	mov	sl, r1
 8033938:	2200      	movs	r2, #0
 803393a:	6818      	ldr	r0, [r3, #0]
 803393c:	fa00 f009 	lsl.w	r0, r0, r9
 8033940:	4310      	orrs	r0, r2
 8033942:	f84a 0b04 	str.w	r0, [sl], #4
 8033946:	f853 2b04 	ldr.w	r2, [r3], #4
 803394a:	459c      	cmp	ip, r3
 803394c:	fa22 f20e 	lsr.w	r2, r2, lr
 8033950:	d8f3      	bhi.n	803393a <__lshift+0x6e>
 8033952:	ebac 0304 	sub.w	r3, ip, r4
 8033956:	3b15      	subs	r3, #21
 8033958:	f023 0303 	bic.w	r3, r3, #3
 803395c:	3304      	adds	r3, #4
 803395e:	f104 0015 	add.w	r0, r4, #21
 8033962:	4584      	cmp	ip, r0
 8033964:	bf38      	it	cc
 8033966:	2304      	movcc	r3, #4
 8033968:	50ca      	str	r2, [r1, r3]
 803396a:	b10a      	cbz	r2, 8033970 <__lshift+0xa4>
 803396c:	f108 0602 	add.w	r6, r8, #2
 8033970:	3e01      	subs	r6, #1
 8033972:	4638      	mov	r0, r7
 8033974:	612e      	str	r6, [r5, #16]
 8033976:	4621      	mov	r1, r4
 8033978:	f7ff fdc3 	bl	8033502 <_Bfree>
 803397c:	4628      	mov	r0, r5
 803397e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033982:	f842 0f04 	str.w	r0, [r2, #4]!
 8033986:	3301      	adds	r3, #1
 8033988:	e7c5      	b.n	8033916 <__lshift+0x4a>
 803398a:	3904      	subs	r1, #4
 803398c:	f853 2b04 	ldr.w	r2, [r3], #4
 8033990:	f841 2f04 	str.w	r2, [r1, #4]!
 8033994:	459c      	cmp	ip, r3
 8033996:	d8f9      	bhi.n	803398c <__lshift+0xc0>
 8033998:	e7ea      	b.n	8033970 <__lshift+0xa4>
 803399a:	bf00      	nop
 803399c:	0803c146 	.word	0x0803c146
 80339a0:	0803c23a 	.word	0x0803c23a

080339a4 <__mcmp>:
 80339a4:	690a      	ldr	r2, [r1, #16]
 80339a6:	4603      	mov	r3, r0
 80339a8:	6900      	ldr	r0, [r0, #16]
 80339aa:	1a80      	subs	r0, r0, r2
 80339ac:	b530      	push	{r4, r5, lr}
 80339ae:	d10e      	bne.n	80339ce <__mcmp+0x2a>
 80339b0:	3314      	adds	r3, #20
 80339b2:	3114      	adds	r1, #20
 80339b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80339b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80339bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80339c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80339c4:	4295      	cmp	r5, r2
 80339c6:	d003      	beq.n	80339d0 <__mcmp+0x2c>
 80339c8:	d205      	bcs.n	80339d6 <__mcmp+0x32>
 80339ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80339ce:	bd30      	pop	{r4, r5, pc}
 80339d0:	42a3      	cmp	r3, r4
 80339d2:	d3f3      	bcc.n	80339bc <__mcmp+0x18>
 80339d4:	e7fb      	b.n	80339ce <__mcmp+0x2a>
 80339d6:	2001      	movs	r0, #1
 80339d8:	e7f9      	b.n	80339ce <__mcmp+0x2a>
	...

080339dc <__mdiff>:
 80339dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80339e0:	4689      	mov	r9, r1
 80339e2:	4606      	mov	r6, r0
 80339e4:	4611      	mov	r1, r2
 80339e6:	4648      	mov	r0, r9
 80339e8:	4614      	mov	r4, r2
 80339ea:	f7ff ffdb 	bl	80339a4 <__mcmp>
 80339ee:	1e05      	subs	r5, r0, #0
 80339f0:	d112      	bne.n	8033a18 <__mdiff+0x3c>
 80339f2:	4629      	mov	r1, r5
 80339f4:	4630      	mov	r0, r6
 80339f6:	f7ff fd5f 	bl	80334b8 <_Balloc>
 80339fa:	4602      	mov	r2, r0
 80339fc:	b928      	cbnz	r0, 8033a0a <__mdiff+0x2e>
 80339fe:	4b3f      	ldr	r3, [pc, #252]	@ (8033afc <__mdiff+0x120>)
 8033a00:	f240 2137 	movw	r1, #567	@ 0x237
 8033a04:	483e      	ldr	r0, [pc, #248]	@ (8033b00 <__mdiff+0x124>)
 8033a06:	f7f6 fa99 	bl	8029f3c <__assert_func>
 8033a0a:	2301      	movs	r3, #1
 8033a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8033a10:	4610      	mov	r0, r2
 8033a12:	b003      	add	sp, #12
 8033a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033a18:	bfbc      	itt	lt
 8033a1a:	464b      	movlt	r3, r9
 8033a1c:	46a1      	movlt	r9, r4
 8033a1e:	4630      	mov	r0, r6
 8033a20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8033a24:	bfba      	itte	lt
 8033a26:	461c      	movlt	r4, r3
 8033a28:	2501      	movlt	r5, #1
 8033a2a:	2500      	movge	r5, #0
 8033a2c:	f7ff fd44 	bl	80334b8 <_Balloc>
 8033a30:	4602      	mov	r2, r0
 8033a32:	b918      	cbnz	r0, 8033a3c <__mdiff+0x60>
 8033a34:	4b31      	ldr	r3, [pc, #196]	@ (8033afc <__mdiff+0x120>)
 8033a36:	f240 2145 	movw	r1, #581	@ 0x245
 8033a3a:	e7e3      	b.n	8033a04 <__mdiff+0x28>
 8033a3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8033a40:	6926      	ldr	r6, [r4, #16]
 8033a42:	60c5      	str	r5, [r0, #12]
 8033a44:	f109 0310 	add.w	r3, r9, #16
 8033a48:	f109 0514 	add.w	r5, r9, #20
 8033a4c:	f104 0e14 	add.w	lr, r4, #20
 8033a50:	f100 0b14 	add.w	fp, r0, #20
 8033a54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8033a58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8033a5c:	9301      	str	r3, [sp, #4]
 8033a5e:	46d9      	mov	r9, fp
 8033a60:	f04f 0c00 	mov.w	ip, #0
 8033a64:	9b01      	ldr	r3, [sp, #4]
 8033a66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8033a6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8033a6e:	9301      	str	r3, [sp, #4]
 8033a70:	fa1f f38a 	uxth.w	r3, sl
 8033a74:	4619      	mov	r1, r3
 8033a76:	b283      	uxth	r3, r0
 8033a78:	1acb      	subs	r3, r1, r3
 8033a7a:	0c00      	lsrs	r0, r0, #16
 8033a7c:	4463      	add	r3, ip
 8033a7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033a82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033a86:	b29b      	uxth	r3, r3
 8033a88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8033a8c:	4576      	cmp	r6, lr
 8033a8e:	f849 3b04 	str.w	r3, [r9], #4
 8033a92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033a96:	d8e5      	bhi.n	8033a64 <__mdiff+0x88>
 8033a98:	1b33      	subs	r3, r6, r4
 8033a9a:	3b15      	subs	r3, #21
 8033a9c:	f023 0303 	bic.w	r3, r3, #3
 8033aa0:	3415      	adds	r4, #21
 8033aa2:	3304      	adds	r3, #4
 8033aa4:	42a6      	cmp	r6, r4
 8033aa6:	bf38      	it	cc
 8033aa8:	2304      	movcc	r3, #4
 8033aaa:	441d      	add	r5, r3
 8033aac:	445b      	add	r3, fp
 8033aae:	461e      	mov	r6, r3
 8033ab0:	462c      	mov	r4, r5
 8033ab2:	4544      	cmp	r4, r8
 8033ab4:	d30e      	bcc.n	8033ad4 <__mdiff+0xf8>
 8033ab6:	f108 0103 	add.w	r1, r8, #3
 8033aba:	1b49      	subs	r1, r1, r5
 8033abc:	f021 0103 	bic.w	r1, r1, #3
 8033ac0:	3d03      	subs	r5, #3
 8033ac2:	45a8      	cmp	r8, r5
 8033ac4:	bf38      	it	cc
 8033ac6:	2100      	movcc	r1, #0
 8033ac8:	440b      	add	r3, r1
 8033aca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033ace:	b191      	cbz	r1, 8033af6 <__mdiff+0x11a>
 8033ad0:	6117      	str	r7, [r2, #16]
 8033ad2:	e79d      	b.n	8033a10 <__mdiff+0x34>
 8033ad4:	f854 1b04 	ldr.w	r1, [r4], #4
 8033ad8:	46e6      	mov	lr, ip
 8033ada:	0c08      	lsrs	r0, r1, #16
 8033adc:	fa1c fc81 	uxtah	ip, ip, r1
 8033ae0:	4471      	add	r1, lr
 8033ae2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8033ae6:	b289      	uxth	r1, r1
 8033ae8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8033aec:	f846 1b04 	str.w	r1, [r6], #4
 8033af0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033af4:	e7dd      	b.n	8033ab2 <__mdiff+0xd6>
 8033af6:	3f01      	subs	r7, #1
 8033af8:	e7e7      	b.n	8033aca <__mdiff+0xee>
 8033afa:	bf00      	nop
 8033afc:	0803c146 	.word	0x0803c146
 8033b00:	0803c23a 	.word	0x0803c23a

08033b04 <__ulp>:
 8033b04:	b082      	sub	sp, #8
 8033b06:	ed8d 0b00 	vstr	d0, [sp]
 8033b0a:	9a01      	ldr	r2, [sp, #4]
 8033b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8033b4c <__ulp+0x48>)
 8033b0e:	4013      	ands	r3, r2
 8033b10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8033b14:	2b00      	cmp	r3, #0
 8033b16:	dc08      	bgt.n	8033b2a <__ulp+0x26>
 8033b18:	425b      	negs	r3, r3
 8033b1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8033b1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8033b22:	da04      	bge.n	8033b2e <__ulp+0x2a>
 8033b24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8033b28:	4113      	asrs	r3, r2
 8033b2a:	2200      	movs	r2, #0
 8033b2c:	e008      	b.n	8033b40 <__ulp+0x3c>
 8033b2e:	f1a2 0314 	sub.w	r3, r2, #20
 8033b32:	2b1e      	cmp	r3, #30
 8033b34:	bfda      	itte	le
 8033b36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8033b3a:	40da      	lsrle	r2, r3
 8033b3c:	2201      	movgt	r2, #1
 8033b3e:	2300      	movs	r3, #0
 8033b40:	4619      	mov	r1, r3
 8033b42:	4610      	mov	r0, r2
 8033b44:	ec41 0b10 	vmov	d0, r0, r1
 8033b48:	b002      	add	sp, #8
 8033b4a:	4770      	bx	lr
 8033b4c:	7ff00000 	.word	0x7ff00000

08033b50 <__b2d>:
 8033b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033b54:	6906      	ldr	r6, [r0, #16]
 8033b56:	f100 0814 	add.w	r8, r0, #20
 8033b5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8033b5e:	1f37      	subs	r7, r6, #4
 8033b60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033b64:	4610      	mov	r0, r2
 8033b66:	f7ff fd65 	bl	8033634 <__hi0bits>
 8033b6a:	f1c0 0320 	rsb	r3, r0, #32
 8033b6e:	280a      	cmp	r0, #10
 8033b70:	600b      	str	r3, [r1, #0]
 8033b72:	491b      	ldr	r1, [pc, #108]	@ (8033be0 <__b2d+0x90>)
 8033b74:	dc15      	bgt.n	8033ba2 <__b2d+0x52>
 8033b76:	f1c0 0c0b 	rsb	ip, r0, #11
 8033b7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8033b7e:	45b8      	cmp	r8, r7
 8033b80:	ea43 0501 	orr.w	r5, r3, r1
 8033b84:	bf34      	ite	cc
 8033b86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033b8a:	2300      	movcs	r3, #0
 8033b8c:	3015      	adds	r0, #21
 8033b8e:	fa02 f000 	lsl.w	r0, r2, r0
 8033b92:	fa23 f30c 	lsr.w	r3, r3, ip
 8033b96:	4303      	orrs	r3, r0
 8033b98:	461c      	mov	r4, r3
 8033b9a:	ec45 4b10 	vmov	d0, r4, r5
 8033b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033ba2:	45b8      	cmp	r8, r7
 8033ba4:	bf3a      	itte	cc
 8033ba6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033baa:	f1a6 0708 	subcc.w	r7, r6, #8
 8033bae:	2300      	movcs	r3, #0
 8033bb0:	380b      	subs	r0, #11
 8033bb2:	d012      	beq.n	8033bda <__b2d+0x8a>
 8033bb4:	f1c0 0120 	rsb	r1, r0, #32
 8033bb8:	fa23 f401 	lsr.w	r4, r3, r1
 8033bbc:	4082      	lsls	r2, r0
 8033bbe:	4322      	orrs	r2, r4
 8033bc0:	4547      	cmp	r7, r8
 8033bc2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8033bc6:	bf8c      	ite	hi
 8033bc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8033bcc:	2200      	movls	r2, #0
 8033bce:	4083      	lsls	r3, r0
 8033bd0:	40ca      	lsrs	r2, r1
 8033bd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8033bd6:	4313      	orrs	r3, r2
 8033bd8:	e7de      	b.n	8033b98 <__b2d+0x48>
 8033bda:	ea42 0501 	orr.w	r5, r2, r1
 8033bde:	e7db      	b.n	8033b98 <__b2d+0x48>
 8033be0:	3ff00000 	.word	0x3ff00000

08033be4 <__d2b>:
 8033be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8033be8:	460f      	mov	r7, r1
 8033bea:	2101      	movs	r1, #1
 8033bec:	ec59 8b10 	vmov	r8, r9, d0
 8033bf0:	4616      	mov	r6, r2
 8033bf2:	f7ff fc61 	bl	80334b8 <_Balloc>
 8033bf6:	4604      	mov	r4, r0
 8033bf8:	b930      	cbnz	r0, 8033c08 <__d2b+0x24>
 8033bfa:	4602      	mov	r2, r0
 8033bfc:	4b23      	ldr	r3, [pc, #140]	@ (8033c8c <__d2b+0xa8>)
 8033bfe:	4824      	ldr	r0, [pc, #144]	@ (8033c90 <__d2b+0xac>)
 8033c00:	f240 310f 	movw	r1, #783	@ 0x30f
 8033c04:	f7f6 f99a 	bl	8029f3c <__assert_func>
 8033c08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8033c0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8033c10:	b10d      	cbz	r5, 8033c16 <__d2b+0x32>
 8033c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8033c16:	9301      	str	r3, [sp, #4]
 8033c18:	f1b8 0300 	subs.w	r3, r8, #0
 8033c1c:	d023      	beq.n	8033c66 <__d2b+0x82>
 8033c1e:	4668      	mov	r0, sp
 8033c20:	9300      	str	r3, [sp, #0]
 8033c22:	f7ff fd26 	bl	8033672 <__lo0bits>
 8033c26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8033c2a:	b1d0      	cbz	r0, 8033c62 <__d2b+0x7e>
 8033c2c:	f1c0 0320 	rsb	r3, r0, #32
 8033c30:	fa02 f303 	lsl.w	r3, r2, r3
 8033c34:	430b      	orrs	r3, r1
 8033c36:	40c2      	lsrs	r2, r0
 8033c38:	6163      	str	r3, [r4, #20]
 8033c3a:	9201      	str	r2, [sp, #4]
 8033c3c:	9b01      	ldr	r3, [sp, #4]
 8033c3e:	61a3      	str	r3, [r4, #24]
 8033c40:	2b00      	cmp	r3, #0
 8033c42:	bf0c      	ite	eq
 8033c44:	2201      	moveq	r2, #1
 8033c46:	2202      	movne	r2, #2
 8033c48:	6122      	str	r2, [r4, #16]
 8033c4a:	b1a5      	cbz	r5, 8033c76 <__d2b+0x92>
 8033c4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8033c50:	4405      	add	r5, r0
 8033c52:	603d      	str	r5, [r7, #0]
 8033c54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8033c58:	6030      	str	r0, [r6, #0]
 8033c5a:	4620      	mov	r0, r4
 8033c5c:	b003      	add	sp, #12
 8033c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033c62:	6161      	str	r1, [r4, #20]
 8033c64:	e7ea      	b.n	8033c3c <__d2b+0x58>
 8033c66:	a801      	add	r0, sp, #4
 8033c68:	f7ff fd03 	bl	8033672 <__lo0bits>
 8033c6c:	9b01      	ldr	r3, [sp, #4]
 8033c6e:	6163      	str	r3, [r4, #20]
 8033c70:	3020      	adds	r0, #32
 8033c72:	2201      	movs	r2, #1
 8033c74:	e7e8      	b.n	8033c48 <__d2b+0x64>
 8033c76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8033c7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8033c7e:	6038      	str	r0, [r7, #0]
 8033c80:	6918      	ldr	r0, [r3, #16]
 8033c82:	f7ff fcd7 	bl	8033634 <__hi0bits>
 8033c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8033c8a:	e7e5      	b.n	8033c58 <__d2b+0x74>
 8033c8c:	0803c146 	.word	0x0803c146
 8033c90:	0803c23a 	.word	0x0803c23a

08033c94 <__ratio>:
 8033c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033c98:	b085      	sub	sp, #20
 8033c9a:	e9cd 1000 	strd	r1, r0, [sp]
 8033c9e:	a902      	add	r1, sp, #8
 8033ca0:	f7ff ff56 	bl	8033b50 <__b2d>
 8033ca4:	9800      	ldr	r0, [sp, #0]
 8033ca6:	a903      	add	r1, sp, #12
 8033ca8:	ec55 4b10 	vmov	r4, r5, d0
 8033cac:	f7ff ff50 	bl	8033b50 <__b2d>
 8033cb0:	9b01      	ldr	r3, [sp, #4]
 8033cb2:	6919      	ldr	r1, [r3, #16]
 8033cb4:	9b00      	ldr	r3, [sp, #0]
 8033cb6:	691b      	ldr	r3, [r3, #16]
 8033cb8:	1ac9      	subs	r1, r1, r3
 8033cba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8033cbe:	1a9b      	subs	r3, r3, r2
 8033cc0:	ec5b ab10 	vmov	sl, fp, d0
 8033cc4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8033cc8:	2b00      	cmp	r3, #0
 8033cca:	bfce      	itee	gt
 8033ccc:	462a      	movgt	r2, r5
 8033cce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8033cd2:	465a      	movle	r2, fp
 8033cd4:	462f      	mov	r7, r5
 8033cd6:	46d9      	mov	r9, fp
 8033cd8:	bfcc      	ite	gt
 8033cda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8033cde:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8033ce2:	464b      	mov	r3, r9
 8033ce4:	4652      	mov	r2, sl
 8033ce6:	4620      	mov	r0, r4
 8033ce8:	4639      	mov	r1, r7
 8033cea:	f7dc fdc7 	bl	801087c <__aeabi_ddiv>
 8033cee:	ec41 0b10 	vmov	d0, r0, r1
 8033cf2:	b005      	add	sp, #20
 8033cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033cf8 <__copybits>:
 8033cf8:	3901      	subs	r1, #1
 8033cfa:	b570      	push	{r4, r5, r6, lr}
 8033cfc:	1149      	asrs	r1, r1, #5
 8033cfe:	6914      	ldr	r4, [r2, #16]
 8033d00:	3101      	adds	r1, #1
 8033d02:	f102 0314 	add.w	r3, r2, #20
 8033d06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8033d0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8033d0e:	1f05      	subs	r5, r0, #4
 8033d10:	42a3      	cmp	r3, r4
 8033d12:	d30c      	bcc.n	8033d2e <__copybits+0x36>
 8033d14:	1aa3      	subs	r3, r4, r2
 8033d16:	3b11      	subs	r3, #17
 8033d18:	f023 0303 	bic.w	r3, r3, #3
 8033d1c:	3211      	adds	r2, #17
 8033d1e:	42a2      	cmp	r2, r4
 8033d20:	bf88      	it	hi
 8033d22:	2300      	movhi	r3, #0
 8033d24:	4418      	add	r0, r3
 8033d26:	2300      	movs	r3, #0
 8033d28:	4288      	cmp	r0, r1
 8033d2a:	d305      	bcc.n	8033d38 <__copybits+0x40>
 8033d2c:	bd70      	pop	{r4, r5, r6, pc}
 8033d2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8033d32:	f845 6f04 	str.w	r6, [r5, #4]!
 8033d36:	e7eb      	b.n	8033d10 <__copybits+0x18>
 8033d38:	f840 3b04 	str.w	r3, [r0], #4
 8033d3c:	e7f4      	b.n	8033d28 <__copybits+0x30>

08033d3e <__any_on>:
 8033d3e:	f100 0214 	add.w	r2, r0, #20
 8033d42:	6900      	ldr	r0, [r0, #16]
 8033d44:	114b      	asrs	r3, r1, #5
 8033d46:	4298      	cmp	r0, r3
 8033d48:	b510      	push	{r4, lr}
 8033d4a:	db11      	blt.n	8033d70 <__any_on+0x32>
 8033d4c:	dd0a      	ble.n	8033d64 <__any_on+0x26>
 8033d4e:	f011 011f 	ands.w	r1, r1, #31
 8033d52:	d007      	beq.n	8033d64 <__any_on+0x26>
 8033d54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8033d58:	fa24 f001 	lsr.w	r0, r4, r1
 8033d5c:	fa00 f101 	lsl.w	r1, r0, r1
 8033d60:	428c      	cmp	r4, r1
 8033d62:	d10b      	bne.n	8033d7c <__any_on+0x3e>
 8033d64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033d68:	4293      	cmp	r3, r2
 8033d6a:	d803      	bhi.n	8033d74 <__any_on+0x36>
 8033d6c:	2000      	movs	r0, #0
 8033d6e:	bd10      	pop	{r4, pc}
 8033d70:	4603      	mov	r3, r0
 8033d72:	e7f7      	b.n	8033d64 <__any_on+0x26>
 8033d74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033d78:	2900      	cmp	r1, #0
 8033d7a:	d0f5      	beq.n	8033d68 <__any_on+0x2a>
 8033d7c:	2001      	movs	r0, #1
 8033d7e:	e7f6      	b.n	8033d6e <__any_on+0x30>

08033d80 <realloc>:
 8033d80:	4b02      	ldr	r3, [pc, #8]	@ (8033d8c <realloc+0xc>)
 8033d82:	460a      	mov	r2, r1
 8033d84:	4601      	mov	r1, r0
 8033d86:	6818      	ldr	r0, [r3, #0]
 8033d88:	f000 b890 	b.w	8033eac <_realloc_r>
 8033d8c:	200002d8 	.word	0x200002d8

08033d90 <_fclose_r>:
 8033d90:	b570      	push	{r4, r5, r6, lr}
 8033d92:	4605      	mov	r5, r0
 8033d94:	460c      	mov	r4, r1
 8033d96:	b1b1      	cbz	r1, 8033dc6 <_fclose_r+0x36>
 8033d98:	b118      	cbz	r0, 8033da2 <_fclose_r+0x12>
 8033d9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033d9c:	b90b      	cbnz	r3, 8033da2 <_fclose_r+0x12>
 8033d9e:	f7f8 fb79 	bl	802c494 <__sinit>
 8033da2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033da4:	07de      	lsls	r6, r3, #31
 8033da6:	d405      	bmi.n	8033db4 <_fclose_r+0x24>
 8033da8:	89a3      	ldrh	r3, [r4, #12]
 8033daa:	0598      	lsls	r0, r3, #22
 8033dac:	d402      	bmi.n	8033db4 <_fclose_r+0x24>
 8033dae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033db0:	f7fa f84f 	bl	802de52 <__retarget_lock_acquire_recursive>
 8033db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033db8:	b943      	cbnz	r3, 8033dcc <_fclose_r+0x3c>
 8033dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033dbc:	07d9      	lsls	r1, r3, #31
 8033dbe:	d402      	bmi.n	8033dc6 <_fclose_r+0x36>
 8033dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033dc2:	f7fa f848 	bl	802de56 <__retarget_lock_release_recursive>
 8033dc6:	2600      	movs	r6, #0
 8033dc8:	4630      	mov	r0, r6
 8033dca:	bd70      	pop	{r4, r5, r6, pc}
 8033dcc:	4621      	mov	r1, r4
 8033dce:	4628      	mov	r0, r5
 8033dd0:	f7f8 f996 	bl	802c100 <__sflush_r>
 8033dd4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8033dd6:	4606      	mov	r6, r0
 8033dd8:	b133      	cbz	r3, 8033de8 <_fclose_r+0x58>
 8033dda:	69e1      	ldr	r1, [r4, #28]
 8033ddc:	4628      	mov	r0, r5
 8033dde:	4798      	blx	r3
 8033de0:	2800      	cmp	r0, #0
 8033de2:	bfb8      	it	lt
 8033de4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8033de8:	89a3      	ldrh	r3, [r4, #12]
 8033dea:	061a      	lsls	r2, r3, #24
 8033dec:	d503      	bpl.n	8033df6 <_fclose_r+0x66>
 8033dee:	6921      	ldr	r1, [r4, #16]
 8033df0:	4628      	mov	r0, r5
 8033df2:	f7fa ff33 	bl	802ec5c <_free_r>
 8033df6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8033df8:	b141      	cbz	r1, 8033e0c <_fclose_r+0x7c>
 8033dfa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8033dfe:	4299      	cmp	r1, r3
 8033e00:	d002      	beq.n	8033e08 <_fclose_r+0x78>
 8033e02:	4628      	mov	r0, r5
 8033e04:	f7fa ff2a 	bl	802ec5c <_free_r>
 8033e08:	2300      	movs	r3, #0
 8033e0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8033e0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8033e0e:	b121      	cbz	r1, 8033e1a <_fclose_r+0x8a>
 8033e10:	4628      	mov	r0, r5
 8033e12:	f7fa ff23 	bl	802ec5c <_free_r>
 8033e16:	2300      	movs	r3, #0
 8033e18:	6463      	str	r3, [r4, #68]	@ 0x44
 8033e1a:	f7f8 fb2f 	bl	802c47c <__sfp_lock_acquire>
 8033e1e:	2300      	movs	r3, #0
 8033e20:	81a3      	strh	r3, [r4, #12]
 8033e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033e24:	07db      	lsls	r3, r3, #31
 8033e26:	d402      	bmi.n	8033e2e <_fclose_r+0x9e>
 8033e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033e2a:	f7fa f814 	bl	802de56 <__retarget_lock_release_recursive>
 8033e2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033e30:	f7fa f80d 	bl	802de4e <__retarget_lock_close_recursive>
 8033e34:	f7f8 fb28 	bl	802c488 <__sfp_lock_release>
 8033e38:	e7c6      	b.n	8033dc8 <_fclose_r+0x38>

08033e3a <__sccl>:
 8033e3a:	b570      	push	{r4, r5, r6, lr}
 8033e3c:	780b      	ldrb	r3, [r1, #0]
 8033e3e:	4604      	mov	r4, r0
 8033e40:	2b5e      	cmp	r3, #94	@ 0x5e
 8033e42:	bf0b      	itete	eq
 8033e44:	784b      	ldrbeq	r3, [r1, #1]
 8033e46:	1c4a      	addne	r2, r1, #1
 8033e48:	1c8a      	addeq	r2, r1, #2
 8033e4a:	2100      	movne	r1, #0
 8033e4c:	bf08      	it	eq
 8033e4e:	2101      	moveq	r1, #1
 8033e50:	3801      	subs	r0, #1
 8033e52:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8033e56:	f800 1f01 	strb.w	r1, [r0, #1]!
 8033e5a:	42a8      	cmp	r0, r5
 8033e5c:	d1fb      	bne.n	8033e56 <__sccl+0x1c>
 8033e5e:	b90b      	cbnz	r3, 8033e64 <__sccl+0x2a>
 8033e60:	1e50      	subs	r0, r2, #1
 8033e62:	bd70      	pop	{r4, r5, r6, pc}
 8033e64:	f081 0101 	eor.w	r1, r1, #1
 8033e68:	54e1      	strb	r1, [r4, r3]
 8033e6a:	4610      	mov	r0, r2
 8033e6c:	4602      	mov	r2, r0
 8033e6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8033e72:	2d2d      	cmp	r5, #45	@ 0x2d
 8033e74:	d005      	beq.n	8033e82 <__sccl+0x48>
 8033e76:	2d5d      	cmp	r5, #93	@ 0x5d
 8033e78:	d016      	beq.n	8033ea8 <__sccl+0x6e>
 8033e7a:	2d00      	cmp	r5, #0
 8033e7c:	d0f1      	beq.n	8033e62 <__sccl+0x28>
 8033e7e:	462b      	mov	r3, r5
 8033e80:	e7f2      	b.n	8033e68 <__sccl+0x2e>
 8033e82:	7846      	ldrb	r6, [r0, #1]
 8033e84:	2e5d      	cmp	r6, #93	@ 0x5d
 8033e86:	d0fa      	beq.n	8033e7e <__sccl+0x44>
 8033e88:	42b3      	cmp	r3, r6
 8033e8a:	dcf8      	bgt.n	8033e7e <__sccl+0x44>
 8033e8c:	3002      	adds	r0, #2
 8033e8e:	461a      	mov	r2, r3
 8033e90:	3201      	adds	r2, #1
 8033e92:	4296      	cmp	r6, r2
 8033e94:	54a1      	strb	r1, [r4, r2]
 8033e96:	dcfb      	bgt.n	8033e90 <__sccl+0x56>
 8033e98:	1af2      	subs	r2, r6, r3
 8033e9a:	3a01      	subs	r2, #1
 8033e9c:	1c5d      	adds	r5, r3, #1
 8033e9e:	42b3      	cmp	r3, r6
 8033ea0:	bfa8      	it	ge
 8033ea2:	2200      	movge	r2, #0
 8033ea4:	18ab      	adds	r3, r5, r2
 8033ea6:	e7e1      	b.n	8033e6c <__sccl+0x32>
 8033ea8:	4610      	mov	r0, r2
 8033eaa:	e7da      	b.n	8033e62 <__sccl+0x28>

08033eac <_realloc_r>:
 8033eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033eb0:	4682      	mov	sl, r0
 8033eb2:	4693      	mov	fp, r2
 8033eb4:	460c      	mov	r4, r1
 8033eb6:	b929      	cbnz	r1, 8033ec4 <_realloc_r+0x18>
 8033eb8:	4611      	mov	r1, r2
 8033eba:	b003      	add	sp, #12
 8033ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033ec0:	f7fa bfe4 	b.w	802ee8c <_malloc_r>
 8033ec4:	f7ff faec 	bl	80334a0 <__malloc_lock>
 8033ec8:	f10b 080b 	add.w	r8, fp, #11
 8033ecc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8033ed0:	f1b8 0f16 	cmp.w	r8, #22
 8033ed4:	f1a4 0908 	sub.w	r9, r4, #8
 8033ed8:	f025 0603 	bic.w	r6, r5, #3
 8033edc:	d908      	bls.n	8033ef0 <_realloc_r+0x44>
 8033ede:	f038 0807 	bics.w	r8, r8, #7
 8033ee2:	d507      	bpl.n	8033ef4 <_realloc_r+0x48>
 8033ee4:	230c      	movs	r3, #12
 8033ee6:	f8ca 3000 	str.w	r3, [sl]
 8033eea:	f04f 0b00 	mov.w	fp, #0
 8033eee:	e032      	b.n	8033f56 <_realloc_r+0xaa>
 8033ef0:	f04f 0810 	mov.w	r8, #16
 8033ef4:	45c3      	cmp	fp, r8
 8033ef6:	d8f5      	bhi.n	8033ee4 <_realloc_r+0x38>
 8033ef8:	4546      	cmp	r6, r8
 8033efa:	f280 8174 	bge.w	80341e6 <_realloc_r+0x33a>
 8033efe:	4b9e      	ldr	r3, [pc, #632]	@ (8034178 <_realloc_r+0x2cc>)
 8033f00:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8033f04:	eb09 0106 	add.w	r1, r9, r6
 8033f08:	458c      	cmp	ip, r1
 8033f0a:	6848      	ldr	r0, [r1, #4]
 8033f0c:	d005      	beq.n	8033f1a <_realloc_r+0x6e>
 8033f0e:	f020 0201 	bic.w	r2, r0, #1
 8033f12:	440a      	add	r2, r1
 8033f14:	6852      	ldr	r2, [r2, #4]
 8033f16:	07d7      	lsls	r7, r2, #31
 8033f18:	d449      	bmi.n	8033fae <_realloc_r+0x102>
 8033f1a:	f020 0003 	bic.w	r0, r0, #3
 8033f1e:	458c      	cmp	ip, r1
 8033f20:	eb06 0700 	add.w	r7, r6, r0
 8033f24:	d11b      	bne.n	8033f5e <_realloc_r+0xb2>
 8033f26:	f108 0210 	add.w	r2, r8, #16
 8033f2a:	42ba      	cmp	r2, r7
 8033f2c:	dc41      	bgt.n	8033fb2 <_realloc_r+0x106>
 8033f2e:	eb09 0208 	add.w	r2, r9, r8
 8033f32:	eba7 0708 	sub.w	r7, r7, r8
 8033f36:	f047 0701 	orr.w	r7, r7, #1
 8033f3a:	609a      	str	r2, [r3, #8]
 8033f3c:	6057      	str	r7, [r2, #4]
 8033f3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8033f42:	f003 0301 	and.w	r3, r3, #1
 8033f46:	ea43 0308 	orr.w	r3, r3, r8
 8033f4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8033f4e:	4650      	mov	r0, sl
 8033f50:	f7ff faac 	bl	80334ac <__malloc_unlock>
 8033f54:	46a3      	mov	fp, r4
 8033f56:	4658      	mov	r0, fp
 8033f58:	b003      	add	sp, #12
 8033f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033f5e:	45b8      	cmp	r8, r7
 8033f60:	dc27      	bgt.n	8033fb2 <_realloc_r+0x106>
 8033f62:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033f66:	60d3      	str	r3, [r2, #12]
 8033f68:	609a      	str	r2, [r3, #8]
 8033f6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8033f6e:	eba7 0008 	sub.w	r0, r7, r8
 8033f72:	280f      	cmp	r0, #15
 8033f74:	f003 0301 	and.w	r3, r3, #1
 8033f78:	eb09 0207 	add.w	r2, r9, r7
 8033f7c:	f240 8135 	bls.w	80341ea <_realloc_r+0x33e>
 8033f80:	eb09 0108 	add.w	r1, r9, r8
 8033f84:	ea48 0303 	orr.w	r3, r8, r3
 8033f88:	f040 0001 	orr.w	r0, r0, #1
 8033f8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8033f90:	6048      	str	r0, [r1, #4]
 8033f92:	6853      	ldr	r3, [r2, #4]
 8033f94:	f043 0301 	orr.w	r3, r3, #1
 8033f98:	6053      	str	r3, [r2, #4]
 8033f9a:	3108      	adds	r1, #8
 8033f9c:	4650      	mov	r0, sl
 8033f9e:	f7fa fe5d 	bl	802ec5c <_free_r>
 8033fa2:	4650      	mov	r0, sl
 8033fa4:	f7ff fa82 	bl	80334ac <__malloc_unlock>
 8033fa8:	f109 0b08 	add.w	fp, r9, #8
 8033fac:	e7d3      	b.n	8033f56 <_realloc_r+0xaa>
 8033fae:	2000      	movs	r0, #0
 8033fb0:	4601      	mov	r1, r0
 8033fb2:	07ea      	lsls	r2, r5, #31
 8033fb4:	f100 80c7 	bmi.w	8034146 <_realloc_r+0x29a>
 8033fb8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8033fbc:	eba9 0505 	sub.w	r5, r9, r5
 8033fc0:	686a      	ldr	r2, [r5, #4]
 8033fc2:	f022 0203 	bic.w	r2, r2, #3
 8033fc6:	4432      	add	r2, r6
 8033fc8:	9201      	str	r2, [sp, #4]
 8033fca:	2900      	cmp	r1, #0
 8033fcc:	f000 8086 	beq.w	80340dc <_realloc_r+0x230>
 8033fd0:	458c      	cmp	ip, r1
 8033fd2:	eb00 0702 	add.w	r7, r0, r2
 8033fd6:	d149      	bne.n	803406c <_realloc_r+0x1c0>
 8033fd8:	f108 0210 	add.w	r2, r8, #16
 8033fdc:	42ba      	cmp	r2, r7
 8033fde:	dc7d      	bgt.n	80340dc <_realloc_r+0x230>
 8033fe0:	46ab      	mov	fp, r5
 8033fe2:	68ea      	ldr	r2, [r5, #12]
 8033fe4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8033fe8:	60ca      	str	r2, [r1, #12]
 8033fea:	6091      	str	r1, [r2, #8]
 8033fec:	1f32      	subs	r2, r6, #4
 8033fee:	2a24      	cmp	r2, #36	@ 0x24
 8033ff0:	d836      	bhi.n	8034060 <_realloc_r+0x1b4>
 8033ff2:	2a13      	cmp	r2, #19
 8033ff4:	d932      	bls.n	803405c <_realloc_r+0x1b0>
 8033ff6:	6821      	ldr	r1, [r4, #0]
 8033ff8:	60a9      	str	r1, [r5, #8]
 8033ffa:	6861      	ldr	r1, [r4, #4]
 8033ffc:	60e9      	str	r1, [r5, #12]
 8033ffe:	2a1b      	cmp	r2, #27
 8034000:	d81a      	bhi.n	8034038 <_realloc_r+0x18c>
 8034002:	3408      	adds	r4, #8
 8034004:	f105 0210 	add.w	r2, r5, #16
 8034008:	6821      	ldr	r1, [r4, #0]
 803400a:	6011      	str	r1, [r2, #0]
 803400c:	6861      	ldr	r1, [r4, #4]
 803400e:	6051      	str	r1, [r2, #4]
 8034010:	68a1      	ldr	r1, [r4, #8]
 8034012:	6091      	str	r1, [r2, #8]
 8034014:	eb05 0208 	add.w	r2, r5, r8
 8034018:	eba7 0708 	sub.w	r7, r7, r8
 803401c:	f047 0701 	orr.w	r7, r7, #1
 8034020:	609a      	str	r2, [r3, #8]
 8034022:	6057      	str	r7, [r2, #4]
 8034024:	686b      	ldr	r3, [r5, #4]
 8034026:	f003 0301 	and.w	r3, r3, #1
 803402a:	ea43 0308 	orr.w	r3, r3, r8
 803402e:	606b      	str	r3, [r5, #4]
 8034030:	4650      	mov	r0, sl
 8034032:	f7ff fa3b 	bl	80334ac <__malloc_unlock>
 8034036:	e78e      	b.n	8033f56 <_realloc_r+0xaa>
 8034038:	68a1      	ldr	r1, [r4, #8]
 803403a:	6129      	str	r1, [r5, #16]
 803403c:	68e1      	ldr	r1, [r4, #12]
 803403e:	6169      	str	r1, [r5, #20]
 8034040:	2a24      	cmp	r2, #36	@ 0x24
 8034042:	bf01      	itttt	eq
 8034044:	6922      	ldreq	r2, [r4, #16]
 8034046:	61aa      	streq	r2, [r5, #24]
 8034048:	6961      	ldreq	r1, [r4, #20]
 803404a:	61e9      	streq	r1, [r5, #28]
 803404c:	bf19      	ittee	ne
 803404e:	3410      	addne	r4, #16
 8034050:	f105 0218 	addne.w	r2, r5, #24
 8034054:	f105 0220 	addeq.w	r2, r5, #32
 8034058:	3418      	addeq	r4, #24
 803405a:	e7d5      	b.n	8034008 <_realloc_r+0x15c>
 803405c:	465a      	mov	r2, fp
 803405e:	e7d3      	b.n	8034008 <_realloc_r+0x15c>
 8034060:	4621      	mov	r1, r4
 8034062:	4658      	mov	r0, fp
 8034064:	f7f8 fca2 	bl	802c9ac <memmove>
 8034068:	4b43      	ldr	r3, [pc, #268]	@ (8034178 <_realloc_r+0x2cc>)
 803406a:	e7d3      	b.n	8034014 <_realloc_r+0x168>
 803406c:	45b8      	cmp	r8, r7
 803406e:	dc35      	bgt.n	80340dc <_realloc_r+0x230>
 8034070:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8034074:	4628      	mov	r0, r5
 8034076:	60d3      	str	r3, [r2, #12]
 8034078:	609a      	str	r2, [r3, #8]
 803407a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803407e:	68eb      	ldr	r3, [r5, #12]
 8034080:	60d3      	str	r3, [r2, #12]
 8034082:	609a      	str	r2, [r3, #8]
 8034084:	1f32      	subs	r2, r6, #4
 8034086:	2a24      	cmp	r2, #36	@ 0x24
 8034088:	d824      	bhi.n	80340d4 <_realloc_r+0x228>
 803408a:	2a13      	cmp	r2, #19
 803408c:	d908      	bls.n	80340a0 <_realloc_r+0x1f4>
 803408e:	6823      	ldr	r3, [r4, #0]
 8034090:	60ab      	str	r3, [r5, #8]
 8034092:	6863      	ldr	r3, [r4, #4]
 8034094:	60eb      	str	r3, [r5, #12]
 8034096:	2a1b      	cmp	r2, #27
 8034098:	d80a      	bhi.n	80340b0 <_realloc_r+0x204>
 803409a:	3408      	adds	r4, #8
 803409c:	f105 0010 	add.w	r0, r5, #16
 80340a0:	6823      	ldr	r3, [r4, #0]
 80340a2:	6003      	str	r3, [r0, #0]
 80340a4:	6863      	ldr	r3, [r4, #4]
 80340a6:	6043      	str	r3, [r0, #4]
 80340a8:	68a3      	ldr	r3, [r4, #8]
 80340aa:	6083      	str	r3, [r0, #8]
 80340ac:	46a9      	mov	r9, r5
 80340ae:	e75c      	b.n	8033f6a <_realloc_r+0xbe>
 80340b0:	68a3      	ldr	r3, [r4, #8]
 80340b2:	612b      	str	r3, [r5, #16]
 80340b4:	68e3      	ldr	r3, [r4, #12]
 80340b6:	616b      	str	r3, [r5, #20]
 80340b8:	2a24      	cmp	r2, #36	@ 0x24
 80340ba:	bf01      	itttt	eq
 80340bc:	6923      	ldreq	r3, [r4, #16]
 80340be:	61ab      	streq	r3, [r5, #24]
 80340c0:	6963      	ldreq	r3, [r4, #20]
 80340c2:	61eb      	streq	r3, [r5, #28]
 80340c4:	bf19      	ittee	ne
 80340c6:	3410      	addne	r4, #16
 80340c8:	f105 0018 	addne.w	r0, r5, #24
 80340cc:	f105 0020 	addeq.w	r0, r5, #32
 80340d0:	3418      	addeq	r4, #24
 80340d2:	e7e5      	b.n	80340a0 <_realloc_r+0x1f4>
 80340d4:	4621      	mov	r1, r4
 80340d6:	f7f8 fc69 	bl	802c9ac <memmove>
 80340da:	e7e7      	b.n	80340ac <_realloc_r+0x200>
 80340dc:	9b01      	ldr	r3, [sp, #4]
 80340de:	4598      	cmp	r8, r3
 80340e0:	dc31      	bgt.n	8034146 <_realloc_r+0x29a>
 80340e2:	4628      	mov	r0, r5
 80340e4:	68eb      	ldr	r3, [r5, #12]
 80340e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80340ea:	60d3      	str	r3, [r2, #12]
 80340ec:	609a      	str	r2, [r3, #8]
 80340ee:	1f32      	subs	r2, r6, #4
 80340f0:	2a24      	cmp	r2, #36	@ 0x24
 80340f2:	d824      	bhi.n	803413e <_realloc_r+0x292>
 80340f4:	2a13      	cmp	r2, #19
 80340f6:	d908      	bls.n	803410a <_realloc_r+0x25e>
 80340f8:	6823      	ldr	r3, [r4, #0]
 80340fa:	60ab      	str	r3, [r5, #8]
 80340fc:	6863      	ldr	r3, [r4, #4]
 80340fe:	60eb      	str	r3, [r5, #12]
 8034100:	2a1b      	cmp	r2, #27
 8034102:	d80a      	bhi.n	803411a <_realloc_r+0x26e>
 8034104:	3408      	adds	r4, #8
 8034106:	f105 0010 	add.w	r0, r5, #16
 803410a:	6823      	ldr	r3, [r4, #0]
 803410c:	6003      	str	r3, [r0, #0]
 803410e:	6863      	ldr	r3, [r4, #4]
 8034110:	6043      	str	r3, [r0, #4]
 8034112:	68a3      	ldr	r3, [r4, #8]
 8034114:	6083      	str	r3, [r0, #8]
 8034116:	9f01      	ldr	r7, [sp, #4]
 8034118:	e7c8      	b.n	80340ac <_realloc_r+0x200>
 803411a:	68a3      	ldr	r3, [r4, #8]
 803411c:	612b      	str	r3, [r5, #16]
 803411e:	68e3      	ldr	r3, [r4, #12]
 8034120:	616b      	str	r3, [r5, #20]
 8034122:	2a24      	cmp	r2, #36	@ 0x24
 8034124:	bf01      	itttt	eq
 8034126:	6923      	ldreq	r3, [r4, #16]
 8034128:	61ab      	streq	r3, [r5, #24]
 803412a:	6963      	ldreq	r3, [r4, #20]
 803412c:	61eb      	streq	r3, [r5, #28]
 803412e:	bf19      	ittee	ne
 8034130:	3410      	addne	r4, #16
 8034132:	f105 0018 	addne.w	r0, r5, #24
 8034136:	f105 0020 	addeq.w	r0, r5, #32
 803413a:	3418      	addeq	r4, #24
 803413c:	e7e5      	b.n	803410a <_realloc_r+0x25e>
 803413e:	4621      	mov	r1, r4
 8034140:	f7f8 fc34 	bl	802c9ac <memmove>
 8034144:	e7e7      	b.n	8034116 <_realloc_r+0x26a>
 8034146:	4659      	mov	r1, fp
 8034148:	4650      	mov	r0, sl
 803414a:	f7fa fe9f 	bl	802ee8c <_malloc_r>
 803414e:	4683      	mov	fp, r0
 8034150:	b918      	cbnz	r0, 803415a <_realloc_r+0x2ae>
 8034152:	4650      	mov	r0, sl
 8034154:	f7ff f9aa 	bl	80334ac <__malloc_unlock>
 8034158:	e6c7      	b.n	8033eea <_realloc_r+0x3e>
 803415a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803415e:	f023 0301 	bic.w	r3, r3, #1
 8034162:	444b      	add	r3, r9
 8034164:	f1a0 0208 	sub.w	r2, r0, #8
 8034168:	4293      	cmp	r3, r2
 803416a:	d107      	bne.n	803417c <_realloc_r+0x2d0>
 803416c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8034170:	f027 0703 	bic.w	r7, r7, #3
 8034174:	4437      	add	r7, r6
 8034176:	e6f8      	b.n	8033f6a <_realloc_r+0xbe>
 8034178:	2000040c 	.word	0x2000040c
 803417c:	1f32      	subs	r2, r6, #4
 803417e:	2a24      	cmp	r2, #36	@ 0x24
 8034180:	d82d      	bhi.n	80341de <_realloc_r+0x332>
 8034182:	2a13      	cmp	r2, #19
 8034184:	d928      	bls.n	80341d8 <_realloc_r+0x32c>
 8034186:	6823      	ldr	r3, [r4, #0]
 8034188:	6003      	str	r3, [r0, #0]
 803418a:	6863      	ldr	r3, [r4, #4]
 803418c:	6043      	str	r3, [r0, #4]
 803418e:	2a1b      	cmp	r2, #27
 8034190:	d80e      	bhi.n	80341b0 <_realloc_r+0x304>
 8034192:	f104 0208 	add.w	r2, r4, #8
 8034196:	f100 0308 	add.w	r3, r0, #8
 803419a:	6811      	ldr	r1, [r2, #0]
 803419c:	6019      	str	r1, [r3, #0]
 803419e:	6851      	ldr	r1, [r2, #4]
 80341a0:	6059      	str	r1, [r3, #4]
 80341a2:	6892      	ldr	r2, [r2, #8]
 80341a4:	609a      	str	r2, [r3, #8]
 80341a6:	4621      	mov	r1, r4
 80341a8:	4650      	mov	r0, sl
 80341aa:	f7fa fd57 	bl	802ec5c <_free_r>
 80341ae:	e73f      	b.n	8034030 <_realloc_r+0x184>
 80341b0:	68a3      	ldr	r3, [r4, #8]
 80341b2:	6083      	str	r3, [r0, #8]
 80341b4:	68e3      	ldr	r3, [r4, #12]
 80341b6:	60c3      	str	r3, [r0, #12]
 80341b8:	2a24      	cmp	r2, #36	@ 0x24
 80341ba:	bf01      	itttt	eq
 80341bc:	6923      	ldreq	r3, [r4, #16]
 80341be:	6103      	streq	r3, [r0, #16]
 80341c0:	6961      	ldreq	r1, [r4, #20]
 80341c2:	6141      	streq	r1, [r0, #20]
 80341c4:	bf19      	ittee	ne
 80341c6:	f104 0210 	addne.w	r2, r4, #16
 80341ca:	f100 0310 	addne.w	r3, r0, #16
 80341ce:	f104 0218 	addeq.w	r2, r4, #24
 80341d2:	f100 0318 	addeq.w	r3, r0, #24
 80341d6:	e7e0      	b.n	803419a <_realloc_r+0x2ee>
 80341d8:	4603      	mov	r3, r0
 80341da:	4622      	mov	r2, r4
 80341dc:	e7dd      	b.n	803419a <_realloc_r+0x2ee>
 80341de:	4621      	mov	r1, r4
 80341e0:	f7f8 fbe4 	bl	802c9ac <memmove>
 80341e4:	e7df      	b.n	80341a6 <_realloc_r+0x2fa>
 80341e6:	4637      	mov	r7, r6
 80341e8:	e6bf      	b.n	8033f6a <_realloc_r+0xbe>
 80341ea:	431f      	orrs	r7, r3
 80341ec:	f8c9 7004 	str.w	r7, [r9, #4]
 80341f0:	6853      	ldr	r3, [r2, #4]
 80341f2:	f043 0301 	orr.w	r3, r3, #1
 80341f6:	6053      	str	r3, [r2, #4]
 80341f8:	e6d3      	b.n	8033fa2 <_realloc_r+0xf6>
 80341fa:	bf00      	nop

080341fc <sulp>:
 80341fc:	b570      	push	{r4, r5, r6, lr}
 80341fe:	4604      	mov	r4, r0
 8034200:	460d      	mov	r5, r1
 8034202:	ec45 4b10 	vmov	d0, r4, r5
 8034206:	4616      	mov	r6, r2
 8034208:	f7ff fc7c 	bl	8033b04 <__ulp>
 803420c:	ec51 0b10 	vmov	r0, r1, d0
 8034210:	b17e      	cbz	r6, 8034232 <sulp+0x36>
 8034212:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8034216:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803421a:	2b00      	cmp	r3, #0
 803421c:	dd09      	ble.n	8034232 <sulp+0x36>
 803421e:	051b      	lsls	r3, r3, #20
 8034220:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8034224:	2400      	movs	r4, #0
 8034226:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803422a:	4622      	mov	r2, r4
 803422c:	462b      	mov	r3, r5
 803422e:	f7dc f9fb 	bl	8010628 <__aeabi_dmul>
 8034232:	ec41 0b10 	vmov	d0, r0, r1
 8034236:	bd70      	pop	{r4, r5, r6, pc}

08034238 <_strtod_l>:
 8034238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803423c:	b09f      	sub	sp, #124	@ 0x7c
 803423e:	460c      	mov	r4, r1
 8034240:	9217      	str	r2, [sp, #92]	@ 0x5c
 8034242:	2200      	movs	r2, #0
 8034244:	921a      	str	r2, [sp, #104]	@ 0x68
 8034246:	9005      	str	r0, [sp, #20]
 8034248:	f04f 0a00 	mov.w	sl, #0
 803424c:	f04f 0b00 	mov.w	fp, #0
 8034250:	460a      	mov	r2, r1
 8034252:	9219      	str	r2, [sp, #100]	@ 0x64
 8034254:	7811      	ldrb	r1, [r2, #0]
 8034256:	292b      	cmp	r1, #43	@ 0x2b
 8034258:	d04a      	beq.n	80342f0 <_strtod_l+0xb8>
 803425a:	d838      	bhi.n	80342ce <_strtod_l+0x96>
 803425c:	290d      	cmp	r1, #13
 803425e:	d832      	bhi.n	80342c6 <_strtod_l+0x8e>
 8034260:	2908      	cmp	r1, #8
 8034262:	d832      	bhi.n	80342ca <_strtod_l+0x92>
 8034264:	2900      	cmp	r1, #0
 8034266:	d03b      	beq.n	80342e0 <_strtod_l+0xa8>
 8034268:	2200      	movs	r2, #0
 803426a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803426c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803426e:	782a      	ldrb	r2, [r5, #0]
 8034270:	2a30      	cmp	r2, #48	@ 0x30
 8034272:	f040 80b3 	bne.w	80343dc <_strtod_l+0x1a4>
 8034276:	786a      	ldrb	r2, [r5, #1]
 8034278:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803427c:	2a58      	cmp	r2, #88	@ 0x58
 803427e:	d16e      	bne.n	803435e <_strtod_l+0x126>
 8034280:	9302      	str	r3, [sp, #8]
 8034282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034284:	9301      	str	r3, [sp, #4]
 8034286:	ab1a      	add	r3, sp, #104	@ 0x68
 8034288:	9300      	str	r3, [sp, #0]
 803428a:	4a8e      	ldr	r2, [pc, #568]	@ (80344c4 <_strtod_l+0x28c>)
 803428c:	9805      	ldr	r0, [sp, #20]
 803428e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034290:	a919      	add	r1, sp, #100	@ 0x64
 8034292:	f001 fa51 	bl	8035738 <__gethex>
 8034296:	f010 060f 	ands.w	r6, r0, #15
 803429a:	4604      	mov	r4, r0
 803429c:	d005      	beq.n	80342aa <_strtod_l+0x72>
 803429e:	2e06      	cmp	r6, #6
 80342a0:	d128      	bne.n	80342f4 <_strtod_l+0xbc>
 80342a2:	3501      	adds	r5, #1
 80342a4:	2300      	movs	r3, #0
 80342a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80342a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80342aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80342ac:	2b00      	cmp	r3, #0
 80342ae:	f040 858e 	bne.w	8034dce <_strtod_l+0xb96>
 80342b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80342b4:	b1cb      	cbz	r3, 80342ea <_strtod_l+0xb2>
 80342b6:	4652      	mov	r2, sl
 80342b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80342bc:	ec43 2b10 	vmov	d0, r2, r3
 80342c0:	b01f      	add	sp, #124	@ 0x7c
 80342c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80342c6:	2920      	cmp	r1, #32
 80342c8:	d1ce      	bne.n	8034268 <_strtod_l+0x30>
 80342ca:	3201      	adds	r2, #1
 80342cc:	e7c1      	b.n	8034252 <_strtod_l+0x1a>
 80342ce:	292d      	cmp	r1, #45	@ 0x2d
 80342d0:	d1ca      	bne.n	8034268 <_strtod_l+0x30>
 80342d2:	2101      	movs	r1, #1
 80342d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80342d6:	1c51      	adds	r1, r2, #1
 80342d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80342da:	7852      	ldrb	r2, [r2, #1]
 80342dc:	2a00      	cmp	r2, #0
 80342de:	d1c5      	bne.n	803426c <_strtod_l+0x34>
 80342e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80342e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80342e4:	2b00      	cmp	r3, #0
 80342e6:	f040 8570 	bne.w	8034dca <_strtod_l+0xb92>
 80342ea:	4652      	mov	r2, sl
 80342ec:	465b      	mov	r3, fp
 80342ee:	e7e5      	b.n	80342bc <_strtod_l+0x84>
 80342f0:	2100      	movs	r1, #0
 80342f2:	e7ef      	b.n	80342d4 <_strtod_l+0x9c>
 80342f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80342f6:	b13a      	cbz	r2, 8034308 <_strtod_l+0xd0>
 80342f8:	2135      	movs	r1, #53	@ 0x35
 80342fa:	a81c      	add	r0, sp, #112	@ 0x70
 80342fc:	f7ff fcfc 	bl	8033cf8 <__copybits>
 8034300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034302:	9805      	ldr	r0, [sp, #20]
 8034304:	f7ff f8fd 	bl	8033502 <_Bfree>
 8034308:	3e01      	subs	r6, #1
 803430a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803430c:	2e04      	cmp	r6, #4
 803430e:	d806      	bhi.n	803431e <_strtod_l+0xe6>
 8034310:	e8df f006 	tbb	[pc, r6]
 8034314:	201d0314 	.word	0x201d0314
 8034318:	14          	.byte	0x14
 8034319:	00          	.byte	0x00
 803431a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803431e:	05e1      	lsls	r1, r4, #23
 8034320:	bf48      	it	mi
 8034322:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8034326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803432a:	0d1b      	lsrs	r3, r3, #20
 803432c:	051b      	lsls	r3, r3, #20
 803432e:	2b00      	cmp	r3, #0
 8034330:	d1bb      	bne.n	80342aa <_strtod_l+0x72>
 8034332:	f7f9 fd59 	bl	802dde8 <__errno>
 8034336:	2322      	movs	r3, #34	@ 0x22
 8034338:	6003      	str	r3, [r0, #0]
 803433a:	e7b6      	b.n	80342aa <_strtod_l+0x72>
 803433c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8034340:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8034344:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8034348:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803434c:	e7e7      	b.n	803431e <_strtod_l+0xe6>
 803434e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80344cc <_strtod_l+0x294>
 8034352:	e7e4      	b.n	803431e <_strtod_l+0xe6>
 8034354:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8034358:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803435c:	e7df      	b.n	803431e <_strtod_l+0xe6>
 803435e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034360:	1c5a      	adds	r2, r3, #1
 8034362:	9219      	str	r2, [sp, #100]	@ 0x64
 8034364:	785b      	ldrb	r3, [r3, #1]
 8034366:	2b30      	cmp	r3, #48	@ 0x30
 8034368:	d0f9      	beq.n	803435e <_strtod_l+0x126>
 803436a:	2b00      	cmp	r3, #0
 803436c:	d09d      	beq.n	80342aa <_strtod_l+0x72>
 803436e:	2301      	movs	r3, #1
 8034370:	9309      	str	r3, [sp, #36]	@ 0x24
 8034372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034374:	930c      	str	r3, [sp, #48]	@ 0x30
 8034376:	2300      	movs	r3, #0
 8034378:	9308      	str	r3, [sp, #32]
 803437a:	930a      	str	r3, [sp, #40]	@ 0x28
 803437c:	461f      	mov	r7, r3
 803437e:	220a      	movs	r2, #10
 8034380:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034382:	7805      	ldrb	r5, [r0, #0]
 8034384:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034388:	b2d9      	uxtb	r1, r3
 803438a:	2909      	cmp	r1, #9
 803438c:	d928      	bls.n	80343e0 <_strtod_l+0x1a8>
 803438e:	494e      	ldr	r1, [pc, #312]	@ (80344c8 <_strtod_l+0x290>)
 8034390:	2201      	movs	r2, #1
 8034392:	f7f8 fb5a 	bl	802ca4a <strncmp>
 8034396:	2800      	cmp	r0, #0
 8034398:	d032      	beq.n	8034400 <_strtod_l+0x1c8>
 803439a:	2000      	movs	r0, #0
 803439c:	462a      	mov	r2, r5
 803439e:	4681      	mov	r9, r0
 80343a0:	463d      	mov	r5, r7
 80343a2:	4603      	mov	r3, r0
 80343a4:	2a65      	cmp	r2, #101	@ 0x65
 80343a6:	d001      	beq.n	80343ac <_strtod_l+0x174>
 80343a8:	2a45      	cmp	r2, #69	@ 0x45
 80343aa:	d114      	bne.n	80343d6 <_strtod_l+0x19e>
 80343ac:	b91d      	cbnz	r5, 80343b6 <_strtod_l+0x17e>
 80343ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80343b0:	4302      	orrs	r2, r0
 80343b2:	d095      	beq.n	80342e0 <_strtod_l+0xa8>
 80343b4:	2500      	movs	r5, #0
 80343b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80343b8:	1c62      	adds	r2, r4, #1
 80343ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80343bc:	7862      	ldrb	r2, [r4, #1]
 80343be:	2a2b      	cmp	r2, #43	@ 0x2b
 80343c0:	d077      	beq.n	80344b2 <_strtod_l+0x27a>
 80343c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80343c4:	d07b      	beq.n	80344be <_strtod_l+0x286>
 80343c6:	f04f 0c00 	mov.w	ip, #0
 80343ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80343ce:	2909      	cmp	r1, #9
 80343d0:	f240 8082 	bls.w	80344d8 <_strtod_l+0x2a0>
 80343d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80343d6:	f04f 0800 	mov.w	r8, #0
 80343da:	e0a2      	b.n	8034522 <_strtod_l+0x2ea>
 80343dc:	2300      	movs	r3, #0
 80343de:	e7c7      	b.n	8034370 <_strtod_l+0x138>
 80343e0:	2f08      	cmp	r7, #8
 80343e2:	bfd5      	itete	le
 80343e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80343e6:	9908      	ldrgt	r1, [sp, #32]
 80343e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80343ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80343f0:	f100 0001 	add.w	r0, r0, #1
 80343f4:	bfd4      	ite	le
 80343f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80343f8:	9308      	strgt	r3, [sp, #32]
 80343fa:	3701      	adds	r7, #1
 80343fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80343fe:	e7bf      	b.n	8034380 <_strtod_l+0x148>
 8034400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034402:	1c5a      	adds	r2, r3, #1
 8034404:	9219      	str	r2, [sp, #100]	@ 0x64
 8034406:	785a      	ldrb	r2, [r3, #1]
 8034408:	b37f      	cbz	r7, 803446a <_strtod_l+0x232>
 803440a:	4681      	mov	r9, r0
 803440c:	463d      	mov	r5, r7
 803440e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8034412:	2b09      	cmp	r3, #9
 8034414:	d912      	bls.n	803443c <_strtod_l+0x204>
 8034416:	2301      	movs	r3, #1
 8034418:	e7c4      	b.n	80343a4 <_strtod_l+0x16c>
 803441a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803441c:	1c5a      	adds	r2, r3, #1
 803441e:	9219      	str	r2, [sp, #100]	@ 0x64
 8034420:	785a      	ldrb	r2, [r3, #1]
 8034422:	3001      	adds	r0, #1
 8034424:	2a30      	cmp	r2, #48	@ 0x30
 8034426:	d0f8      	beq.n	803441a <_strtod_l+0x1e2>
 8034428:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803442c:	2b08      	cmp	r3, #8
 803442e:	f200 84d3 	bhi.w	8034dd8 <_strtod_l+0xba0>
 8034432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034434:	930c      	str	r3, [sp, #48]	@ 0x30
 8034436:	4681      	mov	r9, r0
 8034438:	2000      	movs	r0, #0
 803443a:	4605      	mov	r5, r0
 803443c:	3a30      	subs	r2, #48	@ 0x30
 803443e:	f100 0301 	add.w	r3, r0, #1
 8034442:	d02a      	beq.n	803449a <_strtod_l+0x262>
 8034444:	4499      	add	r9, r3
 8034446:	eb00 0c05 	add.w	ip, r0, r5
 803444a:	462b      	mov	r3, r5
 803444c:	210a      	movs	r1, #10
 803444e:	4563      	cmp	r3, ip
 8034450:	d10d      	bne.n	803446e <_strtod_l+0x236>
 8034452:	1c69      	adds	r1, r5, #1
 8034454:	4401      	add	r1, r0
 8034456:	4428      	add	r0, r5
 8034458:	2808      	cmp	r0, #8
 803445a:	dc16      	bgt.n	803448a <_strtod_l+0x252>
 803445c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803445e:	230a      	movs	r3, #10
 8034460:	fb03 2300 	mla	r3, r3, r0, r2
 8034464:	930a      	str	r3, [sp, #40]	@ 0x28
 8034466:	2300      	movs	r3, #0
 8034468:	e018      	b.n	803449c <_strtod_l+0x264>
 803446a:	4638      	mov	r0, r7
 803446c:	e7da      	b.n	8034424 <_strtod_l+0x1ec>
 803446e:	2b08      	cmp	r3, #8
 8034470:	f103 0301 	add.w	r3, r3, #1
 8034474:	dc03      	bgt.n	803447e <_strtod_l+0x246>
 8034476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034478:	434e      	muls	r6, r1
 803447a:	960a      	str	r6, [sp, #40]	@ 0x28
 803447c:	e7e7      	b.n	803444e <_strtod_l+0x216>
 803447e:	2b10      	cmp	r3, #16
 8034480:	bfde      	ittt	le
 8034482:	9e08      	ldrle	r6, [sp, #32]
 8034484:	434e      	mulle	r6, r1
 8034486:	9608      	strle	r6, [sp, #32]
 8034488:	e7e1      	b.n	803444e <_strtod_l+0x216>
 803448a:	280f      	cmp	r0, #15
 803448c:	dceb      	bgt.n	8034466 <_strtod_l+0x22e>
 803448e:	9808      	ldr	r0, [sp, #32]
 8034490:	230a      	movs	r3, #10
 8034492:	fb03 2300 	mla	r3, r3, r0, r2
 8034496:	9308      	str	r3, [sp, #32]
 8034498:	e7e5      	b.n	8034466 <_strtod_l+0x22e>
 803449a:	4629      	mov	r1, r5
 803449c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803449e:	1c50      	adds	r0, r2, #1
 80344a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80344a2:	7852      	ldrb	r2, [r2, #1]
 80344a4:	4618      	mov	r0, r3
 80344a6:	460d      	mov	r5, r1
 80344a8:	e7b1      	b.n	803440e <_strtod_l+0x1d6>
 80344aa:	f04f 0900 	mov.w	r9, #0
 80344ae:	2301      	movs	r3, #1
 80344b0:	e77d      	b.n	80343ae <_strtod_l+0x176>
 80344b2:	f04f 0c00 	mov.w	ip, #0
 80344b6:	1ca2      	adds	r2, r4, #2
 80344b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80344ba:	78a2      	ldrb	r2, [r4, #2]
 80344bc:	e785      	b.n	80343ca <_strtod_l+0x192>
 80344be:	f04f 0c01 	mov.w	ip, #1
 80344c2:	e7f8      	b.n	80344b6 <_strtod_l+0x27e>
 80344c4:	0803c3a4 	.word	0x0803c3a4
 80344c8:	0803be0e 	.word	0x0803be0e
 80344cc:	7ff00000 	.word	0x7ff00000
 80344d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344d2:	1c51      	adds	r1, r2, #1
 80344d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80344d6:	7852      	ldrb	r2, [r2, #1]
 80344d8:	2a30      	cmp	r2, #48	@ 0x30
 80344da:	d0f9      	beq.n	80344d0 <_strtod_l+0x298>
 80344dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80344e0:	2908      	cmp	r1, #8
 80344e2:	f63f af78 	bhi.w	80343d6 <_strtod_l+0x19e>
 80344e6:	3a30      	subs	r2, #48	@ 0x30
 80344e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80344ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80344ee:	f04f 080a 	mov.w	r8, #10
 80344f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344f4:	1c56      	adds	r6, r2, #1
 80344f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80344f8:	7852      	ldrb	r2, [r2, #1]
 80344fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80344fe:	f1be 0f09 	cmp.w	lr, #9
 8034502:	d939      	bls.n	8034578 <_strtod_l+0x340>
 8034504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8034506:	1a76      	subs	r6, r6, r1
 8034508:	2e08      	cmp	r6, #8
 803450a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803450e:	dc03      	bgt.n	8034518 <_strtod_l+0x2e0>
 8034510:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034512:	4588      	cmp	r8, r1
 8034514:	bfa8      	it	ge
 8034516:	4688      	movge	r8, r1
 8034518:	f1bc 0f00 	cmp.w	ip, #0
 803451c:	d001      	beq.n	8034522 <_strtod_l+0x2ea>
 803451e:	f1c8 0800 	rsb	r8, r8, #0
 8034522:	2d00      	cmp	r5, #0
 8034524:	d14e      	bne.n	80345c4 <_strtod_l+0x38c>
 8034526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034528:	4308      	orrs	r0, r1
 803452a:	f47f aebe 	bne.w	80342aa <_strtod_l+0x72>
 803452e:	2b00      	cmp	r3, #0
 8034530:	f47f aed6 	bne.w	80342e0 <_strtod_l+0xa8>
 8034534:	2a69      	cmp	r2, #105	@ 0x69
 8034536:	d028      	beq.n	803458a <_strtod_l+0x352>
 8034538:	dc25      	bgt.n	8034586 <_strtod_l+0x34e>
 803453a:	2a49      	cmp	r2, #73	@ 0x49
 803453c:	d025      	beq.n	803458a <_strtod_l+0x352>
 803453e:	2a4e      	cmp	r2, #78	@ 0x4e
 8034540:	f47f aece 	bne.w	80342e0 <_strtod_l+0xa8>
 8034544:	499b      	ldr	r1, [pc, #620]	@ (80347b4 <_strtod_l+0x57c>)
 8034546:	a819      	add	r0, sp, #100	@ 0x64
 8034548:	f001 fb18 	bl	8035b7c <__match>
 803454c:	2800      	cmp	r0, #0
 803454e:	f43f aec7 	beq.w	80342e0 <_strtod_l+0xa8>
 8034552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034554:	781b      	ldrb	r3, [r3, #0]
 8034556:	2b28      	cmp	r3, #40	@ 0x28
 8034558:	d12e      	bne.n	80345b8 <_strtod_l+0x380>
 803455a:	4997      	ldr	r1, [pc, #604]	@ (80347b8 <_strtod_l+0x580>)
 803455c:	aa1c      	add	r2, sp, #112	@ 0x70
 803455e:	a819      	add	r0, sp, #100	@ 0x64
 8034560:	f001 fb20 	bl	8035ba4 <__hexnan>
 8034564:	2805      	cmp	r0, #5
 8034566:	d127      	bne.n	80345b8 <_strtod_l+0x380>
 8034568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803456a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803456e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034572:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034576:	e698      	b.n	80342aa <_strtod_l+0x72>
 8034578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803457a:	fb08 2101 	mla	r1, r8, r1, r2
 803457e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034582:	920e      	str	r2, [sp, #56]	@ 0x38
 8034584:	e7b5      	b.n	80344f2 <_strtod_l+0x2ba>
 8034586:	2a6e      	cmp	r2, #110	@ 0x6e
 8034588:	e7da      	b.n	8034540 <_strtod_l+0x308>
 803458a:	498c      	ldr	r1, [pc, #560]	@ (80347bc <_strtod_l+0x584>)
 803458c:	a819      	add	r0, sp, #100	@ 0x64
 803458e:	f001 faf5 	bl	8035b7c <__match>
 8034592:	2800      	cmp	r0, #0
 8034594:	f43f aea4 	beq.w	80342e0 <_strtod_l+0xa8>
 8034598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803459a:	4989      	ldr	r1, [pc, #548]	@ (80347c0 <_strtod_l+0x588>)
 803459c:	3b01      	subs	r3, #1
 803459e:	a819      	add	r0, sp, #100	@ 0x64
 80345a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80345a2:	f001 faeb 	bl	8035b7c <__match>
 80345a6:	b910      	cbnz	r0, 80345ae <_strtod_l+0x376>
 80345a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80345aa:	3301      	adds	r3, #1
 80345ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80345ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80347d0 <_strtod_l+0x598>
 80345b2:	f04f 0a00 	mov.w	sl, #0
 80345b6:	e678      	b.n	80342aa <_strtod_l+0x72>
 80345b8:	4882      	ldr	r0, [pc, #520]	@ (80347c4 <_strtod_l+0x58c>)
 80345ba:	f001 f805 	bl	80355c8 <nan>
 80345be:	ec5b ab10 	vmov	sl, fp, d0
 80345c2:	e672      	b.n	80342aa <_strtod_l+0x72>
 80345c4:	eba8 0309 	sub.w	r3, r8, r9
 80345c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80345ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80345cc:	2f00      	cmp	r7, #0
 80345ce:	bf08      	it	eq
 80345d0:	462f      	moveq	r7, r5
 80345d2:	2d10      	cmp	r5, #16
 80345d4:	462c      	mov	r4, r5
 80345d6:	bfa8      	it	ge
 80345d8:	2410      	movge	r4, #16
 80345da:	f7db ffab 	bl	8010534 <__aeabi_ui2d>
 80345de:	2d09      	cmp	r5, #9
 80345e0:	4682      	mov	sl, r0
 80345e2:	468b      	mov	fp, r1
 80345e4:	dc13      	bgt.n	803460e <_strtod_l+0x3d6>
 80345e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80345e8:	2b00      	cmp	r3, #0
 80345ea:	f43f ae5e 	beq.w	80342aa <_strtod_l+0x72>
 80345ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80345f0:	dd78      	ble.n	80346e4 <_strtod_l+0x4ac>
 80345f2:	2b16      	cmp	r3, #22
 80345f4:	dc5f      	bgt.n	80346b6 <_strtod_l+0x47e>
 80345f6:	4974      	ldr	r1, [pc, #464]	@ (80347c8 <_strtod_l+0x590>)
 80345f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80345fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034600:	4652      	mov	r2, sl
 8034602:	465b      	mov	r3, fp
 8034604:	f7dc f810 	bl	8010628 <__aeabi_dmul>
 8034608:	4682      	mov	sl, r0
 803460a:	468b      	mov	fp, r1
 803460c:	e64d      	b.n	80342aa <_strtod_l+0x72>
 803460e:	4b6e      	ldr	r3, [pc, #440]	@ (80347c8 <_strtod_l+0x590>)
 8034610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034614:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8034618:	f7dc f806 	bl	8010628 <__aeabi_dmul>
 803461c:	4682      	mov	sl, r0
 803461e:	9808      	ldr	r0, [sp, #32]
 8034620:	468b      	mov	fp, r1
 8034622:	f7db ff87 	bl	8010534 <__aeabi_ui2d>
 8034626:	4602      	mov	r2, r0
 8034628:	460b      	mov	r3, r1
 803462a:	4650      	mov	r0, sl
 803462c:	4659      	mov	r1, fp
 803462e:	f7db fe45 	bl	80102bc <__adddf3>
 8034632:	2d0f      	cmp	r5, #15
 8034634:	4682      	mov	sl, r0
 8034636:	468b      	mov	fp, r1
 8034638:	ddd5      	ble.n	80345e6 <_strtod_l+0x3ae>
 803463a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803463c:	1b2c      	subs	r4, r5, r4
 803463e:	441c      	add	r4, r3
 8034640:	2c00      	cmp	r4, #0
 8034642:	f340 8096 	ble.w	8034772 <_strtod_l+0x53a>
 8034646:	f014 030f 	ands.w	r3, r4, #15
 803464a:	d00a      	beq.n	8034662 <_strtod_l+0x42a>
 803464c:	495e      	ldr	r1, [pc, #376]	@ (80347c8 <_strtod_l+0x590>)
 803464e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034652:	4652      	mov	r2, sl
 8034654:	465b      	mov	r3, fp
 8034656:	e9d1 0100 	ldrd	r0, r1, [r1]
 803465a:	f7db ffe5 	bl	8010628 <__aeabi_dmul>
 803465e:	4682      	mov	sl, r0
 8034660:	468b      	mov	fp, r1
 8034662:	f034 040f 	bics.w	r4, r4, #15
 8034666:	d073      	beq.n	8034750 <_strtod_l+0x518>
 8034668:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803466c:	dd48      	ble.n	8034700 <_strtod_l+0x4c8>
 803466e:	2400      	movs	r4, #0
 8034670:	46a0      	mov	r8, r4
 8034672:	940a      	str	r4, [sp, #40]	@ 0x28
 8034674:	46a1      	mov	r9, r4
 8034676:	9a05      	ldr	r2, [sp, #20]
 8034678:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80347d0 <_strtod_l+0x598>
 803467c:	2322      	movs	r3, #34	@ 0x22
 803467e:	6013      	str	r3, [r2, #0]
 8034680:	f04f 0a00 	mov.w	sl, #0
 8034684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034686:	2b00      	cmp	r3, #0
 8034688:	f43f ae0f 	beq.w	80342aa <_strtod_l+0x72>
 803468c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803468e:	9805      	ldr	r0, [sp, #20]
 8034690:	f7fe ff37 	bl	8033502 <_Bfree>
 8034694:	9805      	ldr	r0, [sp, #20]
 8034696:	4649      	mov	r1, r9
 8034698:	f7fe ff33 	bl	8033502 <_Bfree>
 803469c:	9805      	ldr	r0, [sp, #20]
 803469e:	4641      	mov	r1, r8
 80346a0:	f7fe ff2f 	bl	8033502 <_Bfree>
 80346a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80346a6:	9805      	ldr	r0, [sp, #20]
 80346a8:	f7fe ff2b 	bl	8033502 <_Bfree>
 80346ac:	9805      	ldr	r0, [sp, #20]
 80346ae:	4621      	mov	r1, r4
 80346b0:	f7fe ff27 	bl	8033502 <_Bfree>
 80346b4:	e5f9      	b.n	80342aa <_strtod_l+0x72>
 80346b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80346b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80346bc:	4293      	cmp	r3, r2
 80346be:	dbbc      	blt.n	803463a <_strtod_l+0x402>
 80346c0:	4c41      	ldr	r4, [pc, #260]	@ (80347c8 <_strtod_l+0x590>)
 80346c2:	f1c5 050f 	rsb	r5, r5, #15
 80346c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80346ca:	4652      	mov	r2, sl
 80346cc:	465b      	mov	r3, fp
 80346ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80346d2:	f7db ffa9 	bl	8010628 <__aeabi_dmul>
 80346d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80346d8:	1b5d      	subs	r5, r3, r5
 80346da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80346de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80346e2:	e78f      	b.n	8034604 <_strtod_l+0x3cc>
 80346e4:	3316      	adds	r3, #22
 80346e6:	dba8      	blt.n	803463a <_strtod_l+0x402>
 80346e8:	4b37      	ldr	r3, [pc, #220]	@ (80347c8 <_strtod_l+0x590>)
 80346ea:	eba9 0808 	sub.w	r8, r9, r8
 80346ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80346f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80346f6:	4650      	mov	r0, sl
 80346f8:	4659      	mov	r1, fp
 80346fa:	f7dc f8bf 	bl	801087c <__aeabi_ddiv>
 80346fe:	e783      	b.n	8034608 <_strtod_l+0x3d0>
 8034700:	4b32      	ldr	r3, [pc, #200]	@ (80347cc <_strtod_l+0x594>)
 8034702:	9308      	str	r3, [sp, #32]
 8034704:	2300      	movs	r3, #0
 8034706:	1124      	asrs	r4, r4, #4
 8034708:	4650      	mov	r0, sl
 803470a:	4659      	mov	r1, fp
 803470c:	461e      	mov	r6, r3
 803470e:	2c01      	cmp	r4, #1
 8034710:	dc21      	bgt.n	8034756 <_strtod_l+0x51e>
 8034712:	b10b      	cbz	r3, 8034718 <_strtod_l+0x4e0>
 8034714:	4682      	mov	sl, r0
 8034716:	468b      	mov	fp, r1
 8034718:	492c      	ldr	r1, [pc, #176]	@ (80347cc <_strtod_l+0x594>)
 803471a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803471e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8034722:	4652      	mov	r2, sl
 8034724:	465b      	mov	r3, fp
 8034726:	e9d1 0100 	ldrd	r0, r1, [r1]
 803472a:	f7db ff7d 	bl	8010628 <__aeabi_dmul>
 803472e:	4b28      	ldr	r3, [pc, #160]	@ (80347d0 <_strtod_l+0x598>)
 8034730:	460a      	mov	r2, r1
 8034732:	400b      	ands	r3, r1
 8034734:	4927      	ldr	r1, [pc, #156]	@ (80347d4 <_strtod_l+0x59c>)
 8034736:	428b      	cmp	r3, r1
 8034738:	4682      	mov	sl, r0
 803473a:	d898      	bhi.n	803466e <_strtod_l+0x436>
 803473c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8034740:	428b      	cmp	r3, r1
 8034742:	bf86      	itte	hi
 8034744:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80347d8 <_strtod_l+0x5a0>
 8034748:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803474c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8034750:	2300      	movs	r3, #0
 8034752:	9308      	str	r3, [sp, #32]
 8034754:	e07a      	b.n	803484c <_strtod_l+0x614>
 8034756:	07e2      	lsls	r2, r4, #31
 8034758:	d505      	bpl.n	8034766 <_strtod_l+0x52e>
 803475a:	9b08      	ldr	r3, [sp, #32]
 803475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034760:	f7db ff62 	bl	8010628 <__aeabi_dmul>
 8034764:	2301      	movs	r3, #1
 8034766:	9a08      	ldr	r2, [sp, #32]
 8034768:	3208      	adds	r2, #8
 803476a:	3601      	adds	r6, #1
 803476c:	1064      	asrs	r4, r4, #1
 803476e:	9208      	str	r2, [sp, #32]
 8034770:	e7cd      	b.n	803470e <_strtod_l+0x4d6>
 8034772:	d0ed      	beq.n	8034750 <_strtod_l+0x518>
 8034774:	4264      	negs	r4, r4
 8034776:	f014 020f 	ands.w	r2, r4, #15
 803477a:	d00a      	beq.n	8034792 <_strtod_l+0x55a>
 803477c:	4b12      	ldr	r3, [pc, #72]	@ (80347c8 <_strtod_l+0x590>)
 803477e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034782:	4650      	mov	r0, sl
 8034784:	4659      	mov	r1, fp
 8034786:	e9d3 2300 	ldrd	r2, r3, [r3]
 803478a:	f7dc f877 	bl	801087c <__aeabi_ddiv>
 803478e:	4682      	mov	sl, r0
 8034790:	468b      	mov	fp, r1
 8034792:	1124      	asrs	r4, r4, #4
 8034794:	d0dc      	beq.n	8034750 <_strtod_l+0x518>
 8034796:	2c1f      	cmp	r4, #31
 8034798:	dd20      	ble.n	80347dc <_strtod_l+0x5a4>
 803479a:	2400      	movs	r4, #0
 803479c:	46a0      	mov	r8, r4
 803479e:	940a      	str	r4, [sp, #40]	@ 0x28
 80347a0:	46a1      	mov	r9, r4
 80347a2:	9a05      	ldr	r2, [sp, #20]
 80347a4:	2322      	movs	r3, #34	@ 0x22
 80347a6:	f04f 0a00 	mov.w	sl, #0
 80347aa:	f04f 0b00 	mov.w	fp, #0
 80347ae:	6013      	str	r3, [r2, #0]
 80347b0:	e768      	b.n	8034684 <_strtod_l+0x44c>
 80347b2:	bf00      	nop
 80347b4:	0803be11 	.word	0x0803be11
 80347b8:	0803c390 	.word	0x0803c390
 80347bc:	0803bc80 	.word	0x0803bc80
 80347c0:	0803c13c 	.word	0x0803c13c
 80347c4:	0803bc7a 	.word	0x0803bc7a
 80347c8:	0803c2c8 	.word	0x0803c2c8
 80347cc:	0803c2a0 	.word	0x0803c2a0
 80347d0:	7ff00000 	.word	0x7ff00000
 80347d4:	7ca00000 	.word	0x7ca00000
 80347d8:	7fefffff 	.word	0x7fefffff
 80347dc:	f014 0310 	ands.w	r3, r4, #16
 80347e0:	bf18      	it	ne
 80347e2:	236a      	movne	r3, #106	@ 0x6a
 80347e4:	4ea9      	ldr	r6, [pc, #676]	@ (8034a8c <_strtod_l+0x854>)
 80347e6:	9308      	str	r3, [sp, #32]
 80347e8:	4650      	mov	r0, sl
 80347ea:	4659      	mov	r1, fp
 80347ec:	2300      	movs	r3, #0
 80347ee:	07e2      	lsls	r2, r4, #31
 80347f0:	d504      	bpl.n	80347fc <_strtod_l+0x5c4>
 80347f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80347f6:	f7db ff17 	bl	8010628 <__aeabi_dmul>
 80347fa:	2301      	movs	r3, #1
 80347fc:	1064      	asrs	r4, r4, #1
 80347fe:	f106 0608 	add.w	r6, r6, #8
 8034802:	d1f4      	bne.n	80347ee <_strtod_l+0x5b6>
 8034804:	b10b      	cbz	r3, 803480a <_strtod_l+0x5d2>
 8034806:	4682      	mov	sl, r0
 8034808:	468b      	mov	fp, r1
 803480a:	9b08      	ldr	r3, [sp, #32]
 803480c:	b1b3      	cbz	r3, 803483c <_strtod_l+0x604>
 803480e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034812:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034816:	2b00      	cmp	r3, #0
 8034818:	4659      	mov	r1, fp
 803481a:	dd0f      	ble.n	803483c <_strtod_l+0x604>
 803481c:	2b1f      	cmp	r3, #31
 803481e:	dd55      	ble.n	80348cc <_strtod_l+0x694>
 8034820:	2b34      	cmp	r3, #52	@ 0x34
 8034822:	bfde      	ittt	le
 8034824:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034828:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803482c:	4093      	lslle	r3, r2
 803482e:	f04f 0a00 	mov.w	sl, #0
 8034832:	bfcc      	ite	gt
 8034834:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034838:	ea03 0b01 	andle.w	fp, r3, r1
 803483c:	2200      	movs	r2, #0
 803483e:	2300      	movs	r3, #0
 8034840:	4650      	mov	r0, sl
 8034842:	4659      	mov	r1, fp
 8034844:	f7dc f958 	bl	8010af8 <__aeabi_dcmpeq>
 8034848:	2800      	cmp	r0, #0
 803484a:	d1a6      	bne.n	803479a <_strtod_l+0x562>
 803484c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803484e:	9300      	str	r3, [sp, #0]
 8034850:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034852:	9805      	ldr	r0, [sp, #20]
 8034854:	462b      	mov	r3, r5
 8034856:	463a      	mov	r2, r7
 8034858:	f7fe fea2 	bl	80335a0 <__s2b>
 803485c:	900a      	str	r0, [sp, #40]	@ 0x28
 803485e:	2800      	cmp	r0, #0
 8034860:	f43f af05 	beq.w	803466e <_strtod_l+0x436>
 8034864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034866:	2a00      	cmp	r2, #0
 8034868:	eba9 0308 	sub.w	r3, r9, r8
 803486c:	bfa8      	it	ge
 803486e:	2300      	movge	r3, #0
 8034870:	9312      	str	r3, [sp, #72]	@ 0x48
 8034872:	2400      	movs	r4, #0
 8034874:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034878:	9316      	str	r3, [sp, #88]	@ 0x58
 803487a:	46a0      	mov	r8, r4
 803487c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803487e:	9805      	ldr	r0, [sp, #20]
 8034880:	6859      	ldr	r1, [r3, #4]
 8034882:	f7fe fe19 	bl	80334b8 <_Balloc>
 8034886:	4681      	mov	r9, r0
 8034888:	2800      	cmp	r0, #0
 803488a:	f43f aef4 	beq.w	8034676 <_strtod_l+0x43e>
 803488e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034890:	691a      	ldr	r2, [r3, #16]
 8034892:	3202      	adds	r2, #2
 8034894:	f103 010c 	add.w	r1, r3, #12
 8034898:	0092      	lsls	r2, r2, #2
 803489a:	300c      	adds	r0, #12
 803489c:	f7f9 fadc 	bl	802de58 <memcpy>
 80348a0:	ec4b ab10 	vmov	d0, sl, fp
 80348a4:	9805      	ldr	r0, [sp, #20]
 80348a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80348a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80348aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80348ae:	f7ff f999 	bl	8033be4 <__d2b>
 80348b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80348b4:	2800      	cmp	r0, #0
 80348b6:	f43f aede 	beq.w	8034676 <_strtod_l+0x43e>
 80348ba:	9805      	ldr	r0, [sp, #20]
 80348bc:	2101      	movs	r1, #1
 80348be:	f7fe ff05 	bl	80336cc <__i2b>
 80348c2:	4680      	mov	r8, r0
 80348c4:	b948      	cbnz	r0, 80348da <_strtod_l+0x6a2>
 80348c6:	f04f 0800 	mov.w	r8, #0
 80348ca:	e6d4      	b.n	8034676 <_strtod_l+0x43e>
 80348cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80348d0:	fa02 f303 	lsl.w	r3, r2, r3
 80348d4:	ea03 0a0a 	and.w	sl, r3, sl
 80348d8:	e7b0      	b.n	803483c <_strtod_l+0x604>
 80348da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80348dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80348de:	2d00      	cmp	r5, #0
 80348e0:	bfab      	itete	ge
 80348e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80348e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80348e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80348e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80348ea:	bfac      	ite	ge
 80348ec:	18ef      	addge	r7, r5, r3
 80348ee:	1b5e      	sublt	r6, r3, r5
 80348f0:	9b08      	ldr	r3, [sp, #32]
 80348f2:	1aed      	subs	r5, r5, r3
 80348f4:	4415      	add	r5, r2
 80348f6:	4b66      	ldr	r3, [pc, #408]	@ (8034a90 <_strtod_l+0x858>)
 80348f8:	3d01      	subs	r5, #1
 80348fa:	429d      	cmp	r5, r3
 80348fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8034900:	da50      	bge.n	80349a4 <_strtod_l+0x76c>
 8034902:	1b5b      	subs	r3, r3, r5
 8034904:	2b1f      	cmp	r3, #31
 8034906:	eba2 0203 	sub.w	r2, r2, r3
 803490a:	f04f 0101 	mov.w	r1, #1
 803490e:	dc3d      	bgt.n	803498c <_strtod_l+0x754>
 8034910:	fa01 f303 	lsl.w	r3, r1, r3
 8034914:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034916:	2300      	movs	r3, #0
 8034918:	9310      	str	r3, [sp, #64]	@ 0x40
 803491a:	18bd      	adds	r5, r7, r2
 803491c:	9b08      	ldr	r3, [sp, #32]
 803491e:	42af      	cmp	r7, r5
 8034920:	4416      	add	r6, r2
 8034922:	441e      	add	r6, r3
 8034924:	463b      	mov	r3, r7
 8034926:	bfa8      	it	ge
 8034928:	462b      	movge	r3, r5
 803492a:	42b3      	cmp	r3, r6
 803492c:	bfa8      	it	ge
 803492e:	4633      	movge	r3, r6
 8034930:	2b00      	cmp	r3, #0
 8034932:	bfc2      	ittt	gt
 8034934:	1aed      	subgt	r5, r5, r3
 8034936:	1af6      	subgt	r6, r6, r3
 8034938:	1aff      	subgt	r7, r7, r3
 803493a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803493c:	2b00      	cmp	r3, #0
 803493e:	dd16      	ble.n	803496e <_strtod_l+0x736>
 8034940:	4641      	mov	r1, r8
 8034942:	9805      	ldr	r0, [sp, #20]
 8034944:	461a      	mov	r2, r3
 8034946:	f7fe ff81 	bl	803384c <__pow5mult>
 803494a:	4680      	mov	r8, r0
 803494c:	2800      	cmp	r0, #0
 803494e:	d0ba      	beq.n	80348c6 <_strtod_l+0x68e>
 8034950:	4601      	mov	r1, r0
 8034952:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034954:	9805      	ldr	r0, [sp, #20]
 8034956:	f7fe fecf 	bl	80336f8 <__multiply>
 803495a:	900e      	str	r0, [sp, #56]	@ 0x38
 803495c:	2800      	cmp	r0, #0
 803495e:	f43f ae8a 	beq.w	8034676 <_strtod_l+0x43e>
 8034962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034964:	9805      	ldr	r0, [sp, #20]
 8034966:	f7fe fdcc 	bl	8033502 <_Bfree>
 803496a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803496c:	931a      	str	r3, [sp, #104]	@ 0x68
 803496e:	2d00      	cmp	r5, #0
 8034970:	dc1d      	bgt.n	80349ae <_strtod_l+0x776>
 8034972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034974:	2b00      	cmp	r3, #0
 8034976:	dd23      	ble.n	80349c0 <_strtod_l+0x788>
 8034978:	4649      	mov	r1, r9
 803497a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803497c:	9805      	ldr	r0, [sp, #20]
 803497e:	f7fe ff65 	bl	803384c <__pow5mult>
 8034982:	4681      	mov	r9, r0
 8034984:	b9e0      	cbnz	r0, 80349c0 <_strtod_l+0x788>
 8034986:	f04f 0900 	mov.w	r9, #0
 803498a:	e674      	b.n	8034676 <_strtod_l+0x43e>
 803498c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034990:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034994:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034998:	35e2      	adds	r5, #226	@ 0xe2
 803499a:	fa01 f305 	lsl.w	r3, r1, r5
 803499e:	9310      	str	r3, [sp, #64]	@ 0x40
 80349a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80349a2:	e7ba      	b.n	803491a <_strtod_l+0x6e2>
 80349a4:	2300      	movs	r3, #0
 80349a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80349a8:	2301      	movs	r3, #1
 80349aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80349ac:	e7b5      	b.n	803491a <_strtod_l+0x6e2>
 80349ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80349b0:	9805      	ldr	r0, [sp, #20]
 80349b2:	462a      	mov	r2, r5
 80349b4:	f7fe ff8a 	bl	80338cc <__lshift>
 80349b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80349ba:	2800      	cmp	r0, #0
 80349bc:	d1d9      	bne.n	8034972 <_strtod_l+0x73a>
 80349be:	e65a      	b.n	8034676 <_strtod_l+0x43e>
 80349c0:	2e00      	cmp	r6, #0
 80349c2:	dd07      	ble.n	80349d4 <_strtod_l+0x79c>
 80349c4:	4649      	mov	r1, r9
 80349c6:	9805      	ldr	r0, [sp, #20]
 80349c8:	4632      	mov	r2, r6
 80349ca:	f7fe ff7f 	bl	80338cc <__lshift>
 80349ce:	4681      	mov	r9, r0
 80349d0:	2800      	cmp	r0, #0
 80349d2:	d0d8      	beq.n	8034986 <_strtod_l+0x74e>
 80349d4:	2f00      	cmp	r7, #0
 80349d6:	dd08      	ble.n	80349ea <_strtod_l+0x7b2>
 80349d8:	4641      	mov	r1, r8
 80349da:	9805      	ldr	r0, [sp, #20]
 80349dc:	463a      	mov	r2, r7
 80349de:	f7fe ff75 	bl	80338cc <__lshift>
 80349e2:	4680      	mov	r8, r0
 80349e4:	2800      	cmp	r0, #0
 80349e6:	f43f ae46 	beq.w	8034676 <_strtod_l+0x43e>
 80349ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80349ec:	9805      	ldr	r0, [sp, #20]
 80349ee:	464a      	mov	r2, r9
 80349f0:	f7fe fff4 	bl	80339dc <__mdiff>
 80349f4:	4604      	mov	r4, r0
 80349f6:	2800      	cmp	r0, #0
 80349f8:	f43f ae3d 	beq.w	8034676 <_strtod_l+0x43e>
 80349fc:	68c3      	ldr	r3, [r0, #12]
 80349fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034a00:	2300      	movs	r3, #0
 8034a02:	60c3      	str	r3, [r0, #12]
 8034a04:	4641      	mov	r1, r8
 8034a06:	f7fe ffcd 	bl	80339a4 <__mcmp>
 8034a0a:	2800      	cmp	r0, #0
 8034a0c:	da46      	bge.n	8034a9c <_strtod_l+0x864>
 8034a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a10:	ea53 030a 	orrs.w	r3, r3, sl
 8034a14:	d16c      	bne.n	8034af0 <_strtod_l+0x8b8>
 8034a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034a1a:	2b00      	cmp	r3, #0
 8034a1c:	d168      	bne.n	8034af0 <_strtod_l+0x8b8>
 8034a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034a22:	0d1b      	lsrs	r3, r3, #20
 8034a24:	051b      	lsls	r3, r3, #20
 8034a26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034a2a:	d961      	bls.n	8034af0 <_strtod_l+0x8b8>
 8034a2c:	6963      	ldr	r3, [r4, #20]
 8034a2e:	b913      	cbnz	r3, 8034a36 <_strtod_l+0x7fe>
 8034a30:	6923      	ldr	r3, [r4, #16]
 8034a32:	2b01      	cmp	r3, #1
 8034a34:	dd5c      	ble.n	8034af0 <_strtod_l+0x8b8>
 8034a36:	4621      	mov	r1, r4
 8034a38:	2201      	movs	r2, #1
 8034a3a:	9805      	ldr	r0, [sp, #20]
 8034a3c:	f7fe ff46 	bl	80338cc <__lshift>
 8034a40:	4641      	mov	r1, r8
 8034a42:	4604      	mov	r4, r0
 8034a44:	f7fe ffae 	bl	80339a4 <__mcmp>
 8034a48:	2800      	cmp	r0, #0
 8034a4a:	dd51      	ble.n	8034af0 <_strtod_l+0x8b8>
 8034a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034a50:	9a08      	ldr	r2, [sp, #32]
 8034a52:	0d1b      	lsrs	r3, r3, #20
 8034a54:	051b      	lsls	r3, r3, #20
 8034a56:	2a00      	cmp	r2, #0
 8034a58:	d06b      	beq.n	8034b32 <_strtod_l+0x8fa>
 8034a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034a5e:	d868      	bhi.n	8034b32 <_strtod_l+0x8fa>
 8034a60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034a64:	f67f ae9d 	bls.w	80347a2 <_strtod_l+0x56a>
 8034a68:	4b0a      	ldr	r3, [pc, #40]	@ (8034a94 <_strtod_l+0x85c>)
 8034a6a:	4650      	mov	r0, sl
 8034a6c:	4659      	mov	r1, fp
 8034a6e:	2200      	movs	r2, #0
 8034a70:	f7db fdda 	bl	8010628 <__aeabi_dmul>
 8034a74:	4b08      	ldr	r3, [pc, #32]	@ (8034a98 <_strtod_l+0x860>)
 8034a76:	400b      	ands	r3, r1
 8034a78:	4682      	mov	sl, r0
 8034a7a:	468b      	mov	fp, r1
 8034a7c:	2b00      	cmp	r3, #0
 8034a7e:	f47f ae05 	bne.w	803468c <_strtod_l+0x454>
 8034a82:	9a05      	ldr	r2, [sp, #20]
 8034a84:	2322      	movs	r3, #34	@ 0x22
 8034a86:	6013      	str	r3, [r2, #0]
 8034a88:	e600      	b.n	803468c <_strtod_l+0x454>
 8034a8a:	bf00      	nop
 8034a8c:	0803c3b8 	.word	0x0803c3b8
 8034a90:	fffffc02 	.word	0xfffffc02
 8034a94:	39500000 	.word	0x39500000
 8034a98:	7ff00000 	.word	0x7ff00000
 8034a9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034aa0:	d165      	bne.n	8034b6e <_strtod_l+0x936>
 8034aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034aa8:	b35a      	cbz	r2, 8034b02 <_strtod_l+0x8ca>
 8034aaa:	4a9f      	ldr	r2, [pc, #636]	@ (8034d28 <_strtod_l+0xaf0>)
 8034aac:	4293      	cmp	r3, r2
 8034aae:	d12b      	bne.n	8034b08 <_strtod_l+0x8d0>
 8034ab0:	9b08      	ldr	r3, [sp, #32]
 8034ab2:	4651      	mov	r1, sl
 8034ab4:	b303      	cbz	r3, 8034af8 <_strtod_l+0x8c0>
 8034ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8034d2c <_strtod_l+0xaf4>)
 8034ab8:	465a      	mov	r2, fp
 8034aba:	4013      	ands	r3, r2
 8034abc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034ac4:	d81b      	bhi.n	8034afe <_strtod_l+0x8c6>
 8034ac6:	0d1b      	lsrs	r3, r3, #20
 8034ac8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8034acc:	fa02 f303 	lsl.w	r3, r2, r3
 8034ad0:	4299      	cmp	r1, r3
 8034ad2:	d119      	bne.n	8034b08 <_strtod_l+0x8d0>
 8034ad4:	4b96      	ldr	r3, [pc, #600]	@ (8034d30 <_strtod_l+0xaf8>)
 8034ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034ad8:	429a      	cmp	r2, r3
 8034ada:	d102      	bne.n	8034ae2 <_strtod_l+0x8aa>
 8034adc:	3101      	adds	r1, #1
 8034ade:	f43f adca 	beq.w	8034676 <_strtod_l+0x43e>
 8034ae2:	4b92      	ldr	r3, [pc, #584]	@ (8034d2c <_strtod_l+0xaf4>)
 8034ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034ae6:	401a      	ands	r2, r3
 8034ae8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8034aec:	f04f 0a00 	mov.w	sl, #0
 8034af0:	9b08      	ldr	r3, [sp, #32]
 8034af2:	2b00      	cmp	r3, #0
 8034af4:	d1b8      	bne.n	8034a68 <_strtod_l+0x830>
 8034af6:	e5c9      	b.n	803468c <_strtod_l+0x454>
 8034af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034afc:	e7e8      	b.n	8034ad0 <_strtod_l+0x898>
 8034afe:	4613      	mov	r3, r2
 8034b00:	e7e6      	b.n	8034ad0 <_strtod_l+0x898>
 8034b02:	ea53 030a 	orrs.w	r3, r3, sl
 8034b06:	d0a1      	beq.n	8034a4c <_strtod_l+0x814>
 8034b08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034b0a:	b1db      	cbz	r3, 8034b44 <_strtod_l+0x90c>
 8034b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034b0e:	4213      	tst	r3, r2
 8034b10:	d0ee      	beq.n	8034af0 <_strtod_l+0x8b8>
 8034b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b14:	9a08      	ldr	r2, [sp, #32]
 8034b16:	4650      	mov	r0, sl
 8034b18:	4659      	mov	r1, fp
 8034b1a:	b1bb      	cbz	r3, 8034b4c <_strtod_l+0x914>
 8034b1c:	f7ff fb6e 	bl	80341fc <sulp>
 8034b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034b24:	ec53 2b10 	vmov	r2, r3, d0
 8034b28:	f7db fbc8 	bl	80102bc <__adddf3>
 8034b2c:	4682      	mov	sl, r0
 8034b2e:	468b      	mov	fp, r1
 8034b30:	e7de      	b.n	8034af0 <_strtod_l+0x8b8>
 8034b32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8034b36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8034b3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8034b3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034b42:	e7d5      	b.n	8034af0 <_strtod_l+0x8b8>
 8034b44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034b46:	ea13 0f0a 	tst.w	r3, sl
 8034b4a:	e7e1      	b.n	8034b10 <_strtod_l+0x8d8>
 8034b4c:	f7ff fb56 	bl	80341fc <sulp>
 8034b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034b54:	ec53 2b10 	vmov	r2, r3, d0
 8034b58:	f7db fbae 	bl	80102b8 <__aeabi_dsub>
 8034b5c:	2200      	movs	r2, #0
 8034b5e:	2300      	movs	r3, #0
 8034b60:	4682      	mov	sl, r0
 8034b62:	468b      	mov	fp, r1
 8034b64:	f7db ffc8 	bl	8010af8 <__aeabi_dcmpeq>
 8034b68:	2800      	cmp	r0, #0
 8034b6a:	d0c1      	beq.n	8034af0 <_strtod_l+0x8b8>
 8034b6c:	e619      	b.n	80347a2 <_strtod_l+0x56a>
 8034b6e:	4641      	mov	r1, r8
 8034b70:	4620      	mov	r0, r4
 8034b72:	f7ff f88f 	bl	8033c94 <__ratio>
 8034b76:	ec57 6b10 	vmov	r6, r7, d0
 8034b7a:	2200      	movs	r2, #0
 8034b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034b80:	4630      	mov	r0, r6
 8034b82:	4639      	mov	r1, r7
 8034b84:	f7db ffcc 	bl	8010b20 <__aeabi_dcmple>
 8034b88:	2800      	cmp	r0, #0
 8034b8a:	d06f      	beq.n	8034c6c <_strtod_l+0xa34>
 8034b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b8e:	2b00      	cmp	r3, #0
 8034b90:	d17a      	bne.n	8034c88 <_strtod_l+0xa50>
 8034b92:	f1ba 0f00 	cmp.w	sl, #0
 8034b96:	d158      	bne.n	8034c4a <_strtod_l+0xa12>
 8034b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034b9e:	2b00      	cmp	r3, #0
 8034ba0:	d15a      	bne.n	8034c58 <_strtod_l+0xa20>
 8034ba2:	4b64      	ldr	r3, [pc, #400]	@ (8034d34 <_strtod_l+0xafc>)
 8034ba4:	2200      	movs	r2, #0
 8034ba6:	4630      	mov	r0, r6
 8034ba8:	4639      	mov	r1, r7
 8034baa:	f7db ffaf 	bl	8010b0c <__aeabi_dcmplt>
 8034bae:	2800      	cmp	r0, #0
 8034bb0:	d159      	bne.n	8034c66 <_strtod_l+0xa2e>
 8034bb2:	4630      	mov	r0, r6
 8034bb4:	4639      	mov	r1, r7
 8034bb6:	4b60      	ldr	r3, [pc, #384]	@ (8034d38 <_strtod_l+0xb00>)
 8034bb8:	2200      	movs	r2, #0
 8034bba:	f7db fd35 	bl	8010628 <__aeabi_dmul>
 8034bbe:	4606      	mov	r6, r0
 8034bc0:	460f      	mov	r7, r1
 8034bc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8034bc6:	9606      	str	r6, [sp, #24]
 8034bc8:	9307      	str	r3, [sp, #28]
 8034bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034bce:	4d57      	ldr	r5, [pc, #348]	@ (8034d2c <_strtod_l+0xaf4>)
 8034bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034bd6:	401d      	ands	r5, r3
 8034bd8:	4b58      	ldr	r3, [pc, #352]	@ (8034d3c <_strtod_l+0xb04>)
 8034bda:	429d      	cmp	r5, r3
 8034bdc:	f040 80b2 	bne.w	8034d44 <_strtod_l+0xb0c>
 8034be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034be2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8034be6:	ec4b ab10 	vmov	d0, sl, fp
 8034bea:	f7fe ff8b 	bl	8033b04 <__ulp>
 8034bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034bf2:	ec51 0b10 	vmov	r0, r1, d0
 8034bf6:	f7db fd17 	bl	8010628 <__aeabi_dmul>
 8034bfa:	4652      	mov	r2, sl
 8034bfc:	465b      	mov	r3, fp
 8034bfe:	f7db fb5d 	bl	80102bc <__adddf3>
 8034c02:	460b      	mov	r3, r1
 8034c04:	4949      	ldr	r1, [pc, #292]	@ (8034d2c <_strtod_l+0xaf4>)
 8034c06:	4a4e      	ldr	r2, [pc, #312]	@ (8034d40 <_strtod_l+0xb08>)
 8034c08:	4019      	ands	r1, r3
 8034c0a:	4291      	cmp	r1, r2
 8034c0c:	4682      	mov	sl, r0
 8034c0e:	d942      	bls.n	8034c96 <_strtod_l+0xa5e>
 8034c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034c12:	4b47      	ldr	r3, [pc, #284]	@ (8034d30 <_strtod_l+0xaf8>)
 8034c14:	429a      	cmp	r2, r3
 8034c16:	d103      	bne.n	8034c20 <_strtod_l+0x9e8>
 8034c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8034c1a:	3301      	adds	r3, #1
 8034c1c:	f43f ad2b 	beq.w	8034676 <_strtod_l+0x43e>
 8034c20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8034d30 <_strtod_l+0xaf8>
 8034c24:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034c2a:	9805      	ldr	r0, [sp, #20]
 8034c2c:	f7fe fc69 	bl	8033502 <_Bfree>
 8034c30:	9805      	ldr	r0, [sp, #20]
 8034c32:	4649      	mov	r1, r9
 8034c34:	f7fe fc65 	bl	8033502 <_Bfree>
 8034c38:	9805      	ldr	r0, [sp, #20]
 8034c3a:	4641      	mov	r1, r8
 8034c3c:	f7fe fc61 	bl	8033502 <_Bfree>
 8034c40:	9805      	ldr	r0, [sp, #20]
 8034c42:	4621      	mov	r1, r4
 8034c44:	f7fe fc5d 	bl	8033502 <_Bfree>
 8034c48:	e618      	b.n	803487c <_strtod_l+0x644>
 8034c4a:	f1ba 0f01 	cmp.w	sl, #1
 8034c4e:	d103      	bne.n	8034c58 <_strtod_l+0xa20>
 8034c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034c52:	2b00      	cmp	r3, #0
 8034c54:	f43f ada5 	beq.w	80347a2 <_strtod_l+0x56a>
 8034c58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8034d08 <_strtod_l+0xad0>
 8034c5c:	4f35      	ldr	r7, [pc, #212]	@ (8034d34 <_strtod_l+0xafc>)
 8034c5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034c62:	2600      	movs	r6, #0
 8034c64:	e7b1      	b.n	8034bca <_strtod_l+0x992>
 8034c66:	4f34      	ldr	r7, [pc, #208]	@ (8034d38 <_strtod_l+0xb00>)
 8034c68:	2600      	movs	r6, #0
 8034c6a:	e7aa      	b.n	8034bc2 <_strtod_l+0x98a>
 8034c6c:	4b32      	ldr	r3, [pc, #200]	@ (8034d38 <_strtod_l+0xb00>)
 8034c6e:	4630      	mov	r0, r6
 8034c70:	4639      	mov	r1, r7
 8034c72:	2200      	movs	r2, #0
 8034c74:	f7db fcd8 	bl	8010628 <__aeabi_dmul>
 8034c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034c7a:	4606      	mov	r6, r0
 8034c7c:	460f      	mov	r7, r1
 8034c7e:	2b00      	cmp	r3, #0
 8034c80:	d09f      	beq.n	8034bc2 <_strtod_l+0x98a>
 8034c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034c86:	e7a0      	b.n	8034bca <_strtod_l+0x992>
 8034c88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8034d10 <_strtod_l+0xad8>
 8034c8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034c90:	ec57 6b17 	vmov	r6, r7, d7
 8034c94:	e799      	b.n	8034bca <_strtod_l+0x992>
 8034c96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8034c9a:	9b08      	ldr	r3, [sp, #32]
 8034c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034ca0:	2b00      	cmp	r3, #0
 8034ca2:	d1c1      	bne.n	8034c28 <_strtod_l+0x9f0>
 8034ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034ca8:	0d1b      	lsrs	r3, r3, #20
 8034caa:	051b      	lsls	r3, r3, #20
 8034cac:	429d      	cmp	r5, r3
 8034cae:	d1bb      	bne.n	8034c28 <_strtod_l+0x9f0>
 8034cb0:	4630      	mov	r0, r6
 8034cb2:	4639      	mov	r1, r7
 8034cb4:	f7dc f87c 	bl	8010db0 <__aeabi_d2lz>
 8034cb8:	f7db fc88 	bl	80105cc <__aeabi_l2d>
 8034cbc:	4602      	mov	r2, r0
 8034cbe:	460b      	mov	r3, r1
 8034cc0:	4630      	mov	r0, r6
 8034cc2:	4639      	mov	r1, r7
 8034cc4:	f7db faf8 	bl	80102b8 <__aeabi_dsub>
 8034cc8:	460b      	mov	r3, r1
 8034cca:	4602      	mov	r2, r0
 8034ccc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8034cd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8034cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034cd6:	ea46 060a 	orr.w	r6, r6, sl
 8034cda:	431e      	orrs	r6, r3
 8034cdc:	d06f      	beq.n	8034dbe <_strtod_l+0xb86>
 8034cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8034d18 <_strtod_l+0xae0>)
 8034ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034ce4:	f7db ff12 	bl	8010b0c <__aeabi_dcmplt>
 8034ce8:	2800      	cmp	r0, #0
 8034cea:	f47f accf 	bne.w	803468c <_strtod_l+0x454>
 8034cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8034d20 <_strtod_l+0xae8>)
 8034cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034cf8:	f7db ff26 	bl	8010b48 <__aeabi_dcmpgt>
 8034cfc:	2800      	cmp	r0, #0
 8034cfe:	d093      	beq.n	8034c28 <_strtod_l+0x9f0>
 8034d00:	e4c4      	b.n	803468c <_strtod_l+0x454>
 8034d02:	bf00      	nop
 8034d04:	f3af 8000 	nop.w
 8034d08:	00000000 	.word	0x00000000
 8034d0c:	bff00000 	.word	0xbff00000
 8034d10:	00000000 	.word	0x00000000
 8034d14:	3ff00000 	.word	0x3ff00000
 8034d18:	94a03595 	.word	0x94a03595
 8034d1c:	3fdfffff 	.word	0x3fdfffff
 8034d20:	35afe535 	.word	0x35afe535
 8034d24:	3fe00000 	.word	0x3fe00000
 8034d28:	000fffff 	.word	0x000fffff
 8034d2c:	7ff00000 	.word	0x7ff00000
 8034d30:	7fefffff 	.word	0x7fefffff
 8034d34:	3ff00000 	.word	0x3ff00000
 8034d38:	3fe00000 	.word	0x3fe00000
 8034d3c:	7fe00000 	.word	0x7fe00000
 8034d40:	7c9fffff 	.word	0x7c9fffff
 8034d44:	9b08      	ldr	r3, [sp, #32]
 8034d46:	b323      	cbz	r3, 8034d92 <_strtod_l+0xb5a>
 8034d48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8034d4c:	d821      	bhi.n	8034d92 <_strtod_l+0xb5a>
 8034d4e:	a328      	add	r3, pc, #160	@ (adr r3, 8034df0 <_strtod_l+0xbb8>)
 8034d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034d54:	4630      	mov	r0, r6
 8034d56:	4639      	mov	r1, r7
 8034d58:	f7db fee2 	bl	8010b20 <__aeabi_dcmple>
 8034d5c:	b1a0      	cbz	r0, 8034d88 <_strtod_l+0xb50>
 8034d5e:	4639      	mov	r1, r7
 8034d60:	4630      	mov	r0, r6
 8034d62:	f7db ff39 	bl	8010bd8 <__aeabi_d2uiz>
 8034d66:	2801      	cmp	r0, #1
 8034d68:	bf38      	it	cc
 8034d6a:	2001      	movcc	r0, #1
 8034d6c:	f7db fbe2 	bl	8010534 <__aeabi_ui2d>
 8034d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034d72:	4606      	mov	r6, r0
 8034d74:	460f      	mov	r7, r1
 8034d76:	b9fb      	cbnz	r3, 8034db8 <_strtod_l+0xb80>
 8034d78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8034d7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8034d7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8034d80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8034d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034d88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8034d8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8034d8e:	1b5b      	subs	r3, r3, r5
 8034d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8034d92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8034d96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8034d9a:	f7fe feb3 	bl	8033b04 <__ulp>
 8034d9e:	4650      	mov	r0, sl
 8034da0:	ec53 2b10 	vmov	r2, r3, d0
 8034da4:	4659      	mov	r1, fp
 8034da6:	f7db fc3f 	bl	8010628 <__aeabi_dmul>
 8034daa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8034dae:	f7db fa85 	bl	80102bc <__adddf3>
 8034db2:	4682      	mov	sl, r0
 8034db4:	468b      	mov	fp, r1
 8034db6:	e770      	b.n	8034c9a <_strtod_l+0xa62>
 8034db8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8034dbc:	e7e0      	b.n	8034d80 <_strtod_l+0xb48>
 8034dbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8034df8 <_strtod_l+0xbc0>)
 8034dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034dc4:	f7db fea2 	bl	8010b0c <__aeabi_dcmplt>
 8034dc8:	e798      	b.n	8034cfc <_strtod_l+0xac4>
 8034dca:	2300      	movs	r3, #0
 8034dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034dce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8034dd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034dd2:	6013      	str	r3, [r2, #0]
 8034dd4:	f7ff ba6d 	b.w	80342b2 <_strtod_l+0x7a>
 8034dd8:	2a65      	cmp	r2, #101	@ 0x65
 8034dda:	f43f ab66 	beq.w	80344aa <_strtod_l+0x272>
 8034dde:	2a45      	cmp	r2, #69	@ 0x45
 8034de0:	f43f ab63 	beq.w	80344aa <_strtod_l+0x272>
 8034de4:	2301      	movs	r3, #1
 8034de6:	f7ff bb9e 	b.w	8034526 <_strtod_l+0x2ee>
 8034dea:	bf00      	nop
 8034dec:	f3af 8000 	nop.w
 8034df0:	ffc00000 	.word	0xffc00000
 8034df4:	41dfffff 	.word	0x41dfffff
 8034df8:	94a03595 	.word	0x94a03595
 8034dfc:	3fcfffff 	.word	0x3fcfffff

08034e00 <_strtod_r>:
 8034e00:	4b01      	ldr	r3, [pc, #4]	@ (8034e08 <_strtod_r+0x8>)
 8034e02:	f7ff ba19 	b.w	8034238 <_strtod_l>
 8034e06:	bf00      	nop
 8034e08:	2000016c 	.word	0x2000016c

08034e0c <_strtoul_l.constprop.0>:
 8034e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034e10:	4e34      	ldr	r6, [pc, #208]	@ (8034ee4 <_strtoul_l.constprop.0+0xd8>)
 8034e12:	4686      	mov	lr, r0
 8034e14:	460d      	mov	r5, r1
 8034e16:	4628      	mov	r0, r5
 8034e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034e1c:	5d37      	ldrb	r7, [r6, r4]
 8034e1e:	f017 0708 	ands.w	r7, r7, #8
 8034e22:	d1f8      	bne.n	8034e16 <_strtoul_l.constprop.0+0xa>
 8034e24:	2c2d      	cmp	r4, #45	@ 0x2d
 8034e26:	d12f      	bne.n	8034e88 <_strtoul_l.constprop.0+0x7c>
 8034e28:	782c      	ldrb	r4, [r5, #0]
 8034e2a:	2701      	movs	r7, #1
 8034e2c:	1c85      	adds	r5, r0, #2
 8034e2e:	f033 0010 	bics.w	r0, r3, #16
 8034e32:	d109      	bne.n	8034e48 <_strtoul_l.constprop.0+0x3c>
 8034e34:	2c30      	cmp	r4, #48	@ 0x30
 8034e36:	d12c      	bne.n	8034e92 <_strtoul_l.constprop.0+0x86>
 8034e38:	7828      	ldrb	r0, [r5, #0]
 8034e3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8034e3e:	2858      	cmp	r0, #88	@ 0x58
 8034e40:	d127      	bne.n	8034e92 <_strtoul_l.constprop.0+0x86>
 8034e42:	786c      	ldrb	r4, [r5, #1]
 8034e44:	2310      	movs	r3, #16
 8034e46:	3502      	adds	r5, #2
 8034e48:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8034e4c:	2600      	movs	r6, #0
 8034e4e:	fbb8 f8f3 	udiv	r8, r8, r3
 8034e52:	fb03 f908 	mul.w	r9, r3, r8
 8034e56:	ea6f 0909 	mvn.w	r9, r9
 8034e5a:	4630      	mov	r0, r6
 8034e5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034e60:	f1bc 0f09 	cmp.w	ip, #9
 8034e64:	d81c      	bhi.n	8034ea0 <_strtoul_l.constprop.0+0x94>
 8034e66:	4664      	mov	r4, ip
 8034e68:	42a3      	cmp	r3, r4
 8034e6a:	dd2a      	ble.n	8034ec2 <_strtoul_l.constprop.0+0xb6>
 8034e6c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8034e70:	d007      	beq.n	8034e82 <_strtoul_l.constprop.0+0x76>
 8034e72:	4580      	cmp	r8, r0
 8034e74:	d322      	bcc.n	8034ebc <_strtoul_l.constprop.0+0xb0>
 8034e76:	d101      	bne.n	8034e7c <_strtoul_l.constprop.0+0x70>
 8034e78:	45a1      	cmp	r9, r4
 8034e7a:	db1f      	blt.n	8034ebc <_strtoul_l.constprop.0+0xb0>
 8034e7c:	fb00 4003 	mla	r0, r0, r3, r4
 8034e80:	2601      	movs	r6, #1
 8034e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034e86:	e7e9      	b.n	8034e5c <_strtoul_l.constprop.0+0x50>
 8034e88:	2c2b      	cmp	r4, #43	@ 0x2b
 8034e8a:	bf04      	itt	eq
 8034e8c:	782c      	ldrbeq	r4, [r5, #0]
 8034e8e:	1c85      	addeq	r5, r0, #2
 8034e90:	e7cd      	b.n	8034e2e <_strtoul_l.constprop.0+0x22>
 8034e92:	2b00      	cmp	r3, #0
 8034e94:	d1d8      	bne.n	8034e48 <_strtoul_l.constprop.0+0x3c>
 8034e96:	2c30      	cmp	r4, #48	@ 0x30
 8034e98:	bf0c      	ite	eq
 8034e9a:	2308      	moveq	r3, #8
 8034e9c:	230a      	movne	r3, #10
 8034e9e:	e7d3      	b.n	8034e48 <_strtoul_l.constprop.0+0x3c>
 8034ea0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034ea4:	f1bc 0f19 	cmp.w	ip, #25
 8034ea8:	d801      	bhi.n	8034eae <_strtoul_l.constprop.0+0xa2>
 8034eaa:	3c37      	subs	r4, #55	@ 0x37
 8034eac:	e7dc      	b.n	8034e68 <_strtoul_l.constprop.0+0x5c>
 8034eae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034eb2:	f1bc 0f19 	cmp.w	ip, #25
 8034eb6:	d804      	bhi.n	8034ec2 <_strtoul_l.constprop.0+0xb6>
 8034eb8:	3c57      	subs	r4, #87	@ 0x57
 8034eba:	e7d5      	b.n	8034e68 <_strtoul_l.constprop.0+0x5c>
 8034ebc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8034ec0:	e7df      	b.n	8034e82 <_strtoul_l.constprop.0+0x76>
 8034ec2:	1c73      	adds	r3, r6, #1
 8034ec4:	d106      	bne.n	8034ed4 <_strtoul_l.constprop.0+0xc8>
 8034ec6:	2322      	movs	r3, #34	@ 0x22
 8034ec8:	f8ce 3000 	str.w	r3, [lr]
 8034ecc:	4630      	mov	r0, r6
 8034ece:	b932      	cbnz	r2, 8034ede <_strtoul_l.constprop.0+0xd2>
 8034ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034ed4:	b107      	cbz	r7, 8034ed8 <_strtoul_l.constprop.0+0xcc>
 8034ed6:	4240      	negs	r0, r0
 8034ed8:	2a00      	cmp	r2, #0
 8034eda:	d0f9      	beq.n	8034ed0 <_strtoul_l.constprop.0+0xc4>
 8034edc:	b106      	cbz	r6, 8034ee0 <_strtoul_l.constprop.0+0xd4>
 8034ede:	1e69      	subs	r1, r5, #1
 8034ee0:	6011      	str	r1, [r2, #0]
 8034ee2:	e7f5      	b.n	8034ed0 <_strtoul_l.constprop.0+0xc4>
 8034ee4:	0803c039 	.word	0x0803c039

08034ee8 <_strtoul_r>:
 8034ee8:	f7ff bf90 	b.w	8034e0c <_strtoul_l.constprop.0>

08034eec <strtoul>:
 8034eec:	4613      	mov	r3, r2
 8034eee:	460a      	mov	r2, r1
 8034ef0:	4601      	mov	r1, r0
 8034ef2:	4802      	ldr	r0, [pc, #8]	@ (8034efc <strtoul+0x10>)
 8034ef4:	6800      	ldr	r0, [r0, #0]
 8034ef6:	f7ff bf89 	b.w	8034e0c <_strtoul_l.constprop.0>
 8034efa:	bf00      	nop
 8034efc:	200002d8 	.word	0x200002d8

08034f00 <__submore>:
 8034f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034f04:	460c      	mov	r4, r1
 8034f06:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8034f08:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8034f0c:	4299      	cmp	r1, r3
 8034f0e:	d11d      	bne.n	8034f4c <__submore+0x4c>
 8034f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8034f14:	f7f9 ffba 	bl	802ee8c <_malloc_r>
 8034f18:	b918      	cbnz	r0, 8034f22 <__submore+0x22>
 8034f1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8034f28:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8034f2c:	6320      	str	r0, [r4, #48]	@ 0x30
 8034f2e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8034f32:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8034f36:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8034f3a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8034f3e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8034f42:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8034f46:	6020      	str	r0, [r4, #0]
 8034f48:	2000      	movs	r0, #0
 8034f4a:	e7e8      	b.n	8034f1e <__submore+0x1e>
 8034f4c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8034f4e:	0077      	lsls	r7, r6, #1
 8034f50:	463a      	mov	r2, r7
 8034f52:	f7fe ffab 	bl	8033eac <_realloc_r>
 8034f56:	4605      	mov	r5, r0
 8034f58:	2800      	cmp	r0, #0
 8034f5a:	d0de      	beq.n	8034f1a <__submore+0x1a>
 8034f5c:	eb00 0806 	add.w	r8, r0, r6
 8034f60:	4601      	mov	r1, r0
 8034f62:	4632      	mov	r2, r6
 8034f64:	4640      	mov	r0, r8
 8034f66:	f7f8 ff77 	bl	802de58 <memcpy>
 8034f6a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 8034f6e:	f8c4 8000 	str.w	r8, [r4]
 8034f72:	e7e9      	b.n	8034f48 <__submore+0x48>

08034f74 <__ascii_wctomb>:
 8034f74:	4603      	mov	r3, r0
 8034f76:	4608      	mov	r0, r1
 8034f78:	b141      	cbz	r1, 8034f8c <__ascii_wctomb+0x18>
 8034f7a:	2aff      	cmp	r2, #255	@ 0xff
 8034f7c:	d904      	bls.n	8034f88 <__ascii_wctomb+0x14>
 8034f7e:	228a      	movs	r2, #138	@ 0x8a
 8034f80:	601a      	str	r2, [r3, #0]
 8034f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034f86:	4770      	bx	lr
 8034f88:	700a      	strb	r2, [r1, #0]
 8034f8a:	2001      	movs	r0, #1
 8034f8c:	4770      	bx	lr

08034f8e <__swbuf_r>:
 8034f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034f90:	460e      	mov	r6, r1
 8034f92:	4614      	mov	r4, r2
 8034f94:	4605      	mov	r5, r0
 8034f96:	b118      	cbz	r0, 8034fa0 <__swbuf_r+0x12>
 8034f98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8034f9a:	b90b      	cbnz	r3, 8034fa0 <__swbuf_r+0x12>
 8034f9c:	f7f7 fa7a 	bl	802c494 <__sinit>
 8034fa0:	69a3      	ldr	r3, [r4, #24]
 8034fa2:	60a3      	str	r3, [r4, #8]
 8034fa4:	89a3      	ldrh	r3, [r4, #12]
 8034fa6:	0719      	lsls	r1, r3, #28
 8034fa8:	d501      	bpl.n	8034fae <__swbuf_r+0x20>
 8034faa:	6923      	ldr	r3, [r4, #16]
 8034fac:	b943      	cbnz	r3, 8034fc0 <__swbuf_r+0x32>
 8034fae:	4621      	mov	r1, r4
 8034fb0:	4628      	mov	r0, r5
 8034fb2:	f7f7 fc2b 	bl	802c80c <__swsetup_r>
 8034fb6:	b118      	cbz	r0, 8034fc0 <__swbuf_r+0x32>
 8034fb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8034fbc:	4638      	mov	r0, r7
 8034fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034fc4:	b2f6      	uxtb	r6, r6
 8034fc6:	049a      	lsls	r2, r3, #18
 8034fc8:	4637      	mov	r7, r6
 8034fca:	d406      	bmi.n	8034fda <__swbuf_r+0x4c>
 8034fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8034fd0:	81a3      	strh	r3, [r4, #12]
 8034fd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034fd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034fd8:	6663      	str	r3, [r4, #100]	@ 0x64
 8034fda:	6823      	ldr	r3, [r4, #0]
 8034fdc:	6922      	ldr	r2, [r4, #16]
 8034fde:	1a98      	subs	r0, r3, r2
 8034fe0:	6963      	ldr	r3, [r4, #20]
 8034fe2:	4283      	cmp	r3, r0
 8034fe4:	dc05      	bgt.n	8034ff2 <__swbuf_r+0x64>
 8034fe6:	4621      	mov	r1, r4
 8034fe8:	4628      	mov	r0, r5
 8034fea:	f7f7 f911 	bl	802c210 <_fflush_r>
 8034fee:	2800      	cmp	r0, #0
 8034ff0:	d1e2      	bne.n	8034fb8 <__swbuf_r+0x2a>
 8034ff2:	68a3      	ldr	r3, [r4, #8]
 8034ff4:	3b01      	subs	r3, #1
 8034ff6:	60a3      	str	r3, [r4, #8]
 8034ff8:	6823      	ldr	r3, [r4, #0]
 8034ffa:	1c5a      	adds	r2, r3, #1
 8034ffc:	6022      	str	r2, [r4, #0]
 8034ffe:	701e      	strb	r6, [r3, #0]
 8035000:	6962      	ldr	r2, [r4, #20]
 8035002:	1c43      	adds	r3, r0, #1
 8035004:	429a      	cmp	r2, r3
 8035006:	d004      	beq.n	8035012 <__swbuf_r+0x84>
 8035008:	89a3      	ldrh	r3, [r4, #12]
 803500a:	07db      	lsls	r3, r3, #31
 803500c:	d5d6      	bpl.n	8034fbc <__swbuf_r+0x2e>
 803500e:	2e0a      	cmp	r6, #10
 8035010:	d1d4      	bne.n	8034fbc <__swbuf_r+0x2e>
 8035012:	4621      	mov	r1, r4
 8035014:	4628      	mov	r0, r5
 8035016:	f7f7 f8fb 	bl	802c210 <_fflush_r>
 803501a:	2800      	cmp	r0, #0
 803501c:	d0ce      	beq.n	8034fbc <__swbuf_r+0x2e>
 803501e:	e7cb      	b.n	8034fb8 <__swbuf_r+0x2a>

08035020 <_raise_r>:
 8035020:	291f      	cmp	r1, #31
 8035022:	b538      	push	{r3, r4, r5, lr}
 8035024:	4605      	mov	r5, r0
 8035026:	460c      	mov	r4, r1
 8035028:	d904      	bls.n	8035034 <_raise_r+0x14>
 803502a:	2316      	movs	r3, #22
 803502c:	6003      	str	r3, [r0, #0]
 803502e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035032:	bd38      	pop	{r3, r4, r5, pc}
 8035034:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8035038:	b112      	cbz	r2, 8035040 <_raise_r+0x20>
 803503a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803503e:	b94b      	cbnz	r3, 8035054 <_raise_r+0x34>
 8035040:	4628      	mov	r0, r5
 8035042:	f000 f8fd 	bl	8035240 <_getpid_r>
 8035046:	4622      	mov	r2, r4
 8035048:	4601      	mov	r1, r0
 803504a:	4628      	mov	r0, r5
 803504c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035050:	f000 b8e4 	b.w	803521c <_kill_r>
 8035054:	2b01      	cmp	r3, #1
 8035056:	d00a      	beq.n	803506e <_raise_r+0x4e>
 8035058:	1c59      	adds	r1, r3, #1
 803505a:	d103      	bne.n	8035064 <_raise_r+0x44>
 803505c:	2316      	movs	r3, #22
 803505e:	6003      	str	r3, [r0, #0]
 8035060:	2001      	movs	r0, #1
 8035062:	e7e6      	b.n	8035032 <_raise_r+0x12>
 8035064:	2100      	movs	r1, #0
 8035066:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803506a:	4620      	mov	r0, r4
 803506c:	4798      	blx	r3
 803506e:	2000      	movs	r0, #0
 8035070:	e7df      	b.n	8035032 <_raise_r+0x12>
	...

08035074 <raise>:
 8035074:	4b02      	ldr	r3, [pc, #8]	@ (8035080 <raise+0xc>)
 8035076:	4601      	mov	r1, r0
 8035078:	6818      	ldr	r0, [r3, #0]
 803507a:	f7ff bfd1 	b.w	8035020 <_raise_r>
 803507e:	bf00      	nop
 8035080:	200002d8 	.word	0x200002d8

08035084 <__gettzinfo>:
 8035084:	4800      	ldr	r0, [pc, #0]	@ (8035088 <__gettzinfo+0x4>)
 8035086:	4770      	bx	lr
 8035088:	20000818 	.word	0x20000818

0803508c <gmtime_r>:
 803508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035090:	4a4d      	ldr	r2, [pc, #308]	@ (80351c8 <gmtime_r+0x13c>)
 8035092:	460c      	mov	r4, r1
 8035094:	2300      	movs	r3, #0
 8035096:	e9d0 0100 	ldrd	r0, r1, [r0]
 803509a:	f7db fe0d 	bl	8010cb8 <__aeabi_ldivmod>
 803509e:	2a00      	cmp	r2, #0
 80350a0:	bfbc      	itt	lt
 80350a2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80350a6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80350aa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80350ae:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80350b2:	fbb2 f3f1 	udiv	r3, r2, r1
 80350b6:	fb01 2213 	mls	r2, r1, r3, r2
 80350ba:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80350be:	bfac      	ite	ge
 80350c0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80350c4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80350c8:	60a3      	str	r3, [r4, #8]
 80350ca:	fbb2 f3f1 	udiv	r3, r2, r1
 80350ce:	fb01 2213 	mls	r2, r1, r3, r2
 80350d2:	6063      	str	r3, [r4, #4]
 80350d4:	6022      	str	r2, [r4, #0]
 80350d6:	1cc3      	adds	r3, r0, #3
 80350d8:	2207      	movs	r2, #7
 80350da:	fb93 f2f2 	sdiv	r2, r3, r2
 80350de:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80350e2:	1a9b      	subs	r3, r3, r2
 80350e4:	bf48      	it	mi
 80350e6:	3307      	addmi	r3, #7
 80350e8:	2800      	cmp	r0, #0
 80350ea:	61a3      	str	r3, [r4, #24]
 80350ec:	bfb8      	it	lt
 80350ee:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 80350f2:	4936      	ldr	r1, [pc, #216]	@ (80351cc <gmtime_r+0x140>)
 80350f4:	bfae      	itee	ge
 80350f6:	fb90 f1f1 	sdivge	r1, r0, r1
 80350fa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 80350fe:	fb93 f1f1 	sdivlt	r1, r3, r1
 8035102:	4b33      	ldr	r3, [pc, #204]	@ (80351d0 <gmtime_r+0x144>)
 8035104:	fb03 0001 	mla	r0, r3, r1, r0
 8035108:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803510c:	fbb0 f3f3 	udiv	r3, r0, r3
 8035110:	4403      	add	r3, r0
 8035112:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8035116:	fbb0 f2fc 	udiv	r2, r0, ip
 803511a:	1a9b      	subs	r3, r3, r2
 803511c:	f240 176d 	movw	r7, #365	@ 0x16d
 8035120:	4a2c      	ldr	r2, [pc, #176]	@ (80351d4 <gmtime_r+0x148>)
 8035122:	fbb0 f2f2 	udiv	r2, r0, r2
 8035126:	2664      	movs	r6, #100	@ 0x64
 8035128:	1a9b      	subs	r3, r3, r2
 803512a:	fbb3 f2f7 	udiv	r2, r3, r7
 803512e:	fbb3 f3fc 	udiv	r3, r3, ip
 8035132:	fbb2 f5f6 	udiv	r5, r2, r6
 8035136:	1aeb      	subs	r3, r5, r3
 8035138:	4403      	add	r3, r0
 803513a:	fb07 3312 	mls	r3, r7, r2, r3
 803513e:	2099      	movs	r0, #153	@ 0x99
 8035140:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8035144:	3702      	adds	r7, #2
 8035146:	f103 0e01 	add.w	lr, r3, #1
 803514a:	fbb7 fcf0 	udiv	ip, r7, r0
 803514e:	fb00 f00c 	mul.w	r0, r0, ip
 8035152:	3002      	adds	r0, #2
 8035154:	f04f 0805 	mov.w	r8, #5
 8035158:	fbb0 f0f8 	udiv	r0, r0, r8
 803515c:	ebae 0000 	sub.w	r0, lr, r0
 8035160:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8035164:	4577      	cmp	r7, lr
 8035166:	bf8c      	ite	hi
 8035168:	f06f 0709 	mvnhi.w	r7, #9
 803516c:	2702      	movls	r7, #2
 803516e:	4467      	add	r7, ip
 8035170:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8035174:	fb0c 2101 	mla	r1, ip, r1, r2
 8035178:	2f01      	cmp	r7, #1
 803517a:	bf98      	it	ls
 803517c:	3101      	addls	r1, #1
 803517e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035182:	d30c      	bcc.n	803519e <gmtime_r+0x112>
 8035184:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035188:	61e3      	str	r3, [r4, #28]
 803518a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803518e:	2300      	movs	r3, #0
 8035190:	60e0      	str	r0, [r4, #12]
 8035192:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8035196:	6223      	str	r3, [r4, #32]
 8035198:	4620      	mov	r0, r4
 803519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803519e:	f012 0f03 	tst.w	r2, #3
 80351a2:	d102      	bne.n	80351aa <gmtime_r+0x11e>
 80351a4:	fb06 2515 	mls	r5, r6, r5, r2
 80351a8:	b95d      	cbnz	r5, 80351c2 <gmtime_r+0x136>
 80351aa:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80351ae:	fbb2 f6f5 	udiv	r6, r2, r5
 80351b2:	fb05 2216 	mls	r2, r5, r6, r2
 80351b6:	fab2 f282 	clz	r2, r2
 80351ba:	0952      	lsrs	r2, r2, #5
 80351bc:	333b      	adds	r3, #59	@ 0x3b
 80351be:	4413      	add	r3, r2
 80351c0:	e7e2      	b.n	8035188 <gmtime_r+0xfc>
 80351c2:	2201      	movs	r2, #1
 80351c4:	e7fa      	b.n	80351bc <gmtime_r+0x130>
 80351c6:	bf00      	nop
 80351c8:	00015180 	.word	0x00015180
 80351cc:	00023ab1 	.word	0x00023ab1
 80351d0:	fffdc54f 	.word	0xfffdc54f
 80351d4:	00023ab0 	.word	0x00023ab0

080351d8 <_fstat_r>:
 80351d8:	b538      	push	{r3, r4, r5, lr}
 80351da:	4d07      	ldr	r5, [pc, #28]	@ (80351f8 <_fstat_r+0x20>)
 80351dc:	2300      	movs	r3, #0
 80351de:	4604      	mov	r4, r0
 80351e0:	4608      	mov	r0, r1
 80351e2:	4611      	mov	r1, r2
 80351e4:	602b      	str	r3, [r5, #0]
 80351e6:	f7dd f914 	bl	8012412 <_fstat>
 80351ea:	1c43      	adds	r3, r0, #1
 80351ec:	d102      	bne.n	80351f4 <_fstat_r+0x1c>
 80351ee:	682b      	ldr	r3, [r5, #0]
 80351f0:	b103      	cbz	r3, 80351f4 <_fstat_r+0x1c>
 80351f2:	6023      	str	r3, [r4, #0]
 80351f4:	bd38      	pop	{r3, r4, r5, pc}
 80351f6:	bf00      	nop
 80351f8:	2001a044 	.word	0x2001a044

080351fc <_isatty_r>:
 80351fc:	b538      	push	{r3, r4, r5, lr}
 80351fe:	4d06      	ldr	r5, [pc, #24]	@ (8035218 <_isatty_r+0x1c>)
 8035200:	2300      	movs	r3, #0
 8035202:	4604      	mov	r4, r0
 8035204:	4608      	mov	r0, r1
 8035206:	602b      	str	r3, [r5, #0]
 8035208:	f7dd f908 	bl	801241c <_isatty>
 803520c:	1c43      	adds	r3, r0, #1
 803520e:	d102      	bne.n	8035216 <_isatty_r+0x1a>
 8035210:	682b      	ldr	r3, [r5, #0]
 8035212:	b103      	cbz	r3, 8035216 <_isatty_r+0x1a>
 8035214:	6023      	str	r3, [r4, #0]
 8035216:	bd38      	pop	{r3, r4, r5, pc}
 8035218:	2001a044 	.word	0x2001a044

0803521c <_kill_r>:
 803521c:	b538      	push	{r3, r4, r5, lr}
 803521e:	4d07      	ldr	r5, [pc, #28]	@ (803523c <_kill_r+0x20>)
 8035220:	2300      	movs	r3, #0
 8035222:	4604      	mov	r4, r0
 8035224:	4608      	mov	r0, r1
 8035226:	4611      	mov	r1, r2
 8035228:	602b      	str	r3, [r5, #0]
 803522a:	f7dd f8c3 	bl	80123b4 <_kill>
 803522e:	1c43      	adds	r3, r0, #1
 8035230:	d102      	bne.n	8035238 <_kill_r+0x1c>
 8035232:	682b      	ldr	r3, [r5, #0]
 8035234:	b103      	cbz	r3, 8035238 <_kill_r+0x1c>
 8035236:	6023      	str	r3, [r4, #0]
 8035238:	bd38      	pop	{r3, r4, r5, pc}
 803523a:	bf00      	nop
 803523c:	2001a044 	.word	0x2001a044

08035240 <_getpid_r>:
 8035240:	f7dd b8b6 	b.w	80123b0 <_getpid>

08035244 <_sbrk_r>:
 8035244:	b538      	push	{r3, r4, r5, lr}
 8035246:	4d06      	ldr	r5, [pc, #24]	@ (8035260 <_sbrk_r+0x1c>)
 8035248:	2300      	movs	r3, #0
 803524a:	4604      	mov	r4, r0
 803524c:	4608      	mov	r0, r1
 803524e:	602b      	str	r3, [r5, #0]
 8035250:	f7dd f8e8 	bl	8012424 <_sbrk>
 8035254:	1c43      	adds	r3, r0, #1
 8035256:	d102      	bne.n	803525e <_sbrk_r+0x1a>
 8035258:	682b      	ldr	r3, [r5, #0]
 803525a:	b103      	cbz	r3, 803525e <_sbrk_r+0x1a>
 803525c:	6023      	str	r3, [r4, #0]
 803525e:	bd38      	pop	{r3, r4, r5, pc}
 8035260:	2001a044 	.word	0x2001a044

08035264 <sysconf>:
 8035264:	2808      	cmp	r0, #8
 8035266:	b508      	push	{r3, lr}
 8035268:	d006      	beq.n	8035278 <sysconf+0x14>
 803526a:	f7f8 fdbd 	bl	802dde8 <__errno>
 803526e:	2316      	movs	r3, #22
 8035270:	6003      	str	r3, [r0, #0]
 8035272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035276:	bd08      	pop	{r3, pc}
 8035278:	2080      	movs	r0, #128	@ 0x80
 803527a:	e7fc      	b.n	8035276 <sysconf+0x12>

0803527c <_strtoll_l.constprop.0>:
 803527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035280:	b085      	sub	sp, #20
 8035282:	4690      	mov	r8, r2
 8035284:	4a43      	ldr	r2, [pc, #268]	@ (8035394 <_strtoll_l.constprop.0+0x118>)
 8035286:	9002      	str	r0, [sp, #8]
 8035288:	4689      	mov	r9, r1
 803528a:	461e      	mov	r6, r3
 803528c:	460d      	mov	r5, r1
 803528e:	462b      	mov	r3, r5
 8035290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035294:	5d17      	ldrb	r7, [r2, r4]
 8035296:	f017 0708 	ands.w	r7, r7, #8
 803529a:	d1f8      	bne.n	803528e <_strtoll_l.constprop.0+0x12>
 803529c:	2c2d      	cmp	r4, #45	@ 0x2d
 803529e:	d149      	bne.n	8035334 <_strtoll_l.constprop.0+0xb8>
 80352a0:	782c      	ldrb	r4, [r5, #0]
 80352a2:	2701      	movs	r7, #1
 80352a4:	1c9d      	adds	r5, r3, #2
 80352a6:	f036 0310 	bics.w	r3, r6, #16
 80352aa:	d109      	bne.n	80352c0 <_strtoll_l.constprop.0+0x44>
 80352ac:	2c30      	cmp	r4, #48	@ 0x30
 80352ae:	d146      	bne.n	803533e <_strtoll_l.constprop.0+0xc2>
 80352b0:	782b      	ldrb	r3, [r5, #0]
 80352b2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80352b6:	2b58      	cmp	r3, #88	@ 0x58
 80352b8:	d141      	bne.n	803533e <_strtoll_l.constprop.0+0xc2>
 80352ba:	786c      	ldrb	r4, [r5, #1]
 80352bc:	2610      	movs	r6, #16
 80352be:	3502      	adds	r5, #2
 80352c0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80352c4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80352c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80352cc:	17f3      	asrs	r3, r6, #31
 80352ce:	4632      	mov	r2, r6
 80352d0:	4658      	mov	r0, fp
 80352d2:	4651      	mov	r1, sl
 80352d4:	9303      	str	r3, [sp, #12]
 80352d6:	f7db fd3f 	bl	8010d58 <__aeabi_uldivmod>
 80352da:	9201      	str	r2, [sp, #4]
 80352dc:	2200      	movs	r2, #0
 80352de:	468e      	mov	lr, r1
 80352e0:	4684      	mov	ip, r0
 80352e2:	4611      	mov	r1, r2
 80352e4:	4610      	mov	r0, r2
 80352e6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80352ea:	2b09      	cmp	r3, #9
 80352ec:	d905      	bls.n	80352fa <_strtoll_l.constprop.0+0x7e>
 80352ee:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 80352f2:	2b19      	cmp	r3, #25
 80352f4:	d82a      	bhi.n	803534c <_strtoll_l.constprop.0+0xd0>
 80352f6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 80352fa:	429e      	cmp	r6, r3
 80352fc:	dd30      	ble.n	8035360 <_strtoll_l.constprop.0+0xe4>
 80352fe:	1c54      	adds	r4, r2, #1
 8035300:	d015      	beq.n	803532e <_strtoll_l.constprop.0+0xb2>
 8035302:	4584      	cmp	ip, r0
 8035304:	eb7e 0201 	sbcs.w	r2, lr, r1
 8035308:	d327      	bcc.n	803535a <_strtoll_l.constprop.0+0xde>
 803530a:	458e      	cmp	lr, r1
 803530c:	bf08      	it	eq
 803530e:	4584      	cmpeq	ip, r0
 8035310:	d102      	bne.n	8035318 <_strtoll_l.constprop.0+0x9c>
 8035312:	9a01      	ldr	r2, [sp, #4]
 8035314:	429a      	cmp	r2, r3
 8035316:	db20      	blt.n	803535a <_strtoll_l.constprop.0+0xde>
 8035318:	9a03      	ldr	r2, [sp, #12]
 803531a:	4371      	muls	r1, r6
 803531c:	fb00 1102 	mla	r1, r0, r2, r1
 8035320:	fba6 0200 	umull	r0, r2, r6, r0
 8035324:	440a      	add	r2, r1
 8035326:	1818      	adds	r0, r3, r0
 8035328:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803532c:	2201      	movs	r2, #1
 803532e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035332:	e7d8      	b.n	80352e6 <_strtoll_l.constprop.0+0x6a>
 8035334:	2c2b      	cmp	r4, #43	@ 0x2b
 8035336:	bf04      	itt	eq
 8035338:	782c      	ldrbeq	r4, [r5, #0]
 803533a:	1c9d      	addeq	r5, r3, #2
 803533c:	e7b3      	b.n	80352a6 <_strtoll_l.constprop.0+0x2a>
 803533e:	2e00      	cmp	r6, #0
 8035340:	d1be      	bne.n	80352c0 <_strtoll_l.constprop.0+0x44>
 8035342:	2c30      	cmp	r4, #48	@ 0x30
 8035344:	bf0c      	ite	eq
 8035346:	2608      	moveq	r6, #8
 8035348:	260a      	movne	r6, #10
 803534a:	e7b9      	b.n	80352c0 <_strtoll_l.constprop.0+0x44>
 803534c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8035350:	2b19      	cmp	r3, #25
 8035352:	d805      	bhi.n	8035360 <_strtoll_l.constprop.0+0xe4>
 8035354:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8035358:	e7cf      	b.n	80352fa <_strtoll_l.constprop.0+0x7e>
 803535a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803535e:	e7e6      	b.n	803532e <_strtoll_l.constprop.0+0xb2>
 8035360:	1c53      	adds	r3, r2, #1
 8035362:	d10a      	bne.n	803537a <_strtoll_l.constprop.0+0xfe>
 8035364:	9a02      	ldr	r2, [sp, #8]
 8035366:	2322      	movs	r3, #34	@ 0x22
 8035368:	6013      	str	r3, [r2, #0]
 803536a:	4658      	mov	r0, fp
 803536c:	4651      	mov	r1, sl
 803536e:	f1b8 0f00 	cmp.w	r8, #0
 8035372:	d10a      	bne.n	803538a <_strtoll_l.constprop.0+0x10e>
 8035374:	b005      	add	sp, #20
 8035376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803537a:	b117      	cbz	r7, 8035382 <_strtoll_l.constprop.0+0x106>
 803537c:	4240      	negs	r0, r0
 803537e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035382:	f1b8 0f00 	cmp.w	r8, #0
 8035386:	d0f5      	beq.n	8035374 <_strtoll_l.constprop.0+0xf8>
 8035388:	b10a      	cbz	r2, 803538e <_strtoll_l.constprop.0+0x112>
 803538a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803538e:	f8c8 9000 	str.w	r9, [r8]
 8035392:	e7ef      	b.n	8035374 <_strtoll_l.constprop.0+0xf8>
 8035394:	0803c039 	.word	0x0803c039

08035398 <_strtoll_r>:
 8035398:	f7ff bf70 	b.w	803527c <_strtoll_l.constprop.0>

0803539c <__libc_fini_array>:
 803539c:	b538      	push	{r3, r4, r5, lr}
 803539e:	4d07      	ldr	r5, [pc, #28]	@ (80353bc <__libc_fini_array+0x20>)
 80353a0:	4c07      	ldr	r4, [pc, #28]	@ (80353c0 <__libc_fini_array+0x24>)
 80353a2:	1b64      	subs	r4, r4, r5
 80353a4:	10a4      	asrs	r4, r4, #2
 80353a6:	b91c      	cbnz	r4, 80353b0 <__libc_fini_array+0x14>
 80353a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80353ac:	f000 bc9c 	b.w	8035ce8 <_fini>
 80353b0:	3c01      	subs	r4, #1
 80353b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80353b6:	4798      	blx	r3
 80353b8:	e7f5      	b.n	80353a6 <__libc_fini_array+0xa>
 80353ba:	bf00      	nop
 80353bc:	0803c450 	.word	0x0803c450
 80353c0:	0803c454 	.word	0x0803c454

080353c4 <_strtoull_l.constprop.0>:
 80353c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80353c8:	4691      	mov	r9, r2
 80353ca:	4a48      	ldr	r2, [pc, #288]	@ (80354ec <_strtoull_l.constprop.0+0x128>)
 80353cc:	9001      	str	r0, [sp, #4]
 80353ce:	468a      	mov	sl, r1
 80353d0:	461e      	mov	r6, r3
 80353d2:	460d      	mov	r5, r1
 80353d4:	462b      	mov	r3, r5
 80353d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80353da:	5d17      	ldrb	r7, [r2, r4]
 80353dc:	f017 0708 	ands.w	r7, r7, #8
 80353e0:	d1f8      	bne.n	80353d4 <_strtoull_l.constprop.0+0x10>
 80353e2:	2c2d      	cmp	r4, #45	@ 0x2d
 80353e4:	d14a      	bne.n	803547c <_strtoull_l.constprop.0+0xb8>
 80353e6:	782c      	ldrb	r4, [r5, #0]
 80353e8:	2701      	movs	r7, #1
 80353ea:	1c9d      	adds	r5, r3, #2
 80353ec:	f036 0310 	bics.w	r3, r6, #16
 80353f0:	d109      	bne.n	8035406 <_strtoull_l.constprop.0+0x42>
 80353f2:	2c30      	cmp	r4, #48	@ 0x30
 80353f4:	d147      	bne.n	8035486 <_strtoull_l.constprop.0+0xc2>
 80353f6:	782b      	ldrb	r3, [r5, #0]
 80353f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80353fc:	2b58      	cmp	r3, #88	@ 0x58
 80353fe:	d142      	bne.n	8035486 <_strtoull_l.constprop.0+0xc2>
 8035400:	786c      	ldrb	r4, [r5, #1]
 8035402:	2610      	movs	r6, #16
 8035404:	3502      	adds	r5, #2
 8035406:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803540a:	4632      	mov	r2, r6
 803540c:	465b      	mov	r3, fp
 803540e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035412:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035416:	f7db fc9f 	bl	8010d58 <__aeabi_uldivmod>
 803541a:	4632      	mov	r2, r6
 803541c:	9000      	str	r0, [sp, #0]
 803541e:	4688      	mov	r8, r1
 8035420:	465b      	mov	r3, fp
 8035422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035426:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803542a:	f7db fc95 	bl	8010d58 <__aeabi_uldivmod>
 803542e:	2300      	movs	r3, #0
 8035430:	4618      	mov	r0, r3
 8035432:	4619      	mov	r1, r3
 8035434:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035438:	f1bc 0f09 	cmp.w	ip, #9
 803543c:	d82a      	bhi.n	8035494 <_strtoull_l.constprop.0+0xd0>
 803543e:	4664      	mov	r4, ip
 8035440:	42a6      	cmp	r6, r4
 8035442:	dd38      	ble.n	80354b6 <_strtoull_l.constprop.0+0xf2>
 8035444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8035448:	d015      	beq.n	8035476 <_strtoull_l.constprop.0+0xb2>
 803544a:	9b00      	ldr	r3, [sp, #0]
 803544c:	4283      	cmp	r3, r0
 803544e:	eb78 0301 	sbcs.w	r3, r8, r1
 8035452:	d32d      	bcc.n	80354b0 <_strtoull_l.constprop.0+0xec>
 8035454:	9b00      	ldr	r3, [sp, #0]
 8035456:	4588      	cmp	r8, r1
 8035458:	bf08      	it	eq
 803545a:	4283      	cmpeq	r3, r0
 803545c:	d101      	bne.n	8035462 <_strtoull_l.constprop.0+0x9e>
 803545e:	42a2      	cmp	r2, r4
 8035460:	db26      	blt.n	80354b0 <_strtoull_l.constprop.0+0xec>
 8035462:	4371      	muls	r1, r6
 8035464:	fb00 110b 	mla	r1, r0, fp, r1
 8035468:	fba6 0300 	umull	r0, r3, r6, r0
 803546c:	4419      	add	r1, r3
 803546e:	1820      	adds	r0, r4, r0
 8035470:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035474:	2301      	movs	r3, #1
 8035476:	f815 4b01 	ldrb.w	r4, [r5], #1
 803547a:	e7db      	b.n	8035434 <_strtoull_l.constprop.0+0x70>
 803547c:	2c2b      	cmp	r4, #43	@ 0x2b
 803547e:	bf04      	itt	eq
 8035480:	782c      	ldrbeq	r4, [r5, #0]
 8035482:	1c9d      	addeq	r5, r3, #2
 8035484:	e7b2      	b.n	80353ec <_strtoull_l.constprop.0+0x28>
 8035486:	2e00      	cmp	r6, #0
 8035488:	d1bd      	bne.n	8035406 <_strtoull_l.constprop.0+0x42>
 803548a:	2c30      	cmp	r4, #48	@ 0x30
 803548c:	bf0c      	ite	eq
 803548e:	2608      	moveq	r6, #8
 8035490:	260a      	movne	r6, #10
 8035492:	e7b8      	b.n	8035406 <_strtoull_l.constprop.0+0x42>
 8035494:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035498:	f1bc 0f19 	cmp.w	ip, #25
 803549c:	d801      	bhi.n	80354a2 <_strtoull_l.constprop.0+0xde>
 803549e:	3c37      	subs	r4, #55	@ 0x37
 80354a0:	e7ce      	b.n	8035440 <_strtoull_l.constprop.0+0x7c>
 80354a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80354a6:	f1bc 0f19 	cmp.w	ip, #25
 80354aa:	d804      	bhi.n	80354b6 <_strtoull_l.constprop.0+0xf2>
 80354ac:	3c57      	subs	r4, #87	@ 0x57
 80354ae:	e7c7      	b.n	8035440 <_strtoull_l.constprop.0+0x7c>
 80354b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80354b4:	e7df      	b.n	8035476 <_strtoull_l.constprop.0+0xb2>
 80354b6:	1c5a      	adds	r2, r3, #1
 80354b8:	d10a      	bne.n	80354d0 <_strtoull_l.constprop.0+0x10c>
 80354ba:	9901      	ldr	r1, [sp, #4]
 80354bc:	2222      	movs	r2, #34	@ 0x22
 80354be:	600a      	str	r2, [r1, #0]
 80354c0:	4618      	mov	r0, r3
 80354c2:	4619      	mov	r1, r3
 80354c4:	f1b9 0f00 	cmp.w	r9, #0
 80354c8:	d10a      	bne.n	80354e0 <_strtoull_l.constprop.0+0x11c>
 80354ca:	b003      	add	sp, #12
 80354cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80354d0:	b117      	cbz	r7, 80354d8 <_strtoull_l.constprop.0+0x114>
 80354d2:	4240      	negs	r0, r0
 80354d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80354d8:	f1b9 0f00 	cmp.w	r9, #0
 80354dc:	d0f5      	beq.n	80354ca <_strtoull_l.constprop.0+0x106>
 80354de:	b10b      	cbz	r3, 80354e4 <_strtoull_l.constprop.0+0x120>
 80354e0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80354e4:	f8c9 a000 	str.w	sl, [r9]
 80354e8:	e7ef      	b.n	80354ca <_strtoull_l.constprop.0+0x106>
 80354ea:	bf00      	nop
 80354ec:	0803c039 	.word	0x0803c039

080354f0 <_strtoull_r>:
 80354f0:	f7ff bf68 	b.w	80353c4 <_strtoull_l.constprop.0>

080354f4 <_mbrtowc_r>:
 80354f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80354f6:	4c0a      	ldr	r4, [pc, #40]	@ (8035520 <_mbrtowc_r+0x2c>)
 80354f8:	9e08      	ldr	r6, [sp, #32]
 80354fa:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 80354fe:	9600      	str	r6, [sp, #0]
 8035500:	4605      	mov	r5, r0
 8035502:	4614      	mov	r4, r2
 8035504:	b912      	cbnz	r2, 803550c <_mbrtowc_r+0x18>
 8035506:	4a07      	ldr	r2, [pc, #28]	@ (8035524 <_mbrtowc_r+0x30>)
 8035508:	2301      	movs	r3, #1
 803550a:	4621      	mov	r1, r4
 803550c:	47b8      	blx	r7
 803550e:	1c43      	adds	r3, r0, #1
 8035510:	bf01      	itttt	eq
 8035512:	2300      	moveq	r3, #0
 8035514:	6033      	streq	r3, [r6, #0]
 8035516:	238a      	moveq	r3, #138	@ 0x8a
 8035518:	602b      	streq	r3, [r5, #0]
 803551a:	b003      	add	sp, #12
 803551c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803551e:	bf00      	nop
 8035520:	2000016c 	.word	0x2000016c
 8035524:	0803bc7a 	.word	0x0803bc7a

08035528 <iswspace>:
 8035528:	2100      	movs	r1, #0
 803552a:	f000 b801 	b.w	8035530 <iswspace_l>
	...

08035530 <iswspace_l>:
 8035530:	28ff      	cmp	r0, #255	@ 0xff
 8035532:	bf9d      	ittte	ls
 8035534:	4b02      	ldrls	r3, [pc, #8]	@ (8035540 <iswspace_l+0x10>)
 8035536:	5c18      	ldrbls	r0, [r3, r0]
 8035538:	f000 0008 	andls.w	r0, r0, #8
 803553c:	2000      	movhi	r0, #0
 803553e:	4770      	bx	lr
 8035540:	0803c039 	.word	0x0803c039

08035544 <__register_exitproc>:
 8035544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035548:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80355c0 <__register_exitproc+0x7c>
 803554c:	4606      	mov	r6, r0
 803554e:	f8da 0000 	ldr.w	r0, [sl]
 8035552:	4698      	mov	r8, r3
 8035554:	460f      	mov	r7, r1
 8035556:	4691      	mov	r9, r2
 8035558:	f7f8 fc7b 	bl	802de52 <__retarget_lock_acquire_recursive>
 803555c:	4b16      	ldr	r3, [pc, #88]	@ (80355b8 <__register_exitproc+0x74>)
 803555e:	681c      	ldr	r4, [r3, #0]
 8035560:	b90c      	cbnz	r4, 8035566 <__register_exitproc+0x22>
 8035562:	4c16      	ldr	r4, [pc, #88]	@ (80355bc <__register_exitproc+0x78>)
 8035564:	601c      	str	r4, [r3, #0]
 8035566:	6865      	ldr	r5, [r4, #4]
 8035568:	f8da 0000 	ldr.w	r0, [sl]
 803556c:	2d1f      	cmp	r5, #31
 803556e:	dd05      	ble.n	803557c <__register_exitproc+0x38>
 8035570:	f7f8 fc71 	bl	802de56 <__retarget_lock_release_recursive>
 8035574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803557c:	b19e      	cbz	r6, 80355a6 <__register_exitproc+0x62>
 803557e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035582:	2201      	movs	r2, #1
 8035584:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035588:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803558c:	40aa      	lsls	r2, r5
 803558e:	4313      	orrs	r3, r2
 8035590:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035594:	2e02      	cmp	r6, #2
 8035596:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803559a:	bf02      	ittt	eq
 803559c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80355a0:	4313      	orreq	r3, r2
 80355a2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80355a6:	1c6b      	adds	r3, r5, #1
 80355a8:	3502      	adds	r5, #2
 80355aa:	6063      	str	r3, [r4, #4]
 80355ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80355b0:	f7f8 fc51 	bl	802de56 <__retarget_lock_release_recursive>
 80355b4:	2000      	movs	r0, #0
 80355b6:	e7df      	b.n	8035578 <__register_exitproc+0x34>
 80355b8:	2001a050 	.word	0x2001a050
 80355bc:	2001a088 	.word	0x2001a088
 80355c0:	20000400 	.word	0x20000400
 80355c4:	00000000 	.word	0x00000000

080355c8 <nan>:
 80355c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80355d0 <nan+0x8>
 80355cc:	4770      	bx	lr
 80355ce:	bf00      	nop
 80355d0:	00000000 	.word	0x00000000
 80355d4:	7ff80000 	.word	0x7ff80000

080355d8 <nanf>:
 80355d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80355e0 <nanf+0x8>
 80355dc:	4770      	bx	lr
 80355de:	bf00      	nop
 80355e0:	7fc00000 	.word	0x7fc00000

080355e4 <_calloc_r>:
 80355e4:	b538      	push	{r3, r4, r5, lr}
 80355e6:	fba1 1502 	umull	r1, r5, r1, r2
 80355ea:	b935      	cbnz	r5, 80355fa <_calloc_r+0x16>
 80355ec:	f7f9 fc4e 	bl	802ee8c <_malloc_r>
 80355f0:	4604      	mov	r4, r0
 80355f2:	b938      	cbnz	r0, 8035604 <_calloc_r+0x20>
 80355f4:	2400      	movs	r4, #0
 80355f6:	4620      	mov	r0, r4
 80355f8:	bd38      	pop	{r3, r4, r5, pc}
 80355fa:	f7f8 fbf5 	bl	802dde8 <__errno>
 80355fe:	230c      	movs	r3, #12
 8035600:	6003      	str	r3, [r0, #0]
 8035602:	e7f7      	b.n	80355f4 <_calloc_r+0x10>
 8035604:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8035608:	f022 0203 	bic.w	r2, r2, #3
 803560c:	3a04      	subs	r2, #4
 803560e:	2a24      	cmp	r2, #36	@ 0x24
 8035610:	d819      	bhi.n	8035646 <_calloc_r+0x62>
 8035612:	2a13      	cmp	r2, #19
 8035614:	d915      	bls.n	8035642 <_calloc_r+0x5e>
 8035616:	2a1b      	cmp	r2, #27
 8035618:	e9c0 5500 	strd	r5, r5, [r0]
 803561c:	d806      	bhi.n	803562c <_calloc_r+0x48>
 803561e:	f100 0308 	add.w	r3, r0, #8
 8035622:	2200      	movs	r2, #0
 8035624:	e9c3 2200 	strd	r2, r2, [r3]
 8035628:	609a      	str	r2, [r3, #8]
 803562a:	e7e4      	b.n	80355f6 <_calloc_r+0x12>
 803562c:	2a24      	cmp	r2, #36	@ 0x24
 803562e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8035632:	bf11      	iteee	ne
 8035634:	f100 0310 	addne.w	r3, r0, #16
 8035638:	6105      	streq	r5, [r0, #16]
 803563a:	f100 0318 	addeq.w	r3, r0, #24
 803563e:	6145      	streq	r5, [r0, #20]
 8035640:	e7ef      	b.n	8035622 <_calloc_r+0x3e>
 8035642:	4603      	mov	r3, r0
 8035644:	e7ed      	b.n	8035622 <_calloc_r+0x3e>
 8035646:	4629      	mov	r1, r5
 8035648:	f7f7 f9ca 	bl	802c9e0 <memset>
 803564c:	e7d3      	b.n	80355f6 <_calloc_r+0x12>
	...

08035650 <__env_lock>:
 8035650:	4801      	ldr	r0, [pc, #4]	@ (8035658 <__env_lock+0x8>)
 8035652:	f7f8 bbfe 	b.w	802de52 <__retarget_lock_acquire_recursive>
 8035656:	bf00      	nop
 8035658:	2001a049 	.word	0x2001a049

0803565c <__env_unlock>:
 803565c:	4801      	ldr	r0, [pc, #4]	@ (8035664 <__env_unlock+0x8>)
 803565e:	f7f8 bbfa 	b.w	802de56 <__retarget_lock_release_recursive>
 8035662:	bf00      	nop
 8035664:	2001a049 	.word	0x2001a049

08035668 <rshift>:
 8035668:	6903      	ldr	r3, [r0, #16]
 803566a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803566e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035672:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035676:	f100 0414 	add.w	r4, r0, #20
 803567a:	dd45      	ble.n	8035708 <rshift+0xa0>
 803567c:	f011 011f 	ands.w	r1, r1, #31
 8035680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035688:	d10c      	bne.n	80356a4 <rshift+0x3c>
 803568a:	f100 0710 	add.w	r7, r0, #16
 803568e:	4629      	mov	r1, r5
 8035690:	42b1      	cmp	r1, r6
 8035692:	d334      	bcc.n	80356fe <rshift+0x96>
 8035694:	1a9b      	subs	r3, r3, r2
 8035696:	009b      	lsls	r3, r3, #2
 8035698:	1eea      	subs	r2, r5, #3
 803569a:	4296      	cmp	r6, r2
 803569c:	bf38      	it	cc
 803569e:	2300      	movcc	r3, #0
 80356a0:	4423      	add	r3, r4
 80356a2:	e015      	b.n	80356d0 <rshift+0x68>
 80356a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80356a8:	f1c1 0820 	rsb	r8, r1, #32
 80356ac:	40cf      	lsrs	r7, r1
 80356ae:	f105 0e04 	add.w	lr, r5, #4
 80356b2:	46a1      	mov	r9, r4
 80356b4:	4576      	cmp	r6, lr
 80356b6:	46f4      	mov	ip, lr
 80356b8:	d815      	bhi.n	80356e6 <rshift+0x7e>
 80356ba:	1a9a      	subs	r2, r3, r2
 80356bc:	0092      	lsls	r2, r2, #2
 80356be:	3a04      	subs	r2, #4
 80356c0:	3501      	adds	r5, #1
 80356c2:	42ae      	cmp	r6, r5
 80356c4:	bf38      	it	cc
 80356c6:	2200      	movcc	r2, #0
 80356c8:	18a3      	adds	r3, r4, r2
 80356ca:	50a7      	str	r7, [r4, r2]
 80356cc:	b107      	cbz	r7, 80356d0 <rshift+0x68>
 80356ce:	3304      	adds	r3, #4
 80356d0:	1b1a      	subs	r2, r3, r4
 80356d2:	42a3      	cmp	r3, r4
 80356d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80356d8:	bf08      	it	eq
 80356da:	2300      	moveq	r3, #0
 80356dc:	6102      	str	r2, [r0, #16]
 80356de:	bf08      	it	eq
 80356e0:	6143      	streq	r3, [r0, #20]
 80356e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80356e6:	f8dc c000 	ldr.w	ip, [ip]
 80356ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80356ee:	ea4c 0707 	orr.w	r7, ip, r7
 80356f2:	f849 7b04 	str.w	r7, [r9], #4
 80356f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80356fa:	40cf      	lsrs	r7, r1
 80356fc:	e7da      	b.n	80356b4 <rshift+0x4c>
 80356fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8035702:	f847 cf04 	str.w	ip, [r7, #4]!
 8035706:	e7c3      	b.n	8035690 <rshift+0x28>
 8035708:	4623      	mov	r3, r4
 803570a:	e7e1      	b.n	80356d0 <rshift+0x68>

0803570c <__hexdig_fun>:
 803570c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8035710:	2b09      	cmp	r3, #9
 8035712:	d802      	bhi.n	803571a <__hexdig_fun+0xe>
 8035714:	3820      	subs	r0, #32
 8035716:	b2c0      	uxtb	r0, r0
 8035718:	4770      	bx	lr
 803571a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803571e:	2b05      	cmp	r3, #5
 8035720:	d801      	bhi.n	8035726 <__hexdig_fun+0x1a>
 8035722:	3847      	subs	r0, #71	@ 0x47
 8035724:	e7f7      	b.n	8035716 <__hexdig_fun+0xa>
 8035726:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803572a:	2b05      	cmp	r3, #5
 803572c:	d801      	bhi.n	8035732 <__hexdig_fun+0x26>
 803572e:	3827      	subs	r0, #39	@ 0x27
 8035730:	e7f1      	b.n	8035716 <__hexdig_fun+0xa>
 8035732:	2000      	movs	r0, #0
 8035734:	4770      	bx	lr
	...

08035738 <__gethex>:
 8035738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803573c:	b085      	sub	sp, #20
 803573e:	468a      	mov	sl, r1
 8035740:	9302      	str	r3, [sp, #8]
 8035742:	680b      	ldr	r3, [r1, #0]
 8035744:	9001      	str	r0, [sp, #4]
 8035746:	4690      	mov	r8, r2
 8035748:	1c9c      	adds	r4, r3, #2
 803574a:	46a1      	mov	r9, r4
 803574c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8035750:	2830      	cmp	r0, #48	@ 0x30
 8035752:	d0fa      	beq.n	803574a <__gethex+0x12>
 8035754:	eba9 0303 	sub.w	r3, r9, r3
 8035758:	f1a3 0b02 	sub.w	fp, r3, #2
 803575c:	f7ff ffd6 	bl	803570c <__hexdig_fun>
 8035760:	4605      	mov	r5, r0
 8035762:	2800      	cmp	r0, #0
 8035764:	d168      	bne.n	8035838 <__gethex+0x100>
 8035766:	49a0      	ldr	r1, [pc, #640]	@ (80359e8 <__gethex+0x2b0>)
 8035768:	2201      	movs	r2, #1
 803576a:	4648      	mov	r0, r9
 803576c:	f7f7 f96d 	bl	802ca4a <strncmp>
 8035770:	4607      	mov	r7, r0
 8035772:	2800      	cmp	r0, #0
 8035774:	d167      	bne.n	8035846 <__gethex+0x10e>
 8035776:	f899 0001 	ldrb.w	r0, [r9, #1]
 803577a:	4626      	mov	r6, r4
 803577c:	f7ff ffc6 	bl	803570c <__hexdig_fun>
 8035780:	2800      	cmp	r0, #0
 8035782:	d062      	beq.n	803584a <__gethex+0x112>
 8035784:	4623      	mov	r3, r4
 8035786:	7818      	ldrb	r0, [r3, #0]
 8035788:	2830      	cmp	r0, #48	@ 0x30
 803578a:	4699      	mov	r9, r3
 803578c:	f103 0301 	add.w	r3, r3, #1
 8035790:	d0f9      	beq.n	8035786 <__gethex+0x4e>
 8035792:	f7ff ffbb 	bl	803570c <__hexdig_fun>
 8035796:	fab0 f580 	clz	r5, r0
 803579a:	096d      	lsrs	r5, r5, #5
 803579c:	f04f 0b01 	mov.w	fp, #1
 80357a0:	464a      	mov	r2, r9
 80357a2:	4616      	mov	r6, r2
 80357a4:	3201      	adds	r2, #1
 80357a6:	7830      	ldrb	r0, [r6, #0]
 80357a8:	f7ff ffb0 	bl	803570c <__hexdig_fun>
 80357ac:	2800      	cmp	r0, #0
 80357ae:	d1f8      	bne.n	80357a2 <__gethex+0x6a>
 80357b0:	498d      	ldr	r1, [pc, #564]	@ (80359e8 <__gethex+0x2b0>)
 80357b2:	2201      	movs	r2, #1
 80357b4:	4630      	mov	r0, r6
 80357b6:	f7f7 f948 	bl	802ca4a <strncmp>
 80357ba:	2800      	cmp	r0, #0
 80357bc:	d13f      	bne.n	803583e <__gethex+0x106>
 80357be:	b944      	cbnz	r4, 80357d2 <__gethex+0x9a>
 80357c0:	1c74      	adds	r4, r6, #1
 80357c2:	4622      	mov	r2, r4
 80357c4:	4616      	mov	r6, r2
 80357c6:	3201      	adds	r2, #1
 80357c8:	7830      	ldrb	r0, [r6, #0]
 80357ca:	f7ff ff9f 	bl	803570c <__hexdig_fun>
 80357ce:	2800      	cmp	r0, #0
 80357d0:	d1f8      	bne.n	80357c4 <__gethex+0x8c>
 80357d2:	1ba4      	subs	r4, r4, r6
 80357d4:	00a7      	lsls	r7, r4, #2
 80357d6:	7833      	ldrb	r3, [r6, #0]
 80357d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80357dc:	2b50      	cmp	r3, #80	@ 0x50
 80357de:	d13e      	bne.n	803585e <__gethex+0x126>
 80357e0:	7873      	ldrb	r3, [r6, #1]
 80357e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80357e4:	d033      	beq.n	803584e <__gethex+0x116>
 80357e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80357e8:	d034      	beq.n	8035854 <__gethex+0x11c>
 80357ea:	1c71      	adds	r1, r6, #1
 80357ec:	2400      	movs	r4, #0
 80357ee:	7808      	ldrb	r0, [r1, #0]
 80357f0:	f7ff ff8c 	bl	803570c <__hexdig_fun>
 80357f4:	1e43      	subs	r3, r0, #1
 80357f6:	b2db      	uxtb	r3, r3
 80357f8:	2b18      	cmp	r3, #24
 80357fa:	d830      	bhi.n	803585e <__gethex+0x126>
 80357fc:	f1a0 0210 	sub.w	r2, r0, #16
 8035800:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8035804:	f7ff ff82 	bl	803570c <__hexdig_fun>
 8035808:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 803580c:	fa5f fc8c 	uxtb.w	ip, ip
 8035810:	f1bc 0f18 	cmp.w	ip, #24
 8035814:	f04f 030a 	mov.w	r3, #10
 8035818:	d91e      	bls.n	8035858 <__gethex+0x120>
 803581a:	b104      	cbz	r4, 803581e <__gethex+0xe6>
 803581c:	4252      	negs	r2, r2
 803581e:	4417      	add	r7, r2
 8035820:	f8ca 1000 	str.w	r1, [sl]
 8035824:	b1ed      	cbz	r5, 8035862 <__gethex+0x12a>
 8035826:	f1bb 0f00 	cmp.w	fp, #0
 803582a:	bf0c      	ite	eq
 803582c:	2506      	moveq	r5, #6
 803582e:	2500      	movne	r5, #0
 8035830:	4628      	mov	r0, r5
 8035832:	b005      	add	sp, #20
 8035834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035838:	2500      	movs	r5, #0
 803583a:	462c      	mov	r4, r5
 803583c:	e7b0      	b.n	80357a0 <__gethex+0x68>
 803583e:	2c00      	cmp	r4, #0
 8035840:	d1c7      	bne.n	80357d2 <__gethex+0x9a>
 8035842:	4627      	mov	r7, r4
 8035844:	e7c7      	b.n	80357d6 <__gethex+0x9e>
 8035846:	464e      	mov	r6, r9
 8035848:	462f      	mov	r7, r5
 803584a:	2501      	movs	r5, #1
 803584c:	e7c3      	b.n	80357d6 <__gethex+0x9e>
 803584e:	2400      	movs	r4, #0
 8035850:	1cb1      	adds	r1, r6, #2
 8035852:	e7cc      	b.n	80357ee <__gethex+0xb6>
 8035854:	2401      	movs	r4, #1
 8035856:	e7fb      	b.n	8035850 <__gethex+0x118>
 8035858:	fb03 0002 	mla	r0, r3, r2, r0
 803585c:	e7ce      	b.n	80357fc <__gethex+0xc4>
 803585e:	4631      	mov	r1, r6
 8035860:	e7de      	b.n	8035820 <__gethex+0xe8>
 8035862:	eba6 0309 	sub.w	r3, r6, r9
 8035866:	3b01      	subs	r3, #1
 8035868:	4629      	mov	r1, r5
 803586a:	2b07      	cmp	r3, #7
 803586c:	dc0a      	bgt.n	8035884 <__gethex+0x14c>
 803586e:	9801      	ldr	r0, [sp, #4]
 8035870:	f7fd fe22 	bl	80334b8 <_Balloc>
 8035874:	4604      	mov	r4, r0
 8035876:	b940      	cbnz	r0, 803588a <__gethex+0x152>
 8035878:	4b5c      	ldr	r3, [pc, #368]	@ (80359ec <__gethex+0x2b4>)
 803587a:	4602      	mov	r2, r0
 803587c:	21e4      	movs	r1, #228	@ 0xe4
 803587e:	485c      	ldr	r0, [pc, #368]	@ (80359f0 <__gethex+0x2b8>)
 8035880:	f7f4 fb5c 	bl	8029f3c <__assert_func>
 8035884:	3101      	adds	r1, #1
 8035886:	105b      	asrs	r3, r3, #1
 8035888:	e7ef      	b.n	803586a <__gethex+0x132>
 803588a:	f100 0a14 	add.w	sl, r0, #20
 803588e:	2300      	movs	r3, #0
 8035890:	4655      	mov	r5, sl
 8035892:	469b      	mov	fp, r3
 8035894:	45b1      	cmp	r9, r6
 8035896:	d337      	bcc.n	8035908 <__gethex+0x1d0>
 8035898:	f845 bb04 	str.w	fp, [r5], #4
 803589c:	eba5 050a 	sub.w	r5, r5, sl
 80358a0:	10ad      	asrs	r5, r5, #2
 80358a2:	6125      	str	r5, [r4, #16]
 80358a4:	4658      	mov	r0, fp
 80358a6:	f7fd fec5 	bl	8033634 <__hi0bits>
 80358aa:	016d      	lsls	r5, r5, #5
 80358ac:	f8d8 6000 	ldr.w	r6, [r8]
 80358b0:	1a2d      	subs	r5, r5, r0
 80358b2:	42b5      	cmp	r5, r6
 80358b4:	dd54      	ble.n	8035960 <__gethex+0x228>
 80358b6:	1bad      	subs	r5, r5, r6
 80358b8:	4629      	mov	r1, r5
 80358ba:	4620      	mov	r0, r4
 80358bc:	f7fe fa3f 	bl	8033d3e <__any_on>
 80358c0:	4681      	mov	r9, r0
 80358c2:	b178      	cbz	r0, 80358e4 <__gethex+0x1ac>
 80358c4:	1e6b      	subs	r3, r5, #1
 80358c6:	1159      	asrs	r1, r3, #5
 80358c8:	f003 021f 	and.w	r2, r3, #31
 80358cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80358d0:	f04f 0901 	mov.w	r9, #1
 80358d4:	fa09 f202 	lsl.w	r2, r9, r2
 80358d8:	420a      	tst	r2, r1
 80358da:	d003      	beq.n	80358e4 <__gethex+0x1ac>
 80358dc:	454b      	cmp	r3, r9
 80358de:	dc36      	bgt.n	803594e <__gethex+0x216>
 80358e0:	f04f 0902 	mov.w	r9, #2
 80358e4:	4629      	mov	r1, r5
 80358e6:	4620      	mov	r0, r4
 80358e8:	f7ff febe 	bl	8035668 <rshift>
 80358ec:	442f      	add	r7, r5
 80358ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80358f2:	42bb      	cmp	r3, r7
 80358f4:	da42      	bge.n	803597c <__gethex+0x244>
 80358f6:	9801      	ldr	r0, [sp, #4]
 80358f8:	4621      	mov	r1, r4
 80358fa:	f7fd fe02 	bl	8033502 <_Bfree>
 80358fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035900:	2300      	movs	r3, #0
 8035902:	6013      	str	r3, [r2, #0]
 8035904:	25a3      	movs	r5, #163	@ 0xa3
 8035906:	e793      	b.n	8035830 <__gethex+0xf8>
 8035908:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 803590c:	2a2e      	cmp	r2, #46	@ 0x2e
 803590e:	d012      	beq.n	8035936 <__gethex+0x1fe>
 8035910:	2b20      	cmp	r3, #32
 8035912:	d104      	bne.n	803591e <__gethex+0x1e6>
 8035914:	f845 bb04 	str.w	fp, [r5], #4
 8035918:	f04f 0b00 	mov.w	fp, #0
 803591c:	465b      	mov	r3, fp
 803591e:	7830      	ldrb	r0, [r6, #0]
 8035920:	9303      	str	r3, [sp, #12]
 8035922:	f7ff fef3 	bl	803570c <__hexdig_fun>
 8035926:	9b03      	ldr	r3, [sp, #12]
 8035928:	f000 000f 	and.w	r0, r0, #15
 803592c:	4098      	lsls	r0, r3
 803592e:	ea4b 0b00 	orr.w	fp, fp, r0
 8035932:	3304      	adds	r3, #4
 8035934:	e7ae      	b.n	8035894 <__gethex+0x15c>
 8035936:	45b1      	cmp	r9, r6
 8035938:	d8ea      	bhi.n	8035910 <__gethex+0x1d8>
 803593a:	492b      	ldr	r1, [pc, #172]	@ (80359e8 <__gethex+0x2b0>)
 803593c:	9303      	str	r3, [sp, #12]
 803593e:	2201      	movs	r2, #1
 8035940:	4630      	mov	r0, r6
 8035942:	f7f7 f882 	bl	802ca4a <strncmp>
 8035946:	9b03      	ldr	r3, [sp, #12]
 8035948:	2800      	cmp	r0, #0
 803594a:	d1e1      	bne.n	8035910 <__gethex+0x1d8>
 803594c:	e7a2      	b.n	8035894 <__gethex+0x15c>
 803594e:	1ea9      	subs	r1, r5, #2
 8035950:	4620      	mov	r0, r4
 8035952:	f7fe f9f4 	bl	8033d3e <__any_on>
 8035956:	2800      	cmp	r0, #0
 8035958:	d0c2      	beq.n	80358e0 <__gethex+0x1a8>
 803595a:	f04f 0903 	mov.w	r9, #3
 803595e:	e7c1      	b.n	80358e4 <__gethex+0x1ac>
 8035960:	da09      	bge.n	8035976 <__gethex+0x23e>
 8035962:	1b75      	subs	r5, r6, r5
 8035964:	4621      	mov	r1, r4
 8035966:	9801      	ldr	r0, [sp, #4]
 8035968:	462a      	mov	r2, r5
 803596a:	f7fd ffaf 	bl	80338cc <__lshift>
 803596e:	1b7f      	subs	r7, r7, r5
 8035970:	4604      	mov	r4, r0
 8035972:	f100 0a14 	add.w	sl, r0, #20
 8035976:	f04f 0900 	mov.w	r9, #0
 803597a:	e7b8      	b.n	80358ee <__gethex+0x1b6>
 803597c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8035980:	42bd      	cmp	r5, r7
 8035982:	dd6f      	ble.n	8035a64 <__gethex+0x32c>
 8035984:	1bed      	subs	r5, r5, r7
 8035986:	42ae      	cmp	r6, r5
 8035988:	dc34      	bgt.n	80359f4 <__gethex+0x2bc>
 803598a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803598e:	2b02      	cmp	r3, #2
 8035990:	d022      	beq.n	80359d8 <__gethex+0x2a0>
 8035992:	2b03      	cmp	r3, #3
 8035994:	d024      	beq.n	80359e0 <__gethex+0x2a8>
 8035996:	2b01      	cmp	r3, #1
 8035998:	d115      	bne.n	80359c6 <__gethex+0x28e>
 803599a:	42ae      	cmp	r6, r5
 803599c:	d113      	bne.n	80359c6 <__gethex+0x28e>
 803599e:	2e01      	cmp	r6, #1
 80359a0:	d10b      	bne.n	80359ba <__gethex+0x282>
 80359a2:	9a02      	ldr	r2, [sp, #8]
 80359a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80359a8:	6013      	str	r3, [r2, #0]
 80359aa:	2301      	movs	r3, #1
 80359ac:	6123      	str	r3, [r4, #16]
 80359ae:	f8ca 3000 	str.w	r3, [sl]
 80359b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80359b4:	2562      	movs	r5, #98	@ 0x62
 80359b6:	601c      	str	r4, [r3, #0]
 80359b8:	e73a      	b.n	8035830 <__gethex+0xf8>
 80359ba:	1e71      	subs	r1, r6, #1
 80359bc:	4620      	mov	r0, r4
 80359be:	f7fe f9be 	bl	8033d3e <__any_on>
 80359c2:	2800      	cmp	r0, #0
 80359c4:	d1ed      	bne.n	80359a2 <__gethex+0x26a>
 80359c6:	9801      	ldr	r0, [sp, #4]
 80359c8:	4621      	mov	r1, r4
 80359ca:	f7fd fd9a 	bl	8033502 <_Bfree>
 80359ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80359d0:	2300      	movs	r3, #0
 80359d2:	6013      	str	r3, [r2, #0]
 80359d4:	2550      	movs	r5, #80	@ 0x50
 80359d6:	e72b      	b.n	8035830 <__gethex+0xf8>
 80359d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80359da:	2b00      	cmp	r3, #0
 80359dc:	d1f3      	bne.n	80359c6 <__gethex+0x28e>
 80359de:	e7e0      	b.n	80359a2 <__gethex+0x26a>
 80359e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80359e2:	2b00      	cmp	r3, #0
 80359e4:	d1dd      	bne.n	80359a2 <__gethex+0x26a>
 80359e6:	e7ee      	b.n	80359c6 <__gethex+0x28e>
 80359e8:	0803be0e 	.word	0x0803be0e
 80359ec:	0803c146 	.word	0x0803c146
 80359f0:	0803c3e0 	.word	0x0803c3e0
 80359f4:	1e6f      	subs	r7, r5, #1
 80359f6:	f1b9 0f00 	cmp.w	r9, #0
 80359fa:	d130      	bne.n	8035a5e <__gethex+0x326>
 80359fc:	b127      	cbz	r7, 8035a08 <__gethex+0x2d0>
 80359fe:	4639      	mov	r1, r7
 8035a00:	4620      	mov	r0, r4
 8035a02:	f7fe f99c 	bl	8033d3e <__any_on>
 8035a06:	4681      	mov	r9, r0
 8035a08:	117a      	asrs	r2, r7, #5
 8035a0a:	2301      	movs	r3, #1
 8035a0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8035a10:	f007 071f 	and.w	r7, r7, #31
 8035a14:	40bb      	lsls	r3, r7
 8035a16:	4213      	tst	r3, r2
 8035a18:	4629      	mov	r1, r5
 8035a1a:	4620      	mov	r0, r4
 8035a1c:	bf18      	it	ne
 8035a1e:	f049 0902 	orrne.w	r9, r9, #2
 8035a22:	f7ff fe21 	bl	8035668 <rshift>
 8035a26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8035a2a:	1b76      	subs	r6, r6, r5
 8035a2c:	2502      	movs	r5, #2
 8035a2e:	f1b9 0f00 	cmp.w	r9, #0
 8035a32:	d047      	beq.n	8035ac4 <__gethex+0x38c>
 8035a34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8035a38:	2b02      	cmp	r3, #2
 8035a3a:	d015      	beq.n	8035a68 <__gethex+0x330>
 8035a3c:	2b03      	cmp	r3, #3
 8035a3e:	d017      	beq.n	8035a70 <__gethex+0x338>
 8035a40:	2b01      	cmp	r3, #1
 8035a42:	d109      	bne.n	8035a58 <__gethex+0x320>
 8035a44:	f019 0f02 	tst.w	r9, #2
 8035a48:	d006      	beq.n	8035a58 <__gethex+0x320>
 8035a4a:	f8da 3000 	ldr.w	r3, [sl]
 8035a4e:	ea49 0903 	orr.w	r9, r9, r3
 8035a52:	f019 0f01 	tst.w	r9, #1
 8035a56:	d10e      	bne.n	8035a76 <__gethex+0x33e>
 8035a58:	f045 0510 	orr.w	r5, r5, #16
 8035a5c:	e032      	b.n	8035ac4 <__gethex+0x38c>
 8035a5e:	f04f 0901 	mov.w	r9, #1
 8035a62:	e7d1      	b.n	8035a08 <__gethex+0x2d0>
 8035a64:	2501      	movs	r5, #1
 8035a66:	e7e2      	b.n	8035a2e <__gethex+0x2f6>
 8035a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035a6a:	f1c3 0301 	rsb	r3, r3, #1
 8035a6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035a72:	2b00      	cmp	r3, #0
 8035a74:	d0f0      	beq.n	8035a58 <__gethex+0x320>
 8035a76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8035a7a:	f104 0314 	add.w	r3, r4, #20
 8035a7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035a82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035a86:	f04f 0c00 	mov.w	ip, #0
 8035a8a:	4618      	mov	r0, r3
 8035a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035a90:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8035a94:	d01b      	beq.n	8035ace <__gethex+0x396>
 8035a96:	3201      	adds	r2, #1
 8035a98:	6002      	str	r2, [r0, #0]
 8035a9a:	2d02      	cmp	r5, #2
 8035a9c:	f104 0314 	add.w	r3, r4, #20
 8035aa0:	d13c      	bne.n	8035b1c <__gethex+0x3e4>
 8035aa2:	f8d8 2000 	ldr.w	r2, [r8]
 8035aa6:	3a01      	subs	r2, #1
 8035aa8:	42b2      	cmp	r2, r6
 8035aaa:	d109      	bne.n	8035ac0 <__gethex+0x388>
 8035aac:	1171      	asrs	r1, r6, #5
 8035aae:	2201      	movs	r2, #1
 8035ab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8035ab4:	f006 061f 	and.w	r6, r6, #31
 8035ab8:	fa02 f606 	lsl.w	r6, r2, r6
 8035abc:	421e      	tst	r6, r3
 8035abe:	d13a      	bne.n	8035b36 <__gethex+0x3fe>
 8035ac0:	f045 0520 	orr.w	r5, r5, #32
 8035ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035ac6:	601c      	str	r4, [r3, #0]
 8035ac8:	9b02      	ldr	r3, [sp, #8]
 8035aca:	601f      	str	r7, [r3, #0]
 8035acc:	e6b0      	b.n	8035830 <__gethex+0xf8>
 8035ace:	4299      	cmp	r1, r3
 8035ad0:	f843 cc04 	str.w	ip, [r3, #-4]
 8035ad4:	d8d9      	bhi.n	8035a8a <__gethex+0x352>
 8035ad6:	68a3      	ldr	r3, [r4, #8]
 8035ad8:	459b      	cmp	fp, r3
 8035ada:	db17      	blt.n	8035b0c <__gethex+0x3d4>
 8035adc:	6861      	ldr	r1, [r4, #4]
 8035ade:	9801      	ldr	r0, [sp, #4]
 8035ae0:	3101      	adds	r1, #1
 8035ae2:	f7fd fce9 	bl	80334b8 <_Balloc>
 8035ae6:	4681      	mov	r9, r0
 8035ae8:	b918      	cbnz	r0, 8035af2 <__gethex+0x3ba>
 8035aea:	4b1a      	ldr	r3, [pc, #104]	@ (8035b54 <__gethex+0x41c>)
 8035aec:	4602      	mov	r2, r0
 8035aee:	2184      	movs	r1, #132	@ 0x84
 8035af0:	e6c5      	b.n	803587e <__gethex+0x146>
 8035af2:	6922      	ldr	r2, [r4, #16]
 8035af4:	3202      	adds	r2, #2
 8035af6:	f104 010c 	add.w	r1, r4, #12
 8035afa:	0092      	lsls	r2, r2, #2
 8035afc:	300c      	adds	r0, #12
 8035afe:	f7f8 f9ab 	bl	802de58 <memcpy>
 8035b02:	4621      	mov	r1, r4
 8035b04:	9801      	ldr	r0, [sp, #4]
 8035b06:	f7fd fcfc 	bl	8033502 <_Bfree>
 8035b0a:	464c      	mov	r4, r9
 8035b0c:	6923      	ldr	r3, [r4, #16]
 8035b0e:	1c5a      	adds	r2, r3, #1
 8035b10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8035b14:	6122      	str	r2, [r4, #16]
 8035b16:	2201      	movs	r2, #1
 8035b18:	615a      	str	r2, [r3, #20]
 8035b1a:	e7be      	b.n	8035a9a <__gethex+0x362>
 8035b1c:	6922      	ldr	r2, [r4, #16]
 8035b1e:	455a      	cmp	r2, fp
 8035b20:	dd0b      	ble.n	8035b3a <__gethex+0x402>
 8035b22:	2101      	movs	r1, #1
 8035b24:	4620      	mov	r0, r4
 8035b26:	f7ff fd9f 	bl	8035668 <rshift>
 8035b2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035b2e:	3701      	adds	r7, #1
 8035b30:	42bb      	cmp	r3, r7
 8035b32:	f6ff aee0 	blt.w	80358f6 <__gethex+0x1be>
 8035b36:	2501      	movs	r5, #1
 8035b38:	e7c2      	b.n	8035ac0 <__gethex+0x388>
 8035b3a:	f016 061f 	ands.w	r6, r6, #31
 8035b3e:	d0fa      	beq.n	8035b36 <__gethex+0x3fe>
 8035b40:	4453      	add	r3, sl
 8035b42:	f1c6 0620 	rsb	r6, r6, #32
 8035b46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8035b4a:	f7fd fd73 	bl	8033634 <__hi0bits>
 8035b4e:	42b0      	cmp	r0, r6
 8035b50:	dbe7      	blt.n	8035b22 <__gethex+0x3ea>
 8035b52:	e7f0      	b.n	8035b36 <__gethex+0x3fe>
 8035b54:	0803c146 	.word	0x0803c146

08035b58 <L_shift>:
 8035b58:	f1c2 0208 	rsb	r2, r2, #8
 8035b5c:	0092      	lsls	r2, r2, #2
 8035b5e:	b570      	push	{r4, r5, r6, lr}
 8035b60:	f1c2 0620 	rsb	r6, r2, #32
 8035b64:	6843      	ldr	r3, [r0, #4]
 8035b66:	6804      	ldr	r4, [r0, #0]
 8035b68:	fa03 f506 	lsl.w	r5, r3, r6
 8035b6c:	432c      	orrs	r4, r5
 8035b6e:	40d3      	lsrs	r3, r2
 8035b70:	6004      	str	r4, [r0, #0]
 8035b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8035b76:	4288      	cmp	r0, r1
 8035b78:	d3f4      	bcc.n	8035b64 <L_shift+0xc>
 8035b7a:	bd70      	pop	{r4, r5, r6, pc}

08035b7c <__match>:
 8035b7c:	b530      	push	{r4, r5, lr}
 8035b7e:	6803      	ldr	r3, [r0, #0]
 8035b80:	3301      	adds	r3, #1
 8035b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035b86:	b914      	cbnz	r4, 8035b8e <__match+0x12>
 8035b88:	6003      	str	r3, [r0, #0]
 8035b8a:	2001      	movs	r0, #1
 8035b8c:	bd30      	pop	{r4, r5, pc}
 8035b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035b92:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8035b96:	2d19      	cmp	r5, #25
 8035b98:	bf98      	it	ls
 8035b9a:	3220      	addls	r2, #32
 8035b9c:	42a2      	cmp	r2, r4
 8035b9e:	d0f0      	beq.n	8035b82 <__match+0x6>
 8035ba0:	2000      	movs	r0, #0
 8035ba2:	e7f3      	b.n	8035b8c <__match+0x10>

08035ba4 <__hexnan>:
 8035ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035ba8:	680b      	ldr	r3, [r1, #0]
 8035baa:	6801      	ldr	r1, [r0, #0]
 8035bac:	115e      	asrs	r6, r3, #5
 8035bae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8035bb2:	f013 031f 	ands.w	r3, r3, #31
 8035bb6:	b087      	sub	sp, #28
 8035bb8:	bf18      	it	ne
 8035bba:	3604      	addne	r6, #4
 8035bbc:	2500      	movs	r5, #0
 8035bbe:	1f37      	subs	r7, r6, #4
 8035bc0:	4682      	mov	sl, r0
 8035bc2:	4690      	mov	r8, r2
 8035bc4:	9301      	str	r3, [sp, #4]
 8035bc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8035bca:	46b9      	mov	r9, r7
 8035bcc:	463c      	mov	r4, r7
 8035bce:	9502      	str	r5, [sp, #8]
 8035bd0:	46ab      	mov	fp, r5
 8035bd2:	784a      	ldrb	r2, [r1, #1]
 8035bd4:	1c4b      	adds	r3, r1, #1
 8035bd6:	9303      	str	r3, [sp, #12]
 8035bd8:	b342      	cbz	r2, 8035c2c <__hexnan+0x88>
 8035bda:	4610      	mov	r0, r2
 8035bdc:	9105      	str	r1, [sp, #20]
 8035bde:	9204      	str	r2, [sp, #16]
 8035be0:	f7ff fd94 	bl	803570c <__hexdig_fun>
 8035be4:	2800      	cmp	r0, #0
 8035be6:	d151      	bne.n	8035c8c <__hexnan+0xe8>
 8035be8:	9a04      	ldr	r2, [sp, #16]
 8035bea:	9905      	ldr	r1, [sp, #20]
 8035bec:	2a20      	cmp	r2, #32
 8035bee:	d818      	bhi.n	8035c22 <__hexnan+0x7e>
 8035bf0:	9b02      	ldr	r3, [sp, #8]
 8035bf2:	459b      	cmp	fp, r3
 8035bf4:	dd13      	ble.n	8035c1e <__hexnan+0x7a>
 8035bf6:	454c      	cmp	r4, r9
 8035bf8:	d206      	bcs.n	8035c08 <__hexnan+0x64>
 8035bfa:	2d07      	cmp	r5, #7
 8035bfc:	dc04      	bgt.n	8035c08 <__hexnan+0x64>
 8035bfe:	462a      	mov	r2, r5
 8035c00:	4649      	mov	r1, r9
 8035c02:	4620      	mov	r0, r4
 8035c04:	f7ff ffa8 	bl	8035b58 <L_shift>
 8035c08:	4544      	cmp	r4, r8
 8035c0a:	d952      	bls.n	8035cb2 <__hexnan+0x10e>
 8035c0c:	2300      	movs	r3, #0
 8035c0e:	f1a4 0904 	sub.w	r9, r4, #4
 8035c12:	f844 3c04 	str.w	r3, [r4, #-4]
 8035c16:	f8cd b008 	str.w	fp, [sp, #8]
 8035c1a:	464c      	mov	r4, r9
 8035c1c:	461d      	mov	r5, r3
 8035c1e:	9903      	ldr	r1, [sp, #12]
 8035c20:	e7d7      	b.n	8035bd2 <__hexnan+0x2e>
 8035c22:	2a29      	cmp	r2, #41	@ 0x29
 8035c24:	d157      	bne.n	8035cd6 <__hexnan+0x132>
 8035c26:	3102      	adds	r1, #2
 8035c28:	f8ca 1000 	str.w	r1, [sl]
 8035c2c:	f1bb 0f00 	cmp.w	fp, #0
 8035c30:	d051      	beq.n	8035cd6 <__hexnan+0x132>
 8035c32:	454c      	cmp	r4, r9
 8035c34:	d206      	bcs.n	8035c44 <__hexnan+0xa0>
 8035c36:	2d07      	cmp	r5, #7
 8035c38:	dc04      	bgt.n	8035c44 <__hexnan+0xa0>
 8035c3a:	462a      	mov	r2, r5
 8035c3c:	4649      	mov	r1, r9
 8035c3e:	4620      	mov	r0, r4
 8035c40:	f7ff ff8a 	bl	8035b58 <L_shift>
 8035c44:	4544      	cmp	r4, r8
 8035c46:	d936      	bls.n	8035cb6 <__hexnan+0x112>
 8035c48:	f1a8 0204 	sub.w	r2, r8, #4
 8035c4c:	4623      	mov	r3, r4
 8035c4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8035c52:	f842 1f04 	str.w	r1, [r2, #4]!
 8035c56:	429f      	cmp	r7, r3
 8035c58:	d2f9      	bcs.n	8035c4e <__hexnan+0xaa>
 8035c5a:	1b3b      	subs	r3, r7, r4
 8035c5c:	f023 0303 	bic.w	r3, r3, #3
 8035c60:	3304      	adds	r3, #4
 8035c62:	3401      	adds	r4, #1
 8035c64:	3e03      	subs	r6, #3
 8035c66:	42b4      	cmp	r4, r6
 8035c68:	bf88      	it	hi
 8035c6a:	2304      	movhi	r3, #4
 8035c6c:	4443      	add	r3, r8
 8035c6e:	2200      	movs	r2, #0
 8035c70:	f843 2b04 	str.w	r2, [r3], #4
 8035c74:	429f      	cmp	r7, r3
 8035c76:	d2fb      	bcs.n	8035c70 <__hexnan+0xcc>
 8035c78:	683b      	ldr	r3, [r7, #0]
 8035c7a:	b91b      	cbnz	r3, 8035c84 <__hexnan+0xe0>
 8035c7c:	4547      	cmp	r7, r8
 8035c7e:	d128      	bne.n	8035cd2 <__hexnan+0x12e>
 8035c80:	2301      	movs	r3, #1
 8035c82:	603b      	str	r3, [r7, #0]
 8035c84:	2005      	movs	r0, #5
 8035c86:	b007      	add	sp, #28
 8035c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035c8c:	3501      	adds	r5, #1
 8035c8e:	2d08      	cmp	r5, #8
 8035c90:	f10b 0b01 	add.w	fp, fp, #1
 8035c94:	dd06      	ble.n	8035ca4 <__hexnan+0x100>
 8035c96:	4544      	cmp	r4, r8
 8035c98:	d9c1      	bls.n	8035c1e <__hexnan+0x7a>
 8035c9a:	2300      	movs	r3, #0
 8035c9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8035ca0:	2501      	movs	r5, #1
 8035ca2:	3c04      	subs	r4, #4
 8035ca4:	6822      	ldr	r2, [r4, #0]
 8035ca6:	f000 000f 	and.w	r0, r0, #15
 8035caa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8035cae:	6020      	str	r0, [r4, #0]
 8035cb0:	e7b5      	b.n	8035c1e <__hexnan+0x7a>
 8035cb2:	2508      	movs	r5, #8
 8035cb4:	e7b3      	b.n	8035c1e <__hexnan+0x7a>
 8035cb6:	9b01      	ldr	r3, [sp, #4]
 8035cb8:	2b00      	cmp	r3, #0
 8035cba:	d0dd      	beq.n	8035c78 <__hexnan+0xd4>
 8035cbc:	f1c3 0320 	rsb	r3, r3, #32
 8035cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035cc4:	40da      	lsrs	r2, r3
 8035cc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8035cca:	4013      	ands	r3, r2
 8035ccc:	f846 3c04 	str.w	r3, [r6, #-4]
 8035cd0:	e7d2      	b.n	8035c78 <__hexnan+0xd4>
 8035cd2:	3f04      	subs	r7, #4
 8035cd4:	e7d0      	b.n	8035c78 <__hexnan+0xd4>
 8035cd6:	2004      	movs	r0, #4
 8035cd8:	e7d5      	b.n	8035c86 <__hexnan+0xe2>
	...

08035cdc <_init>:
 8035cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035cde:	bf00      	nop
 8035ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035ce2:	bc08      	pop	{r3}
 8035ce4:	469e      	mov	lr, r3
 8035ce6:	4770      	bx	lr

08035ce8 <_fini>:
 8035ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035cea:	bf00      	nop
 8035cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035cee:	bc08      	pop	{r3}
 8035cf0:	469e      	mov	lr, r3
 8035cf2:	4770      	bx	lr
