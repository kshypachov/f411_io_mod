
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022824  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004894  080229c4  080229c4  000239c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027258  08027258  000292fc  2**0
                  CONTENTS
  4 .ARM          00000008  08027258  08027258  00028258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027260  08027260  000292fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027260  08027260  00028260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027264  08027264  00028264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  08027268  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000172a8  200002fc  08027564  000292fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200175a4  08027564  000295a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000292fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed5e  00000000  00000000  0002932c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005220  00000000  00000000  0005808a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a18  00000000  00000000  0005d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023df  00000000  00000000  0005fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd89  00000000  00000000  000620a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd79  00000000  00000000  0007fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5584  00000000  00000000  000acba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015212d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ccf8  00000000  00000000  00152170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080229ac 	.word	0x080229ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	080229ac 	.word	0x080229ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	@ 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f81a 	bl	8000c38 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__popcountsi2>:
 8000c10:	0843      	lsrs	r3, r0, #1
 8000c12:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000c16:	1ac0      	subs	r0, r0, r3
 8000c18:	0883      	lsrs	r3, r0, #2
 8000c1a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000c1e:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8000c22:	4418      	add	r0, r3
 8000c24:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c28:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000c2c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c30:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c34:	0e00      	lsrs	r0, r0, #24
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8000efc:	4826      	ldr	r0, [pc, #152]	@ (8000f98 <MX_FREERTOS_Init+0xa0>)
 8000efe:	f005 fe98 	bl	8006c32 <osMutexNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <MX_FREERTOS_Init+0xa4>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8000f08:	4825      	ldr	r0, [pc, #148]	@ (8000fa0 <MX_FREERTOS_Init+0xa8>)
 8000f0a:	f005 fe92 	bl	8006c32 <osMutexNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <MX_FREERTOS_Init+0xac>)
 8000f12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8000f14:	4a24      	ldr	r2, [pc, #144]	@ (8000fa8 <MX_FREERTOS_Init+0xb0>)
 8000f16:	2103      	movs	r1, #3
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f005 ff98 	bl	8006e4e <osMessageQueueNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <MX_FREERTOS_Init+0xb4>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8000f24:	4a22      	ldr	r2, [pc, #136]	@ (8000fb0 <MX_FREERTOS_Init+0xb8>)
 8000f26:	2103      	movs	r1, #3
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f005 ff90 	bl	8006e4e <osMessageQueueNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a20      	ldr	r2, [pc, #128]	@ (8000fb4 <MX_FREERTOS_Init+0xbc>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8000f34:	4a20      	ldr	r2, [pc, #128]	@ (8000fb8 <MX_FREERTOS_Init+0xc0>)
 8000f36:	2103      	movs	r1, #3
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f005 ff88 	bl	8006e4e <osMessageQueueNew>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a1e      	ldr	r2, [pc, #120]	@ (8000fbc <MX_FREERTOS_Init+0xc4>)
 8000f42:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8000f44:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc0 <MX_FREERTOS_Init+0xc8>)
 8000f46:	21c6      	movs	r1, #198	@ 0xc6
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f005 ff80 	bl	8006e4e <osMessageQueueNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <MX_FREERTOS_Init+0xcc>)
 8000f52:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8000f54:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_FREERTOS_Init+0xd0>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	481c      	ldr	r0, [pc, #112]	@ (8000fcc <MX_FREERTOS_Init+0xd4>)
 8000f5a:	f005 fdbd 	bl	8006ad8 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <MX_FREERTOS_Init+0xd8>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <MX_FREERTOS_Init+0xdc>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <MX_FREERTOS_Init+0xe0>)
 8000f6a:	f005 fdb5 	bl	8006ad8 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a1a      	ldr	r2, [pc, #104]	@ (8000fdc <MX_FREERTOS_Init+0xe4>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000f74:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe0 <MX_FREERTOS_Init+0xe8>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	481a      	ldr	r0, [pc, #104]	@ (8000fe4 <MX_FREERTOS_Init+0xec>)
 8000f7a:	f005 fdad 	bl	8006ad8 <osThreadNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <MX_FREERTOS_Init+0xf0>)
 8000f82:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8000f84:	4a19      	ldr	r2, [pc, #100]	@ (8000fec <MX_FREERTOS_Init+0xf4>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4819      	ldr	r0, [pc, #100]	@ (8000ff0 <MX_FREERTOS_Init+0xf8>)
 8000f8a:	f005 fda5 	bl	8006ad8 <osThreadNew>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <MX_FREERTOS_Init+0xfc>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	08026a20 	.word	0x08026a20
 8000f9c:	20000338 	.word	0x20000338
 8000fa0:	08026a30 	.word	0x08026a30
 8000fa4:	2000033c 	.word	0x2000033c
 8000fa8:	080269c0 	.word	0x080269c0
 8000fac:	20000328 	.word	0x20000328
 8000fb0:	080269d8 	.word	0x080269d8
 8000fb4:	2000032c 	.word	0x2000032c
 8000fb8:	080269f0 	.word	0x080269f0
 8000fbc:	20000330 	.word	0x20000330
 8000fc0:	08026a08 	.word	0x08026a08
 8000fc4:	20000334 	.word	0x20000334
 8000fc8:	08026930 	.word	0x08026930
 8000fcc:	08000ff9 	.word	0x08000ff9
 8000fd0:	20000318 	.word	0x20000318
 8000fd4:	08026954 	.word	0x08026954
 8000fd8:	08001261 	.word	0x08001261
 8000fdc:	2000031c 	.word	0x2000031c
 8000fe0:	08026978 	.word	0x08026978
 8000fe4:	08001429 	.word	0x08001429
 8000fe8:	20000320 	.word	0x20000320
 8000fec:	0802699c 	.word	0x0802699c
 8000ff0:	08001439 	.word	0x08001439
 8000ff4:	20000324 	.word	0x20000324

08000ff8 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b0f3      	sub	sp, #460	@ 0x1cc
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001002:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001006:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8001008:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800100c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001010:	4a8a      	ldr	r2, [pc, #552]	@ (800123c <StartEthTask+0x244>)
 8001012:	461c      	mov	r4, r3
 8001014:	4613      	mov	r3, r2
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 800101c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001020:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001024:	4618      	mov	r0, r3
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	461a      	mov	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f020 f828 	bl	8021080 <memset>
 8001030:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001034:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001038:	2240      	movs	r2, #64	@ 0x40
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001040:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001044:	2222      	movs	r2, #34	@ 0x22
 8001046:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8001048:	4b7d      	ldr	r3, [pc, #500]	@ (8001240 <StartEthTask+0x248>)
 800104a:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 800104c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001050:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001054:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8001056:	4b7b      	ldr	r3, [pc, #492]	@ (8001244 <StartEthTask+0x24c>)
 8001058:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 800105a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800105e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001062:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8001064:	4b78      	ldr	r3, [pc, #480]	@ (8001248 <StartEthTask+0x250>)
 8001066:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001068:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800106c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001070:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 8001072:	4b76      	ldr	r3, [pc, #472]	@ (800124c <StartEthTask+0x254>)
 8001074:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001076:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800107a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800107e:	715a      	strb	r2, [r3, #5]
 8001080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001084:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001088:	2201      	movs	r2, #1
 800108a:	77da      	strb	r2, [r3, #31]
 800108c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001090:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
 800109a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800109e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010a2:	4a6b      	ldr	r2, [pc, #428]	@ (8001250 <StartEthTask+0x258>)
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80010a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80010ae:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  struct mg_full_net_info mg_full_info = {
 80010b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80010bc:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80010c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80010ca:	f107 0210 	add.w	r2, r7, #16
 80010ce:	605a      	str	r2, [r3, #4]
											  .mgr = &mgr,
											  .mgr_if = &mif
									  	  };

  mg_mgr_init(&mgr);        // Mongoose event manager
 80010d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80010d4:	4618      	mov	r0, r3
 80010d6:	f01a fb8b 	bl	801b7f0 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80010da:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <StartEthTask+0x25c>)
 80010dc:	2203      	movs	r2, #3
 80010de:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80010e0:	f002 f818 	bl	8003114 <dash_hdl>
 80010e4:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

  while(mif.mtu == 0){
 80010e8:	e013      	b.n	8001112 <StartEthTask+0x11a>
	  EthResetBegin();
 80010ea:	f000 fa49 	bl	8001580 <EthResetBegin>
	  osDelay(500);
 80010ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010f2:	f005 fd83 	bl	8006bfc <osDelay>
	  EthResetEnd();
 80010f6:	f000 fa4f 	bl	8001598 <EthResetEnd>
	  osDelay(2000);
 80010fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010fe:	f005 fd7d 	bl	8006bfc <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8001102:	f107 0210 	add.w	r2, r7, #16
 8001106:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f01d f8f7 	bl	801e300 <mg_tcpip_init>
  while(mif.mtu == 0){
 8001112:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001116:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800111a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0e3      	beq.n	80010ea <StartEthTask+0xf2>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2106      	movs	r1, #6
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fcdf 	bl	8003aec <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 800112e:	484a      	ldr	r0, [pc, #296]	@ (8001258 <StartEthTask+0x260>)
 8001130:	f001 fffa 	bl	8003128 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8001134:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001140:	4946      	ldr	r1, [pc, #280]	@ (800125c <StartEthTask+0x264>)
 8001142:	f016 fd6f 	bl	8017c24 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8001146:	e005      	b.n	8001154 <StartEthTask+0x15c>
    mg_mgr_poll(&mgr, 0);
 8001148:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f01d fbea 	bl	801e928 <mg_mgr_poll>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8001154:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001158:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800115c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001160:	2b03      	cmp	r3, #3
 8001162:	d1f1      	bne.n	8001148 <StartEthTask+0x150>
  }

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8001164:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fadb 	bl	8001728 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8001172:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001176:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <StartEthTask+0x1b0>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8001180:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001184:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8001188:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800118c:	1c9a      	adds	r2, r3, #2
 800118e:	f107 0110 	add.w	r1, r7, #16
 8001192:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001196:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <StartEthTask+0x260>)
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800119e:	33a5      	adds	r3, #165	@ 0xa5
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4623      	mov	r3, r4
 80011a4:	f002 fbb6 	bl	8003914 <mqtt_init>
  }

  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 80011a8:	f007 fc76 	bl	8008a98 <xTaskGetTickCount>
 80011ac:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 80011b0:	f007 fc72 	bl	8008a98 <xTaskGetTickCount>
 80011b4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 80011b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80011bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	  last_tick = current_tick; // обновляем значение тиков
 80011c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80011ca:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 80011ce:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80011d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f01d fba5 	bl	801e928 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 80011de:	e018      	b.n	8001212 <StartEthTask+0x21a>
    	  EthResetBegin(); //enable reset state w5500
 80011e0:	f000 f9ce 	bl	8001580 <EthResetBegin>
    	  osDelay(100);
 80011e4:	2064      	movs	r0, #100	@ 0x64
 80011e6:	f005 fd09 	bl	8006bfc <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 80011ea:	f000 f9d5 	bl	8001598 <EthResetEnd>
    	  osDelay(3000);
 80011ee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80011f2:	f005 fd03 	bl	8006bfc <osDelay>
    	  mif.driver->init(&mif);
 80011f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80011fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f107 0210 	add.w	r2, r7, #16
 8001206:	4610      	mov	r0, r2
 8001208:	4798      	blx	r3
    	  osDelay(7000);
 800120a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800120e:	f005 fcf5 	bl	8006bfc <osDelay>
      while (mif.driver->up(&mif) == false){
 8001212:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f107 0210 	add.w	r2, r7, #16
 8001222:	4610      	mov	r0, r2
 8001224:	4798      	blx	r3
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1d6      	bne.n	80011e0 <StartEthTask+0x1e8>
      }
      osDelay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f005 fce2 	bl	8006bfc <osDelay>
  {
 8001238:	e7ba      	b.n	80011b0 <StartEthTask+0x1b8>
 800123a:	bf00      	nop
 800123c:	08022a48 	.word	0x08022a48
 8001240:	1fff7a10 	.word	0x1fff7a10
 8001244:	1fff7a12 	.word	0x1fff7a12
 8001248:	1fff7a14 	.word	0x1fff7a14
 800124c:	1fff7a18 	.word	0x1fff7a18
 8001250:	20000290 	.word	0x20000290
 8001254:	20000288 	.word	0x20000288
 8001258:	08001729 	.word	0x08001729
 800125c:	08022a34 	.word	0x08022a34

08001260 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b091      	sub	sp, #68	@ 0x44
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8001268:	4a69      	ldr	r2, [pc, #420]	@ (8001410 <StartIOTask+0x1b0>)
 800126a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800126e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001272:	6018      	str	r0, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 8001278:	4a66      	ldr	r2, [pc, #408]	@ (8001414 <StartIOTask+0x1b4>)
 800127a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001280:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 8001284:	4a64      	ldr	r2, [pc, #400]	@ (8001418 <StartIOTask+0x1b8>)
 8001286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128e:	6018      	str	r0, [r3, #0]
 8001290:	3304      	adds	r3, #4
 8001292:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8001294:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <StartIOTask+0x1b4>)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	ca07      	ldmia	r2, {r0, r1, r2}
 800129c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 80012a0:	4b5e      	ldr	r3, [pc, #376]	@ (800141c <StartIOTask+0x1bc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 ff03 	bl	80070b0 <osMessageQueueGetCount>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d041      	beq.n	8001334 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 80012b0:	4b5a      	ldr	r3, [pc, #360]	@ (800141c <StartIOTask+0x1bc>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f107 010c 	add.w	r1, r7, #12
 80012b8:	2300      	movs	r3, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	f005 fe9a 	bl	8006ff4 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80012c6:	e031      	b.n	800132c <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 80012c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80012cc:	3340      	adds	r3, #64	@ 0x40
 80012ce:	443b      	add	r3, r7
 80012d0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80012d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3340      	adds	r3, #64	@ 0x40
 80012e0:	443b      	add	r3, r7
 80012e2:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80012e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	443b      	add	r3, r7
 80012f0:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	f003 fe4a 	bl	8004f90 <HAL_GPIO_WritePin>
 80012fc:	e011      	b.n	8001322 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 80012fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	3340      	adds	r3, #64	@ 0x40
 8001306:	443b      	add	r3, r7
 8001308:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800130c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3340      	adds	r3, #64	@ 0x40
 8001314:	443b      	add	r3, r7
 8001316:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f003 fe37 	bl	8004f90 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001322:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001326:	3301      	adds	r3, #1
 8001328:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800132c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001330:	2b02      	cmp	r3, #2
 8001332:	d9c9      	bls.n	80012c8 <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800133a:	e01f      	b.n	800137c <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 800133c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	3340      	adds	r3, #64	@ 0x40
 8001344:	443b      	add	r3, r7
 8001346:	f853 2c14 	ldr.w	r2, [r3, #-20]
 800134a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	3340      	adds	r3, #64	@ 0x40
 8001352:	443b      	add	r3, r7
 8001354:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001358:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f003 fdfe 	bl	8004f60 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800136c:	443b      	add	r3, r7
 800136e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001372:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001376:	3301      	adds	r3, #1
 8001378:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800137c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001380:	2b02      	cmp	r3, #2
 8001382:	d9db      	bls.n	800133c <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <StartIOTask+0x1c0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f005 feb1 	bl	80070f0 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <StartIOTask+0x1c0>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f107 0110 	add.w	r1, r7, #16
 8001396:	2300      	movs	r3, #0
 8001398:	2200      	movs	r2, #0
 800139a:	f005 fdcb 	bl	8006f34 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013a4:	e01f      	b.n	80013e6 <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 80013a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	3340      	adds	r3, #64	@ 0x40
 80013ae:	443b      	add	r3, r7
 80013b0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80013b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	3340      	adds	r3, #64	@ 0x40
 80013bc:	443b      	add	r3, r7
 80013be:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80013c2:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f003 fdc9 	bl	8004f60 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80013d6:	443b      	add	r3, r7
 80013d8:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 80013dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013e0:	3301      	adds	r3, #1
 80013e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d9db      	bls.n	80013a6 <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <StartIOTask+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fe7c 	bl	80070f0 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <StartIOTask+0x1c4>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f107 0114 	add.w	r1, r7, #20
 8001400:	2300      	movs	r3, #0
 8001402:	2200      	movs	r2, #0
 8001404:	f005 fd96 	bl	8006f34 <osMessageQueuePut>

    osDelay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f005 fbf7 	bl	8006bfc <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 800140e:	e747      	b.n	80012a0 <StartIOTask+0x40>
 8001410:	08022a58 	.word	0x08022a58
 8001414:	08022a60 	.word	0x08022a60
 8001418:	08022a6c 	.word	0x08022a6c
 800141c:	20000330 	.word	0x20000330
 8001420:	2000032c 	.word	0x2000032c
 8001424:	20000328 	.word	0x20000328

08001428 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f005 fbe3 	bl	8006bfc <osDelay>
 8001436:	e7fb      	b.n	8001430 <StartDisplayTask+0x8>

08001438 <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b6      	sub	sp, #216	@ 0xd8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 800144c:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <StartSettingsTask+0x118>)
 800144e:	4a41      	ldr	r2, [pc, #260]	@ (8001554 <StartSettingsTask+0x11c>)
 8001450:	4941      	ldr	r1, [pc, #260]	@ (8001558 <StartSettingsTask+0x120>)
 8001452:	4842      	ldr	r0, [pc, #264]	@ (800155c <StartSettingsTask+0x124>)
 8001454:	f002 ffa4 	bl	80043a0 <SPI_flash_reg_cb>
  lfs_fs_ll_init(FS_Lock, FS_Unlock);
 8001458:	4941      	ldr	r1, [pc, #260]	@ (8001560 <StartSettingsTask+0x128>)
 800145a:	4842      	ldr	r0, [pc, #264]	@ (8001564 <StartSettingsTask+0x12c>)
 800145c:	f009 f9f4 	bl	800a848 <lfs_fs_ll_init>




  mg_fs_lfs_mkdir("/web");
 8001460:	4841      	ldr	r0, [pc, #260]	@ (8001568 <StartSettingsTask+0x130>)
 8001462:	f009 f9dd 	bl	800a820 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8001466:	4841      	ldr	r0, [pc, #260]	@ (800156c <StartSettingsTask+0x134>)
 8001468:	f009 f9c6 	bl	800a7f8 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 800146c:	4840      	ldr	r0, [pc, #256]	@ (8001570 <StartSettingsTask+0x138>)
 800146e:	f009 f9c3 	bl	800a7f8 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8001472:	483e      	ldr	r0, [pc, #248]	@ (800156c <StartSettingsTask+0x134>)
 8001474:	f009 f9d4 	bl	800a820 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8001478:	483e      	ldr	r0, [pc, #248]	@ (8001574 <StartSettingsTask+0x13c>)
 800147a:	f009 f9d1 	bl	800a820 <mg_fs_lfs_mkdir>

  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 800147e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	483c      	ldr	r0, [pc, #240]	@ (8001578 <StartSettingsTask+0x140>)
 8001488:	f009 f85e 	bl	800a548 <mg_fs_lfs_status>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <StartSettingsTask+0x94>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8001492:	2101      	movs	r1, #1
 8001494:	4838      	ldr	r0, [pc, #224]	@ (8001578 <StartSettingsTask+0x140>)
 8001496:	f009 f8f5 	bl	800a684 <mg_fs_lfs_open>
 800149a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	22c6      	movs	r2, #198	@ 0xc6
 80014a4:	4619      	mov	r1, r3
 80014a6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80014aa:	f009 f939 	bl	800a720 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80014ae:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80014b2:	f009 f921 	bl	800a6f8 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <StartSettingsTask+0x144>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f107 0108 	add.w	r1, r7, #8
 80014c2:	2302      	movs	r3, #2
 80014c4:	2200      	movs	r2, #0
 80014c6:	f006 f91b 	bl	8007700 <xQueueGenericSend>
 80014ca:	e00e      	b.n	80014ea <StartSettingsTask+0xb2>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	22c6      	movs	r2, #198	@ 0xc6
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f01f fdd3 	bl	8021080 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80014da:	4b28      	ldr	r3, [pc, #160]	@ (800157c <StartSettingsTask+0x144>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	2302      	movs	r3, #2
 80014e4:	2200      	movs	r2, #0
 80014e6:	f006 f90b 	bl	8007700 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <StartSettingsTask+0x144>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f107 0108 	add.w	r1, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fc95 	bl	8007e24 <xQueuePeek>
	  if(mqtt_config.save){
 80014fa:	7a3b      	ldrb	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <StartSettingsTask+0x10e>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8001500:	481d      	ldr	r0, [pc, #116]	@ (8001578 <StartSettingsTask+0x140>)
 8001502:	f009 f979 	bl	800a7f8 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8001506:	2102      	movs	r1, #2
 8001508:	481b      	ldr	r0, [pc, #108]	@ (8001578 <StartSettingsTask+0x140>)
 800150a:	f009 f8bb 	bl	800a684 <mg_fs_lfs_open>
 800150e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8001512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <StartSettingsTask+0x10e>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	22c6      	movs	r2, #198	@ 0xc6
 8001520:	4619      	mov	r1, r3
 8001522:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001526:	f009 f913 	bl	800a750 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 800152a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800152e:	f009 f8e3 	bl	800a6f8 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <StartSettingsTask+0x144>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	f107 0108 	add.w	r1, r7, #8
 800153e:	2302      	movs	r3, #2
 8001540:	2200      	movs	r2, #0
 8001542:	f006 f8dd 	bl	8007700 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f005 fb57 	bl	8006bfc <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 800154e:	e7cc      	b.n	80014ea <StartSettingsTask+0xb2>
 8001550:	08001699 	.word	0x08001699
 8001554:	080016bd 	.word	0x080016bd
 8001558:	08001671 	.word	0x08001671
 800155c:	08001645 	.word	0x08001645
 8001560:	08001709 	.word	0x08001709
 8001564:	080016e5 	.word	0x080016e5
 8001568:	08022a74 	.word	0x08022a74
 800156c:	08022a7c 	.word	0x08022a7c
 8001570:	08022a88 	.word	0x08022a88
 8001574:	08022a98 	.word	0x08022a98
 8001578:	08022aa4 	.word	0x08022aa4
 800157c:	20000334 	.word	0x20000334

08001580 <EthResetBegin>:
  /* USER CODE END StartSettingsTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158a:	4802      	ldr	r0, [pc, #8]	@ (8001594 <EthResetBegin+0x14>)
 800158c:	f003 fd00 	bl	8004f90 <HAL_GPIO_WritePin>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40020000 	.word	0x40020000

08001598 <EthResetEnd>:

void EthResetEnd(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a2:	4802      	ldr	r0, [pc, #8]	@ (80015ac <EthResetEnd+0x14>)
 80015a4:	f003 fcf4 	bl	8004f90 <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <EthBegin>:

void EthBegin(void * param){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <EthBegin+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fbbc 	bl	8006d3e <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <EthBegin+0x30>)
 80015ce:	f003 fcdf 	bl	8004f90 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000338 	.word	0x20000338
 80015e0:	40020400 	.word	0x40020400

080015e4 <EthEnd>:

void EthEnd(void * param){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	osMutexRelease(SPI2MutexHandle);
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <EthEnd+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fbef 	bl	8006dd4 <osMutexRelease>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <EthEnd+0x2c>)
 80015fe:	f003 fcc7 	bl	8004f90 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000338 	.word	0x20000338
 8001610:	40020400 	.word	0x40020400

08001614 <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8001620:	f107 020f 	add.w	r2, r7, #15
 8001624:	1cf9      	adds	r1, r7, #3
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	4804      	ldr	r0, [pc, #16]	@ (8001640 <EthTxn+0x2c>)
 8001630:	f004 fc64 	bl	8005efc <HAL_SPI_TransmitReceive>
  return rx_data;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000340 	.word	0x20000340

08001644 <FlashBegin>:

void FlashBegin(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <FlashBegin+0x24>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fb74 	bl	8006d3e <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <FlashBegin+0x28>)
 800165e:	f003 fc97 	bl	8004f90 <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000338 	.word	0x20000338
 800166c:	40020000 	.word	0x40020000

08001670 <FlashEnd>:

void FlashEnd(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	osMutexRelease(SPI2MutexHandle);
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <FlashEnd+0x20>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fbab 	bl	8006dd4 <osMutexRelease>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <FlashEnd+0x24>)
 8001686:	f003 fc83 	bl	8004f90 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000338 	.word	0x20000338
 8001694:	40020000 	.word	0x40020000

08001698 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 80016a2:	1df9      	adds	r1, r7, #7
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a8:	2201      	movs	r2, #1
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <SendByteSPI2+0x20>)
 80016ac:	f004 f9c9 	bl	8005a42 <HAL_SPI_Transmit>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000340 	.word	0x20000340

080016bc <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <RecvBuffSPI2+0x24>)
 80016d2:	f004 fafa 	bl	8005cca <HAL_SPI_Receive>
 80016d6:	4603      	mov	r3, r0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000340 	.word	0x20000340

080016e4 <FS_Lock>:

void FS_Lock(void * param){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <FS_Lock+0x20>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 fb22 	bl	8006d3e <osMutexAcquire>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000033c 	.word	0x2000033c

08001708 <FS_Unlock>:

void FS_Unlock(void * param){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <FS_Unlock+0x1c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fb5d 	bl	8006dd4 <osMutexRelease>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000033c 	.word	0x2000033c

08001728 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
 8001734:	4613      	mov	r3, r2
 8001736:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d02b      	beq.n	8001796 <RW_parameters_from_queue+0x6e>
 800173e:	2b02      	cmp	r3, #2
 8001740:	dc44      	bgt.n	80017cc <RW_parameters_from_queue+0xa4>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <RW_parameters_from_queue+0x24>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d018      	beq.n	800177c <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 800174a:	e03f      	b.n	80017cc <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d107      	bne.n	8001766 <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <RW_parameters_from_queue+0xac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fb60 	bl	8007e24 <xQueuePeek>
			break;
 8001764:	e02f      	b.n	80017c6 <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d12c      	bne.n	80017c6 <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <RW_parameters_from_queue+0xac>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	2302      	movs	r3, #2
 8001772:	2200      	movs	r2, #0
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	f005 ffc3 	bl	8007700 <xQueueGenericSend>
			break;
 800177a:	e024      	b.n	80017c6 <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8001780:	78bb      	ldrb	r3, [r7, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d121      	bne.n	80017ca <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <RW_parameters_from_queue+0xb0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	4618      	mov	r0, r3
 8001790:	f006 fb48 	bl	8007e24 <xQueuePeek>
			break;
 8001794:	e019      	b.n	80017ca <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <RW_parameters_from_queue+0xb4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 fb3b 	bl	8007e24 <xQueuePeek>
}
 80017ae:	e00d      	b.n	80017cc <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 80017b0:	78bb      	ldrb	r3, [r7, #2]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10a      	bne.n	80017cc <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <RW_parameters_from_queue+0xb8>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	2302      	movs	r3, #2
 80017bc:	2200      	movs	r2, #0
 80017be:	6979      	ldr	r1, [r7, #20]
 80017c0:	f005 ff9e 	bl	8007700 <xQueueGenericSend>
}
 80017c4:	e002      	b.n	80017cc <RW_parameters_from_queue+0xa4>
			break;
 80017c6:	bf00      	nop
 80017c8:	e000      	b.n	80017cc <RW_parameters_from_queue+0xa4>
			break;
 80017ca:	bf00      	nop
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000334 	.word	0x20000334
 80017d8:	20000328 	.word	0x20000328
 80017dc:	2000032c 	.word	0x2000032c
 80017e0:	20000330 	.word	0x20000330

080017e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a3a      	ldr	r2, [pc, #232]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b38      	ldr	r3, [pc, #224]	@ (80018ec <MX_GPIO_Init+0x108>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <MX_GPIO_Init+0x108>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a2c      	ldr	r2, [pc, #176]	@ (80018ec <MX_GPIO_Init+0x108>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <MX_GPIO_Init+0x108>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001854:	4826      	ldr	r0, [pc, #152]	@ (80018f0 <MX_GPIO_Init+0x10c>)
 8001856:	f003 fb9b 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001860:	4824      	ldr	r0, [pc, #144]	@ (80018f4 <MX_GPIO_Init+0x110>)
 8001862:	f003 fb95 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186c:	4820      	ldr	r0, [pc, #128]	@ (80018f0 <MX_GPIO_Init+0x10c>)
 800186e:	f003 fb8f 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8001872:	2307      	movs	r3, #7
 8001874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187a:	2302      	movs	r3, #2
 800187c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	481a      	ldr	r0, [pc, #104]	@ (80018f0 <MX_GPIO_Init+0x10c>)
 8001886:	f003 f9e7 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 800188a:	23e0      	movs	r3, #224	@ 0xe0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <MX_GPIO_Init+0x10c>)
 80018a2:	f003 f9d9 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 80018a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_GPIO_Init+0x110>)
 80018c0:	f003 f9ca 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 80018c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4619      	mov	r1, r3
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_GPIO_Init+0x10c>)
 80018de:	f003 f9bb 	bl	8004c58 <HAL_GPIO_Init>

}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fc:	f003 f848 	bl	8004990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001900:	f000 f80c 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001904:	f7ff ff6e 	bl	80017e4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001908:	f000 f888 	bl	8001a1c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800190c:	f005 f89a 	bl	8006a44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001910:	f7ff faf2 	bl	8000ef8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001914:	f005 f8ba 	bl	8006a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <main+0x20>

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	@ 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2230      	movs	r2, #48	@ 0x30
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f01f fba8 	bl	8021080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <SystemClock_Config+0xc8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <SystemClock_Config+0xc8>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <SystemClock_Config+0xc8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <SystemClock_Config+0xcc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <SystemClock_Config+0xcc>)
 8001966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <SystemClock_Config+0xcc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2302      	movs	r3, #2
 8001984:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001986:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001990:	2364      	movs	r3, #100	@ 0x64
 8001992:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001998:	2304      	movs	r3, #4
 800199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fb0f 	bl	8004fc4 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019ac:	f000 f830 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b4:	2302      	movs	r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2103      	movs	r1, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fd71 	bl	80054b4 <HAL_RCC_ClockConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019d8:	f000 f81a 	bl	8001a10 <Error_Handler>
  }
}
 80019dc:	bf00      	nop
 80019de:	3750      	adds	r7, #80	@ 0x50
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019fe:	f002 ffe9 	bl	80049d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40014000 	.word	0x40014000

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>

08001a1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <MX_SPI2_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a50:	2210      	movs	r2, #16
 8001a52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a68:	220a      	movs	r2, #10
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MX_SPI2_Init+0x64>)
 8001a6e:	f003 ff5f 	bl	8005930 <HAL_SPI_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a78:	f7ff ffca 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000340 	.word	0x20000340
 8001a84:	40003800 	.word	0x40003800

08001a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	@ (8001b0c <HAL_SPI_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ae2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af4:	2305      	movs	r3, #5
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <HAL_SPI_MspInit+0x8c>)
 8001b00:	f003 f8aa 	bl	8004c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40003800 	.word	0x40003800
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_MspInit+0x54>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	210f      	movs	r1, #15
 8001b5a:	f06f 0001 	mvn.w	r0, #1
 8001b5e:	f003 f84c 	bl	8004bfa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	@ 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_InitTick+0xd0>)
 8001b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b88:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <HAL_InitTick+0xd0>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_InitTick+0xd0>)
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b9c:	f107 020c 	add.w	r2, r7, #12
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fe90 	bl	80058cc <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bac:	f003 fe7a 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8001bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <HAL_InitTick+0xd4>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bc2:	4a22      	ldr	r2, [pc, #136]	@ (8001c4c <HAL_InitTick+0xdc>)
 8001bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bcc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001bce:	4a1e      	ldr	r2, [pc, #120]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001be6:	4818      	ldr	r0, [pc, #96]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001be8:	f004 fc74 	bl	80064d4 <HAL_TIM_Base_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11b      	bne.n	8001c32 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001bfa:	4813      	ldr	r0, [pc, #76]	@ (8001c48 <HAL_InitTick+0xd8>)
 8001bfc:	f004 fcc4 	bl	8006588 <HAL_TIM_Base_Start_IT>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d111      	bne.n	8001c32 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c0e:	2018      	movs	r0, #24
 8001c10:	f003 f80f 	bl	8004c32 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	d808      	bhi.n	8001c2c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	2018      	movs	r0, #24
 8001c20:	f002 ffeb 	bl	8004bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c24:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_InitTick+0xe0>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e002      	b.n	8001c32 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	20000398 	.word	0x20000398
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	2000006c 	.word	0x2000006c

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c92:	f004 fcdb 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000398 	.word	0x20000398

08001ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_kill>:

int _kill(int pid, int sig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cba:	f01f fa85 	bl	80211c8 <__errno>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2216      	movs	r2, #22
 8001cc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_exit>:

void _exit (int status)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ffe7 	bl	8001cb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ce2:	bf00      	nop
 8001ce4:	e7fd      	b.n	8001ce2 <_exit+0x12>

08001ce6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e00a      	b.n	8001d0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	b2ca      	uxtb	r2, r1
 8001d06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf0      	blt.n	8001cf8 <_read+0x12>
  }

  return len;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e009      	b.n	8001d46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	60ba      	str	r2, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbf1      	blt.n	8001d32 <_write+0x12>
  }
  return len;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_close>:

int _close(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d80:	605a      	str	r2, [r3, #4]
  return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_isatty>:

int _isatty(int file)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f01f f9ea 	bl	80211c8 <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20020000 	.word	0x20020000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	200003e0 	.word	0x200003e0
 8001e28:	200175a8 	.word	0x200175a8

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e54:	f7ff ffea 	bl	8001e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	@ (8001e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f01f f9a9 	bl	80211d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7ff fd39 	bl	80018f8 <main>
  bx  lr    
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001e94:	08027268 	.word	0x08027268
  ldr r2, =_sbss
 8001e98:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001e9c:	200175a4 	.word	0x200175a4

08001ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC_IRQHandler>

08001ea2 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f008 f8d9 	bl	800a06c <pvPortMalloc>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <mg_calloc+0x34>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f01f f8d5 	bl	8021080 <memset>
  return p;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b093      	sub	sp, #76	@ 0x4c
 8001ee4:	af08      	add	r7, sp, #32
 8001ee6:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 faad 	bl	800a44c <vPortGetHeapStats>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8001ef4:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8001ef6:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 8001ef8:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8001efa:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8001efc:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8001efe:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8001f00:	9606      	str	r6, [sp, #24]
 8001f02:	9505      	str	r5, [sp, #20]
 8001f04:	9404      	str	r4, [sp, #16]
 8001f06:	9003      	str	r0, [sp, #12]
 8001f08:	9102      	str	r1, [sp, #8]
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <handle_ram_status_get+0x44>)
 8001f10:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <handle_ram_status_get+0x48>)
 8001f12:	21c8      	movs	r1, #200	@ 0xc8
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f013 ff05 	bl	8015d24 <mg_http_reply>
}
 8001f1a:	bf00      	nop
 8001f1c:	372c      	adds	r7, #44	@ 0x2c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	08022ab8 	.word	0x08022ab8
 8001f28:	08022bbc 	.word	0x08022bbc

08001f2c <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0a0      	sub	sp, #128	@ 0x80
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 8001f36:	2321      	movs	r3, #33	@ 0x21
 8001f38:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 8001f42:	2310      	movs	r3, #16
 8001f44:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 8001f48:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ffa7 	bl	8001ea2 <mg_calloc>
 8001f54:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 8001f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <calc_file_md5sum+0x3c>
		free(buff);
 8001f5c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f5e:	f008 f953 	bl	800a208 <vPortFree>
		return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f66:	e067      	b.n	8002038 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4834      	ldr	r0, [pc, #208]	@ (8002040 <calc_file_md5sum+0x114>)
 8001f6e:	f012 fb71 	bl	8014654 <mg_fs_open>
 8001f72:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 8001f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 8001f7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001f7c:	f012 fb91 	bl	80146a2 <mg_fs_close>
		free(buff);
 8001f80:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f82:	f008 f941 	bl	800a208 <vPortFree>
		return -2;
 8001f86:	f06f 0301 	mvn.w	r3, #1
 8001f8a:	e055      	b.n	8002038 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	4618      	mov	r0, r3
 8001f92:	f016 ffd5 	bl	8018f40 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8001f96:	e006      	b.n	8001fa6 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f9e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f017 fe79 	bl	8019c98 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8001fa6:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <calc_file_md5sum+0x114>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001fac:	6810      	ldr	r0, [r2, #0]
 8001fae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001fb2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001fb4:	4798      	blx	r3
 8001fb6:	66b8      	str	r0, [r7, #104]	@ 0x68
 8001fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ec      	bne.n	8001f98 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8001fbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fc0:	f012 fb6f 	bl	80146a2 <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8001fc4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff69 	bl	8001ea2 <mg_calloc>
 8001fd0:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8001fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d108      	bne.n	8001fea <calc_file_md5sum+0xbe>
		free(buff);
 8001fd8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001fda:	f008 f915 	bl	800a208 <vPortFree>
		free(digest);
 8001fde:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001fe0:	f008 f912 	bl	800a208 <vPortFree>
		return -1;
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe8:	e026      	b.n	8002038 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f017 fecf 	bl	8019d94 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ffa:	e013      	b.n	8002024 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8001ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	1898      	adds	r0, r3, r2
 8002006:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	461a      	mov	r2, r3
 800200c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800200e:	1a99      	subs	r1, r3, r2
 8002010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002012:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <calc_file_md5sum+0x118>)
 800201a:	f01e fc77 	bl	802090c <sniprintf>
	for (int i = 0; i < 16; ++i) {
 800201e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002020:	3301      	adds	r3, #1
 8002022:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002024:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002026:	2b0f      	cmp	r3, #15
 8002028:	dde8      	ble.n	8001ffc <calc_file_md5sum+0xd0>
	}

	free(buff);
 800202a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800202c:	f008 f8ec 	bl	800a208 <vPortFree>
	free(digest);
 8002030:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002032:	f008 f8e9 	bl	800a208 <vPortFree>

	return 0;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3780      	adds	r7, #128	@ 0x80
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000004 	.word	0x20000004
 8002044:	08022c00 	.word	0x08022c00

08002048 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b094      	sub	sp, #80	@ 0x50
 800204c:	af06      	add	r7, sp, #24
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002056:	4960      	ldr	r1, [pc, #384]	@ (80021d8 <handle_io_status_get+0x190>)
 8002058:	4618      	mov	r0, r3
 800205a:	f01d f883 	bl	801f164 <mg_str_s>
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	cb0c      	ldmia	r3, {r2, r3}
 800206a:	c903      	ldmia	r1, {r0, r1}
 800206c:	f01d f94d 	bl	801f30a <mg_match>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d023      	beq.n	80020be <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8002076:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <handle_io_status_get+0x194>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f107 001c 	add.w	r0, r7, #28
 800207e:	2200      	movs	r2, #0
 8002080:	2101      	movs	r1, #1
 8002082:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8002084:	4b55      	ldr	r3, [pc, #340]	@ (80021dc <handle_io_status_get+0x194>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f107 021c 	add.w	r2, r7, #28
 800208c:	1cd0      	adds	r0, r2, #3
 800208e:	2200      	movs	r2, #0
 8002090:	2102      	movs	r1, #2
 8002092:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8002094:	7f3b      	ldrb	r3, [r7, #28]
 8002096:	7f7a      	ldrb	r2, [r7, #29]
 8002098:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 800209a:	7ff8      	ldrb	r0, [r7, #31]
 800209c:	f897 4020 	ldrb.w	r4, [r7, #32]
 80020a0:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80020a4:	9505      	str	r5, [sp, #20]
 80020a6:	9404      	str	r4, [sp, #16]
 80020a8:	9003      	str	r0, [sp, #12]
 80020aa:	9102      	str	r1, [sp, #8]
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4b4b      	ldr	r3, [pc, #300]	@ (80021e0 <handle_io_status_get+0x198>)
 80020b2:	4a4c      	ldr	r2, [pc, #304]	@ (80021e4 <handle_io_status_get+0x19c>)
 80020b4:	21c8      	movs	r1, #200	@ 0xc8
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f013 fe34 	bl	8015d24 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 80020bc:	e087      	b.n	80021ce <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80020be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c2:	4949      	ldr	r1, [pc, #292]	@ (80021e8 <handle_io_status_get+0x1a0>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f01d f84d 	bl	801f164 <mg_str_s>
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d4:	cb0c      	ldmia	r3, {r2, r3}
 80020d6:	c903      	ldmia	r1, {r0, r1}
 80020d8:	f01d f917 	bl	801f30a <mg_match>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06d      	beq.n	80021be <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	4a40      	ldr	r2, [pc, #256]	@ (80021ec <handle_io_status_get+0x1a4>)
 80020ea:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80020ee:	c903      	ldmia	r1, {r0, r1}
 80020f0:	f016 fc2e 	bl	8018950 <mg_json_get_num>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d059      	beq.n	80021ae <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <handle_io_status_get+0x1a8>)
 8002102:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002106:	c903      	ldmia	r1, {r0, r1}
 8002108:	f016 fc22 	bl	8018950 <mg_json_get_num>
 800210c:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04d      	beq.n	80021ae <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8002112:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd41 	bl	8000ba0 <__aeabi_d2uiz>
 800211e:	4603      	mov	r3, r0
 8002120:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8002124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd38 	bl	8000ba0 <__aeabi_d2uiz>
 8002130:	4603      	mov	r3, r0
 8002132:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002136:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800213a:	2b00      	cmp	r3, #0
 800213c:	d02f      	beq.n	800219e <handle_io_status_get+0x156>
 800213e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002142:	2b03      	cmp	r3, #3
 8002144:	d82b      	bhi.n	800219e <handle_io_status_get+0x156>
 8002146:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <handle_io_status_get+0x10e>
 800214e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002152:	2b01      	cmp	r3, #1
 8002154:	d123      	bne.n	800219e <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8002156:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <handle_io_status_get+0x194>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f107 0018 	add.w	r0, r7, #24
 800215e:	2200      	movs	r2, #0
 8002160:	2102      	movs	r1, #2
 8002162:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8002164:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002168:	3b01      	subs	r3, #1
 800216a:	3338      	adds	r3, #56	@ 0x38
 800216c:	443b      	add	r3, r7
 800216e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002172:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <handle_io_status_get+0x194>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f107 0018 	add.w	r0, r7, #24
 800217e:	2201      	movs	r2, #1
 8002180:	2102      	movs	r1, #2
 8002182:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8002184:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002188:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800218c:	9201      	str	r2, [sp, #4]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <handle_io_status_get+0x1ac>)
 8002192:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <handle_io_status_get+0x19c>)
 8002194:	21c8      	movs	r1, #200	@ 0xc8
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f013 fdc4 	bl	8015d24 <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 800219c:	e017      	b.n	80021ce <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <handle_io_status_get+0x1b0>)
 80021a0:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <handle_io_status_get+0x19c>)
 80021a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f013 fdbc 	bl	8015d24 <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80021ac:	e00f      	b.n	80021ce <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <handle_io_status_get+0x1b4>)
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <handle_io_status_get+0x19c>)
 80021b2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f013 fdb4 	bl	8015d24 <mg_http_reply>
}
 80021bc:	e007      	b.n	80021ce <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <handle_io_status_get+0x1b8>)
 80021c0:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <handle_io_status_get+0x19c>)
 80021c2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f013 fdac 	bl	8015d24 <mg_http_reply>
}
 80021cc:	e7ff      	b.n	80021ce <handle_io_status_get+0x186>
 80021ce:	bf00      	nop
 80021d0:	3738      	adds	r7, #56	@ 0x38
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	08022c08 	.word	0x08022c08
 80021dc:	200003e4 	.word	0x200003e4
 80021e0:	08022c0c 	.word	0x08022c0c
 80021e4:	08022c40 	.word	0x08022c40
 80021e8:	08022cb0 	.word	0x08022cb0
 80021ec:	08022cb8 	.word	0x08022cb8
 80021f0:	08022cc4 	.word	0x08022cc4
 80021f4:	08022ccc 	.word	0x08022ccc
 80021f8:	08022d04 	.word	0x08022d04
 80021fc:	08022d40 	.word	0x08022d40
 8002200:	08022d7c 	.word	0x08022d7c

08002204 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8002204:	b580      	push	{r7, lr}
 8002206:	b092      	sub	sp, #72	@ 0x48
 8002208:	af04      	add	r7, sp, #16
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	49a7      	ldr	r1, [pc, #668]	@ (80024b0 <handle_mqtt_conf+0x2ac>)
 8002214:	4618      	mov	r0, r3
 8002216:	f01c ffa5 	bl	801f164 <mg_str_s>
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	2300      	movs	r3, #0
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	cb0c      	ldmia	r3, {r2, r3}
 8002226:	c903      	ldmia	r1, {r0, r1}
 8002228:	f01d f86f 	bl	801f30a <mg_match>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d04d      	beq.n	80022ce <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002238:	21c6      	movs	r1, #198	@ 0xc6
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff fe31 	bl	8001ea2 <mg_calloc>
 8002240:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002248:	4b9a      	ldr	r3, [pc, #616]	@ (80024b4 <handle_mqtt_conf+0x2b0>)
 800224a:	4a9b      	ldr	r2, [pc, #620]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 800224c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f013 fd67 	bl	8015d24 <mg_http_reply>
			free(mqtt_config);
 8002256:	69f8      	ldr	r0, [r7, #28]
 8002258:	f007 ffd6 	bl	800a208 <vPortFree>
			return;
 800225c:	e124      	b.n	80024a8 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 800225e:	4b97      	ldr	r3, [pc, #604]	@ (80024bc <handle_mqtt_conf+0x2b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	69f8      	ldr	r0, [r7, #28]
 8002268:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	33a5      	adds	r3, #165	@ 0xa5
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f806 	bl	8000280 <strlen>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	33a5      	adds	r3, #165	@ 0xa5
 800227e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002282:	212a      	movs	r1, #42	@ 0x2a
 8002284:	4618      	mov	r0, r3
 8002286:	f01e fefb 	bl	8021080 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 800228a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	2200      	movs	r2, #0
 8002294:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <handle_mqtt_conf+0xa0>
 80022a0:	4b87      	ldr	r3, [pc, #540]	@ (80024c0 <handle_mqtt_conf+0x2bc>)
 80022a2:	e000      	b.n	80022a6 <handle_mqtt_conf+0xa2>
 80022a4:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	3202      	adds	r2, #2
 80022aa:	69f9      	ldr	r1, [r7, #28]
 80022ac:	3184      	adds	r1, #132	@ 0x84
 80022ae:	69f8      	ldr	r0, [r7, #28]
 80022b0:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80022b2:	9003      	str	r0, [sp, #12]
 80022b4:	9102      	str	r1, [sp, #8]
 80022b6:	9201      	str	r2, [sp, #4]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4b83      	ldr	r3, [pc, #524]	@ (80024c8 <handle_mqtt_conf+0x2c4>)
 80022bc:	4a7e      	ldr	r2, [pc, #504]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80022be:	21c8      	movs	r1, #200	@ 0xc8
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f013 fd2f 	bl	8015d24 <mg_http_reply>

		free(mqtt_config);
 80022c6:	69f8      	ldr	r0, [r7, #28]
 80022c8:	f007 ff9e 	bl	800a208 <vPortFree>
 80022cc:	e0ec      	b.n	80024a8 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	497e      	ldr	r1, [pc, #504]	@ (80024cc <handle_mqtt_conf+0x2c8>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f01c ff45 	bl	801f164 <mg_str_s>
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	cb0c      	ldmia	r3, {r2, r3}
 80022e6:	c903      	ldmia	r1, {r0, r1}
 80022e8:	f01d f80f 	bl	801f30a <mg_match>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80d3 	beq.w	800249a <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80022f4:	21c6      	movs	r1, #198	@ 0xc6
 80022f6:	2001      	movs	r0, #1
 80022f8:	f7ff fdd3 	bl	8001ea2 <mg_calloc>
 80022fc:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002304:	4b6b      	ldr	r3, [pc, #428]	@ (80024b4 <handle_mqtt_conf+0x2b0>)
 8002306:	4a6c      	ldr	r2, [pc, #432]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 8002308:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f013 fd09 	bl	8015d24 <mg_http_reply>
			free(mqtt_config);
 8002312:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002314:	f007 ff78 	bl	800a208 <vPortFree>
			return;
 8002318:	e0c6      	b.n	80024a8 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	4a6b      	ldr	r2, [pc, #428]	@ (80024d0 <handle_mqtt_conf+0x2cc>)
 8002322:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002326:	c903      	ldmia	r1, {r0, r1}
 8002328:	f015 ffd8 	bl	80182dc <mg_json_get>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	da07      	bge.n	8002342 <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002332:	4b68      	ldr	r3, [pc, #416]	@ (80024d4 <handle_mqtt_conf+0x2d0>)
 8002334:	4a60      	ldr	r2, [pc, #384]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 8002336:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f013 fcf2 	bl	8015d24 <mg_http_reply>
 8002340:	e0a7      	b.n	8002492 <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	3301      	adds	r3, #1
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	4a63      	ldr	r2, [pc, #396]	@ (80024d8 <handle_mqtt_conf+0x2d4>)
 800234a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 800234e:	c903      	ldmia	r1, {r0, r1}
 8002350:	f016 fb45 	bl	80189de <mg_json_get_bool>

			char * broker = NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <handle_mqtt_conf+0x2d8>)
 800235c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002360:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002364:	f016 fc05 	bl	8018b72 <mg_json_get_str>
 8002368:	6338      	str	r0, [r7, #48]	@ 0x30
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	2b00      	cmp	r3, #0
 800236e:	d04e      	beq.n	800240e <handle_mqtt_conf+0x20a>
				int err = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8002374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002376:	f01e fa2f 	bl	80207d8 <is_valid_mqtt_url>
 800237a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8002382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002384:	3302      	adds	r3, #2
 8002386:	227f      	movs	r2, #127	@ 0x7f
 8002388:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800238a:	4618      	mov	r0, r3
 800238c:	f01e fdff 	bl	8020f8e <strncpy>
 8002390:	e03d      	b.n	800240e <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	3304      	adds	r3, #4
 8002396:	2b03      	cmp	r3, #3
 8002398:	d82a      	bhi.n	80023f0 <handle_mqtt_conf+0x1ec>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <handle_mqtt_conf+0x19c>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023e1 	.word	0x080023e1
 80023a4:	080023d1 	.word	0x080023d1
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023b1 	.word	0x080023b1
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80023b0:	4b4b      	ldr	r3, [pc, #300]	@ (80024e0 <handle_mqtt_conf+0x2dc>)
 80023b2:	4a41      	ldr	r2, [pc, #260]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80023b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f013 fcb3 	bl	8015d24 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 80023be:	e01f      	b.n	8002400 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80023c0:	4b48      	ldr	r3, [pc, #288]	@ (80024e4 <handle_mqtt_conf+0x2e0>)
 80023c2:	4a3d      	ldr	r2, [pc, #244]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80023c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f013 fcab 	bl	8015d24 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 80023ce:	e017      	b.n	8002400 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80023d0:	4b45      	ldr	r3, [pc, #276]	@ (80024e8 <handle_mqtt_conf+0x2e4>)
 80023d2:	4a39      	ldr	r2, [pc, #228]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80023d4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f013 fca3 	bl	8015d24 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 80023de:	e00f      	b.n	8002400 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80023e0:	4b42      	ldr	r3, [pc, #264]	@ (80024ec <handle_mqtt_conf+0x2e8>)
 80023e2:	4a35      	ldr	r2, [pc, #212]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80023e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f013 fc9b 	bl	8015d24 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 80023ee:	e007      	b.n	8002400 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80023f0:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <handle_mqtt_conf+0x2ec>)
 80023f2:	4a31      	ldr	r2, [pc, #196]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 80023f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f013 fc93 	bl	8015d24 <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 80023fe:	bf00      	nop
					}
					free(broker);
 8002400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002402:	f007 ff01 	bl	800a208 <vPortFree>
					free(mqtt_config);
 8002406:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002408:	f007 fefe 	bl	800a208 <vPortFree>
					return;
 800240c:	e04c      	b.n	80024a8 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 800240e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002410:	f007 fefa 	bl	800a208 <vPortFree>

			char * username = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4a36      	ldr	r2, [pc, #216]	@ (80024f4 <handle_mqtt_conf+0x2f0>)
 800241c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002424:	f016 fba5 	bl	8018b72 <mg_json_get_str>
 8002428:	62b8      	str	r0, [r7, #40]	@ 0x28
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8002430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002432:	3384      	adds	r3, #132	@ 0x84
 8002434:	2220      	movs	r2, #32
 8002436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002438:	4618      	mov	r0, r3
 800243a:	f01e fda8 	bl	8020f8e <strncpy>
			}
			free(username);
 800243e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002440:	f007 fee2 	bl	800a208 <vPortFree>

			char * password = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <handle_mqtt_conf+0x2f4>)
 800244c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002450:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002454:	f016 fb8d 	bl	8018b72 <mg_json_get_str>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8002460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002462:	33a5      	adds	r3, #165	@ 0xa5
 8002464:	2220      	movs	r2, #32
 8002466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002468:	4618      	mov	r0, r3
 800246a:	f01e fd90 	bl	8020f8e <strncpy>
			}
			free(password);
 800246e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002470:	f007 feca 	bl	800a208 <vPortFree>

			mqtt_config->save = 1;
 8002474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <handle_mqtt_conf+0x2b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	2100      	movs	r1, #0
 8002482:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002484:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <handle_mqtt_conf+0x2f8>)
 8002488:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 800248a:	21c8      	movs	r1, #200	@ 0xc8
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f013 fc49 	bl	8015d24 <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8002492:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002494:	f007 feb8 	bl	800a208 <vPortFree>
 8002498:	e006      	b.n	80024a8 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <handle_mqtt_conf+0x2fc>)
 800249c:	4a06      	ldr	r2, [pc, #24]	@ (80024b8 <handle_mqtt_conf+0x2b4>)
 800249e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f013 fc3e 	bl	8015d24 <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 80024a8:	3738      	adds	r7, #56	@ 0x38
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	08022c08 	.word	0x08022c08
 80024b4:	08022dd0 	.word	0x08022dd0
 80024b8:	08022c40 	.word	0x08022c40
 80024bc:	200003e4 	.word	0x200003e4
 80024c0:	08022e0c 	.word	0x08022e0c
 80024c4:	08022e14 	.word	0x08022e14
 80024c8:	08022e1c 	.word	0x08022e1c
 80024cc:	08022cb0 	.word	0x08022cb0
 80024d0:	08022e64 	.word	0x08022e64
 80024d4:	08022e68 	.word	0x08022e68
 80024d8:	08022e98 	.word	0x08022e98
 80024dc:	08022ea4 	.word	0x08022ea4
 80024e0:	08022eb0 	.word	0x08022eb0
 80024e4:	08022ef4 	.word	0x08022ef4
 80024e8:	08022f40 	.word	0x08022f40
 80024ec:	08022f80 	.word	0x08022f80
 80024f0:	08022fb8 	.word	0x08022fb8
 80024f4:	08022fec 	.word	0x08022fec
 80024f8:	08022ff8 	.word	0x08022ff8
 80024fc:	08023004 	.word	0x08023004
 8002500:	08022d7c 	.word	0x08022d7c

08002504 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8002504:	b580      	push	{r7, lr}
 8002506:	b0d2      	sub	sp, #328	@ 0x148
 8002508:	af06      	add	r7, sp, #24
 800250a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800250e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002512:	6018      	str	r0, [r3, #0]
 8002514:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002518:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800251c:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 800251e:	4acf      	ldr	r2, [pc, #828]	@ (800285c <handle_dev_status+0x358>)
 8002520:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002524:	4611      	mov	r1, r2
 8002526:	2272      	movs	r2, #114	@ 0x72
 8002528:	4618      	mov	r0, r3
 800252a:	f01e fe7a 	bl	8021222 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8002534:	231e      	movs	r3, #30
 8002536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 800253a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800253e:	2101      	movs	r1, #1
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fcae 	bl	8001ea2 <mg_calloc>
 8002546:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 800254a:	2101      	movs	r1, #1
 800254c:	202e      	movs	r0, #46	@ 0x2e
 800254e:	f7ff fca8 	bl	8001ea2 <mg_calloc>
 8002552:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002556:	2101      	movs	r1, #1
 8002558:	202e      	movs	r0, #46	@ 0x2e
 800255a:	f7ff fca2 	bl	8001ea2 <mg_calloc>
 800255e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002562:	2101      	movs	r1, #1
 8002564:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002568:	f7ff fc9b 	bl	8001ea2 <mg_calloc>
 800256c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002570:	2101      	movs	r1, #1
 8002572:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8002576:	f7ff fc94 	bl	8001ea2 <mg_calloc>
 800257a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 800257e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8182 	beq.w	800288c <handle_dev_status+0x388>
 8002588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 817d 	beq.w	800288c <handle_dev_status+0x388>
 8002592:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8178 	beq.w	800288c <handle_dev_status+0x388>
 800259c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8173 	beq.w	800288c <handle_dev_status+0x388>
 80025a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 816e 	beq.w	800288c <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80025b0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80025b4:	49aa      	ldr	r1, [pc, #680]	@ (8002860 <handle_dev_status+0x35c>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f01c fdd4 	bl	801f164 <mg_str_s>
 80025bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80025ce:	cb0c      	ldmia	r3, {r2, r3}
 80025d0:	c903      	ldmia	r1, {r0, r1}
 80025d2:	f01c fe9a 	bl	801f30a <mg_match>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8132 	beq.w	8002842 <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 80025de:	f001 f98d 	bl	80038fc <get_mqtt_connection>
 80025e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 80025e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 80025ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025f2:	461a      	mov	r2, r3
 80025f4:	499b      	ldr	r1, [pc, #620]	@ (8002864 <handle_dev_status+0x360>)
 80025f6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80025fa:	f01e fcc8 	bl	8020f8e <strncpy>
 80025fe:	e041      	b.n	8002684 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 8002600:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002604:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8002612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002616:	461a      	mov	r2, r3
 8002618:	4993      	ldr	r1, [pc, #588]	@ (8002868 <handle_dev_status+0x364>)
 800261a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800261e:	f01e fcb6 	bl	8020f8e <strncpy>
 8002622:	e019      	b.n	8002658 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 8002624:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002628:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8002636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800263a:	461a      	mov	r2, r3
 800263c:	498b      	ldr	r1, [pc, #556]	@ (800286c <handle_dev_status+0x368>)
 800263e:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002642:	f01e fca4 	bl	8020f8e <strncpy>
 8002646:	e007      	b.n	8002658 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 8002648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800264c:	461a      	mov	r2, r3
 800264e:	4988      	ldr	r1, [pc, #544]	@ (8002870 <handle_dev_status+0x36c>)
 8002650:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002654:	f01e fc9b 	bl	8020f8e <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8002658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800265c:	3308      	adds	r3, #8
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4b84      	ldr	r3, [pc, #528]	@ (8002874 <handle_dev_status+0x370>)
 8002662:	4a85      	ldr	r2, [pc, #532]	@ (8002878 <handle_dev_status+0x374>)
 8002664:	212e      	movs	r1, #46	@ 0x2e
 8002666:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800266a:	f01c fb1b 	bl	801eca4 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 800266e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002672:	331c      	adds	r3, #28
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4b7f      	ldr	r3, [pc, #508]	@ (8002874 <handle_dev_status+0x370>)
 8002678:	4a7f      	ldr	r2, [pc, #508]	@ (8002878 <handle_dev_status+0x374>)
 800267a:	212e      	movs	r1, #46	@ 0x2e
 800267c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002680:	f01c fb10 	bl	801eca4 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8002684:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002688:	f7fd fdfa 	bl	8000280 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002694:	4413      	add	r3, r2
 8002696:	4979      	ldr	r1, [pc, #484]	@ (800287c <handle_dev_status+0x378>)
 8002698:	461a      	mov	r2, r3
 800269a:	460b      	mov	r3, r1
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80026a0:	2301      	movs	r3, #1
 80026a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80026a6:	e022      	b.n	80026ee <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 80026a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f107 000c 	add.w	r0, r7, #12
 80026b2:	2201      	movs	r2, #1
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	f001 fe29 	bl	800430c <generate_status_topik>
				strcat(pub_topics_str, topic);
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4619      	mov	r1, r3
 80026c0:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80026c4:	f01e fc24 	bl	8020f10 <strcat>
				strcat(pub_topics_str, "\", \"");
 80026c8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80026cc:	f7fd fdd8 	bl	8000280 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026d8:	4413      	add	r3, r2
 80026da:	4a69      	ldr	r2, [pc, #420]	@ (8002880 <handle_dev_status+0x37c>)
 80026dc:	6810      	ldr	r0, [r2, #0]
 80026de:	6018      	str	r0, [r3, #0]
 80026e0:	7912      	ldrb	r2, [r2, #4]
 80026e2:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80026e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026e8:	3301      	adds	r3, #1
 80026ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80026ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	ddd8      	ble.n	80026a8 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80026f6:	2301      	movs	r3, #1
 80026f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80026fc:	e035      	b.n	800276a <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80026fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f107 000c 	add.w	r0, r7, #12
 8002708:	2202      	movs	r2, #2
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	f001 fdfe 	bl	800430c <generate_status_topik>
				strcat(pub_topics_str, topic);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	4619      	mov	r1, r3
 8002716:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800271a:	f01e fbf9 	bl	8020f10 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 800271e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002722:	2b02      	cmp	r3, #2
 8002724:	dc0e      	bgt.n	8002744 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 8002726:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800272a:	f7fd fda9 	bl	8000280 <strlen>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002736:	4413      	add	r3, r2
 8002738:	4a51      	ldr	r2, [pc, #324]	@ (8002880 <handle_dev_status+0x37c>)
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	6018      	str	r0, [r3, #0]
 800273e:	7912      	ldrb	r2, [r2, #4]
 8002740:	711a      	strb	r2, [r3, #4]
 8002742:	e00d      	b.n	8002760 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 8002744:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002748:	f7fd fd9a 	bl	8000280 <strlen>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002754:	4413      	add	r3, r2
 8002756:	4949      	ldr	r1, [pc, #292]	@ (800287c <handle_dev_status+0x378>)
 8002758:	461a      	mov	r2, r3
 800275a:	460b      	mov	r3, r1
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8002760:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002764:	3301      	adds	r3, #1
 8002766:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800276a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800276e:	2b03      	cmp	r3, #3
 8002770:	ddc5      	ble.n	80026fe <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 8002772:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002776:	f7fd fd83 	bl	8000280 <strlen>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002782:	4413      	add	r3, r2
 8002784:	493d      	ldr	r1, [pc, #244]	@ (800287c <handle_dev_status+0x378>)
 8002786:	461a      	mov	r2, r3
 8002788:	460b      	mov	r3, r1
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 800278e:	2301      	movs	r3, #1
 8002790:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002794:	e035      	b.n	8002802 <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8002796:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f107 000c 	add.w	r0, r7, #12
 80027a0:	2202      	movs	r2, #2
 80027a2:	2180      	movs	r1, #128	@ 0x80
 80027a4:	f001 fd88 	bl	80042b8 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4619      	mov	r1, r3
 80027ae:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80027b2:	f01e fbad 	bl	8020f10 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 80027b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	dc0e      	bgt.n	80027dc <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 80027be:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80027c2:	f7fd fd5d 	bl	8000280 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027ce:	4413      	add	r3, r2
 80027d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002880 <handle_dev_status+0x37c>)
 80027d2:	6810      	ldr	r0, [r2, #0]
 80027d4:	6018      	str	r0, [r3, #0]
 80027d6:	7912      	ldrb	r2, [r2, #4]
 80027d8:	711a      	strb	r2, [r3, #4]
 80027da:	e00d      	b.n	80027f8 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 80027dc:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80027e0:	f7fd fd4e 	bl	8000280 <strlen>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027ec:	4413      	add	r3, r2
 80027ee:	4923      	ldr	r1, [pc, #140]	@ (800287c <handle_dev_status+0x378>)
 80027f0:	461a      	mov	r2, r3
 80027f2:	460b      	mov	r3, r1
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80027f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80027fc:	3301      	adds	r3, #1
 80027fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002802:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002806:	2b03      	cmp	r3, #3
 8002808:	ddc5      	ble.n	8002796 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 800280a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800280e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002812:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002816:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800281a:	9304      	str	r3, [sp, #16]
 800281c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002820:	9303      	str	r3, [sp, #12]
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002826:	9302      	str	r3, [sp, #8]
 8002828:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <handle_dev_status+0x380>)
 8002838:	21c8      	movs	r1, #200	@ 0xc8
 800283a:	6800      	ldr	r0, [r0, #0]
 800283c:	f013 fa72 	bl	8015d24 <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002840:	e02f      	b.n	80028a2 <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002846:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <handle_dev_status+0x384>)
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <handle_dev_status+0x380>)
 800284e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	f013 fa66 	bl	8015d24 <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002858:	e023      	b.n	80028a2 <handle_dev_status+0x39e>
 800285a:	bf00      	nop
 800285c:	080230b4 	.word	0x080230b4
 8002860:	08022c08 	.word	0x08022c08
 8002864:	08023040 	.word	0x08023040
 8002868:	08023048 	.word	0x08023048
 800286c:	08023054 	.word	0x08023054
 8002870:	0802305c 	.word	0x0802305c
 8002874:	0801eed5 	.word	0x0801eed5
 8002878:	08023068 	.word	0x08023068
 800287c:	0802306c 	.word	0x0802306c
 8002880:	08023070 	.word	0x08023070
 8002884:	08022c40 	.word	0x08022c40
 8002888:	08022d7c 	.word	0x08022d7c
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800288c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002890:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <handle_dev_status+0x3d0>)
 8002896:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <handle_dev_status+0x3d4>)
 8002898:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f013 fa41 	bl	8015d24 <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 80028a2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80028a6:	f007 fcaf 	bl	800a208 <vPortFree>
	free(mqtt_server_addr);
 80028aa:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80028ae:	f007 fcab 	bl	800a208 <vPortFree>
	free(mqtt_local_addr);
 80028b2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80028b6:	f007 fca7 	bl	800a208 <vPortFree>
	free(pub_topics_str);
 80028ba:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80028be:	f007 fca3 	bl	800a208 <vPortFree>
	free(subscr_topics_str);
 80028c2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80028c6:	f007 fc9f 	bl	800a208 <vPortFree>
}
 80028ca:	bf00      	nop
 80028cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	08023078 	.word	0x08023078
 80028d8:	08022c40 	.word	0x08022c40

080028dc <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <handle_OPTIONS_method+0x1c>)
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <handle_OPTIONS_method+0x20>)
 80028e8:	21c8      	movs	r1, #200	@ 0xc8
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f013 fa1a 	bl	8015d24 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	08023128 	.word	0x08023128
 80028fc:	0802312c 	.word	0x0802312c

08002900 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af04      	add	r7, sp, #16
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	491a      	ldr	r1, [pc, #104]	@ (8002978 <handle_restart_mcu+0x78>)
 8002910:	4618      	mov	r0, r3
 8002912:	f01c fc27 	bl	801f164 <mg_str_s>
 8002916:	6839      	ldr	r1, [r7, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	cb0c      	ldmia	r3, {r2, r3}
 8002922:	c903      	ldmia	r1, {r0, r1}
 8002924:	f01c fcf1 	bl	801f30a <mg_match>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002932:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <handle_restart_mcu+0x7c>)
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2301      	movs	r3, #1
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	4608      	mov	r0, r1
 800294e:	f018 ff27 	bl	801b7a0 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <handle_restart_mcu+0x80>)
 8002954:	4a0b      	ldr	r2, [pc, #44]	@ (8002984 <handle_restart_mcu+0x84>)
 8002956:	21c8      	movs	r1, #200	@ 0xc8
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f013 f9e3 	bl	8015d24 <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 800295e:	e006      	b.n	800296e <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <handle_restart_mcu+0x88>)
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <handle_restart_mcu+0x84>)
 8002964:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f013 f9db 	bl	8015d24 <mg_http_reply>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	08022cb0 	.word	0x08022cb0
 800297c:	08004c4f 	.word	0x08004c4f
 8002980:	080231cc 	.word	0x080231cc
 8002984:	08022c40 	.word	0x08022c40
 8002988:	08023200 	.word	0x08023200

0800298c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 800298c:	b580      	push	{r7, lr}
 800298e:	b0a6      	sub	sp, #152	@ 0x98
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8002996:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800299a:	4920      	ldr	r1, [pc, #128]	@ (8002a1c <handle_firmware_upload+0x90>)
 800299c:	4618      	mov	r0, r3
 800299e:	f01c fbe1 	bl	801f164 <mg_str_s>
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80029ac:	cb0c      	ldmia	r3, {r2, r3}
 80029ae:	c903      	ldmia	r1, {r0, r1}
 80029b0:	f01c fcab 	bl	801f30a <mg_match>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f103 0010 	add.w	r0, r3, #16
 80029c0:	f107 0208 	add.w	r2, r7, #8
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	4916      	ldr	r1, [pc, #88]	@ (8002a20 <handle_firmware_upload+0x94>)
 80029c8:	f012 f81e 	bl	8014a08 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	4914      	ldr	r1, [pc, #80]	@ (8002a24 <handle_firmware_upload+0x98>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fc5c 	bl	8000290 <strcmp>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <handle_firmware_upload+0x9c>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <handle_firmware_upload+0xa0>)
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <handle_firmware_upload+0xa4>)
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f014 fb57 	bl	801709c <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80029ee:	e010      	b.n	8002a12 <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <handle_firmware_upload+0x98>)
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <handle_firmware_upload+0xa8>)
 80029f6:	4a10      	ldr	r2, [pc, #64]	@ (8002a38 <handle_firmware_upload+0xac>)
 80029f8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f013 f991 	bl	8015d24 <mg_http_reply>
}
 8002a02:	e006      	b.n	8002a12 <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <handle_firmware_upload+0xb0>)
 8002a06:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <handle_firmware_upload+0xac>)
 8002a08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f013 f989 	bl	8015d24 <mg_http_reply>
}
 8002a12:	bf00      	nop
 8002a14:	3790      	adds	r7, #144	@ 0x90
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	08022cb0 	.word	0x08022cb0
 8002a20:	08023250 	.word	0x08023250
 8002a24:	08023258 	.word	0x08023258
 8002a28:	00030d40 	.word	0x00030d40
 8002a2c:	08023268 	.word	0x08023268
 8002a30:	20000004 	.word	0x20000004
 8002a34:	08023274 	.word	0x08023274
 8002a38:	08022c40 	.word	0x08022c40
 8002a3c:	08023200 	.word	0x08023200

08002a40 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	491d      	ldr	r1, [pc, #116]	@ (8002ac4 <handle_firmware_md5+0x84>)
 8002a50:	4618      	mov	r0, r3
 8002a52:	f01c fb87 	bl	801f164 <mg_str_s>
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	cb0c      	ldmia	r3, {r2, r3}
 8002a62:	c903      	ldmia	r1, {r0, r1}
 8002a64:	f01c fc51 	bl	801f30a <mg_match>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01f      	beq.n	8002aae <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8002a6e:	2101      	movs	r1, #1
 8002a70:	2021      	movs	r0, #33	@ 0x21
 8002a72:	f7ff fa16 	bl	8001ea2 <mg_calloc>
 8002a76:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8002a78:	6979      	ldr	r1, [r7, #20]
 8002a7a:	4813      	ldr	r0, [pc, #76]	@ (8002ac8 <handle_firmware_md5+0x88>)
 8002a7c:	f7ff fa56 	bl	8001f2c <calc_file_md5sum>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <handle_firmware_md5+0x8c>)
 8002a8c:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <handle_firmware_md5+0x90>)
 8002a8e:	21c8      	movs	r1, #200	@ 0xc8
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f013 f947 	bl	8015d24 <mg_http_reply>
 8002a96:	e006      	b.n	8002aa6 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"message\":\"Firmware update file md5 sum: %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <handle_firmware_md5+0x94>)
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <handle_firmware_md5+0x90>)
 8002a9c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f013 f93f 	bl	8015d24 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f007 fbae 	bl	800a208 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 8002aac:	e006      	b.n	8002abc <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <handle_firmware_md5+0x98>)
 8002ab0:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <handle_firmware_md5+0x90>)
 8002ab2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f013 f934 	bl	8015d24 <mg_http_reply>
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	08022c08 	.word	0x08022c08
 8002ac8:	080232c0 	.word	0x080232c0
 8002acc:	080232d8 	.word	0x080232d8
 8002ad0:	08022c40 	.word	0x08022c40
 8002ad4:	0802331c 	.word	0x0802331c
 8002ad8:	0802335c 	.word	0x0802335c

08002adc <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	492e      	ldr	r1, [pc, #184]	@ (8002ba4 <handle_firmware_activate+0xc8>)
 8002aec:	4618      	mov	r0, r3
 8002aee:	f01c fb39 	bl	801f164 <mg_str_s>
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	cb0c      	ldmia	r3, {r2, r3}
 8002afe:	c903      	ldmia	r1, {r0, r1}
 8002b00:	f01c fc03 	bl	801f30a <mg_match>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 8002b0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <handle_firmware_activate+0xcc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f107 010c 	add.w	r1, r7, #12
 8002b12:	2200      	movs	r2, #0
 8002b14:	4825      	ldr	r0, [pc, #148]	@ (8002bac <handle_firmware_activate+0xd0>)
 8002b16:	4798      	blx	r3
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <handle_firmware_activate+0xd4>)
 8002b20:	4a24      	ldr	r2, [pc, #144]	@ (8002bb4 <handle_firmware_activate+0xd8>)
 8002b22:	21c8      	movs	r1, #200	@ 0xc8
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f013 f8fd 	bl	8015d24 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 8002b2a:	e036      	b.n	8002b9a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b2c:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <handle_firmware_activate+0xdc>)
 8002b2e:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <handle_firmware_activate+0xd8>)
 8002b30:	21c8      	movs	r1, #200	@ 0xc8
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f013 f8f6 	bl	8015d24 <mg_http_reply>
}
 8002b38:	e02f      	b.n	8002b9a <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	491f      	ldr	r1, [pc, #124]	@ (8002bbc <handle_firmware_activate+0xe0>)
 8002b40:	4618      	mov	r0, r3
 8002b42:	f01c fb0f 	bl	801f164 <mg_str_s>
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f107 0318 	add.w	r3, r7, #24
 8002b50:	cb0c      	ldmia	r3, {r2, r3}
 8002b52:	c903      	ldmia	r1, {r0, r1}
 8002b54:	f01c fbd9 	bl	801f30a <mg_match>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <handle_firmware_activate+0xcc>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4912      	ldr	r1, [pc, #72]	@ (8002bac <handle_firmware_activate+0xd0>)
 8002b64:	4816      	ldr	r0, [pc, #88]	@ (8002bc0 <handle_firmware_activate+0xe4>)
 8002b66:	4798      	blx	r3
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <handle_firmware_activate+0xd4>)
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <handle_firmware_activate+0xd8>)
 8002b72:	21c8      	movs	r1, #200	@ 0xc8
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f013 f8d5 	bl	8015d24 <mg_http_reply>
}
 8002b7a:	e00e      	b.n	8002b9a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <handle_firmware_activate+0xe8>)
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <handle_firmware_activate+0xd8>)
 8002b80:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f013 f8cd 	bl	8015d24 <mg_http_reply>
}
 8002b8a:	e006      	b.n	8002b9a <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <handle_firmware_activate+0xec>)
 8002b8e:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <handle_firmware_activate+0xd8>)
 8002b90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f013 f8c5 	bl	8015d24 <mg_http_reply>
}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08022c08 	.word	0x08022c08
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	080233ac 	.word	0x080233ac
 8002bb0:	080233bc 	.word	0x080233bc
 8002bb4:	08022c40 	.word	0x08022c40
 8002bb8:	080233f4 	.word	0x080233f4
 8002bbc:	08022cb0 	.word	0x08022cb0
 8002bc0:	080232c0 	.word	0x080232c0
 8002bc4:	08023430 	.word	0x08023430
 8002bc8:	08023474 	.word	0x08023474

08002bcc <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	4918      	ldr	r1, [pc, #96]	@ (8002c3c <handle_firmware_deactivate+0x70>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f01c fac1 	bl	801f164 <mg_str_s>
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	cb0c      	ldmia	r3, {r2, r3}
 8002bee:	c903      	ldmia	r1, {r0, r1}
 8002bf0:	f01c fb8b 	bl	801f30a <mg_match>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <handle_firmware_deactivate+0x74>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4811      	ldr	r0, [pc, #68]	@ (8002c44 <handle_firmware_deactivate+0x78>)
 8002c00:	4798      	blx	r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002c08:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <handle_firmware_deactivate+0x7c>)
 8002c0a:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <handle_firmware_deactivate+0x80>)
 8002c0c:	21c8      	movs	r1, #200	@ 0xc8
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f013 f888 	bl	8015d24 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8002c14:	e00d      	b.n	8002c32 <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <handle_firmware_deactivate+0x84>)
 8002c18:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <handle_firmware_deactivate+0x80>)
 8002c1a:	21c8      	movs	r1, #200	@ 0xc8
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f013 f881 	bl	8015d24 <mg_http_reply>
}
 8002c22:	e006      	b.n	8002c32 <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <handle_firmware_deactivate+0x88>)
 8002c26:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <handle_firmware_deactivate+0x80>)
 8002c28:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f013 f879 	bl	8015d24 <mg_http_reply>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	08022cb0 	.word	0x08022cb0
 8002c40:	20000004 	.word	0x20000004
 8002c44:	080233ac 	.word	0x080233ac
 8002c48:	080234cc 	.word	0x080234cc
 8002c4c:	08022c40 	.word	0x08022c40
 8002c50:	08023508 	.word	0x08023508
 8002c54:	08023200 	.word	0x08023200

08002c58 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	4915      	ldr	r1, [pc, #84]	@ (8002cbc <handle_web_files_remove+0x64>)
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f01c fa7b 	bl	801f164 <mg_str_s>
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	cb0c      	ldmia	r3, {r2, r3}
 8002c7a:	c903      	ldmia	r1, {r0, r1}
 8002c7c:	f01c fb45 	bl	801f30a <mg_match>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00e      	beq.n	8002ca4 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8002c86:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <handle_web_files_remove+0x68>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	480e      	ldr	r0, [pc, #56]	@ (8002cc4 <handle_web_files_remove+0x6c>)
 8002c8c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <handle_web_files_remove+0x68>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <handle_web_files_remove+0x6c>)
 8002c94:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <handle_web_files_remove+0x70>)
 8002c98:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <handle_web_files_remove+0x74>)
 8002c9a:	21c8      	movs	r1, #200	@ 0xc8
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f013 f841 	bl	8015d24 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8002ca2:	e006      	b.n	8002cb2 <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <handle_web_files_remove+0x78>)
 8002ca6:	4a09      	ldr	r2, [pc, #36]	@ (8002ccc <handle_web_files_remove+0x74>)
 8002ca8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f013 f839 	bl	8015d24 <mg_http_reply>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	08022cb0 	.word	0x08022cb0
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	0802354c 	.word	0x0802354c
 8002cc8:	08023554 	.word	0x08023554
 8002ccc:	08022c40 	.word	0x08022c40
 8002cd0:	08023200 	.word	0x08023200

08002cd4 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0c6      	sub	sp, #280	@ 0x118
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cec:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8002cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cf2:	4934      	ldr	r1, [pc, #208]	@ (8002dc4 <handle_fs_mkdir+0xf0>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f01c fa35 	bl	801f164 <mg_str_s>
 8002cfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cfe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d0c:	cb0c      	ldmia	r3, {r2, r3}
 8002d0e:	c903      	ldmia	r1, {r0, r1}
 8002d10:	f01c fafb 	bl	801f30a <mg_match>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d043      	beq.n	8002da2 <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8002d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 8002d28:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002d2c:	237b      	movs	r3, #123	@ 0x7b
 8002d2e:	4926      	ldr	r1, [pc, #152]	@ (8002dc8 <handle_fs_mkdir+0xf4>)
 8002d30:	f011 fe6a 	bl	8014a08 <mg_http_get_var>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	dd27      	ble.n	8002d8a <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 8002d3a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002d3e:	f107 000c 	add.w	r0, r7, #12
 8002d42:	4a22      	ldr	r2, [pc, #136]	@ (8002dcc <handle_fs_mkdir+0xf8>)
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	f01d fde1 	bl	802090c <sniprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 8002d4a:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <handle_fs_mkdir+0xfc>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	f107 020c 	add.w	r2, r7, #12
 8002d52:	4610      	mov	r0, r2
 8002d54:	4798      	blx	r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8002d5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d60:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <handle_fs_mkdir+0x100>)
 8002d66:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd8 <handle_fs_mkdir+0x104>)
 8002d68:	21c8      	movs	r1, #200	@ 0xc8
 8002d6a:	6800      	ldr	r0, [r0, #0]
 8002d6c:	f012 ffda 	bl	8015d24 <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 8002d70:	e022      	b.n	8002db8 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8002d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d76:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <handle_fs_mkdir+0x108>)
 8002d7c:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <handle_fs_mkdir+0x104>)
 8002d7e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	f012 ffce 	bl	8015d24 <mg_http_reply>
}
 8002d88:	e016      	b.n	8002db8 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d8e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8002d92:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <handle_fs_mkdir+0x10c>)
 8002d94:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <handle_fs_mkdir+0x104>)
 8002d96:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	f012 ffc2 	bl	8015d24 <mg_http_reply>
}
 8002da0:	e00a      	b.n	8002db8 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002da6:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <handle_fs_mkdir+0x110>)
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <handle_fs_mkdir+0x104>)
 8002dae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002db2:	6800      	ldr	r0, [r0, #0]
 8002db4:	f012 ffb6 	bl	8015d24 <mg_http_reply>
}
 8002db8:	bf00      	nop
 8002dba:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08022cb0 	.word	0x08022cb0
 8002dc8:	0802359c 	.word	0x0802359c
 8002dcc:	080235a4 	.word	0x080235a4
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	080235ac 	.word	0x080235ac
 8002dd8:	08022c40 	.word	0x08022c40
 8002ddc:	080235e0 	.word	0x080235e0
 8002de0:	0802361c 	.word	0x0802361c
 8002de4:	08023200 	.word	0x08023200

08002de8 <dashboard>:


static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0a8      	sub	sp, #160	@ 0xa0
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b0b      	cmp	r3, #11
 8002df8:	f040 8168 	bne.w	80030cc <dashboard+0x2e4>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8002e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e06:	49b3      	ldr	r1, [pc, #716]	@ (80030d4 <dashboard+0x2ec>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f01c f9ab 	bl	801f164 <mg_str_s>
 8002e0e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	cb0c      	ldmia	r3, {r2, r3}
 8002e1c:	c903      	ldmia	r1, {r0, r1}
 8002e1e:	f01c fa74 	bl	801f30a <mg_match>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fd57 	bl	80028dc <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8002e2e:	e14d      	b.n	80030cc <dashboard+0x2e4>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8002e30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e34:	49a8      	ldr	r1, [pc, #672]	@ (80030d8 <dashboard+0x2f0>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f01c f994 	bl	801f164 <mg_str_s>
 8002e3c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e48:	cb0c      	ldmia	r3, {r2, r3}
 8002e4a:	3108      	adds	r1, #8
 8002e4c:	c903      	ldmia	r1, {r0, r1}
 8002e4e:	f01c fa5c 	bl	801f30a <mg_match>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <dashboard+0x78>
			handle_ram_status_get(c);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff f841 	bl	8001ee0 <handle_ram_status_get>
}
 8002e5e:	e135      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8002e60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e64:	499d      	ldr	r1, [pc, #628]	@ (80030dc <dashboard+0x2f4>)
 8002e66:	4618      	mov	r0, r3
 8002e68:	f01c f97c 	bl	801f164 <mg_str_s>
 8002e6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e70:	2300      	movs	r3, #0
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e78:	cb0c      	ldmia	r3, {r2, r3}
 8002e7a:	3108      	adds	r1, #8
 8002e7c:	c903      	ldmia	r1, {r0, r1}
 8002e7e:	f01c fa44 	bl	801f30a <mg_match>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <dashboard+0xac>
			handle_io_status_get(c, hm);
 8002e88:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff f8db 	bl	8002048 <handle_io_status_get>
}
 8002e92:	e11b      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8002e94:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e98:	4991      	ldr	r1, [pc, #580]	@ (80030e0 <dashboard+0x2f8>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f01c f962 	bl	801f164 <mg_str_s>
 8002ea0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002eac:	cb0c      	ldmia	r3, {r2, r3}
 8002eae:	3108      	adds	r1, #8
 8002eb0:	c903      	ldmia	r1, {r0, r1}
 8002eb2:	f01c fa2a 	bl	801f30a <mg_match>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8002ebc:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff f99f 	bl	8002204 <handle_mqtt_conf>
}
 8002ec6:	e101      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8002ec8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ecc:	4985      	ldr	r1, [pc, #532]	@ (80030e4 <dashboard+0x2fc>)
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f01c f948 	bl	801f164 <mg_str_s>
 8002ed4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ee0:	cb0c      	ldmia	r3, {r2, r3}
 8002ee2:	3108      	adds	r1, #8
 8002ee4:	c903      	ldmia	r1, {r0, r1}
 8002ee6:	f01c fa10 	bl	801f30a <mg_match>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <dashboard+0x114>
			handle_dev_status(c, hm);
 8002ef0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fb05 	bl	8002504 <handle_dev_status>
}
 8002efa:	e0e7      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8002efc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f00:	4979      	ldr	r1, [pc, #484]	@ (80030e8 <dashboard+0x300>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f01c f92e 	bl	801f164 <mg_str_s>
 8002f08:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f14:	cb0c      	ldmia	r3, {r2, r3}
 8002f16:	3108      	adds	r1, #8
 8002f18:	c903      	ldmia	r1, {r0, r1}
 8002f1a:	f01c f9f6 	bl	801f30a <mg_match>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <dashboard+0x148>
			handle_restart_mcu(c, hm);
 8002f24:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff fce9 	bl	8002900 <handle_restart_mcu>
}
 8002f2e:	e0cd      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8002f30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f34:	496d      	ldr	r1, [pc, #436]	@ (80030ec <dashboard+0x304>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f01c f914 	bl	801f164 <mg_str_s>
 8002f3c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f40:	2300      	movs	r3, #0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f48:	cb0c      	ldmia	r3, {r2, r3}
 8002f4a:	3108      	adds	r1, #8
 8002f4c:	c903      	ldmia	r1, {r0, r1}
 8002f4e:	f01c f9dc 	bl	801f30a <mg_match>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <dashboard+0x17c>
			handle_firmware_upload(c, hm);
 8002f58:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fd15 	bl	800298c <handle_firmware_upload>
}
 8002f62:	e0b3      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8002f64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f68:	4961      	ldr	r1, [pc, #388]	@ (80030f0 <dashboard+0x308>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f01c f8fa 	bl	801f164 <mg_str_s>
 8002f70:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f74:	2300      	movs	r3, #0
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f7c:	cb0c      	ldmia	r3, {r2, r3}
 8002f7e:	3108      	adds	r1, #8
 8002f80:	c903      	ldmia	r1, {r0, r1}
 8002f82:	f01c f9c2 	bl	801f30a <mg_match>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <dashboard+0x1b0>
			handle_firmware_md5(c, hm);
 8002f8c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fd55 	bl	8002a40 <handle_firmware_md5>
}
 8002f96:	e099      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate"), NULL)){
 8002f98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f9c:	4955      	ldr	r1, [pc, #340]	@ (80030f4 <dashboard+0x30c>)
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f01c f8e0 	bl	801f164 <mg_str_s>
 8002fa4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002fb0:	cb0c      	ldmia	r3, {r2, r3}
 8002fb2:	3108      	adds	r1, #8
 8002fb4:	c903      	ldmia	r1, {r0, r1}
 8002fb6:	f01c f9a8 	bl	801f30a <mg_match>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <dashboard+0x1e4>
			handle_firmware_activate(c, hm);
 8002fc0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fd89 	bl	8002adc <handle_firmware_activate>
}
 8002fca:	e07f      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8002fcc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002fd0:	4949      	ldr	r1, [pc, #292]	@ (80030f8 <dashboard+0x310>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f01c f8c6 	bl	801f164 <mg_str_s>
 8002fd8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002fe4:	cb0c      	ldmia	r3, {r2, r3}
 8002fe6:	3108      	adds	r1, #8
 8002fe8:	c903      	ldmia	r1, {r0, r1}
 8002fea:	f01c f98e 	bl	801f30a <mg_match>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <dashboard+0x218>
			handle_firmware_deactivate(c, hm);
 8002ff4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fde7 	bl	8002bcc <handle_firmware_deactivate>
}
 8002ffe:	e065      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8003000:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003004:	493d      	ldr	r1, [pc, #244]	@ (80030fc <dashboard+0x314>)
 8003006:	4618      	mov	r0, r3
 8003008:	f01c f8ac 	bl	801f164 <mg_str_s>
 800300c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003018:	cb0c      	ldmia	r3, {r2, r3}
 800301a:	3108      	adds	r1, #8
 800301c:	c903      	ldmia	r1, {r0, r1}
 800301e:	f01c f974 	bl	801f30a <mg_match>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <dashboard+0x24c>
			 handle_web_files_remove(c, hm);
 8003028:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fe13 	bl	8002c58 <handle_web_files_remove>
}
 8003032:	e04b      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8003034:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003038:	4931      	ldr	r1, [pc, #196]	@ (8003100 <dashboard+0x318>)
 800303a:	4618      	mov	r0, r3
 800303c:	f01c f892 	bl	801f164 <mg_str_s>
 8003040:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003044:	2300      	movs	r3, #0
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800304c:	cb0c      	ldmia	r3, {r2, r3}
 800304e:	3108      	adds	r1, #8
 8003050:	c903      	ldmia	r1, {r0, r1}
 8003052:	f01c f95a 	bl	801f30a <mg_match>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <dashboard+0x288>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 800305c:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <dashboard+0x31c>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	4b29      	ldr	r3, [pc, #164]	@ (8003108 <dashboard+0x320>)
 8003062:	4a2a      	ldr	r2, [pc, #168]	@ (800310c <dashboard+0x324>)
 8003064:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f014 f817 	bl	801709c <mg_http_upload>
}
 800306e:	e02d      	b.n	80030cc <dashboard+0x2e4>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8003070:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003074:	4926      	ldr	r1, [pc, #152]	@ (8003110 <dashboard+0x328>)
 8003076:	4618      	mov	r0, r3
 8003078:	f01c f874 	bl	801f164 <mg_str_s>
 800307c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003080:	2300      	movs	r3, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003088:	cb0c      	ldmia	r3, {r2, r3}
 800308a:	3108      	adds	r1, #8
 800308c:	c903      	ldmia	r1, {r0, r1}
 800308e:	f01c f93c 	bl	801f30a <mg_match>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <dashboard+0x2bc>
			 handle_fs_mkdir(c, hm);
 8003098:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff fe19 	bl	8002cd4 <handle_fs_mkdir>
}
 80030a2:	e013      	b.n	80030cc <dashboard+0x2e4>
			struct mg_http_serve_opts opts = {
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
 80030b4:	615a      	str	r2, [r3, #20]
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <dashboard+0x320>)
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <dashboard+0x324>)
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	461a      	mov	r2, r3
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f013 fefa 	bl	8016ec0 <mg_http_serve_dir>
}
 80030cc:	bf00      	nop
 80030ce:	3798      	adds	r7, #152	@ 0x98
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	08023658 	.word	0x08023658
 80030d8:	08023660 	.word	0x08023660
 80030dc:	08023670 	.word	0x08023670
 80030e0:	08023680 	.word	0x08023680
 80030e4:	08023694 	.word	0x08023694
 80030e8:	080236a8 	.word	0x080236a8
 80030ec:	080236bc 	.word	0x080236bc
 80030f0:	080236d4 	.word	0x080236d4
 80030f4:	080236e8 	.word	0x080236e8
 80030f8:	08023700 	.word	0x08023700
 80030fc:	0802371c 	.word	0x0802371c
 8003100:	08023738 	.word	0x08023738
 8003104:	0016e360 	.word	0x0016e360
 8003108:	0802354c 	.word	0x0802354c
 800310c:	20000004 	.word	0x20000004
 8003110:	08023754 	.word	0x08023754

08003114 <dash_hdl>:

void * dash_hdl (void){
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
	return &dashboard;
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <dash_hdl+0x10>)
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	08002de9 	.word	0x08002de9

08003128 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <reg_parameter_handler+0x1c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	200003e4 	.word	0x200003e4

08003148 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f006 ff86 	bl	800a06c <pvPortMalloc>
 8003160:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <_ZL9my_callocjj+0x32>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	461a      	mov	r2, r3
 8003172:	2100      	movs	r1, #0
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f01d ff83 	bl	8021080 <memset>
  return p;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b08d      	sub	sp, #52	@ 0x34
 8003188:	af02      	add	r7, sp, #8
 800318a:	6178      	str	r0, [r7, #20]
 800318c:	6139      	str	r1, [r7, #16]
 800318e:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8003190:	4b36      	ldr	r3, [pc, #216]	@ (800326c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe8>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3308      	adds	r3, #8
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xec>)
 800319c:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf0>)
 800319e:	2128      	movs	r1, #40	@ 0x28
 80031a0:	f01b fd80 	bl	801eca4 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 80031a4:	4b31      	ldr	r3, [pc, #196]	@ (800326c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe8>)
 80031a6:	681c      	ldr	r4, [r3, #0]
 80031a8:	4b30      	ldr	r3, [pc, #192]	@ (800326c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f867 	bl	8000280 <strlen>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 fcd8 	bl	8003b6c <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	e04b      	b.n	800325a <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd6>
	        int sensor_type = sensors[i].sensor_type;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61fb      	str	r3, [r7, #28]

			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf4>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	f000 fcea 	bl	8003bc0 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80031fc:	f000 fdba 	bl	8003d74 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf4>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4c1e      	ldr	r4, [pc, #120]	@ (8003280 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003206:	463b      	mov	r3, r7
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f01b ffaa 	bl	801f164 <mg_str_s>
 8003210:	f104 0318 	add.w	r3, r4, #24
 8003214:	463a      	mov	r2, r7
 8003216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 800321e:	4b17      	ldr	r3, [pc, #92]	@ (800327c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4c17      	ldr	r4, [pc, #92]	@ (8003280 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003224:	463b      	mov	r3, r7
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f01b ff9b 	bl	801f164 <mg_str_s>
 800322e:	f104 0320 	add.w	r3, r4, #32
 8003232:	463a      	mov	r2, r7
 8003234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003238:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8003244:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003246:	2201      	movs	r2, #1
 8003248:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 800324c:	490c      	ldr	r1, [pc, #48]	@ (8003280 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f017 fa62 	bl	801a718 <mg_mqtt_pub>
	for (size_t i = 0; i < sensor_count; i++) {
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	3301      	adds	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3af      	bcc.n	80031c2 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	372c      	adds	r7, #44	@ 0x2c
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	20000448 	.word	0x20000448
 8003270:	0801ee8b 	.word	0x0801ee8b
 8003274:	08023770 	.word	0x08023770
 8003278:	200003f4 	.word	0x200003f4
 800327c:	200003f8 	.word	0x200003f8
 8003280:	20000404 	.word	0x20000404

08003284 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b08d      	sub	sp, #52	@ 0x34
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	460b      	mov	r3, r1
 800328e:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8003298:	4b70      	ldr	r3, [pc, #448]	@ (800345c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f107 0014 	add.w	r0, r7, #20
 80032a0:	2200      	movs	r2, #0
 80032a2:	2101      	movs	r1, #1
 80032a4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80032a6:	4b6d      	ldr	r3, [pc, #436]	@ (800345c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f107 0214 	add.w	r2, r7, #20
 80032ae:	1cd0      	adds	r0, r2, #3
 80032b0:	2200      	movs	r2, #0
 80032b2:	2102      	movs	r1, #2
 80032b4:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	2203      	movs	r2, #3
 80032bc:	4968      	ldr	r1, [pc, #416]	@ (8003460 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f01d feb4 	bl	802102c <memcmp>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	3303      	adds	r3, #3
 80032d0:	2203      	movs	r2, #3
 80032d2:	4964      	ldr	r1, [pc, #400]	@ (8003464 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 80032d4:	4618      	mov	r0, r3
 80032d6:	f01d fea9 	bl	802102c <memcmp>
 80032da:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80b5 	beq.w	8003452 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 80032e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003460 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 80032ea:	f107 0214 	add.w	r2, r7, #20
 80032ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f2:	6018      	str	r0, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	8019      	strh	r1, [r3, #0]

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80032f8:	2101      	movs	r1, #1
 80032fa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80032fe:	f7ff ff23 	bl	8003148 <_ZL9my_callocjj>
 8003302:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003304:	2101      	movs	r1, #1
 8003306:	2080      	movs	r0, #128	@ 0x80
 8003308:	f7ff ff1e 	bl	8003148 <_ZL9my_callocjj>
 800330c:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 800330e:	2300      	movs	r3, #0
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003314:	e045      	b.n	80033a2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8003316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800331a:	3301      	adds	r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003322:	3328      	adds	r3, #40	@ 0x28
 8003324:	443b      	add	r3, r7
 8003326:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003334:	6a38      	ldr	r0, [r7, #32]
 8003336:	f000 ff7b 	bl	8004230 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 800333a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800333e:	3301      	adds	r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2201      	movs	r2, #1
 8003344:	2180      	movs	r1, #128	@ 0x80
 8003346:	69f8      	ldr	r0, [r7, #28]
 8003348:	f000 ffe0 	bl	800430c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 800334c:	4c46      	ldr	r4, [pc, #280]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800334e:	463b      	mov	r3, r7
 8003350:	69f9      	ldr	r1, [r7, #28]
 8003352:	4618      	mov	r0, r3
 8003354:	f01b ff06 	bl	801f164 <mg_str_s>
 8003358:	f104 0318 	add.w	r3, r4, #24
 800335c:	463a      	mov	r2, r7
 800335e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003362:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003366:	4c40      	ldr	r4, [pc, #256]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003368:	463b      	mov	r3, r7
 800336a:	6a39      	ldr	r1, [r7, #32]
 800336c:	4618      	mov	r0, r3
 800336e:	f01b fef9 	bl	801f164 <mg_str_s>
 8003372:	f104 0320 	add.w	r3, r4, #32
 8003376:	463a      	mov	r2, r7
 8003378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800337c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003380:	4b39      	ldr	r3, [pc, #228]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003388:	4b37      	ldr	r3, [pc, #220]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800338a:	2200      	movs	r2, #0
 800338c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003390:	4935      	ldr	r1, [pc, #212]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f017 f9c0 	bl	801a718 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8003398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800339c:	3301      	adds	r3, #1
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d9b5      	bls.n	8003316 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033b0:	e045      	b.n	800343e <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 80033b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033b6:	3301      	adds	r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033be:	3328      	adds	r3, #40	@ 0x28
 80033c0:	443b      	add	r3, r7
 80033c2:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	2202      	movs	r2, #2
 80033cc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80033d0:	6a38      	ldr	r0, [r7, #32]
 80033d2:	f000 ff2d 	bl	8004230 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 80033d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033da:	3301      	adds	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2202      	movs	r2, #2
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	69f8      	ldr	r0, [r7, #28]
 80033e4:	f000 ff92 	bl	800430c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 80033e8:	4c1f      	ldr	r4, [pc, #124]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80033ea:	463b      	mov	r3, r7
 80033ec:	69f9      	ldr	r1, [r7, #28]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f01b feb8 	bl	801f164 <mg_str_s>
 80033f4:	f104 0318 	add.w	r3, r4, #24
 80033f8:	463a      	mov	r2, r7
 80033fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033fe:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003402:	4c19      	ldr	r4, [pc, #100]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003404:	463b      	mov	r3, r7
 8003406:	6a39      	ldr	r1, [r7, #32]
 8003408:	4618      	mov	r0, r3
 800340a:	f01b feab 	bl	801f164 <mg_str_s>
 800340e:	f104 0320 	add.w	r3, r4, #32
 8003412:	463a      	mov	r2, r7
 8003414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003418:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 800341c:	4b12      	ldr	r3, [pc, #72]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003426:	2200      	movs	r2, #0
 8003428:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 800342c:	490e      	ldr	r1, [pc, #56]	@ (8003468 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f017 f972 	bl	801a718 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003438:	3301      	adds	r3, #1
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800343e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003442:	2b02      	cmp	r3, #2
 8003444:	d9b5      	bls.n	80033b2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 8003446:	6a38      	ldr	r0, [r7, #32]
 8003448:	f006 fede 	bl	800a208 <vPortFree>
		free(topik);
 800344c:	69f8      	ldr	r0, [r7, #28]
 800344e:	f006 fedb 	bl	800a208 <vPortFree>
	}
}
 8003452:	bf00      	nop
 8003454:	372c      	adds	r7, #44	@ 0x2c
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	2000045c 	.word	0x2000045c
 8003460:	20000460 	.word	0x20000460
 8003464:	20000463 	.word	0x20000463
 8003468:	20000404 	.word	0x20000404

0800346c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b089      	sub	sp, #36	@ 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6178      	str	r0, [r7, #20]
 8003474:	6139      	str	r1, [r7, #16]
 8003476:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e031      	b.n	80034e6 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7a>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d127      	bne.n	80034e0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003490:	2101      	movs	r1, #1
 8003492:	2080      	movs	r0, #128	@ 0x80
 8003494:	f7ff fe58 	bl	8003148 <_ZL9my_callocjj>
 8003498:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2202      	movs	r2, #2
 80034a8:	2180      	movs	r1, #128	@ 0x80
 80034aa:	69b8      	ldr	r0, [r7, #24]
 80034ac:	f000 ff04 	bl	80042b8 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x8c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80034b8:	4c0f      	ldr	r4, [pc, #60]	@ (80034f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x8c>)
 80034ba:	463b      	mov	r3, r7
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	4618      	mov	r0, r3
 80034c0:	f01b fe50 	bl	801f164 <mg_str_s>
 80034c4:	f104 0318 	add.w	r3, r4, #24
 80034c8:	463a      	mov	r2, r7
 80034ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ce:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 80034d2:	4909      	ldr	r1, [pc, #36]	@ (80034f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x8c>)
 80034d4:	6978      	ldr	r0, [r7, #20]
 80034d6:	f017 f9ed 	bl	801a8b4 <mg_mqtt_sub>
			free(topik);
 80034da:	69b8      	ldr	r0, [r7, #24]
 80034dc:	f006 fe94 	bl	800a208 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3c9      	bcc.n	8003482 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	3724      	adds	r7, #36	@ 0x24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	20000404 	.word	0x20000404

080034fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10e      	bne.n	800353e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8003520:	4b73      	ldr	r3, [pc, #460]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f340 80dc 	ble.w	80036e2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 800352a:	4b72      	ldr	r3, [pc, #456]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 800352c:	228b      	movs	r2, #139	@ 0x8b
 800352e:	4972      	ldr	r1, [pc, #456]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8003530:	2001      	movs	r0, #1
 8003532:	f015 fb9b 	bl	8018c6c <mg_log_prefix>
 8003536:	4871      	ldr	r0, [pc, #452]	@ (80036fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8003538:	f015 fbe8 	bl	8018d0c <mg_log>
    	return;
 800353c:	e0d1      	b.n	80036e2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 800353e:	4b70      	ldr	r3, [pc, #448]	@ (8003700 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f107 0010 	add.w	r0, r7, #16
 8003546:	2200      	movs	r2, #0
 8003548:	2102      	movs	r1, #2
 800354a:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	f107 0210 	add.w	r2, r7, #16
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4611      	mov	r1, r2
 8003558:	8019      	strh	r1, [r3, #0]
 800355a:	3302      	adds	r3, #2
 800355c:	0c12      	lsrs	r2, r2, #16
 800355e:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 8003560:	4968      	ldr	r1, [pc, #416]	@ (8003704 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 8003562:	69f8      	ldr	r0, [r7, #28]
 8003564:	f01d fd4c 	bl	8021000 <strstr>
 8003568:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a9 	beq.w	80036c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c8>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	461a      	mov	r2, r3
 8003578:	4963      	ldr	r1, [pc, #396]	@ (8003708 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f01d fa1a 	bl	80209b4 <siscanf>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 808b 	beq.w	80036a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8003592:	4b57      	ldr	r3, [pc, #348]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	dd0b      	ble.n	80035b2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 800359a:	4b56      	ldr	r3, [pc, #344]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 800359c:	2298      	movs	r2, #152	@ 0x98
 800359e:	4956      	ldr	r1, [pc, #344]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80035a0:	2002      	movs	r0, #2
 80035a2:	f015 fb63 	bl	8018c6c <mg_log_prefix>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4857      	ldr	r0, [pc, #348]	@ (800370c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 80035ae:	f015 fbad 	bl	8018d0c <mg_log>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd02      	ble.n	80035be <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	dd11      	ble.n	80035e2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xe6>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80035be:	4b4c      	ldr	r3, [pc, #304]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f340 808f 	ble.w	80036e6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ea>
 80035c8:	4b4a      	ldr	r3, [pc, #296]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 80035ca:	229a      	movs	r2, #154	@ 0x9a
 80035cc:	494a      	ldr	r1, [pc, #296]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80035ce:	2001      	movs	r0, #1
 80035d0:	f015 fb4c 	bl	8018c6c <mg_log_prefix>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2103      	movs	r1, #3
 80035da:	484d      	ldr	r0, [pc, #308]	@ (8003710 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 80035dc:	f015 fb96 	bl	8018d0c <mg_log>
    			return;
 80035e0:	e081      	b.n	80036e6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ea>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d125      	bne.n	8003636 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13a>
 80035ea:	2202      	movs	r2, #2
 80035ec:	4949      	ldr	r1, [pc, #292]	@ (8003714 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 80035ee:	69b8      	ldr	r0, [r7, #24]
 80035f0:	f01d fcbb 	bl	8020f6a <strncmp>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11d      	bne.n	8003636 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13a>
				sw_w[relay_number-1] = 1;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	3320      	adds	r3, #32
 8003600:	443b      	add	r3, r7
 8003602:	2201      	movs	r2, #1
 8003604:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8003608:	4b39      	ldr	r3, [pc, #228]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	dd0a      	ble.n	8003626 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x12a>
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8003612:	22a1      	movs	r2, #161	@ 0xa1
 8003614:	4938      	ldr	r1, [pc, #224]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8003616:	2002      	movs	r0, #2
 8003618:	f015 fb28 	bl	8018c6c <mg_log_prefix>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4619      	mov	r1, r3
 8003620:	483d      	ldr	r0, [pc, #244]	@ (8003718 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8003622:	f015 fb73 	bl	8018d0c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8003626:	4b36      	ldr	r3, [pc, #216]	@ (8003700 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f107 000c 	add.w	r0, r7, #12
 800362e:	2201      	movs	r2, #1
 8003630:	2102      	movs	r1, #2
 8003632:	4798      	blx	r3
 8003634:	e058      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d125      	bne.n	800368a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18e>
 800363e:	2203      	movs	r2, #3
 8003640:	4936      	ldr	r1, [pc, #216]	@ (800371c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f01d fc91 	bl	8020f6a <strncmp>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11d      	bne.n	800368a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18e>
				sw_w[relay_number-1] = 0;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3b01      	subs	r3, #1
 8003652:	3320      	adds	r3, #32
 8003654:	443b      	add	r3, r7
 8003656:	2200      	movs	r2, #0
 8003658:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 800365c:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	dd0a      	ble.n	800367a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17e>
 8003664:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8003666:	22a5      	movs	r2, #165	@ 0xa5
 8003668:	4923      	ldr	r1, [pc, #140]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 800366a:	2002      	movs	r0, #2
 800366c:	f015 fafe 	bl	8018c6c <mg_log_prefix>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4619      	mov	r1, r3
 8003674:	482a      	ldr	r0, [pc, #168]	@ (8003720 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8003676:	f015 fb49 	bl	8018d0c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 800367a:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f107 000c 	add.w	r0, r7, #12
 8003682:	2201      	movs	r2, #1
 8003684:	2102      	movs	r1, #2
 8003686:	4798      	blx	r3
 8003688:	e02e      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	dd2a      	ble.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
 8003692:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8003694:	22a9      	movs	r2, #169	@ 0xa9
 8003696:	4918      	ldr	r1, [pc, #96]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8003698:	2001      	movs	r0, #1
 800369a:	f015 fae7 	bl	8018c6c <mg_log_prefix>
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	4820      	ldr	r0, [pc, #128]	@ (8003724 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80036a2:	f015 fb33 	bl	8018d0c <mg_log>
 80036a6:	e01f      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	dd1b      	ble.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 80036b2:	22ad      	movs	r2, #173	@ 0xad
 80036b4:	4910      	ldr	r1, [pc, #64]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80036b6:	2001      	movs	r0, #1
 80036b8:	f015 fad8 	bl	8018c6c <mg_log_prefix>
 80036bc:	481a      	ldr	r0, [pc, #104]	@ (8003728 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 80036be:	f015 fb25 	bl	8018d0c <mg_log>
 80036c2:	e011      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 80036c4:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dd0d      	ble.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 80036ce:	22b0      	movs	r2, #176	@ 0xb0
 80036d0:	4909      	ldr	r1, [pc, #36]	@ (80036f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 80036d2:	2001      	movs	r0, #1
 80036d4:	f015 faca 	bl	8018c6c <mg_log_prefix>
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	4814      	ldr	r0, [pc, #80]	@ (800372c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 80036dc:	f015 fb16 	bl	8018d0c <mg_log>
 80036e0:	e002      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
    	return;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>
    			return;
 80036e6:	bf00      	nop
    }
}
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000288 	.word	0x20000288
 80036f4:	08023774 	.word	0x08023774
 80036f8:	08023794 	.word	0x08023794
 80036fc:	080237c0 	.word	0x080237c0
 8003700:	2000045c 	.word	0x2000045c
 8003704:	080237e4 	.word	0x080237e4
 8003708:	080237ec 	.word	0x080237ec
 800370c:	080237f8 	.word	0x080237f8
 8003710:	08023824 	.word	0x08023824
 8003714:	08023874 	.word	0x08023874
 8003718:	08023878 	.word	0x08023878
 800371c:	0802388c 	.word	0x0802388c
 8003720:	08023890 	.word	0x08023890
 8003724:	080238a4 	.word	0x080238a4
 8003728:	080238e0 	.word	0x080238e0
 800372c:	08023918 	.word	0x08023918

08003730 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	if(is_registered){
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fd9c 	bl	8003284 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000458 	.word	0x20000458
 8003758:	20000444 	.word	0x20000444

0800375c <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b11      	cmp	r3, #17
 800376c:	d12e      	bne.n	80037cc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x70>
		MG_DEBUG(("MQTT_open_connection"));
 800376e:	4b27      	ldr	r3, [pc, #156]	@ (800380c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b02      	cmp	r3, #2
 8003774:	dd08      	ble.n	8003788 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 8003776:	4b26      	ldr	r3, [pc, #152]	@ (8003810 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8003778:	22bd      	movs	r2, #189	@ 0xbd
 800377a:	4926      	ldr	r1, [pc, #152]	@ (8003814 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 800377c:	2003      	movs	r0, #3
 800377e:	f015 fa75 	bl	8018c6c <mg_log_prefix>
 8003782:	4825      	ldr	r0, [pc, #148]	@ (8003818 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8003784:	f015 fac2 	bl	8018d0c <mg_log>
		mqtt_conn = conn;
 8003788:	4a24      	ldr	r2, [pc, #144]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 800378e:	4b24      	ldr	r3, [pc, #144]	@ (8003820 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc4>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	f083 0301 	eor.w	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d032      	beq.n	8003802 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa6>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 800379c:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2206      	movs	r2, #6
 80037a2:	4920      	ldr	r1, [pc, #128]	@ (8003824 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fced 	bl	8003184 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80037aa:	4b1c      	ldr	r3, [pc, #112]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fd67 	bl	8003284 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2206      	movs	r2, #6
 80037bc:	4919      	ldr	r1, [pc, #100]	@ (8003824 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fe54 	bl	800346c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 80037c4:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc4>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]

	}else if (ev == MG_EV_CLOSE){
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 80037ca:	e01a      	b.n	8003802 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa6>
	}else if (ev == MG_EV_MQTT_MSG){
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d10b      	bne.n	80037ea <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x8e>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff fe90 	bl	80034fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fd4e 	bl	8003284 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80037e8:	e00b      	b.n	8003802 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa6>
	}else if (ev == MG_EV_MQTT_CMD){
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d008      	beq.n	8003802 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa6>
	}else if (ev == MG_EV_CLOSE){
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d105      	bne.n	8003802 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa6>
		mqtt_conn     = NULL;
 80037f6:	4b09      	ldr	r3, [pc, #36]	@ (800381c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
		is_registered = false;
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc4>)
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000288 	.word	0x20000288
 8003810:	08023948 	.word	0x08023948
 8003814:	08023794 	.word	0x08023794
 8003818:	0802395c 	.word	0x0802395c
 800381c:	20000444 	.word	0x20000444
 8003820:	20000458 	.word	0x20000458
 8003824:	2000002c 	.word	0x2000002c

08003828 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b087      	sub	sp, #28
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 8003830:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <_ZL18mqtt_timer_handlerPv+0x84>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d132      	bne.n	800389e <_ZL18mqtt_timer_handlerPv+0x76>

		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8003838:	2240      	movs	r2, #64	@ 0x40
 800383a:	2100      	movs	r1, #0
 800383c:	481c      	ldr	r0, [pc, #112]	@ (80038b0 <_ZL18mqtt_timer_handlerPv+0x88>)
 800383e:	f01d fc1f 	bl	8021080 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8003842:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4c1a      	ldr	r4, [pc, #104]	@ (80038b0 <_ZL18mqtt_timer_handlerPv+0x88>)
 8003848:	463b      	mov	r3, r7
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f01b fc89 	bl	801f164 <mg_str_s>
 8003852:	4622      	mov	r2, r4
 8003854:	463b      	mov	r3, r7
 8003856:	e893 0003 	ldmia.w	r3, {r0, r1}
 800385a:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <_ZL18mqtt_timer_handlerPv+0x90>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4c13      	ldr	r4, [pc, #76]	@ (80038b0 <_ZL18mqtt_timer_handlerPv+0x88>)
 8003864:	463b      	mov	r3, r7
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f01b fc7b 	bl	801f164 <mg_str_s>
 800386e:	f104 0308 	add.w	r3, r4, #8
 8003872:	463a      	mov	r2, r7
 8003874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003878:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <_ZL18mqtt_timer_handlerPv+0x88>)
 800387e:	223c      	movs	r2, #60	@ 0x3c
 8003880:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8003882:	4b0e      	ldr	r3, [pc, #56]	@ (80038bc <_ZL18mqtt_timer_handlerPv+0x94>)
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	4b0e      	ldr	r3, [pc, #56]	@ (80038c0 <_ZL18mqtt_timer_handlerPv+0x98>)
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <_ZL18mqtt_timer_handlerPv+0x9c>)
 8003890:	4a07      	ldr	r2, [pc, #28]	@ (80038b0 <_ZL18mqtt_timer_handlerPv+0x88>)
 8003892:	f017 fae9 	bl	801ae68 <mg_mqtt_connect>
 8003896:	4603      	mov	r3, r0
 8003898:	4a04      	ldr	r2, [pc, #16]	@ (80038ac <_ZL18mqtt_timer_handlerPv+0x84>)
 800389a:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 800389c:	e002      	b.n	80038a4 <_ZL18mqtt_timer_handlerPv+0x7c>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 800389e:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <_ZL18mqtt_timer_handlerPv+0x84>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd90      	pop	{r4, r7, pc}
 80038ac:	20000444 	.word	0x20000444
 80038b0:	20000404 	.word	0x20000404
 80038b4:	200003ec 	.word	0x200003ec
 80038b8:	200003f0 	.word	0x200003f0
 80038bc:	200003fc 	.word	0x200003fc
 80038c0:	200003e8 	.word	0x200003e8
 80038c4:	0800375d 	.word	0x0800375d

080038c8 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 80038d0:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 80038d8:	4b07      	ldr	r3, [pc, #28]	@ (80038f8 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fccc 	bl	8003284 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000444 	.word	0x20000444
 80038f8:	20000458 	.word	0x20000458

080038fc <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
    return mqtt_conn;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <get_mqtt_connection+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000444 	.word	0x20000444

08003914 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b08b      	sub	sp, #44	@ 0x2c
 8003918:	af04      	add	r7, sp, #16
 800391a:	6178      	str	r0, [r7, #20]
 800391c:	6139      	str	r1, [r7, #16]
 800391e:	60fa      	str	r2, [r7, #12]
 8003920:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 8003922:	2101      	movs	r1, #1
 8003924:	2080      	movs	r0, #128	@ 0x80
 8003926:	f7ff fc0f 	bl	8003148 <_ZL9my_callocjj>
 800392a:	4603      	mov	r3, r0
 800392c:	4a50      	ldr	r2, [pc, #320]	@ (8003a70 <mqtt_init+0x15c>)
 800392e:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8003930:	2101      	movs	r1, #1
 8003932:	2021      	movs	r0, #33	@ 0x21
 8003934:	f7ff fc08 	bl	8003148 <_ZL9my_callocjj>
 8003938:	4603      	mov	r3, r0
 800393a:	4a4e      	ldr	r2, [pc, #312]	@ (8003a74 <mqtt_init+0x160>)
 800393c:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 800393e:	2101      	movs	r1, #1
 8003940:	2021      	movs	r0, #33	@ 0x21
 8003942:	f7ff fc01 	bl	8003148 <_ZL9my_callocjj>
 8003946:	4603      	mov	r3, r0
 8003948:	4a4b      	ldr	r2, [pc, #300]	@ (8003a78 <mqtt_init+0x164>)
 800394a:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 800394c:	2101      	movs	r1, #1
 800394e:	2080      	movs	r0, #128	@ 0x80
 8003950:	f7ff fbfa 	bl	8003148 <_ZL9my_callocjj>
 8003954:	4603      	mov	r3, r0
 8003956:	4a49      	ldr	r2, [pc, #292]	@ (8003a7c <mqtt_init+0x168>)
 8003958:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 800395a:	2101      	movs	r1, #1
 800395c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003960:	f7ff fbf2 	bl	8003148 <_ZL9my_callocjj>
 8003964:	4603      	mov	r3, r0
 8003966:	4a46      	ldr	r2, [pc, #280]	@ (8003a80 <mqtt_init+0x16c>)
 8003968:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 800396a:	2101      	movs	r1, #1
 800396c:	2028      	movs	r0, #40	@ 0x28
 800396e:	f7ff fbeb 	bl	8003148 <_ZL9my_callocjj>
 8003972:	4603      	mov	r3, r0
 8003974:	4a43      	ldr	r2, [pc, #268]	@ (8003a84 <mqtt_init+0x170>)
 8003976:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 8003978:	4a43      	ldr	r2, [pc, #268]	@ (8003a88 <mqtt_init+0x174>)
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 800397e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <mqtt_init+0x15c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f01d fc5a 	bl	802123e <strcpy>
	strcpy(mqtt_username,   (char *)username);
 800398a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <mqtt_init+0x160>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f01d fc54 	bl	802123e <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8003996:	4b38      	ldr	r3, [pc, #224]	@ (8003a78 <mqtt_init+0x164>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800399c:	4618      	mov	r0, r3
 800399e:	f01d fc4e 	bl	802123e <strcpy>

	mgr = (struct mg_mgr *)     mgr_parameter;
 80039a2:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <mqtt_init+0x178>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 80039a8:	4a39      	ldr	r2, [pc, #228]	@ (8003a90 <mqtt_init+0x17c>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 80039ae:	4b38      	ldr	r3, [pc, #224]	@ (8003a90 <mqtt_init+0x17c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2106      	movs	r1, #6
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f899 	bl	8003aec <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80039ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003a74 <mqtt_init+0x160>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4c35      	ldr	r4, [pc, #212]	@ (8003a94 <mqtt_init+0x180>)
 80039c0:	463b      	mov	r3, r7
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f01b fbcd 	bl	801f164 <mg_str_s>
 80039ca:	4622      	mov	r2, r4
 80039cc:	463b      	mov	r3, r7
 80039ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039d2:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80039d6:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <mqtt_init+0x164>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4c2e      	ldr	r4, [pc, #184]	@ (8003a94 <mqtt_init+0x180>)
 80039dc:	463b      	mov	r3, r7
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f01b fbbf 	bl	801f164 <mg_str_s>
 80039e6:	f104 0308 	add.w	r3, r4, #8
 80039ea:	463a      	mov	r2, r7
 80039ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039f0:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <mqtt_init+0x180>)
 80039f6:	223c      	movs	r2, #60	@ 0x3c
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80039fa:	4b24      	ldr	r3, [pc, #144]	@ (8003a8c <mqtt_init+0x178>)
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <mqtt_init+0x184>)
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2303      	movs	r3, #3
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	4608      	mov	r0, r1
 8003a14:	f017 fec4 	bl	801b7a0 <mg_timer_add>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <mqtt_init+0x188>)
 8003a1c:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <mqtt_init+0x178>)
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <mqtt_init+0x18c>)
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	4608      	mov	r0, r1
 8003a38:	f017 feb2 	bl	801b7a0 <mg_timer_add>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <mqtt_init+0x190>)
 8003a40:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <mqtt_init+0x178>)
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	4b17      	ldr	r3, [pc, #92]	@ (8003aa8 <mqtt_init+0x194>)
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	f017 fea0 	bl	801b7a0 <mg_timer_add>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a12      	ldr	r2, [pc, #72]	@ (8003aac <mqtt_init+0x198>)
 8003a64:	6013      	str	r3, [r2, #0]

}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200003e8 	.word	0x200003e8
 8003a74:	200003ec 	.word	0x200003ec
 8003a78:	200003f0 	.word	0x200003f0
 8003a7c:	200003f4 	.word	0x200003f4
 8003a80:	200003f8 	.word	0x200003f8
 8003a84:	20000448 	.word	0x20000448
 8003a88:	2000045c 	.word	0x2000045c
 8003a8c:	200003fc 	.word	0x200003fc
 8003a90:	20000400 	.word	0x20000400
 8003a94:	20000404 	.word	0x20000404
 8003a98:	08003829 	.word	0x08003829
 8003a9c:	2000044c 	.word	0x2000044c
 8003aa0:	08003731 	.word	0x08003731
 8003aa4:	20000450 	.word	0x20000450
 8003aa8:	080038c9 	.word	0x080038c9
 8003aac:	20000454 	.word	0x20000454

08003ab0 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f006 fad2 	bl	800a06c <pvPortMalloc>
 8003ac8:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <_ZL9my_callocjj+0x32>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2100      	movs	r1, #0
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f01d facf 	bl	8021080 <memset>
  return p;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 8003af6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <set_device_id+0x78>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <set_device_id+0x1c>
		free(unical_id);
 8003afe:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <set_device_id+0x78>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f006 fb80 	bl	800a208 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ffcd 	bl	8003ab0 <_ZL9my_callocjj>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <set_device_id+0x78>)
 8003b1a:	6013      	str	r3, [r2, #0]


	if (unical_id){
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <set_device_id+0x78>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e00f      	b.n	8003b4a <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <set_device_id+0x78>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	18d0      	adds	r0, r2, r3
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <set_device_id+0x7c>)
 8003b40:	f01c ff18 	bl	8020974 <siprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3eb      	bcc.n	8003b2a <set_device_id+0x3e>
 8003b52:	e002      	b.n	8003b5a <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b58:	e000      	b.n	8003b5c <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000468 	.word	0x20000468
 8003b68:	08023974 	.word	0x08023974

08003b6c <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 8003b76:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <set_device_conf_ip+0x50>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <set_device_conf_ip+0x50>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f006 fb40 	bl	800a208 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len, sizeof(char));
 8003b88:	2101      	movs	r1, #1
 8003b8a:	6838      	ldr	r0, [r7, #0]
 8003b8c:	f7ff ff90 	bl	8003ab0 <_ZL9my_callocjj>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <set_device_conf_ip+0x50>)
 8003b94:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <set_device_conf_ip+0x50>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <set_device_conf_ip+0x44>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <set_device_conf_ip+0x50>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f01d f9f1 	bl	8020f8e <strncpy>
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 8003bac:	2300      	movs	r3, #0
 8003bae:	e001      	b.n	8003bb4 <set_device_conf_ip+0x48>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000046c 	.word	0x2000046c

08003bc0 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af06      	add	r7, sp, #24
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	460b      	mov	r3, r1
 8003bd0:	71fb      	strb	r3, [r7, #7]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	f200 80a3 	bhi.w	8003d2c <get_config_topik_string+0x16c>
 8003be6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <get_config_topik_string+0x2c>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c0d 	.word	0x08003c0d
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c55 	.word	0x08003c55
 8003bf8:	08003c9d 	.word	0x08003c9d
 8003bfc:	08003c79 	.word	0x08003c79
 8003c00:	08003ce5 	.word	0x08003ce5
 8003c04:	08003d09 	.word	0x08003d09
 8003c08:	08003cc1 	.word	0x08003cc1
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8003c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	79ba      	ldrb	r2, [r7, #6]
 8003c12:	9204      	str	r2, [sp, #16]
 8003c14:	4a4a      	ldr	r2, [pc, #296]	@ (8003d40 <get_config_topik_string+0x180>)
 8003c16:	9203      	str	r2, [sp, #12]
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d44 <get_config_topik_string+0x184>)
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <get_config_topik_string+0x188>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4b4a      	ldr	r3, [pc, #296]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003c24:	4a4a      	ldr	r2, [pc, #296]	@ (8003d50 <get_config_topik_string+0x190>)
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f01c fe6f 	bl	802090c <sniprintf>
			break;
 8003c2e:	e080      	b.n	8003d32 <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8003c30:	4b42      	ldr	r3, [pc, #264]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	79ba      	ldrb	r2, [r7, #6]
 8003c36:	9204      	str	r2, [sp, #16]
 8003c38:	4a46      	ldr	r2, [pc, #280]	@ (8003d54 <get_config_topik_string+0x194>)
 8003c3a:	9203      	str	r2, [sp, #12]
 8003c3c:	9302      	str	r3, [sp, #8]
 8003c3e:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <get_config_topik_string+0x184>)
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	4b44      	ldr	r3, [pc, #272]	@ (8003d54 <get_config_topik_string+0x194>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003c48:	4a41      	ldr	r2, [pc, #260]	@ (8003d50 <get_config_topik_string+0x190>)
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f01c fe5d 	bl	802090c <sniprintf>
			break;
 8003c52:	e06e      	b.n	8003d32 <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8003c54:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	79ba      	ldrb	r2, [r7, #6]
 8003c5a:	9204      	str	r2, [sp, #16]
 8003c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d58 <get_config_topik_string+0x198>)
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	9302      	str	r3, [sp, #8]
 8003c62:	4b38      	ldr	r3, [pc, #224]	@ (8003d44 <get_config_topik_string+0x184>)
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	4b3d      	ldr	r3, [pc, #244]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4b38      	ldr	r3, [pc, #224]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003c6c:	4a38      	ldr	r2, [pc, #224]	@ (8003d50 <get_config_topik_string+0x190>)
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f01c fe4b 	bl	802090c <sniprintf>
			break;
 8003c76:	e05c      	b.n	8003d32 <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	79ba      	ldrb	r2, [r7, #6]
 8003c7e:	9204      	str	r2, [sp, #16]
 8003c80:	4a37      	ldr	r2, [pc, #220]	@ (8003d60 <get_config_topik_string+0x1a0>)
 8003c82:	9203      	str	r2, [sp, #12]
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	4b2f      	ldr	r3, [pc, #188]	@ (8003d44 <get_config_topik_string+0x184>)
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003c90:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <get_config_topik_string+0x190>)
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f01c fe39 	bl	802090c <sniprintf>
			break;
 8003c9a:	e04a      	b.n	8003d32 <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8003c9c:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	79ba      	ldrb	r2, [r7, #6]
 8003ca2:	9204      	str	r2, [sp, #16]
 8003ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8003d64 <get_config_topik_string+0x1a4>)
 8003ca6:	9203      	str	r2, [sp, #12]
 8003ca8:	9302      	str	r3, [sp, #8]
 8003caa:	4b26      	ldr	r3, [pc, #152]	@ (8003d44 <get_config_topik_string+0x184>)
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003cb4:	4a26      	ldr	r2, [pc, #152]	@ (8003d50 <get_config_topik_string+0x190>)
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f01c fe27 	bl	802090c <sniprintf>
			break;
 8003cbe:	e038      	b.n	8003d32 <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	79ba      	ldrb	r2, [r7, #6]
 8003cc6:	9204      	str	r2, [sp, #16]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <get_config_topik_string+0x1a8>)
 8003cca:	9203      	str	r2, [sp, #12]
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <get_config_topik_string+0x184>)
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <get_config_topik_string+0x190>)
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f01c fe15 	bl	802090c <sniprintf>
			break;
 8003ce2:	e026      	b.n	8003d32 <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	79ba      	ldrb	r2, [r7, #6]
 8003cea:	9204      	str	r2, [sp, #16]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <get_config_topik_string+0x1ac>)
 8003cee:	9203      	str	r2, [sp, #12]
 8003cf0:	9302      	str	r3, [sp, #8]
 8003cf2:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <get_config_topik_string+0x184>)
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003cfc:	4a14      	ldr	r2, [pc, #80]	@ (8003d50 <get_config_topik_string+0x190>)
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f01c fe03 	bl	802090c <sniprintf>
			break;
 8003d06:	e014      	b.n	8003d32 <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8003d08:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <get_config_topik_string+0x17c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	79ba      	ldrb	r2, [r7, #6]
 8003d0e:	9204      	str	r2, [sp, #16]
 8003d10:	4a17      	ldr	r2, [pc, #92]	@ (8003d70 <get_config_topik_string+0x1b0>)
 8003d12:	9203      	str	r2, [sp, #12]
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <get_config_topik_string+0x184>)
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <get_config_topik_string+0x19c>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <get_config_topik_string+0x18c>)
 8003d20:	4a0b      	ldr	r2, [pc, #44]	@ (8003d50 <get_config_topik_string+0x190>)
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f01c fdf1 	bl	802090c <sniprintf>
			break;
 8003d2a:	e002      	b.n	8003d32 <get_config_topik_string+0x172>
		default:
			return -1;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d30:	e000      	b.n	8003d34 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000468 	.word	0x20000468
 8003d40:	08023994 	.word	0x08023994
 8003d44:	0802399c 	.word	0x0802399c
 8003d48:	080239a4 	.word	0x080239a4
 8003d4c:	2000005c 	.word	0x2000005c
 8003d50:	0802397c 	.word	0x0802397c
 8003d54:	080239b4 	.word	0x080239b4
 8003d58:	080239bc 	.word	0x080239bc
 8003d5c:	080239c4 	.word	0x080239c4
 8003d60:	080239cc 	.word	0x080239cc
 8003d64:	080239d4 	.word	0x080239d4
 8003d68:	080239dc 	.word	0x080239dc
 8003d6c:	080239ec 	.word	0x080239ec
 8003d70:	080239fc 	.word	0x080239fc

08003d74 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b09f      	sub	sp, #124	@ 0x7c
 8003d78:	af16      	add	r7, sp, #88	@ 0x58
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f01d f970 	bl	8021080 <memset>

	switch (payload_type) {
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	2b07      	cmp	r3, #7
 8003da6:	f200 820f 	bhi.w	80041c8 <get_config_payload_string+0x454>
 8003daa:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <get_config_payload_string+0x3c>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dd1 	.word	0x08003dd1
 8003db4:	08003e61 	.word	0x08003e61
 8003db8:	08003f2b 	.word	0x08003f2b
 8003dbc:	08004051 	.word	0x08004051
 8003dc0:	08003f89 	.word	0x08003f89
 8003dc4:	0800410d 	.word	0x0800410d
 8003dc8:	0800416b 	.word	0x0800416b
 8003dcc:	080040af 	.word	0x080040af

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2080      	movs	r0, #128	@ 0x80
 8003dd4:	f7ff fe6c 	bl	8003ab0 <_ZL9my_callocjj>
 8003dd8:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8003dda:	79bb      	ldrb	r3, [r7, #6]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4b82      	ldr	r3, [pc, #520]	@ (8003fe8 <get_config_payload_string+0x274>)
 8003de0:	4a82      	ldr	r2, [pc, #520]	@ (8003fec <get_config_payload_string+0x278>)
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	69b8      	ldr	r0, [r7, #24]
 8003de6:	f01c fd91 	bl	802090c <sniprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8003dea:	4b81      	ldr	r3, [pc, #516]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	79ba      	ldrb	r2, [r7, #6]
 8003df0:	79b9      	ldrb	r1, [r7, #6]
 8003df2:	487f      	ldr	r0, [pc, #508]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003df4:	6800      	ldr	r0, [r0, #0]
 8003df6:	79bc      	ldrb	r4, [r7, #6]
 8003df8:	4d7d      	ldr	r5, [pc, #500]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003dfa:	682d      	ldr	r5, [r5, #0]
 8003dfc:	4e7d      	ldr	r6, [pc, #500]	@ (8003ff4 <get_config_payload_string+0x280>)
 8003dfe:	6836      	ldr	r6, [r6, #0]
 8003e00:	9614      	str	r6, [sp, #80]	@ 0x50
 8003e02:	4e7d      	ldr	r6, [pc, #500]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003e04:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003e06:	4e7c      	ldr	r6, [pc, #496]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003e08:	9612      	str	r6, [sp, #72]	@ 0x48
 8003e0a:	4e7c      	ldr	r6, [pc, #496]	@ (8003ffc <get_config_payload_string+0x288>)
 8003e0c:	9611      	str	r6, [sp, #68]	@ 0x44
 8003e0e:	4e7c      	ldr	r6, [pc, #496]	@ (8004000 <get_config_payload_string+0x28c>)
 8003e10:	9610      	str	r6, [sp, #64]	@ 0x40
 8003e12:	4e7c      	ldr	r6, [pc, #496]	@ (8004004 <get_config_payload_string+0x290>)
 8003e14:	960f      	str	r6, [sp, #60]	@ 0x3c
 8003e16:	950e      	str	r5, [sp, #56]	@ 0x38
 8003e18:	4d7b      	ldr	r5, [pc, #492]	@ (8004008 <get_config_payload_string+0x294>)
 8003e1a:	950d      	str	r5, [sp, #52]	@ 0x34
 8003e1c:	4d7b      	ldr	r5, [pc, #492]	@ (800400c <get_config_payload_string+0x298>)
 8003e1e:	950c      	str	r5, [sp, #48]	@ 0x30
 8003e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e22:	4c7b      	ldr	r4, [pc, #492]	@ (8004010 <get_config_payload_string+0x29c>)
 8003e24:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e26:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e28:	4877      	ldr	r0, [pc, #476]	@ (8004008 <get_config_payload_string+0x294>)
 8003e2a:	9008      	str	r0, [sp, #32]
 8003e2c:	69b8      	ldr	r0, [r7, #24]
 8003e2e:	9007      	str	r0, [sp, #28]
 8003e30:	4878      	ldr	r0, [pc, #480]	@ (8004014 <get_config_payload_string+0x2a0>)
 8003e32:	9006      	str	r0, [sp, #24]
 8003e34:	9105      	str	r1, [sp, #20]
 8003e36:	4976      	ldr	r1, [pc, #472]	@ (8004010 <get_config_payload_string+0x29c>)
 8003e38:	9104      	str	r1, [sp, #16]
 8003e3a:	9203      	str	r2, [sp, #12]
 8003e3c:	4a74      	ldr	r2, [pc, #464]	@ (8004010 <get_config_payload_string+0x29c>)
 8003e3e:	9202      	str	r2, [sp, #8]
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	4b71      	ldr	r3, [pc, #452]	@ (8004008 <get_config_payload_string+0x294>)
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4b74      	ldr	r3, [pc, #464]	@ (8004018 <get_config_payload_string+0x2a4>)
 8003e48:	4a74      	ldr	r2, [pc, #464]	@ (800401c <get_config_payload_string+0x2a8>)
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f01c fd5d 	bl	802090c <sniprintf>
 8003e52:	4603      	mov	r3, r0
 8003e54:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8003e56:	69b8      	ldr	r0, [r7, #24]
 8003e58:	f006 f9d6 	bl	800a208 <vPortFree>

			return len;
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	e1b6      	b.n	80041ce <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8003e60:	2101      	movs	r1, #1
 8003e62:	2080      	movs	r0, #128	@ 0x80
 8003e64:	f7ff fe24 	bl	8003ab0 <_ZL9my_callocjj>
 8003e68:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2080      	movs	r0, #128	@ 0x80
 8003e6e:	f7ff fe1f 	bl	8003ab0 <_ZL9my_callocjj>
 8003e72:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8003e74:	79bb      	ldrb	r3, [r7, #6]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4b69      	ldr	r3, [pc, #420]	@ (8004020 <get_config_payload_string+0x2ac>)
 8003e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004024 <get_config_payload_string+0x2b0>)
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	69b8      	ldr	r0, [r7, #24]
 8003e80:	f01c fd44 	bl	802090c <sniprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8003e84:	4b5a      	ldr	r3, [pc, #360]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a60      	ldr	r2, [pc, #384]	@ (800400c <get_config_payload_string+0x298>)
 8003e8a:	9202      	str	r2, [sp, #8]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	9201      	str	r2, [sp, #4]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	4b5d      	ldr	r3, [pc, #372]	@ (8004008 <get_config_payload_string+0x294>)
 8003e94:	4a64      	ldr	r2, [pc, #400]	@ (8004028 <get_config_payload_string+0x2b4>)
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	6978      	ldr	r0, [r7, #20]
 8003e9a:	f01c fd37 	bl	802090c <sniprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8003e9e:	79bb      	ldrb	r3, [r7, #6]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4b62      	ldr	r3, [pc, #392]	@ (800402c <get_config_payload_string+0x2b8>)
 8003ea4:	4a51      	ldr	r2, [pc, #324]	@ (8003fec <get_config_payload_string+0x278>)
 8003ea6:	2180      	movs	r1, #128	@ 0x80
 8003ea8:	69b8      	ldr	r0, [r7, #24]
 8003eaa:	f01c fd2f 	bl	802090c <sniprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8003eae:	4b50      	ldr	r3, [pc, #320]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	79ba      	ldrb	r2, [r7, #6]
 8003eb4:	79b9      	ldrb	r1, [r7, #6]
 8003eb6:	484e      	ldr	r0, [pc, #312]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003eb8:	6800      	ldr	r0, [r0, #0]
 8003eba:	79bc      	ldrb	r4, [r7, #6]
 8003ebc:	4d4c      	ldr	r5, [pc, #304]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003ebe:	682d      	ldr	r5, [r5, #0]
 8003ec0:	4e4c      	ldr	r6, [pc, #304]	@ (8003ff4 <get_config_payload_string+0x280>)
 8003ec2:	6836      	ldr	r6, [r6, #0]
 8003ec4:	9614      	str	r6, [sp, #80]	@ 0x50
 8003ec6:	4e4c      	ldr	r6, [pc, #304]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003ec8:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003eca:	4e4b      	ldr	r6, [pc, #300]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003ecc:	9612      	str	r6, [sp, #72]	@ 0x48
 8003ece:	4e4b      	ldr	r6, [pc, #300]	@ (8003ffc <get_config_payload_string+0x288>)
 8003ed0:	9611      	str	r6, [sp, #68]	@ 0x44
 8003ed2:	4e4b      	ldr	r6, [pc, #300]	@ (8004000 <get_config_payload_string+0x28c>)
 8003ed4:	9610      	str	r6, [sp, #64]	@ 0x40
 8003ed6:	4e4b      	ldr	r6, [pc, #300]	@ (8004004 <get_config_payload_string+0x290>)
 8003ed8:	960f      	str	r6, [sp, #60]	@ 0x3c
 8003eda:	950e      	str	r5, [sp, #56]	@ 0x38
 8003edc:	4d4a      	ldr	r5, [pc, #296]	@ (8004008 <get_config_payload_string+0x294>)
 8003ede:	950d      	str	r5, [sp, #52]	@ 0x34
 8003ee0:	4d4a      	ldr	r5, [pc, #296]	@ (800400c <get_config_payload_string+0x298>)
 8003ee2:	950c      	str	r5, [sp, #48]	@ 0x30
 8003ee4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003ee6:	4c4e      	ldr	r4, [pc, #312]	@ (8004020 <get_config_payload_string+0x2ac>)
 8003ee8:	940a      	str	r4, [sp, #40]	@ 0x28
 8003eea:	9009      	str	r0, [sp, #36]	@ 0x24
 8003eec:	4846      	ldr	r0, [pc, #280]	@ (8004008 <get_config_payload_string+0x294>)
 8003eee:	9008      	str	r0, [sp, #32]
 8003ef0:	69b8      	ldr	r0, [r7, #24]
 8003ef2:	9007      	str	r0, [sp, #28]
 8003ef4:	6978      	ldr	r0, [r7, #20]
 8003ef6:	9006      	str	r0, [sp, #24]
 8003ef8:	9105      	str	r1, [sp, #20]
 8003efa:	4949      	ldr	r1, [pc, #292]	@ (8004020 <get_config_payload_string+0x2ac>)
 8003efc:	9104      	str	r1, [sp, #16]
 8003efe:	9203      	str	r2, [sp, #12]
 8003f00:	4a47      	ldr	r2, [pc, #284]	@ (8004020 <get_config_payload_string+0x2ac>)
 8003f02:	9202      	str	r2, [sp, #8]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	4b40      	ldr	r3, [pc, #256]	@ (8004008 <get_config_payload_string+0x294>)
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4b45      	ldr	r3, [pc, #276]	@ (8004020 <get_config_payload_string+0x2ac>)
 8003f0c:	4a43      	ldr	r2, [pc, #268]	@ (800401c <get_config_payload_string+0x2a8>)
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f01c fcfb 	bl	802090c <sniprintf>
 8003f16:	4603      	mov	r3, r0
 8003f18:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8003f1a:	69b8      	ldr	r0, [r7, #24]
 8003f1c:	f006 f974 	bl	800a208 <vPortFree>
			free(com_topik);
 8003f20:	6978      	ldr	r0, [r7, #20]
 8003f22:	f006 f971 	bl	800a208 <vPortFree>

			return len;
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	e151      	b.n	80041ce <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8003f2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	492f      	ldr	r1, [pc, #188]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f34:	6809      	ldr	r1, [r1, #0]
 8003f36:	482f      	ldr	r0, [pc, #188]	@ (8003ff4 <get_config_payload_string+0x280>)
 8003f38:	6800      	ldr	r0, [r0, #0]
 8003f3a:	9010      	str	r0, [sp, #64]	@ 0x40
 8003f3c:	482e      	ldr	r0, [pc, #184]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003f3e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f40:	482d      	ldr	r0, [pc, #180]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003f42:	900e      	str	r0, [sp, #56]	@ 0x38
 8003f44:	482d      	ldr	r0, [pc, #180]	@ (8003ffc <get_config_payload_string+0x288>)
 8003f46:	900d      	str	r0, [sp, #52]	@ 0x34
 8003f48:	482d      	ldr	r0, [pc, #180]	@ (8004000 <get_config_payload_string+0x28c>)
 8003f4a:	900c      	str	r0, [sp, #48]	@ 0x30
 8003f4c:	482d      	ldr	r0, [pc, #180]	@ (8004004 <get_config_payload_string+0x290>)
 8003f4e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003f50:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f52:	492d      	ldr	r1, [pc, #180]	@ (8004008 <get_config_payload_string+0x294>)
 8003f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f56:	4936      	ldr	r1, [pc, #216]	@ (8004030 <get_config_payload_string+0x2bc>)
 8003f58:	9108      	str	r1, [sp, #32]
 8003f5a:	4936      	ldr	r1, [pc, #216]	@ (8004034 <get_config_payload_string+0x2c0>)
 8003f5c:	9107      	str	r1, [sp, #28]
 8003f5e:	9206      	str	r2, [sp, #24]
 8003f60:	4a29      	ldr	r2, [pc, #164]	@ (8004008 <get_config_payload_string+0x294>)
 8003f62:	9205      	str	r2, [sp, #20]
 8003f64:	4a34      	ldr	r2, [pc, #208]	@ (8004038 <get_config_payload_string+0x2c4>)
 8003f66:	9204      	str	r2, [sp, #16]
 8003f68:	4a34      	ldr	r2, [pc, #208]	@ (800403c <get_config_payload_string+0x2c8>)
 8003f6a:	9203      	str	r2, [sp, #12]
 8003f6c:	4a31      	ldr	r2, [pc, #196]	@ (8004034 <get_config_payload_string+0x2c0>)
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	4a33      	ldr	r2, [pc, #204]	@ (8004040 <get_config_payload_string+0x2cc>)
 8003f72:	9201      	str	r2, [sp, #4]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <get_config_payload_string+0x294>)
 8003f78:	4a2e      	ldr	r2, [pc, #184]	@ (8004034 <get_config_payload_string+0x2c0>)
 8003f7a:	4928      	ldr	r1, [pc, #160]	@ (800401c <get_config_payload_string+0x2a8>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f01c fcf9 	bl	8020974 <siprintf>
 8003f82:	4603      	mov	r3, r0
 8003f84:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003f86:	e122      	b.n	80041ce <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	4917      	ldr	r1, [pc, #92]	@ (8003ff0 <get_config_payload_string+0x27c>)
 8003f92:	6809      	ldr	r1, [r1, #0]
 8003f94:	4817      	ldr	r0, [pc, #92]	@ (8003ff4 <get_config_payload_string+0x280>)
 8003f96:	6800      	ldr	r0, [r0, #0]
 8003f98:	9010      	str	r0, [sp, #64]	@ 0x40
 8003f9a:	4817      	ldr	r0, [pc, #92]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003f9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f9e:	4816      	ldr	r0, [pc, #88]	@ (8003ff8 <get_config_payload_string+0x284>)
 8003fa0:	900e      	str	r0, [sp, #56]	@ 0x38
 8003fa2:	4816      	ldr	r0, [pc, #88]	@ (8003ffc <get_config_payload_string+0x288>)
 8003fa4:	900d      	str	r0, [sp, #52]	@ 0x34
 8003fa6:	4816      	ldr	r0, [pc, #88]	@ (8004000 <get_config_payload_string+0x28c>)
 8003fa8:	900c      	str	r0, [sp, #48]	@ 0x30
 8003faa:	4816      	ldr	r0, [pc, #88]	@ (8004004 <get_config_payload_string+0x290>)
 8003fac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003fae:	910a      	str	r1, [sp, #40]	@ 0x28
 8003fb0:	4915      	ldr	r1, [pc, #84]	@ (8004008 <get_config_payload_string+0x294>)
 8003fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003fb4:	4923      	ldr	r1, [pc, #140]	@ (8004044 <get_config_payload_string+0x2d0>)
 8003fb6:	9108      	str	r1, [sp, #32]
 8003fb8:	4923      	ldr	r1, [pc, #140]	@ (8004048 <get_config_payload_string+0x2d4>)
 8003fba:	9107      	str	r1, [sp, #28]
 8003fbc:	9206      	str	r2, [sp, #24]
 8003fbe:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <get_config_payload_string+0x294>)
 8003fc0:	9205      	str	r2, [sp, #20]
 8003fc2:	4a22      	ldr	r2, [pc, #136]	@ (800404c <get_config_payload_string+0x2d8>)
 8003fc4:	9204      	str	r2, [sp, #16]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <get_config_payload_string+0x2a0>)
 8003fc8:	9203      	str	r2, [sp, #12]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	@ (8004048 <get_config_payload_string+0x2d4>)
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <get_config_payload_string+0x2cc>)
 8003fd0:	9201      	str	r2, [sp, #4]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <get_config_payload_string+0x294>)
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004048 <get_config_payload_string+0x2d4>)
 8003fd8:	4910      	ldr	r1, [pc, #64]	@ (800401c <get_config_payload_string+0x2a8>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f01c fcca 	bl	8020974 <siprintf>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003fe4:	e0f3      	b.n	80041ce <get_config_payload_string+0x45a>
 8003fe6:	bf00      	nop
 8003fe8:	08023a04 	.word	0x08023a04
 8003fec:	08023a10 	.word	0x08023a10
 8003ff0:	20000468 	.word	0x20000468
 8003ff4:	2000046c 	.word	0x2000046c
 8003ff8:	08023a18 	.word	0x08023a18
 8003ffc:	08023a1c 	.word	0x08023a1c
 8004000:	08023a2c 	.word	0x08023a2c
 8004004:	08023a40 	.word	0x08023a40
 8004008:	0802399c 	.word	0x0802399c
 800400c:	08023a4c 	.word	0x08023a4c
 8004010:	08023994 	.word	0x08023994
 8004014:	08023a50 	.word	0x08023a50
 8004018:	080239d4 	.word	0x080239d4
 800401c:	08026a58 	.word	0x08026a58
 8004020:	080239b4 	.word	0x080239b4
 8004024:	08023a54 	.word	0x08023a54
 8004028:	08026bd8 	.word	0x08026bd8
 800402c:	08023a5c 	.word	0x08023a5c
 8004030:	08023a70 	.word	0x08023a70
 8004034:	080239bc 	.word	0x080239bc
 8004038:	08023a74 	.word	0x08023a74
 800403c:	08023a84 	.word	0x08023a84
 8004040:	08023aa8 	.word	0x08023aa8
 8004044:	08023ab0 	.word	0x08023ab0
 8004048:	080239cc 	.word	0x080239cc
 800404c:	08023ab4 	.word	0x08023ab4
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8004050:	4b61      	ldr	r3, [pc, #388]	@ (80041d8 <get_config_payload_string+0x464>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a60      	ldr	r2, [pc, #384]	@ (80041d8 <get_config_payload_string+0x464>)
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	495f      	ldr	r1, [pc, #380]	@ (80041d8 <get_config_payload_string+0x464>)
 800405a:	6809      	ldr	r1, [r1, #0]
 800405c:	485f      	ldr	r0, [pc, #380]	@ (80041dc <get_config_payload_string+0x468>)
 800405e:	6800      	ldr	r0, [r0, #0]
 8004060:	9010      	str	r0, [sp, #64]	@ 0x40
 8004062:	485f      	ldr	r0, [pc, #380]	@ (80041e0 <get_config_payload_string+0x46c>)
 8004064:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004066:	485e      	ldr	r0, [pc, #376]	@ (80041e0 <get_config_payload_string+0x46c>)
 8004068:	900e      	str	r0, [sp, #56]	@ 0x38
 800406a:	485e      	ldr	r0, [pc, #376]	@ (80041e4 <get_config_payload_string+0x470>)
 800406c:	900d      	str	r0, [sp, #52]	@ 0x34
 800406e:	485e      	ldr	r0, [pc, #376]	@ (80041e8 <get_config_payload_string+0x474>)
 8004070:	900c      	str	r0, [sp, #48]	@ 0x30
 8004072:	485e      	ldr	r0, [pc, #376]	@ (80041ec <get_config_payload_string+0x478>)
 8004074:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004076:	910a      	str	r1, [sp, #40]	@ 0x28
 8004078:	495d      	ldr	r1, [pc, #372]	@ (80041f0 <get_config_payload_string+0x47c>)
 800407a:	9109      	str	r1, [sp, #36]	@ 0x24
 800407c:	495d      	ldr	r1, [pc, #372]	@ (80041f4 <get_config_payload_string+0x480>)
 800407e:	9108      	str	r1, [sp, #32]
 8004080:	495d      	ldr	r1, [pc, #372]	@ (80041f8 <get_config_payload_string+0x484>)
 8004082:	9107      	str	r1, [sp, #28]
 8004084:	9206      	str	r2, [sp, #24]
 8004086:	4a5a      	ldr	r2, [pc, #360]	@ (80041f0 <get_config_payload_string+0x47c>)
 8004088:	9205      	str	r2, [sp, #20]
 800408a:	4a5c      	ldr	r2, [pc, #368]	@ (80041fc <get_config_payload_string+0x488>)
 800408c:	9204      	str	r2, [sp, #16]
 800408e:	4a5c      	ldr	r2, [pc, #368]	@ (8004200 <get_config_payload_string+0x48c>)
 8004090:	9203      	str	r2, [sp, #12]
 8004092:	4a59      	ldr	r2, [pc, #356]	@ (80041f8 <get_config_payload_string+0x484>)
 8004094:	9202      	str	r2, [sp, #8]
 8004096:	4a5b      	ldr	r2, [pc, #364]	@ (8004204 <get_config_payload_string+0x490>)
 8004098:	9201      	str	r2, [sp, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4b54      	ldr	r3, [pc, #336]	@ (80041f0 <get_config_payload_string+0x47c>)
 800409e:	4a56      	ldr	r2, [pc, #344]	@ (80041f8 <get_config_payload_string+0x484>)
 80040a0:	4959      	ldr	r1, [pc, #356]	@ (8004208 <get_config_payload_string+0x494>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f01c fc66 	bl	8020974 <siprintf>
 80040a8:	4603      	mov	r3, r0
 80040aa:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80040ac:	e08f      	b.n	80041ce <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 80040ae:	4b4a      	ldr	r3, [pc, #296]	@ (80041d8 <get_config_payload_string+0x464>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a49      	ldr	r2, [pc, #292]	@ (80041d8 <get_config_payload_string+0x464>)
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	4948      	ldr	r1, [pc, #288]	@ (80041d8 <get_config_payload_string+0x464>)
 80040b8:	6809      	ldr	r1, [r1, #0]
 80040ba:	4848      	ldr	r0, [pc, #288]	@ (80041dc <get_config_payload_string+0x468>)
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	9010      	str	r0, [sp, #64]	@ 0x40
 80040c0:	4847      	ldr	r0, [pc, #284]	@ (80041e0 <get_config_payload_string+0x46c>)
 80040c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80040c4:	4846      	ldr	r0, [pc, #280]	@ (80041e0 <get_config_payload_string+0x46c>)
 80040c6:	900e      	str	r0, [sp, #56]	@ 0x38
 80040c8:	4846      	ldr	r0, [pc, #280]	@ (80041e4 <get_config_payload_string+0x470>)
 80040ca:	900d      	str	r0, [sp, #52]	@ 0x34
 80040cc:	4846      	ldr	r0, [pc, #280]	@ (80041e8 <get_config_payload_string+0x474>)
 80040ce:	900c      	str	r0, [sp, #48]	@ 0x30
 80040d0:	4846      	ldr	r0, [pc, #280]	@ (80041ec <get_config_payload_string+0x478>)
 80040d2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80040d4:	910a      	str	r1, [sp, #40]	@ 0x28
 80040d6:	4946      	ldr	r1, [pc, #280]	@ (80041f0 <get_config_payload_string+0x47c>)
 80040d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80040da:	494c      	ldr	r1, [pc, #304]	@ (800420c <get_config_payload_string+0x498>)
 80040dc:	9108      	str	r1, [sp, #32]
 80040de:	494c      	ldr	r1, [pc, #304]	@ (8004210 <get_config_payload_string+0x49c>)
 80040e0:	9107      	str	r1, [sp, #28]
 80040e2:	9206      	str	r2, [sp, #24]
 80040e4:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <get_config_payload_string+0x47c>)
 80040e6:	9205      	str	r2, [sp, #20]
 80040e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004214 <get_config_payload_string+0x4a0>)
 80040ea:	9204      	str	r2, [sp, #16]
 80040ec:	4a44      	ldr	r2, [pc, #272]	@ (8004200 <get_config_payload_string+0x48c>)
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <get_config_payload_string+0x49c>)
 80040f2:	9202      	str	r2, [sp, #8]
 80040f4:	4a43      	ldr	r2, [pc, #268]	@ (8004204 <get_config_payload_string+0x490>)
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4b3d      	ldr	r3, [pc, #244]	@ (80041f0 <get_config_payload_string+0x47c>)
 80040fc:	4a44      	ldr	r2, [pc, #272]	@ (8004210 <get_config_payload_string+0x49c>)
 80040fe:	4942      	ldr	r1, [pc, #264]	@ (8004208 <get_config_payload_string+0x494>)
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f01c fc37 	bl	8020974 <siprintf>
 8004106:	4603      	mov	r3, r0
 8004108:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 800410a:	e060      	b.n	80041ce <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 800410c:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <get_config_payload_string+0x464>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <get_config_payload_string+0x464>)
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	4930      	ldr	r1, [pc, #192]	@ (80041d8 <get_config_payload_string+0x464>)
 8004116:	6809      	ldr	r1, [r1, #0]
 8004118:	4830      	ldr	r0, [pc, #192]	@ (80041dc <get_config_payload_string+0x468>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	9010      	str	r0, [sp, #64]	@ 0x40
 800411e:	4830      	ldr	r0, [pc, #192]	@ (80041e0 <get_config_payload_string+0x46c>)
 8004120:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004122:	482f      	ldr	r0, [pc, #188]	@ (80041e0 <get_config_payload_string+0x46c>)
 8004124:	900e      	str	r0, [sp, #56]	@ 0x38
 8004126:	482f      	ldr	r0, [pc, #188]	@ (80041e4 <get_config_payload_string+0x470>)
 8004128:	900d      	str	r0, [sp, #52]	@ 0x34
 800412a:	482f      	ldr	r0, [pc, #188]	@ (80041e8 <get_config_payload_string+0x474>)
 800412c:	900c      	str	r0, [sp, #48]	@ 0x30
 800412e:	482f      	ldr	r0, [pc, #188]	@ (80041ec <get_config_payload_string+0x478>)
 8004130:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004132:	910a      	str	r1, [sp, #40]	@ 0x28
 8004134:	492e      	ldr	r1, [pc, #184]	@ (80041f0 <get_config_payload_string+0x47c>)
 8004136:	9109      	str	r1, [sp, #36]	@ 0x24
 8004138:	4937      	ldr	r1, [pc, #220]	@ (8004218 <get_config_payload_string+0x4a4>)
 800413a:	9108      	str	r1, [sp, #32]
 800413c:	4937      	ldr	r1, [pc, #220]	@ (800421c <get_config_payload_string+0x4a8>)
 800413e:	9107      	str	r1, [sp, #28]
 8004140:	9206      	str	r2, [sp, #24]
 8004142:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <get_config_payload_string+0x47c>)
 8004144:	9205      	str	r2, [sp, #20]
 8004146:	4a36      	ldr	r2, [pc, #216]	@ (8004220 <get_config_payload_string+0x4ac>)
 8004148:	9204      	str	r2, [sp, #16]
 800414a:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <get_config_payload_string+0x48c>)
 800414c:	9203      	str	r2, [sp, #12]
 800414e:	4a33      	ldr	r2, [pc, #204]	@ (800421c <get_config_payload_string+0x4a8>)
 8004150:	9202      	str	r2, [sp, #8]
 8004152:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <get_config_payload_string+0x490>)
 8004154:	9201      	str	r2, [sp, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <get_config_payload_string+0x47c>)
 800415a:	4a30      	ldr	r2, [pc, #192]	@ (800421c <get_config_payload_string+0x4a8>)
 800415c:	492a      	ldr	r1, [pc, #168]	@ (8004208 <get_config_payload_string+0x494>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f01c fc08 	bl	8020974 <siprintf>
 8004164:	4603      	mov	r3, r0
 8004166:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004168:	e031      	b.n	80041ce <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <get_config_payload_string+0x464>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <get_config_payload_string+0x464>)
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4919      	ldr	r1, [pc, #100]	@ (80041d8 <get_config_payload_string+0x464>)
 8004174:	6809      	ldr	r1, [r1, #0]
 8004176:	4819      	ldr	r0, [pc, #100]	@ (80041dc <get_config_payload_string+0x468>)
 8004178:	6800      	ldr	r0, [r0, #0]
 800417a:	9010      	str	r0, [sp, #64]	@ 0x40
 800417c:	4818      	ldr	r0, [pc, #96]	@ (80041e0 <get_config_payload_string+0x46c>)
 800417e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004180:	4817      	ldr	r0, [pc, #92]	@ (80041e0 <get_config_payload_string+0x46c>)
 8004182:	900e      	str	r0, [sp, #56]	@ 0x38
 8004184:	4817      	ldr	r0, [pc, #92]	@ (80041e4 <get_config_payload_string+0x470>)
 8004186:	900d      	str	r0, [sp, #52]	@ 0x34
 8004188:	4817      	ldr	r0, [pc, #92]	@ (80041e8 <get_config_payload_string+0x474>)
 800418a:	900c      	str	r0, [sp, #48]	@ 0x30
 800418c:	4817      	ldr	r0, [pc, #92]	@ (80041ec <get_config_payload_string+0x478>)
 800418e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004190:	910a      	str	r1, [sp, #40]	@ 0x28
 8004192:	4917      	ldr	r1, [pc, #92]	@ (80041f0 <get_config_payload_string+0x47c>)
 8004194:	9109      	str	r1, [sp, #36]	@ 0x24
 8004196:	4923      	ldr	r1, [pc, #140]	@ (8004224 <get_config_payload_string+0x4b0>)
 8004198:	9108      	str	r1, [sp, #32]
 800419a:	4923      	ldr	r1, [pc, #140]	@ (8004228 <get_config_payload_string+0x4b4>)
 800419c:	9107      	str	r1, [sp, #28]
 800419e:	9206      	str	r2, [sp, #24]
 80041a0:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <get_config_payload_string+0x47c>)
 80041a2:	9205      	str	r2, [sp, #20]
 80041a4:	4a21      	ldr	r2, [pc, #132]	@ (800422c <get_config_payload_string+0x4b8>)
 80041a6:	9204      	str	r2, [sp, #16]
 80041a8:	4a15      	ldr	r2, [pc, #84]	@ (8004200 <get_config_payload_string+0x48c>)
 80041aa:	9203      	str	r2, [sp, #12]
 80041ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <get_config_payload_string+0x4b4>)
 80041ae:	9202      	str	r2, [sp, #8]
 80041b0:	4a14      	ldr	r2, [pc, #80]	@ (8004204 <get_config_payload_string+0x490>)
 80041b2:	9201      	str	r2, [sp, #4]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <get_config_payload_string+0x47c>)
 80041b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004228 <get_config_payload_string+0x4b4>)
 80041ba:	4913      	ldr	r1, [pc, #76]	@ (8004208 <get_config_payload_string+0x494>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f01c fbd9 	bl	8020974 <siprintf>
 80041c2:	4603      	mov	r3, r0
 80041c4:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80041c6:	e002      	b.n	80041ce <get_config_payload_string+0x45a>

		default:
			return -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041cc:	e7ff      	b.n	80041ce <get_config_payload_string+0x45a>
			break;
	}
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3724      	adds	r7, #36	@ 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000468 	.word	0x20000468
 80041dc:	2000046c 	.word	0x2000046c
 80041e0:	08023a18 	.word	0x08023a18
 80041e4:	08023a1c 	.word	0x08023a1c
 80041e8:	08023a2c 	.word	0x08023a2c
 80041ec:	08023a40 	.word	0x08023a40
 80041f0:	0802399c 	.word	0x0802399c
 80041f4:	08023ac4 	.word	0x08023ac4
 80041f8:	080239d4 	.word	0x080239d4
 80041fc:	08023ac8 	.word	0x08023ac8
 8004200:	08023a50 	.word	0x08023a50
 8004204:	08023aa8 	.word	0x08023aa8
 8004208:	08026a58 	.word	0x08026a58
 800420c:	08023aec 	.word	0x08023aec
 8004210:	080239dc 	.word	0x080239dc
 8004214:	08023af0 	.word	0x08023af0
 8004218:	08023b10 	.word	0x08023b10
 800421c:	080239ec 	.word	0x080239ec
 8004220:	08023b14 	.word	0x08023b14
 8004224:	08023b40 	.word	0x08023b40
 8004228:	080239fc 	.word	0x080239fc
 800422c:	08023b44 	.word	0x08023b44

08004230 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	460b      	mov	r3, r1
 8004240:	71fb      	strb	r3, [r7, #7]
 8004242:	4613      	mov	r3, r2
 8004244:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <gen_bin_sensor_status_payload_JSON+0x26>
 8004250:	2b02      	cmp	r3, #2
 8004252:	d003      	beq.n	800425c <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8004254:	e005      	b.n	8004262 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8004256:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <gen_bin_sensor_status_payload_JSON+0x74>)
 8004258:	617b      	str	r3, [r7, #20]
			break;
 800425a:	e002      	b.n	8004262 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <gen_bin_sensor_status_payload_JSON+0x78>)
 800425e:	617b      	str	r3, [r7, #20]
			break;
 8004260:	bf00      	nop
	}

	if (state){
 8004262:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 800426a:	79bb      	ldrb	r3, [r7, #6]
 800426c:	4a0f      	ldr	r2, [pc, #60]	@ (80042ac <gen_bin_sensor_status_payload_JSON+0x7c>)
 800426e:	9201      	str	r2, [sp, #4]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4a0e      	ldr	r2, [pc, #56]	@ (80042b0 <gen_bin_sensor_status_payload_JSON+0x80>)
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f01c fb47 	bl	802090c <sniprintf>
 800427e:	4603      	mov	r3, r0
 8004280:	e00b      	b.n	800429a <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8004282:	79bb      	ldrb	r3, [r7, #6]
 8004284:	4a0b      	ldr	r2, [pc, #44]	@ (80042b4 <gen_bin_sensor_status_payload_JSON+0x84>)
 8004286:	9201      	str	r2, [sp, #4]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <gen_bin_sensor_status_payload_JSON+0x80>)
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f01c fb3b 	bl	802090c <sniprintf>
 8004296:	4603      	mov	r3, r0
 8004298:	bf00      	nop
	}
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08023994 	.word	0x08023994
 80042a8:	080239b4 	.word	0x080239b4
 80042ac:	08023b50 	.word	0x08023b50
 80042b0:	08026c00 	.word	0x08026c00
 80042b4:	08023b54 	.word	0x08023b54

080042b8 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af04      	add	r7, sp, #16
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	460b      	mov	r3, r1
 80042c8:	71fb      	strb	r3, [r7, #7]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d10e      	bne.n	80042f2 <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <generate_comand_topik_for_subscrabe+0x44>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	79ba      	ldrb	r2, [r7, #6]
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <generate_comand_topik_for_subscrabe+0x48>)
 80042de:	9201      	str	r2, [sp, #4]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <generate_comand_topik_for_subscrabe+0x4c>)
 80042e4:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <generate_comand_topik_for_subscrabe+0x50>)
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f01c fb0f 	bl	802090c <sniprintf>
 80042ee:	4603      	mov	r3, r0
 80042f0:	e7ff      	b.n	80042f2 <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000468 	.word	0x20000468
 8004300:	080239b4 	.word	0x080239b4
 8004304:	0802399c 	.word	0x0802399c
 8004308:	08023b58 	.word	0x08023b58

0800430c <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af04      	add	r7, sp, #16
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	4611      	mov	r1, r2
 8004318:	461a      	mov	r2, r3
 800431a:	460b      	mov	r3, r1
 800431c:	71fb      	strb	r3, [r7, #7]
 800431e:	4613      	mov	r3, r2
 8004320:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d002      	beq.n	8004334 <generate_status_topik+0x28>
 800432e:	2b02      	cmp	r3, #2
 8004330:	d00f      	beq.n	8004352 <generate_status_topik+0x46>
 8004332:	e01d      	b.n	8004370 <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8004334:	4b11      	ldr	r3, [pc, #68]	@ (800437c <generate_status_topik+0x70>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	79ba      	ldrb	r2, [r7, #6]
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <generate_status_topik+0x74>)
 800433e:	9201      	str	r2, [sp, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <generate_status_topik+0x78>)
 8004344:	4a10      	ldr	r2, [pc, #64]	@ (8004388 <generate_status_topik+0x7c>)
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f01c fadf 	bl	802090c <sniprintf>
 800434e:	4603      	mov	r3, r0
 8004350:	e010      	b.n	8004374 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8004352:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <generate_status_topik+0x70>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	79ba      	ldrb	r2, [r7, #6]
 8004358:	9202      	str	r2, [sp, #8]
 800435a:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <generate_status_topik+0x80>)
 800435c:	9201      	str	r2, [sp, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <generate_status_topik+0x78>)
 8004362:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <generate_status_topik+0x7c>)
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f01c fad0 	bl	802090c <sniprintf>
 800436c:	4603      	mov	r3, r0
 800436e:	e001      	b.n	8004374 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 8004370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000468 	.word	0x20000468
 8004380:	08023994 	.word	0x08023994
 8004384:	0802399c 	.word	0x0802399c
 8004388:	08023b68 	.word	0x08023b68
 800438c:	080239b4 	.word	0x080239b4

08004390 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80043b4:	4a0e      	ldr	r2, [pc, #56]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	60d3      	str	r3, [r2, #12]
 80043ba:	e002      	b.n	80043c2 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043be:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <SPI_flash_reg_cb+0x54>)
 80043c0:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6113      	str	r3, [r2, #16]
 80043ce:	e002      	b.n	80043d6 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043d2:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <SPI_flash_reg_cb+0x54>)
 80043d4:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 80043d6:	4a06      	ldr	r2, [pc, #24]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80043dc:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <SPI_flash_reg_cb+0x50>)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6093      	str	r3, [r2, #8]

}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000470 	.word	0x20000470
 80043f4:	08004391 	.word	0x08004391

080043f8 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 80043fc:	f000 f8d2 	bl	80045a4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8004400:	2066      	movs	r0, #102	@ 0x66
 8004402:	f000 fa8d 	bl	8004920 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8004406:	2099      	movs	r0, #153	@ 0x99
 8004408:	f000 fa8a 	bl	8004920 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 800440c:	f000 f8d4 	bl	80045b8 <sFLASH_CS_HIGH>
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}

08004414 <sFLASH_Init>:

void sFLASH_Init(void){
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8004418:	2064      	movs	r0, #100	@ 0x64
 800441a:	f000 fafb 	bl	8004a14 <HAL_Delay>
    sFLASH_Reset();
 800441e:	f7ff ffeb 	bl	80043f8 <sFLASH_Reset>
    HAL_Delay(100);
 8004422:	2064      	movs	r0, #100	@ 0x64
 8004424:	f000 faf6 	bl	8004a14 <HAL_Delay>
    HAL_Delay(100);
 8004428:	2064      	movs	r0, #100	@ 0x64
 800442a:	f000 faf3 	bl	8004a14 <HAL_Delay>
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 800443c:	f7ff ffea 	bl	8004414 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 8004440:	f000 fa18 	bl	8004874 <sFLASH_ReadID>
 8004444:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a4f      	ldr	r2, [pc, #316]	@ (8004588 <sFLASH_GetInfo+0x154>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d076      	beq.n	800453c <sFLASH_GetInfo+0x108>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a4d      	ldr	r2, [pc, #308]	@ (8004588 <sFLASH_GetInfo+0x154>)
 8004452:	4293      	cmp	r3, r2
 8004454:	f0c0 8088 	bcc.w	8004568 <sFLASH_GetInfo+0x134>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a4c      	ldr	r2, [pc, #304]	@ (800458c <sFLASH_GetInfo+0x158>)
 800445c:	4293      	cmp	r3, r2
 800445e:	f200 8083 	bhi.w	8004568 <sFLASH_GetInfo+0x134>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a4a      	ldr	r2, [pc, #296]	@ (8004590 <sFLASH_GetInfo+0x15c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d37e      	bcc.n	8004568 <sFLASH_GetInfo+0x134>
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <sFLASH_GetInfo+0x160>)
 800446e:	4413      	add	r3, r2
 8004470:	2b03      	cmp	r3, #3
 8004472:	d879      	bhi.n	8004568 <sFLASH_GetInfo+0x134>
 8004474:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <sFLASH_GetInfo+0x48>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	0800448d 	.word	0x0800448d
 8004480:	080044b9 	.word	0x080044b9
 8004484:	080044e5 	.word	0x080044e5
 8004488:	08004511 	.word	0x08004511
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 800448c:	4b42      	ldr	r3, [pc, #264]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800448e:	4a40      	ldr	r2, [pc, #256]	@ (8004590 <sFLASH_GetInfo+0x15c>)
 8004490:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004492:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004494:	2201      	movs	r2, #1
 8004496:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004498:	4b3f      	ldr	r3, [pc, #252]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800449a:	2201      	movs	r2, #1
 800449c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800449e:	4b3e      	ldr	r3, [pc, #248]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044a4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80044a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ac:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80044ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b4:	819a      	strh	r2, [r3, #12]
			break;
 80044b6:	e05b      	b.n	8004570 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80044b8:	4b37      	ldr	r3, [pc, #220]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044ba:	4a38      	ldr	r2, [pc, #224]	@ (800459c <sFLASH_GetInfo+0x168>)
 80044bc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80044c4:	4b34      	ldr	r3, [pc, #208]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80044ca:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044d0:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80044d2:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044d8:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80044da:	4b2f      	ldr	r3, [pc, #188]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044e0:	819a      	strh	r2, [r3, #12]
			break;
 80044e2:	e045      	b.n	8004570 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80044e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044e6:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <sFLASH_GetInfo+0x16c>)
 80044e8:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80044ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80044f0:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80044f6:	4b28      	ldr	r3, [pc, #160]	@ (8004598 <sFLASH_GetInfo+0x164>)
 80044f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044fc:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80044fe:	4b26      	ldr	r3, [pc, #152]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004504:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800450c:	819a      	strh	r2, [r3, #12]
			break;
 800450e:	e02f      	b.n	8004570 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8004510:	4b21      	ldr	r3, [pc, #132]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004512:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <sFLASH_GetInfo+0x158>)
 8004514:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004518:	2201      	movs	r2, #1
 800451a:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800451c:	4b1e      	ldr	r3, [pc, #120]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800451e:	2201      	movs	r2, #1
 8004520:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004522:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004524:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004528:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800452a:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800452c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004530:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 8004532:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004534:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004538:	819a      	strh	r2, [r3, #12]
			break;
 800453a:	e019      	b.n	8004570 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 800453c:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800453e:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <sFLASH_GetInfo+0x154>)
 8004540:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004544:	2201      	movs	r2, #1
 8004546:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004548:	4b13      	ldr	r3, [pc, #76]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800454a:	2201      	movs	r2, #1
 800454c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800454e:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004550:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004554:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004556:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455c:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004564:	819a      	strh	r2, [r3, #12]
			break;
 8004566:	e003      	b.n	8004570 <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <sFLASH_GetInfo+0x164>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
			break;
 800456e:	bf00      	nop
	}

	return flash_info;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <sFLASH_GetInfo+0x164>)
 8004574:	461c      	mov	r4, r3
 8004576:	4613      	mov	r3, r2
 8004578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800457a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}
 8004586:	bf00      	nop
 8004588:	00c22016 	.word	0x00c22016
 800458c:	00ef4018 	.word	0x00ef4018
 8004590:	00ef4015 	.word	0x00ef4015
 8004594:	ff10bfeb 	.word	0xff10bfeb
 8004598:	20000484 	.word	0x20000484
 800459c:	00ef4016 	.word	0x00ef4016
 80045a0:	00ef4017 	.word	0x00ef4017

080045a4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80045a8:	4b02      	ldr	r3, [pc, #8]	@ (80045b4 <sFLASH_CS_LOW+0x10>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4798      	blx	r3

}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000470 	.word	0x20000470

080045b8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80045bc:	4b02      	ldr	r3, [pc, #8]	@ (80045c8 <sFLASH_CS_HIGH+0x10>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	4798      	blx	r3
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000470 	.word	0x20000470

080045cc <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80045d4:	f000 f9b4 	bl	8004940 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80045d8:	f7ff ffe4 	bl	80045a4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80045dc:	2020      	movs	r0, #32
 80045de:	f000 f99f 	bl	8004920 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f999 	bl	8004920 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f993 	bl	8004920 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f98e 	bl	8004920 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004604:	f7ff ffd8 	bl	80045b8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8004608:	f000 f9a5 	bl	8004956 <sFLASH_WaitForWriteEnd>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8004622:	f000 f98d 	bl	8004940 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004626:	f7ff ffbd 	bl	80045a4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800462a:	2002      	movs	r0, #2
 800462c:	f000 f978 	bl	8004920 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f972 	bl	8004920 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f96c 	bl	8004920 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f967 	bl	8004920 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8004652:	e007      	b.n	8004664 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f961 	bl	8004920 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	80fa      	strh	r2, [r7, #6]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f2      	bne.n	8004654 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800466e:	f7ff ffa3 	bl	80045b8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8004672:	f000 f970 	bl	8004956 <sFLASH_WaitForWriteEnd>
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	4613      	mov	r3, r2
 800468a:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
 8004690:	2300      	movs	r3, #0
 8004692:	75bb      	strb	r3, [r7, #22]
 8004694:	2300      	movs	r3, #0
 8004696:	757b      	strb	r3, [r7, #21]
 8004698:	2300      	movs	r3, #0
 800469a:	753b      	strb	r3, [r7, #20]
 800469c:	2300      	movs	r3, #0
 800469e:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80046a4:	7d7b      	ldrb	r3, [r7, #21]
 80046a6:	425b      	negs	r3, r3
 80046a8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80046b6:	7d7b      	ldrb	r3, [r7, #21]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d124      	bne.n	8004706 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d114      	bne.n	80046ec <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff ffa3 	bl	8004614 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80046ce:	e07b      	b.n	80047c8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80046d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff ff9c 	bl	8004614 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046e2:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046ea:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	75fa      	strb	r2, [r7, #23]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ec      	bne.n	80046d0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80046f6:	7dbb      	ldrb	r3, [r7, #22]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff ff88 	bl	8004614 <sFLASH_WritePage>
}
 8004704:	e060      	b.n	80047c8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d125      	bne.n	8004758 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 800470c:	7dba      	ldrb	r2, [r7, #22]
 800470e:	7d3b      	ldrb	r3, [r7, #20]
 8004710:	429a      	cmp	r2, r3
 8004712:	d91a      	bls.n	800474a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8004714:	7dba      	ldrb	r2, [r7, #22]
 8004716:	7d3b      	ldrb	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 800471c:	7d3b      	ldrb	r3, [r7, #20]
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff75 	bl	8004614 <sFLASH_WritePage>
        WriteAddr +=  count;
 800472a:	7d3b      	ldrb	r3, [r7, #20]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8004732:	7d3b      	ldrb	r3, [r7, #20]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff ff66 	bl	8004614 <sFLASH_WritePage>
}
 8004748:	e03e      	b.n	80047c8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	461a      	mov	r2, r3
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff5f 	bl	8004614 <sFLASH_WritePage>
}
 8004756:	e037      	b.n	80047c8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8004758:	7d3b      	ldrb	r3, [r7, #20]
 800475a:	b29b      	uxth	r3, r3
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	b29b      	uxth	r3, r3
 8004768:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800476e:	7d3b      	ldrb	r3, [r7, #20]
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff ff4c 	bl	8004614 <sFLASH_WritePage>
      WriteAddr +=  count;
 800477c:	7d3b      	ldrb	r3, [r7, #20]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8004784:	7d3b      	ldrb	r3, [r7, #20]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800478c:	e00d      	b.n	80047aa <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800478e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff ff3d 	bl	8004614 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047a0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047a8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	1e5a      	subs	r2, r3, #1
 80047ae:	75fa      	strb	r2, [r7, #23]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ec      	bne.n	800478e <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80047b4:	7dbb      	ldrb	r3, [r7, #22]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80047ba:	7dbb      	ldrb	r3, [r7, #22]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff ff26 	bl	8004614 <sFLASH_WritePage>
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80047de:	f7ff fee1 	bl	80045a4 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d91c      	bls.n	8004822 <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80047e8:	200b      	movs	r0, #11
 80047ea:	f000 f899 	bl	8004920 <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 f893 	bl	8004920 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f88d 	bl	8004920 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f888 	bl	8004920 <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 8004810:	2000      	movs	r0, #0
 8004812:	f000 f885 	bl	8004920 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	4619      	mov	r1, r3
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f86e 	bl	80048fc <sFLASH_SPI_ReadBuffer>
 8004820:	e022      	b.n	8004868 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8004822:	2003      	movs	r0, #3
 8004824:	f000 f87c 	bl	8004920 <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	b2db      	uxtb	r3, r3
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f876 	bl	8004920 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f870 	bl	8004920 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f86b 	bl	8004920 <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 800484a:	e008      	b.n	800485e <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 800484c:	f000 f846 	bl	80048dc <sFLASH_ReadByte>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	1e5a      	subs	r2, r3, #1
 8004862:	80fa      	strh	r2, [r7, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004868:	f7ff fea6 	bl	80045b8 <sFLASH_CS_HIGH>
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	2300      	movs	r3, #0
 8004888:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800488a:	f7ff fe8b 	bl	80045a4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 800488e:	f7ff fe93 	bl	80045b8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8004892:	f7ff fe87 	bl	80045a4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8004896:	f7ff fe8f 	bl	80045b8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 800489a:	f7ff fe83 	bl	80045a4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 800489e:	209f      	movs	r0, #159	@ 0x9f
 80048a0:	f000 f83e 	bl	8004920 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80048a4:	f000 f81a 	bl	80048dc <sFLASH_ReadByte>
 80048a8:	4603      	mov	r3, r0
 80048aa:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80048ac:	f000 f816 	bl	80048dc <sFLASH_ReadByte>
 80048b0:	4603      	mov	r3, r0
 80048b2:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80048b4:	f000 f812 	bl	80048dc <sFLASH_ReadByte>
 80048b8:	4603      	mov	r3, r0
 80048ba:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80048bc:	f7ff fe7c 	bl	80045b8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	041a      	lsls	r2, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	4313      	orrs	r3, r2
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  return Temp;
 80048d0:	68fb      	ldr	r3, [r7, #12]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <sFLASH_ReadByte+0x1c>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	1dfa      	adds	r2, r7, #7
 80048e8:	2101      	movs	r1, #1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4798      	blx	r3
	return byte;
 80048ee:	79fb      	ldrb	r3, [r7, #7]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000470 	.word	0x20000470

080048fc <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <sFLASH_SPI_ReadBuffer+0x20>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	4611      	mov	r1, r2
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000470 	.word	0x20000470

08004920 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 800492a:	4b04      	ldr	r3, [pc, #16]	@ (800493c <sFLASH_SendByte+0x1c>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	79fa      	ldrb	r2, [r7, #7]
 8004930:	4610      	mov	r0, r2
 8004932:	4798      	blx	r3
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000470 	.word	0x20000470

08004940 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004944:	f7ff fe2e 	bl	80045a4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8004948:	2006      	movs	r0, #6
 800494a:	f7ff ffe9 	bl	8004920 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800494e:	f7ff fe33 	bl	80045b8 <sFLASH_CS_HIGH>
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}

08004956 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004960:	f7ff fe20 	bl	80045a4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8004964:	2005      	movs	r0, #5
 8004966:	f7ff ffdb 	bl	8004920 <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 800496a:	2005      	movs	r0, #5
 800496c:	f7ff ffd8 	bl	8004920 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8004970:	f7ff ffb4 	bl	80048dc <sFLASH_ReadByte>
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f3      	bne.n	800496a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004982:	f7ff fe19 	bl	80045b8 <sFLASH_CS_HIGH>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004994:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_Init+0x40>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <HAL_Init+0x40>)
 800499a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800499e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_Init+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <HAL_Init+0x40>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ac:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <HAL_Init+0x40>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f913 	bl	8004be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	200f      	movs	r0, #15
 80049c0:	f7fd f8d6 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c4:	f7fd f8a8 	bl	8001b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049d8:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <HAL_IncTick+0x20>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <HAL_IncTick+0x24>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_IncTick+0x24>)
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000070 	.word	0x20000070
 80049f8:	20000494 	.word	0x20000494

080049fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <HAL_GetTick+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000494 	.word	0x20000494

08004a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff ffee 	bl	80049fc <HAL_GetTick>
 8004a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2c:	d005      	beq.n	8004a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_Delay+0x44>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a3a:	bf00      	nop
 8004a3c:	f7ff ffde 	bl	80049fc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d8f7      	bhi.n	8004a3c <HAL_Delay+0x28>
  {
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000070 	.word	0x20000070

08004a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	60d3      	str	r3, [r2, #12]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa8:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <__NVIC_GetPriorityGrouping+0x18>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 0307 	and.w	r3, r3, #7
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db0b      	blt.n	8004aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	4907      	ldr	r1, [pc, #28]	@ (8004af8 <__NVIC_EnableIRQ+0x38>)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000e100 	.word	0xe000e100

08004afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	6039      	str	r1, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db0a      	blt.n	8004b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	490c      	ldr	r1, [pc, #48]	@ (8004b48 <__NVIC_SetPriority+0x4c>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b24:	e00a      	b.n	8004b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4908      	ldr	r1, [pc, #32]	@ (8004b4c <__NVIC_SetPriority+0x50>)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3b04      	subs	r3, #4
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	440b      	add	r3, r1
 8004b3a:	761a      	strb	r2, [r3, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000e100 	.word	0xe000e100
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	@ 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f1c3 0307 	rsb	r3, r3, #7
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf28      	it	cs
 8004b6e:	2304      	movcs	r3, #4
 8004b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d902      	bls.n	8004b80 <NVIC_EncodePriority+0x30>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3b03      	subs	r3, #3
 8004b7e:	e000      	b.n	8004b82 <NVIC_EncodePriority+0x32>
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	401a      	ands	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43d9      	mvns	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	4313      	orrs	r3, r2
         );
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	@ 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004bbc:	f3bf 8f4f 	dsb	sy
}
 8004bc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <__NVIC_SystemReset+0x24>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bca:	4904      	ldr	r1, [pc, #16]	@ (8004bdc <__NVIC_SystemReset+0x24>)
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <__NVIC_SystemReset+0x28>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd2:	f3bf 8f4f 	dsb	sy
}
 8004bd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <__NVIC_SystemReset+0x20>
 8004bdc:	e000ed00 	.word	0xe000ed00
 8004be0:	05fa0004 	.word	0x05fa0004

08004be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff35 	bl	8004a5c <__NVIC_SetPriorityGrouping>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c0c:	f7ff ff4a 	bl	8004aa4 <__NVIC_GetPriorityGrouping>
 8004c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff9a 	bl	8004b50 <NVIC_EncodePriority>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff69 	bl	8004afc <__NVIC_SetPriority>
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff3d 	bl	8004ac0 <__NVIC_EnableIRQ>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004c52:	f7ff ffb1 	bl	8004bb8 <__NVIC_SystemReset>
	...

08004c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	@ 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e159      	b.n	8004f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c74:	2201      	movs	r2, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	f040 8148 	bne.w	8004f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d005      	beq.n	8004caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d130      	bne.n	8004d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0201 	and.w	r2, r3, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d017      	beq.n	8004d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	08da      	lsrs	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	08da      	lsrs	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a2 	beq.w	8004f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4b57      	ldr	r3, [pc, #348]	@ (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dee:	4b54      	ldr	r3, [pc, #336]	@ (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfa:	4a52      	ldr	r2, [pc, #328]	@ (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	3302      	adds	r3, #2
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a49      	ldr	r2, [pc, #292]	@ (8004f48 <HAL_GPIO_Init+0x2f0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x202>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a48      	ldr	r2, [pc, #288]	@ (8004f4c <HAL_GPIO_Init+0x2f4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x1fe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a47      	ldr	r2, [pc, #284]	@ (8004f50 <HAL_GPIO_Init+0x2f8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <HAL_GPIO_Init+0x2fc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x1f6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a45      	ldr	r2, [pc, #276]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x1f2>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e008      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4a:	2307      	movs	r3, #7
 8004e4c:	e006      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e004      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e002      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f002 0203 	and.w	r2, r2, #3
 8004e62:	0092      	lsls	r2, r2, #2
 8004e64:	4093      	lsls	r3, r2
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e6c:	4935      	ldr	r1, [pc, #212]	@ (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	3302      	adds	r3, #2
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7a:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec8:	4a24      	ldr	r2, [pc, #144]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ece:	4b23      	ldr	r3, [pc, #140]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f5c <HAL_GPIO_Init+0x304>)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	f67f aea2 	bls.w	8004c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	3724      	adds	r7, #36	@ 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40013800 	.word	0x40013800
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	40020400 	.word	0x40020400
 8004f50:	40020800 	.word	0x40020800
 8004f54:	40020c00 	.word	0x40020c00
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40013c00 	.word	0x40013c00

08004f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	e001      	b.n	8004f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa0:	787b      	ldrb	r3, [r7, #1]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fac:	e003      	b.n	8004fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	041a      	lsls	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e267      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d075      	beq.n	80050ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fe2:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d00c      	beq.n	8005008 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fee:	4b85      	ldr	r3, [pc, #532]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d112      	bne.n	8005020 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffa:	4b82      	ldr	r3, [pc, #520]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005006:	d10b      	bne.n	8005020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005008:	4b7e      	ldr	r3, [pc, #504]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05b      	beq.n	80050cc <HAL_RCC_OscConfig+0x108>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d157      	bne.n	80050cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e242      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d106      	bne.n	8005038 <HAL_RCC_OscConfig+0x74>
 800502a:	4b76      	ldr	r3, [pc, #472]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a75      	ldr	r2, [pc, #468]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e01d      	b.n	8005074 <HAL_RCC_OscConfig+0xb0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x98>
 8005042:	4b70      	ldr	r3, [pc, #448]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6f      	ldr	r2, [pc, #444]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b6d      	ldr	r3, [pc, #436]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6c      	ldr	r2, [pc, #432]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e00b      	b.n	8005074 <HAL_RCC_OscConfig+0xb0>
 800505c:	4b69      	ldr	r3, [pc, #420]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a68      	ldr	r2, [pc, #416]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b66      	ldr	r3, [pc, #408]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a65      	ldr	r2, [pc, #404]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800506e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7ff fcbe 	bl	80049fc <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7ff fcba 	bl	80049fc <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	@ 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e207      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b5b      	ldr	r3, [pc, #364]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0xc0>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7ff fcaa 	bl	80049fc <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ac:	f7ff fca6 	bl	80049fc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	@ 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e1f3      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0xe8>
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d063      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050da:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e6:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d11c      	bne.n	800512c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b44      	ldr	r3, [pc, #272]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d116      	bne.n	800512c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	4b41      	ldr	r3, [pc, #260]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x152>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e1c7      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4937      	ldr	r1, [pc, #220]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	e03a      	b.n	80051a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005134:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x244>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7ff fc5f 	bl	80049fc <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005142:	f7ff fc5b 	bl	80049fc <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1a8      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005160:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4925      	ldr	r1, [pc, #148]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	e015      	b.n	80051a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_RCC_OscConfig+0x244>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7ff fc3e 	bl	80049fc <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005184:	f7ff fc3a 	bl	80049fc <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e187      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d036      	beq.n	800521c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b6:	4b15      	ldr	r3, [pc, #84]	@ (800520c <HAL_RCC_OscConfig+0x248>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7ff fc1e 	bl	80049fc <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c4:	f7ff fc1a 	bl	80049fc <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e167      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80051d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x200>
 80051e2:	e01b      	b.n	800521c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <HAL_RCC_OscConfig+0x248>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ea:	f7ff fc07 	bl	80049fc <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	e00e      	b.n	8005210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f2:	f7ff fc03 	bl	80049fc <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d907      	bls.n	8005210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e150      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
 8005204:	40023800 	.word	0x40023800
 8005208:	42470000 	.word	0x42470000
 800520c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b88      	ldr	r3, [pc, #544]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ea      	bne.n	80051f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8097 	beq.w	8005358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b81      	ldr	r3, [pc, #516]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	4b7d      	ldr	r3, [pc, #500]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	4a7c      	ldr	r2, [pc, #496]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6413      	str	r3, [r2, #64]	@ 0x40
 800524a:	4b7a      	ldr	r3, [pc, #488]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b77      	ldr	r3, [pc, #476]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d118      	bne.n	8005298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b74      	ldr	r3, [pc, #464]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a73      	ldr	r2, [pc, #460]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7ff fbc3 	bl	80049fc <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7ff fbbf 	bl	80049fc <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e10c      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b6a      	ldr	r3, [pc, #424]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x2ea>
 80052a0:	4b64      	ldr	r3, [pc, #400]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a63      	ldr	r2, [pc, #396]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	e01c      	b.n	80052e8 <HAL_RCC_OscConfig+0x324>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x30c>
 80052b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x324>
 80052d0:	4b58      	ldr	r3, [pc, #352]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a57      	ldr	r2, [pc, #348]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	4b55      	ldr	r3, [pc, #340]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a54      	ldr	r2, [pc, #336]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7ff fb84 	bl	80049fc <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7ff fb80 	bl	80049fc <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0cb      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530e:	4b49      	ldr	r3, [pc, #292]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ee      	beq.n	80052f8 <HAL_RCC_OscConfig+0x334>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7ff fb6e 	bl	80049fc <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7ff fb6a 	bl	80049fc <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0b5      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533a:	4b3e      	ldr	r3, [pc, #248]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ee      	bne.n	8005324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d105      	bne.n	8005358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534c:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	4a38      	ldr	r2, [pc, #224]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80a1 	beq.w	80054a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005362:	4b34      	ldr	r3, [pc, #208]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b08      	cmp	r3, #8
 800536c:	d05c      	beq.n	8005428 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d141      	bne.n	80053fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b31      	ldr	r3, [pc, #196]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7ff fb3e 	bl	80049fc <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7ff fb3a 	bl	80049fc <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e087      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b27      	ldr	r3, [pc, #156]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	3b01      	subs	r3, #1
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	491b      	ldr	r1, [pc, #108]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053cc:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7ff fb13 	bl	80049fc <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7ff fb0f 	bl	80049fc <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e05c      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x416>
 80053f8:	e054      	b.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fa:	4b10      	ldr	r3, [pc, #64]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7ff fafc 	bl	80049fc <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7ff faf8 	bl	80049fc <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e045      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x444>
 8005426:	e03d      	b.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e038      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000
 800543c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005440:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x4ec>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d028      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d121      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d11a      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005478:	4293      	cmp	r3, r2
 800547a:	d111      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800

080054b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0cc      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c8:	4b68      	ldr	r3, [pc, #416]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90c      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d6:	4b65      	ldr	r3, [pc, #404]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b63      	ldr	r3, [pc, #396]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b8      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005508:	4b59      	ldr	r3, [pc, #356]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a58      	ldr	r2, [pc, #352]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005520:	4b53      	ldr	r3, [pc, #332]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a52      	ldr	r2, [pc, #328]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800552a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b50      	ldr	r3, [pc, #320]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	494d      	ldr	r1, [pc, #308]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d044      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005552:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d119      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e07f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d003      	beq.n	8005572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556e:	2b03      	cmp	r3, #3
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005572:	4b3f      	ldr	r3, [pc, #252]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e06f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005582:	4b3b      	ldr	r3, [pc, #236]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e067      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005592:	4b37      	ldr	r3, [pc, #220]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f023 0203 	bic.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4934      	ldr	r1, [pc, #208]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a4:	f7ff fa2a 	bl	80049fc <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ac:	f7ff fa26 	bl	80049fc <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e04f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 020c 	and.w	r2, r3, #12
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d1eb      	bne.n	80055ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d20c      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b20      	ldr	r3, [pc, #128]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e032      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4916      	ldr	r1, [pc, #88]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	490e      	ldr	r1, [pc, #56]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800563a:	f000 f821 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800563e:	4602      	mov	r2, r0
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	490a      	ldr	r1, [pc, #40]	@ (8005674 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	5ccb      	ldrb	r3, [r1, r3]
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 8005654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc fa88 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023c00 	.word	0x40023c00
 8005670:	40023800 	.word	0x40023800
 8005674:	08026a40 	.word	0x08026a40
 8005678:	20000000 	.word	0x20000000
 800567c:	2000006c 	.word	0x2000006c

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b094      	sub	sp, #80	@ 0x50
 8005686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005698:	4b79      	ldr	r3, [pc, #484]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d00d      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x40>
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	f200 80e1 	bhi.w	800586c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d003      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x3a>
 80056b2:	e0db      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b73      	ldr	r3, [pc, #460]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056b8:	e0db      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ba:	4b73      	ldr	r3, [pc, #460]	@ (8005888 <HAL_RCC_GetSysClockFreq+0x208>)
 80056bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056be:	e0d8      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d063      	beq.n	800579e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	2200      	movs	r2, #0
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056f2:	4622      	mov	r2, r4
 80056f4:	462b      	mov	r3, r5
 80056f6:	f04f 0000 	mov.w	r0, #0
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	0159      	lsls	r1, r3, #5
 8005700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005704:	0150      	lsls	r0, r2, #5
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4621      	mov	r1, r4
 800570c:	1a51      	subs	r1, r2, r1
 800570e:	6139      	str	r1, [r7, #16]
 8005710:	4629      	mov	r1, r5
 8005712:	eb63 0301 	sbc.w	r3, r3, r1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005724:	4659      	mov	r1, fp
 8005726:	018b      	lsls	r3, r1, #6
 8005728:	4651      	mov	r1, sl
 800572a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572e:	4651      	mov	r1, sl
 8005730:	018a      	lsls	r2, r1, #6
 8005732:	4651      	mov	r1, sl
 8005734:	ebb2 0801 	subs.w	r8, r2, r1
 8005738:	4659      	mov	r1, fp
 800573a:	eb63 0901 	sbc.w	r9, r3, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800574a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005752:	4690      	mov	r8, r2
 8005754:	4699      	mov	r9, r3
 8005756:	4623      	mov	r3, r4
 8005758:	eb18 0303 	adds.w	r3, r8, r3
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	462b      	mov	r3, r5
 8005760:	eb49 0303 	adc.w	r3, r9, r3
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005772:	4629      	mov	r1, r5
 8005774:	024b      	lsls	r3, r1, #9
 8005776:	4621      	mov	r1, r4
 8005778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800577c:	4621      	mov	r1, r4
 800577e:	024a      	lsls	r2, r1, #9
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005786:	2200      	movs	r2, #0
 8005788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800578a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800578c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005790:	f7fb fa26 	bl	8000be0 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800579c:	e058      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b38      	ldr	r3, [pc, #224]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	2200      	movs	r2, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	4611      	mov	r1, r2
 80057aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	2300      	movs	r3, #0
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	f04f 0000 	mov.w	r0, #0
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	0159      	lsls	r1, r3, #5
 80057c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ca:	0150      	lsls	r0, r2, #5
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4641      	mov	r1, r8
 80057d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057d6:	4649      	mov	r1, r9
 80057d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057f0:	ebb2 040a 	subs.w	r4, r2, sl
 80057f4:	eb63 050b 	sbc.w	r5, r3, fp
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	00eb      	lsls	r3, r5, #3
 8005802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005806:	00e2      	lsls	r2, r4, #3
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	4643      	mov	r3, r8
 800580e:	18e3      	adds	r3, r4, r3
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	464b      	mov	r3, r9
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005826:	4629      	mov	r1, r5
 8005828:	028b      	lsls	r3, r1, #10
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005830:	4621      	mov	r1, r4
 8005832:	028a      	lsls	r2, r1, #10
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800583a:	2200      	movs	r2, #0
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	61fa      	str	r2, [r7, #28]
 8005840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005844:	f7fb f9cc 	bl	8000be0 <__aeabi_uldivmod>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4613      	mov	r3, r2
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005850:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	3301      	adds	r3, #1
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005860:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800586a:	e002      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_RCC_GetSysClockFreq+0x204>)
 800586e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005874:	4618      	mov	r0, r3
 8005876:	3750      	adds	r7, #80	@ 0x50
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800
 8005884:	00f42400 	.word	0x00f42400
 8005888:	007a1200 	.word	0x007a1200

0800588c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005890:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000000 	.word	0x20000000

080058a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058a8:	f7ff fff0 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0b5b      	lsrs	r3, r3, #13
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4903      	ldr	r1, [pc, #12]	@ (80058c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	08026a50 	.word	0x08026a50

080058cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	220f      	movs	r2, #15
 80058da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058dc:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <HAL_RCC_GetClockConfig+0x5c>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0203 	and.w	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005928 <HAL_RCC_GetClockConfig+0x5c>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <HAL_RCC_GetClockConfig+0x5c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_RCC_GetClockConfig+0x5c>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <HAL_RCC_GetClockConfig+0x60>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0207 	and.w	r2, r3, #7
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	40023c00 	.word	0x40023c00

08005930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07b      	b.n	8005a3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005952:	d009      	beq.n	8005968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	61da      	str	r2, [r3, #28]
 800595a:	e005      	b.n	8005968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fc f880 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ec:	ea42 0103 	orr.w	r1, r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	f003 0104 	and.w	r1, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	f003 0210 	and.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b088      	sub	sp, #32
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a52:	f7fe ffd3 	bl	80049fc <HAL_GetTick>
 8005a56:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e12a      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0x36>
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e122      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_SPI_Transmit+0x48>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e11b      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2203      	movs	r2, #3
 8005a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad8:	d10f      	bne.n	8005afa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d007      	beq.n	8005b18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b20:	d152      	bne.n	8005bc8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Transmit+0xee>
 8005b2a:	8b7b      	ldrh	r3, [r7, #26]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d145      	bne.n	8005bbc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b54:	e032      	b.n	8005bbc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d112      	bne.n	8005b8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b88:	e018      	b.n	8005bbc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8a:	f7fe ff37 	bl	80049fc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d803      	bhi.n	8005ba2 <HAL_SPI_Transmit+0x160>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_Transmit+0x166>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e082      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1c7      	bne.n	8005b56 <HAL_SPI_Transmit+0x114>
 8005bc6:	e053      	b.n	8005c70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_Transmit+0x194>
 8005bd0:	8b7b      	ldrh	r3, [r7, #26]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d147      	bne.n	8005c66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	7812      	ldrb	r2, [r2, #0]
 8005be2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bfc:	e033      	b.n	8005c66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d113      	bne.n	8005c34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c32:	e018      	b.n	8005c66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c34:	f7fe fee2 	bl	80049fc <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d803      	bhi.n	8005c4c <HAL_SPI_Transmit+0x20a>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c4a:	d102      	bne.n	8005c52 <HAL_SPI_Transmit+0x210>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e02d      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1c6      	bne.n	8005bfe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fbd9 	bl	800642c <SPI_EndRxTxTransaction>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b088      	sub	sp, #32
 8005cce:	af02      	add	r7, sp, #8
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e104      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf2:	d112      	bne.n	8005d1a <HAL_SPI_Receive+0x50>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10e      	bne.n	8005d1a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f8f3 	bl	8005efc <HAL_SPI_TransmitReceive>
 8005d16:	4603      	mov	r3, r0
 8005d18:	e0ec      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d1a:	f7fe fe6f 	bl	80049fc <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_SPI_Receive+0x62>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0e1      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Receive+0x74>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e0da      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8c:	d10f      	bne.n	8005dae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d007      	beq.n	8005dcc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d170      	bne.n	8005eb6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dd4:	e035      	b.n	8005e42 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d115      	bne.n	8005e10 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f103 020c 	add.w	r2, r3, #12
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e0e:	e018      	b.n	8005e42 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e10:	f7fe fdf4 	bl	80049fc <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d803      	bhi.n	8005e28 <HAL_SPI_Receive+0x15e>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e26:	d102      	bne.n	8005e2e <HAL_SPI_Receive+0x164>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e058      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1c4      	bne.n	8005dd6 <HAL_SPI_Receive+0x10c>
 8005e4c:	e038      	b.n	8005ec0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d113      	bne.n	8005e84 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	b292      	uxth	r2, r2
 8005e68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6e:	1c9a      	adds	r2, r3, #2
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e82:	e018      	b.n	8005eb6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e84:	f7fe fdba 	bl	80049fc <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d803      	bhi.n	8005e9c <HAL_SPI_Receive+0x1d2>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9a:	d102      	bne.n	8005ea2 <HAL_SPI_Receive+0x1d8>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e01e      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1c6      	bne.n	8005e4e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fa4b 	bl	8006360 <SPI_EndRxTransaction>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
  }
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	@ 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f0e:	f7fe fd75 	bl	80049fc <HAL_GetTick>
 8005f12:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f1a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d00c      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x4a>
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f32:	d106      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x46>
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d001      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
 8005f44:	e17f      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x5c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x5c>
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e174      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x6e>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e16d      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d003      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2205      	movs	r2, #5
 8005f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	887a      	ldrh	r2, [r7, #2]
 8005fa8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	887a      	ldrh	r2, [r7, #2]
 8005fae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc6:	2b40      	cmp	r3, #64	@ 0x40
 8005fc8:	d007      	beq.n	8005fda <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe2:	d17e      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0xf6>
 8005fec:	8afb      	ldrh	r3, [r7, #22]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d16c      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006016:	e059      	b.n	80060cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d11b      	bne.n	800605e <HAL_SPI_TransmitReceive+0x162>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d016      	beq.n	800605e <HAL_SPI_TransmitReceive+0x162>
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	2b01      	cmp	r3, #1
 8006034:	d113      	bne.n	800605e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	881a      	ldrh	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d119      	bne.n	80060a0 <HAL_SPI_TransmitReceive+0x1a4>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d014      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	b292      	uxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800609c:	2301      	movs	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060a0:	f7fe fcac 	bl	80049fc <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d80d      	bhi.n	80060cc <HAL_SPI_TransmitReceive+0x1d0>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b6:	d009      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e0bc      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1a0      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x11c>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d19b      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x11c>
 80060e0:	e082      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_TransmitReceive+0x1f4>
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d171      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006116:	e05d      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	d11c      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x264>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x264>
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	2b01      	cmp	r3, #1
 8006134:	d114      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d119      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x2a6>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d014      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800619e:	2301      	movs	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061a2:	f7fe fc2b 	bl	80049fc <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d803      	bhi.n	80061ba <HAL_SPI_TransmitReceive+0x2be>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_TransmitReceive+0x2c4>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e038      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d19c      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x21c>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d197      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f91d 	bl	800642c <SPI_EndRxTxTransaction>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e01d      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006244:	2300      	movs	r3, #0
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3728      	adds	r7, #40	@ 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006260:	f7fe fbcc 	bl	80049fc <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	4413      	add	r3, r2
 800626e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006270:	f7fe fbc4 	bl	80049fc <HAL_GetTick>
 8006274:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006276:	4b39      	ldr	r3, [pc, #228]	@ (800635c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	0d1b      	lsrs	r3, r3, #20
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	fb02 f303 	mul.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006286:	e054      	b.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628e:	d050      	beq.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006290:	f7fe fbb4 	bl	80049fc <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	429a      	cmp	r2, r3
 800629e:	d902      	bls.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d13d      	bne.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062be:	d111      	bne.n	80062e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c8:	d004      	beq.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d107      	bne.n	80062e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ec:	d10f      	bne.n	800630e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800630c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e017      	b.n	8006352 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	3b01      	subs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	bf0c      	ite	eq
 8006342:	2301      	moveq	r3, #1
 8006344:	2300      	movne	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	429a      	cmp	r2, r3
 800634e:	d19b      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000000 	.word	0x20000000

08006360 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006374:	d111      	bne.n	800639a <SPI_EndRxTransaction+0x3a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800637e:	d004      	beq.n	800638a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006388:	d107      	bne.n	800639a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063a2:	d12a      	bne.n	80063fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ac:	d012      	beq.n	80063d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	@ 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff49 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02d      	beq.n	8006420 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e026      	b.n	8006422 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	2101      	movs	r1, #1
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff ff36 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01a      	beq.n	8006420 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e013      	b.n	8006422 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	2101      	movs	r1, #1
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff23 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006414:	f043 0220 	orr.w	r2, r3, #32
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e000      	b.n	8006422 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2201      	movs	r2, #1
 8006440:	2102      	movs	r1, #2
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff ff04 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e032      	b.n	80064c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800645e:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <SPI_EndRxTxTransaction+0xa0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1b      	ldr	r2, [pc, #108]	@ (80064d0 <SPI_EndRxTxTransaction+0xa4>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	0d5b      	lsrs	r3, r3, #21
 800646a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800647c:	d112      	bne.n	80064a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2200      	movs	r2, #0
 8006486:	2180      	movs	r1, #128	@ 0x80
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff fee1 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d016      	beq.n	80064c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006498:	f043 0220 	orr.w	r2, r3, #32
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e00f      	b.n	80064c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ba:	2b80      	cmp	r3, #128	@ 0x80
 80064bc:	d0f2      	beq.n	80064a4 <SPI_EndRxTxTransaction+0x78>
 80064be:	e000      	b.n	80064c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80064c0:	bf00      	nop
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000000 	.word	0x20000000
 80064d0:	165e9f81 	.word	0x165e9f81

080064d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e041      	b.n	800656a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f839 	bl	8006572 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 f9b2 	bl	800687c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e044      	b.n	800662a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006638 <HAL_TIM_Base_Start_IT+0xb0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d018      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x6c>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	d013      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x6c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1a      	ldr	r2, [pc, #104]	@ (800663c <HAL_TIM_Base_Start_IT+0xb4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x6c>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a19      	ldr	r2, [pc, #100]	@ (8006640 <HAL_TIM_Base_Start_IT+0xb8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x6c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <HAL_TIM_Base_Start_IT+0xbc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <HAL_TIM_Base_Start_IT+0xc0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d111      	bne.n	8006618 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d010      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006616:	e007      	b.n	8006628 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40014000 	.word	0x40014000

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d020      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0202 	mvn.w	r2, #2
 8006680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8d2 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8c4 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8d5 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8ac 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f89e 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8af 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d020      	beq.n	8006748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01b      	beq.n	8006748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0208 	mvn.w	r2, #8
 8006718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f886 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006734:	e005      	b.n	8006742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f878 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f889 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d020      	beq.n	8006794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01b      	beq.n	8006794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0210 	mvn.w	r2, #16
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2208      	movs	r2, #8
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f860 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f852 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f863 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0201 	mvn.w	r2, #1
 80067b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fb f91a 	bl	80019ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8e6 	bl	80069a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f834 	bl	8006868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00c      	beq.n	8006824 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0220 	mvn.w	r2, #32
 800681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f8b8 	bl	8006994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3a      	ldr	r2, [pc, #232]	@ (8006978 <TIM_Base_SetConfig+0xfc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_Base_SetConfig+0x38>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689a:	d00b      	beq.n	80068b4 <TIM_Base_SetConfig+0x38>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a37      	ldr	r2, [pc, #220]	@ (800697c <TIM_Base_SetConfig+0x100>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_Base_SetConfig+0x38>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a36      	ldr	r2, [pc, #216]	@ (8006980 <TIM_Base_SetConfig+0x104>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0x38>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a35      	ldr	r2, [pc, #212]	@ (8006984 <TIM_Base_SetConfig+0x108>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006978 <TIM_Base_SetConfig+0xfc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01b      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d4:	d017      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a28      	ldr	r2, [pc, #160]	@ (800697c <TIM_Base_SetConfig+0x100>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <TIM_Base_SetConfig+0x104>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00f      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a26      	ldr	r2, [pc, #152]	@ (8006984 <TIM_Base_SetConfig+0x108>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00b      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a25      	ldr	r2, [pc, #148]	@ (8006988 <TIM_Base_SetConfig+0x10c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a24      	ldr	r2, [pc, #144]	@ (800698c <TIM_Base_SetConfig+0x110>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_Base_SetConfig+0x8a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a23      	ldr	r2, [pc, #140]	@ (8006990 <TIM_Base_SetConfig+0x114>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d108      	bne.n	8006918 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a0e      	ldr	r2, [pc, #56]	@ (8006978 <TIM_Base_SetConfig+0xfc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d103      	bne.n	800694c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f023 0201 	bic.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]
  }
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40014000 	.word	0x40014000
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800

08006994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <__NVIC_SetPriority>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db0a      	blt.n	80069e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	490c      	ldr	r1, [pc, #48]	@ (8006a08 <__NVIC_SetPriority+0x4c>)
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	0112      	lsls	r2, r2, #4
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	440b      	add	r3, r1
 80069e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069e4:	e00a      	b.n	80069fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4908      	ldr	r1, [pc, #32]	@ (8006a0c <__NVIC_SetPriority+0x50>)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	3b04      	subs	r3, #4
 80069f4:	0112      	lsls	r2, r2, #4
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	440b      	add	r3, r1
 80069fa:	761a      	strb	r2, [r3, #24]
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	e000e100 	.word	0xe000e100
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a14:	4b05      	ldr	r3, [pc, #20]	@ (8006a2c <SysTick_Handler+0x1c>)
 8006a16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a18:	f002 fb96 	bl	8009148 <xTaskGetSchedulerState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d001      	beq.n	8006a26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a22:	f003 fa91 	bl	8009f48 <xPortSysTickHandler>
  }
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	e000e010 	.word	0xe000e010

08006a30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a34:	2100      	movs	r1, #0
 8006a36:	f06f 0004 	mvn.w	r0, #4
 8006a3a:	f7ff ffbf 	bl	80069bc <__NVIC_SetPriority>
#endif
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a4a:	f3ef 8305 	mrs	r3, IPSR
 8006a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a56:	f06f 0305 	mvn.w	r3, #5
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	e00c      	b.n	8006a78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <osKernelInitialize+0x44>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d105      	bne.n	8006a72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a66:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <osKernelInitialize+0x44>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e002      	b.n	8006a78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a78:	687b      	ldr	r3, [r7, #4]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000498 	.word	0x20000498

08006a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a92:	f3ef 8305 	mrs	r3, IPSR
 8006a96:	603b      	str	r3, [r7, #0]
  return(result);
 8006a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a9e:	f06f 0305 	mvn.w	r3, #5
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	e010      	b.n	8006ac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <osKernelStart+0x48>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d109      	bne.n	8006ac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006aae:	f7ff ffbf 	bl	8006a30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ab2:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <osKernelStart+0x48>)
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ab8:	f001 fed2 	bl	8008860 <vTaskStartScheduler>
      stat = osOK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	607b      	str	r3, [r7, #4]
 8006ac0:	e002      	b.n	8006ac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ac8:	687b      	ldr	r3, [r7, #4]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000498 	.word	0x20000498

08006ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	@ 0x38
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae8:	f3ef 8305 	mrs	r3, IPSR
 8006aec:	617b      	str	r3, [r7, #20]
  return(result);
 8006aee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d17e      	bne.n	8006bf2 <osThreadNew+0x11a>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d07b      	beq.n	8006bf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006afa:	2380      	movs	r3, #128	@ 0x80
 8006afc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006afe:	2318      	movs	r3, #24
 8006b00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d045      	beq.n	8006b9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <osThreadNew+0x48>
        name = attr->name;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <osThreadNew+0x6e>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b38      	cmp	r3, #56	@ 0x38
 8006b38:	d805      	bhi.n	8006b46 <osThreadNew+0x6e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <osThreadNew+0x72>
        return (NULL);
 8006b46:	2300      	movs	r3, #0
 8006b48:	e054      	b.n	8006bf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <osThreadNew+0xa8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2ba7      	cmp	r3, #167	@ 0xa7
 8006b68:	d90a      	bls.n	8006b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <osThreadNew+0xa8>
        mem = 1;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e010      	b.n	8006ba2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10c      	bne.n	8006ba2 <osThreadNew+0xca>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <osThreadNew+0xca>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <osThreadNew+0xca>
          mem = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	e001      	b.n	8006ba2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d110      	bne.n	8006bca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bb0:	9202      	str	r2, [sp, #8]
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f001 fc5a 	bl	8008478 <xTaskCreateStatic>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	e013      	b.n	8006bf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f107 0310 	add.w	r3, r7, #16
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f001 fca8 	bl	8008538 <xTaskCreate>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d001      	beq.n	8006bf2 <osThreadNew+0x11a>
            hTask = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bf2:	693b      	ldr	r3, [r7, #16]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	@ 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c04:	f3ef 8305 	mrs	r3, IPSR
 8006c08:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <osDelay+0x1c>
    stat = osErrorISR;
 8006c10:	f06f 0305 	mvn.w	r3, #5
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e007      	b.n	8006c28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fde6 	bl	80087f4 <vTaskDelay>
    }
  }

  return (stat);
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b088      	sub	sp, #32
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c44:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d174      	bne.n	8006d34 <osMutexNew+0x102>
    if (attr != NULL) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	e001      	b.n	8006c5c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <osMutexNew+0x3a>
      rmtx = 1U;
 8006c66:	2301      	movs	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e001      	b.n	8006c70 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d15c      	bne.n	8006d34 <osMutexNew+0x102>
      mem = -1;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c7e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d015      	beq.n	8006cb2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d006      	beq.n	8006c9c <osMutexNew+0x6a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b4f      	cmp	r3, #79	@ 0x4f
 8006c94:	d902      	bls.n	8006c9c <osMutexNew+0x6a>
          mem = 1;
 8006c96:	2301      	movs	r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	e00c      	b.n	8006cb6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <osMutexNew+0x84>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <osMutexNew+0x84>
            mem = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e001      	b.n	8006cb6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d112      	bne.n	8006ce2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	2004      	movs	r0, #4
 8006cca:	f000 fc92 	bl	80075f2 <xQueueCreateMutexStatic>
 8006cce:	61f8      	str	r0, [r7, #28]
 8006cd0:	e016      	b.n	8006d00 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f000 fc8a 	bl	80075f2 <xQueueCreateMutexStatic>
 8006cde:	61f8      	str	r0, [r7, #28]
 8006ce0:	e00e      	b.n	8006d00 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006cee:	2004      	movs	r0, #4
 8006cf0:	f000 fc67 	bl	80075c2 <xQueueCreateMutex>
 8006cf4:	61f8      	str	r0, [r7, #28]
 8006cf6:	e003      	b.n	8006d00 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f000 fc62 	bl	80075c2 <xQueueCreateMutex>
 8006cfe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <osMutexNew+0xee>
        if (attr != NULL) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <osMutexNew+0xe2>
          name = attr->name;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e001      	b.n	8006d18 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006d18:	68f9      	ldr	r1, [r7, #12]
 8006d1a:	69f8      	ldr	r0, [r7, #28]
 8006d1c:	f001 fb4e 	bl	80083bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <osMutexNew+0x102>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006d34:	69fb      	ldr	r3, [r7, #28]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5c:	f3ef 8305 	mrs	r3, IPSR
 8006d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d62:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006d68:	f06f 0305 	mvn.w	r3, #5
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e02c      	b.n	8006dca <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006d76:	f06f 0303 	mvn.w	r3, #3
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e025      	b.n	8006dca <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f000 fc83 	bl	8007692 <xQueueTakeMutexRecursive>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d01b      	beq.n	8006dca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006d98:	f06f 0301 	mvn.w	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e014      	b.n	8006dca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006da0:	f06f 0302 	mvn.w	r3, #2
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e010      	b.n	8006dca <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f000 ff2a 	bl	8007c04 <xQueueSemaphoreTake>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d009      	beq.n	8006dca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006dbc:	f06f 0301 	mvn.w	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e002      	b.n	8006dca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006dc4:	f06f 0302 	mvn.w	r3, #2
 8006dc8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006dca:	697b      	ldr	r3, [r7, #20]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df0:	f3ef 8305 	mrs	r3, IPSR
 8006df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006df6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006dfc:	f06f 0305 	mvn.w	r3, #5
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	e01f      	b.n	8006e44 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006e0a:	f06f 0303 	mvn.w	r3, #3
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e018      	b.n	8006e44 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e18:	6938      	ldr	r0, [r7, #16]
 8006e1a:	f000 fc05 	bl	8007628 <xQueueGiveMutexRecursive>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d00f      	beq.n	8006e44 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e24:	f06f 0302 	mvn.w	r3, #2
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e00b      	b.n	8006e44 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	6938      	ldr	r0, [r7, #16]
 8006e34:	f000 fc64 	bl	8007700 <xQueueGenericSend>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d002      	beq.n	8006e44 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e3e:	f06f 0302 	mvn.w	r3, #2
 8006e42:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e44:	697b      	ldr	r3, [r7, #20]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b08a      	sub	sp, #40	@ 0x28
 8006e52:	af02      	add	r7, sp, #8
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e5e:	f3ef 8305 	mrs	r3, IPSR
 8006e62:	613b      	str	r3, [r7, #16]
  return(result);
 8006e64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15f      	bne.n	8006f2a <osMessageQueueNew+0xdc>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d05c      	beq.n	8006f2a <osMessageQueueNew+0xdc>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d059      	beq.n	8006f2a <osMessageQueueNew+0xdc>
    mem = -1;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d029      	beq.n	8006ed6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d012      	beq.n	8006eb0 <osMessageQueueNew+0x62>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e90:	d90e      	bls.n	8006eb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695a      	ldr	r2, [r3, #20]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <osMessageQueueNew+0x62>
        mem = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61bb      	str	r3, [r7, #24]
 8006eae:	e014      	b.n	8006eda <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <osMessageQueueNew+0x8c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10c      	bne.n	8006eda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <osMessageQueueNew+0x8c>
          mem = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e001      	b.n	8006eda <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10b      	bne.n	8006ef8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	9100      	str	r1, [sp, #0]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fa72 	bl	80073d8 <xQueueGenericCreateStatic>
 8006ef4:	61f8      	str	r0, [r7, #28]
 8006ef6:	e008      	b.n	8006f0a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d105      	bne.n	8006f0a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006efe:	2200      	movs	r2, #0
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fae5 	bl	80074d2 <xQueueGenericCreate>
 8006f08:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e001      	b.n	8006f22 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	69f8      	ldr	r0, [r7, #28]
 8006f26:	f001 fa49 	bl	80083bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4c:	f3ef 8305 	mrs	r3, IPSR
 8006f50:	617b      	str	r3, [r7, #20]
  return(result);
 8006f52:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d028      	beq.n	8006faa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <osMessageQueuePut+0x36>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <osMessageQueuePut+0x36>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006f6a:	f06f 0303 	mvn.w	r3, #3
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e038      	b.n	8006fe4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f76:	f107 0210 	add.w	r2, r7, #16
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	69b8      	ldr	r0, [r7, #24]
 8006f80:	f000 fcc0 	bl	8007904 <xQueueGenericSendFromISR>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d003      	beq.n	8006f92 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f8a:	f06f 0302 	mvn.w	r3, #2
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e028      	b.n	8006fe4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d025      	beq.n	8006fe4 <osMessageQueuePut+0xb0>
 8006f98:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <osMessageQueuePut+0xbc>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	e01c      	b.n	8006fe4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <osMessageQueuePut+0x82>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006fb6:	f06f 0303 	mvn.w	r3, #3
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e012      	b.n	8006fe4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	69b8      	ldr	r0, [r7, #24]
 8006fc6:	f000 fb9b 	bl	8007700 <xQueueGenericSend>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d009      	beq.n	8006fe4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006fd6:	f06f 0301 	mvn.w	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e002      	b.n	8006fe4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006fde:	f06f 0302 	mvn.w	r3, #2
 8006fe2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3720      	adds	r7, #32
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700a:	f3ef 8305 	mrs	r3, IPSR
 800700e:	617b      	str	r3, [r7, #20]
  return(result);
 8007010:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007012:	2b00      	cmp	r3, #0
 8007014:	d028      	beq.n	8007068 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <osMessageQueueGet+0x34>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <osMessageQueueGet+0x34>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007028:	f06f 0303 	mvn.w	r3, #3
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	e037      	b.n	80070a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007034:	f107 0310 	add.w	r3, r7, #16
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	69b8      	ldr	r0, [r7, #24]
 800703e:	f000 ffd5 	bl	8007fec <xQueueReceiveFromISR>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d003      	beq.n	8007050 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007048:	f06f 0302 	mvn.w	r3, #2
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e027      	b.n	80070a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d024      	beq.n	80070a0 <osMessageQueueGet+0xac>
 8007056:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <osMessageQueueGet+0xb8>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e01b      	b.n	80070a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <osMessageQueueGet+0x80>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007074:	f06f 0303 	mvn.w	r3, #3
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	e011      	b.n	80070a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	69b8      	ldr	r0, [r7, #24]
 8007082:	f000 fcdd 	bl	8007a40 <xQueueReceive>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d009      	beq.n	80070a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007092:	f06f 0301 	mvn.w	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e002      	b.n	80070a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800709a:	f06f 0302 	mvn.w	r3, #2
 800709e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80070a0:	69fb      	ldr	r3, [r7, #28]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	e00e      	b.n	80070e6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c8:	f3ef 8305 	mrs	r3, IPSR
 80070cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80070d4:	6938      	ldr	r0, [r7, #16]
 80070d6:	f001 f82a 	bl	800812e <uxQueueMessagesWaitingFromISR>
 80070da:	6178      	str	r0, [r7, #20]
 80070dc:	e003      	b.n	80070e6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80070de:	6938      	ldr	r0, [r7, #16]
 80070e0:	f001 f806 	bl	80080f0 <uxQueueMessagesWaiting>
 80070e4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070fc:	f3ef 8305 	mrs	r3, IPSR
 8007100:	60fb      	str	r3, [r7, #12]
  return(result);
 8007102:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8007108:	f06f 0305 	mvn.w	r3, #5
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e00c      	b.n	800712a <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8007116:	f06f 0303 	mvn.w	r3, #3
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	e005      	b.n	800712a <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8007122:	2100      	movs	r1, #0
 8007124:	6938      	ldr	r0, [r7, #16]
 8007126:	f000 f8ed 	bl	8007304 <xQueueGenericReset>
  }

  return (stat);
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a07      	ldr	r2, [pc, #28]	@ (8007160 <vApplicationGetIdleTaskMemory+0x2c>)
 8007144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a06      	ldr	r2, [pc, #24]	@ (8007164 <vApplicationGetIdleTaskMemory+0x30>)
 800714a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2280      	movs	r2, #128	@ 0x80
 8007150:	601a      	str	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	2000049c 	.word	0x2000049c
 8007164:	20000544 	.word	0x20000544

08007168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <vApplicationGetTimerTaskMemory+0x2c>)
 8007178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4a06      	ldr	r2, [pc, #24]	@ (8007198 <vApplicationGetTimerTaskMemory+0x30>)
 800717e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20000744 	.word	0x20000744
 8007198:	200007ec 	.word	0x200007ec

0800719c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0208 	add.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f103 0208 	add.w	r2, r3, #8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f103 0208 	add.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007254:	d103      	bne.n	800725e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e00c      	b.n	8007278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3308      	adds	r3, #8
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e002      	b.n	800726c <vListInsert+0x2e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	d2f6      	bcs.n	8007266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6852      	ldr	r2, [r2, #4]
 80072d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d103      	bne.n	80072e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	1e5a      	subs	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800732a:	bf00      	nop
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007330:	f002 fd7a 	bl	8009e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733c:	68f9      	ldr	r1, [r7, #12]
 800733e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007360:	3b01      	subs	r3, #1
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	441a      	add	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	22ff      	movs	r2, #255	@ 0xff
 8007374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	22ff      	movs	r2, #255	@ 0xff
 800737c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d114      	bne.n	80073b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01a      	beq.n	80073c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3310      	adds	r3, #16
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fd02 	bl	8008d9c <xTaskRemoveFromEventList>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <xQueueGenericReset+0xd0>)
 80073a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	e009      	b.n	80073c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3310      	adds	r3, #16
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fef1 	bl	800719c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3324      	adds	r3, #36	@ 0x24
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff feec 	bl	800719c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073c4:	f002 fd62 	bl	8009e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073c8:	2301      	movs	r3, #1
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	@ 0x38
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	e7fd      	b.n	8007400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <xQueueGenericCreateStatic+0x56>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <xQueueGenericCreateStatic+0x5a>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueGenericCreateStatic+0x5c>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <xQueueGenericCreateStatic+0x84>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <xQueueGenericCreateStatic+0x88>
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <xQueueGenericCreateStatic+0x8a>
 8007460:	2300      	movs	r3, #0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61fb      	str	r3, [r7, #28]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800747e:	2350      	movs	r3, #80	@ 0x50
 8007480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b50      	cmp	r3, #80	@ 0x50
 8007486:	d00b      	beq.n	80074a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61bb      	str	r3, [r7, #24]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80074a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00d      	beq.n	80074c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f840 	bl	8007548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3730      	adds	r7, #48	@ 0x30
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	@ 0x28
 80074d6:	af02      	add	r7, sp, #8
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	613b      	str	r3, [r7, #16]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	3350      	adds	r3, #80	@ 0x50
 800750c:	4618      	mov	r0, r3
 800750e:	f002 fdad 	bl	800a06c <pvPortMalloc>
 8007512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d011      	beq.n	800753e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	3350      	adds	r3, #80	@ 0x50
 8007522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800752c:	79fa      	ldrb	r2, [r7, #7]
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4613      	mov	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f805 	bl	8007548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800753e:	69bb      	ldr	r3, [r7, #24]
	}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e002      	b.n	800756a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007576:	2101      	movs	r1, #1
 8007578:	69b8      	ldr	r0, [r7, #24]
 800757a:	f7ff fec3 	bl	8007304 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075ae:	2300      	movs	r3, #0
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8a3 	bl	8007700 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	4603      	mov	r3, r0
 80075ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075cc:	2301      	movs	r3, #1
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6939      	ldr	r1, [r7, #16]
 80075da:	6978      	ldr	r0, [r7, #20]
 80075dc:	f7ff ff79 	bl	80074d2 <xQueueGenericCreate>
 80075e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff ffd3 	bl	800758e <prvInitialiseMutex>

		return xNewQueue;
 80075e8:	68fb      	ldr	r3, [r7, #12]
	}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af02      	add	r7, sp, #8
 80075f8:	4603      	mov	r3, r0
 80075fa:	6039      	str	r1, [r7, #0]
 80075fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075fe:	2301      	movs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2200      	movs	r2, #0
 800760e:	6939      	ldr	r1, [r7, #16]
 8007610:	6978      	ldr	r0, [r7, #20]
 8007612:	f7ff fee1 	bl	80073d8 <xQueueGenericCreateStatic>
 8007616:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff ffb8 	bl	800758e <prvInitialiseMutex>

		return xNewQueue;
 800761e:	68fb      	ldr	r3, [r7, #12]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007628:	b590      	push	{r4, r7, lr}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	60fb      	str	r3, [r7, #12]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	689c      	ldr	r4, [r3, #8]
 8007656:	f001 fd67 	bl	8009128 <xTaskGetCurrentTaskHandle>
 800765a:	4603      	mov	r3, r0
 800765c:	429c      	cmp	r4, r3
 800765e:	d111      	bne.n	8007684 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007672:	2300      	movs	r3, #0
 8007674:	2200      	movs	r2, #0
 8007676:	2100      	movs	r1, #0
 8007678:	6938      	ldr	r0, [r7, #16]
 800767a:	f000 f841 	bl	8007700 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800767e:	2301      	movs	r3, #1
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e001      	b.n	8007688 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007688:	697b      	ldr	r3, [r7, #20]
	}
 800768a:	4618      	mov	r0, r3
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}

08007692 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007692:	b590      	push	{r4, r7, lr}
 8007694:	b087      	sub	sp, #28
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60fb      	str	r3, [r7, #12]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	689c      	ldr	r4, [r3, #8]
 80076c2:	f001 fd31 	bl	8009128 <xTaskGetCurrentTaskHandle>
 80076c6:	4603      	mov	r3, r0
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d107      	bne.n	80076dc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80076d6:	2301      	movs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	e00c      	b.n	80076f6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6938      	ldr	r0, [r7, #16]
 80076e0:	f000 fa90 	bl	8007c04 <xQueueSemaphoreTake>
 80076e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80076f6:	697b      	ldr	r3, [r7, #20]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}

08007700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08e      	sub	sp, #56	@ 0x38
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800770e:	2300      	movs	r3, #0
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <xQueueGenericSend+0x34>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <xQueueGenericSend+0x42>
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <xQueueGenericSend+0x46>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <xQueueGenericSend+0x48>
 8007746:	2300      	movs	r3, #0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10b      	bne.n	8007764 <xQueueGenericSend+0x64>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d103      	bne.n	8007772 <xQueueGenericSend+0x72>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <xQueueGenericSend+0x76>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <xQueueGenericSend+0x78>
 8007776:	2300      	movs	r3, #0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <xQueueGenericSend+0x94>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	623b      	str	r3, [r7, #32]
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	e7fd      	b.n	8007790 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007794:	f001 fcd8 	bl	8009148 <xTaskGetSchedulerState>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <xQueueGenericSend+0xa4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <xQueueGenericSend+0xa8>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <xQueueGenericSend+0xaa>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61fb      	str	r3, [r7, #28]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c6:	f002 fb2f 	bl	8009e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <xQueueGenericSend+0xdc>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d129      	bne.n	8007830 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077e2:	f000 fcdb 	bl	800819c <prvCopyDataToQueue>
 80077e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d010      	beq.n	8007812 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	3324      	adds	r3, #36	@ 0x24
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fad1 	bl	8008d9c <xTaskRemoveFromEventList>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d013      	beq.n	8007828 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007800:	4b3f      	ldr	r3, [pc, #252]	@ (8007900 <xQueueGenericSend+0x200>)
 8007802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	e00a      	b.n	8007828 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007818:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <xQueueGenericSend+0x200>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007828:	f002 fb30 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 800782c:	2301      	movs	r3, #1
 800782e:	e063      	b.n	80078f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007836:	f002 fb29 	bl	8009e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800783a:	2300      	movs	r3, #0
 800783c:	e05c      	b.n	80078f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800783e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007844:	f107 0314 	add.w	r3, r7, #20
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fb0b 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800784e:	2301      	movs	r3, #1
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007852:	f002 fb1b 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007856:	f001 f873 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800785a:	f002 fae5 	bl	8009e28 <vPortEnterCritical>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007864:	b25b      	sxtb	r3, r3
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786a:	d103      	bne.n	8007874 <xQueueGenericSend+0x174>
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800787a:	b25b      	sxtb	r3, r3
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007880:	d103      	bne.n	800788a <xQueueGenericSend+0x18a>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800788a:	f002 faff 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800788e:	1d3a      	adds	r2, r7, #4
 8007890:	f107 0314 	add.w	r3, r7, #20
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fafa 	bl	8008e90 <xTaskCheckForTimeOut>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d124      	bne.n	80078ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078a4:	f000 fd72 	bl	800838c <prvIsQueueFull>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d018      	beq.n	80078e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	3310      	adds	r3, #16
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	4611      	mov	r1, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fa1e 	bl	8008cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078be:	f000 fcfd 	bl	80082bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078c2:	f001 f84b 	bl	800895c <xTaskResumeAll>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f47f af7c 	bne.w	80077c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007900 <xQueueGenericSend+0x200>)
 80078d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	e772      	b.n	80077c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078e2:	f000 fceb 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078e6:	f001 f839 	bl	800895c <xTaskResumeAll>
 80078ea:	e76c      	b.n	80077c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ee:	f000 fce5 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078f2:	f001 f833 	bl	800895c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3738      	adds	r7, #56	@ 0x38
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b090      	sub	sp, #64	@ 0x40
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <xQueueGenericSendFromISR+0x3e>
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <xQueueGenericSendFromISR+0x42>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <xQueueGenericSendFromISR+0x44>
 8007946:	2300      	movs	r3, #0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d103      	bne.n	8007972 <xQueueGenericSendFromISR+0x6e>
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <xQueueGenericSendFromISR+0x72>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <xQueueGenericSendFromISR+0x74>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	623b      	str	r3, [r7, #32]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007994:	f002 fb28 	bl	8009fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007998:	f3ef 8211 	mrs	r2, BASEPRI
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	61fa      	str	r2, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079bc:	429a      	cmp	r2, r3
 80079be:	d302      	bcc.n	80079c6 <xQueueGenericSendFromISR+0xc2>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d12f      	bne.n	8007a26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079dc:	f000 fbde 	bl	800819c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079e8:	d112      	bne.n	8007a10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	3324      	adds	r3, #36	@ 0x24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f9d0 	bl	8008d9c <xTaskRemoveFromEventList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e007      	b.n	8007a20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a14:	3301      	adds	r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	b25a      	sxtb	r2, r3
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a20:	2301      	movs	r3, #1
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a24:	e001      	b.n	8007a2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3740      	adds	r7, #64	@ 0x40
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	@ 0x30
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <xQueueReceive+0x32>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	623b      	str	r3, [r7, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d103      	bne.n	8007a80 <xQueueReceive+0x40>
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <xQueueReceive+0x44>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <xQueueReceive+0x46>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <xQueueReceive+0x62>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	61fb      	str	r3, [r7, #28]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aa2:	f001 fb51 	bl	8009148 <xTaskGetSchedulerState>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <xQueueReceive+0x72>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueReceive+0x76>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueReceive+0x78>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10b      	bne.n	8007ad4 <xQueueReceive+0x94>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	61bb      	str	r3, [r7, #24]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad4:	f002 f9a8 	bl	8009e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01f      	beq.n	8007b24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae8:	f000 fbc2 	bl	8008270 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00f      	beq.n	8007b1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	3310      	adds	r3, #16
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 f94b 	bl	8008d9c <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c00 <xQueueReceive+0x1c0>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b1c:	f002 f9b6 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e069      	b.n	8007bf8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b2a:	f002 f9af 	bl	8009e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e062      	b.n	8007bf8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b38:	f107 0310 	add.w	r3, r7, #16
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f991 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b42:	2301      	movs	r3, #1
 8007b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b46:	f002 f9a1 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b4a:	f000 fef9 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b4e:	f002 f96b 	bl	8009e28 <vPortEnterCritical>
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b5e:	d103      	bne.n	8007b68 <xQueueReceive+0x128>
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b6e:	b25b      	sxtb	r3, r3
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b74:	d103      	bne.n	8007b7e <xQueueReceive+0x13e>
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b7e:	f002 f985 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b82:	1d3a      	adds	r2, r7, #4
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 f980 	bl	8008e90 <xTaskCheckForTimeOut>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d123      	bne.n	8007bde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b98:	f000 fbe2 	bl	8008360 <prvIsQueueEmpty>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d017      	beq.n	8007bd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	3324      	adds	r3, #36	@ 0x24
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f8a4 	bl	8008cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb2:	f000 fb83 	bl	80082bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bb6:	f000 fed1 	bl	800895c <xTaskResumeAll>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d189      	bne.n	8007ad4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c00 <xQueueReceive+0x1c0>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	e780      	b.n	8007ad4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bd4:	f000 fb72 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bd8:	f000 fec0 	bl	800895c <xTaskResumeAll>
 8007bdc:	e77a      	b.n	8007ad4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be0:	f000 fb6c 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007be4:	f000 feba 	bl	800895c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bea:	f000 fbb9 	bl	8008360 <prvIsQueueEmpty>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f43f af6f 	beq.w	8007ad4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3730      	adds	r7, #48	@ 0x30
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08e      	sub	sp, #56	@ 0x38
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c16:	2300      	movs	r3, #0
 8007c18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10b      	bne.n	8007c38 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	623b      	str	r3, [r7, #32]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	61fb      	str	r3, [r7, #28]
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c58:	f001 fa76 	bl	8009148 <xTaskGetSchedulerState>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <xQueueSemaphoreTake+0x64>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <xQueueSemaphoreTake+0x68>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <xQueueSemaphoreTake+0x6a>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10b      	bne.n	8007c8a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	61bb      	str	r3, [r7, #24]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c8a:	f002 f8cd 	bl	8009e28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d024      	beq.n	8007ce4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	1e5a      	subs	r2, r3, #1
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007caa:	f001 fbc7 	bl	800943c <pvTaskIncrementMutexHeldCount>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00f      	beq.n	8007cdc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	3310      	adds	r3, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 f86b 	bl	8008d9c <xTaskRemoveFromEventList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d007      	beq.n	8007cdc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ccc:	4b54      	ldr	r3, [pc, #336]	@ (8007e20 <xQueueSemaphoreTake+0x21c>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cdc:	f002 f8d6 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e098      	b.n	8007e16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d112      	bne.n	8007d10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	617b      	str	r3, [r7, #20]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d08:	f002 f8c0 	bl	8009e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e082      	b.n	8007e16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f8a2 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d24:	f002 f8b2 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d28:	f000 fe0a 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d2c:	f002 f87c 	bl	8009e28 <vPortEnterCritical>
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d3c:	d103      	bne.n	8007d46 <xQueueSemaphoreTake+0x142>
 8007d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d52:	d103      	bne.n	8007d5c <xQueueSemaphoreTake+0x158>
 8007d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d5c:	f002 f896 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d60:	463a      	mov	r2, r7
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f891 	bl	8008e90 <xTaskCheckForTimeOut>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d132      	bne.n	8007dda <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d76:	f000 faf3 	bl	8008360 <prvIsQueueEmpty>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d026      	beq.n	8007dce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007d88:	f002 f84e 	bl	8009e28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f9f7 	bl	8009184 <xTaskPriorityInherit>
 8007d96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007d98:	f002 f878 	bl	8009e8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	3324      	adds	r3, #36	@ 0x24
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ffa7 	bl	8008cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dac:	f000 fa86 	bl	80082bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007db0:	f000 fdd4 	bl	800895c <xTaskResumeAll>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f47f af67 	bne.w	8007c8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007dbc:	4b18      	ldr	r3, [pc, #96]	@ (8007e20 <xQueueSemaphoreTake+0x21c>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	e75d      	b.n	8007c8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007dce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dd0:	f000 fa74 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dd4:	f000 fdc2 	bl	800895c <xTaskResumeAll>
 8007dd8:	e757      	b.n	8007c8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ddc:	f000 fa6e 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007de0:	f000 fdbc 	bl	800895c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007de6:	f000 fabb 	bl	8008360 <prvIsQueueEmpty>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f43f af4c 	beq.w	8007c8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00d      	beq.n	8007e14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007df8:	f002 f816 	bl	8009e28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dfe:	f000 f9b5 	bl	800816c <prvGetDisinheritPriorityAfterTimeout>
 8007e02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 fa92 	bl	8009334 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e10:	f002 f83c 	bl	8009e8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3738      	adds	r7, #56	@ 0x38
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	@ 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10b      	bne.n	8007e56 <xQueuePeek+0x32>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <xQueuePeek+0x40>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <xQueuePeek+0x44>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <xQueuePeek+0x46>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xQueuePeek+0x62>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	623b      	str	r3, [r7, #32]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e86:	f001 f95f 	bl	8009148 <xTaskGetSchedulerState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <xQueuePeek+0x72>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <xQueuePeek+0x76>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <xQueuePeek+0x78>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10b      	bne.n	8007eb8 <xQueuePeek+0x94>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61fb      	str	r3, [r7, #28]
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eb8:	f001 ffb6 	bl	8009e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d021      	beq.n	8007f0c <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ed2:	f000 f9cd 	bl	8008270 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eda:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00f      	beq.n	8007f04 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	3324      	adds	r3, #36	@ 0x24
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 ff57 	bl	8008d9c <xTaskRemoveFromEventList>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe8 <xQueuePeek+0x1c4>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f04:	f001 ffc2 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e069      	b.n	8007fe0 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f12:	f001 ffbb 	bl	8009e8c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e062      	b.n	8007fe0 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 ff9d 	bl	8008e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f2e:	f001 ffad 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f32:	f000 fd05 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f36:	f001 ff77 	bl	8009e28 <vPortEnterCritical>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f40:	b25b      	sxtb	r3, r3
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f46:	d103      	bne.n	8007f50 <xQueuePeek+0x12c>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f56:	b25b      	sxtb	r3, r3
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f5c:	d103      	bne.n	8007f66 <xQueuePeek+0x142>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f66:	f001 ff91 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f6a:	1d3a      	adds	r2, r7, #4
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 ff8c 	bl	8008e90 <xTaskCheckForTimeOut>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d123      	bne.n	8007fc6 <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f80:	f000 f9ee 	bl	8008360 <prvIsQueueEmpty>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d017      	beq.n	8007fba <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	3324      	adds	r3, #36	@ 0x24
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 feb0 	bl	8008cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f9a:	f000 f98f 	bl	80082bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f9e:	f000 fcdd 	bl	800895c <xTaskResumeAll>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d187      	bne.n	8007eb8 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 8007fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe8 <xQueuePeek+0x1c4>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	e77e      	b.n	8007eb8 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8007fba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fbc:	f000 f97e 	bl	80082bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fc0:	f000 fccc 	bl	800895c <xTaskResumeAll>
 8007fc4:	e778      	b.n	8007eb8 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8007fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc8:	f000 f978 	bl	80082bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fcc:	f000 fcc6 	bl	800895c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fd2:	f000 f9c5 	bl	8008360 <prvIsQueueEmpty>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f43f af6d 	beq.w	8007eb8 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3738      	adds	r7, #56	@ 0x38
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	@ 0x38
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	623b      	str	r3, [r7, #32]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <xQueueReceiveFromISR+0x3c>
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <xQueueReceiveFromISR+0x40>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <xQueueReceiveFromISR+0x42>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10b      	bne.n	800804a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	61fb      	str	r3, [r7, #28]
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	e7fd      	b.n	8008046 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800804a:	f001 ffcd 	bl	8009fe8 <vPortValidateInterruptPriority>
	__asm volatile
 800804e:	f3ef 8211 	mrs	r2, BASEPRI
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	61ba      	str	r2, [r7, #24]
 8008064:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008066:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008068:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02f      	beq.n	80080d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800807c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008084:	f000 f8f4 	bl	8008270 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008090:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008098:	d112      	bne.n	80080c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	3310      	adds	r3, #16
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fe78 	bl	8008d9c <xTaskRemoveFromEventList>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00e      	beq.n	80080d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e007      	b.n	80080d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080c4:	3301      	adds	r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	b25a      	sxtb	r2, r3
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d4:	e001      	b.n	80080da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f383 8811 	msr	BASEPRI, r3
}
 80080e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3738      	adds	r7, #56	@ 0x38
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60bb      	str	r3, [r7, #8]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008116:	f001 fe87 	bl	8009e28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008120:	f001 feb4 	bl	8009e8c <vPortExitCritical>

	return uxReturn;
 8008124:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800812e:	b480      	push	{r7}
 8008130:	b087      	sub	sp, #28
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800815e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d006      	beq.n	800818a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e001      	b.n	800818e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800818e:	68fb      	ldr	r3, [r7, #12]
	}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d14d      	bne.n	800825e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f844 	bl	8009254 <xTaskPriorityDisinherit>
 80081cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	e043      	b.n	800825e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d119      	bne.n	8008210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6858      	ldr	r0, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	461a      	mov	r2, r3
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	f019 f81b 	bl	8021222 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	d32b      	bcc.n	800825e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	605a      	str	r2, [r3, #4]
 800820e:	e026      	b.n	800825e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68d8      	ldr	r0, [r3, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	461a      	mov	r2, r3
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	f019 f801 	bl	8021222 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008228:	425b      	negs	r3, r3
 800822a:	441a      	add	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d207      	bcs.n	800824c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008244:	425b      	negs	r3, r3
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d105      	bne.n	800825e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3b01      	subs	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008266:	697b      	ldr	r3, [r7, #20]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d018      	beq.n	80082b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d303      	bcc.n	80082a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68d9      	ldr	r1, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	461a      	mov	r2, r3
 80082ae:	6838      	ldr	r0, [r7, #0]
 80082b0:	f018 ffb7 	bl	8021222 <memcpy>
	}
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c4:	f001 fdb0 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d0:	e011      	b.n	80082f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d012      	beq.n	8008300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3324      	adds	r3, #36	@ 0x24
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fd5c 	bl	8008d9c <xTaskRemoveFromEventList>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ea:	f000 fe35 	bl	8008f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dce9      	bgt.n	80082d2 <prvUnlockQueue+0x16>
 80082fe:	e000      	b.n	8008302 <prvUnlockQueue+0x46>
					break;
 8008300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	22ff      	movs	r2, #255	@ 0xff
 8008306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800830a:	f001 fdbf 	bl	8009e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800830e:	f001 fd8b 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800831a:	e011      	b.n	8008340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3310      	adds	r3, #16
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fd37 	bl	8008d9c <xTaskRemoveFromEventList>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008334:	f000 fe10 	bl	8008f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	3b01      	subs	r3, #1
 800833c:	b2db      	uxtb	r3, r3
 800833e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dce9      	bgt.n	800831c <prvUnlockQueue+0x60>
 8008348:	e000      	b.n	800834c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800834a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22ff      	movs	r2, #255	@ 0xff
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008354:	f001 fd9a 	bl	8009e8c <vPortExitCritical>
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fd5e 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e001      	b.n	800837e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837e:	f001 fd85 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 8008382:	68fb      	ldr	r3, [r7, #12]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008394:	f001 fd48 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d102      	bne.n	80083aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e001      	b.n	80083ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ae:	f001 fd6d 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	e014      	b.n	80083f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083cc:	4a0f      	ldr	r2, [pc, #60]	@ (800840c <vQueueAddToRegistry+0x50>)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083d8:	490c      	ldr	r1, [pc, #48]	@ (800840c <vQueueAddToRegistry+0x50>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083e2:	4a0a      	ldr	r2, [pc, #40]	@ (800840c <vQueueAddToRegistry+0x50>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ee:	e006      	b.n	80083fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	d9e7      	bls.n	80083cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000bec 	.word	0x20000bec

08008410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008420:	f001 fd02 	bl	8009e28 <vPortEnterCritical>
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800842a:	b25b      	sxtb	r3, r3
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008430:	d103      	bne.n	800843a <vQueueWaitForMessageRestricted+0x2a>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008440:	b25b      	sxtb	r3, r3
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008446:	d103      	bne.n	8008450 <vQueueWaitForMessageRestricted+0x40>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008450:	f001 fd1c 	bl	8009e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	3324      	adds	r3, #36	@ 0x24
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fc6d 	bl	8008d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff26 	bl	80082bc <prvUnlockQueue>
	}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08e      	sub	sp, #56	@ 0x38
 800847c:	af04      	add	r7, sp, #16
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	623b      	str	r3, [r7, #32]
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61fb      	str	r3, [r7, #28]
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	e7fd      	b.n	80084be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084c2:	23a8      	movs	r3, #168	@ 0xa8
 80084c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80084ca:	d00b      	beq.n	80084e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	61bb      	str	r3, [r7, #24]
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01e      	beq.n	800852a <xTaskCreateStatic+0xb2>
 80084ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01b      	beq.n	800852a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008504:	2300      	movs	r3, #0
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f851 	bl	80085c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008524:	f000 f8f6 	bl	8008714 <prvAddNewTaskToReadyList>
 8008528:	e001      	b.n	800852e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800852e:	697b      	ldr	r3, [r7, #20]
	}
 8008530:	4618      	mov	r0, r3
 8008532:	3728      	adds	r7, #40	@ 0x28
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	@ 0x30
 800853c:	af04      	add	r7, sp, #16
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fd8d 	bl	800a06c <pvPortMalloc>
 8008552:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00e      	beq.n	8008578 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800855a:	20a8      	movs	r0, #168	@ 0xa8
 800855c:	f001 fd86 	bl	800a06c <pvPortMalloc>
 8008560:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	631a      	str	r2, [r3, #48]	@ 0x30
 800856e:	e005      	b.n	800857c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008570:	6978      	ldr	r0, [r7, #20]
 8008572:	f001 fe49 	bl	800a208 <vPortFree>
 8008576:	e001      	b.n	800857c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d017      	beq.n	80085b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	2300      	movs	r3, #0
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f80f 	bl	80085c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085a6:	69f8      	ldr	r0, [r7, #28]
 80085a8:	f000 f8b4 	bl	8008714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ac:	2301      	movs	r3, #1
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	e002      	b.n	80085b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085b8:	69bb      	ldr	r3, [r7, #24]
	}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	461a      	mov	r2, r3
 80085dc:	21a5      	movs	r1, #165	@ 0xa5
 80085de:	f018 fd4f 	bl	8021080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085ec:	3b01      	subs	r3, #1
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	617b      	str	r3, [r7, #20]
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01f      	beq.n	8008664 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008624:	2300      	movs	r3, #0
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e012      	b.n	8008650 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	7819      	ldrb	r1, [r3, #0]
 8008632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	3334      	adds	r3, #52	@ 0x34
 800863a:	460a      	mov	r2, r1
 800863c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	3301      	adds	r3, #1
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b0f      	cmp	r3, #15
 8008654:	d9e9      	bls.n	800862a <prvInitialiseNewTask+0x66>
 8008656:	e000      	b.n	800865a <prvInitialiseNewTask+0x96>
			{
				break;
 8008658:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008662:	e003      	b.n	800866c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	2b37      	cmp	r3, #55	@ 0x37
 8008670:	d901      	bls.n	8008676 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008672:	2337      	movs	r3, #55	@ 0x37
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800867a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008680:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fda5 	bl	80071dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	3318      	adds	r3, #24
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fda0 	bl	80071dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	3354      	adds	r3, #84	@ 0x54
 80086c6:	224c      	movs	r2, #76	@ 0x4c
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f018 fcd8 	bl	8021080 <memset>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008708 <prvInitialiseNewTask+0x144>)
 80086d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	4a0c      	ldr	r2, [pc, #48]	@ (800870c <prvInitialiseNewTask+0x148>)
 80086da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	4a0c      	ldr	r2, [pc, #48]	@ (8008710 <prvInitialiseNewTask+0x14c>)
 80086e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	68f9      	ldr	r1, [r7, #12]
 80086e6:	69b8      	ldr	r0, [r7, #24]
 80086e8:	f001 fa6a 	bl	8009bc0 <pxPortInitialiseStack>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fe:	bf00      	nop
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20017458 	.word	0x20017458
 800870c:	200174c0 	.word	0x200174c0
 8008710:	20017528 	.word	0x20017528

08008714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800871c:	f001 fb84 	bl	8009e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008720:	4b2d      	ldr	r3, [pc, #180]	@ (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a2c      	ldr	r2, [pc, #176]	@ (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 8008728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800872a:	4b2c      	ldr	r3, [pc, #176]	@ (80087dc <prvAddNewTaskToReadyList+0xc8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008732:	4a2a      	ldr	r2, [pc, #168]	@ (80087dc <prvAddNewTaskToReadyList+0xc8>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008738:	4b27      	ldr	r3, [pc, #156]	@ (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d110      	bne.n	8008762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008740:	f000 fc2e 	bl	8008fa0 <prvInitialiseTaskLists>
 8008744:	e00d      	b.n	8008762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008746:	4b26      	ldr	r3, [pc, #152]	@ (80087e0 <prvAddNewTaskToReadyList+0xcc>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800874e:	4b23      	ldr	r3, [pc, #140]	@ (80087dc <prvAddNewTaskToReadyList+0xc8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	429a      	cmp	r2, r3
 800875a:	d802      	bhi.n	8008762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800875c:	4a1f      	ldr	r2, [pc, #124]	@ (80087dc <prvAddNewTaskToReadyList+0xc8>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008762:	4b20      	ldr	r3, [pc, #128]	@ (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	4a1e      	ldr	r2, [pc, #120]	@ (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 800876a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800876c:	4b1d      	ldr	r3, [pc, #116]	@ (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008778:	4b1b      	ldr	r3, [pc, #108]	@ (80087e8 <prvAddNewTaskToReadyList+0xd4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d903      	bls.n	8008788 <prvAddNewTaskToReadyList+0x74>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008784:	4a18      	ldr	r2, [pc, #96]	@ (80087e8 <prvAddNewTaskToReadyList+0xd4>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4a15      	ldr	r2, [pc, #84]	@ (80087ec <prvAddNewTaskToReadyList+0xd8>)
 8008796:	441a      	add	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7fe fd29 	bl	80071f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087a4:	f001 fb72 	bl	8009e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087a8:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <prvAddNewTaskToReadyList+0xcc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00e      	beq.n	80087ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087b0:	4b0a      	ldr	r3, [pc, #40]	@ (80087dc <prvAddNewTaskToReadyList+0xc8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d207      	bcs.n	80087ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087be:	4b0c      	ldr	r3, [pc, #48]	@ (80087f0 <prvAddNewTaskToReadyList+0xdc>)
 80087c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001100 	.word	0x20001100
 80087dc:	20000c2c 	.word	0x20000c2c
 80087e0:	2000110c 	.word	0x2000110c
 80087e4:	2000111c 	.word	0x2000111c
 80087e8:	20001108 	.word	0x20001108
 80087ec:	20000c30 	.word	0x20000c30
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008806:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <vTaskDelay+0x64>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <vTaskDelay+0x32>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	60bb      	str	r3, [r7, #8]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008826:	f000 f88b 	bl	8008940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fe19 	bl	8009464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008832:	f000 f893 	bl	800895c <xTaskResumeAll>
 8008836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800883e:	4b07      	ldr	r3, [pc, #28]	@ (800885c <vTaskDelay+0x68>)
 8008840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001128 	.word	0x20001128
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	@ 0x28
 8008864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886e:	463a      	mov	r2, r7
 8008870:	1d39      	adds	r1, r7, #4
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe fc5c 	bl	8007134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	9202      	str	r2, [sp, #8]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	2300      	movs	r3, #0
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	2300      	movs	r3, #0
 800888c:	460a      	mov	r2, r1
 800888e:	4924      	ldr	r1, [pc, #144]	@ (8008920 <vTaskStartScheduler+0xc0>)
 8008890:	4824      	ldr	r0, [pc, #144]	@ (8008924 <vTaskStartScheduler+0xc4>)
 8008892:	f7ff fdf1 	bl	8008478 <xTaskCreateStatic>
 8008896:	4603      	mov	r3, r0
 8008898:	4a23      	ldr	r2, [pc, #140]	@ (8008928 <vTaskStartScheduler+0xc8>)
 800889a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800889c:	4b22      	ldr	r3, [pc, #136]	@ (8008928 <vTaskStartScheduler+0xc8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e001      	b.n	80088ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d102      	bne.n	80088ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088b4:	f000 fe2a 	bl	800950c <xTimerCreateTimerTask>
 80088b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d11b      	bne.n	80088f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	613b      	str	r3, [r7, #16]
}
 80088d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088d4:	4b15      	ldr	r3, [pc, #84]	@ (800892c <vTaskStartScheduler+0xcc>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3354      	adds	r3, #84	@ 0x54
 80088da:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <vTaskStartScheduler+0xd0>)
 80088dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088de:	4b15      	ldr	r3, [pc, #84]	@ (8008934 <vTaskStartScheduler+0xd4>)
 80088e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088e6:	4b14      	ldr	r3, [pc, #80]	@ (8008938 <vTaskStartScheduler+0xd8>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088ec:	4b13      	ldr	r3, [pc, #76]	@ (800893c <vTaskStartScheduler+0xdc>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088f2:	f001 f9f5 	bl	8009ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088f6:	e00f      	b.n	8008918 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088fe:	d10b      	bne.n	8008918 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <vTaskStartScheduler+0xb4>
}
 8008918:	bf00      	nop
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	08023b8c 	.word	0x08023b8c
 8008924:	08008f71 	.word	0x08008f71
 8008928:	20001124 	.word	0x20001124
 800892c:	20000c2c 	.word	0x20000c2c
 8008930:	200002ac 	.word	0x200002ac
 8008934:	20001120 	.word	0x20001120
 8008938:	2000110c 	.word	0x2000110c
 800893c:	20001104 	.word	0x20001104

08008940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <vTaskSuspendAll+0x18>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3301      	adds	r3, #1
 800894a:	4a03      	ldr	r2, [pc, #12]	@ (8008958 <vTaskSuspendAll+0x18>)
 800894c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800894e:	bf00      	nop
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20001128 	.word	0x20001128

0800895c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800896a:	4b42      	ldr	r3, [pc, #264]	@ (8008a74 <xTaskResumeAll+0x118>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10b      	bne.n	800898a <xTaskResumeAll+0x2e>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	603b      	str	r3, [r7, #0]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800898a:	f001 fa4d 	bl	8009e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800898e:	4b39      	ldr	r3, [pc, #228]	@ (8008a74 <xTaskResumeAll+0x118>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3b01      	subs	r3, #1
 8008994:	4a37      	ldr	r2, [pc, #220]	@ (8008a74 <xTaskResumeAll+0x118>)
 8008996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008998:	4b36      	ldr	r3, [pc, #216]	@ (8008a74 <xTaskResumeAll+0x118>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d162      	bne.n	8008a66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089a0:	4b35      	ldr	r3, [pc, #212]	@ (8008a78 <xTaskResumeAll+0x11c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d05e      	beq.n	8008a66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a8:	e02f      	b.n	8008a0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b34      	ldr	r3, [pc, #208]	@ (8008a7c <xTaskResumeAll+0x120>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3318      	adds	r3, #24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fc7a 	bl	80072b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3304      	adds	r3, #4
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fc75 	bl	80072b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008a80 <xTaskResumeAll+0x124>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <xTaskResumeAll+0x7e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a80 <xTaskResumeAll+0x124>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a27      	ldr	r2, [pc, #156]	@ (8008a84 <xTaskResumeAll+0x128>)
 80089e8:	441a      	add	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fe fc00 	bl	80071f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fa:	4b23      	ldr	r3, [pc, #140]	@ (8008a88 <xTaskResumeAll+0x12c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d302      	bcc.n	8008a0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a04:	4b21      	ldr	r3, [pc, #132]	@ (8008a8c <xTaskResumeAll+0x130>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8008a7c <xTaskResumeAll+0x120>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1cb      	bne.n	80089aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a18:	f000 fb66 	bl	80090e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008a90 <xTaskResumeAll+0x134>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d010      	beq.n	8008a4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a28:	f000 f846 	bl	8008ab8 <xTaskIncrementTick>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a32:	4b16      	ldr	r3, [pc, #88]	@ (8008a8c <xTaskResumeAll+0x130>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f1      	bne.n	8008a28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a44:	4b12      	ldr	r3, [pc, #72]	@ (8008a90 <xTaskResumeAll+0x134>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a4a:	4b10      	ldr	r3, [pc, #64]	@ (8008a8c <xTaskResumeAll+0x130>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a56:	4b0f      	ldr	r3, [pc, #60]	@ (8008a94 <xTaskResumeAll+0x138>)
 8008a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a66:	f001 fa11 	bl	8009e8c <vPortExitCritical>

	return xAlreadyYielded;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20001128 	.word	0x20001128
 8008a78:	20001100 	.word	0x20001100
 8008a7c:	200010c0 	.word	0x200010c0
 8008a80:	20001108 	.word	0x20001108
 8008a84:	20000c30 	.word	0x20000c30
 8008a88:	20000c2c 	.word	0x20000c2c
 8008a8c:	20001114 	.word	0x20001114
 8008a90:	20001110 	.word	0x20001110
 8008a94:	e000ed04 	.word	0xe000ed04

08008a98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a9e:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <xTaskGetTickCount+0x1c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa4:	687b      	ldr	r3, [r7, #4]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20001104 	.word	0x20001104

08008ab8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8008c00 <xTaskIncrementTick+0x148>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 8090 	bne.w	8008bec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008acc:	4b4d      	ldr	r3, [pc, #308]	@ (8008c04 <xTaskIncrementTick+0x14c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8008c04 <xTaskIncrementTick+0x14c>)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d121      	bne.n	8008b24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ae0:	4b49      	ldr	r3, [pc, #292]	@ (8008c08 <xTaskIncrementTick+0x150>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	603b      	str	r3, [r7, #0]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <xTaskIncrementTick+0x46>
 8008b02:	4b41      	ldr	r3, [pc, #260]	@ (8008c08 <xTaskIncrementTick+0x150>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	4b40      	ldr	r3, [pc, #256]	@ (8008c0c <xTaskIncrementTick+0x154>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c08 <xTaskIncrementTick+0x150>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4a3e      	ldr	r2, [pc, #248]	@ (8008c0c <xTaskIncrementTick+0x154>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	4b3e      	ldr	r3, [pc, #248]	@ (8008c10 <xTaskIncrementTick+0x158>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8008c10 <xTaskIncrementTick+0x158>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f000 fae2 	bl	80090e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b24:	4b3b      	ldr	r3, [pc, #236]	@ (8008c14 <xTaskIncrementTick+0x15c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d349      	bcc.n	8008bc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2e:	4b36      	ldr	r3, [pc, #216]	@ (8008c08 <xTaskIncrementTick+0x150>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b38:	4b36      	ldr	r3, [pc, #216]	@ (8008c14 <xTaskIncrementTick+0x15c>)
 8008b3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b3e:	601a      	str	r2, [r3, #0]
					break;
 8008b40:	e03f      	b.n	8008bc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b42:	4b31      	ldr	r3, [pc, #196]	@ (8008c08 <xTaskIncrementTick+0x150>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d203      	bcs.n	8008b62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008c14 <xTaskIncrementTick+0x15c>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b60:	e02f      	b.n	8008bc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fba2 	bl	80072b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3318      	adds	r3, #24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fb99 	bl	80072b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b82:	4b25      	ldr	r3, [pc, #148]	@ (8008c18 <xTaskIncrementTick+0x160>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d903      	bls.n	8008b92 <xTaskIncrementTick+0xda>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8e:	4a22      	ldr	r2, [pc, #136]	@ (8008c18 <xTaskIncrementTick+0x160>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008c1c <xTaskIncrementTick+0x164>)
 8008ba0:	441a      	add	r2, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4610      	mov	r0, r2
 8008baa:	f7fe fb24 	bl	80071f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c20 <xTaskIncrementTick+0x168>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d3b8      	bcc.n	8008b2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc0:	e7b5      	b.n	8008b2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bc2:	4b17      	ldr	r3, [pc, #92]	@ (8008c20 <xTaskIncrementTick+0x168>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc8:	4914      	ldr	r1, [pc, #80]	@ (8008c1c <xTaskIncrementTick+0x164>)
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d901      	bls.n	8008bde <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bde:	4b11      	ldr	r3, [pc, #68]	@ (8008c24 <xTaskIncrementTick+0x16c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e004      	b.n	8008bf6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bec:	4b0e      	ldr	r3, [pc, #56]	@ (8008c28 <xTaskIncrementTick+0x170>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8008c28 <xTaskIncrementTick+0x170>)
 8008bf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20001128 	.word	0x20001128
 8008c04:	20001104 	.word	0x20001104
 8008c08:	200010b8 	.word	0x200010b8
 8008c0c:	200010bc 	.word	0x200010bc
 8008c10:	20001118 	.word	0x20001118
 8008c14:	20001120 	.word	0x20001120
 8008c18:	20001108 	.word	0x20001108
 8008c1c:	20000c30 	.word	0x20000c30
 8008c20:	20000c2c 	.word	0x20000c2c
 8008c24:	20001114 	.word	0x20001114
 8008c28:	20001110 	.word	0x20001110

08008c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c32:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce0 <vTaskSwitchContext+0xb4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce4 <vTaskSwitchContext+0xb8>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c40:	e047      	b.n	8008cd2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c42:	4b28      	ldr	r3, [pc, #160]	@ (8008ce4 <vTaskSwitchContext+0xb8>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c48:	4b27      	ldr	r3, [pc, #156]	@ (8008ce8 <vTaskSwitchContext+0xbc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e011      	b.n	8008c74 <vTaskSwitchContext+0x48>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <vTaskSwitchContext+0x42>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	607b      	str	r3, [r7, #4]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <vTaskSwitchContext+0x3e>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	491d      	ldr	r1, [pc, #116]	@ (8008cec <vTaskSwitchContext+0xc0>)
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	440b      	add	r3, r1
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0e3      	beq.n	8008c50 <vTaskSwitchContext+0x24>
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <vTaskSwitchContext+0xc0>)
 8008c94:	4413      	add	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d104      	bne.n	8008cb8 <vTaskSwitchContext+0x8c>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf0 <vTaskSwitchContext+0xc4>)
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	4a09      	ldr	r2, [pc, #36]	@ (8008ce8 <vTaskSwitchContext+0xbc>)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cc8:	4b09      	ldr	r3, [pc, #36]	@ (8008cf0 <vTaskSwitchContext+0xc4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3354      	adds	r3, #84	@ 0x54
 8008cce:	4a09      	ldr	r2, [pc, #36]	@ (8008cf4 <vTaskSwitchContext+0xc8>)
 8008cd0:	6013      	str	r3, [r2, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20001128 	.word	0x20001128
 8008ce4:	20001114 	.word	0x20001114
 8008ce8:	20001108 	.word	0x20001108
 8008cec:	20000c30 	.word	0x20000c30
 8008cf0:	20000c2c 	.word	0x20000c2c
 8008cf4:	200002ac 	.word	0x200002ac

08008cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	60fb      	str	r3, [r7, #12]
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	e7fd      	b.n	8008d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <vTaskPlaceOnEventList+0x48>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3318      	adds	r3, #24
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7fe fa88 	bl	800723e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d2e:	2101      	movs	r1, #1
 8008d30:	6838      	ldr	r0, [r7, #0]
 8008d32:	f000 fb97 	bl	8009464 <prvAddCurrentTaskToDelayedList>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000c2c 	.word	0x20000c2c

08008d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	617b      	str	r3, [r7, #20]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3318      	adds	r3, #24
 8008d74:	4619      	mov	r1, r3
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7fe fa3d 	bl	80071f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	68b8      	ldr	r0, [r7, #8]
 8008d8c:	f000 fb6a 	bl	8009464 <prvAddCurrentTaskToDelayedList>
	}
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20000c2c 	.word	0x20000c2c

08008d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60fb      	str	r3, [r7, #12]
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	e7fd      	b.n	8008dc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	3318      	adds	r3, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fa6e 	bl	80072b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e4c <xTaskRemoveFromEventList+0xb0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11d      	bne.n	8008e18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fa65 	bl	80072b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dea:	4b19      	ldr	r3, [pc, #100]	@ (8008e50 <xTaskRemoveFromEventList+0xb4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <xTaskRemoveFromEventList+0x5e>
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	4a16      	ldr	r2, [pc, #88]	@ (8008e50 <xTaskRemoveFromEventList+0xb4>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a13      	ldr	r2, [pc, #76]	@ (8008e54 <xTaskRemoveFromEventList+0xb8>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fe f9f0 	bl	80071f6 <vListInsertEnd>
 8008e16:	e005      	b.n	8008e24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3318      	adds	r3, #24
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	480e      	ldr	r0, [pc, #56]	@ (8008e58 <xTaskRemoveFromEventList+0xbc>)
 8008e20:	f7fe f9e9 	bl	80071f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e28:	4b0c      	ldr	r3, [pc, #48]	@ (8008e5c <xTaskRemoveFromEventList+0xc0>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d905      	bls.n	8008e3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e32:	2301      	movs	r3, #1
 8008e34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e36:	4b0a      	ldr	r3, [pc, #40]	@ (8008e60 <xTaskRemoveFromEventList+0xc4>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e001      	b.n	8008e42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e42:	697b      	ldr	r3, [r7, #20]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20001128 	.word	0x20001128
 8008e50:	20001108 	.word	0x20001108
 8008e54:	20000c30 	.word	0x20000c30
 8008e58:	200010c0 	.word	0x200010c0
 8008e5c:	20000c2c 	.word	0x20000c2c
 8008e60:	20001114 	.word	0x20001114

08008e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <vTaskInternalSetTimeOutState+0x24>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <vTaskInternalSetTimeOutState+0x28>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20001118 	.word	0x20001118
 8008e8c:	20001104 	.word	0x20001104

08008e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	613b      	str	r3, [r7, #16]
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	e7fd      	b.n	8008eb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	60fb      	str	r3, [r7, #12]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ed6:	f000 ffa7 	bl	8009e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eda:	4b1d      	ldr	r3, [pc, #116]	@ (8008f50 <xTaskCheckForTimeOut+0xc0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ef2:	d102      	bne.n	8008efa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e023      	b.n	8008f42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <xTaskCheckForTimeOut+0xc4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d007      	beq.n	8008f16 <xTaskCheckForTimeOut+0x86>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d302      	bcc.n	8008f16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e015      	b.n	8008f42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d20b      	bcs.n	8008f38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff99 	bl	8008e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e004      	b.n	8008f42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f42:	f000 ffa3 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20001104 	.word	0x20001104
 8008f54:	20001118 	.word	0x20001118

08008f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f5c:	4b03      	ldr	r3, [pc, #12]	@ (8008f6c <vTaskMissedYield+0x14>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	bf00      	nop
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20001114 	.word	0x20001114

08008f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f78:	f000 f852 	bl	8009020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f7c:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <prvIdleTask+0x28>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d9f9      	bls.n	8008f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <prvIdleTask+0x2c>)
 8008f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f94:	e7f0      	b.n	8008f78 <prvIdleTask+0x8>
 8008f96:	bf00      	nop
 8008f98:	20000c30 	.word	0x20000c30
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
 8008faa:	e00c      	b.n	8008fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a12      	ldr	r2, [pc, #72]	@ (8009000 <prvInitialiseTaskLists+0x60>)
 8008fb8:	4413      	add	r3, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe f8ee 	bl	800719c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b37      	cmp	r3, #55	@ 0x37
 8008fca:	d9ef      	bls.n	8008fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fcc:	480d      	ldr	r0, [pc, #52]	@ (8009004 <prvInitialiseTaskLists+0x64>)
 8008fce:	f7fe f8e5 	bl	800719c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fd2:	480d      	ldr	r0, [pc, #52]	@ (8009008 <prvInitialiseTaskLists+0x68>)
 8008fd4:	f7fe f8e2 	bl	800719c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fd8:	480c      	ldr	r0, [pc, #48]	@ (800900c <prvInitialiseTaskLists+0x6c>)
 8008fda:	f7fe f8df 	bl	800719c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fde:	480c      	ldr	r0, [pc, #48]	@ (8009010 <prvInitialiseTaskLists+0x70>)
 8008fe0:	f7fe f8dc 	bl	800719c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe4:	480b      	ldr	r0, [pc, #44]	@ (8009014 <prvInitialiseTaskLists+0x74>)
 8008fe6:	f7fe f8d9 	bl	800719c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	@ (8009018 <prvInitialiseTaskLists+0x78>)
 8008fec:	4a05      	ldr	r2, [pc, #20]	@ (8009004 <prvInitialiseTaskLists+0x64>)
 8008fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <prvInitialiseTaskLists+0x7c>)
 8008ff2:	4a05      	ldr	r2, [pc, #20]	@ (8009008 <prvInitialiseTaskLists+0x68>)
 8008ff4:	601a      	str	r2, [r3, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000c30 	.word	0x20000c30
 8009004:	20001090 	.word	0x20001090
 8009008:	200010a4 	.word	0x200010a4
 800900c:	200010c0 	.word	0x200010c0
 8009010:	200010d4 	.word	0x200010d4
 8009014:	200010ec 	.word	0x200010ec
 8009018:	200010b8 	.word	0x200010b8
 800901c:	200010bc 	.word	0x200010bc

08009020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009026:	e019      	b.n	800905c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009028:	f000 fefe 	bl	8009e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902c:	4b10      	ldr	r3, [pc, #64]	@ (8009070 <prvCheckTasksWaitingTermination+0x50>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe f939 	bl	80072b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <prvCheckTasksWaitingTermination+0x54>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	4a0b      	ldr	r2, [pc, #44]	@ (8009074 <prvCheckTasksWaitingTermination+0x54>)
 8009046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009048:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <prvCheckTasksWaitingTermination+0x58>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	4a0a      	ldr	r2, [pc, #40]	@ (8009078 <prvCheckTasksWaitingTermination+0x58>)
 8009050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009052:	f000 ff1b 	bl	8009e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f810 	bl	800907c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800905c:	4b06      	ldr	r3, [pc, #24]	@ (8009078 <prvCheckTasksWaitingTermination+0x58>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e1      	bne.n	8009028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	200010d4 	.word	0x200010d4
 8009074:	20001100 	.word	0x20001100
 8009078:	200010e8 	.word	0x200010e8

0800907c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3354      	adds	r3, #84	@ 0x54
 8009088:	4618      	mov	r0, r3
 800908a:	f018 f811 	bl	80210b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009094:	2b00      	cmp	r3, #0
 8009096:	d108      	bne.n	80090aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909c:	4618      	mov	r0, r3
 800909e:	f001 f8b3 	bl	800a208 <vPortFree>
				vPortFree( pxTCB );
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 f8b0 	bl	800a208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a8:	e019      	b.n	80090de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d103      	bne.n	80090bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f8a7 	bl	800a208 <vPortFree>
	}
 80090ba:	e010      	b.n	80090de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d00b      	beq.n	80090de <prvDeleteTCB+0x62>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <prvDeleteTCB+0x5e>
	}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009120 <prvResetNextTaskUnblockTime+0x38>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <prvResetNextTaskUnblockTime+0x3c>)
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009100:	e008      	b.n	8009114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009102:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <prvResetNextTaskUnblockTime+0x38>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a04      	ldr	r2, [pc, #16]	@ (8009124 <prvResetNextTaskUnblockTime+0x3c>)
 8009112:	6013      	str	r3, [r2, #0]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200010b8 	.word	0x200010b8
 8009124:	20001120 	.word	0x20001120

08009128 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800912e:	4b05      	ldr	r3, [pc, #20]	@ (8009144 <xTaskGetCurrentTaskHandle+0x1c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009134:	687b      	ldr	r3, [r7, #4]
	}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000c2c 	.word	0x20000c2c

08009148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800914e:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <xTaskGetSchedulerState+0x34>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009156:	2301      	movs	r3, #1
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	e008      	b.n	800916e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800915c:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <xTaskGetSchedulerState+0x38>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009164:	2302      	movs	r3, #2
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	e001      	b.n	800916e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800916e:	687b      	ldr	r3, [r7, #4]
	}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	2000110c 	.word	0x2000110c
 8009180:	20001128 	.word	0x20001128

08009184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d051      	beq.n	800923e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919e:	4b2a      	ldr	r3, [pc, #168]	@ (8009248 <xTaskPriorityInherit+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d241      	bcs.n	800922c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	db06      	blt.n	80091be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b0:	4b25      	ldr	r3, [pc, #148]	@ (8009248 <xTaskPriorityInherit+0xc4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6959      	ldr	r1, [r3, #20]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4a1f      	ldr	r2, [pc, #124]	@ (800924c <xTaskPriorityInherit+0xc8>)
 80091d0:	4413      	add	r3, r2
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d122      	bne.n	800921c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe f868 	bl	80072b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091e0:	4b19      	ldr	r3, [pc, #100]	@ (8009248 <xTaskPriorityInherit+0xc4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ee:	4b18      	ldr	r3, [pc, #96]	@ (8009250 <xTaskPriorityInherit+0xcc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d903      	bls.n	80091fe <xTaskPriorityInherit+0x7a>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	4a15      	ldr	r2, [pc, #84]	@ (8009250 <xTaskPriorityInherit+0xcc>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4a10      	ldr	r2, [pc, #64]	@ (800924c <xTaskPriorityInherit+0xc8>)
 800920c:	441a      	add	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fd ffee 	bl	80071f6 <vListInsertEnd>
 800921a:	e004      	b.n	8009226 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <xTaskPriorityInherit+0xc4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009226:	2301      	movs	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e008      	b.n	800923e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009230:	4b05      	ldr	r3, [pc, #20]	@ (8009248 <xTaskPriorityInherit+0xc4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009236:	429a      	cmp	r2, r3
 8009238:	d201      	bcs.n	800923e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800923a:	2301      	movs	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800923e:	68fb      	ldr	r3, [r7, #12]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20000c2c 	.word	0x20000c2c
 800924c:	20000c30 	.word	0x20000c30
 8009250:	20001108 	.word	0x20001108

08009254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d058      	beq.n	800931c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800926a:	4b2f      	ldr	r3, [pc, #188]	@ (8009328 <xTaskPriorityDisinherit+0xd4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	d00b      	beq.n	800928c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	60fb      	str	r3, [r7, #12]
}
 8009286:	bf00      	nop
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60bb      	str	r3, [r7, #8]
}
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b0:	1e5a      	subs	r2, r3, #1
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092be:	429a      	cmp	r2, r3
 80092c0:	d02c      	beq.n	800931c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d128      	bne.n	800931c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd ffee 	bl	80072b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ec:	4b0f      	ldr	r3, [pc, #60]	@ (800932c <xTaskPriorityDisinherit+0xd8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <xTaskPriorityDisinherit+0xa8>
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f8:	4a0c      	ldr	r2, [pc, #48]	@ (800932c <xTaskPriorityDisinherit+0xd8>)
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a09      	ldr	r2, [pc, #36]	@ (8009330 <xTaskPriorityDisinherit+0xdc>)
 800930a:	441a      	add	r2, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f7fd ff6f 	bl	80071f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009318:	2301      	movs	r3, #1
 800931a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800931c:	697b      	ldr	r3, [r7, #20]
	}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000c2c 	.word	0x20000c2c
 800932c:	20001108 	.word	0x20001108
 8009330:	20000c30 	.word	0x20000c30

08009334 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009342:	2301      	movs	r3, #1
 8009344:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d06c      	beq.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10b      	bne.n	800936c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d902      	bls.n	800937c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	e002      	b.n	8009382 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009380:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	429a      	cmp	r2, r3
 800938a:	d04c      	beq.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d147      	bne.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009396:	4b26      	ldr	r3, [pc, #152]	@ (8009430 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	429a      	cmp	r2, r3
 800939e:	d10b      	bne.n	80093b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60bb      	str	r3, [r7, #8]
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	e7fd      	b.n	80093b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db04      	blt.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	6959      	ldr	r1, [r3, #20]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4a13      	ldr	r2, [pc, #76]	@ (8009434 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093e6:	4413      	add	r3, r2
 80093e8:	4299      	cmp	r1, r3
 80093ea:	d11c      	bne.n	8009426 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd ff5d 	bl	80072b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009438 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d903      	bls.n	800940a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	4a0c      	ldr	r2, [pc, #48]	@ (8009438 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4a07      	ldr	r2, [pc, #28]	@ (8009434 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009418:	441a      	add	r2, r3
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fd fee8 	bl	80071f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009426:	bf00      	nop
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000c2c 	.word	0x20000c2c
 8009434:	20000c30 	.word	0x20000c30
 8009438:	20001108 	.word	0x20001108

0800943c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009440:	4b07      	ldr	r3, [pc, #28]	@ (8009460 <pvTaskIncrementMutexHeldCount+0x24>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009448:	4b05      	ldr	r3, [pc, #20]	@ (8009460 <pvTaskIncrementMutexHeldCount+0x24>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800944e:	3201      	adds	r2, #1
 8009450:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009452:	4b03      	ldr	r3, [pc, #12]	@ (8009460 <pvTaskIncrementMutexHeldCount+0x24>)
 8009454:	681b      	ldr	r3, [r3, #0]
	}
 8009456:	4618      	mov	r0, r3
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000c2c 	.word	0x20000c2c

08009464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800946e:	4b21      	ldr	r3, [pc, #132]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009474:	4b20      	ldr	r3, [pc, #128]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3304      	adds	r3, #4
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd ff18 	bl	80072b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009486:	d10a      	bne.n	800949e <prvAddCurrentTaskToDelayedList+0x3a>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948e:	4b1a      	ldr	r3, [pc, #104]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4819      	ldr	r0, [pc, #100]	@ (80094fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009498:	f7fd fead 	bl	80071f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800949c:	e026      	b.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094a6:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d209      	bcs.n	80094ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b6:	4b12      	ldr	r3, [pc, #72]	@ (8009500 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b0f      	ldr	r3, [pc, #60]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fd febb 	bl	800723e <vListInsert>
}
 80094c8:	e010      	b.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fd feb1 	bl	800723e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d202      	bcs.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094e6:	4a08      	ldr	r2, [pc, #32]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6013      	str	r3, [r2, #0]
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20001104 	.word	0x20001104
 80094f8:	20000c2c 	.word	0x20000c2c
 80094fc:	200010ec 	.word	0x200010ec
 8009500:	200010bc 	.word	0x200010bc
 8009504:	200010b8 	.word	0x200010b8
 8009508:	20001120 	.word	0x20001120

0800950c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	@ 0x28
 8009510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009516:	f000 fb13 	bl	8009b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800951a:	4b1d      	ldr	r3, [pc, #116]	@ (8009590 <xTimerCreateTimerTask+0x84>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d021      	beq.n	8009566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800952a:	1d3a      	adds	r2, r7, #4
 800952c:	f107 0108 	add.w	r1, r7, #8
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd fe17 	bl	8007168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	2302      	movs	r3, #2
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	2300      	movs	r3, #0
 800954a:	460a      	mov	r2, r1
 800954c:	4911      	ldr	r1, [pc, #68]	@ (8009594 <xTimerCreateTimerTask+0x88>)
 800954e:	4812      	ldr	r0, [pc, #72]	@ (8009598 <xTimerCreateTimerTask+0x8c>)
 8009550:	f7fe ff92 	bl	8008478 <xTaskCreateStatic>
 8009554:	4603      	mov	r3, r0
 8009556:	4a11      	ldr	r2, [pc, #68]	@ (800959c <xTimerCreateTimerTask+0x90>)
 8009558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800955a:	4b10      	ldr	r3, [pc, #64]	@ (800959c <xTimerCreateTimerTask+0x90>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009562:	2301      	movs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	613b      	str	r3, [r7, #16]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2000115c 	.word	0x2000115c
 8009594:	08023b94 	.word	0x08023b94
 8009598:	080096d9 	.word	0x080096d9
 800959c:	20001160 	.word	0x20001160

080095a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	@ 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095d0:	4b19      	ldr	r3, [pc, #100]	@ (8009638 <xTimerGenericCommand+0x98>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d02a      	beq.n	800962e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	dc18      	bgt.n	800961c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095ea:	f7ff fdad 	bl	8009148 <xTaskGetSchedulerState>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d109      	bne.n	8009608 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095f4:	4b10      	ldr	r3, [pc, #64]	@ (8009638 <xTimerGenericCommand+0x98>)
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	f107 0110 	add.w	r1, r7, #16
 80095fc:	2300      	movs	r3, #0
 80095fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009600:	f7fe f87e 	bl	8007700 <xQueueGenericSend>
 8009604:	6278      	str	r0, [r7, #36]	@ 0x24
 8009606:	e012      	b.n	800962e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009608:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <xTimerGenericCommand+0x98>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	f107 0110 	add.w	r1, r7, #16
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	f7fe f874 	bl	8007700 <xQueueGenericSend>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24
 800961a:	e008      	b.n	800962e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800961c:	4b06      	ldr	r3, [pc, #24]	@ (8009638 <xTimerGenericCommand+0x98>)
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	f107 0110 	add.w	r1, r7, #16
 8009624:	2300      	movs	r3, #0
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	f7fe f96c 	bl	8007904 <xQueueGenericSendFromISR>
 800962c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009630:	4618      	mov	r0, r3
 8009632:	3728      	adds	r7, #40	@ 0x28
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	2000115c 	.word	0x2000115c

0800963c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009646:	4b23      	ldr	r3, [pc, #140]	@ (80096d4 <prvProcessExpiredTimer+0x98>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fd fe2b 	bl	80072b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d023      	beq.n	80096b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	18d1      	adds	r1, r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	6978      	ldr	r0, [r7, #20]
 8009676:	f000 f8d5 	bl	8009824 <prvInsertTimerInActiveList>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d020      	beq.n	80096c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009680:	2300      	movs	r3, #0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	f7ff ff88 	bl	80095a0 <xTimerGenericCommand>
 8009690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d114      	bne.n	80096c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60fb      	str	r3, [r7, #12]
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b6:	f023 0301 	bic.w	r3, r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	4798      	blx	r3
}
 80096ca:	bf00      	nop
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20001154 	.word	0x20001154

080096d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f859 	bl	800979c <prvGetNextExpireTime>
 80096ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f805 	bl	8009700 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096f6:	f000 f8d7 	bl	80098a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096fa:	bf00      	nop
 80096fc:	e7f0      	b.n	80096e0 <prvTimerTask+0x8>
	...

08009700 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800970a:	f7ff f919 	bl	8008940 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f866 	bl	80097e4 <prvSampleTimeNow>
 8009718:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d130      	bne.n	8009782 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <prvProcessTimerOrBlockTask+0x3c>
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	429a      	cmp	r2, r3
 800972c:	d806      	bhi.n	800973c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800972e:	f7ff f915 	bl	800895c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009732:	68f9      	ldr	r1, [r7, #12]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ff81 	bl	800963c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800973a:	e024      	b.n	8009786 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d008      	beq.n	8009754 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009742:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <prvProcessTimerOrBlockTask+0x90>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <prvProcessTimerOrBlockTask+0x50>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <prvProcessTimerOrBlockTask+0x52>
 8009750:	2300      	movs	r3, #0
 8009752:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <prvProcessTimerOrBlockTask+0x94>)
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	f7fe fe55 	bl	8008410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009766:	f7ff f8f9 	bl	800895c <xTaskResumeAll>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009770:	4b09      	ldr	r3, [pc, #36]	@ (8009798 <prvProcessTimerOrBlockTask+0x98>)
 8009772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
}
 8009780:	e001      	b.n	8009786 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009782:	f7ff f8eb 	bl	800895c <xTaskResumeAll>
}
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20001158 	.word	0x20001158
 8009794:	2000115c 	.word	0x2000115c
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097a4:	4b0e      	ldr	r3, [pc, #56]	@ (80097e0 <prvGetNextExpireTime+0x44>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <prvGetNextExpireTime+0x16>
 80097ae:	2201      	movs	r2, #1
 80097b0:	e000      	b.n	80097b4 <prvGetNextExpireTime+0x18>
 80097b2:	2200      	movs	r2, #0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <prvGetNextExpireTime+0x44>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e001      	b.n	80097d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097d0:	68fb      	ldr	r3, [r7, #12]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	20001154 	.word	0x20001154

080097e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097ec:	f7ff f954 	bl	8008a98 <xTaskGetTickCount>
 80097f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <prvSampleTimeNow+0x3c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d205      	bcs.n	8009808 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097fc:	f000 f93a 	bl	8009a74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	e002      	b.n	800980e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800980e:	4a04      	ldr	r2, [pc, #16]	@ (8009820 <prvSampleTimeNow+0x3c>)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009814:	68fb      	ldr	r3, [r7, #12]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20001164 	.word	0x20001164

08009824 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d812      	bhi.n	8009870 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	429a      	cmp	r2, r3
 8009856:	d302      	bcc.n	800985e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e01b      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800985e:	4b10      	ldr	r3, [pc, #64]	@ (80098a0 <prvInsertTimerInActiveList+0x7c>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fd fce8 	bl	800723e <vListInsert>
 800986e:	e012      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d206      	bcs.n	8009886 <prvInsertTimerInActiveList+0x62>
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d302      	bcc.n	8009886 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	e007      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009886:	4b07      	ldr	r3, [pc, #28]	@ (80098a4 <prvInsertTimerInActiveList+0x80>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3304      	adds	r3, #4
 800988e:	4619      	mov	r1, r3
 8009890:	4610      	mov	r0, r2
 8009892:	f7fd fcd4 	bl	800723e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009896:	697b      	ldr	r3, [r7, #20]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20001158 	.word	0x20001158
 80098a4:	20001154 	.word	0x20001154

080098a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	@ 0x38
 80098ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ae:	e0ce      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da19      	bge.n	80098ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098b6:	1d3b      	adds	r3, r7, #4
 80098b8:	3304      	adds	r3, #4
 80098ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10b      	bne.n	80098da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	61fb      	str	r3, [r7, #28]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e0:	6850      	ldr	r0, [r2, #4]
 80098e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e4:	6892      	ldr	r2, [r2, #8]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f2c0 80ae 	blt.w	8009a4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7fd fcd4 	bl	80072b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009908:	463b      	mov	r3, r7
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff ff6a 	bl	80097e4 <prvSampleTimeNow>
 8009910:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b09      	cmp	r3, #9
 8009916:	f200 8097 	bhi.w	8009a48 <prvProcessReceivedCommands+0x1a0>
 800991a:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <prvProcessReceivedCommands+0x78>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009949 	.word	0x08009949
 8009924:	08009949 	.word	0x08009949
 8009928:	08009949 	.word	0x08009949
 800992c:	080099bf 	.word	0x080099bf
 8009930:	080099d3 	.word	0x080099d3
 8009934:	08009a1f 	.word	0x08009a1f
 8009938:	08009949 	.word	0x08009949
 800993c:	08009949 	.word	0x08009949
 8009940:	080099bf 	.word	0x080099bf
 8009944:	080099d3 	.word	0x080099d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	18d1      	adds	r1, r2, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009968:	f7ff ff5c 	bl	8009824 <prvInsertTimerInActiveList>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d06c      	beq.n	8009a4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800997a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d061      	beq.n	8009a4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	441a      	add	r2, r3
 8009990:	2300      	movs	r3, #0
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	2100      	movs	r1, #0
 8009998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800999a:	f7ff fe01 	bl	80095a0 <xTimerGenericCommand>
 800999e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d152      	bne.n	8009a4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	61bb      	str	r3, [r7, #24]
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099d0:	e03d      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	617b      	str	r3, [r7, #20]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	18d1      	adds	r1, r2, r3
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a18:	f7ff ff04 	bl	8009824 <prvInsertTimerInActiveList>
					break;
 8009a1c:	e017      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d103      	bne.n	8009a34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a2e:	f000 fbeb 	bl	800a208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a32:	e00c      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a3a:	f023 0301 	bic.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a46:	e002      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a48:	bf00      	nop
 8009a4a:	e000      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
					break;
 8009a4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4e:	4b08      	ldr	r3, [pc, #32]	@ (8009a70 <prvProcessReceivedCommands+0x1c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1d39      	adds	r1, r7, #4
 8009a54:	2200      	movs	r2, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fd fff2 	bl	8007a40 <xQueueReceive>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f af26 	bne.w	80098b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	3730      	adds	r7, #48	@ 0x30
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	2000115c 	.word	0x2000115c

08009a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a7a:	e049      	b.n	8009b10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a86:	4b2c      	ldr	r3, [pc, #176]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fc0b 	bl	80072b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02f      	beq.n	8009b10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d90e      	bls.n	8009ae0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ace:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7fd fbb0 	bl	800723e <vListInsert>
 8009ade:	e017      	b.n	8009b10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fd58 	bl	80095a0 <xTimerGenericCommand>
 8009af0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	603b      	str	r3, [r7, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b10:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1b0      	bne.n	8009a7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b1a:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b20:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <prvSwitchTimerLists+0xc8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b28:	4a04      	ldr	r2, [pc, #16]	@ (8009b3c <prvSwitchTimerLists+0xc8>)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6013      	str	r3, [r2, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20001154 	.word	0x20001154
 8009b3c:	20001158 	.word	0x20001158

08009b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b46:	f000 f96f 	bl	8009e28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b4a:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d120      	bne.n	8009b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b52:	4814      	ldr	r0, [pc, #80]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b54:	f7fd fb22 	bl	800719c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b58:	4813      	ldr	r0, [pc, #76]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b5a:	f7fd fb1f 	bl	800719c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <prvCheckForValidListAndQueue+0x6c>)
 8009b60:	4a10      	ldr	r2, [pc, #64]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <prvCheckForValidListAndQueue+0x70>)
 8009b66:	4a10      	ldr	r2, [pc, #64]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <prvCheckForValidListAndQueue+0x74>)
 8009b70:	4a11      	ldr	r2, [pc, #68]	@ (8009bb8 <prvCheckForValidListAndQueue+0x78>)
 8009b72:	2110      	movs	r1, #16
 8009b74:	200a      	movs	r0, #10
 8009b76:	f7fd fc2f 	bl	80073d8 <xQueueGenericCreateStatic>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4a08      	ldr	r2, [pc, #32]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b80:	4b07      	ldr	r3, [pc, #28]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	490b      	ldr	r1, [pc, #44]	@ (8009bbc <prvCheckForValidListAndQueue+0x7c>)
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fc14 	bl	80083bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b94:	f000 f97a 	bl	8009e8c <vPortExitCritical>
}
 8009b98:	bf00      	nop
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000115c 	.word	0x2000115c
 8009ba4:	2000112c 	.word	0x2000112c
 8009ba8:	20001140 	.word	0x20001140
 8009bac:	20001154 	.word	0x20001154
 8009bb0:	20001158 	.word	0x20001158
 8009bb4:	20001208 	.word	0x20001208
 8009bb8:	20001168 	.word	0x20001168
 8009bbc:	08023b9c 	.word	0x08023b9c

08009bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3b04      	subs	r3, #4
 8009bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3b04      	subs	r3, #4
 8009bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0201 	bic.w	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8009c24 <pxPortInitialiseStack+0x64>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b14      	subs	r3, #20
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f06f 0202 	mvn.w	r2, #2
 8009c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3b20      	subs	r3, #32
 8009c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c16:	68fb      	ldr	r3, [r7, #12]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	08009c29 	.word	0x08009c29

08009c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c32:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <prvTaskExitError+0x58>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c3a:	d00b      	beq.n	8009c54 <prvTaskExitError+0x2c>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	60fb      	str	r3, [r7, #12]
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	e7fd      	b.n	8009c50 <prvTaskExitError+0x28>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	60bb      	str	r3, [r7, #8]
}
 8009c66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c68:	bf00      	nop
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0fc      	beq.n	8009c6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	20000074 	.word	0x20000074
	...

08009c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <pxCurrentTCBConst2>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	6808      	ldr	r0, [r1, #0]
 8009c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f380 8809 	msr	PSP, r0
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	4770      	bx	lr
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst2>:
 8009cb0:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cb8:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <prvPortStartFirstTask+0x24>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f380 8808 	msr	MSP, r0
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8814 	msr	CONTROL, r0
 8009cca:	b662      	cpsie	i
 8009ccc:	b661      	cpsie	f
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	df00      	svc	0
 8009cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cda:	bf00      	nop
 8009cdc:	e000ed08 	.word	0xe000ed08

08009ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ce6:	4b47      	ldr	r3, [pc, #284]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a47      	ldr	r2, [pc, #284]	@ (8009e08 <xPortStartScheduler+0x128>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10b      	bne.n	8009d08 <xPortStartScheduler+0x28>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	613b      	str	r3, [r7, #16]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d08:	4b3e      	ldr	r3, [pc, #248]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009e0c <xPortStartScheduler+0x12c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d10b      	bne.n	8009d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60fb      	str	r3, [r7, #12]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d2a:	4b39      	ldr	r3, [pc, #228]	@ (8009e10 <xPortStartScheduler+0x130>)
 8009d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	22ff      	movs	r2, #255	@ 0xff
 8009d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b31      	ldr	r3, [pc, #196]	@ (8009e14 <xPortStartScheduler+0x134>)
 8009d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d52:	4b31      	ldr	r3, [pc, #196]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d54:	2207      	movs	r2, #7
 8009d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d58:	e009      	b.n	8009d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	4a2d      	ldr	r2, [pc, #180]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d76:	2b80      	cmp	r3, #128	@ 0x80
 8009d78:	d0ef      	beq.n	8009d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d7a:	4b27      	ldr	r3, [pc, #156]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f1c3 0307 	rsb	r3, r3, #7
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d00b      	beq.n	8009d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009da8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009db0:	4a19      	ldr	r2, [pc, #100]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dbc:	4b17      	ldr	r3, [pc, #92]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dc8:	4b14      	ldr	r3, [pc, #80]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a13      	ldr	r2, [pc, #76]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dd4:	f000 f8da 	bl	8009f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dd8:	4b11      	ldr	r3, [pc, #68]	@ (8009e20 <xPortStartScheduler+0x140>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dde:	f000 f8f9 	bl	8009fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dee:	f7ff ff63 	bl	8009cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009df2:	f7fe ff1b 	bl	8008c2c <vTaskSwitchContext>
	prvTaskExitError();
 8009df6:	f7ff ff17 	bl	8009c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed00 	.word	0xe000ed00
 8009e08:	410fc271 	.word	0x410fc271
 8009e0c:	410fc270 	.word	0x410fc270
 8009e10:	e000e400 	.word	0xe000e400
 8009e14:	20001258 	.word	0x20001258
 8009e18:	2000125c 	.word	0x2000125c
 8009e1c:	e000ed20 	.word	0xe000ed20
 8009e20:	20000074 	.word	0x20000074
 8009e24:	e000ef34 	.word	0xe000ef34

08009e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	607b      	str	r3, [r7, #4]
}
 8009e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e42:	4b10      	ldr	r3, [pc, #64]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a0e      	ldr	r2, [pc, #56]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d110      	bne.n	8009e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e54:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <vPortEnterCritical+0x60>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00b      	beq.n	8009e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	603b      	str	r3, [r7, #0]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <vPortEnterCritical+0x4a>
	}
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000074 	.word	0x20000074
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <vPortExitCritical+0x50>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <vPortExitCritical+0x26>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <vPortExitCritical+0x50>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <vPortExitCritical+0x50>)
 8009eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ebc:	4b07      	ldr	r3, [pc, #28]	@ (8009edc <vPortExitCritical+0x50>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d105      	bne.n	8009ed0 <vPortExitCritical+0x44>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20000074 	.word	0x20000074

08009ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ee0:	f3ef 8009 	mrs	r0, PSP
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4b15      	ldr	r3, [pc, #84]	@ (8009f40 <pxCurrentTCBConst>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	f01e 0f10 	tst.w	lr, #16
 8009ef0:	bf08      	it	eq
 8009ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f04:	f380 8811 	msr	BASEPRI, r0
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f7fe fe8c 	bl	8008c2c <vTaskSwitchContext>
 8009f14:	f04f 0000 	mov.w	r0, #0
 8009f18:	f380 8811 	msr	BASEPRI, r0
 8009f1c:	bc09      	pop	{r0, r3}
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	6808      	ldr	r0, [r1, #0]
 8009f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f26:	f01e 0f10 	tst.w	lr, #16
 8009f2a:	bf08      	it	eq
 8009f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f30:	f380 8809 	msr	PSP, r0
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w

08009f40 <pxCurrentTCBConst>:
 8009f40:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f62:	f7fe fda9 	bl	8008ab8 <xTaskIncrementTick>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <xPortSysTickHandler+0x40>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f96:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <vPortSetupTimerInterrupt+0x38>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc8 <vPortSetupTimerInterrupt+0x3c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8009fcc <vPortSetupTimerInterrupt+0x40>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	4a09      	ldr	r2, [pc, #36]	@ (8009fd0 <vPortSetupTimerInterrupt+0x44>)
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fae:	4b04      	ldr	r3, [pc, #16]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	e000e010 	.word	0xe000e010
 8009fc4:	e000e018 	.word	0xe000e018
 8009fc8:	20000000 	.word	0x20000000
 8009fcc:	10624dd3 	.word	0x10624dd3
 8009fd0:	e000e014 	.word	0xe000e014

08009fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fe4 <vPortEnableVFP+0x10>
 8009fd8:	6801      	ldr	r1, [r0, #0]
 8009fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fde:	6001      	str	r1, [r0, #0]
 8009fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fe2:	bf00      	nop
 8009fe4:	e000ed88 	.word	0xe000ed88

08009fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fee:	f3ef 8305 	mrs	r3, IPSR
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b0f      	cmp	r3, #15
 8009ff8:	d915      	bls.n	800a026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ffa:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <vPortValidateInterruptPriority+0x74>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a004:	4b16      	ldr	r3, [pc, #88]	@ (800a060 <vPortValidateInterruptPriority+0x78>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	7afa      	ldrb	r2, [r7, #11]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d20b      	bcs.n	800a026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	e7fd      	b.n	800a022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a026:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <vPortValidateInterruptPriority+0x7c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a02e:	4b0e      	ldr	r3, [pc, #56]	@ (800a068 <vPortValidateInterruptPriority+0x80>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d90b      	bls.n	800a04e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	603b      	str	r3, [r7, #0]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <vPortValidateInterruptPriority+0x62>
	}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	e000e3f0 	.word	0xe000e3f0
 800a060:	20001258 	.word	0x20001258
 800a064:	e000ed0c 	.word	0xe000ed0c
 800a068:	2000125c 	.word	0x2000125c

0800a06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	@ 0x28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a078:	f7fe fc62 	bl	8008940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a07c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a084:	f000 f924 	bl	800a2d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a088:	4b5a      	ldr	r3, [pc, #360]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 8095 	bne.w	800a1c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01e      	beq.n	800a0da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a09c:	2208      	movs	r2, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d015      	beq.n	800a0da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <pvPortMalloc+0x6e>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	e7fd      	b.n	800a0d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d06f      	beq.n	800a1c0 <pvPortMalloc+0x154>
 800a0e0:	4b45      	ldr	r3, [pc, #276]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d86a      	bhi.n	800a1c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ea:	4b44      	ldr	r3, [pc, #272]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ee:	4b43      	ldr	r3, [pc, #268]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f4:	e004      	b.n	800a100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d903      	bls.n	800a112 <pvPortMalloc+0xa6>
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f1      	bne.n	800a0f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a112:	4b37      	ldr	r3, [pc, #220]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a118:	429a      	cmp	r2, r3
 800a11a:	d051      	beq.n	800a1c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2208      	movs	r2, #8
 800a122:	4413      	add	r3, r2
 800a124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	2308      	movs	r3, #8
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d920      	bls.n	800a180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4413      	add	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <pvPortMalloc+0xfc>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a17a:	69b8      	ldr	r0, [r7, #24]
 800a17c:	f000 f90c 	bl	800a398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a180:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a18c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <pvPortMalloc+0x194>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d203      	bcs.n	800a1a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a19a:	4b17      	ldr	r3, [pc, #92]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a18      	ldr	r2, [pc, #96]	@ (800a200 <pvPortMalloc+0x194>)
 800a1a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <pvPortMalloc+0x198>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	4a11      	ldr	r2, [pc, #68]	@ (800a204 <pvPortMalloc+0x198>)
 800a1be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1c0:	f7fe fbcc 	bl	800895c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3728      	adds	r7, #40	@ 0x28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	20017360 	.word	0x20017360
 800a1f4:	20017374 	.word	0x20017374
 800a1f8:	20017364 	.word	0x20017364
 800a1fc:	20017358 	.word	0x20017358
 800a200:	20017368 	.word	0x20017368
 800a204:	2001736c 	.word	0x2001736c

0800a208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d04f      	beq.n	800a2ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a21a:	2308      	movs	r3, #8
 800a21c:	425b      	negs	r3, r3
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b25      	ldr	r3, [pc, #148]	@ (800a2c4 <vPortFree+0xbc>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4013      	ands	r3, r2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <vPortFree+0x46>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60fb      	str	r3, [r7, #12]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <vPortFree+0x66>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60bb      	str	r3, [r7, #8]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <vPortFree+0xbc>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4013      	ands	r3, r2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01e      	beq.n	800a2ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11a      	bne.n	800a2ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <vPortFree+0xbc>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a294:	f7fe fb54 	bl	8008940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <vPortFree+0xc0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4a09      	ldr	r2, [pc, #36]	@ (800a2c8 <vPortFree+0xc0>)
 800a2a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2a6:	6938      	ldr	r0, [r7, #16]
 800a2a8:	f000 f876 	bl	800a398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2ac:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <vPortFree+0xc4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a06      	ldr	r2, [pc, #24]	@ (800a2cc <vPortFree+0xc4>)
 800a2b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2b6:	f7fe fb51 	bl	800895c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20017374 	.word	0x20017374
 800a2c8:	20017364 	.word	0x20017364
 800a2cc:	20017370 	.word	0x20017370

0800a2d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2d6:	4b29      	ldr	r3, [pc, #164]	@ (800a37c <prvHeapInit+0xac>)
 800a2d8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2da:	4b29      	ldr	r3, [pc, #164]	@ (800a380 <prvHeapInit+0xb0>)
 800a2dc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00c      	beq.n	800a302 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f023 0307 	bic.w	r3, r3, #7
 800a2f4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	4a20      	ldr	r2, [pc, #128]	@ (800a380 <prvHeapInit+0xb0>)
 800a2fe:	4413      	add	r3, r2
 800a300:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a306:	4a1f      	ldr	r2, [pc, #124]	@ (800a384 <prvHeapInit+0xb4>)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a30c:	4b1d      	ldr	r3, [pc, #116]	@ (800a384 <prvHeapInit+0xb4>)
 800a30e:	2200      	movs	r2, #0
 800a310:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	4413      	add	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a31a:	2208      	movs	r2, #8
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f023 0307 	bic.w	r3, r3, #7
 800a328:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4a16      	ldr	r2, [pc, #88]	@ (800a388 <prvHeapInit+0xb8>)
 800a32e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a330:	4b15      	ldr	r3, [pc, #84]	@ (800a388 <prvHeapInit+0xb8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2200      	movs	r2, #0
 800a336:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a338:	4b13      	ldr	r3, [pc, #76]	@ (800a388 <prvHeapInit+0xb8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a34e:	4b0e      	ldr	r3, [pc, #56]	@ (800a388 <prvHeapInit+0xb8>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4a0c      	ldr	r2, [pc, #48]	@ (800a38c <prvHeapInit+0xbc>)
 800a35c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4a0b      	ldr	r2, [pc, #44]	@ (800a390 <prvHeapInit+0xc0>)
 800a364:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a366:	4b0b      	ldr	r3, [pc, #44]	@ (800a394 <prvHeapInit+0xc4>)
 800a368:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a36c:	601a      	str	r2, [r3, #0]
}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	000160f8 	.word	0x000160f8
 800a380:	20001260 	.word	0x20001260
 800a384:	20017358 	.word	0x20017358
 800a388:	20017360 	.word	0x20017360
 800a38c:	20017368 	.word	0x20017368
 800a390:	20017364 	.word	0x20017364
 800a394:	20017374 	.word	0x20017374

0800a398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3a0:	4b28      	ldr	r3, [pc, #160]	@ (800a444 <prvInsertBlockIntoFreeList+0xac>)
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	e002      	b.n	800a3ac <prvInsertBlockIntoFreeList+0x14>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d8f7      	bhi.n	800a3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d108      	bne.n	800a3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d118      	bne.n	800a420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b15      	ldr	r3, [pc, #84]	@ (800a448 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d00d      	beq.n	800a416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	441a      	add	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e008      	b.n	800a428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a416:	4b0c      	ldr	r3, [pc, #48]	@ (800a448 <prvInsertBlockIntoFreeList+0xb0>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	e003      	b.n	800a428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d002      	beq.n	800a436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20017358 	.word	0x20017358
 800a448:	20017360 	.word	0x20017360

0800a44c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a460:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800a462:	f7fe fa6d 	bl	8008940 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800a466:	4b22      	ldr	r3, [pc, #136]	@ (800a4f0 <vPortGetHeapStats+0xa4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01a      	beq.n	800a4a8 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	3301      	adds	r3, #1
 800a476:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d202      	bcs.n	800a488 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d902      	bls.n	800a498 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800a49e:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <vPortGetHeapStats+0xa8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d1e4      	bne.n	800a472 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800a4a8:	f7fe fa58 	bl	800895c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800a4be:	f7ff fcb3 	bl	8009e28 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <vPortGetHeapStats+0xac>)
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <vPortGetHeapStats+0xb0>)
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a500 <vPortGetHeapStats+0xb4>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800a4da:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <vPortGetHeapStats+0xb8>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800a4e2:	f7ff fcd3 	bl	8009e8c <vPortExitCritical>
}
 800a4e6:	bf00      	nop
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20017358 	.word	0x20017358
 800a4f4:	20017360 	.word	0x20017360
 800a4f8:	20017364 	.word	0x20017364
 800a4fc:	2001736c 	.word	0x2001736c
 800a500:	20017370 	.word	0x20017370
 800a504:	20017368 	.word	0x20017368

0800a508 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	fb02 f303 	mul.w	r3, r2, r3
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fda6 	bl	800a06c <pvPortMalloc>
 800a520:	4603      	mov	r3, r0
 800a522:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d008      	beq.n	800a53c <mg_calloc+0x34>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	fb02 f303 	mul.w	r3, r2, r3
 800a532:	461a      	mov	r2, r3
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f016 fda2 	bl	8021080 <memset>
  return p;
 800a53c:	68fb      	ldr	r3, [r7, #12]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b0c6      	sub	sp, #280	@ 0x118
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a556:	6018      	str	r0, [r3, #0]
 800a558:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a55c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a560:	6019      	str	r1, [r3, #0]
 800a562:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a566:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a56a:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 800a56c:	f107 0210 	add.w	r2, r7, #16
 800a570:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a574:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a578:	6819      	ldr	r1, [r3, #0]
 800a57a:	481d      	ldr	r0, [pc, #116]	@ (800a5f0 <mg_fs_lfs_status+0xa8>)
 800a57c:	f007 ff3a 	bl	80123f4 <lfs_stat>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d12e      	bne.n	800a5e4 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 800a586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a58a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <mg_fs_lfs_status+0x62>
 800a594:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a5a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 800a5aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a5ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00a      	beq.n	800a5ce <mg_fs_lfs_status+0x86>
 800a5b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a5bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a5c0:	6819      	ldr	r1, [r3, #0]
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 800a5ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d101      	bne.n	800a5e0 <mg_fs_lfs_status+0x98>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	e002      	b.n	800a5e6 <mg_fs_lfs_status+0x9e>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e000      	b.n	800a5e6 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20017378 	.word	0x20017378

0800a5f4 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b0d4      	sub	sp, #336	@ 0x150
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a602:	6018      	str	r0, [r3, #0]
 800a604:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a608:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a60c:	6019      	str	r1, [r3, #0]
 800a60e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a612:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800a616:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 800a618:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a61c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a620:	f107 0114 	add.w	r1, r7, #20
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4816      	ldr	r0, [pc, #88]	@ (800a680 <mg_fs_lfs_list+0x8c>)
 800a628:	f008 f89c 	bl	8012764 <lfs_dir_open>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d120      	bne.n	800a674 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800a632:	e00e      	b.n	800a652 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 800a634:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a638:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800a63c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a640:	f103 0008 	add.w	r0, r3, #8
 800a644:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a648:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6811      	ldr	r1, [r2, #0]
 800a650:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800a652:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a656:	f107 0314 	add.w	r3, r7, #20
 800a65a:	4619      	mov	r1, r3
 800a65c:	4808      	ldr	r0, [pc, #32]	@ (800a680 <mg_fs_lfs_list+0x8c>)
 800a65e:	f008 f8e2 	bl	8012826 <lfs_dir_read>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	dce5      	bgt.n	800a634 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 800a668:	f107 0314 	add.w	r3, r7, #20
 800a66c:	4619      	mov	r1, r3
 800a66e:	4804      	ldr	r0, [pc, #16]	@ (800a680 <mg_fs_lfs_list+0x8c>)
 800a670:	f008 f8b6 	bl	80127e0 <lfs_dir_close>
    }
}
 800a674:	bf00      	nop
 800a676:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20017378 	.word	0x20017378

0800a684 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 800a68e:	2054      	movs	r0, #84	@ 0x54
 800a690:	f7ff fcec 	bl	800a06c <pvPortMalloc>
 800a694:	4603      	mov	r3, r0
 800a696:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <mg_fs_lfs_open+0x1e>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e024      	b.n	800a6ec <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <mg_fs_lfs_open+0x34>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f003 0302 	and.w	r3, r3, #2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <mg_fs_lfs_open+0x4a>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 800a6c8:	f043 0302 	orr.w	r3, r3, #2
 800a6cc:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	4807      	ldr	r0, [pc, #28]	@ (800a6f4 <mg_fs_lfs_open+0x70>)
 800a6d6:	f007 feb3 	bl	8012440 <lfs_file_open>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da04      	bge.n	800a6ea <mg_fs_lfs_open+0x66>
        free(fd);
 800a6e0:	68b8      	ldr	r0, [r7, #8]
 800a6e2:	f7ff fd91 	bl	800a208 <vPortFree>
        return NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e000      	b.n	800a6ec <mg_fs_lfs_open+0x68>
    }
    return fd;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20017378 	.word	0x20017378

0800a6f8 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4619      	mov	r1, r3
 800a708:	4804      	ldr	r0, [pc, #16]	@ (800a71c <mg_fs_lfs_close+0x24>)
 800a70a:	f007 fed9 	bl	80124c0 <lfs_file_close>
    free(file);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fd7a 	bl	800a208 <vPortFree>
}
 800a714:	bf00      	nop
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	20017378 	.word	0x20017378

0800a720 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 800a730:	6979      	ldr	r1, [r7, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	4805      	ldr	r0, [pc, #20]	@ (800a74c <mg_fs_lfs_read+0x2c>)
 800a738:	f007 fefc 	bl	8012534 <lfs_file_read>
 800a73c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20017378 	.word	0x20017378

0800a750 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 800a760:	6979      	ldr	r1, [r7, #20]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	4805      	ldr	r0, [pc, #20]	@ (800a77c <mg_fs_lfs_write+0x2c>)
 800a768:	f007 ff22 	bl	80125b0 <lfs_file_write>
 800a76c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20017378 	.word	0x20017378

0800a780 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	2300      	movs	r3, #0
 800a794:	480c      	ldr	r0, [pc, #48]	@ (800a7c8 <mg_fs_lfs_seek+0x48>)
 800a796:	f007 ff49 	bl	801262c <lfs_file_seek>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	da02      	bge.n	800a7a6 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7a4:	e00c      	b.n	800a7c0 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4807      	ldr	r0, [pc, #28]	@ (800a7c8 <mg_fs_lfs_seek+0x48>)
 800a7ac:	f007 ff7c 	bl	80126a8 <lfs_file_tell>
 800a7b0:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da02      	bge.n	800a7be <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 800a7b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7bc:	e000      	b.n	800a7c0 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 800a7be:	68bb      	ldr	r3, [r7, #8]

}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20017378 	.word	0x20017378

0800a7cc <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4806      	ldr	r0, [pc, #24]	@ (800a7f4 <mg_fs_lfs_rename+0x28>)
 800a7dc:	f007 fde5 	bl	80123aa <lfs_rename>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf0c      	ite	eq
 800a7e6:	2301      	moveq	r3, #1
 800a7e8:	2300      	movne	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20017378 	.word	0x20017378

0800a7f8 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	4806      	ldr	r0, [pc, #24]	@ (800a81c <mg_fs_lfs_remove+0x24>)
 800a804:	f007 fdae 	bl	8012364 <lfs_remove>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bf0c      	ite	eq
 800a80e:	2301      	moveq	r3, #1
 800a810:	2300      	movne	r3, #0
 800a812:	b2db      	uxtb	r3, r3
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20017378 	.word	0x20017378

0800a820 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	4806      	ldr	r0, [pc, #24]	@ (800a844 <mg_fs_lfs_mkdir+0x24>)
 800a82c:	f007 ff76 	bl	801271c <lfs_mkdir>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	bf0c      	ite	eq
 800a836:	2301      	moveq	r3, #1
 800a838:	2300      	movne	r3, #0
 800a83a:	b2db      	uxtb	r3, r3
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20017378 	.word	0x20017378

0800a848 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08a      	sub	sp, #40	@ 0x28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	4618      	mov	r0, r3
 800a858:	f7f9 fdec 	bl	8004434 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <lfs_fs_ll_init+0x20>
 800a862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a866:	e064      	b.n	800a932 <lfs_fs_ll_init+0xea>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 800a868:	8afb      	ldrh	r3, [r7, #22]
 800a86a:	4619      	mov	r1, r3
 800a86c:	2001      	movs	r0, #1
 800a86e:	f7ff fe4b 	bl	800a508 <mg_calloc>
 800a872:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 800a874:	8afb      	ldrh	r3, [r7, #22]
 800a876:	4619      	mov	r1, r3
 800a878:	2001      	movs	r0, #1
 800a87a:	f7ff fe45 	bl	800a508 <mg_calloc>
 800a87e:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 800a880:	8afb      	ldrh	r3, [r7, #22]
 800a882:	4619      	mov	r1, r3
 800a884:	2001      	movs	r0, #1
 800a886:	f7ff fe3f 	bl	800a508 <mg_calloc>
 800a88a:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d108      	bne.n	800a8a4 <lfs_fs_ll_init+0x5c>
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d105      	bne.n	800a8a4 <lfs_fs_ll_init+0x5c>
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d102      	bne.n	800a8a4 <lfs_fs_ll_init+0x5c>
		return -2;
 800a89e:	f06f 0301 	mvn.w	r3, #1
 800a8a2:	e046      	b.n	800a932 <lfs_fs_ll_init+0xea>
	}

	cfg.read_size         = flash_info.read_size;
 800a8a4:	8a3b      	ldrh	r3, [r7, #16]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b24      	ldr	r3, [pc, #144]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8aa:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 800a8ac:	8a7b      	ldrh	r3, [r7, #18]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4b22      	ldr	r3, [pc, #136]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8b2:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 800a8b4:	8abb      	ldrh	r3, [r7, #20]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4b20      	ldr	r3, [pc, #128]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8ba:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 800a8bc:	8b3b      	ldrh	r3, [r7, #24]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8c2:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 800a8c4:	8afb      	ldrh	r3, [r7, #22]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8ca:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 800a8cc:	8afb      	ldrh	r3, [r7, #22]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8d2:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 800a8d4:	4a19      	ldr	r2, [pc, #100]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 800a8da:	4a18      	ldr	r2, [pc, #96]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 800a8e0:	4a16      	ldr	r2, [pc, #88]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 800a8e6:	4b15      	ldr	r3, [pc, #84]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8e8:	4a15      	ldr	r2, [pc, #84]	@ (800a940 <lfs_fs_ll_init+0xf8>)
 800a8ea:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 800a8ec:	4b13      	ldr	r3, [pc, #76]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8ee:	4a15      	ldr	r2, [pc, #84]	@ (800a944 <lfs_fs_ll_init+0xfc>)
 800a8f0:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 800a8f2:	4b12      	ldr	r3, [pc, #72]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8f4:	4a14      	ldr	r2, [pc, #80]	@ (800a948 <lfs_fs_ll_init+0x100>)
 800a8f6:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 800a8f8:	4b10      	ldr	r3, [pc, #64]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a8fa:	4a14      	ldr	r2, [pc, #80]	@ (800a94c <lfs_fs_ll_init+0x104>)
 800a8fc:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 800a8fe:	4a0f      	ldr	r2, [pc, #60]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 800a904:	4a0d      	ldr	r2, [pc, #52]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 800a90a:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a90c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a910:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 800a912:	490a      	ldr	r1, [pc, #40]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a914:	480e      	ldr	r0, [pc, #56]	@ (800a950 <lfs_fs_ll_init+0x108>)
 800a916:	f007 fd08 	bl	801232a <lfs_mount>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da07      	bge.n	800a930 <lfs_fs_ll_init+0xe8>
    	lfs_format(&lfs, &cfg);
 800a920:	4906      	ldr	r1, [pc, #24]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a922:	480b      	ldr	r0, [pc, #44]	@ (800a950 <lfs_fs_ll_init+0x108>)
 800a924:	f007 fce4 	bl	80122f0 <lfs_format>
    	lfs_mount(&lfs, &cfg);
 800a928:	4904      	ldr	r1, [pc, #16]	@ (800a93c <lfs_fs_ll_init+0xf4>)
 800a92a:	4809      	ldr	r0, [pc, #36]	@ (800a950 <lfs_fs_ll_init+0x108>)
 800a92c:	f007 fcfd 	bl	801232a <lfs_mount>
    }

	return 0;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3728      	adds	r7, #40	@ 0x28
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	200173f8 	.word	0x200173f8
 800a940:	0800a955 	.word	0x0800a955
 800a944:	0800a9f5 	.word	0x0800a9f5
 800a948:	0800a9ad 	.word	0x0800a9ad
 800a94c:	0800aa4d 	.word	0x0800aa4d
 800a950:	20017378 	.word	0x20017378

0800a954 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d306      	bcc.n	800a97a <block_device_read+0x26>
 800a96c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a0 <block_device_read+0x4c>)
 800a96e:	4a0d      	ldr	r2, [pc, #52]	@ (800a9a4 <block_device_read+0x50>)
 800a970:	f240 1111 	movw	r1, #273	@ 0x111
 800a974:	480c      	ldr	r0, [pc, #48]	@ (800a9a8 <block_device_read+0x54>)
 800a976:	f015 ffa7 	bl	80208c8 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	fb03 f202 	mul.w	r2, r3, r2
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4413      	add	r3, r2
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	b292      	uxth	r2, r2
 800a98c:	4619      	mov	r1, r3
 800a98e:	6838      	ldr	r0, [r7, #0]
 800a990:	f7f9 ff1e 	bl	80047d0 <sFLASH_ReadBuffer>
	return 0;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08023bb4 	.word	0x08023bb4
 800a9a4:	08026c10 	.word	0x08026c10
 800a9a8:	08023bcc 	.word	0x08023bcc

0800a9ac <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d306      	bcc.n	800a9ce <block_device_erase+0x22>
 800a9c0:	4b09      	ldr	r3, [pc, #36]	@ (800a9e8 <block_device_erase+0x3c>)
 800a9c2:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ec <block_device_erase+0x40>)
 800a9c4:	f240 1119 	movw	r1, #281	@ 0x119
 800a9c8:	4809      	ldr	r0, [pc, #36]	@ (800a9f0 <block_device_erase+0x44>)
 800a9ca:	f015 ff7d 	bl	80208c8 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	fb02 f303 	mul.w	r3, r2, r3
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7f9 fdf7 	bl	80045cc <sFLASH_EraseSector>
	return 0;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	08023bb4 	.word	0x08023bb4
 800a9ec:	08026c24 	.word	0x08026c24
 800a9f0:	08023bcc 	.word	0x08023bcc

0800a9f4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d306      	bcc.n	800aa1a <block_device_prog+0x26>
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa40 <block_device_prog+0x4c>)
 800aa0e:	4a0d      	ldr	r2, [pc, #52]	@ (800aa44 <block_device_prog+0x50>)
 800aa10:	f240 1121 	movw	r1, #289	@ 0x121
 800aa14:	480c      	ldr	r0, [pc, #48]	@ (800aa48 <block_device_prog+0x54>)
 800aa16:	f015 ff57 	bl	80208c8 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	fb03 f202 	mul.w	r2, r3, r2
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4413      	add	r3, r2
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	b292      	uxth	r2, r2
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6838      	ldr	r0, [r7, #0]
 800aa30:	f7f9 fe25 	bl	800467e <sFLASH_WriteBuffer>
	return 0;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	08023bb4 	.word	0x08023bb4
 800aa44:	08026c38 	.word	0x08026c38
 800aa48:	08023bcc 	.word	0x08023bcc

0800aa4c <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	return 0;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	bf38      	it	cc
 800aa74:	4613      	movcc	r3, r2
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4293      	cmp	r3, r2
 800aa92:	bf28      	it	cs
 800aa94:	4613      	movcs	r3, r2
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	fbb3 f2f2 	udiv	r2, r3, r2
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	fb01 f202 	mul.w	r2, r1, r2
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	1ad3      	subs	r3, r2, r3
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	4413      	add	r3, r2
 800aadc:	3b01      	subs	r3, #1
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff ffde 	bl	800aaa2 <lfs_aligndown>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	fab3 f383 	clz	r3, r3
 800ab00:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	fa93 f3a3 	rbit	r3, r3
 800ab1e:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f6 f86a 	bl	8000c10 <__popcountsi2>
 800ab3c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	1ad3      	subs	r3, r2, r3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800ab6a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff ffee 	bl	800ab62 <lfs_fromle32>
 800ab86:	4603      	mov	r3, r0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ffed 	bl	800ab90 <lfs_frombe32>
 800abb6:	4603      	mov	r3, r0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff fa4f 	bl	800a06c <pvPortMalloc>
 800abce:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff fb11 	bl	800a208 <vPortFree>
#else
    (void)p;
#endif
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abfe:	601a      	str	r2, [r3, #0]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68d8      	ldr	r0, [r3, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac20:	461a      	mov	r2, r3
 800ac22:	21ff      	movs	r1, #255	@ 0xff
 800ac24:	f016 fa2c 	bl	8021080 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac2e:	601a      	str	r2, [r3, #0]
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800ac38:	b5b0      	push	{r4, r5, r7, lr}
 800ac3a:	b08a      	sub	sp, #40	@ 0x28
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac48:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800ac4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4e:	441a      	add	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d80a      	bhi.n	800ac70 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 8124 	beq.w	800aeac <lfs_bd_read+0x274>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	f0c0 811e 	bcc.w	800aeac <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800ac70:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ac74:	e11f      	b.n	800aeb6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ac76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac78:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d03f      	beq.n	800ad00 <lfs_bd_read+0xc8>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d13a      	bne.n	800ad00 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800ac94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d232      	bcs.n	800ad00 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d324      	bcc.n	800acee <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	6859      	ldr	r1, [r3, #4]
 800acac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acae:	1acb      	subs	r3, r1, r3
 800acb0:	4413      	add	r3, r2
 800acb2:	4619      	mov	r1, r3
 800acb4:	69b8      	ldr	r0, [r7, #24]
 800acb6:	f7ff fee4 	bl	800aa82 <lfs_min>
 800acba:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acc6:	1acb      	subs	r3, r1, r3
 800acc8:	4413      	add	r3, r2
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	4619      	mov	r1, r3
 800acce:	69f8      	ldr	r0, [r7, #28]
 800acd0:	f016 faa7 	bl	8021222 <memcpy>

                data += diff;
 800acd4:	69fa      	ldr	r2, [r7, #28]
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	4413      	add	r3, r2
 800acda:	61fb      	str	r3, [r7, #28]
                off += diff;
 800acdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	4413      	add	r3, r2
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800ace4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800acec:	e0de      	b.n	800aeac <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	4619      	mov	r1, r3
 800acf8:	69b8      	ldr	r0, [r7, #24]
 800acfa:	f7ff fec2 	bl	800aa82 <lfs_min>
 800acfe:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d13a      	bne.n	800ad80 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	4413      	add	r3, r2
        if (block == rcache->block &&
 800ad14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d232      	bcs.n	800ad80 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d324      	bcc.n	800ad6e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6859      	ldr	r1, [r3, #4]
 800ad2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2e:	1acb      	subs	r3, r1, r3
 800ad30:	4413      	add	r3, r2
 800ad32:	4619      	mov	r1, r3
 800ad34:	69b8      	ldr	r0, [r7, #24]
 800ad36:	f7ff fea4 	bl	800aa82 <lfs_min>
 800ad3a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ad46:	1acb      	subs	r3, r1, r3
 800ad48:	4413      	add	r3, r2
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	69f8      	ldr	r0, [r7, #28]
 800ad50:	f016 fa67 	bl	8021222 <memcpy>

                data += diff;
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	4413      	add	r3, r2
 800ad5a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ad5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	4413      	add	r3, r2
 800ad62:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800ad64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800ad6c:	e09e      	b.n	800aeac <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	4619      	mov	r1, r3
 800ad78:	69b8      	ldr	r0, [r7, #24]
 800ad7a:	f7ff fe82 	bl	800aa82 <lfs_min>
 800ad7e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800ad80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d336      	bcc.n	800adf6 <lfs_bd_read+0x1be>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad8c:	69da      	ldr	r2, [r3, #28]
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad90:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad94:	fb01 f202 	mul.w	r2, r1, r2
 800ad98:	1a9b      	subs	r3, r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d12b      	bne.n	800adf6 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ada2:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800ada4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d325      	bcc.n	800adf6 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	4619      	mov	r1, r3
 800adb2:	69b8      	ldr	r0, [r7, #24]
 800adb4:	f7ff fe75 	bl	800aaa2 <lfs_aligndown>
 800adb8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adbe:	685c      	ldr	r4, [r3, #4]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adce:	47a0      	blx	r4
 800add0:	6178      	str	r0, [r7, #20]
            if (err) {
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <lfs_bd_read+0x1a4>
                return err;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	e06c      	b.n	800aeb6 <lfs_bd_read+0x27e>
            }

            data += diff;
 800addc:	69fa      	ldr	r2, [r7, #28]
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	4413      	add	r3, r2
 800ade2:	61fb      	str	r3, [r7, #28]
            off += diff;
 800ade4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	4413      	add	r3, r2
 800adea:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800adec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800adf4:	e05a      	b.n	800aeac <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <lfs_bd_read+0x1dc>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d305      	bcc.n	800ae14 <lfs_bd_read+0x1dc>
 800ae08:	4b2d      	ldr	r3, [pc, #180]	@ (800aec0 <lfs_bd_read+0x288>)
 800ae0a:	4a2e      	ldr	r2, [pc, #184]	@ (800aec4 <lfs_bd_read+0x28c>)
 800ae0c:	216b      	movs	r1, #107	@ 0x6b
 800ae0e:	482e      	ldr	r0, [pc, #184]	@ (800aec8 <lfs_bd_read+0x290>)
 800ae10:	f015 fd5a 	bl	80208c8 <__assert_func>
        rcache->block = block;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae18:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ae24:	f7ff fe3d 	bl	800aaa2 <lfs_aligndown>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800ae2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae38:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7ff fe45 	bl	800aacc <lfs_alignup>
 800ae42:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7ff fe18 	bl	800aa82 <lfs_min>
 800ae52:	4602      	mov	r2, r0
                - rcache->off,
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800ae58:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f7ff fe0d 	bl	800aa82 <lfs_min>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae72:	685c      	ldr	r4, [r3, #4]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6819      	ldr	r1, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	47a0      	blx	r4
 800ae8e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dd05      	ble.n	800aea2 <lfs_bd_read+0x26a>
 800ae96:	4b0d      	ldr	r3, [pc, #52]	@ (800aecc <lfs_bd_read+0x294>)
 800ae98:	4a0a      	ldr	r2, [pc, #40]	@ (800aec4 <lfs_bd_read+0x28c>)
 800ae9a:	2176      	movs	r1, #118	@ 0x76
 800ae9c:	480a      	ldr	r0, [pc, #40]	@ (800aec8 <lfs_bd_read+0x290>)
 800ae9e:	f015 fd13 	bl	80208c8 <__assert_func>
        if (err) {
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <lfs_bd_read+0x274>
            return err;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	e004      	b.n	800aeb6 <lfs_bd_read+0x27e>
    while (size > 0) {
 800aeac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f47f aee1 	bne.w	800ac76 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bdb0      	pop	{r4, r5, r7, pc}
 800aebe:	bf00      	nop
 800aec0:	08023c08 	.word	0x08023c08
 800aec4:	08026c4c 	.word	0x08026c4c
 800aec8:	08023c38 	.word	0x08023c38
 800aecc:	08023c68 	.word	0x08023c68

0800aed0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b090      	sub	sp, #64	@ 0x40
 800aed4:	af04      	add	r7, sp, #16
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800aede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800aee6:	2300      	movs	r3, #0
 800aee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeea:	e039      	b.n	800af60 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800aeec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	2108      	movs	r1, #8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff fdc4 	bl	800aa82 <lfs_min>
 800aefa:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af00:	1ad1      	subs	r1, r2, r3
 800af02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af06:	4413      	add	r3, r2
 800af08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af0a:	9203      	str	r2, [sp, #12]
 800af0c:	f107 0214 	add.w	r2, r7, #20
 800af10:	9202      	str	r2, [sp, #8]
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	460b      	mov	r3, r1
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff fe8a 	bl	800ac38 <lfs_bd_read>
 800af24:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <lfs_bd_cmp+0x60>
            return err;
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	e01c      	b.n	800af6a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800af30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	18d1      	adds	r1, r2, r3
 800af36:	f107 0314 	add.w	r3, r7, #20
 800af3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af3c:	4618      	mov	r0, r3
 800af3e:	f016 f875 	bl	802102c <memcmp>
 800af42:	61f8      	str	r0, [r7, #28]
        if (res) {
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d006      	beq.n	800af58 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	da01      	bge.n	800af54 <lfs_bd_cmp+0x84>
 800af50:	2301      	movs	r3, #1
 800af52:	e00a      	b.n	800af6a <lfs_bd_cmp+0x9a>
 800af54:	2302      	movs	r3, #2
 800af56:	e008      	b.n	800af6a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800af58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	4413      	add	r3, r2
 800af5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af64:	429a      	cmp	r2, r3
 800af66:	d3c1      	bcc.n	800aeec <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3730      	adds	r7, #48	@ 0x30
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800af72:	b580      	push	{r7, lr}
 800af74:	b08e      	sub	sp, #56	@ 0x38
 800af76:	af04      	add	r7, sp, #16
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
 800af7e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800af84:	2300      	movs	r3, #0
 800af86:	627b      	str	r3, [r7, #36]	@ 0x24
 800af88:	e030      	b.n	800afec <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800af8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2108      	movs	r1, #8
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff fd75 	bl	800aa82 <lfs_min>
 800af98:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	1ad1      	subs	r1, r2, r3
 800afa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	4413      	add	r3, r2
 800afa6:	6a3a      	ldr	r2, [r7, #32]
 800afa8:	9203      	str	r2, [sp, #12]
 800afaa:	f107 0214 	add.w	r2, r7, #20
 800afae:	9202      	str	r2, [sp, #8]
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	460b      	mov	r3, r1
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7ff fe3b 	bl	800ac38 <lfs_bd_read>
 800afc2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <lfs_bd_crc+0x5c>
            return err;
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	e013      	b.n	800aff6 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800afce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f107 0114 	add.w	r1, r7, #20
 800afd6:	6a3a      	ldr	r2, [r7, #32]
 800afd8:	4618      	mov	r0, r3
 800afda:	f007 fc49 	bl	8012870 <lfs_crc>
 800afde:	4602      	mov	r2, r0
 800afe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afe2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800afe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	4413      	add	r3, r2
 800afea:	627b      	str	r3, [r7, #36]	@ 0x24
 800afec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d3ca      	bcc.n	800af8a <lfs_bd_crc+0x18>
    }

    return 0;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	@ 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b000:	b5b0      	push	{r4, r5, r7, lr}
 800b002:	b08c      	sub	sp, #48	@ 0x30
 800b004:	af04      	add	r7, sp, #16
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b016:	d060      	beq.n	800b0da <lfs_bd_flush+0xda>
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f113 0f02 	cmn.w	r3, #2
 800b020:	d05b      	beq.n	800b0da <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d305      	bcc.n	800b03a <lfs_bd_flush+0x3a>
 800b02e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0e4 <lfs_bd_flush+0xe4>)
 800b030:	4a2d      	ldr	r2, [pc, #180]	@ (800b0e8 <lfs_bd_flush+0xe8>)
 800b032:	21b3      	movs	r1, #179	@ 0xb3
 800b034:	482d      	ldr	r0, [pc, #180]	@ (800b0ec <lfs_bd_flush+0xec>)
 800b036:	f015 fc47 	bl	80208c8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	f7ff fd40 	bl	800aacc <lfs_alignup>
 800b04c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b052:	689c      	ldr	r4, [r3, #8]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	6819      	ldr	r1, [r3, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	462b      	mov	r3, r5
 800b06a:	47a0      	blx	r4
 800b06c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dd05      	ble.n	800b080 <lfs_bd_flush+0x80>
 800b074:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f0 <lfs_bd_flush+0xf0>)
 800b076:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e8 <lfs_bd_flush+0xe8>)
 800b078:	21b7      	movs	r1, #183	@ 0xb7
 800b07a:	481c      	ldr	r0, [pc, #112]	@ (800b0ec <lfs_bd_flush+0xec>)
 800b07c:	f015 fc24 	bl	80208c8 <__assert_func>
        if (err) {
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <lfs_bd_flush+0x8a>
            return err;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	e028      	b.n	800b0dc <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d020      	beq.n	800b0d2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff fdab 	bl	800abee <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800b0a4:	69f8      	ldr	r0, [r7, #28]
 800b0a6:	9003      	str	r0, [sp, #12]
 800b0a8:	9102      	str	r1, [sp, #8]
 800b0aa:	9201      	str	r2, [sp, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff ff0b 	bl	800aed0 <lfs_bd_cmp>
 800b0ba:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da01      	bge.n	800b0c6 <lfs_bd_flush+0xc6>
                return res;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	e00a      	b.n	800b0dc <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800b0cc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800b0d0:	e004      	b.n	800b0dc <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fd99 	bl	800ac0c <lfs_cache_zero>
    }

    return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0e4:	08023c74 	.word	0x08023c74
 800b0e8:	08026c58 	.word	0x08026c58
 800b0ec:	08023c38 	.word	0x08023c38
 800b0f0:	08023c68 	.word	0x08023c68

0800b0f4 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff fd72 	bl	800abee <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68b9      	ldr	r1, [r7, #8]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff ff75 	bl	800b000 <lfs_bd_flush>
 800b116:	6178      	str	r0, [r7, #20]
    if (err) {
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <lfs_bd_sync+0x2e>
        return err;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	e011      	b.n	800b146 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd05      	ble.n	800b144 <lfs_bd_sync+0x50>
 800b138:	4b05      	ldr	r3, [pc, #20]	@ (800b150 <lfs_bd_sync+0x5c>)
 800b13a:	4a06      	ldr	r2, [pc, #24]	@ (800b154 <lfs_bd_sync+0x60>)
 800b13c:	21dd      	movs	r1, #221	@ 0xdd
 800b13e:	4806      	ldr	r0, [pc, #24]	@ (800b158 <lfs_bd_sync+0x64>)
 800b140:	f015 fbc2 	bl	80208c8 <__assert_func>
    return err;
 800b144:	697b      	ldr	r3, [r7, #20]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08023c68 	.word	0x08023c68
 800b154:	08026c68 	.word	0x08026c68
 800b158:	08023c38 	.word	0x08023c38

0800b15c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800b16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b170:	f113 0f02 	cmn.w	r3, #2
 800b174:	d00a      	beq.n	800b18c <lfs_bd_prog+0x30>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b17a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d305      	bcc.n	800b18c <lfs_bd_prog+0x30>
 800b180:	4b48      	ldr	r3, [pc, #288]	@ (800b2a4 <lfs_bd_prog+0x148>)
 800b182:	4a49      	ldr	r2, [pc, #292]	@ (800b2a8 <lfs_bd_prog+0x14c>)
 800b184:	21e8      	movs	r1, #232	@ 0xe8
 800b186:	4849      	ldr	r0, [pc, #292]	@ (800b2ac <lfs_bd_prog+0x150>)
 800b188:	f015 fb9e 	bl	80208c8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800b18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b190:	441a      	add	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b198:	429a      	cmp	r2, r3
 800b19a:	d97a      	bls.n	800b292 <lfs_bd_prog+0x136>
 800b19c:	4b44      	ldr	r3, [pc, #272]	@ (800b2b0 <lfs_bd_prog+0x154>)
 800b19e:	4a42      	ldr	r2, [pc, #264]	@ (800b2a8 <lfs_bd_prog+0x14c>)
 800b1a0:	21e9      	movs	r1, #233	@ 0xe9
 800b1a2:	4842      	ldr	r0, [pc, #264]	@ (800b2ac <lfs_bd_prog+0x150>)
 800b1a4:	f015 fb90 	bl	80208c8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d151      	bne.n	800b256 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800b1b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d34c      	bcc.n	800b256 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c6:	4413      	add	r3, r2
                off >= pcache->off &&
 800b1c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d243      	bcs.n	800b256 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6859      	ldr	r1, [r3, #4]
 800b1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1da:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800b1dc:	4413      	add	r3, r2
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b1e2:	f7ff fc4e 	bl	800aa82 <lfs_min>
 800b1e6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1f2:	1acb      	subs	r3, r1, r3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f016 f811 	bl	8021222 <memcpy>

            data += diff;
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	4413      	add	r3, r2
 800b206:	61fb      	str	r3, [r7, #28]
            off += diff;
 800b208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	4413      	add	r3, r2
 800b20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800b210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	6898      	ldr	r0, [r3, #8]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	4619      	mov	r1, r3
 800b226:	f7ff fc1c 	bl	800aa62 <lfs_max>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	689a      	ldr	r2, [r3, #8]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d128      	bne.n	800b290 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fedb 	bl	800b000 <lfs_bd_flush>
 800b24a:	6178      	str	r0, [r7, #20]
                if (err) {
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d01e      	beq.n	800b290 <lfs_bd_prog+0x134>
                    return err;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	e021      	b.n	800b29a <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b25e:	d006      	beq.n	800b26e <lfs_bd_prog+0x112>
 800b260:	4b14      	ldr	r3, [pc, #80]	@ (800b2b4 <lfs_bd_prog+0x158>)
 800b262:	4a11      	ldr	r2, [pc, #68]	@ (800b2a8 <lfs_bd_prog+0x14c>)
 800b264:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800b268:	4810      	ldr	r0, [pc, #64]	@ (800b2ac <lfs_bd_prog+0x150>)
 800b26a:	f015 fb2d 	bl	80208c8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b272:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b27e:	f7ff fc10 	bl	800aaa2 <lfs_aligndown>
 800b282:	4602      	mov	r2, r0
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	609a      	str	r2, [r3, #8]
 800b28e:	e000      	b.n	800b292 <lfs_bd_prog+0x136>
            continue;
 800b290:	bf00      	nop
    while (size > 0) {
 800b292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b294:	2b00      	cmp	r3, #0
 800b296:	d187      	bne.n	800b1a8 <lfs_bd_prog+0x4c>
    }

    return 0;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	08023c98 	.word	0x08023c98
 800b2a8:	08026c74 	.word	0x08026c74
 800b2ac:	08023c38 	.word	0x08023c38
 800b2b0:	08023cd0 	.word	0x08023cd0
 800b2b4:	08023cf4 	.word	0x08023cf4

0800b2b8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d306      	bcc.n	800b2da <lfs_bd_erase+0x22>
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b30c <lfs_bd_erase+0x54>)
 800b2ce:	4a10      	ldr	r2, [pc, #64]	@ (800b310 <lfs_bd_erase+0x58>)
 800b2d0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800b2d4:	480f      	ldr	r0, [pc, #60]	@ (800b314 <lfs_bd_erase+0x5c>)
 800b2d6:	f015 faf7 	bl	80208c8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	4798      	blx	r3
 800b2ea:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dd06      	ble.n	800b300 <lfs_bd_erase+0x48>
 800b2f2:	4b09      	ldr	r3, [pc, #36]	@ (800b318 <lfs_bd_erase+0x60>)
 800b2f4:	4a06      	ldr	r2, [pc, #24]	@ (800b310 <lfs_bd_erase+0x58>)
 800b2f6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800b2fa:	4806      	ldr	r0, [pc, #24]	@ (800b314 <lfs_bd_erase+0x5c>)
 800b2fc:	f015 fae4 	bl	80208c8 <__assert_func>
    return err;
 800b300:	68fb      	ldr	r3, [r7, #12]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	08023d18 	.word	0x08023d18
 800b310:	08026c80 	.word	0x08026c80
 800b314:	08023c38 	.word	0x08023c38
 800b318:	08023c68 	.word	0x08023c68

0800b31c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3304      	adds	r3, #4
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b356:	d005      	beq.n	800b364 <lfs_pair_isnull+0x1e>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b362:	d101      	bne.n	800b368 <lfs_pair_isnull+0x22>
 800b364:	2301      	movs	r3, #1
 800b366:	e000      	b.n	800b36a <lfs_pair_isnull+0x24>
 800b368:	2300      	movs	r3, #0
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d017      	beq.n	800b3c2 <lfs_pair_cmp+0x46>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3304      	adds	r3, #4
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	3304      	adds	r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d00f      	beq.n	800b3c2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d008      	beq.n	800b3c2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d001      	beq.n	800b3c2 <lfs_pair_cmp+0x46>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <lfs_pair_cmp+0x48>
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d107      	bne.n	800b3f6 <lfs_pair_issync+0x26>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d00d      	beq.n	800b412 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d108      	bne.n	800b416 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3304      	adds	r3, #4
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d101      	bne.n	800b416 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <lfs_pair_issync+0x48>
 800b416:	2300      	movs	r3, #0
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	b2db      	uxtb	r3, r3
}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800b42a:	b590      	push	{r4, r7, lr}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fb93 	bl	800ab62 <lfs_fromle32>
 800b43c:	4602      	mov	r2, r0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3304      	adds	r3, #4
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	1d1c      	adds	r4, r3, #4
 800b44c:	4610      	mov	r0, r2
 800b44e:	f7ff fb88 	bl	800ab62 <lfs_fromle32>
 800b452:	4603      	mov	r3, r0
 800b454:	6023      	str	r3, [r4, #0]
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd90      	pop	{r4, r7, pc}

0800b45e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800b45e:	b590      	push	{r4, r7, lr}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff fb84 	bl	800ab78 <lfs_tole32>
 800b470:	4602      	mov	r2, r0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3304      	adds	r3, #4
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	1d1c      	adds	r4, r3, #4
 800b480:	4610      	mov	r0, r2
 800b482:	f7ff fb79 	bl	800ab78 <lfs_tole32>
 800b486:	4603      	mov	r3, r0
 800b488:	6023      	str	r3, [r4, #0]
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd90      	pop	{r4, r7, pc}

0800b492 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800b492:	b480      	push	{r7}
 800b494:	b083      	sub	sp, #12
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	43db      	mvns	r3, r3
 800b49e:	0fdb      	lsrs	r3, r3, #31
 800b4a0:	b2db      	uxtb	r3, r3
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	059b      	lsls	r3, r3, #22
 800b4ba:	159b      	asrs	r3, r3, #22
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4c0:	bf0c      	ite	eq
 800b4c2:	2301      	moveq	r3, #1
 800b4c4:	2300      	movne	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	0d1b      	lsrs	r3, r3, #20
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4e6:	b29b      	uxth	r3, r3
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0d1b      	lsrs	r3, r3, #20
 800b500:	b29b      	uxth	r3, r3
 800b502:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800b506:	b29b      	uxth	r3, r3
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	0d1b      	lsrs	r3, r3, #20
 800b520:	b29b      	uxth	r3, r3
 800b522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b526:	b29b      	uxth	r3, r3
}
 800b528:	4618      	mov	r0, r3
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	0d1b      	lsrs	r3, r3, #20
 800b540:	b2db      	uxtb	r3, r3
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff ffec 	bl	800b534 <lfs_tag_chunk>
 800b55c:	4603      	mov	r3, r0
 800b55e:	b25b      	sxtb	r3, r3
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	0a9b      	lsrs	r3, r3, #10
 800b574:	b29b      	uxth	r3, r3
 800b576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b57a:	b29b      	uxth	r3, r3
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800b596:	4618      	mov	r0, r3
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ff7f 	bl	800b4ae <lfs_tag_isdelete>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff ffe5 	bl	800b588 <lfs_tag_size>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	3304      	adds	r3, #4
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e012      	b.n	800b600 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	6819      	ldr	r1, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4403      	add	r3, r0
 800b5f6:	404a      	eors	r2, r1
 800b5f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b02      	cmp	r3, #2
 800b604:	dde9      	ble.n	800b5da <lfs_gstate_xor+0x10>
    }
}
 800b606:	bf00      	nop
 800b608:	bf00      	nop
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	e00b      	b.n	800b63a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <lfs_gstate_iszero+0x20>
            return false;
 800b630:	2300      	movs	r3, #0
 800b632:	e006      	b.n	800b642 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	ddf0      	ble.n	800b622 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800b640:	2301      	movs	r3, #1
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff ff94 	bl	800b588 <lfs_tag_size>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	bf14      	ite	ne
 800b666:	2301      	movne	r3, #1
 800b668:	2300      	moveq	r3, #0
 800b66a:	b2db      	uxtb	r3, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff ff81 	bl	800b588 <lfs_tag_size>
 800b686:	4603      	mov	r3, r0
 800b688:	b2db      	uxtb	r3, r3
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ff18 	bl	800b4d4 <lfs_tag_type1>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	bf14      	ite	ne
 800b6aa:	2301      	movne	r3, #1
 800b6ac:	2300      	moveq	r3, #0
 800b6ae:	b2db      	uxtb	r3, r3
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff ff5f 	bl	800b588 <lfs_tag_size>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	0a5b      	lsrs	r3, r3, #9
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bf14      	ite	ne
 800b6d2:	2301      	movne	r3, #1
 800b6d4:	2300      	moveq	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fef0 	bl	800b4d4 <lfs_tag_type1>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <lfs_gstate_hasmovehere+0x30>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f7ff fe3b 	bl	800b37c <lfs_pair_cmp>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <lfs_gstate_hasmovehere+0x30>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <lfs_gstate_hasmovehere+0x32>
 800b710:	2300      	movs	r3, #0
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	b2db      	uxtb	r3, r3
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fa18 	bl	800ab62 <lfs_fromle32>
 800b732:	4602      	mov	r2, r0
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fa10 	bl	800ab62 <lfs_fromle32>
 800b742:	4602      	mov	r2, r0
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fa08 	bl	800ab62 <lfs_fromle32>
 800b752:	4602      	mov	r2, r0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	609a      	str	r2, [r3, #8]
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fa03 	bl	800ab78 <lfs_tole32>
 800b772:	4602      	mov	r2, r0
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff f9fb 	bl	800ab78 <lfs_tole32>
 800b782:	4602      	mov	r2, r0
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff f9f3 	bl	800ab78 <lfs_tole32>
 800b792:	4602      	mov	r2, r0
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	609a      	str	r2, [r3, #8]
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff f9d8 	bl	800ab62 <lfs_fromle32>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff f9d0 	bl	800ab62 <lfs_fromle32>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	605a      	str	r2, [r3, #4]
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff f9cb 	bl	800ab78 <lfs_tole32>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff f9c3 	bl	800ab78 <lfs_tole32>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	605a      	str	r2, [r3, #4]
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff f9a8 	bl	800ab62 <lfs_fromle32>
 800b812:	4602      	mov	r2, r0
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff f9a0 	bl	800ab62 <lfs_fromle32>
 800b822:	4602      	mov	r2, r0
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	605a      	str	r2, [r3, #4]
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff f99b 	bl	800ab78 <lfs_tole32>
 800b842:	4602      	mov	r2, r0
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff f993 	bl	800ab78 <lfs_tole32>
 800b852:	4602      	mov	r2, r0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	605a      	str	r2, [r3, #4]
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff f978 	bl	800ab62 <lfs_fromle32>
 800b872:	4602      	mov	r2, r0
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff f970 	bl	800ab62 <lfs_fromle32>
 800b882:	4602      	mov	r2, r0
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff f968 	bl	800ab62 <lfs_fromle32>
 800b892:	4602      	mov	r2, r0
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff f960 	bl	800ab62 <lfs_fromle32>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff f958 	bl	800ab62 <lfs_fromle32>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff f950 	bl	800ab62 <lfs_fromle32>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	615a      	str	r2, [r3, #20]
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff f94b 	bl	800ab78 <lfs_tole32>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff f943 	bl	800ab78 <lfs_tole32>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff f93b 	bl	800ab78 <lfs_tole32>
 800b902:	4602      	mov	r2, r0
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff f933 	bl	800ab78 <lfs_tole32>
 800b912:	4602      	mov	r2, r0
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff f92b 	bl	800ab78 <lfs_tole32>
 800b922:	4602      	mov	r2, r0
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff f923 	bl	800ab78 <lfs_tole32>
 800b932:	4602      	mov	r2, r0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	615a      	str	r2, [r3, #20]
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b94a:	1d3b      	adds	r3, r7, #4
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	e009      	b.n	800b964 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d101      	bne.n	800b95e <lfs_mlist_isopen+0x1e>
            return true;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e007      	b.n	800b96e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f1      	bne.n	800b950 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3328      	adds	r3, #40	@ 0x28
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e00d      	b.n	800b9a8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d105      	bne.n	800b9a2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	601a      	str	r2, [r3, #0]
            break;
 800b9a0:	e007      	b.n	800b9b2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1ed      	bne.n	800b98c <lfs_mlist_remove+0x12>
        }
    }
}
 800b9b0:	bf00      	nop
 800b9b2:	bf00      	nop
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b9d6:	bf00      	nop
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800b9ec:	4b03      	ldr	r3, [pc, #12]	@ (800b9fc <lfs_fs_disk_version+0x18>)
    }
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	00020001 	.word	0x00020001

0800ba00 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff ffeb 	bl	800b9e4 <lfs_fs_disk_version>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	0c1b      	lsrs	r3, r3, #16
 800ba12:	b29b      	uxth	r3, r3

}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff ffdd 	bl	800b9e4 <lfs_fs_disk_version>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	b29b      	uxth	r3, r3
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff ffe5 	bl	800ba36 <lfs_alloc_ckpoint>
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba8e:	4413      	add	r3, r2
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800ba94:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba98:	fb01 f202 	mul.w	r2, r1, r2
 800ba9c:	1a9b      	subs	r3, r3, r2
 800ba9e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d212      	bcs.n	800bad0 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	08db      	lsrs	r3, r3, #3
 800bab2:	441a      	add	r2, r3
 800bab4:	7811      	ldrb	r1, [r2, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	f002 0207 	and.w	r2, r2, #7
 800babc:	2001      	movs	r0, #1
 800babe:	fa00 f202 	lsl.w	r2, r0, r2
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800bac8:	4403      	add	r3, r0
 800baca:	430a      	orrs	r2, r1
 800bacc:	b2d2      	uxtb	r2, r2
 800bace:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
	...

0800bae0 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baf0:	4413      	add	r3, r2
            % lfs->block_count;
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800baf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bafa:	fb01 f202 	mul.w	r2, r1, r2
 800bafe:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 800bb10:	00da      	lsls	r2, r3, #3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb16:	4619      	mov	r1, r3
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7fe ffb2 	bl	800aa82 <lfs_min>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb2e:	461a      	mov	r2, r3
 800bb30:	2100      	movs	r1, #0
 800bb32:	f015 faa5 	bl	8021080 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800bb36:	2301      	movs	r3, #1
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	4909      	ldr	r1, [pc, #36]	@ (800bb60 <lfs_alloc_scan+0x80>)
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f005 fdc9 	bl	80116d4 <lfs_fs_traverse_>
 800bb42:	60f8      	str	r0, [r7, #12]
    if (err) {
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d004      	beq.n	800bb54 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff ff81 	bl	800ba52 <lfs_alloc_drop>
        return err;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	e000      	b.n	800bb56 <lfs_alloc_scan+0x76>
    }

    return 0;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800ba75 	.word	0x0800ba75

0800bb64 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800bb6e:	e04d      	b.n	800bc0c <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb78:	08db      	lsrs	r3, r3, #3
 800bb7a:	4413      	add	r3, r2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb84:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d131      	bne.n	800bbf8 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb9c:	4413      	add	r3, r2
                        % lfs->block_count;
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800bba2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bba6:	fb01 f202 	mul.w	r2, r1, r2
 800bbaa:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbbe:	1e5a      	subs	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d211      	bcs.n	800bbf4 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	4413      	add	r3, r2
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbe4:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800bbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1dd      	bne.n	800bbb0 <lfs_alloc+0x4c>
                        return 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e032      	b.n	800bc5e <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc06:	1e5a      	subs	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d3ab      	bcc.n	800bb70 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d116      	bne.n	800bc4e <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc28:	4413      	add	r3, r2
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800bc2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc32:	fb01 f202 	mul.w	r2, r1, r2
 800bc36:	1a9b      	subs	r3, r3, r2
 800bc38:	4a0b      	ldr	r2, [pc, #44]	@ (800bc68 <lfs_alloc+0x104>)
 800bc3a:	9200      	str	r2, [sp, #0]
 800bc3c:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800bc40:	490a      	ldr	r1, [pc, #40]	@ (800bc6c <lfs_alloc+0x108>)
 800bc42:	480b      	ldr	r0, [pc, #44]	@ (800bc70 <lfs_alloc+0x10c>)
 800bc44:	f015 f8ec 	bl	8020e20 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800bc48:	f06f 031b 	mvn.w	r3, #27
 800bc4c:	e007      	b.n	800bc5e <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff ff46 	bl	800bae0 <lfs_alloc_scan>
 800bc54:	60f8      	str	r0, [r7, #12]
        if(err) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d088      	beq.n	800bb6e <lfs_alloc+0xa>
            return err;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	08023d60 	.word	0x08023d60
 800bc6c:	08023c38 	.word	0x08023c38
 800bc70:	08023d34 	.word	0x08023d34

0800bc74 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800bc74:	b590      	push	{r4, r7, lr}
 800bc76:	b08f      	sub	sp, #60	@ 0x3c
 800bc78:	af04      	add	r7, sp, #16
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	333c      	adds	r3, #60	@ 0x3c
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fd20 	bl	800b6e0 <lfs_gstate_hasmovehere>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 80ca 	beq.w	800be3c <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff fc5d 	bl	800b568 <lfs_tag_id>
 800bcae:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 80c3 	beq.w	800be3c <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fc54 	bl	800b568 <lfs_tag_id>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461c      	mov	r4, r3
 800bcc4:	6838      	ldr	r0, [r7, #0]
 800bcc6:	f7ff fc4f 	bl	800b568 <lfs_tag_id>
 800bcca:	4603      	mov	r3, r0
 800bccc:	429c      	cmp	r4, r3
 800bcce:	d102      	bne.n	800bcd6 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800bcd0:	f06f 0301 	mvn.w	r3, #1
 800bcd4:	e0be      	b.n	800be54 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff fc44 	bl	800b568 <lfs_tag_id>
 800bce0:	4603      	mov	r3, r0
 800bce2:	461c      	mov	r4, r3
 800bce4:	6838      	ldr	r0, [r7, #0]
 800bce6:	f7ff fc3f 	bl	800b568 <lfs_tag_id>
 800bcea:	4603      	mov	r3, r0
 800bcec:	429c      	cmp	r4, r3
 800bcee:	f080 80a5 	bcs.w	800be3c <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800bcf8:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800bcfa:	e09f      	b.n	800be3c <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fc4f 	bl	800b5a2 <lfs_tag_dsize>
 800bd04:	4602      	mov	r2, r0
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800bd10:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800bd16:	2204      	movs	r2, #4
 800bd18:	9203      	str	r2, [sp, #12]
 800bd1a:	f107 0210 	add.w	r2, r7, #16
 800bd1e:	9202      	str	r2, [sp, #8]
 800bd20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd22:	9201      	str	r2, [sp, #4]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	2304      	movs	r3, #4
 800bd28:	460a      	mov	r2, r1
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7fe ff83 	bl	800ac38 <lfs_bd_read>
 800bd32:	61b8      	str	r0, [r7, #24]
        if (err) {
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <lfs_dir_getslice+0xca>
            return err;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	e08a      	b.n	800be54 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe ff25 	bl	800ab90 <lfs_frombe32>
 800bd46:	4602      	mov	r2, r0
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	4053      	eors	r3, r2
 800bd4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd50:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff fc08 	bl	800b568 <lfs_tag_id>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d02b      	beq.n	800bdb6 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800bd5e:	69f8      	ldr	r0, [r7, #28]
 800bd60:	f7ff fbb8 	bl	800b4d4 <lfs_tag_type1>
 800bd64:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800bd66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd6a:	d124      	bne.n	800bdb6 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800bd6c:	69f8      	ldr	r0, [r7, #28]
 800bd6e:	f7ff fbfb 	bl	800b568 <lfs_tag_id>
 800bd72:	4603      	mov	r3, r0
 800bd74:	461c      	mov	r4, r3
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff fbf3 	bl	800b568 <lfs_tag_id>
 800bd82:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800bd84:	429c      	cmp	r4, r3
 800bd86:	d816      	bhi.n	800bdb6 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	1ad2      	subs	r2, r2, r3
 800bd8e:	4b33      	ldr	r3, [pc, #204]	@ (800be5c <lfs_dir_getslice+0x1e8>)
 800bd90:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800bd92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd9a:	69fa      	ldr	r2, [r7, #28]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d102      	bne.n	800bda6 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800bda0:	f06f 0301 	mvn.w	r3, #1
 800bda4:	e056      	b.n	800be54 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800bda6:	69f8      	ldr	r0, [r7, #28]
 800bda8:	f7ff fbd1 	bl	800b54e <lfs_tag_splice>
 800bdac:	4603      	mov	r3, r0
 800bdae:	029a      	lsls	r2, r3, #10
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	401a      	ands	r2, r3
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	1ac9      	subs	r1, r1, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	400b      	ands	r3, r1
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d138      	bne.n	800be3c <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800bdca:	69f8      	ldr	r0, [r7, #28]
 800bdcc:	f7ff fb6f 	bl	800b4ae <lfs_tag_isdelete>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d002      	beq.n	800bddc <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800bdd6:	f06f 0301 	mvn.w	r3, #1
 800bdda:	e03b      	b.n	800be54 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800bddc:	69f8      	ldr	r0, [r7, #28]
 800bdde:	f7ff fbd3 	bl	800b588 <lfs_tag_size>
 800bde2:	4603      	mov	r3, r0
 800bde4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fe4b 	bl	800aa82 <lfs_min>
 800bdec:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800bdee:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdf8:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800bdfa:	3204      	adds	r2, #4
 800bdfc:	6979      	ldr	r1, [r7, #20]
 800bdfe:	9103      	str	r1, [sp, #12]
 800be00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be02:	9102      	str	r1, [sp, #8]
 800be04:	9201      	str	r2, [sp, #4]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	4602      	mov	r2, r0
 800be0c:	2100      	movs	r1, #0
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7fe ff12 	bl	800ac38 <lfs_bd_read>
 800be14:	61b8      	str	r0, [r7, #24]
            if (err) {
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <lfs_dir_getslice+0x1ac>
                return err;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	e019      	b.n	800be54 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800be20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	18d0      	adds	r0, r2, r3
 800be26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	2100      	movs	r1, #0
 800be30:	f015 f926 	bl	8021080 <memset>

            return tag + gdiff;
 800be34:	6a3a      	ldr	r2, [r7, #32]
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	4413      	add	r3, r2
 800be3a:	e00b      	b.n	800be54 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	4618      	mov	r0, r3
 800be40:	f7ff fbaf 	bl	800b5a2 <lfs_tag_dsize>
 800be44:	4603      	mov	r3, r0
 800be46:	3304      	adds	r3, #4
 800be48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be4a:	429a      	cmp	r2, r3
 800be4c:	f4bf af56 	bcs.w	800bcfc <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800be50:	f06f 0301 	mvn.w	r3, #1
}
 800be54:	4618      	mov	r0, r3
 800be56:	372c      	adds	r7, #44	@ 0x2c
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd90      	pop	{r4, r7, pc}
 800be5c:	000ffc00 	.word	0x000ffc00

0800be60 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af04      	add	r7, sp, #16
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800be6e:	6838      	ldr	r0, [r7, #0]
 800be70:	f7ff fb8a 	bl	800b588 <lfs_tag_size>
 800be74:	4603      	mov	r3, r0
 800be76:	9302      	str	r3, [sp, #8]
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	2300      	movs	r3, #0
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff fef4 	bl	800bc74 <lfs_dir_getslice>
 800be8c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800be96:	b580      	push	{r7, lr}
 800be98:	b08c      	sub	sp, #48	@ 0x30
 800be9a:	af04      	add	r7, sp, #16
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800bea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800beaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beac:	441a      	add	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800beb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb4:	429a      	cmp	r2, r3
 800beb6:	f240 80c0 	bls.w	800c03a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800beba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800bebe:	e0c1      	b.n	800c044 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800bec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d03f      	beq.n	800bf4a <lfs_dir_getread+0xb4>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f113 0f02 	cmn.w	r3, #2
 800bed2:	d13a      	bne.n	800bf4a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800bede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d232      	bcs.n	800bf4a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800beea:	429a      	cmp	r2, r3
 800beec:	d324      	bcc.n	800bf38 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689a      	ldr	r2, [r3, #8]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6859      	ldr	r1, [r3, #4]
 800bef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef8:	1acb      	subs	r3, r1, r3
 800befa:	4413      	add	r3, r2
 800befc:	4619      	mov	r1, r3
 800befe:	69b8      	ldr	r0, [r7, #24]
 800bf00:	f7fe fdbf 	bl	800aa82 <lfs_min>
 800bf04:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bf10:	1acb      	subs	r3, r1, r3
 800bf12:	4413      	add	r3, r2
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	4619      	mov	r1, r3
 800bf18:	69f8      	ldr	r0, [r7, #28]
 800bf1a:	f015 f982 	bl	8021222 <memcpy>

                data += diff;
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	4413      	add	r3, r2
 800bf24:	61fb      	str	r3, [r7, #28]
                off += diff;
 800bf26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800bf2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800bf36:	e080      	b.n	800c03a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	4619      	mov	r1, r3
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f7fe fd9d 	bl	800aa82 <lfs_min>
 800bf48:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f113 0f02 	cmn.w	r3, #2
 800bf52:	d13a      	bne.n	800bfca <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800bf5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d232      	bcs.n	800bfca <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d324      	bcc.n	800bfb8 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	6859      	ldr	r1, [r3, #4]
 800bf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf78:	1acb      	subs	r3, r1, r3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	69b8      	ldr	r0, [r7, #24]
 800bf80:	f7fe fd7f 	bl	800aa82 <lfs_min>
 800bf84:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bf90:	1acb      	subs	r3, r1, r3
 800bf92:	4413      	add	r3, r2
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	4619      	mov	r1, r3
 800bf98:	69f8      	ldr	r0, [r7, #28]
 800bf9a:	f015 f942 	bl	8021222 <memcpy>

                data += diff;
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	61fb      	str	r3, [r7, #28]
                off += diff;
 800bfa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	4413      	add	r3, r2
 800bfac:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800bfae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800bfb6:	e040      	b.n	800c03a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	69b8      	ldr	r0, [r7, #24]
 800bfc4:	f7fe fd5d 	bl	800aa82 <lfs_min>
 800bfc8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	f06f 0201 	mvn.w	r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bfdc:	f7fe fd61 	bl	800aaa2 <lfs_aligndown>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800bfe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	441a      	add	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7fe fd69 	bl	800aacc <lfs_alignup>
 800bffa:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800c002:	4619      	mov	r1, r3
 800c004:	4610      	mov	r0, r2
 800c006:	f7fe fd3c 	bl	800aa82 <lfs_min>
 800c00a:	4602      	mov	r2, r0
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6889      	ldr	r1, [r1, #8]
 800c01c:	9102      	str	r1, [sp, #8]
 800c01e:	9201      	str	r2, [sp, #4]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f7ff fe23 	bl	800bc74 <lfs_dir_getslice>
 800c02e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	da01      	bge.n	800c03a <lfs_dir_getread+0x1a4>
            return err;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	e004      	b.n	800c044 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800c03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f47f af3f 	bne.w	800bec0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3720      	adds	r7, #32
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800c04c:	b590      	push	{r4, r7, lr}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800c062:	2b00      	cmp	r3, #0
 800c064:	d001      	beq.n	800c06a <lfs_dir_traverse_filter+0x1e>
 800c066:	4b24      	ldr	r3, [pc, #144]	@ (800c0f8 <lfs_dir_traverse_filter+0xac>)
 800c068:	e000      	b.n	800c06c <lfs_dir_traverse_filter+0x20>
 800c06a:	4b24      	ldr	r3, [pc, #144]	@ (800c0fc <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800c06c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	405a      	eors	r2, r3
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d014      	beq.n	800c0a8 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fa13 	bl	800b4ae <lfs_tag_isdelete>
 800c088:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10c      	bne.n	800c0a8 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	4a19      	ldr	r2, [pc, #100]	@ (800c0f8 <lfs_dir_traverse_filter+0xac>)
 800c092:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	6819      	ldr	r1, [r3, #0]
 800c098:	4b19      	ldr	r3, [pc, #100]	@ (800c100 <lfs_dir_traverse_filter+0xb4>)
 800c09a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800c09c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800c0a0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d104      	bne.n	800c0b2 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
        return true;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e01e      	b.n	800c0f0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c0b2:	68b8      	ldr	r0, [r7, #8]
 800c0b4:	f7ff fa0e 	bl	800b4d4 <lfs_tag_type1>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0be:	d116      	bne.n	800c0ee <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800c0c0:	68b8      	ldr	r0, [r7, #8]
 800c0c2:	f7ff fa51 	bl	800b568 <lfs_tag_id>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	461c      	mov	r4, r3
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff fa4a 	bl	800b568 <lfs_tag_id>
 800c0d4:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800c0d6:	429c      	cmp	r4, r3
 800c0d8:	d809      	bhi.n	800c0ee <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800c0da:	68b8      	ldr	r0, [r7, #8]
 800c0dc:	f7ff fa37 	bl	800b54e <lfs_tag_splice>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	029a      	lsls	r2, r3, #10
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	441a      	add	r2, r3
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	601a      	str	r2, [r3, #0]
    }

    return false;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd90      	pop	{r4, r7, pc}
 800c0f8:	7ffffc00 	.word	0x7ffffc00
 800c0fc:	700ffc00 	.word	0x700ffc00
 800c100:	000ffc00 	.word	0x000ffc00

0800c104 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b0c1      	sub	sp, #260	@ 0x104
 800c108:	af04      	add	r7, sp, #16
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800c118:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800c122:	6838      	ldr	r0, [r7, #0]
 800c124:	f7ff fa3d 	bl	800b5a2 <lfs_tag_dsize>
 800c128:	4602      	mov	r2, r0
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	441a      	add	r2, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	429a      	cmp	r2, r3
 800c134:	d237      	bcs.n	800c1a6 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800c136:	6838      	ldr	r0, [r7, #0]
 800c138:	f7ff fa33 	bl	800b5a2 <lfs_tag_dsize>
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4413      	add	r3, r2
 800c142:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800c144:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800c14a:	2204      	movs	r2, #4
 800c14c:	9203      	str	r2, [sp, #12]
 800c14e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800c152:	9202      	str	r2, [sp, #8]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	9201      	str	r2, [sp, #4]
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	2304      	movs	r3, #4
 800c15c:	460a      	mov	r2, r1
 800c15e:	2100      	movs	r1, #0
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7fe fd69 	bl	800ac38 <lfs_bd_read>
 800c166:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800c16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <lfs_dir_traverse+0x74>
                    return err;
 800c172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c176:	e3a5      	b.n	800c8c4 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800c178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fd08 	bl	800ab90 <lfs_frombe32>
 800c180:	4602      	mov	r2, r0
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	4053      	eors	r3, r2
 800c186:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c18a:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3304      	adds	r3, #4
 800c196:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800c198:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c19c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800c1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	e01b      	b.n	800c1de <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800c1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	dd13      	ble.n	800c1d6 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800c1ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800c1b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800c1c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c1d4:	e003      	b.n	800c1de <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800c1dc:	e2a1      	b.n	800c722 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800c1de:	4b7e      	ldr	r3, [pc, #504]	@ (800c3d8 <lfs_dir_traverse+0x2d4>)
 800c1e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800c1e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ea:	405a      	eors	r2, r3
 800c1ec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800c1f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c1f4:	400b      	ands	r3, r1
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f040 8284 	bne.w	800c706 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800c1fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800c202:	f7ff f9b1 	bl	800b568 <lfs_tag_id>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80ef 	beq.w	800c3ec <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800c20e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c212:	2b02      	cmp	r3, #2
 800c214:	d906      	bls.n	800c224 <lfs_dir_traverse+0x120>
 800c216:	4b71      	ldr	r3, [pc, #452]	@ (800c3dc <lfs_dir_traverse+0x2d8>)
 800c218:	4a71      	ldr	r2, [pc, #452]	@ (800c3e0 <lfs_dir_traverse+0x2dc>)
 800c21a:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800c21e:	4871      	ldr	r0, [pc, #452]	@ (800c3e4 <lfs_dir_traverse+0x2e0>)
 800c220:	f014 fb52 	bl	80208c8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800c224:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c226:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c22a:	4613      	mov	r3, r2
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	33f0      	adds	r3, #240	@ 0xf0
 800c234:	443b      	add	r3, r7
 800c236:	3b98      	subs	r3, #152	@ 0x98
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c240:	4613      	mov	r3, r2
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	1a9b      	subs	r3, r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	33f0      	adds	r3, #240	@ 0xf0
 800c24a:	443b      	add	r3, r7
 800c24c:	3b94      	subs	r3, #148	@ 0x94
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c256:	4613      	mov	r3, r2
 800c258:	011b      	lsls	r3, r3, #4
 800c25a:	1a9b      	subs	r3, r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	33f0      	adds	r3, #240	@ 0xf0
 800c260:	443b      	add	r3, r7
 800c262:	3b90      	subs	r3, #144	@ 0x90
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c26c:	4613      	mov	r3, r2
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	33f0      	adds	r3, #240	@ 0xf0
 800c276:	443b      	add	r3, r7
 800c278:	3b8c      	subs	r3, #140	@ 0x8c
 800c27a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800c27e:	601a      	str	r2, [r3, #0]
 800c280:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c284:	4613      	mov	r3, r2
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	1a9b      	subs	r3, r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	33f0      	adds	r3, #240	@ 0xf0
 800c28e:	443b      	add	r3, r7
 800c290:	3b88      	subs	r3, #136	@ 0x88
 800c292:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c29c:	4613      	mov	r3, r2
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	1a9b      	subs	r3, r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	33f0      	adds	r3, #240	@ 0xf0
 800c2a6:	443b      	add	r3, r7
 800c2a8:	3b84      	subs	r3, #132	@ 0x84
 800c2aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	1a9b      	subs	r3, r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	33f0      	adds	r3, #240	@ 0xf0
 800c2be:	443b      	add	r3, r7
 800c2c0:	3b80      	subs	r3, #128	@ 0x80
 800c2c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	1a9b      	subs	r3, r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	33f0      	adds	r3, #240	@ 0xf0
 800c2d6:	443b      	add	r3, r7
 800c2d8:	3b7c      	subs	r3, #124	@ 0x7c
 800c2da:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800c2de:	801a      	strh	r2, [r3, #0]
 800c2e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	011b      	lsls	r3, r3, #4
 800c2e8:	1a9b      	subs	r3, r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	33f0      	adds	r3, #240	@ 0xf0
 800c2ee:	443b      	add	r3, r7
 800c2f0:	3b7a      	subs	r3, #122	@ 0x7a
 800c2f2:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800c2f6:	801a      	strh	r2, [r3, #0]
 800c2f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	33f0      	adds	r3, #240	@ 0xf0
 800c306:	443b      	add	r3, r7
 800c308:	3b78      	subs	r3, #120	@ 0x78
 800c30a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800c30e:	801a      	strh	r2, [r3, #0]
 800c310:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c314:	4613      	mov	r3, r2
 800c316:	011b      	lsls	r3, r3, #4
 800c318:	1a9b      	subs	r3, r3, r2
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	33f0      	adds	r3, #240	@ 0xf0
 800c31e:	443b      	add	r3, r7
 800c320:	3b74      	subs	r3, #116	@ 0x74
 800c322:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c32c:	4613      	mov	r3, r2
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	1a9b      	subs	r3, r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	33f0      	adds	r3, #240	@ 0xf0
 800c336:	443b      	add	r3, r7
 800c338:	3b70      	subs	r3, #112	@ 0x70
 800c33a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c344:	4613      	mov	r3, r2
 800c346:	011b      	lsls	r3, r3, #4
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	33f0      	adds	r3, #240	@ 0xf0
 800c34e:	443b      	add	r3, r7
 800c350:	3b6c      	subs	r3, #108	@ 0x6c
 800c352:	6019      	str	r1, [r3, #0]
 800c354:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c358:	4613      	mov	r3, r2
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	1a9b      	subs	r3, r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	33f0      	adds	r3, #240	@ 0xf0
 800c362:	443b      	add	r3, r7
 800c364:	3b68      	subs	r3, #104	@ 0x68
 800c366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c370:	4613      	mov	r3, r2
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	33f0      	adds	r3, #240	@ 0xf0
 800c37a:	443b      	add	r3, r7
 800c37c:	3b68      	subs	r3, #104	@ 0x68
 800c37e:	3304      	adds	r3, #4
 800c380:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800c384:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c388:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800c38c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c390:	3301      	adds	r3, #1
 800c392:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e8 <lfs_dir_traverse+0x2e4>)
 800c3b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800c3ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c3be:	1e5a      	subs	r2, r3, #1
 800c3c0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	011b      	lsls	r3, r3, #4
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	3328      	adds	r3, #40	@ 0x28
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800c3d6:	e19d      	b.n	800c714 <lfs_dir_traverse+0x610>
 800c3d8:	7ff00000 	.word	0x7ff00000
 800c3dc:	08023d64 	.word	0x08023d64
 800c3e0:	08026c90 	.word	0x08026c90
 800c3e4:	08023c38 	.word	0x08023c38
 800c3e8:	0800c04d 	.word	0x0800c04d
            }
        }

popped:
 800c3ec:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800c3ee:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800c3f2:	f7ff f8b9 	bl	800b568 <lfs_tag_id>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d015      	beq.n	800c428 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800c3fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff f8b2 	bl	800b568 <lfs_tag_id>
 800c404:	4603      	mov	r3, r0
 800c406:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800c408:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800c40c:	4293      	cmp	r3, r2
 800c40e:	f200 817c 	bhi.w	800c70a <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800c412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff f8a7 	bl	800b568 <lfs_tag_id>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800c422:	4293      	cmp	r3, r2
 800c424:	f240 8171 	bls.w	800c70a <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800c428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff f872 	bl	800b514 <lfs_tag_type3>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f43f ae75 	beq.w	800c122 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800c438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff f86a 	bl	800b514 <lfs_tag_type3>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	f240 1301 	movw	r3, #257	@ 0x101
 800c448:	429a      	cmp	r2, r3
 800c44a:	f040 80e0 	bne.w	800c60e <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800c44e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c452:	4ab1      	ldr	r2, [pc, #708]	@ (800c718 <lfs_dir_traverse+0x614>)
 800c454:	4293      	cmp	r3, r2
 800c456:	f000 815a 	beq.w	800c70e <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800c45a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c45e:	4613      	mov	r3, r2
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	33f0      	adds	r3, #240	@ 0xf0
 800c468:	443b      	add	r3, r7
 800c46a:	3b98      	subs	r3, #152	@ 0x98
 800c46c:	4618      	mov	r0, r3
 800c46e:	233c      	movs	r3, #60	@ 0x3c
 800c470:	461a      	mov	r2, r3
 800c472:	2100      	movs	r1, #0
 800c474:	f014 fe04 	bl	8021080 <memset>
 800c478:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c47c:	4613      	mov	r3, r2
 800c47e:	011b      	lsls	r3, r3, #4
 800c480:	1a9b      	subs	r3, r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	33f0      	adds	r3, #240	@ 0xf0
 800c486:	443b      	add	r3, r7
 800c488:	3b98      	subs	r3, #152	@ 0x98
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c492:	4613      	mov	r3, r2
 800c494:	011b      	lsls	r3, r3, #4
 800c496:	1a9b      	subs	r3, r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	33f0      	adds	r3, #240	@ 0xf0
 800c49c:	443b      	add	r3, r7
 800c49e:	3b94      	subs	r3, #148	@ 0x94
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	011b      	lsls	r3, r3, #4
 800c4ac:	1a9b      	subs	r3, r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	33f0      	adds	r3, #240	@ 0xf0
 800c4b2:	443b      	add	r3, r7
 800c4b4:	3b90      	subs	r3, #144	@ 0x90
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c4be:	4613      	mov	r3, r2
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	1a9b      	subs	r3, r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	33f0      	adds	r3, #240	@ 0xf0
 800c4c8:	443b      	add	r3, r7
 800c4ca:	3b8c      	subs	r3, #140	@ 0x8c
 800c4cc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	011b      	lsls	r3, r3, #4
 800c4da:	1a9b      	subs	r3, r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	33f0      	adds	r3, #240	@ 0xf0
 800c4e0:	443b      	add	r3, r7
 800c4e2:	3b88      	subs	r3, #136	@ 0x88
 800c4e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	1a9b      	subs	r3, r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	33f0      	adds	r3, #240	@ 0xf0
 800c4f8:	443b      	add	r3, r7
 800c4fa:	3b84      	subs	r3, #132	@ 0x84
 800c4fc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c506:	4613      	mov	r3, r2
 800c508:	011b      	lsls	r3, r3, #4
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	33f0      	adds	r3, #240	@ 0xf0
 800c510:	443b      	add	r3, r7
 800c512:	3b80      	subs	r3, #128	@ 0x80
 800c514:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c51e:	4613      	mov	r3, r2
 800c520:	011b      	lsls	r3, r3, #4
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	33f0      	adds	r3, #240	@ 0xf0
 800c528:	443b      	add	r3, r7
 800c52a:	3b7c      	subs	r3, #124	@ 0x7c
 800c52c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c536:	4613      	mov	r3, r2
 800c538:	011b      	lsls	r3, r3, #4
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	33f0      	adds	r3, #240	@ 0xf0
 800c540:	443b      	add	r3, r7
 800c542:	3b7a      	subs	r3, #122	@ 0x7a
 800c544:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800c548:	801a      	strh	r2, [r3, #0]
 800c54a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c54e:	4613      	mov	r3, r2
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	33f0      	adds	r3, #240	@ 0xf0
 800c558:	443b      	add	r3, r7
 800c55a:	3b78      	subs	r3, #120	@ 0x78
 800c55c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800c560:	801a      	strh	r2, [r3, #0]
 800c562:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c566:	4613      	mov	r3, r2
 800c568:	011b      	lsls	r3, r3, #4
 800c56a:	1a9b      	subs	r3, r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	33f0      	adds	r3, #240	@ 0xf0
 800c570:	443b      	add	r3, r7
 800c572:	3b74      	subs	r3, #116	@ 0x74
 800c574:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800c57e:	4613      	mov	r3, r2
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	1a9b      	subs	r3, r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	33f0      	adds	r3, #240	@ 0xf0
 800c588:	443b      	add	r3, r7
 800c58a:	3b70      	subs	r3, #112	@ 0x70
 800c58c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800c590:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800c592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c596:	3301      	adds	r3, #1
 800c598:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800c59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe fff2 	bl	800b588 <lfs_tag_size>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fe ffdb 	bl	800b568 <lfs_tag_id>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800c5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5bc:	60bb      	str	r3, [r7, #8]
            off = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800c5c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5c6:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800c5d4:	4b51      	ldr	r3, [pc, #324]	@ (800c71c <lfs_dir_traverse+0x618>)
 800c5d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800c5da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c5de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800c5e2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800c5e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800c5ea:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800c5f4:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800c5f8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c604:	4413      	add	r3, r2
 800c606:	b29b      	uxth	r3, r3
 800c608:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800c60c:	e589      	b.n	800c122 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800c60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe ff7f 	bl	800b514 <lfs_tag_type3>
 800c616:	4603      	mov	r3, r0
 800c618:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800c61c:	d159      	bne.n	800c6d2 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800c61e:	2300      	movs	r3, #0
 800c620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c624:	e04b      	b.n	800c6be <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800c626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c62a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800c62e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	461a      	mov	r2, r3
 800c63c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c640:	4413      	add	r3, r2
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800c648:	051c      	lsls	r4, r3, #20
 800c64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe ff8b 	bl	800b568 <lfs_tag_id>
 800c652:	4603      	mov	r3, r0
 800c654:	461a      	mov	r2, r3
 800c656:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800c65a:	4413      	add	r3, r2
 800c65c:	029b      	lsls	r3, r3, #10
 800c65e:	ea44 0103 	orr.w	r1, r4, r3
 800c662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c666:	4613      	mov	r3, r2
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4413      	add	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	461a      	mov	r2, r3
 800c670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c674:	4413      	add	r3, r2
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800c67a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c67e:	4613      	mov	r3, r2
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	461a      	mov	r2, r3
 800c688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c68c:	4413      	add	r3, r2
 800c68e:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800c690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c694:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c698:	4798      	blx	r3
 800c69a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800c69e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	da02      	bge.n	800c6ac <lfs_dir_traverse+0x5a8>
                    return res;
 800c6a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6aa:	e10b      	b.n	800c8c4 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800c6ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d12e      	bne.n	800c712 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800c6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe ff61 	bl	800b588 <lfs_tag_size>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d3aa      	bcc.n	800c626 <lfs_dir_traverse+0x522>
 800c6d0:	e527      	b.n	800c122 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800c6d2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800c6d6:	029a      	lsls	r2, r3, #10
 800c6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6da:	18d1      	adds	r1, r2, r3
 800c6dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c6e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c6e4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c6e8:	4798      	blx	r3
 800c6ea:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800c6ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da02      	bge.n	800c6fc <lfs_dir_traverse+0x5f8>
                return res;
 800c6f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c6fa:	e0e3      	b.n	800c8c4 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800c6fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <lfs_dir_traverse+0x61c>
 800c704:	e50d      	b.n	800c122 <lfs_dir_traverse+0x1e>
                continue;
 800c706:	bf00      	nop
 800c708:	e50b      	b.n	800c122 <lfs_dir_traverse+0x1e>
            continue;
 800c70a:	bf00      	nop
 800c70c:	e509      	b.n	800c122 <lfs_dir_traverse+0x1e>
                continue;
 800c70e:	bf00      	nop
 800c710:	e507      	b.n	800c122 <lfs_dir_traverse+0x1e>
                    break;
 800c712:	bf00      	nop
        {
 800c714:	e505      	b.n	800c122 <lfs_dir_traverse+0x1e>
 800c716:	bf00      	nop
 800c718:	0800c04d 	.word	0x0800c04d
 800c71c:	600ffc00 	.word	0x600ffc00
                break;
 800c720:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800c722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 80ca 	beq.w	800c8c0 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800c72c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c730:	1e5a      	subs	r2, r3, #1
 800c732:	4613      	mov	r3, r2
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	1a9b      	subs	r3, r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	33f0      	adds	r3, #240	@ 0xf0
 800c73c:	443b      	add	r3, r7
 800c73e:	3b98      	subs	r3, #152	@ 0x98
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800c744:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c748:	1e5a      	subs	r2, r3, #1
 800c74a:	4613      	mov	r3, r2
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	1a9b      	subs	r3, r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	33f0      	adds	r3, #240	@ 0xf0
 800c754:	443b      	add	r3, r7
 800c756:	3b94      	subs	r3, #148	@ 0x94
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800c75c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c760:	1e5a      	subs	r2, r3, #1
 800c762:	4613      	mov	r3, r2
 800c764:	011b      	lsls	r3, r3, #4
 800c766:	1a9b      	subs	r3, r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	33f0      	adds	r3, #240	@ 0xf0
 800c76c:	443b      	add	r3, r7
 800c76e:	3b90      	subs	r3, #144	@ 0x90
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800c774:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c778:	1e5a      	subs	r2, r3, #1
 800c77a:	4613      	mov	r3, r2
 800c77c:	011b      	lsls	r3, r3, #4
 800c77e:	1a9b      	subs	r3, r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	33f0      	adds	r3, #240	@ 0xf0
 800c784:	443b      	add	r3, r7
 800c786:	3b8c      	subs	r3, #140	@ 0x8c
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800c78e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	4613      	mov	r3, r2
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	1a9b      	subs	r3, r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	33f0      	adds	r3, #240	@ 0xf0
 800c79e:	443b      	add	r3, r7
 800c7a0:	3b88      	subs	r3, #136	@ 0x88
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800c7a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c7ac:	1e5a      	subs	r2, r3, #1
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	011b      	lsls	r3, r3, #4
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	33f0      	adds	r3, #240	@ 0xf0
 800c7b8:	443b      	add	r3, r7
 800c7ba:	3b84      	subs	r3, #132	@ 0x84
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800c7c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c7c6:	1e5a      	subs	r2, r3, #1
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	1a9b      	subs	r3, r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	33f0      	adds	r3, #240	@ 0xf0
 800c7d2:	443b      	add	r3, r7
 800c7d4:	3b80      	subs	r3, #128	@ 0x80
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800c7dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c7e0:	1e5a      	subs	r2, r3, #1
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	011b      	lsls	r3, r3, #4
 800c7e6:	1a9b      	subs	r3, r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	33f0      	adds	r3, #240	@ 0xf0
 800c7ec:	443b      	add	r3, r7
 800c7ee:	3b7c      	subs	r3, #124	@ 0x7c
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800c7f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c7fa:	1e5a      	subs	r2, r3, #1
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	011b      	lsls	r3, r3, #4
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	33f0      	adds	r3, #240	@ 0xf0
 800c806:	443b      	add	r3, r7
 800c808:	3b7a      	subs	r3, #122	@ 0x7a
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800c810:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c814:	1e5a      	subs	r2, r3, #1
 800c816:	4613      	mov	r3, r2
 800c818:	011b      	lsls	r3, r3, #4
 800c81a:	1a9b      	subs	r3, r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	33f0      	adds	r3, #240	@ 0xf0
 800c820:	443b      	add	r3, r7
 800c822:	3b78      	subs	r3, #120	@ 0x78
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800c82a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c82e:	1e5a      	subs	r2, r3, #1
 800c830:	4613      	mov	r3, r2
 800c832:	011b      	lsls	r3, r3, #4
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	33f0      	adds	r3, #240	@ 0xf0
 800c83a:	443b      	add	r3, r7
 800c83c:	3b74      	subs	r3, #116	@ 0x74
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800c844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c848:	1e5a      	subs	r2, r3, #1
 800c84a:	4613      	mov	r3, r2
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	33f0      	adds	r3, #240	@ 0xf0
 800c854:	443b      	add	r3, r7
 800c856:	3b70      	subs	r3, #112	@ 0x70
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800c85e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c862:	1e5a      	subs	r2, r3, #1
 800c864:	4613      	mov	r3, r2
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	1a9b      	subs	r3, r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	33f0      	adds	r3, #240	@ 0xf0
 800c86e:	443b      	add	r3, r7
 800c870:	3b6c      	subs	r3, #108	@ 0x6c
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800c876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c87a:	1e5a      	subs	r2, r3, #1
 800c87c:	4613      	mov	r3, r2
 800c87e:	011b      	lsls	r3, r3, #4
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	33f0      	adds	r3, #240	@ 0xf0
 800c886:	443b      	add	r3, r7
 800c888:	3b68      	subs	r3, #104	@ 0x68
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800c890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c894:	1e5a      	subs	r2, r3, #1
 800c896:	4613      	mov	r3, r2
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	33f0      	adds	r3, #240	@ 0xf0
 800c8a0:	443b      	add	r3, r7
 800c8a2:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800c8a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c8aa:	3204      	adds	r2, #4
 800c8ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8b0:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800c8b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800c8be:	e596      	b.n	800c3ee <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800c8c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	37f4      	adds	r7, #244	@ 0xf4
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd90      	pop	{r4, r7, pc}

0800c8cc <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ce:	b0a5      	sub	sp, #148	@ 0x94
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	6178      	str	r0, [r7, #20]
 800c8d4:	6139      	str	r1, [r7, #16]
 800c8d6:	60fa      	str	r2, [r7, #12]
 800c8d8:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800c8da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8de:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00f      	beq.n	800c908 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d206      	bcs.n	800c902 <lfs_dir_fetchmatch+0x36>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d302      	bcc.n	800c908 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800c902:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800c906:	e3a4      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800c908:	2300      	movs	r3, #0
 800c90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c90c:	2300      	movs	r3, #0
 800c90e:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800c914:	2300      	movs	r3, #0
 800c916:	677b      	str	r3, [r7, #116]	@ 0x74
 800c918:	e05a      	b.n	800c9d0 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800c91a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800c91c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800c924:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800c926:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c92a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c92c:	0092      	lsls	r2, r2, #2
 800c92e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800c930:	2104      	movs	r1, #4
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	9202      	str	r2, [sp, #8]
 800c936:	2200      	movs	r2, #0
 800c938:	9201      	str	r2, [sp, #4]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2304      	movs	r3, #4
 800c93e:	4602      	mov	r2, r0
 800c940:	2100      	movs	r1, #0
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f7fe f978 	bl	800ac38 <lfs_bd_read>
 800c948:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800c94a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	3378      	adds	r3, #120	@ 0x78
 800c950:	f107 0208 	add.w	r2, r7, #8
 800c954:	4413      	add	r3, r2
 800c956:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe f901 	bl	800ab62 <lfs_fromle32>
 800c960:	4602      	mov	r2, r0
 800c962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	3378      	adds	r3, #120	@ 0x78
 800c968:	f107 0108 	add.w	r1, r7, #8
 800c96c:	440b      	add	r3, r1
 800c96e:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800c972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d005      	beq.n	800c984 <lfs_dir_fetchmatch+0xb8>
 800c978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c97a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800c97e:	d001      	beq.n	800c984 <lfs_dir_fetchmatch+0xb8>
            return err;
 800c980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c982:	e366      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800c984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c986:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800c98a:	d01e      	beq.n	800c9ca <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800c98c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	3378      	adds	r3, #120	@ 0x78
 800c992:	f107 0208 	add.w	r2, r7, #8
 800c996:	4413      	add	r3, r2
 800c998:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800c99c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c99e:	3301      	adds	r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	bfb8      	it	lt
 800c9a8:	425b      	neglt	r3, r3
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	3378      	adds	r3, #120	@ 0x78
 800c9ae:	f107 0108 	add.w	r1, r7, #8
 800c9b2:	440b      	add	r3, r1
 800c9b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f7fe f8c3 	bl	800ab46 <lfs_scmp>
 800c9c0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dd01      	ble.n	800c9ca <lfs_dir_fetchmatch+0xfe>
            r = i;
 800c9c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800c9ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	dda1      	ble.n	800c91a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800c9d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	bfb8      	it	lt
 800c9e0:	425b      	neglt	r3, r3
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800c9ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	bfb8      	it	lt
 800c9fa:	425b      	neglt	r3, r3
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4413      	add	r3, r2
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800ca08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	bfb8      	it	lt
 800ca12:	425b      	neglt	r3, r3
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	3378      	adds	r3, #120	@ 0x78
 800ca18:	f107 0208 	add.w	r2, r7, #8
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca30:	e2fb      	b.n	800d02a <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800ca36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca3a:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800ca42:	4aa9      	ldr	r2, [pc, #676]	@ (800cce8 <lfs_dir_fetchmatch+0x41c>)
 800ca44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ca48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca4c:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800ca50:	2300      	movs	r3, #0
 800ca52:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800ca56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca58:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800ca60:	2300      	movs	r3, #0
 800ca62:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe f884 	bl	800ab78 <lfs_tole32>
 800ca70:	4602      	mov	r2, r0
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	2204      	movs	r2, #4
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca82:	f005 fef5 	bl	8012870 <lfs_crc>
 800ca86:	4603      	mov	r3, r0
 800ca88:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe f867 	bl	800ab62 <lfs_fromle32>
 800ca94:	4602      	mov	r2, r0
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800ca9a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ca9c:	f7fe fd81 	bl	800b5a2 <lfs_tag_dsize>
 800caa0:	4602      	mov	r2, r0
 800caa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caa4:	4413      	add	r3, r2
 800caa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800caa8:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2204      	movs	r2, #4
 800cab6:	9203      	str	r2, [sp, #12]
 800cab8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800cabc:	9202      	str	r2, [sp, #8]
 800cabe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cac0:	9201      	str	r2, [sp, #4]
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	4603      	mov	r3, r0
 800cac6:	460a      	mov	r2, r1
 800cac8:	2100      	movs	r1, #0
 800caca:	6978      	ldr	r0, [r7, #20]
 800cacc:	f7fe f8b4 	bl	800ac38 <lfs_bd_read>
 800cad0:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800cad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d006      	beq.n	800cae6 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800cad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cada:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cade:	f000 81d6 	beq.w	800ce8e <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800cae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae4:	e2b5      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800cae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800caec:	2204      	movs	r2, #4
 800caee:	4618      	mov	r0, r3
 800caf0:	f005 febe 	bl	8012870 <lfs_crc>
 800caf4:	4603      	mov	r3, r0
 800caf6:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800caf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe f848 	bl	800ab90 <lfs_frombe32>
 800cb00:	4602      	mov	r2, r0
 800cb02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb04:	4053      	eors	r3, r2
 800cb06:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fcc1 	bl	800b492 <lfs_tag_isvalid>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f083 0301 	eor.w	r3, r3, #1
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00b      	beq.n	800cb34 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800cb1c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800cb1e:	f7fe fce9 	bl	800b4f4 <lfs_tag_type2>
 800cb22:	4603      	mov	r3, r0
 800cb24:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800cb28:	bf0c      	ite	eq
 800cb2a:	2301      	moveq	r3, #1
 800cb2c:	2300      	movne	r3, #0
 800cb2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800cb32:	e1bb      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800cb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fe fd33 	bl	800b5a2 <lfs_tag_dsize>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb40:	441a      	add	r2, r3
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	f200 81a2 	bhi.w	800ce92 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800cb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb50:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fccd 	bl	800b4f4 <lfs_tag_type2>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800cb60:	d15e      	bne.n	800cc20 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800cb62:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb68:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb70:	3204      	adds	r2, #4
 800cb72:	2104      	movs	r1, #4
 800cb74:	9103      	str	r1, [sp, #12]
 800cb76:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800cb7a:	9102      	str	r1, [sp, #8]
 800cb7c:	9201      	str	r2, [sp, #4]
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	4623      	mov	r3, r4
 800cb82:	4602      	mov	r2, r0
 800cb84:	2100      	movs	r1, #0
 800cb86:	6978      	ldr	r0, [r7, #20]
 800cb88:	f7fe f856 	bl	800ac38 <lfs_bd_read>
 800cb8c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800cb8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d006      	beq.n	800cba2 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800cb94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb96:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cb9a:	f000 817c 	beq.w	800ce96 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800cb9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800cba0:	e257      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800cba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fd ffdc 	bl	800ab62 <lfs_fromle32>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800cbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	f040 8171 	bne.w	800ce9a <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fcba 	bl	800b534 <lfs_tag_chunk>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	07db      	lsls	r3, r3, #31
 800cbc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbc6:	4053      	eors	r3, r2
 800cbc8:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbce:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800cbd2:	2204      	movs	r2, #4
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f005 fe4b 	bl	8012870 <lfs_crc>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800cbe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800cbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe fcdb 	bl	800b5a2 <lfs_tag_dsize>
 800cbec:	4602      	mov	r2, r0
 800cbee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf0:	441a      	add	r2, r3
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbfa:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800cc02:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800cc04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800cc0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800cc16:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800cc18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc1e:	e73c      	b.n	800ca9a <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800cc20:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc28:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	681c      	ldr	r4, [r3, #0]
 800cc2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc30:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800cc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe fcb4 	bl	800b5a2 <lfs_tag_dsize>
 800cc3a:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800cc3c:	3b04      	subs	r3, #4
 800cc3e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800cc42:	9203      	str	r2, [sp, #12]
 800cc44:	9302      	str	r3, [sp, #8]
 800cc46:	9501      	str	r5, [sp, #4]
 800cc48:	9400      	str	r4, [sp, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	2100      	movs	r1, #0
 800cc50:	6978      	ldr	r0, [r7, #20]
 800cc52:	f7fe f98e 	bl	800af72 <lfs_bd_crc>
 800cc56:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800cc58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d006      	beq.n	800cc6c <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800cc5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc60:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cc64:	f000 811b 	beq.w	800ce9e <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800cc68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc6a:	e1f2      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fc30 	bl	800b4d4 <lfs_tag_type1>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d113      	bne.n	800cca2 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fc73 	bl	800b568 <lfs_tag_id>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461a      	mov	r2, r3
 800cc86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	f200 80b6 	bhi.w	800cdfc <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe fc68 	bl	800b568 <lfs_tag_id>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800cca0:	e0ac      	b.n	800cdfc <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800cca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fe fc15 	bl	800b4d4 <lfs_tag_type1>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccb0:	d13a      	bne.n	800cd28 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800ccb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fc4a 	bl	800b54e <lfs_tag_splice>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800ccc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ccca:	4b08      	ldr	r3, [pc, #32]	@ (800ccec <lfs_dir_fetchmatch+0x420>)
 800cccc:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ccce:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800ccd2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800ccd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d109      	bne.n	800ccf0 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800ccdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cce2:	663b      	str	r3, [r7, #96]	@ 0x60
 800cce4:	e08a      	b.n	800cdfc <lfs_dir_fetchmatch+0x530>
 800cce6:	bf00      	nop
 800cce8:	08023da4 	.word	0x08023da4
 800ccec:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800ccf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccf6:	f000 8081 	beq.w	800cdfc <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fc33 	bl	800b568 <lfs_tag_id>
 800cd02:	4603      	mov	r3, r0
 800cd04:	461c      	mov	r4, r3
 800cd06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe fc2d 	bl	800b568 <lfs_tag_id>
 800cd0e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800cd10:	429c      	cmp	r4, r3
 800cd12:	d873      	bhi.n	800cdfc <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fc19 	bl	800b54e <lfs_tag_splice>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	029a      	lsls	r2, r3, #10
 800cd20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd22:	4413      	add	r3, r2
 800cd24:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd26:	e069      	b.n	800cdfc <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800cd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe fbd2 	bl	800b4d4 <lfs_tag_type1>
 800cd30:	4603      	mov	r3, r0
 800cd32:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cd36:	d132      	bne.n	800cd9e <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800cd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fe fbfa 	bl	800b534 <lfs_tag_chunk>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	bf14      	ite	ne
 800cd4a:	2301      	movne	r3, #1
 800cd4c:	2300      	moveq	r3, #0
 800cd4e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800cd52:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd60:	3204      	adds	r2, #4
 800cd62:	2108      	movs	r1, #8
 800cd64:	9103      	str	r1, [sp, #12]
 800cd66:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800cd6a:	9102      	str	r1, [sp, #8]
 800cd6c:	9201      	str	r2, [sp, #4]
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	4623      	mov	r3, r4
 800cd72:	4602      	mov	r2, r0
 800cd74:	2100      	movs	r1, #0
 800cd76:	6978      	ldr	r0, [r7, #20]
 800cd78:	f7fd ff5e 	bl	800ac38 <lfs_bd_read>
 800cd7c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800cd7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800cd84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd86:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cd8a:	f000 808a 	beq.w	800cea2 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800cd8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd90:	e15f      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800cd92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fb47 	bl	800b42a <lfs_pair_fromle32>
 800cd9c:	e02e      	b.n	800cdfc <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800cd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe fbb7 	bl	800b514 <lfs_tag_type3>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d124      	bne.n	800cdfc <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800cdb2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdb8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cdc0:	3204      	adds	r2, #4
 800cdc2:	2108      	movs	r1, #8
 800cdc4:	9103      	str	r1, [sp, #12]
 800cdc6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800cdca:	9102      	str	r1, [sp, #8]
 800cdcc:	9201      	str	r2, [sp, #4]
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	4623      	mov	r3, r4
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	6978      	ldr	r0, [r7, #20]
 800cdd8:	f7fd ff2e 	bl	800ac38 <lfs_bd_read>
 800cddc:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800cdde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800cde4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cde6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cdea:	d05c      	beq.n	800cea6 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800cdec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fe fcd5 	bl	800b7a0 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800cdfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce02:	405a      	eors	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	4013      	ands	r3, r2
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f47f ae46 	bne.w	800ca9a <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ce0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ce14:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800ce16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce18:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce1c:	f107 0220 	add.w	r2, r7, #32
 800ce20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce24:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ce28:	4798      	blx	r3
 800ce2a:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800ce2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	da05      	bge.n	800ce3e <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800ce32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce34:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ce38:	d037      	beq.n	800ceaa <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800ce3c:	e109      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800ce3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d102      	bne.n	800ce4a <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce48:	e627      	b.n	800ca9a <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800ce4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce4e:	405a      	eors	r2, r3
 800ce50:	4b82      	ldr	r3, [pc, #520]	@ (800d05c <lfs_dir_fetchmatch+0x790>)
 800ce52:	4013      	ands	r3, r2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800ce58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce5e:	e61c      	b.n	800ca9a <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800ce60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	f47f ae19 	bne.w	800ca9a <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ce68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fb7c 	bl	800b568 <lfs_tag_id>
 800ce70:	4603      	mov	r3, r0
 800ce72:	461c      	mov	r4, r3
 800ce74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe fb76 	bl	800b568 <lfs_tag_id>
 800ce7c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	f63f ae0b 	bhi.w	800ca9a <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ce84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce8c:	e605      	b.n	800ca9a <lfs_dir_fetchmatch+0x1ce>
                    break;
 800ce8e:	bf00      	nop
 800ce90:	e00c      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                break;
 800ce92:	bf00      	nop
 800ce94:	e00a      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ce96:	bf00      	nop
 800ce98:	e008      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                    break;
 800ce9a:	bf00      	nop
 800ce9c:	e006      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                    break;
 800ce9e:	bf00      	nop
 800cea0:	e004      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                        break;
 800cea2:	bf00      	nop
 800cea4:	e002      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                        break;
 800cea6:	bf00      	nop
 800cea8:	e000      	b.n	800ceac <lfs_dir_fetchmatch+0x5e0>
                        break;
 800ceaa:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d000      	beq.n	800ceb6 <lfs_dir_fetchmatch+0x5ea>
 800ceb4:	e017      	b.n	800cee6 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fa2f 	bl	800b31c <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800cebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cec0:	3301      	adds	r3, #1
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	bfb8      	it	lt
 800ceca:	425b      	neglt	r3, r3
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	3378      	adds	r3, #120	@ 0x78
 800ced0:	f107 0208 	add.w	r2, r7, #8
 800ced4:	4413      	add	r3, r2
 800ced6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800cede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cee0:	3301      	adds	r3, #1
 800cee2:	673b      	str	r3, [r7, #112]	@ 0x70
 800cee4:	e0a1      	b.n	800d02a <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2200      	movs	r2, #0
 800ceea:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800ceec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d03a      	beq.n	800cf6a <lfs_dir_fetchmatch+0x69e>
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cefc:	6a12      	ldr	r2, [r2, #32]
 800cefe:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf02:	fb01 f202 	mul.w	r2, r1, r2
 800cf06:	1a9b      	subs	r3, r3, r2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d12e      	bne.n	800cf6a <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800cf0c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d02a      	beq.n	800cf6a <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800cf14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf18:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800cf1a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf20:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	693a      	ldr	r2, [r7, #16]
 800cf28:	68d2      	ldr	r2, [r2, #12]
 800cf2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf2c:	f107 001c 	add.w	r0, r7, #28
 800cf30:	9003      	str	r0, [sp, #12]
 800cf32:	9102      	str	r1, [sp, #8]
 800cf34:	9201      	str	r2, [sp, #4]
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	462b      	mov	r3, r5
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6978      	ldr	r0, [r7, #20]
 800cf40:	f7fe f817 	bl	800af72 <lfs_bd_crc>
 800cf44:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800cf46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d005      	beq.n	800cf58 <lfs_dir_fetchmatch+0x68c>
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800cf52:	d001      	beq.n	800cf58 <lfs_dir_fetchmatch+0x68c>
                    return err;
 800cf54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf56:	e07c      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800cf58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	bf0c      	ite	eq
 800cf60:	2301      	moveq	r3, #1
 800cf62:	2300      	movne	r3, #0
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	333c      	adds	r3, #60	@ 0x3c
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	4611      	mov	r1, r2
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fbb4 	bl	800b6e0 <lfs_gstate_hasmovehere>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d028      	beq.n	800cfd0 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe faf0 	bl	800b568 <lfs_tag_id>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461c      	mov	r4, r3
 800cf8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe faea 	bl	800b568 <lfs_tag_id>
 800cf94:	4603      	mov	r3, r0
 800cf96:	429c      	cmp	r4, r3
 800cf98:	d104      	bne.n	800cfa4 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800cf9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cfa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cfa2:	e015      	b.n	800cfd0 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800cfa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cfaa:	d011      	beq.n	800cfd0 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fad9 	bl	800b568 <lfs_tag_id>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461c      	mov	r4, r3
 800cfba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe fad3 	bl	800b568 <lfs_tag_id>
 800cfc2:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d203      	bcs.n	800cfd0 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800cfc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfca:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800cfce:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800cfd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d010      	beq.n	800cffa <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800cfd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fac4 	bl	800b568 <lfs_tag_id>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	8a9b      	ldrh	r3, [r3, #20]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fd fd49 	bl	800aa82 <lfs_min>
 800cff0:	4603      	mov	r3, r0
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cff8:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800cffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fa48 	bl	800b492 <lfs_tag_isvalid>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <lfs_dir_fetchmatch+0x740>
            return besttag;
 800d008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d00a:	e022      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800d00c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe faaa 	bl	800b568 <lfs_tag_id>
 800d014:	4603      	mov	r3, r0
 800d016:	461a      	mov	r2, r3
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	8a9b      	ldrh	r3, [r3, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d202      	bcs.n	800d026 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800d020:	f06f 0301 	mvn.w	r3, #1
 800d024:	e015      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800d026:	2300      	movs	r3, #0
 800d028:	e013      	b.n	800d052 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800d02a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	f77f ad00 	ble.w	800ca32 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4909      	ldr	r1, [pc, #36]	@ (800d060 <lfs_dir_fetchmatch+0x794>)
 800d03c:	9101      	str	r1, [sp, #4]
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	4613      	mov	r3, r2
 800d042:	f240 5259 	movw	r2, #1369	@ 0x559
 800d046:	4907      	ldr	r1, [pc, #28]	@ (800d064 <lfs_dir_fetchmatch+0x798>)
 800d048:	4807      	ldr	r0, [pc, #28]	@ (800d068 <lfs_dir_fetchmatch+0x79c>)
 800d04a:	f013 fee9 	bl	8020e20 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800d04e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800d052:	4618      	mov	r0, r3
 800d054:	3784      	adds	r7, #132	@ 0x84
 800d056:	46bd      	mov	sp, r7
 800d058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	7ffffc00 	.word	0x7ffffc00
 800d060:	08023d60 	.word	0x08023d60
 800d064:	08023c38 	.word	0x08023c38
 800d068:	08023d6c 	.word	0x08023d6c

0800d06c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af04      	add	r7, sp, #16
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800d078:	2300      	movs	r3, #0
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	2300      	movs	r3, #0
 800d07e:	9302      	str	r3, [sp, #8]
 800d080:	2300      	movs	r3, #0
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f7ff fc1a 	bl	800c8cc <lfs_dir_fetchmatch>
 800d098:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08a      	sub	sp, #40	@ 0x28
 800d0a8:	af02      	add	r7, sp, #8
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800d0b0:	f107 0310 	add.w	r3, r7, #16
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	4b12      	ldr	r3, [pc, #72]	@ (800d100 <lfs_dir_getgstate+0x5c>)
 800d0b8:	4a12      	ldr	r2, [pc, #72]	@ (800d104 <lfs_dir_getgstate+0x60>)
 800d0ba:	68b9      	ldr	r1, [r7, #8]
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f7fe fecf 	bl	800be60 <lfs_dir_get>
 800d0c2:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	da05      	bge.n	800d0d6 <lfs_dir_getgstate+0x32>
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f113 0f02 	cmn.w	r3, #2
 800d0d0:	d001      	beq.n	800d0d6 <lfs_dir_getgstate+0x32>
        return res;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	e00f      	b.n	800d0f6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f113 0f02 	cmn.w	r3, #2
 800d0dc:	d00a      	beq.n	800d0f4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fb1c 	bl	800b720 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800d0e8:	f107 0310 	add.w	r3, r7, #16
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7fe fa6b 	bl	800b5ca <lfs_gstate_xor>
    }

    return 0;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3720      	adds	r7, #32
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	7ff0000c 	.word	0x7ff0000c
 800d104:	7ff00000 	.word	0x7ff00000

0800d108 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	@ 0x28
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	4613      	mov	r3, r2
 800d116:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800d118:	88fb      	ldrh	r3, [r7, #6]
 800d11a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800d11e:	4293      	cmp	r3, r2
 800d120:	d10b      	bne.n	800d13a <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	3308      	adds	r3, #8
 800d126:	4932      	ldr	r1, [pc, #200]	@ (800d1f0 <lfs_dir_getinfo+0xe8>)
 800d128:	461a      	mov	r2, r3
 800d12a:	460b      	mov	r3, r1
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2202      	movs	r2, #2
 800d134:	701a      	strb	r2, [r3, #0]
        return 0;
 800d136:	2300      	movs	r3, #0
 800d138:	e055      	b.n	800d1e6 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800d13a:	88fb      	ldrh	r3, [r7, #6]
 800d13c:	029a      	lsls	r2, r3, #10
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d142:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800d144:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	4613      	mov	r3, r2
 800d14e:	4a29      	ldr	r2, [pc, #164]	@ (800d1f4 <lfs_dir_getinfo+0xec>)
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7fe fe84 	bl	800be60 <lfs_dir_get>
 800d158:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	da01      	bge.n	800d164 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	e040      	b.n	800d1e6 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe f9d4 	bl	800b514 <lfs_tag_type3>
 800d16c:	4603      	mov	r3, r0
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800d174:	88fb      	ldrh	r3, [r7, #6]
 800d176:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800d178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d17c:	f043 0308 	orr.w	r3, r3, #8
 800d180:	f107 0214 	add.w	r2, r7, #20
 800d184:	9200      	str	r2, [sp, #0]
 800d186:	4a1c      	ldr	r2, [pc, #112]	@ (800d1f8 <lfs_dir_getinfo+0xf0>)
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7fe fe68 	bl	800be60 <lfs_dir_get>
 800d190:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	2b00      	cmp	r3, #0
 800d196:	da01      	bge.n	800d19c <lfs_dir_getinfo+0x94>
        return (int)tag;
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	e024      	b.n	800d1e6 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800d19c:	f107 0314 	add.w	r3, r7, #20
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fb2d 	bl	800b800 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe f9b3 	bl	800b514 <lfs_tag_type3>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	f240 2302 	movw	r3, #514	@ 0x202
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d103      	bne.n	800d1c2 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800d1ba:	69ba      	ldr	r2, [r7, #24]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	605a      	str	r2, [r3, #4]
 800d1c0:	e010      	b.n	800d1e4 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe f9a5 	bl	800b514 <lfs_tag_type3>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	f240 2301 	movw	r3, #513	@ 0x201
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d106      	bne.n	800d1e4 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fe f9d5 	bl	800b588 <lfs_tag_size>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	08023dac 	.word	0x08023dac
 800d1f4:	780ffc00 	.word	0x780ffc00
 800d1f8:	700ffc00 	.word	0x700ffc00

0800d1fc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b08f      	sub	sp, #60	@ 0x3c
 800d200:	af04      	add	r7, sp, #16
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800d20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800d216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d218:	689c      	ldr	r4, [r3, #8]
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f7fe f9b4 	bl	800b588 <lfs_tag_size>
 800d220:	4603      	mov	r3, r0
 800d222:	4619      	mov	r1, r3
 800d224:	4620      	mov	r0, r4
 800d226:	f7fd fc2c 	bl	800aa82 <lfs_min>
 800d22a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800d22c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800d236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d238:	6849      	ldr	r1, [r1, #4]
 800d23a:	69b8      	ldr	r0, [r7, #24]
 800d23c:	9003      	str	r0, [sp, #12]
 800d23e:	9102      	str	r1, [sp, #8]
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	4622      	mov	r2, r4
 800d248:	2100      	movs	r1, #0
 800d24a:	6a38      	ldr	r0, [r7, #32]
 800d24c:	f7fd fe40 	bl	800aed0 <lfs_bd_cmp>
 800d250:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <lfs_dir_find_match+0x60>
        return res;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	e014      	b.n	800d286 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25e:	689c      	ldr	r4, [r3, #8]
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f7fe f991 	bl	800b588 <lfs_tag_size>
 800d266:	4603      	mov	r3, r0
 800d268:	429c      	cmp	r4, r3
 800d26a:	d00b      	beq.n	800d284 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	689c      	ldr	r4, [r3, #8]
 800d270:	68b8      	ldr	r0, [r7, #8]
 800d272:	f7fe f989 	bl	800b588 <lfs_tag_size>
 800d276:	4603      	mov	r3, r0
 800d278:	429c      	cmp	r4, r3
 800d27a:	d201      	bcs.n	800d280 <lfs_dir_find_match+0x84>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e002      	b.n	800d286 <lfs_dir_find_match+0x8a>
 800d280:	2302      	movs	r3, #2
 800d282:	e000      	b.n	800d286 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	372c      	adds	r7, #44	@ 0x2c
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd90      	pop	{r4, r7, pc}
	...

0800d290 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b093      	sub	sp, #76	@ 0x4c
 800d294:	af04      	add	r7, sp, #16
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d003      	beq.n	800d2b2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800d2b0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800d2b2:	4b6e      	ldr	r3, [pc, #440]	@ (800d46c <lfs_dir_find+0x1dc>)
 800d2b4:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6a1a      	ldr	r2, [r3, #32]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800d2c6:	496a      	ldr	r1, [pc, #424]	@ (800d470 <lfs_dir_find+0x1e0>)
 800d2c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2ca:	f013 fe89 	bl	8020fe0 <strspn>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d2:	4413      	add	r3, r2
 800d2d4:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800d2d6:	4966      	ldr	r1, [pc, #408]	@ (800d470 <lfs_dir_find+0x1e0>)
 800d2d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2da:	f013 fe35 	bl	8020f48 <strcspn>
 800d2de:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d105      	bne.n	800d2f2 <lfs_dir_find+0x62>
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e8:	781a      	ldrb	r2, [r3, #0]
 800d2ea:	4b62      	ldr	r3, [pc, #392]	@ (800d474 <lfs_dir_find+0x1e4>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d00a      	beq.n	800d308 <lfs_dir_find+0x78>
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d10c      	bne.n	800d312 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	495f      	ldr	r1, [pc, #380]	@ (800d478 <lfs_dir_find+0x1e8>)
 800d2fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2fe:	f013 fe95 	bl	802102c <memcmp>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d104      	bne.n	800d312 <lfs_dir_find+0x82>
            name += namelen;
 800d308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	4413      	add	r3, r2
 800d30e:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800d310:	e7d9      	b.n	800d2c6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800d312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d316:	4413      	add	r3, r2
 800d318:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800d31a:	2301      	movs	r3, #1
 800d31c:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800d31e:	4954      	ldr	r1, [pc, #336]	@ (800d470 <lfs_dir_find+0x1e0>)
 800d320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d322:	f013 fe5d 	bl	8020fe0 <strspn>
 800d326:	4602      	mov	r2, r0
 800d328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32a:	4413      	add	r3, r2
 800d32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800d32e:	4950      	ldr	r1, [pc, #320]	@ (800d470 <lfs_dir_find+0x1e0>)
 800d330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d332:	f013 fe09 	bl	8020f48 <strcspn>
 800d336:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01d      	beq.n	800d37a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d112      	bne.n	800d36a <lfs_dir_find+0xda>
 800d344:	2202      	movs	r2, #2
 800d346:	494c      	ldr	r1, [pc, #304]	@ (800d478 <lfs_dir_find+0x1e8>)
 800d348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d34a:	f013 fe6f 	bl	802102c <memcmp>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10a      	bne.n	800d36a <lfs_dir_find+0xda>
                depth -= 1;
 800d354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d356:	3b01      	subs	r3, #1
 800d358:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800d35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d107      	bne.n	800d370 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800d360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	4413      	add	r3, r2
 800d366:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800d368:	e7ad      	b.n	800d2c6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800d36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36c:	3301      	adds	r3, #1
 800d36e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800d370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	4413      	add	r3, r2
 800d376:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800d378:	e7d1      	b.n	800d31e <lfs_dir_find+0x8e>
                break;
 800d37a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800d37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d101      	bne.n	800d388 <lfs_dir_find+0xf8>
            return tag;
 800d384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d386:	e06c      	b.n	800d462 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d38c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800d38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe f8bf 	bl	800b514 <lfs_tag_type3>
 800d396:	4603      	mov	r3, r0
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d002      	beq.n	800d3a2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800d39c:	f06f 0313 	mvn.w	r3, #19
 800d3a0:	e05f      	b.n	800d462 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe f8df 	bl	800b568 <lfs_tag_id>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d01c      	beq.n	800d3f0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe f8d5 	bl	800b568 <lfs_tag_id>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800d3c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d3c6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800d3ce:	9200      	str	r2, [sp, #0]
 800d3d0:	4a2a      	ldr	r2, [pc, #168]	@ (800d47c <lfs_dir_find+0x1ec>)
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7fe fd43 	bl	800be60 <lfs_dir_get>
 800d3da:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da01      	bge.n	800d3e6 <lfs_dir_find+0x156>
                return res;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	e03d      	b.n	800d462 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	3318      	adds	r3, #24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe f81d 	bl	800b42a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800d3f6:	212f      	movs	r1, #47	@ 0x2f
 800d3f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3fa:	f013 fd98 	bl	8020f2e <strchr>
 800d3fe:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800d400:	2b00      	cmp	r3, #0
 800d402:	d101      	bne.n	800d408 <lfs_dir_find+0x178>
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	e000      	b.n	800d40a <lfs_dir_find+0x17a>
 800d408:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	613a      	str	r2, [r7, #16]
 800d40e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d410:	617a      	str	r2, [r7, #20]
 800d412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d414:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800d416:	f107 0210 	add.w	r2, r7, #16
 800d41a:	9203      	str	r2, [sp, #12]
 800d41c:	4a18      	ldr	r2, [pc, #96]	@ (800d480 <lfs_dir_find+0x1f0>)
 800d41e:	9202      	str	r2, [sp, #8]
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800d42a:	4622      	mov	r2, r4
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f7ff fa4c 	bl	800c8cc <lfs_dir_fetchmatch>
 800d434:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da01      	bge.n	800d440 <lfs_dir_find+0x1b0>
                return tag;
 800d43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43e:	e010      	b.n	800d462 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800d440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d442:	2b00      	cmp	r3, #0
 800d444:	d004      	beq.n	800d450 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800d446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	4413      	add	r3, r2
 800d44c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800d44e:	e73a      	b.n	800d2c6 <lfs_dir_find+0x36>
            if (!dir->split) {
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	7ddb      	ldrb	r3, [r3, #23]
 800d454:	f083 0301 	eor.w	r3, r3, #1
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0c8      	beq.n	800d3f0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800d45e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d462:	4618      	mov	r0, r3
 800d464:	373c      	adds	r7, #60	@ 0x3c
 800d466:	46bd      	mov	sp, r7
 800d468:	bd90      	pop	{r4, r7, pc}
 800d46a:	bf00      	nop
 800d46c:	002ffc00 	.word	0x002ffc00
 800d470:	08023dac 	.word	0x08023dac
 800d474:	08023db0 	.word	0x08023db0
 800d478:	08023db4 	.word	0x08023db4
 800d47c:	700ffc00 	.word	0x700ffc00
 800d480:	0800d1fd 	.word	0x0800d1fd

0800d484 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b08b      	sub	sp, #44	@ 0x2c
 800d488:	af04      	add	r7, sp, #16
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f103 0010 	add.w	r0, r3, #16
 800d498:	68fc      	ldr	r4, [r7, #12]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	6852      	ldr	r2, [r2, #4]
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	9103      	str	r1, [sp, #12]
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	9102      	str	r1, [sp, #8]
 800d4aa:	9201      	str	r2, [sp, #4]
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4601      	mov	r1, r0
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7fd fe51 	bl	800b15c <lfs_bd_prog>
 800d4ba:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <lfs_dir_commitprog+0x42>
        return err;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	e010      	b.n	800d4e8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	6879      	ldr	r1, [r7, #4]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f005 f9ce 	bl	8012870 <lfs_crc>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	441a      	add	r2, r3
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	605a      	str	r2, [r3, #4]
    return 0;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	371c      	adds	r7, #28
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd90      	pop	{r4, r7, pc}

0800d4f0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b08f      	sub	sp, #60	@ 0x3c
 800d4f4:	af04      	add	r7, sp, #16
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7fe f84f 	bl	800b5a2 <lfs_tag_dsize>
 800d504:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	441a      	add	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	429a      	cmp	r2, r3
 800d514:	d902      	bls.n	800d51c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800d516:	f06f 031b 	mvn.w	r3, #27
 800d51a:	e065      	b.n	800d5e8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	4053      	eors	r3, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fd fb3d 	bl	800aba8 <lfs_tobe32>
 800d52e:	4603      	mov	r3, r0
 800d530:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800d532:	f107 0214 	add.w	r2, r7, #20
 800d536:	2304      	movs	r3, #4
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f7ff ffa2 	bl	800d484 <lfs_dir_commitprog>
 800d540:	61f8      	str	r0, [r7, #28]
    if (err) {
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d001      	beq.n	800d54c <lfs_dir_commitattr+0x5c>
        return err;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	e04d      	b.n	800d5e8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	db0c      	blt.n	800d56c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	3b04      	subs	r3, #4
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	68b9      	ldr	r1, [r7, #8]
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7ff ff92 	bl	800d484 <lfs_dir_commitprog>
 800d560:	61f8      	str	r0, [r7, #28]
        if (err) {
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d039      	beq.n	800d5dc <lfs_dir_commitattr+0xec>
            return err;
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	e03d      	b.n	800d5e8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800d570:	2300      	movs	r3, #0
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
 800d574:	e02d      	b.n	800d5d2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800d576:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800d578:	6a3a      	ldr	r2, [r7, #32]
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800d57e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69ba      	ldr	r2, [r7, #24]
 800d586:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800d588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d58a:	440a      	add	r2, r1
 800d58c:	2101      	movs	r1, #1
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	f107 0113 	add.w	r1, r7, #19
 800d594:	9102      	str	r1, [sp, #8]
 800d596:	9201      	str	r2, [sp, #4]
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	4623      	mov	r3, r4
 800d59c:	4602      	mov	r2, r0
 800d59e:	2100      	movs	r1, #0
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7fd fb49 	bl	800ac38 <lfs_bd_read>
 800d5a6:	61f8      	str	r0, [r7, #28]
            if (err) {
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <lfs_dir_commitattr+0xc2>
                return err;
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	e01a      	b.n	800d5e8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800d5b2:	f107 0213 	add.w	r2, r7, #19
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	68b9      	ldr	r1, [r7, #8]
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7ff ff62 	bl	800d484 <lfs_dir_commitprog>
 800d5c0:	61f8      	str	r0, [r7, #28]
            if (err) {
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <lfs_dir_commitattr+0xdc>
                return err;
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	e00d      	b.n	800d5e8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d3cc      	bcc.n	800d576 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	609a      	str	r2, [r3, #8]
    return 0;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	372c      	adds	r7, #44	@ 0x2c
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}

0800d5f0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b097      	sub	sp, #92	@ 0x5c
 800d5f4:	af04      	add	r7, sp, #16
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800d5fe:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f7fd fa39 	bl	800aa82 <lfs_min>
 800d610:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d616:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 800d618:	4619      	mov	r1, r3
 800d61a:	4610      	mov	r0, r2
 800d61c:	f7fd fa56 	bl	800aacc <lfs_alignup>
 800d620:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800d62a:	e0fe      	b.n	800d82a <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	3b04      	subs	r3, #4
 800d636:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fd fa21 	bl	800aa82 <lfs_min>
 800d640:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	4413      	add	r3, r2
        lfs_off_t noff = (
 800d648:	3304      	adds	r3, #4
 800d64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800d64c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d650:	429a      	cmp	r2, r3
 800d652:	d206      	bcs.n	800d662 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	3b14      	subs	r3, #20
 800d658:	4619      	mov	r1, r3
 800d65a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d65c:	f7fd fa11 	bl	800aa82 <lfs_min>
 800d660:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800d662:	23ff      	movs	r3, #255	@ 0xff
 800d664:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800d666:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d35f      	bcc.n	800d72e <lfs_dir_commitcrc+0x13e>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d67e:	429a      	cmp	r2, r3
 800d680:	d855      	bhi.n	800d72e <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800d682:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d688:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2201      	movs	r2, #1
 800d690:	9203      	str	r2, [sp, #12]
 800d692:	f107 021b 	add.w	r2, r7, #27
 800d696:	9202      	str	r2, [sp, #8]
 800d698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d69a:	9201      	str	r2, [sp, #4]
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	4603      	mov	r3, r0
 800d6a0:	460a      	mov	r2, r1
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7fd fac7 	bl	800ac38 <lfs_bd_read>
 800d6aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d005      	beq.n	800d6be <lfs_dir_commitcrc+0xce>
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d6b8:	d001      	beq.n	800d6be <lfs_dir_commitcrc+0xce>
                return err;
 800d6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6bc:	e101      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 800d6c4:	60bb      	str	r3, [r7, #8]
 800d6c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6ca:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800d6cc:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6d2:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	f107 0108 	add.w	r1, r7, #8
 800d6de:	3104      	adds	r1, #4
 800d6e0:	9103      	str	r1, [sp, #12]
 800d6e2:	9202      	str	r2, [sp, #8]
 800d6e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d6e6:	9201      	str	r2, [sp, #4]
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7fd fc3e 	bl	800af72 <lfs_bd_crc>
 800d6f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <lfs_dir_commitcrc+0x11a>
 800d6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d700:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d704:	d001      	beq.n	800d70a <lfs_dir_commitcrc+0x11a>
                    return err;
 800d706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d708:	e0db      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800d70a:	f107 0308 	add.w	r3, r7, #8
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe f85e 	bl	800b7d0 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800d714:	f107 0308 	add.w	r3, r7, #8
 800d718:	4a6c      	ldr	r2, [pc, #432]	@ (800d8cc <lfs_dir_commitcrc+0x2dc>)
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fee7 	bl	800d4f0 <lfs_dir_commitattr>
 800d722:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800d724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <lfs_dir_commitcrc+0x13e>
                    return err;
 800d72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72c:	e0c9      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800d72e:	7efb      	ldrb	r3, [r7, #27]
 800d730:	43db      	mvns	r3, r3
 800d732:	b2db      	uxtb	r3, r3
 800d734:	09db      	lsrs	r3, r3, #7
 800d736:	b2db      	uxtb	r3, r3
 800d738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d73c:	051a      	lsls	r2, r3, #20
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d744:	1acb      	subs	r3, r1, r3
 800d746:	3b04      	subs	r3, #4
 800d748:	4313      	orrs	r3, r2
 800d74a:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800d74e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800d752:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	689a      	ldr	r2, [r3, #8]
 800d758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75a:	4053      	eors	r3, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fd fa23 	bl	800aba8 <lfs_tobe32>
 800d762:	4603      	mov	r3, r0
 800d764:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	f107 0110 	add.w	r1, r7, #16
 800d76e:	2204      	movs	r2, #4
 800d770:	4618      	mov	r0, r3
 800d772:	f005 f87d 	bl	8012870 <lfs_crc>
 800d776:	4602      	mov	r2, r0
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	4618      	mov	r0, r3
 800d782:	f7fd f9f9 	bl	800ab78 <lfs_tole32>
 800d786:	4603      	mov	r3, r0
 800d788:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f103 0010 	add.w	r0, r3, #16
 800d790:	687c      	ldr	r4, [r7, #4]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	6852      	ldr	r2, [r2, #4]
 800d79a:	2108      	movs	r1, #8
 800d79c:	9103      	str	r1, [sp, #12]
 800d79e:	f107 0110 	add.w	r1, r7, #16
 800d7a2:	9102      	str	r1, [sp, #8]
 800d7a4:	9201      	str	r2, [sp, #4]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	4601      	mov	r1, r0
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7fd fcd4 	bl	800b15c <lfs_bd_prog>
 800d7b4:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <lfs_dir_commitcrc+0x1d0>
            return err;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	e080      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800d7c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d106      	bne.n	800d7d4 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d7d8:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800d7da:	7efb      	ldrb	r3, [r7, #27]
 800d7dc:	43db      	mvns	r3, r3
 800d7de:	061b      	lsls	r3, r3, #24
 800d7e0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	405a      	eors	r2, r3
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7f2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800d7f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d208      	bcs.n	800d80e <lfs_dir_commitcrc+0x21e>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695a      	ldr	r2, [r3, #20]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d806:	4413      	add	r3, r2
 800d808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d30d      	bcc.n	800d82a <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f103 0110 	add.w	r1, r3, #16
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	2300      	movs	r3, #0
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7fd fc6b 	bl	800b0f4 <lfs_bd_sync>
 800d81e:	6238      	str	r0, [r7, #32]
            if (err) {
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <lfs_dir_commitcrc+0x23a>
                return err;
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	e04b      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d830:	429a      	cmp	r2, r3
 800d832:	f63f aefb 	bhi.w	800d62c <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800d83c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d840:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d846:	1d1c      	adds	r4, r3, #4
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d850:	1a8a      	subs	r2, r1, r2
 800d852:	f107 011c 	add.w	r1, r7, #28
 800d856:	9103      	str	r1, [sp, #12]
 800d858:	9202      	str	r2, [sp, #8]
 800d85a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d85c:	9201      	str	r2, [sp, #4]
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4623      	mov	r3, r4
 800d862:	4602      	mov	r2, r0
 800d864:	2100      	movs	r1, #0
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7fd fb83 	bl	800af72 <lfs_bd_crc>
 800d86c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <lfs_dir_commitcrc+0x288>
        return err;
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	e024      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d002      	beq.n	800d886 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800d880:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d884:	e01d      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f107 021c 	add.w	r2, r7, #28
 800d890:	9203      	str	r2, [sp, #12]
 800d892:	2204      	movs	r2, #4
 800d894:	9202      	str	r2, [sp, #8]
 800d896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d898:	9201      	str	r2, [sp, #4]
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	2304      	movs	r3, #4
 800d89e:	460a      	mov	r2, r1
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fd fb65 	bl	800af72 <lfs_bd_crc>
 800d8a8:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <lfs_dir_commitcrc+0x2c4>
        return err;
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b2:	e006      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800d8ba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d8be:	e000      	b.n	800d8c2 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	374c      	adds	r7, #76	@ 0x4c
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd90      	pop	{r4, r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	5ffffc08 	.word	0x5ffffc08

0800d8d0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08a      	sub	sp, #40	@ 0x28
 800d8d4:	af04      	add	r7, sp, #16
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	e016      	b.n	800d90e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	bfb8      	it	lt
 800d8ec:	425b      	neglt	r3, r3
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7fe f934 	bl	800bb64 <lfs_alloc>
 800d8fc:	60f8      	str	r0, [r7, #12]
        if (err) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <lfs_dir_alloc+0x38>
            return err;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	e058      	b.n	800d9ba <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	3301      	adds	r3, #1
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b01      	cmp	r3, #1
 800d912:	dde5      	ble.n	800d8e0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800d924:	2004      	movs	r0, #4
 800d926:	9003      	str	r0, [sp, #12]
 800d928:	9202      	str	r2, [sp, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	9201      	str	r2, [sp, #4]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	2304      	movs	r3, #4
 800d932:	460a      	mov	r2, r1
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7fd f97e 	bl	800ac38 <lfs_bd_read>
 800d93c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	4618      	mov	r0, r3
 800d944:	f7fd f90d 	bl	800ab62 <lfs_fromle32>
 800d948:	4602      	mov	r2, r0
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d005      	beq.n	800d960 <lfs_dir_alloc+0x90>
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800d95a:	d001      	beq.n	800d960 <lfs_dir_alloc+0x90>
        return err;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	e02c      	b.n	800d9ba <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d966:	2b00      	cmp	r3, #0
 800d968:	dd0e      	ble.n	800d988 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	689a      	ldr	r2, [r3, #8]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d974:	3301      	adds	r3, #1
 800d976:	f043 0301 	orr.w	r3, r3, #1
 800d97a:	4619      	mov	r1, r3
 800d97c:	4610      	mov	r0, r2
 800d97e:	f7fd f8a5 	bl	800aacc <lfs_alignup>
 800d982:	4602      	mov	r2, r0
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2204      	movs	r2, #4
 800d98c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d994:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2200      	movs	r2, #0
 800d99a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9a2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9aa:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
	...

0800d9c4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	@ 0x28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3348      	adds	r3, #72	@ 0x48
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fb63 	bl	800d0a4 <lfs_dir_getgstate>
 800d9de:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <lfs_dir_drop+0x26>
        return err;
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	e022      	b.n	800da30 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	3318      	adds	r3, #24
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fd fd35 	bl	800b45e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7ddb      	ldrb	r3, [r3, #23]
 800d9f8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800d9fc:	051a      	lsls	r2, r3, #20
 800d9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800da38 <lfs_dir_drop+0x74>)
 800da00:	4313      	orrs	r3, r2
 800da02:	61fb      	str	r3, [r7, #28]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3318      	adds	r3, #24
 800da08:	623b      	str	r3, [r7, #32]
 800da0a:	f107 021c 	add.w	r2, r7, #28
 800da0e:	2301      	movs	r3, #1
 800da10:	68b9      	ldr	r1, [r7, #8]
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f001 f984 	bl	800ed20 <lfs_dir_commit>
 800da18:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3318      	adds	r3, #24
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fd fd03 	bl	800b42a <lfs_pair_fromle32>
    if (err) {
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <lfs_dir_drop+0x6a>
        return err;
 800da2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2c:	e000      	b.n	800da30 <lfs_dir_drop+0x6c>
    }

    return 0;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3728      	adds	r7, #40	@ 0x28
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	000ffc08 	.word	0x000ffc08

0800da3c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b092      	sub	sp, #72	@ 0x48
 800da40:	af04      	add	r7, sp, #16
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800da4a:	f107 0310 	add.w	r3, r7, #16
 800da4e:	4619      	mov	r1, r3
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7ff ff3d 	bl	800d8d0 <lfs_dir_alloc>
 800da56:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800da58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d001      	beq.n	800da62 <lfs_dir_split+0x26>
        return err;
 800da5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da60:	e03c      	b.n	800dadc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	7ddb      	ldrb	r3, [r3, #23]
 800da66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	69db      	ldr	r3, [r3, #28]
 800da74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800da76:	f107 0110 	add.w	r1, r7, #16
 800da7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800da7e:	9302      	str	r3, [sp, #8]
 800da80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 f87a 	bl	800db88 <lfs_dir_compact>
 800da94:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	da01      	bge.n	800daa0 <lfs_dir_split+0x64>
        return res;
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	e01d      	b.n	800dadc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2201      	movs	r2, #1
 800dab0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3320      	adds	r3, #32
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f7fd fc5e 	bl	800b37c <lfs_pair_cmp>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <lfs_dir_split+0x9e>
 800dac6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3738      	adds	r7, #56	@ 0x38
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800daf4:	68b8      	ldr	r0, [r7, #8]
 800daf6:	f7fd fd54 	bl	800b5a2 <lfs_tag_dsize>
 800dafa:	4602      	mov	r2, r0
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	441a      	add	r2, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	601a      	str	r2, [r3, #0]
    return 0;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	6859      	ldr	r1, [r3, #4]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	f7ff fce0 	bl	800d4f0 <lfs_dir_commitattr>
 800db30:	4603      	mov	r3, r0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800db48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dd11      	ble.n	800db72 <lfs_dir_needsrelocation+0x38>
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	3301      	adds	r3, #1
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800db58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db5a:	3201      	adds	r2, #1
 800db5c:	f042 0201 	orr.w	r2, r2, #1
 800db60:	fbb3 f1f2 	udiv	r1, r3, r2
 800db64:	fb01 f202 	mul.w	r2, r1, r2
 800db68:	1a9b      	subs	r3, r3, r2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <lfs_dir_needsrelocation+0x38>
 800db6e:	2301      	movs	r3, #1
 800db70:	e000      	b.n	800db74 <lfs_dir_needsrelocation+0x3a>
 800db72:	2300      	movs	r3, #0
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	b2db      	uxtb	r3, r3
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
	...

0800db88 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b0a4      	sub	sp, #144	@ 0x90
 800db8c:	af0a      	add	r7, sp, #40	@ 0x28
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800db96:	2300      	movs	r3, #0
 800db98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800db9c:	68b9      	ldr	r1, [r7, #8]
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff ffcb 	bl	800db3a <lfs_dir_needsrelocation>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800dbb4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00e      	beq.n	800dbda <lfs_dir_compact+0x52>
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	657a      	str	r2, [r7, #84]	@ 0x54
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dbc6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800dbca:	4611      	mov	r1, r2
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fd fbd5 	bl	800b37c <lfs_pair_cmp>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f040 8155 	bne.w	800de84 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800dbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dbf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d004      	beq.n	800dc08 <lfs_dir_compact+0x80>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc04:	3b08      	subs	r3, #8
 800dc06:	e003      	b.n	800dc10 <lfs_dir_compact+0x88>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc0e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800dc10:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	4619      	mov	r1, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7fd fb4d 	bl	800b2b8 <lfs_bd_erase>
 800dc1e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800dc20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d006      	beq.n	800dc34 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800dc26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc28:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800dc2c:	f000 812c 	beq.w	800de88 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800dc30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc32:	e188      	b.n	800df46 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fc ff9d 	bl	800ab78 <lfs_tole32>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800dc4a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800dc4e:	2304      	movs	r3, #4
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff fc17 	bl	800d484 <lfs_dir_commitprog>
 800dc56:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fc ff80 	bl	800ab62 <lfs_fromle32>
 800dc62:	4602      	mov	r2, r0
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	609a      	str	r2, [r3, #8]
            if (err) {
 800dc68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d006      	beq.n	800dc7c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800dc6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc70:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800dc74:	f000 810a 	beq.w	800de8c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800dc78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc7a:	e164      	b.n	800df46 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800dc7c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800dc80:	425b      	negs	r3, r3
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	637a      	str	r2, [r7, #52]	@ 0x34
 800dc8a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800dc8e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800dc90:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800dc94:	9208      	str	r2, [sp, #32]
 800dc96:	4aae      	ldr	r2, [pc, #696]	@ (800df50 <lfs_dir_compact+0x3c8>)
 800dc98:	9207      	str	r2, [sp, #28]
 800dc9a:	9306      	str	r3, [sp, #24]
 800dc9c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800dca6:	9304      	str	r3, [sp, #16]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9303      	str	r3, [sp, #12]
 800dcac:	4ba9      	ldr	r3, [pc, #676]	@ (800df54 <lfs_dir_compact+0x3cc>)
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7fe fa1f 	bl	800c104 <lfs_dir_traverse>
 800dcc6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800dcc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d006      	beq.n	800dcdc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800dcce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcd0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800dcd4:	f000 80dc 	beq.w	800de90 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800dcd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcda:	e134      	b.n	800df46 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3318      	adds	r3, #24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd fb30 	bl	800b346 <lfs_pair_isnull>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f083 0301 	eor.w	r3, r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d022      	beq.n	800dd38 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fd fbb1 	bl	800b45e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	7ddb      	ldrb	r3, [r3, #23]
 800dd00:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800dd04:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800dd06:	4a94      	ldr	r2, [pc, #592]	@ (800df58 <lfs_dir_compact+0x3d0>)
 800dd08:	431a      	orrs	r2, r3
                        dir->tail);
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800dd0e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f7ff fbec 	bl	800d4f0 <lfs_dir_commitattr>
 800dd18:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fd fb83 	bl	800b42a <lfs_pair_fromle32>
                if (err) {
 800dd24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d006      	beq.n	800dd38 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800dd2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd2c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800dd30:	f000 80b0 	beq.w	800de94 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800dd34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd36:	e106      	b.n	800df46 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800dd38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	605a      	str	r2, [r3, #4]
 800dd42:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800dd44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd48:	f083 0301 	eor.w	r3, r3, #1
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d011      	beq.n	800dd76 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dd58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd fc33 	bl	800b5ca <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fd fc2a 	bl	800b5ca <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800dd7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd80:	4611      	mov	r1, r2
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fd fc21 	bl	800b5ca <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800dd8e:	f023 0303 	bic.w	r3, r3, #3
 800dd92:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800dd94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f7ff f981 	bl	800d0a4 <lfs_dir_getgstate>
 800dda2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800dda4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <lfs_dir_compact+0x226>
                return err;
 800ddaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddac:	e0cb      	b.n	800df46 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800ddae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fd fc2e 	bl	800b614 <lfs_gstate_iszero>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f083 0301 	eor.w	r3, r3, #1
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d016      	beq.n	800ddf2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800ddc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fd fcc9 	bl	800b760 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800ddce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ddd2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ddd6:	4a61      	ldr	r2, [pc, #388]	@ (800df5c <lfs_dir_compact+0x3d4>)
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff fb89 	bl	800d4f0 <lfs_dir_commitattr>
 800ddde:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800dde0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d005      	beq.n	800ddf2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800dde6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dde8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ddec:	d054      	beq.n	800de98 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800ddee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddf0:	e0a9      	b.n	800df46 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800ddf2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fbf9 	bl	800d5f0 <lfs_dir_commitcrc>
 800ddfe:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800de00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800de06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de08:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800de0c:	d046      	beq.n	800de9c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800de0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de10:	e099      	b.n	800df46 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800de12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800de18:	6a12      	ldr	r2, [r2, #32]
 800de1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de1e:	fb01 f202 	mul.w	r2, r1, r2
 800de22:	1a9b      	subs	r3, r3, r2
 800de24:	2b00      	cmp	r3, #0
 800de26:	d006      	beq.n	800de36 <lfs_dir_compact+0x2ae>
 800de28:	4b4d      	ldr	r3, [pc, #308]	@ (800df60 <lfs_dir_compact+0x3d8>)
 800de2a:	4a4e      	ldr	r2, [pc, #312]	@ (800df64 <lfs_dir_compact+0x3dc>)
 800de2c:	f640 0106 	movw	r1, #2054	@ 0x806
 800de30:	484d      	ldr	r0, [pc, #308]	@ (800df68 <lfs_dir_compact+0x3e0>)
 800de32:	f012 fd49 	bl	80208c8 <__assert_func>
            lfs_pair_swap(dir->pair);
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fd fa6f 	bl	800b31c <lfs_pair_swap>
            dir->count = end - begin;
 800de3e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800de42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	b29a      	uxth	r2, r3
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800de4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800de54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3348      	adds	r3, #72	@ 0x48
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	605a      	str	r2, [r3, #4]
 800de64:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800de66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de6a:	f083 0301 	eor.w	r3, r3, #1
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b00      	cmp	r3, #0
 800de72:	d065      	beq.n	800df40 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	333c      	adds	r3, #60	@ 0x3c
 800de7a:	3230      	adds	r2, #48	@ 0x30
 800de7c:	ca07      	ldmia	r2, {r0, r1, r2}
 800de7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800de82:	e05d      	b.n	800df40 <lfs_dir_compact+0x3b8>
        goto relocate;
 800de84:	bf00      	nop
 800de86:	e00a      	b.n	800de9e <lfs_dir_compact+0x316>
                    goto relocate;
 800de88:	bf00      	nop
 800de8a:	e008      	b.n	800de9e <lfs_dir_compact+0x316>
                    goto relocate;
 800de8c:	bf00      	nop
 800de8e:	e006      	b.n	800de9e <lfs_dir_compact+0x316>
                    goto relocate;
 800de90:	bf00      	nop
 800de92:	e004      	b.n	800de9e <lfs_dir_compact+0x316>
                        goto relocate;
 800de94:	bf00      	nop
 800de96:	e002      	b.n	800de9e <lfs_dir_compact+0x316>
                        goto relocate;
 800de98:	bf00      	nop
 800de9a:	e000      	b.n	800de9e <lfs_dir_compact+0x316>
                    goto relocate;
 800de9c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3310      	adds	r3, #16
 800dea8:	4619      	mov	r1, r3
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7fc fe9f 	bl	800abee <lfs_cache_drop>
        if (!tired) {
 800deb0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800deb4:	f083 0301 	eor.w	r3, r3, #1
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d009      	beq.n	800ded2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4a2a      	ldr	r2, [pc, #168]	@ (800df6c <lfs_dir_compact+0x3e4>)
 800dec4:	9200      	str	r2, [sp, #0]
 800dec6:	f640 0218 	movw	r2, #2072	@ 0x818
 800deca:	4927      	ldr	r1, [pc, #156]	@ (800df68 <lfs_dir_compact+0x3e0>)
 800decc:	4828      	ldr	r0, [pc, #160]	@ (800df70 <lfs_dir_compact+0x3e8>)
 800dece:	f012 ffa7 	bl	8020e20 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2200      	movs	r2, #0
 800ded6:	617a      	str	r2, [r7, #20]
 800ded8:	2201      	movs	r2, #1
 800deda:	61ba      	str	r2, [r7, #24]
 800dedc:	f107 0214 	add.w	r2, r7, #20
 800dee0:	4611      	mov	r1, r2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fa4a 	bl	800b37c <lfs_pair_cmp>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10c      	bne.n	800df08 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	4a1e      	ldr	r2, [pc, #120]	@ (800df6c <lfs_dir_compact+0x3e4>)
 800def4:	9200      	str	r2, [sp, #0]
 800def6:	f640 021d 	movw	r2, #2077	@ 0x81d
 800defa:	491b      	ldr	r1, [pc, #108]	@ (800df68 <lfs_dir_compact+0x3e0>)
 800defc:	481d      	ldr	r0, [pc, #116]	@ (800df74 <lfs_dir_compact+0x3ec>)
 800defe:	f012 ff8f 	bl	8020e20 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800df02:	f06f 031b 	mvn.w	r3, #27
 800df06:	e01e      	b.n	800df46 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	3304      	adds	r3, #4
 800df0c:	4619      	mov	r1, r3
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7fd fe28 	bl	800bb64 <lfs_alloc>
 800df14:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800df16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00c      	beq.n	800df36 <lfs_dir_compact+0x3ae>
 800df1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df1e:	f113 0f1c 	cmn.w	r3, #28
 800df22:	d106      	bne.n	800df32 <lfs_dir_compact+0x3aa>
 800df24:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800df28:	f083 0301 	eor.w	r3, r3, #1
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <lfs_dir_compact+0x3ae>
            return err;
 800df32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df34:	e007      	b.n	800df46 <lfs_dir_compact+0x3be>
        }

        tired = false;
 800df36:	2300      	movs	r3, #0
 800df38:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 800df3c:	bf00      	nop
    while (true) {
 800df3e:	e64c      	b.n	800dbda <lfs_dir_compact+0x52>
        break;
 800df40:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800df42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800df46:	4618      	mov	r0, r3
 800df48:	3768      	adds	r7, #104	@ 0x68
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	0800db11 	.word	0x0800db11
 800df54:	400ffc00 	.word	0x400ffc00
 800df58:	000ffc08 	.word	0x000ffc08
 800df5c:	7ffffc0c 	.word	0x7ffffc0c
 800df60:	08023db8 	.word	0x08023db8
 800df64:	08026ca4 	.word	0x08026ca4
 800df68:	08023c38 	.word	0x08023c38
 800df6c:	08023d60 	.word	0x08023d60
 800df70:	08023de0 	.word	0x08023de0
 800df74:	08023e04 	.word	0x08023e04

0800df78 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b097      	sub	sp, #92	@ 0x5c
 800df7c:	af0a      	add	r7, sp, #40	@ 0x28
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800df86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800df8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 800df8c:	e058      	b.n	800e040 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800df92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df94:	b29b      	uxth	r3, r3
 800df96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df98:	b292      	uxth	r2, r2
 800df9a:	4252      	negs	r2, r2
 800df9c:	b292      	uxth	r2, r2
 800df9e:	b212      	sxth	r2, r2
 800dfa0:	f107 0118 	add.w	r1, r7, #24
 800dfa4:	9108      	str	r1, [sp, #32]
 800dfa6:	4979      	ldr	r1, [pc, #484]	@ (800e18c <lfs_dir_splittingcompact+0x214>)
 800dfa8:	9107      	str	r1, [sp, #28]
 800dfaa:	9206      	str	r2, [sp, #24]
 800dfac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800dfb0:	9205      	str	r2, [sp, #20]
 800dfb2:	9304      	str	r3, [sp, #16]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9303      	str	r3, [sp, #12]
 800dfb8:	4b75      	ldr	r3, [pc, #468]	@ (800e190 <lfs_dir_splittingcompact+0x218>)
 800dfba:	9302      	str	r3, [sp, #8]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfc8:	2200      	movs	r2, #0
 800dfca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7fe f899 	bl	800c104 <lfs_dir_traverse>
 800dfd2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800dfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <lfs_dir_splittingcompact+0x66>
                return err;
 800dfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfdc:	e0d2      	b.n	800e184 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 800dfde:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800dfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	2bfe      	cmp	r3, #254	@ 0xfe
 800dfe8:	d822      	bhi.n	800e030 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 800dff0:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d004      	beq.n	800e008 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 800e004:	085b      	lsrs	r3, r3, #1
 800e006:	e003      	b.n	800e010 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 800e00e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e014:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 800e016:	4611      	mov	r1, r2
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fc fd57 	bl	800aacc <lfs_alignup>
 800e01e:	4603      	mov	r3, r0
 800e020:	4619      	mov	r1, r3
 800e022:	4620      	mov	r0, r4
 800e024:	f7fc fd2d 	bl	800aa82 <lfs_min>
 800e028:	4602      	mov	r2, r0
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d20e      	bcs.n	800e04e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 800e030:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800e034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	085b      	lsrs	r3, r3, #1
 800e03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e03c:	4413      	add	r3, r2
 800e03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 800e040:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d8a0      	bhi.n	800df8e <lfs_dir_splittingcompact+0x16>
 800e04c:	e000      	b.n	800e050 <lfs_dir_splittingcompact+0xd8>
                break;
 800e04e:	bf00      	nop
        }

        if (split == begin) {
 800e050:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e056:	429a      	cmp	r2, r3
 800e058:	d02d      	beq.n	800e0b6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800e062:	9202      	str	r2, [sp, #8]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	68b9      	ldr	r1, [r7, #8]
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f7ff fce3 	bl	800da3c <lfs_dir_split>
 800e076:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800e078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d005      	beq.n	800e08a <lfs_dir_splittingcompact+0x112>
 800e07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e080:	f113 0f1c 	cmn.w	r3, #28
 800e084:	d001      	beq.n	800e08a <lfs_dir_splittingcompact+0x112>
            return err;
 800e086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e088:	e07c      	b.n	800e184 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 800e08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00e      	beq.n	800e0ae <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	493e      	ldr	r1, [pc, #248]	@ (800e194 <lfs_dir_splittingcompact+0x21c>)
 800e09a:	9101      	str	r1, [sp, #4]
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 800e0a4:	493c      	ldr	r1, [pc, #240]	@ (800e198 <lfs_dir_splittingcompact+0x220>)
 800e0a6:	483d      	ldr	r0, [pc, #244]	@ (800e19c <lfs_dir_splittingcompact+0x224>)
 800e0a8:	f012 feba 	bl	8020e20 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800e0ac:	e004      	b.n	800e0b8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800e0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 800e0b4:	e767      	b.n	800df86 <lfs_dir_splittingcompact+0xe>
            break;
 800e0b6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800e0b8:	68b9      	ldr	r1, [r7, #8]
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f7ff fd3d 	bl	800db3a <lfs_dir_needsrelocation>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d04f      	beq.n	800e166 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	613a      	str	r2, [r7, #16]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	617a      	str	r2, [r7, #20]
 800e0d0:	f107 0210 	add.w	r2, r7, #16
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fd f950 	bl	800b37c <lfs_pair_cmp>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d141      	bne.n	800e166 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f004 f8ea 	bl	80122bc <lfs_fs_size_>
 800e0e8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	da01      	bge.n	800e0f4 <lfs_dir_splittingcompact+0x17c>
            return size;
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	e047      	b.n	800e184 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e100:	08db      	lsrs	r3, r3, #3
 800e102:	429a      	cmp	r2, r3
 800e104:	d92f      	bls.n	800e166 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	4a22      	ldr	r2, [pc, #136]	@ (800e194 <lfs_dir_splittingcompact+0x21c>)
 800e10c:	9200      	str	r2, [sp, #0]
 800e10e:	f640 0286 	movw	r2, #2182	@ 0x886
 800e112:	4921      	ldr	r1, [pc, #132]	@ (800e198 <lfs_dir_splittingcompact+0x220>)
 800e114:	4822      	ldr	r0, [pc, #136]	@ (800e1a0 <lfs_dir_splittingcompact+0x228>)
 800e116:	f012 fe83 	bl	8020e20 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800e11a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e11e:	9302      	str	r3, [sp, #8]
 800e120:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	68b9      	ldr	r1, [r7, #8]
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7ff fc83 	bl	800da3c <lfs_dir_split>
 800e136:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d005      	beq.n	800e14a <lfs_dir_splittingcompact+0x1d2>
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	f113 0f1c 	cmn.w	r3, #28
 800e144:	d001      	beq.n	800e14a <lfs_dir_splittingcompact+0x1d2>
                return err;
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	e01c      	b.n	800e184 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d007      	beq.n	800e160 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800e150:	4b10      	ldr	r3, [pc, #64]	@ (800e194 <lfs_dir_splittingcompact+0x21c>)
 800e152:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 800e156:	4910      	ldr	r1, [pc, #64]	@ (800e198 <lfs_dir_splittingcompact+0x220>)
 800e158:	4812      	ldr	r0, [pc, #72]	@ (800e1a4 <lfs_dir_splittingcompact+0x22c>)
 800e15a:	f012 fe61 	bl	8020e20 <iprintf>
 800e15e:	e002      	b.n	800e166 <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 800e160:	2301      	movs	r3, #1
 800e162:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800e166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e16a:	9302      	str	r3, [sp, #8]
 800e16c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff fd03 	bl	800db88 <lfs_dir_compact>
 800e182:	4603      	mov	r3, r0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3734      	adds	r7, #52	@ 0x34
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}
 800e18c:	0800dae5 	.word	0x0800dae5
 800e190:	400ffc00 	.word	0x400ffc00
 800e194:	08023d60 	.word	0x08023d60
 800e198:	08023c38 	.word	0x08023c38
 800e19c:	08023e3c 	.word	0x08023e3c
 800e1a0:	08023e6c 	.word	0x08023e6c
 800e1a4:	08023e9c 	.word	0x08023e9c

0800e1a8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800e1a8:	b5b0      	push	{r4, r5, r7, lr}
 800e1aa:	b0a6      	sub	sp, #152	@ 0x98
 800e1ac:	af0a      	add	r7, sp, #40	@ 0x28
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	603b      	str	r3, [r7, #0]
    int state = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1c4:	e06d      	b.n	800e2a2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800e1c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fd f99f 	bl	800b514 <lfs_tag_type3>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	461a      	mov	r2, r3
 800e1da:	f240 4301 	movw	r3, #1025	@ 0x401
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d106      	bne.n	800e1f0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	8a9b      	ldrh	r3, [r3, #20]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	829a      	strh	r2, [r3, #20]
 800e1ee:	e055      	b.n	800e29c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800e1f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fd f98a 	bl	800b514 <lfs_tag_type3>
 800e200:	4603      	mov	r3, r0
 800e202:	461a      	mov	r2, r3
 800e204:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800e208:	429a      	cmp	r2, r3
 800e20a:	d114      	bne.n	800e236 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	8a9b      	ldrh	r3, [r3, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <lfs_dir_relocatingcommit+0x7a>
 800e214:	4ba4      	ldr	r3, [pc, #656]	@ (800e4a8 <lfs_dir_relocatingcommit+0x300>)
 800e216:	4aa5      	ldr	r2, [pc, #660]	@ (800e4ac <lfs_dir_relocatingcommit+0x304>)
 800e218:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 800e21c:	48a4      	ldr	r0, [pc, #656]	@ (800e4b0 <lfs_dir_relocatingcommit+0x308>)
 800e21e:	f012 fb53 	bl	80208c8 <__assert_func>
            dir->count -= 1;
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	8a9b      	ldrh	r3, [r3, #20]
 800e226:	3b01      	subs	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800e22e:	2301      	movs	r3, #1
 800e230:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800e234:	e032      	b.n	800e29c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800e236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	4413      	add	r3, r2
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fd f947 	bl	800b4d4 <lfs_tag_type1>
 800e246:	4603      	mov	r3, r0
 800e248:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e24c:	d126      	bne.n	800e29c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800e24e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	4413      	add	r3, r2
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800e25e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	4413      	add	r3, r2
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800e26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4413      	add	r3, r2
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fd f95b 	bl	800b534 <lfs_tag_chunk>
 800e27e:	4603      	mov	r3, r0
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	bf14      	ite	ne
 800e288:	2301      	movne	r3, #1
 800e28a:	2300      	moveq	r3, #0
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	3318      	adds	r3, #24
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd f8c7 	bl	800b42a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800e29c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e29e:	3301      	adds	r3, #1
 800e2a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e2a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e2a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	db8c      	blt.n	800e1c6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800e2ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d02b      	beq.n	800e30c <lfs_dir_relocatingcommit+0x164>
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	8a9b      	ldrh	r3, [r3, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d127      	bne.n	800e30c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800e2bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d106      	bne.n	800e2d2 <lfs_dir_relocatingcommit+0x12a>
 800e2c4:	4b7b      	ldr	r3, [pc, #492]	@ (800e4b4 <lfs_dir_relocatingcommit+0x30c>)
 800e2c6:	4a79      	ldr	r2, [pc, #484]	@ (800e4ac <lfs_dir_relocatingcommit+0x304>)
 800e2c8:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 800e2cc:	4878      	ldr	r0, [pc, #480]	@ (800e4b0 <lfs_dir_relocatingcommit+0x308>)
 800e2ce:	f012 fafb 	bl	80208c8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e2d8:	4619      	mov	r1, r3
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f003 fb4a 	bl	8011974 <lfs_fs_pred>
 800e2e0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800e2e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <lfs_dir_relocatingcommit+0x14c>
 800e2e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2ea:	f113 0f02 	cmn.w	r3, #2
 800e2ee:	d001      	beq.n	800e2f4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 800e2f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2f2:	e210      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800e2f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2f6:	f113 0f02 	cmn.w	r3, #2
 800e2fa:	d007      	beq.n	800e30c <lfs_dir_relocatingcommit+0x164>
 800e2fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e300:	7ddb      	ldrb	r3, [r3, #23]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800e306:	2302      	movs	r3, #2
 800e308:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800e30a:	e121      	b.n	800e550 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	7d9b      	ldrb	r3, [r3, #22]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 80fb 	beq.w	800e50c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800e31a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800e320:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800e326:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800e332:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d004      	beq.n	800e348 <lfs_dir_relocatingcommit+0x1a0>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e344:	3b08      	subs	r3, #8
 800e346:	e003      	b.n	800e350 <lfs_dir_relocatingcommit+0x1a8>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e34e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800e350:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	3318      	adds	r3, #24
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd f881 	bl	800b45e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	68da      	ldr	r2, [r3, #12]
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e368:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800e36e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e372:	9308      	str	r3, [sp, #32]
 800e374:	4b50      	ldr	r3, [pc, #320]	@ (800e4b8 <lfs_dir_relocatingcommit+0x310>)
 800e376:	9307      	str	r3, [sp, #28]
 800e378:	2300      	movs	r3, #0
 800e37a:	9306      	str	r3, [sp, #24]
 800e37c:	2300      	movs	r3, #0
 800e37e:	9305      	str	r3, [sp, #20]
 800e380:	2300      	movs	r3, #0
 800e382:	9304      	str	r3, [sp, #16]
 800e384:	2300      	movs	r3, #0
 800e386:	9303      	str	r3, [sp, #12]
 800e388:	2300      	movs	r3, #0
 800e38a:	9302      	str	r3, [sp, #8]
 800e38c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	460b      	mov	r3, r1
 800e398:	68b9      	ldr	r1, [r7, #8]
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f7fd feb2 	bl	800c104 <lfs_dir_traverse>
 800e3a0:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	3318      	adds	r3, #24
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd f83f 	bl	800b42a <lfs_pair_fromle32>
        if (err) {
 800e3ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00b      	beq.n	800e3ca <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800e3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3b4:	f113 0f1c 	cmn.w	r3, #28
 800e3b8:	f000 80aa 	beq.w	800e510 <lfs_dir_relocatingcommit+0x368>
 800e3bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3be:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e3c2:	f000 80a5 	beq.w	800e510 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800e3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3c8:	e1a5      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800e3ca:	f107 031c 	add.w	r3, r7, #28
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	605a      	str	r2, [r3, #4]
 800e3d4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3dc:	f107 031c 	add.w	r3, r7, #28
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd f8f1 	bl	800b5ca <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e3ee:	f107 031c 	add.w	r3, r7, #28
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fd f8e8 	bl	800b5ca <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e400:	f107 031c 	add.w	r3, r7, #28
 800e404:	4611      	mov	r1, r2
 800e406:	4618      	mov	r0, r3
 800e408:	f7fd f8df 	bl	800b5ca <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e412:	f023 0303 	bic.w	r3, r3, #3
 800e416:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800e418:	f107 031c 	add.w	r3, r7, #28
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fd f8f9 	bl	800b614 <lfs_gstate_iszero>
 800e422:	4603      	mov	r3, r0
 800e424:	f083 0301 	eor.w	r3, r3, #1
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d027      	beq.n	800e47e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800e42e:	f107 031c 	add.w	r3, r7, #28
 800e432:	461a      	mov	r2, r3
 800e434:	68b9      	ldr	r1, [r7, #8]
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7fe fe34 	bl	800d0a4 <lfs_dir_getgstate>
 800e43c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800e43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800e444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e446:	e166      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 800e448:	f107 031c 	add.w	r3, r7, #28
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fd f987 	bl	800b760 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800e452:	f107 031c 	add.w	r3, r7, #28
 800e456:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800e45a:	4a18      	ldr	r2, [pc, #96]	@ (800e4bc <lfs_dir_relocatingcommit+0x314>)
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff f847 	bl	800d4f0 <lfs_dir_commitattr>
 800e462:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800e464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800e46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e46c:	f113 0f1c 	cmn.w	r3, #28
 800e470:	d050      	beq.n	800e514 <lfs_dir_relocatingcommit+0x36c>
 800e472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e474:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e478:	d04c      	beq.n	800e514 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800e47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e47c:	e14b      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800e47e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e482:	4619      	mov	r1, r3
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff f8b3 	bl	800d5f0 <lfs_dir_commitcrc>
 800e48a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800e48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d016      	beq.n	800e4c0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800e492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e494:	f113 0f1c 	cmn.w	r3, #28
 800e498:	d03e      	beq.n	800e518 <lfs_dir_relocatingcommit+0x370>
 800e49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e49c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800e4a0:	d03a      	beq.n	800e518 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800e4a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4a4:	e137      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
 800e4a6:	bf00      	nop
 800e4a8:	08023ec8 	.word	0x08023ec8
 800e4ac:	08026cb4 	.word	0x08026cb4
 800e4b0:	08023c38 	.word	0x08023c38
 800e4b4:	08023ed8 	.word	0x08023ed8
 800e4b8:	0800db11 	.word	0x0800db11
 800e4bc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e4c6:	6a12      	ldr	r2, [r2, #32]
 800e4c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4cc:	fb01 f202 	mul.w	r2, r1, r2
 800e4d0:	1a9b      	subs	r3, r3, r2
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d006      	beq.n	800e4e4 <lfs_dir_relocatingcommit+0x33c>
 800e4d6:	4b92      	ldr	r3, [pc, #584]	@ (800e720 <lfs_dir_relocatingcommit+0x578>)
 800e4d8:	4a92      	ldr	r2, [pc, #584]	@ (800e724 <lfs_dir_relocatingcommit+0x57c>)
 800e4da:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 800e4de:	4892      	ldr	r0, [pc, #584]	@ (800e728 <lfs_dir_relocatingcommit+0x580>)
 800e4e0:	f012 f9f2 	bl	80208c8 <__assert_func>
        dir->off = commit.off;
 800e4e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800e4ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	333c      	adds	r3, #60	@ 0x3c
 800e4f6:	3230      	adds	r2, #48	@ 0x30
 800e4f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800e4fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3348      	adds	r3, #72	@ 0x48
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	605a      	str	r2, [r3, #4]
 800e508:	609a      	str	r2, [r3, #8]
 800e50a:	e021      	b.n	800e550 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800e50c:	bf00      	nop
 800e50e:	e004      	b.n	800e51a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800e510:	bf00      	nop
 800e512:	e002      	b.n	800e51a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800e514:	bf00      	nop
 800e516:	e000      	b.n	800e51a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800e518:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3310      	adds	r3, #16
 800e51e:	4619      	mov	r1, r3
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f7fc fb64 	bl	800abee <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	8a9b      	ldrh	r3, [r3, #20]
 800e52a:	9302      	str	r3, [sp, #8]
 800e52c:	2300      	movs	r3, #0
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff fd1b 	bl	800df78 <lfs_dir_splittingcompact>
 800e542:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800e544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e546:	2b00      	cmp	r3, #0
 800e548:	da01      	bge.n	800e54e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800e54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e54c:	e0e3      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 800e54e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3304      	adds	r3, #4
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e562:	663b      	str	r3, [r7, #96]	@ 0x60
 800e564:	e0d2      	b.n	800e70c <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800e566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e568:	3308      	adds	r3, #8
 800e56a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e56e:	4611      	mov	r1, r2
 800e570:	4618      	mov	r0, r3
 800e572:	f7fc ff03 	bl	800b37c <lfs_pair_cmp>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f040 80c4 	bne.w	800e706 <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 800e57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	f103 0408 	add.w	r4, r3, #8
 800e586:	4615      	mov	r5, r2
 800e588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e58a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e58c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800e594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e596:	3308      	adds	r3, #8
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	f000 80a9 	beq.w	800e6f2 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5a4:	e07b      	b.n	800e69e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800e5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fc ffaf 	bl	800b514 <lfs_tag_type3>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d115      	bne.n	800e5ee <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 800e5c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5c4:	889c      	ldrh	r4, [r3, #4]
 800e5c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fc ffc9 	bl	800b568 <lfs_tag_id>
 800e5d6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	d108      	bne.n	800e5ee <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800e5dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5e2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800e5e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5ea:	60da      	str	r2, [r3, #12]
 800e5ec:	e054      	b.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800e5ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fc ff8b 	bl	800b514 <lfs_tag_type3>
 800e5fe:	4603      	mov	r3, r0
 800e600:	461a      	mov	r2, r3
 800e602:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800e606:	429a      	cmp	r2, r3
 800e608:	d11c      	bne.n	800e644 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800e60a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e60c:	889c      	ldrh	r4, [r3, #4]
 800e60e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	4413      	add	r3, r2
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fc ffa5 	bl	800b568 <lfs_tag_id>
 800e61e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800e620:	429c      	cmp	r4, r3
 800e622:	d90f      	bls.n	800e644 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 800e624:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e626:	889b      	ldrh	r3, [r3, #4]
 800e628:	3b01      	subs	r3, #1
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e62e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800e630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e632:	799b      	ldrb	r3, [r3, #6]
 800e634:	2b02      	cmp	r3, #2
 800e636:	d12f      	bne.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 800e638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e63c:	1e5a      	subs	r2, r3, #1
 800e63e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e640:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800e642:	e029      	b.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800e644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	4413      	add	r3, r2
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fc ff60 	bl	800b514 <lfs_tag_type3>
 800e654:	4603      	mov	r3, r0
 800e656:	461a      	mov	r2, r3
 800e658:	f240 4301 	movw	r3, #1025	@ 0x401
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d11b      	bne.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800e660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e662:	889c      	ldrh	r4, [r3, #4]
 800e664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	4413      	add	r3, r2
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fc ff7a 	bl	800b568 <lfs_tag_id>
 800e674:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800e676:	429c      	cmp	r4, r3
 800e678:	d30e      	bcc.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800e67a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e67c:	889b      	ldrh	r3, [r3, #4]
 800e67e:	3301      	adds	r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e684:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800e686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e688:	799b      	ldrb	r3, [r3, #6]
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d104      	bne.n	800e698 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800e68e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e696:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 800e698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e69a:	3301      	adds	r3, #1
 800e69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e69e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	f6ff af7e 	blt.w	800e5a6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800e6aa:	e022      	b.n	800e6f2 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 800e6ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6ae:	f103 0220 	add.w	r2, r3, #32
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3320      	adds	r3, #32
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f7fc fe5f 	bl	800b37c <lfs_pair_cmp>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d007      	beq.n	800e6d4 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 800e6c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6c6:	889a      	ldrh	r2, [r3, #4]
 800e6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6ca:	8b9b      	ldrh	r3, [r3, #28]
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6d2:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800e6d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6d6:	f103 0108 	add.w	r1, r3, #8
 800e6da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6dc:	3320      	adds	r3, #32
 800e6de:	461a      	mov	r2, r3
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7fe fcc3 	bl	800d06c <lfs_dir_fetch>
 800e6e6:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 800e6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 800e6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6f0:	e011      	b.n	800e716 <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 800e6f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6f4:	889a      	ldrh	r2, [r3, #4]
 800e6f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6f8:	8b9b      	ldrh	r3, [r3, #28]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d303      	bcc.n	800e706 <lfs_dir_relocatingcommit+0x55e>
 800e6fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e700:	7fdb      	ldrb	r3, [r3, #31]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1d2      	bne.n	800e6ac <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e70c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f47f af29 	bne.w	800e566 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800e714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800e716:	4618      	mov	r0, r3
 800e718:	3770      	adds	r7, #112	@ 0x70
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bdb0      	pop	{r4, r5, r7, pc}
 800e71e:	bf00      	nop
 800e720:	08023db8 	.word	0x08023db8
 800e724:	08026cb4 	.word	0x08026cb4
 800e728:	08023c38 	.word	0x08023c38

0800e72c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800e72c:	b5b0      	push	{r4, r5, r7, lr}
 800e72e:	b0bc      	sub	sp, #240	@ 0xf0
 800e730:	af04      	add	r7, sp, #16
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e742:	e045      	b.n	800e7d0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800e744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e748:	3308      	adds	r3, #8
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d03a      	beq.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
 800e750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e754:	3308      	adds	r3, #8
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	4611      	mov	r1, r2
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fc fe0e 	bl	800b37c <lfs_pair_cmp>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d12f      	bne.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800e766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e76a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d12a      	bne.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800e770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d023      	beq.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800e77e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d91b      	bls.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800e78e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f001 fa3e 	bl	800fc14 <lfs_file_outline>
 800e798:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800e79c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <lfs_dir_orphaningcommit+0x7e>
                return err;
 800e7a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7a8:	e2ad      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800e7aa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f001 fa52 	bl	800fc58 <lfs_file_flush>
 800e7b4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800e7b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 800e7c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e7c4:	e29f      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800e7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1b5      	bne.n	800e744 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800e7ee:	461d      	mov	r5, r3
 800e7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e7f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800e802:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f7ff fcca 	bl	800e1a8 <lfs_dir_relocatingcommit>
 800e814:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800e818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	da02      	bge.n	800e826 <lfs_dir_orphaningcommit+0xfa>
        return state;
 800e820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e824:	e26f      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fc fda4 	bl	800b37c <lfs_pair_cmp>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d109      	bne.n	800e84e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	461d      	mov	r5, r3
 800e83e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800e842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e84a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800e84e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e852:	2b02      	cmp	r3, #2
 800e854:	d14a      	bne.n	800e8ec <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3348      	adds	r3, #72	@ 0x48
 800e85a:	461a      	mov	r2, r3
 800e85c:	68b9      	ldr	r1, [r7, #8]
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f7fe fc20 	bl	800d0a4 <lfs_dir_getgstate>
 800e864:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 800e868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <lfs_dir_orphaningcommit+0x14a>
            return err;
 800e870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e874:	e247      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800e876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 800e87c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e87e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	3318      	adds	r3, #24
 800e886:	4618      	mov	r0, r3
 800e888:	f7fc fde9 	bl	800b45e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	7ddb      	ldrb	r3, [r3, #23]
 800e890:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800e894:	051a      	lsls	r2, r3, #20
 800e896:	4bc2      	ldr	r3, [pc, #776]	@ (800eba0 <lfs_dir_orphaningcommit+0x474>)
 800e898:	4313      	orrs	r3, r2
 800e89a:	667b      	str	r3, [r7, #100]	@ 0x64
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	3318      	adds	r3, #24
 800e8a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e8a6:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800e8aa:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	9001      	str	r0, [sp, #4]
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	9000      	str	r0, [sp, #0]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f7ff fc76 	bl	800e1a8 <lfs_dir_relocatingcommit>
 800e8bc:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3318      	adds	r3, #24
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fc fdb0 	bl	800b42a <lfs_pair_fromle32>
        if (state < 0) {
 800e8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	da02      	bge.n	800e8d8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800e8d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e8d6:	e216      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800e8d8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800e8dc:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800e8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e8e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800e8f2:	e1fc      	b.n	800ecee <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800e8f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800e8f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e8fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e900:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e904:	4ca7      	ldr	r4, [pc, #668]	@ (800eba4 <lfs_dir_orphaningcommit+0x478>)
 800e906:	9403      	str	r4, [sp, #12]
 800e908:	9102      	str	r1, [sp, #8]
 800e90a:	9201      	str	r2, [sp, #4]
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	4603      	mov	r3, r0
 800e910:	f640 128c 	movw	r2, #2444	@ 0x98c
 800e914:	49a4      	ldr	r1, [pc, #656]	@ (800eba8 <lfs_dir_orphaningcommit+0x47c>)
 800e916:	48a5      	ldr	r0, [pc, #660]	@ (800ebac <lfs_dir_orphaningcommit+0x480>)
 800e918:	f012 fa82 	bl	8020e20 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f103 0220 	add.w	r2, r3, #32
 800e928:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fc fd24 	bl	800b37c <lfs_pair_cmp>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d107      	bne.n	800e94a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800e93a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800e942:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e952:	e037      	b.n	800e9c4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800e954:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e958:	f103 0208 	add.w	r2, r3, #8
 800e95c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e960:	4611      	mov	r1, r2
 800e962:	4618      	mov	r0, r3
 800e964:	f7fc fd0a 	bl	800b37c <lfs_pair_cmp>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d109      	bne.n	800e982 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800e96e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e976:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800e978:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e97c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e980:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800e982:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e986:	799b      	ldrb	r3, [r3, #6]
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d116      	bne.n	800e9ba <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800e98c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e990:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800e994:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e998:	4611      	mov	r1, r2
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fc fcee 	bl	800b37c <lfs_pair_cmp>
 800e9a0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d109      	bne.n	800e9ba <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800e9a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e9aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e9ae:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800e9b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e9b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e9b8:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e9ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e9c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1c3      	bne.n	800e954 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800e9cc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800e9d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f003 f87e 	bl	8011ad8 <lfs_fs_parent>
 800e9dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e9e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	da07      	bge.n	800e9f8 <lfs_dir_orphaningcommit+0x2cc>
 800e9e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e9ec:	f113 0f02 	cmn.w	r3, #2
 800e9f0:	d002      	beq.n	800e9f8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800e9f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e9f6:	e186      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800e9f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e9fc:	f113 0f02 	cmn.w	r3, #2
 800ea00:	bf14      	ite	ne
 800ea02:	2301      	movne	r3, #1
 800ea04:	2300      	moveq	r3, #0
 800ea06:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 800ea0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ea0e:	f113 0f02 	cmn.w	r3, #2
 800ea12:	f000 809e 	beq.w	800eb52 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800ea16:	2101      	movs	r1, #1
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f003 f8f5 	bl	8011c08 <lfs_fs_preporphans>
 800ea1e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800ea22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d002      	beq.n	800ea30 <lfs_dir_orphaningcommit+0x304>
                return err;
 800ea2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ea2e:	e16a      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800ea30:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800ea34:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3330      	adds	r3, #48	@ 0x30
 800ea3c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800ea40:	4611      	mov	r1, r2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fc fe4c 	bl	800b6e0 <lfs_gstate_hasmovehere>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d02d      	beq.n	800eaaa <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fc fd88 	bl	800b568 <lfs_tag_id>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 800ea5e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea62:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800ea66:	484f      	ldr	r0, [pc, #316]	@ (800eba4 <lfs_dir_orphaningcommit+0x478>)
 800ea68:	9002      	str	r0, [sp, #8]
 800ea6a:	9201      	str	r2, [sp, #4]
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 800ea74:	494c      	ldr	r1, [pc, #304]	@ (800eba8 <lfs_dir_orphaningcommit+0x47c>)
 800ea76:	484e      	ldr	r0, [pc, #312]	@ (800ebb0 <lfs_dir_orphaningcommit+0x484>)
 800ea78:	f012 f9d2 	bl	8020e20 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f003 f910 	bl	8011ca8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800ea88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fc fd6b 	bl	800b568 <lfs_tag_id>
 800ea92:	4603      	mov	r3, r0
 800ea94:	461a      	mov	r2, r3
 800ea96:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d205      	bcs.n	800eaaa <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800ea9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800eaa2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800eaa6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800eaaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaac:	657b      	str	r3, [r7, #84]	@ 0x54
 800eaae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eab0:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800eab2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fc fcd1 	bl	800b45e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800eabc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800eac0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d007      	beq.n	800ead8 <lfs_dir_orphaningcommit+0x3ac>
 800eac8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800eacc:	029b      	lsls	r3, r3, #10
 800eace:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800ead2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800ead6:	e000      	b.n	800eada <lfs_dir_orphaningcommit+0x3ae>
 800ead8:	2300      	movs	r3, #0
 800eada:	647b      	str	r3, [r7, #68]	@ 0x44
 800eadc:	2300      	movs	r3, #0
 800eade:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800eae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eae6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eaea:	653b      	str	r3, [r7, #80]	@ 0x50
 800eaec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800eaf0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800eaf4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800eaf8:	2000      	movs	r0, #0
 800eafa:	9001      	str	r0, [sp, #4]
 800eafc:	2002      	movs	r0, #2
 800eafe:	9000      	str	r0, [sp, #0]
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff fb51 	bl	800e1a8 <lfs_dir_relocatingcommit>
 800eb06:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800eb0a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fc fc8b 	bl	800b42a <lfs_pair_fromle32>
            if (state < 0) {
 800eb14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	da02      	bge.n	800eb22 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800eb1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb20:	e0f1      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800eb22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d113      	bne.n	800eb52 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800eb2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 800eb30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800eb36:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800eb3a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800eb3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800eb50:	e0cd      	b.n	800ecee <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800eb52:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800eb56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	f002 ff09 	bl	8011974 <lfs_fs_pred>
 800eb62:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800eb66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d007      	beq.n	800eb7e <lfs_dir_orphaningcommit+0x452>
 800eb6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb72:	f113 0f02 	cmn.w	r3, #2
 800eb76:	d002      	beq.n	800eb7e <lfs_dir_orphaningcommit+0x452>
            return err;
 800eb78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb7c:	e0c3      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800eb7e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d01a      	beq.n	800ebbc <lfs_dir_orphaningcommit+0x490>
 800eb86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb8a:	f113 0f02 	cmn.w	r3, #2
 800eb8e:	d115      	bne.n	800ebbc <lfs_dir_orphaningcommit+0x490>
 800eb90:	4b08      	ldr	r3, [pc, #32]	@ (800ebb4 <lfs_dir_orphaningcommit+0x488>)
 800eb92:	4a09      	ldr	r2, [pc, #36]	@ (800ebb8 <lfs_dir_orphaningcommit+0x48c>)
 800eb94:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 800eb98:	4803      	ldr	r0, [pc, #12]	@ (800eba8 <lfs_dir_orphaningcommit+0x47c>)
 800eb9a:	f011 fe95 	bl	80208c8 <__assert_func>
 800eb9e:	bf00      	nop
 800eba0:	000ffc08 	.word	0x000ffc08
 800eba4:	08023d60 	.word	0x08023d60
 800eba8:	08023c38 	.word	0x08023c38
 800ebac:	08023ee0 	.word	0x08023ee0
 800ebb0:	08023f1c 	.word	0x08023f1c
 800ebb4:	08023f60 	.word	0x08023f60
 800ebb8:	08026cd0 	.word	0x08026cd0

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800ebbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebc0:	f113 0f02 	cmn.w	r3, #2
 800ebc4:	f000 8093 	beq.w	800ecee <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3330      	adds	r3, #48	@ 0x30
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fc fd3e 	bl	800b64e <lfs_gstate_hasorphans>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d011      	beq.n	800ebfc <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 800ebd8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800ebdc:	425b      	negs	r3, r3
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	b25b      	sxtb	r3, r3
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f003 f80f 	bl	8011c08 <lfs_fs_preporphans>
 800ebea:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 800ebee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800ebf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebfa:	e084      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800ebfc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800ec00:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	3330      	adds	r3, #48	@ 0x30
 800ec08:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fc fd66 	bl	800b6e0 <lfs_gstate_hasmovehere>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d01c      	beq.n	800ec54 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fc fca2 	bl	800b568 <lfs_tag_id>
 800ec24:	4603      	mov	r3, r0
 800ec26:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800ec2a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ec2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec2e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800ec32:	4837      	ldr	r0, [pc, #220]	@ (800ed10 <lfs_dir_orphaningcommit+0x5e4>)
 800ec34:	9002      	str	r0, [sp, #8]
 800ec36:	9201      	str	r2, [sp, #4]
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 800ec40:	4934      	ldr	r1, [pc, #208]	@ (800ed14 <lfs_dir_orphaningcommit+0x5e8>)
 800ec42:	4835      	ldr	r0, [pc, #212]	@ (800ed18 <lfs_dir_orphaningcommit+0x5ec>)
 800ec44:	f012 f8ec 	bl	8020e20 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f003 f82a 	bl	8011ca8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800ec54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 800ec5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 800ec60:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fc fbfa 	bl	800b45e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800ec6a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800ec6e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d007      	beq.n	800ec86 <lfs_dir_orphaningcommit+0x55a>
 800ec76:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800ec7a:	029b      	lsls	r3, r3, #10
 800ec7c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800ec80:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800ec84:	e000      	b.n	800ec88 <lfs_dir_orphaningcommit+0x55c>
 800ec86:	2300      	movs	r3, #0
 800ec88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec8e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ec92:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800ec96:	051a      	lsls	r2, r3, #20
 800ec98:	4b20      	ldr	r3, [pc, #128]	@ (800ed1c <lfs_dir_orphaningcommit+0x5f0>)
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec9e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eca2:	633b      	str	r3, [r7, #48]	@ 0x30
 800eca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eca8:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800ecac:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	9001      	str	r0, [sp, #4]
 800ecb4:	2002      	movs	r0, #2
 800ecb6:	9000      	str	r0, [sp, #0]
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7ff fa75 	bl	800e1a8 <lfs_dir_relocatingcommit>
 800ecbe:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800ecc2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fc fbaf 	bl	800b42a <lfs_pair_fromle32>
            if (state < 0) {
 800eccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	da02      	bge.n	800ecda <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800ecd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ecd8:	e015      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800ecda:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800ecde:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800ece2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ece4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ece6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ecea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800ecee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	f43f adfe 	beq.w	800e8f4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800ecf8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <lfs_dir_orphaningcommit+0x5d8>
 800ed00:	2303      	movs	r3, #3
 800ed02:	e000      	b.n	800ed06 <lfs_dir_orphaningcommit+0x5da>
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	37e0      	adds	r7, #224	@ 0xe0
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	08023d60 	.word	0x08023d60
 800ed14:	08023c38 	.word	0x08023c38
 800ed18:	08023f1c 	.word	0x08023f1c
 800ed1c:	000ffc08 	.word	0x000ffc08

0800ed20 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7ff fcf9 	bl	800e72c <lfs_dir_orphaningcommit>
 800ed3a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	da01      	bge.n	800ed46 <lfs_dir_commit+0x26>
        return orphans;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	e00d      	b.n	800ed62 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f003 f8cc 	bl	8011eec <lfs_fs_deorphan>
 800ed54:	6138      	str	r0, [r7, #16]
        if (err) {
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d001      	beq.n	800ed60 <lfs_dir_commit+0x40>
            return err;
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	e000      	b.n	800ed62 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3718      	adds	r7, #24
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
	...

0800ed6c <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 800ed6c:	b5b0      	push	{r4, r5, r7, lr}
 800ed6e:	b0b8      	sub	sp, #224	@ 0xe0
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f003 fa68 	bl	801224c <lfs_fs_forceconsistency>
 800ed7c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 800ed80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <lfs_mkdir_+0x22>
        return err;
 800ed88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed8c:	e128      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800ed96:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 800ed9a:	463a      	mov	r2, r7
 800ed9c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800eda0:	f103 0108 	add.w	r1, r3, #8
 800eda4:	4603      	mov	r3, r0
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fe fa72 	bl	800d290 <lfs_dir_find>
 800edac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800edb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edb4:	f113 0f02 	cmn.w	r3, #2
 800edb8:	d105      	bne.n	800edc6 <lfs_mkdir_+0x5a>
 800edba:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800edbe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d109      	bne.n	800edda <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800edc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edca:	2b00      	cmp	r3, #0
 800edcc:	da02      	bge.n	800edd4 <lfs_mkdir_+0x68>
 800edce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edd2:	e105      	b.n	800efe0 <lfs_mkdir_+0x274>
 800edd4:	f06f 0310 	mvn.w	r3, #16
 800edd8:	e102      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f1 fa4f 	bl	8000280 <strlen>
 800ede2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800edee:	429a      	cmp	r2, r3
 800edf0:	d902      	bls.n	800edf8 <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800edf2:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800edf6:	e0f3      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7fc fe1c 	bl	800ba36 <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800edfe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7fe fd63 	bl	800d8d0 <lfs_dir_alloc>
 800ee0a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 800ee0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d002      	beq.n	800ee1c <lfs_mkdir_+0xb0>
        return err;
 800ee16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee1a:	e0e1      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800ee1c:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 800ee20:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 800ee24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ee2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800ee30:	e012      	b.n	800ee58 <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800ee32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ee36:	f103 0218 	add.w	r2, r3, #24
 800ee3a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7fe f913 	bl	800d06c <lfs_dir_fetch>
 800ee46:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 800ee4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <lfs_mkdir_+0xec>
            return err;
 800ee52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee56:	e0c3      	b.n	800efe0 <lfs_mkdir_+0x274>
    while (pred.split) {
 800ee58:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1e8      	bne.n	800ee32 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800ee60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ee64:	3318      	adds	r3, #24
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fc faf9 	bl	800b45e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800ee6c:	4b5e      	ldr	r3, [pc, #376]	@ (800efe8 <lfs_mkdir_+0x27c>)
 800ee6e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ee74:	3318      	adds	r3, #24
 800ee76:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ee78:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800ee7c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800ee80:	2301      	movs	r3, #1
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff ff4c 	bl	800ed20 <lfs_dir_commit>
 800ee88:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800ee8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ee90:	3318      	adds	r3, #24
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fc fac9 	bl	800b42a <lfs_pair_fromle32>
    if (err) {
 800ee98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <lfs_mkdir_+0x13a>
        return err;
 800eea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eea4:	e09c      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 800eea6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d04c      	beq.n	800ef48 <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800eeae:	2101      	movs	r1, #1
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f002 fea9 	bl	8011c08 <lfs_fs_preporphans>
 800eeb6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 800eeba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <lfs_mkdir_+0x15c>
            return err;
 800eec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eec6:	e08b      	b.n	800efe0 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800eeda:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 800eedc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fc fabc 	bl	800b45e <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800eee6:	4b40      	ldr	r3, [pc, #256]	@ (800efe8 <lfs_mkdir_+0x27c>)
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	f107 0214 	add.w	r2, r7, #20
 800eef4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800eef8:	2301      	movs	r3, #1
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff ff10 	bl	800ed20 <lfs_dir_commit>
 800ef00:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800ef04:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fc fa8e 	bl	800b42a <lfs_pair_fromle32>
        if (err) {
 800ef0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d006      	beq.n	800ef24 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 800ef16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 800ef1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef22:	e05d      	b.n	800efe0 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 800ef24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800ef2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f002 fe69 	bl	8011c08 <lfs_fs_preporphans>
 800ef36:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 800ef3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <lfs_mkdir_+0x1dc>
            return err;
 800ef42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef46:	e04b      	b.n	800efe0 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800ef48:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fc fa86 	bl	800b45e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800ef52:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ef56:	029b      	lsls	r3, r3, #10
 800ef58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef62:	2300      	movs	r3, #0
 800ef64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef66:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ef6a:	029a      	lsls	r2, r3, #10
 800ef6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ef70:	4313      	orrs	r3, r2
 800ef72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef76:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef7c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800ef80:	029b      	lsls	r3, r3, #10
 800ef82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef86:	f043 0308 	orr.w	r3, r3, #8
 800ef8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800ef90:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef92:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800ef96:	f083 0301 	eor.w	r3, r3, #1
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <lfs_mkdir_+0x238>
 800efa0:	4b11      	ldr	r3, [pc, #68]	@ (800efe8 <lfs_mkdir_+0x27c>)
 800efa2:	e000      	b.n	800efa6 <lfs_mkdir_+0x23a>
 800efa4:	2300      	movs	r3, #0
 800efa6:	657b      	str	r3, [r7, #84]	@ 0x54
 800efa8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800efac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efae:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800efb2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800efb6:	f103 0108 	add.w	r1, r3, #8
 800efba:	2304      	movs	r3, #4
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff feaf 	bl	800ed20 <lfs_dir_commit>
 800efc2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800efc6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fc fa2d 	bl	800b42a <lfs_pair_fromle32>
    if (err) {
 800efd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <lfs_mkdir_+0x272>
        return err;
 800efd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efdc:	e000      	b.n	800efe0 <lfs_mkdir_+0x274>
    }

    return 0;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	37e0      	adds	r7, #224	@ 0xe0
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bdb0      	pop	{r4, r5, r7, pc}
 800efe8:	600ffc08 	.word	0x600ffc08

0800efec <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b08d      	sub	sp, #52	@ 0x34
 800eff0:	af02      	add	r7, sp, #8
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f103 0108 	add.w	r1, r3, #8
 800effe:	1d3a      	adds	r2, r7, #4
 800f000:	2300      	movs	r3, #0
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7fe f944 	bl	800d290 <lfs_dir_find>
 800f008:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	da01      	bge.n	800f014 <lfs_dir_open_+0x28>
        return tag;
 800f010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f012:	e05e      	b.n	800f0d2 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	4618      	mov	r0, r3
 800f018:	f7fc fa7c 	bl	800b514 <lfs_tag_type3>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b02      	cmp	r3, #2
 800f020:	d002      	beq.n	800f028 <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 800f022:	f06f 0313 	mvn.w	r3, #19
 800f026:	e054      	b.n	800f0d2 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 800f028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fc fa9c 	bl	800b568 <lfs_tag_id>
 800f030:	4603      	mov	r3, r0
 800f032:	461a      	mov	r2, r3
 800f034:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f038:	429a      	cmp	r2, r3
 800f03a:	d106      	bne.n	800f04a <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6a1b      	ldr	r3, [r3, #32]
 800f040:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f046:	61bb      	str	r3, [r7, #24]
 800f048:	e01f      	b.n	800f08a <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f052:	4618      	mov	r0, r3
 800f054:	f7fc fa88 	bl	800b568 <lfs_tag_id>
 800f058:	4603      	mov	r3, r0
 800f05a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800f05c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f060:	f043 0308 	orr.w	r3, r3, #8
 800f064:	f107 0214 	add.w	r2, r7, #20
 800f068:	9200      	str	r2, [sp, #0]
 800f06a:	4a1c      	ldr	r2, [pc, #112]	@ (800f0dc <lfs_dir_open_+0xf0>)
 800f06c:	4621      	mov	r1, r4
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7fc fef6 	bl	800be60 <lfs_dir_get>
 800f074:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da01      	bge.n	800f080 <lfs_dir_open_+0x94>
            return res;
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	e028      	b.n	800f0d2 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc f9d0 	bl	800b42a <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	3308      	adds	r3, #8
 800f08e:	f107 0214 	add.w	r2, r7, #20
 800f092:	4619      	mov	r1, r3
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f7fd ffe9 	bl	800d06c <lfs_dir_fetch>
 800f09a:	61f8      	str	r0, [r7, #28]
    if (err) {
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <lfs_dir_open_+0xba>
        return err;
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	e015      	b.n	800f0d2 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	689a      	ldr	r2, [r3, #8]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	68da      	ldr	r2, [r3, #12]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2202      	movs	r2, #2
 800f0c6:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 800f0c8:	68b9      	ldr	r1, [r7, #8]
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f7fc fc77 	bl	800b9be <lfs_mlist_append>

    return 0;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	372c      	adds	r7, #44	@ 0x2c
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd90      	pop	{r4, r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	700ffc00 	.word	0x700ffc00

0800f0e0 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7fc fc44 	bl	800b97a <lfs_mlist_remove>

    return 0;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 800f108:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800f10c:	2100      	movs	r1, #0
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f011 ffb6 	bl	8021080 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d110      	bne.n	800f13e <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2202      	movs	r2, #2
 800f120:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	3308      	adds	r3, #8
 800f126:	4935      	ldr	r1, [pc, #212]	@ (800f1fc <lfs_dir_read_+0x100>)
 800f128:	461a      	mov	r2, r3
 800f12a:	460b      	mov	r3, r1
 800f12c:	881b      	ldrh	r3, [r3, #0]
 800f12e:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 800f13a:	2301      	movs	r3, #1
 800f13c:	e05a      	b.n	800f1f4 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f142:	2b01      	cmp	r3, #1
 800f144:	d110      	bne.n	800f168 <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2202      	movs	r2, #2
 800f14a:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	3308      	adds	r3, #8
 800f150:	4a2b      	ldr	r2, [pc, #172]	@ (800f200 <lfs_dir_read_+0x104>)
 800f152:	8811      	ldrh	r1, [r2, #0]
 800f154:	7892      	ldrb	r2, [r2, #2]
 800f156:	8019      	strh	r1, [r3, #0]
 800f158:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 800f164:	2301      	movs	r3, #1
 800f166:	e045      	b.n	800f1f4 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	889a      	ldrh	r2, [r3, #4]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	8b9b      	ldrh	r3, [r3, #28]
 800f170:	429a      	cmp	r2, r3
 800f172:	d11a      	bne.n	800f1aa <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	7fdb      	ldrb	r3, [r3, #31]
 800f178:	f083 0301 	eor.w	r3, r3, #1
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <lfs_dir_read_+0x8a>
                return false;
 800f182:	2300      	movs	r3, #0
 800f184:	e036      	b.n	800f1f4 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f103 0108 	add.w	r1, r3, #8
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	3320      	adds	r3, #32
 800f190:	461a      	mov	r2, r3
 800f192:	68f8      	ldr	r0, [r7, #12]
 800f194:	f7fd ff6a 	bl	800d06c <lfs_dir_fetch>
 800f198:	6178      	str	r0, [r7, #20]
            if (err) {
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d001      	beq.n	800f1a4 <lfs_dir_read_+0xa8>
                return err;
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	e027      	b.n	800f1f4 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f103 0108 	add.w	r1, r3, #8
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	889a      	ldrh	r2, [r3, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f7fd ffa6 	bl	800d108 <lfs_dir_getinfo>
 800f1bc:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <lfs_dir_read_+0xd4>
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f113 0f02 	cmn.w	r3, #2
 800f1ca:	d001      	beq.n	800f1d0 <lfs_dir_read_+0xd4>
            return err;
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	e011      	b.n	800f1f4 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	889b      	ldrh	r3, [r3, #4]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	f113 0f02 	cmn.w	r3, #2
 800f1e2:	d100      	bne.n	800f1e6 <lfs_dir_read_+0xea>
    while (true) {
 800f1e4:	e7c0      	b.n	800f168 <lfs_dir_read_+0x6c>
            break;
 800f1e6:	bf00      	nop
        }
    }

    dir->pos += 1;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 800f1f2:	2301      	movs	r3, #1
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	08023db0 	.word	0x08023db0
 800f200:	08023db4 	.word	0x08023db4

0800f204 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800f204:	b590      	push	{r4, r7, lr}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f21a:	3b08      	subs	r3, #8
 800f21c:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	fbb2 f3f3 	udiv	r3, r2, r3
 800f226:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <lfs_ctz_index+0x2e>
        return 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	e01c      	b.n	800f26c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3b01      	subs	r3, #1
 800f236:	4618      	mov	r0, r3
 800f238:	f7fb fc79 	bl	800ab2e <lfs_popc>
 800f23c:	4603      	mov	r3, r0
 800f23e:	3302      	adds	r3, #2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	697a      	ldr	r2, [r7, #20]
 800f244:	1ad2      	subs	r2, r2, r3
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	fbb2 f3f3 	udiv	r3, r2, r3
 800f24c:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	fb02 f303 	mul.w	r3, r2, r3
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	1ad4      	subs	r4, r2, r3
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7fb fc67 	bl	800ab2e <lfs_popc>
 800f260:	4603      	mov	r3, r0
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	1ae2      	subs	r2, r4, r3
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	601a      	str	r2, [r3, #0]
    return i;
 800f26a:	68fb      	ldr	r3, [r7, #12]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	371c      	adds	r7, #28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd90      	pop	{r4, r7, pc}

0800f274 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800f274:	b590      	push	{r4, r7, lr}
 800f276:	b08f      	sub	sp, #60	@ 0x3c
 800f278:	af04      	add	r7, sp, #16
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800f282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f284:	2b00      	cmp	r3, #0
 800f286:	d108      	bne.n	800f29a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800f288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f28a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f28e:	601a      	str	r2, [r3, #0]
        *off = 0;
 800f290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
        return 0;
 800f296:	2300      	movs	r3, #0
 800f298:	e053      	b.n	800f342 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800f29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29c:	3b01      	subs	r3, #1
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	f107 0314 	add.w	r3, r7, #20
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff ffac 	bl	800f204 <lfs_ctz_index>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800f2b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f7ff ffa4 	bl	800f204 <lfs_ctz_index>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800f2c0:	e034      	b.n	800f32c <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800f2c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fb fc10 	bl	800aaf0 <lfs_npw2>
 800f2d0:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800f2d2:	1e5c      	subs	r4, r3, #1
 800f2d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2d6:	f7fb fc1b 	bl	800ab10 <lfs_ctz>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4619      	mov	r1, r3
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f7fb fbcf 	bl	800aa82 <lfs_min>
 800f2e4:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	69fa      	ldr	r2, [r7, #28]
 800f2ea:	0092      	lsls	r2, r2, #2
 800f2ec:	2104      	movs	r1, #4
 800f2ee:	9103      	str	r1, [sp, #12]
 800f2f0:	4639      	mov	r1, r7
 800f2f2:	9102      	str	r1, [sp, #8]
 800f2f4:	9201      	str	r2, [sp, #4]
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	2304      	movs	r3, #4
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	68b9      	ldr	r1, [r7, #8]
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f7fb fc9a 	bl	800ac38 <lfs_bd_read>
 800f304:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fb fc2a 	bl	800ab62 <lfs_fromle32>
 800f30e:	4603      	mov	r3, r0
 800f310:	603b      	str	r3, [r7, #0]
        if (err) {
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <lfs_ctz_find+0xa8>
            return err;
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	e012      	b.n	800f342 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800f31c:	2201      	movs	r2, #1
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	fa02 f303 	lsl.w	r3, r2, r3
 800f324:	461a      	mov	r2, r3
 800f326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f328:	1a9b      	subs	r3, r3, r2
 800f32a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 800f32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	429a      	cmp	r2, r3
 800f332:	d8c6      	bhi.n	800f2c2 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f338:	601a      	str	r2, [r3, #0]
    *off = pos;
 800f33a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f33e:	601a      	str	r2, [r3, #0]
    return 0;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	372c      	adds	r7, #44	@ 0x2c
 800f346:	46bd      	mov	sp, r7
 800f348:	bd90      	pop	{r4, r7, pc}
	...

0800f34c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b092      	sub	sp, #72	@ 0x48
 800f350:	af04      	add	r7, sp, #16
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800f35a:	f107 0320 	add.w	r3, r7, #32
 800f35e:	4619      	mov	r1, r3
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f7fc fbff 	bl	800bb64 <lfs_alloc>
 800f366:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 800f368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <lfs_ctz_extend+0x26>
            return err;
 800f36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f370:	e0e9      	b.n	800f546 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	4619      	mov	r1, r3
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f7fb ff9e 	bl	800b2b8 <lfs_bd_erase>
 800f37c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 800f37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f380:	2b00      	cmp	r3, #0
 800f382:	d006      	beq.n	800f392 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800f384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f386:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f38a:	f000 80cb 	beq.w	800f524 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800f38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f390:	e0d9      	b.n	800f546 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800f392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f394:	2b00      	cmp	r3, #0
 800f396:	d107      	bne.n	800f3a8 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800f398:	6a3a      	ldr	r2, [r7, #32]
 800f39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f39c:	601a      	str	r2, [r3, #0]
                *off = 0;
 800f39e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	601a      	str	r2, [r3, #0]
                return 0;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e0ce      	b.n	800f546 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800f3a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800f3ae:	f107 031c 	add.w	r3, r7, #28
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7ff ff25 	bl	800f204 <lfs_ctz_index>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d044      	beq.n	800f45a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3d4:	e035      	b.n	800f442 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800f3d6:	69fa      	ldr	r2, [r7, #28]
 800f3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3da:	1ad2      	subs	r2, r2, r3
 800f3dc:	2301      	movs	r3, #1
 800f3de:	9303      	str	r3, [sp, #12]
 800f3e0:	f107 0317 	add.w	r3, r7, #23
 800f3e4:	9302      	str	r3, [sp, #8]
 800f3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f7fb fc1f 	bl	800ac38 <lfs_bd_read>
 800f3fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800f3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <lfs_ctz_extend+0xba>
                        return err;
 800f402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f404:	e09f      	b.n	800f546 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800f406:	6a3b      	ldr	r3, [r7, #32]
 800f408:	2201      	movs	r2, #1
 800f40a:	9203      	str	r2, [sp, #12]
 800f40c:	f107 0217 	add.w	r2, r7, #23
 800f410:	9202      	str	r2, [sp, #8]
 800f412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f414:	9201      	str	r2, [sp, #4]
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	2301      	movs	r3, #1
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7fb fe9c 	bl	800b15c <lfs_bd_prog>
 800f424:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800f426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d007      	beq.n	800f43c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800f42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f432:	d101      	bne.n	800f438 <lfs_ctz_extend+0xec>
                            goto relocate;
 800f434:	bf00      	nop
                    goto relocate;
 800f436:	e075      	b.n	800f524 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 800f43a:	e084      	b.n	800f546 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800f43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f43e:	3301      	adds	r3, #1
 800f440:	637b      	str	r3, [r7, #52]	@ 0x34
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f446:	429a      	cmp	r2, r3
 800f448:	d3c5      	bcc.n	800f3d6 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800f44a:	6a3a      	ldr	r2, [r7, #32]
 800f44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f44e:	601a      	str	r2, [r3, #0]
                *off = noff;
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f454:	601a      	str	r2, [r3, #0]
                return 0;
 800f456:	2300      	movs	r3, #0
 800f458:	e075      	b.n	800f546 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800f45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45c:	3301      	adds	r3, #1
 800f45e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800f460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f462:	f7fb fb55 	bl	800ab10 <lfs_ctz>
 800f466:	4603      	mov	r3, r0
 800f468:	3301      	adds	r3, #1
 800f46a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800f470:	2300      	movs	r3, #0
 800f472:	633b      	str	r3, [r7, #48]	@ 0x30
 800f474:	e049      	b.n	800f50a <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fb fb7d 	bl	800ab78 <lfs_tole32>
 800f47e:	4603      	mov	r3, r0
 800f480:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f486:	0092      	lsls	r2, r2, #2
 800f488:	2104      	movs	r1, #4
 800f48a:	9103      	str	r1, [sp, #12]
 800f48c:	f107 0118 	add.w	r1, r7, #24
 800f490:	9102      	str	r1, [sp, #8]
 800f492:	9201      	str	r2, [sp, #4]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	2301      	movs	r3, #1
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	68b9      	ldr	r1, [r7, #8]
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f7fb fe5d 	bl	800b15c <lfs_bd_prog>
 800f4a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fb fb5b 	bl	800ab62 <lfs_fromle32>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	61bb      	str	r3, [r7, #24]
                if (err) {
 800f4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d005      	beq.n	800f4c2 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800f4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f4bc:	d034      	beq.n	800f528 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800f4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c0:	e041      	b.n	800f546 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d01b      	beq.n	800f504 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4d0:	0092      	lsls	r2, r2, #2
 800f4d2:	2104      	movs	r1, #4
 800f4d4:	9103      	str	r1, [sp, #12]
 800f4d6:	f107 0118 	add.w	r1, r7, #24
 800f4da:	9102      	str	r1, [sp, #8]
 800f4dc:	9201      	str	r2, [sp, #4]
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	2304      	movs	r3, #4
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7fb fba6 	bl	800ac38 <lfs_bd_read>
 800f4ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fb fb36 	bl	800ab62 <lfs_fromle32>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800f4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <lfs_ctz_extend+0x1b8>
                        return err;
 800f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f502:	e020      	b.n	800f546 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800f504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f506:	3301      	adds	r3, #1
 800f508:	633b      	str	r3, [r7, #48]	@ 0x30
 800f50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50e:	429a      	cmp	r2, r3
 800f510:	d3b1      	bcc.n	800f476 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800f512:	6a3a      	ldr	r2, [r7, #32]
 800f514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f516:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800f518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51a:	009a      	lsls	r2, r3, #2
 800f51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f51e:	601a      	str	r2, [r3, #0]
            return 0;
 800f520:	2300      	movs	r3, #0
 800f522:	e010      	b.n	800f546 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800f524:	bf00      	nop
 800f526:	e000      	b.n	800f52a <lfs_ctz_extend+0x1de>
                        goto relocate;
 800f528:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	4a08      	ldr	r2, [pc, #32]	@ (800f550 <lfs_ctz_extend+0x204>)
 800f52e:	9200      	str	r2, [sp, #0]
 800f530:	f640 32a6 	movw	r2, #2982	@ 0xba6
 800f534:	4907      	ldr	r1, [pc, #28]	@ (800f554 <lfs_ctz_extend+0x208>)
 800f536:	4808      	ldr	r0, [pc, #32]	@ (800f558 <lfs_ctz_extend+0x20c>)
 800f538:	f011 fc72 	bl	8020e20 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800f53c:	68b9      	ldr	r1, [r7, #8]
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f7fb fb55 	bl	800abee <lfs_cache_drop>
    while (true) {
 800f544:	e709      	b.n	800f35a <lfs_ctz_extend+0xe>
    }
}
 800f546:	4618      	mov	r0, r3
 800f548:	3738      	adds	r7, #56	@ 0x38
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	08023d60 	.word	0x08023d60
 800f554:	08023c38 	.word	0x08023c38
 800f558:	08023de0 	.word	0x08023de0

0800f55c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b090      	sub	sp, #64	@ 0x40
 800f560:	af04      	add	r7, sp, #16
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
 800f568:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800f56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d101      	bne.n	800f574 <lfs_ctz_traverse+0x18>
        return 0;
 800f570:	2300      	movs	r3, #0
 800f572:	e06b      	b.n	800f64c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800f574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f576:	3b01      	subs	r3, #1
 800f578:	61fb      	str	r3, [r7, #28]
 800f57a:	f107 031c 	add.w	r3, r7, #28
 800f57e:	4619      	mov	r1, r3
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff fe3f 	bl	800f204 <lfs_ctz_index>
 800f586:	4603      	mov	r3, r0
 800f588:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 800f58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800f590:	4798      	blx	r3
 800f592:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800f594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <lfs_ctz_traverse+0x42>
            return err;
 800f59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59c:	e056      	b.n	800f64c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800f59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d101      	bne.n	800f5a8 <lfs_ctz_traverse+0x4c>
            return 0;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e051      	b.n	800f64c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800f5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5aa:	f003 0301 	and.w	r3, r3, #1
 800f5ae:	f1c3 0302 	rsb	r3, r3, #2
 800f5b2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800f5b4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800f5b6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800f5b8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800f5ba:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800f5bc:	9303      	str	r3, [sp, #12]
 800f5be:	f107 0314 	add.w	r3, r7, #20
 800f5c2:	9302      	str	r3, [sp, #8]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	9301      	str	r3, [sp, #4]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f7fb fb30 	bl	800ac38 <lfs_bd_read>
 800f5d8:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fb fac0 	bl	800ab62 <lfs_fromle32>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fb faba 	bl	800ab62 <lfs_fromle32>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	61bb      	str	r3, [r7, #24]
        if (err) {
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <lfs_ctz_traverse+0xa0>
            return err;
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fa:	e027      	b.n	800f64c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f600:	e012      	b.n	800f628 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800f602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	3330      	adds	r3, #48	@ 0x30
 800f608:	443b      	add	r3, r7
 800f60a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800f60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f610:	4611      	mov	r1, r2
 800f612:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800f614:	4798      	blx	r3
 800f616:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 800f618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <lfs_ctz_traverse+0xc6>
                return err;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f620:	e014      	b.n	800f64c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800f622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f624:	3301      	adds	r3, #1
 800f626:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f628:	6a3b      	ldr	r3, [r7, #32]
 800f62a:	3b01      	subs	r3, #1
 800f62c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f62e:	429a      	cmp	r2, r3
 800f630:	dbe7      	blt.n	800f602 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800f632:	6a3b      	ldr	r3, [r7, #32]
 800f634:	3b01      	subs	r3, #1
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	3330      	adds	r3, #48	@ 0x30
 800f63a:	443b      	add	r3, r7
 800f63c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f640:	603b      	str	r3, [r7, #0]
        index -= count;
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 800f64a:	e79e      	b.n	800f58a <lfs_ctz_traverse+0x2e>
    }
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3730      	adds	r7, #48	@ 0x30
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800f654:	b5b0      	push	{r4, r5, r7, lr}
 800f656:	b09a      	sub	sp, #104	@ 0x68
 800f658:	af02      	add	r7, sp, #8
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
 800f660:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d008      	beq.n	800f67e <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f002 fded 	bl	801224c <lfs_fs_forceconsistency>
 800f672:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 800f674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <lfs_file_opencfg_+0x2a>
            return err;
 800f67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f67c:	e1b0      	b.n	800f9e0 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f682:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2200      	movs	r2, #0
 800f68e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	2200      	movs	r2, #0
 800f694:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2200      	movs	r2, #0
 800f69a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	f103 0108 	add.w	r1, r3, #8
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	1d3a      	adds	r2, r7, #4
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f7fd fdf1 	bl	800d290 <lfs_dir_find>
 800f6ae:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800f6b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	da0c      	bge.n	800f6d0 <lfs_file_opencfg_+0x7c>
 800f6b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6b8:	f113 0f02 	cmn.w	r3, #2
 800f6bc:	d105      	bne.n	800f6ca <lfs_file_opencfg_+0x76>
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	889b      	ldrh	r3, [r3, #4]
 800f6c2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d102      	bne.n	800f6d0 <lfs_file_opencfg_+0x7c>
        err = tag;
 800f6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800f6ce:	e17c      	b.n	800f9ca <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800f6d6:	68b9      	ldr	r1, [r7, #8]
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7fc f970 	bl	800b9be <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800f6de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6e0:	f113 0f02 	cmn.w	r3, #2
 800f6e4:	d14e      	bne.n	800f784 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d103      	bne.n	800f6f8 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 800f6f0:	f06f 0301 	mvn.w	r3, #1
 800f6f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800f6f6:	e168      	b.n	800f9ca <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f0 fdc0 	bl	8000280 <strlen>
 800f700:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f708:	429a      	cmp	r2, r3
 800f70a:	d903      	bls.n	800f714 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800f70c:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800f710:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800f712:	e15a      	b.n	800f9ca <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	f103 0108 	add.w	r1, r3, #8
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	889b      	ldrh	r3, [r3, #4]
 800f71e:	029b      	lsls	r3, r3, #10
 800f720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f72a:	2300      	movs	r3, #0
 800f72c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	889b      	ldrh	r3, [r3, #4]
 800f732:	029a      	lsls	r2, r3, #10
 800f734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f736:	4313      	orrs	r3, r2
 800f738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	889b      	ldrh	r3, [r3, #4]
 800f746:	029b      	lsls	r3, r3, #10
 800f748:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f74c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f752:	2300      	movs	r3, #0
 800f754:	643b      	str	r3, [r7, #64]	@ 0x40
 800f756:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f75a:	2303      	movs	r3, #3
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f7ff fadf 	bl	800ed20 <lfs_dir_commit>
 800f762:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800f764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f766:	f113 0f1c 	cmn.w	r3, #28
 800f76a:	d001      	beq.n	800f770 <lfs_file_opencfg_+0x11c>
 800f76c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f76e:	e001      	b.n	800f774 <lfs_file_opencfg_+0x120>
 800f770:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800f774:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 800f776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f040 8125 	bne.w	800f9c8 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800f77e:	4b9a      	ldr	r3, [pc, #616]	@ (800f9e8 <lfs_file_opencfg_+0x394>)
 800f780:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f782:	e044      	b.n	800f80e <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d003      	beq.n	800f796 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 800f78e:	f06f 0310 	mvn.w	r3, #16
 800f792:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800f794:	e119      	b.n	800f9ca <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800f796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fb febb 	bl	800b514 <lfs_tag_type3>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d003      	beq.n	800f7ac <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 800f7a4:	f06f 0314 	mvn.w	r3, #20
 800f7a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800f7aa:	e10e      	b.n	800f9ca <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00e      	beq.n	800f7d4 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	889b      	ldrh	r3, [r3, #4]
 800f7ba:	029b      	lsls	r3, r3, #10
 800f7bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f7c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7c4:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f7d2:	e01c      	b.n	800f80e <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	889b      	ldrh	r3, [r3, #4]
 800f7de:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800f7e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f7e4:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800f7ec:	9200      	str	r2, [sp, #0]
 800f7ee:	4a7f      	ldr	r2, [pc, #508]	@ (800f9ec <lfs_file_opencfg_+0x398>)
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7fc fb35 	bl	800be60 <lfs_dir_get>
 800f7f6:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 800f7f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	da02      	bge.n	800f804 <lfs_file_opencfg_+0x1b0>
            err = tag;
 800f7fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f800:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800f802:	e0e2      	b.n	800f9ca <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	3328      	adds	r3, #40	@ 0x28
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fb fff9 	bl	800b800 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800f80e:	2300      	movs	r3, #0
 800f810:	657b      	str	r3, [r7, #84]	@ 0x54
 800f812:	e063      	b.n	800f8dc <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d03c      	beq.n	800f89a <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f82a:	6859      	ldr	r1, [r3, #4]
 800f82c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f82e:	4613      	mov	r3, r2
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	4413      	add	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	440b      	add	r3, r1
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800f83e:	051a      	lsls	r2, r3, #20
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	889b      	ldrh	r3, [r3, #4]
 800f844:	029b      	lsls	r3, r3, #10
 800f846:	ea42 0103 	orr.w	r1, r2, r3
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f84e:	6858      	ldr	r0, [r3, #4]
 800f850:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f852:	4613      	mov	r3, r2
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4413      	add	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4403      	add	r3, r0
 800f85c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f85e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f866:	6859      	ldr	r1, [r3, #4]
 800f868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f86a:	4613      	mov	r3, r2
 800f86c:	005b      	lsls	r3, r3, #1
 800f86e:	4413      	add	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4603      	mov	r3, r0
 800f87a:	4a5d      	ldr	r2, [pc, #372]	@ (800f9f0 <lfs_file_opencfg_+0x39c>)
 800f87c:	4621      	mov	r1, r4
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7fc faee 	bl	800be60 <lfs_dir_get>
 800f884:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800f886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f888:	2b00      	cmp	r3, #0
 800f88a:	da06      	bge.n	800f89a <lfs_file_opencfg_+0x246>
 800f88c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f88e:	f113 0f02 	cmn.w	r3, #2
 800f892:	d002      	beq.n	800f89a <lfs_file_opencfg_+0x246>
                err = res;
 800f894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f896:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800f898:	e097      	b.n	800f9ca <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f89e:	f003 0302 	and.w	r3, r3, #2
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d017      	beq.n	800f8d6 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8aa:	6859      	ldr	r1, [r3, #4]
 800f8ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	440b      	add	r3, r1
 800f8b8:	689a      	ldr	r2, [r3, #8]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d903      	bls.n	800f8ca <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 800f8c2:	f06f 031b 	mvn.w	r3, #27
 800f8c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800f8c8:	e07f      	b.n	800f9ca <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800f8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8d8:	3301      	adds	r3, #1
 800f8da:	657b      	str	r3, [r7, #84]	@ 0x54
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d395      	bcc.n	800f814 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d005      	beq.n	800f8fe <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 800f8fc:	e010      	b.n	800f920 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f904:	4618      	mov	r0, r3
 800f906:	f7fb f95b 	bl	800abc0 <lfs_malloc>
 800f90a:	4602      	mov	r2, r0
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f914:	2b00      	cmp	r3, #0
 800f916:	d103      	bne.n	800f920 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 800f918:	f06f 030b 	mvn.w	r3, #11
 800f91c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800f91e:	e054      	b.n	800f9ca <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	3340      	adds	r3, #64	@ 0x40
 800f924:	4619      	mov	r1, r3
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f7fb f970 	bl	800ac0c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800f92c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fb fdf0 	bl	800b514 <lfs_tag_type3>
 800f934:	4603      	mov	r3, r0
 800f936:	461a      	mov	r2, r3
 800f938:	f240 2301 	movw	r3, #513	@ 0x201
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d141      	bne.n	800f9c4 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	f06f 0201 	mvn.w	r2, #1
 800f946:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 800f948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fb fe1c 	bl	800b588 <lfs_tag_size>
 800f950:	4602      	mov	r2, r0
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	2200      	movs	r2, #0
 800f96e:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d020      	beq.n	800f9c4 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	889b      	ldrh	r3, [r3, #4]
 800f98c:	029c      	lsls	r4, r3, #10
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f992:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800f996:	4618      	mov	r0, r3
 800f998:	f7fb f873 	bl	800aa82 <lfs_min>
 800f99c:	4603      	mov	r3, r0
 800f99e:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f9a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f9ec <lfs_file_opencfg_+0x398>)
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7fc fa55 	bl	800be60 <lfs_dir_get>
 800f9b6:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 800f9b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	da02      	bge.n	800f9c4 <lfs_file_opencfg_+0x370>
                err = res;
 800f9be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800f9c2:	e002      	b.n	800f9ca <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e00b      	b.n	800f9e0 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 800f9c8:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 800f9d6:	68b9      	ldr	r1, [r7, #8]
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f000 f823 	bl	800fa24 <lfs_file_close_>
    return err;
 800f9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3760      	adds	r7, #96	@ 0x60
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bdb0      	pop	{r4, r5, r7, pc}
 800f9e8:	20100000 	.word	0x20100000
 800f9ec:	700ffc00 	.word	0x700ffc00
 800f9f0:	7ffffc00 	.word	0x7ffffc00

0800f9f4 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af02      	add	r7, sp, #8
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
 800fa00:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 800fa02:	4b07      	ldr	r3, [pc, #28]	@ (800fa20 <lfs_file_open_+0x2c>)
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	68b9      	ldr	r1, [r7, #8]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7ff fe21 	bl	800f654 <lfs_file_opencfg_>
 800fa12:	6178      	str	r0, [r7, #20]
    return err;
 800fa14:	697b      	ldr	r3, [r7, #20]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	08026ce8 	.word	0x08026ce8

0800fa24 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 f9e5 	bl	800fe00 <lfs_file_sync_>
 800fa36:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7fb ff9d 	bl	800b97a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d104      	bne.n	800fa54 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fb f8c2 	bl	800abd8 <lfs_free>
    }

    return err;
 800fa54:	68fb      	ldr	r3, [r7, #12]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
	...

0800fa60 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b08d      	sub	sp, #52	@ 0x34
 800fa64:	af06      	add	r7, sp, #24
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800fa6a:	f107 030c 	add.w	r3, r7, #12
 800fa6e:	4619      	mov	r1, r3
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7fc f877 	bl	800bb64 <lfs_alloc>
 800fa76:	6138      	str	r0, [r7, #16]
        if (err) {
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <lfs_file_relocate+0x22>
            return err;
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	e0bb      	b.n	800fbfa <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4619      	mov	r1, r3
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7fb fc16 	bl	800b2b8 <lfs_bd_erase>
 800fa8c:	6138      	str	r0, [r7, #16]
        if (err) {
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d006      	beq.n	800faa2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fa9a:	f000 809b 	beq.w	800fbd4 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	e0ab      	b.n	800fbfa <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800faa2:	2300      	movs	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	e069      	b.n	800fb7c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d027      	beq.n	800fb04 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	f103 0008 	add.w	r0, r3, #8
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	889b      	ldrh	r3, [r3, #4]
 800facc:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800face:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fad6:	2101      	movs	r1, #1
 800fad8:	9105      	str	r1, [sp, #20]
 800fada:	f107 010b 	add.w	r1, r7, #11
 800fade:	9104      	str	r1, [sp, #16]
 800fae0:	6979      	ldr	r1, [r7, #20]
 800fae2:	9103      	str	r1, [sp, #12]
 800fae4:	9302      	str	r3, [sp, #8]
 800fae6:	4b47      	ldr	r3, [pc, #284]	@ (800fc04 <lfs_file_relocate+0x1a4>)
 800fae8:	9301      	str	r3, [sp, #4]
 800faea:	9200      	str	r2, [sp, #0]
 800faec:	4623      	mov	r3, r4
 800faee:	2200      	movs	r2, #0
 800faf0:	4601      	mov	r1, r0
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7fc f9cf 	bl	800be96 <lfs_dir_getread>
 800faf8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01e      	beq.n	800fb3e <lfs_file_relocate+0xde>
                    return err;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	e07a      	b.n	800fbfa <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 800fb0a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	1ad4      	subs	r4, r2, r3
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb18:	2201      	movs	r2, #1
 800fb1a:	9203      	str	r2, [sp, #12]
 800fb1c:	f107 020b 	add.w	r2, r7, #11
 800fb20:	9202      	str	r2, [sp, #8]
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	9201      	str	r2, [sp, #4]
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	4623      	mov	r3, r4
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7fb f883 	bl	800ac38 <lfs_bd_read>
 800fb32:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <lfs_file_relocate+0xde>
                    return err;
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	e05d      	b.n	800fbfa <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f103 0110 	add.w	r1, r3, #16
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	9203      	str	r2, [sp, #12]
 800fb4c:	f107 020b 	add.w	r2, r7, #11
 800fb50:	9202      	str	r2, [sp, #8]
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	9201      	str	r2, [sp, #4]
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	2301      	movs	r3, #1
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7fb fafd 	bl	800b15c <lfs_bd_prog>
 800fb62:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d005      	beq.n	800fb76 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fb70:	d032      	beq.n	800fbd8 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	e041      	b.n	800fbfa <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	617b      	str	r3, [r7, #20]
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d390      	bcc.n	800faa8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	69d9      	ldr	r1, [r3, #28]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb94:	461a      	mov	r2, r3
 800fb96:	f011 fb44 	bl	8021222 <memcpy>
        file->cache.block = lfs->pcache.block;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	691a      	ldr	r2, [r3, #16]
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	695a      	ldr	r2, [r3, #20]
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	699a      	ldr	r2, [r3, #24]
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3310      	adds	r3, #16
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7fb f827 	bl	800ac0c <lfs_cache_zero>

        file->block = nblock;
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	e012      	b.n	800fbfa <lfs_file_relocate+0x19a>
                goto relocate;
 800fbd4:	bf00      	nop
 800fbd6:	e000      	b.n	800fbda <lfs_file_relocate+0x17a>
                    goto relocate;
 800fbd8:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4a0a      	ldr	r2, [pc, #40]	@ (800fc08 <lfs_file_relocate+0x1a8>)
 800fbde:	9200      	str	r2, [sp, #0]
 800fbe0:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 800fbe4:	4909      	ldr	r1, [pc, #36]	@ (800fc0c <lfs_file_relocate+0x1ac>)
 800fbe6:	480a      	ldr	r0, [pc, #40]	@ (800fc10 <lfs_file_relocate+0x1b0>)
 800fbe8:	f011 f91a 	bl	8020e20 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3310      	adds	r3, #16
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7fa fffb 	bl	800abee <lfs_cache_drop>
    while (true) {
 800fbf8:	e737      	b.n	800fa6a <lfs_file_relocate+0xa>
    }
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	371c      	adds	r7, #28
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd90      	pop	{r4, r7, pc}
 800fc02:	bf00      	nop
 800fc04:	fff7fc00 	.word	0xfff7fc00
 800fc08:	08023d60 	.word	0x08023d60
 800fc0c:	08023c38 	.word	0x08023c38
 800fc10:	08023de0 	.word	0x08023de0

0800fc14 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7fb ff05 	bl	800ba36 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 800fc2c:	6839      	ldr	r1, [r7, #0]
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f7ff ff16 	bl	800fa60 <lfs_file_relocate>
 800fc34:	60f8      	str	r0, [r7, #12]
    if (err) {
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <lfs_file_outline+0x2c>
        return err;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	e006      	b.n	800fc4e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 800fc4c:	2300      	movs	r3, #0
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
	...

0800fc58 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800fc58:	b590      	push	{r4, r7, lr}
 800fc5a:	b09f      	sub	sp, #124	@ 0x7c
 800fc5c:	af02      	add	r7, sp, #8
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d011      	beq.n	800fc92 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d105      	bne.n	800fc86 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	3340      	adds	r3, #64	@ 0x40
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7fa ffb4 	bl	800abee <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 80a4 	beq.w	800fde8 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d176      	bne.n	800fda0 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800fcb2:	f107 030c 	add.w	r3, r7, #12
 800fcb6:	2254      	movs	r2, #84	@ 0x54
 800fcb8:	2100      	movs	r1, #0
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f011 f9e0 	bl	8021080 <memset>
                .ctz.head = file->ctz.head,
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 800fcc4:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800fcca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fccc:	2301      	movs	r3, #1
 800fcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 800fcd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800fcdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7fa ff81 	bl	800abee <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800fcec:	e02b      	b.n	800fd46 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800fcee:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 800fcf2:	f107 010c 	add.w	r1, r7, #12
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 f921 	bl	800ff40 <lfs_file_flushedread>
 800fcfe:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800fd00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	da01      	bge.n	800fd0a <lfs_file_flush+0xb2>
                    return res;
 800fd06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd08:	e06f      	b.n	800fdea <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800fd0a:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 800fd0e:	2301      	movs	r3, #1
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fa1c 	bl	8010150 <lfs_file_flushedwrite>
 800fd18:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800fd1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	da01      	bge.n	800fd24 <lfs_file_flush+0xcc>
                    return res;
 800fd20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd22:	e062      	b.n	800fdea <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd2c:	d00b      	beq.n	800fd46 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800fd2e:	f107 030c 	add.w	r3, r7, #12
 800fd32:	3340      	adds	r3, #64	@ 0x40
 800fd34:	4619      	mov	r1, r3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7fa ff59 	bl	800abee <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7fa ff54 	bl	800abee <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d3cd      	bcc.n	800fcee <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7fb f94f 	bl	800b000 <lfs_bd_flush>
 800fd62:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 800fd64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d026      	beq.n	800fdb8 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800fd6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd6c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fd70:	d001      	beq.n	800fd76 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800fd72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd74:	e039      	b.n	800fdea <lfs_file_flush+0x192>
                        goto relocate;
 800fd76:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7c:	4a1d      	ldr	r2, [pc, #116]	@ (800fdf4 <lfs_file_flush+0x19c>)
 800fd7e:	9200      	str	r2, [sp, #0]
 800fd80:	f640 522b 	movw	r2, #3371	@ 0xd2b
 800fd84:	491c      	ldr	r1, [pc, #112]	@ (800fdf8 <lfs_file_flush+0x1a0>)
 800fd86:	481d      	ldr	r0, [pc, #116]	@ (800fdfc <lfs_file_flush+0x1a4>)
 800fd88:	f011 f84a 	bl	8020e20 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff fe66 	bl	800fa60 <lfs_file_relocate>
 800fd94:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 800fd96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d0da      	beq.n	800fd52 <lfs_file_flush+0xfa>
                    return err;
 800fd9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd9e:	e024      	b.n	800fdea <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fda8:	4619      	mov	r1, r3
 800fdaa:	4610      	mov	r0, r2
 800fdac:	f7fa fe59 	bl	800aa62 <lfs_max>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800fdb6:	e000      	b.n	800fdba <lfs_file_flush+0x162>
                break;
 800fdb8:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fde6:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3774      	adds	r7, #116	@ 0x74
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd90      	pop	{r4, r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	08023d60 	.word	0x08023d60
 800fdf8:	08023c38 	.word	0x08023c38
 800fdfc:	08023de0 	.word	0x08023de0

0800fe00 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b090      	sub	sp, #64	@ 0x40
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	e08e      	b.n	800ff38 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff ff1b 	bl	800fc58 <lfs_file_flush>
 800fe22:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 800fe24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d007      	beq.n	800fe3a <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 800fe36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe38:	e07e      	b.n	800ff38 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d077      	beq.n	800ff36 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	3308      	adds	r3, #8
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fb fa7b 	bl	800b346 <lfs_pair_isnull>
 800fe50:	4603      	mov	r3, r0
 800fe52:	f083 0301 	eor.w	r3, r3, #1
 800fe56:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d06c      	beq.n	800ff36 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10d      	bne.n	800fe84 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f103 0110 	add.w	r1, r3, #16
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	2300      	movs	r3, #0
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7fb f93e 	bl	800b0f4 <lfs_bd_sync>
 800fe78:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <lfs_file_sync_+0x84>
                return err;
 800fe80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe82:	e059      	b.n	800ff38 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d009      	beq.n	800fea4 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800fe90:	f240 2301 	movw	r3, #513	@ 0x201
 800fe94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe9a:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fea2:	e014      	b.n	800fece <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800fea4:	f240 2302 	movw	r3, #514	@ 0x202
 800fea8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800feb0:	3228      	adds	r2, #40	@ 0x28
 800feb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feb6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800feba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fb fcb6 	bl	800b830 <lfs_ctz_tole32>
            buffer = &ctz;
 800fec4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fec8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 800feca:	2308      	movs	r3, #8
 800fecc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	f103 0108 	add.w	r1, r3, #8
 800fed4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fed6:	051a      	lsls	r2, r3, #20
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	889b      	ldrh	r3, [r3, #4]
 800fedc:	029b      	lsls	r3, r3, #10
 800fede:	431a      	orrs	r2, r3
 800fee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fee2:	4313      	orrs	r3, r2
 800fee4:	61bb      	str	r3, [r7, #24]
 800fee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fee8:	61fb      	str	r3, [r7, #28]
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	889b      	ldrh	r3, [r3, #4]
 800feee:	029a      	lsls	r2, r3, #10
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 800fefc:	623b      	str	r3, [r7, #32]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff06:	f107 0218 	add.w	r2, r7, #24
 800ff0a:	2302      	movs	r3, #2
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7fe ff07 	bl	800ed20 <lfs_dir_commit>
 800ff12:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800ff14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d007      	beq.n	800ff2a <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff1e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 800ff26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff28:	e006      	b.n	800ff38 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3740      	adds	r7, #64	@ 0x40
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800ff40:	b5b0      	push	{r4, r5, r7, lr}
 800ff42:	b090      	sub	sp, #64	@ 0x40
 800ff44:	af06      	add	r7, sp, #24
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d301      	bcc.n	800ff66 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	e0b7      	b.n	80100d6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	4619      	mov	r1, r3
 800ff72:	6838      	ldr	r0, [r7, #0]
 800ff74:	f7fa fd85 	bl	800aa82 <lfs_min>
 800ff78:	6038      	str	r0, [r7, #0]
    nsize = size;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800ff7e:	e0a5      	b.n	80100cc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d006      	beq.n	800ff9a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d130      	bne.n	800fffc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d11c      	bne.n	800ffe0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ffb8:	68b9      	ldr	r1, [r7, #8]
 800ffba:	3138      	adds	r1, #56	@ 0x38
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	303c      	adds	r0, #60	@ 0x3c
 800ffc0:	9003      	str	r0, [sp, #12]
 800ffc2:	9102      	str	r1, [sp, #8]
 800ffc4:	9201      	str	r2, [sp, #4]
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	462b      	mov	r3, r5
 800ffca:	4622      	mov	r2, r4
 800ffcc:	2100      	movs	r1, #0
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7ff f950 	bl	800f274 <lfs_ctz_find>
 800ffd4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d009      	beq.n	800fff0 <lfs_file_flushedread+0xb0>
                    return err;
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	e07a      	b.n	80100d6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	f06f 0201 	mvn.w	r2, #1
 800ffe6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fff4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	4619      	mov	r1, r3
 801000a:	6a38      	ldr	r0, [r7, #32]
 801000c:	f7fa fd39 	bl	800aa82 <lfs_min>
 8010010:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d026      	beq.n	801006c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	f103 0408 	add.w	r4, r3, #8
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801002e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	889b      	ldrh	r3, [r3, #4]
 8010034:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8010036:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801003a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801003e:	68b9      	ldr	r1, [r7, #8]
 8010040:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8010042:	69b8      	ldr	r0, [r7, #24]
 8010044:	9005      	str	r0, [sp, #20]
 8010046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010048:	9004      	str	r0, [sp, #16]
 801004a:	9103      	str	r1, [sp, #12]
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	4b24      	ldr	r3, [pc, #144]	@ (80100e0 <lfs_file_flushedread+0x1a0>)
 8010050:	9301      	str	r3, [sp, #4]
 8010052:	9200      	str	r2, [sp, #0]
 8010054:	462b      	mov	r3, r5
 8010056:	2200      	movs	r2, #0
 8010058:	4621      	mov	r1, r4
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7fb ff1b 	bl	800be96 <lfs_dir_getread>
 8010060:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01d      	beq.n	80100a4 <lfs_file_flushedread+0x164>
                return err;
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	e034      	b.n	80100d6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010076:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010080:	69b9      	ldr	r1, [r7, #24]
 8010082:	9103      	str	r1, [sp, #12]
 8010084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010086:	9102      	str	r1, [sp, #8]
 8010088:	9201      	str	r2, [sp, #4]
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	4623      	mov	r3, r4
 801008e:	4602      	mov	r2, r0
 8010090:	2100      	movs	r1, #0
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7fa fdd0 	bl	800ac38 <lfs_bd_read>
 8010098:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <lfs_file_flushedread+0x164>
                return err;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	e018      	b.n	80100d6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	441a      	add	r2, r3
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	441a      	add	r2, r3
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80100bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	4413      	add	r3, r2
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80100c4:	6a3a      	ldr	r2, [r7, #32]
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80100cc:	6a3b      	ldr	r3, [r7, #32]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f47f af56 	bne.w	800ff80 <lfs_file_flushedread+0x40>
    }

    return size;
 80100d4:	683b      	ldr	r3, [r7, #0]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3728      	adds	r7, #40	@ 0x28
 80100da:	46bd      	mov	sp, r7
 80100dc:	bdb0      	pop	{r4, r5, r7, pc}
 80100de:	bf00      	nop
 80100e0:	fff7fc00 	.word	0xfff7fc00

080100e4 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
 80100f0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100f6:	f003 0301 	and.w	r3, r3, #1
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d106      	bne.n	801010c <lfs_file_read_+0x28>
 80100fe:	4b11      	ldr	r3, [pc, #68]	@ (8010144 <lfs_file_read_+0x60>)
 8010100:	4a11      	ldr	r2, [pc, #68]	@ (8010148 <lfs_file_read_+0x64>)
 8010102:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 8010106:	4811      	ldr	r0, [pc, #68]	@ (801014c <lfs_file_read_+0x68>)
 8010108:	f010 fbde 	bl	80208c8 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d009      	beq.n	801012c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8010118:	68b9      	ldr	r1, [r7, #8]
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f7ff fd9c 	bl	800fc58 <lfs_file_flush>
 8010120:	6178      	str	r0, [r7, #20]
        if (err) {
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d001      	beq.n	801012c <lfs_file_read_+0x48>
            return err;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	e006      	b.n	801013a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	68b9      	ldr	r1, [r7, #8]
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f7ff ff04 	bl	800ff40 <lfs_file_flushedread>
 8010138:	4603      	mov	r3, r0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	08023f88 	.word	0x08023f88
 8010148:	08026cf4 	.word	0x08026cf4
 801014c:	08023c38 	.word	0x08023c38

08010150 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010150:	b5b0      	push	{r4, r5, r7, lr}
 8010152:	b090      	sub	sp, #64	@ 0x40
 8010154:	af04      	add	r7, sp, #16
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
 801015c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801016a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 80f4 	beq.w	801035c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801017a:	441a      	add	r2, r3
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010180:	4619      	mov	r1, r3
 8010182:	4610      	mov	r0, r2
 8010184:	f7fa fc6d 	bl	800aa62 <lfs_max>
 8010188:	4602      	mov	r2, r0
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801018e:	429a      	cmp	r2, r3
 8010190:	f240 80e4 	bls.w	801035c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8010194:	68b9      	ldr	r1, [r7, #8]
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f7ff fd3c 	bl	800fc14 <lfs_file_outline>
 801019c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 80db 	beq.w	801035c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101aa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	e0d7      	b.n	8010366 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d16d      	bne.n	80102ac <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d159      	bne.n	8010290 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d12f      	bne.n	8010248 <lfs_file_flushedwrite+0xf8>
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d02b      	beq.n	8010248 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010202:	3a01      	subs	r2, #1
 8010204:	68b9      	ldr	r1, [r7, #8]
 8010206:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8010208:	2000      	movs	r0, #0
 801020a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801020c:	f107 0010 	add.w	r0, r7, #16
 8010210:	9003      	str	r0, [sp, #12]
 8010212:	9102      	str	r1, [sp, #8]
 8010214:	9201      	str	r2, [sp, #4]
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	462b      	mov	r3, r5
 801021a:	4622      	mov	r2, r4
 801021c:	2100      	movs	r1, #0
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7ff f828 	bl	800f274 <lfs_ctz_find>
 8010224:	6238      	str	r0, [r7, #32]
                    if (err) {
 8010226:	6a3b      	ldr	r3, [r7, #32]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d007      	beq.n	801023c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010230:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	e094      	b.n	8010366 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	3340      	adds	r3, #64	@ 0x40
 8010240:	4619      	mov	r1, r3
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7fa fce2 	bl	800ac0c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8010248:	68f8      	ldr	r0, [r7, #12]
 801024a:	f7fb fbf4 	bl	800ba36 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010254:	68fc      	ldr	r4, [r7, #12]
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	3238      	adds	r2, #56	@ 0x38
 8010262:	68b9      	ldr	r1, [r7, #8]
 8010264:	313c      	adds	r1, #60	@ 0x3c
 8010266:	9102      	str	r1, [sp, #8]
 8010268:	9201      	str	r2, [sp, #4]
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	462b      	mov	r3, r5
 801026e:	4622      	mov	r2, r4
 8010270:	4601      	mov	r1, r0
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f7ff f86a 	bl	800f34c <lfs_ctz_extend>
 8010278:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00f      	beq.n	80102a0 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010284:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	e06a      	b.n	8010366 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	f06f 0201 	mvn.w	r2, #1
 8010296:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80102b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	4619      	mov	r1, r3
 80102ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102bc:	f7fa fbe1 	bl	800aa82 <lfs_min>
 80102c0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80102c8:	68fc      	ldr	r4, [r7, #12]
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80102d2:	69b9      	ldr	r1, [r7, #24]
 80102d4:	9103      	str	r1, [sp, #12]
 80102d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102d8:	9102      	str	r1, [sp, #8]
 80102da:	9201      	str	r2, [sp, #4]
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	2301      	movs	r3, #1
 80102e0:	4622      	mov	r2, r4
 80102e2:	4601      	mov	r1, r0
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f7fa ff39 	bl	800b15c <lfs_bd_prog>
 80102ea:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d01c      	beq.n	801032c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80102f8:	d007      	beq.n	801030a <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	e02d      	b.n	8010366 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 801030a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 801030c:	68b9      	ldr	r1, [r7, #8]
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f7ff fba6 	bl	800fa60 <lfs_file_relocate>
 8010314:	6178      	str	r0, [r7, #20]
            if (err) {
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d0d2      	beq.n	80102c2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010320:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	e01c      	b.n	8010366 <lfs_file_flushedwrite+0x216>
            break;
 801032c:	bf00      	nop
            }
        }

        file->pos += diff;
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	441a      	add	r2, r3
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	441a      	add	r2, r3
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8010346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	4413      	add	r3, r2
 801034c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 801034e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f7fb fb6d 	bl	800ba36 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 801035c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035e:	2b00      	cmp	r3, #0
 8010360:	f47f af29 	bne.w	80101b6 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8010364:	683b      	ldr	r3, [r7, #0]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3730      	adds	r7, #48	@ 0x30
 801036a:	46bd      	mov	sp, r7
 801036c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010370 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010382:	f003 0302 	and.w	r3, r3, #2
 8010386:	2b00      	cmp	r3, #0
 8010388:	d106      	bne.n	8010398 <lfs_file_write_+0x28>
 801038a:	4b38      	ldr	r3, [pc, #224]	@ (801046c <lfs_file_write_+0xfc>)
 801038c:	4a38      	ldr	r2, [pc, #224]	@ (8010470 <lfs_file_write_+0x100>)
 801038e:	f640 6126 	movw	r1, #3622	@ 0xe26
 8010392:	4838      	ldr	r0, [pc, #224]	@ (8010474 <lfs_file_write_+0x104>)
 8010394:	f010 fa98 	bl	80208c8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801039c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d009      	beq.n	80103b8 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80103a4:	68b9      	ldr	r1, [r7, #8]
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f7ff fc56 	bl	800fc58 <lfs_file_flush>
 80103ac:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80103ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <lfs_file_write_+0x48>
            return err;
 80103b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b6:	e055      	b.n	8010464 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d009      	beq.n	80103d8 <lfs_file_write_+0x68>
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d203      	bcs.n	80103d8 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	441a      	add	r2, r3
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d902      	bls.n	80103ee <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80103e8:	f06f 031a 	mvn.w	r3, #26
 80103ec:	e03a      	b.n	8010464 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d121      	bne.n	801043e <lfs_file_write_+0xce>
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010402:	429a      	cmp	r2, r3
 8010404:	d91b      	bls.n	801043e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801040a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8010414:	e00e      	b.n	8010434 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8010416:	2300      	movs	r3, #0
 8010418:	75fb      	strb	r3, [r7, #23]
 801041a:	f107 0217 	add.w	r2, r7, #23
 801041e:	2301      	movs	r3, #1
 8010420:	68b9      	ldr	r1, [r7, #8]
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7ff fe94 	bl	8010150 <lfs_file_flushedwrite>
 8010428:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	2b00      	cmp	r3, #0
 801042e:	da01      	bge.n	8010434 <lfs_file_write_+0xc4>
                return res;
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	e017      	b.n	8010464 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010438:	6a3a      	ldr	r2, [r7, #32]
 801043a:	429a      	cmp	r2, r3
 801043c:	d8eb      	bhi.n	8010416 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	68b9      	ldr	r1, [r7, #8]
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f7ff fe83 	bl	8010150 <lfs_file_flushedwrite>
 801044a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	2b00      	cmp	r3, #0
 8010450:	da01      	bge.n	8010456 <lfs_file_write_+0xe6>
        return nsize;
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	e006      	b.n	8010464 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801045a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8010462:	69bb      	ldr	r3, [r7, #24]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3728      	adds	r7, #40	@ 0x28
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	08023fb8 	.word	0x08023fb8
 8010470:	08026d04 	.word	0x08026d04
 8010474:	08023c38 	.word	0x08023c38

08010478 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8010478:	b580      	push	{r7, lr}
 801047a:	b08c      	sub	sp, #48	@ 0x30
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801048a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <lfs_file_seek_+0x20>
        npos = off;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010496:	e025      	b.n	80104e4 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d10f      	bne.n	80104be <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104a2:	461a      	mov	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4413      	add	r3, r2
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	da02      	bge.n	80104b2 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 80104ac:	f06f 0315 	mvn.w	r3, #21
 80104b0:	e067      	b.n	8010582 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4413      	add	r3, r2
 80104ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104bc:	e012      	b.n	80104e4 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	d10f      	bne.n	80104e4 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f000 f86c 	bl	80105a4 <lfs_file_size_>
 80104cc:	4602      	mov	r2, r0
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4413      	add	r3, r2
 80104d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 80104d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	da02      	bge.n	80104e0 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 80104da:	f06f 0315 	mvn.w	r3, #21
 80104de:	e050      	b.n	8010582 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80104e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d902      	bls.n	80104f4 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80104ee:	f06f 0315 	mvn.w	r3, #21
 80104f2:	e046      	b.n	8010582 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d101      	bne.n	8010502 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80104fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010500:	e03f      	b.n	8010582 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 801050a:	2b00      	cmp	r3, #0
 801050c:	d12b      	bne.n	8010566 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010512:	61bb      	str	r3, [r7, #24]
 8010514:	f107 0318 	add.w	r3, r7, #24
 8010518:	4619      	mov	r1, r3
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7fe fe72 	bl	800f204 <lfs_ctz_index>
 8010520:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8010522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010524:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8010526:	f107 0314 	add.w	r3, r7, #20
 801052a:	4619      	mov	r1, r3
 801052c:	68f8      	ldr	r0, [r7, #12]
 801052e:	f7fe fe69 	bl	800f204 <lfs_ctz_index>
 8010532:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8010534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010536:	6a3b      	ldr	r3, [r7, #32]
 8010538:	429a      	cmp	r2, r3
 801053a:	d114      	bne.n	8010566 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	429a      	cmp	r2, r3
 8010544:	d80f      	bhi.n	8010566 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801054e:	441a      	add	r2, r3
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	429a      	cmp	r2, r3
 8010554:	d907      	bls.n	8010566 <lfs_file_seek_+0xee>
            file->pos = npos;
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801055a:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8010562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010564:	e00d      	b.n	8010582 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7ff fb75 	bl	800fc58 <lfs_file_flush>
 801056e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <lfs_file_seek_+0x102>
        return err;
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	e003      	b.n	8010582 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801057e:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8010580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010582:	4618      	mov	r0, r3
 8010584:	3730      	adds	r7, #48	@ 0x30
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 801058a:	b480      	push	{r7}
 801058c:	b083      	sub	sp, #12
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8010598:	4618      	mov	r0, r3
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d009      	beq.n	80105ce <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c2:	4619      	mov	r1, r3
 80105c4:	4610      	mov	r0, r2
 80105c6:	f7fa fa4c 	bl	800aa62 <lfs_max>
 80105ca:	4603      	mov	r3, r0
 80105cc:	e001      	b.n	80105d2 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80105da:	b580      	push	{r7, lr}
 80105dc:	b08e      	sub	sp, #56	@ 0x38
 80105de:	af00      	add	r7, sp, #0
 80105e0:	60f8      	str	r0, [r7, #12]
 80105e2:	60b9      	str	r1, [r7, #8]
 80105e4:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80105e6:	f107 0208 	add.w	r2, r7, #8
 80105ea:	f107 0114 	add.w	r1, r7, #20
 80105ee:	2300      	movs	r3, #0
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7fc fe4d 	bl	800d290 <lfs_dir_find>
 80105f6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 80105f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	da01      	bge.n	8010602 <lfs_stat_+0x28>
        return (int)tag;
 80105fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010600:	e00c      	b.n	801061c <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8010602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010604:	4618      	mov	r0, r3
 8010606:	f7fa ffaf 	bl	800b568 <lfs_tag_id>
 801060a:	4603      	mov	r3, r0
 801060c:	461a      	mov	r2, r3
 801060e:	f107 0114 	add.w	r1, r7, #20
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f7fc fd77 	bl	800d108 <lfs_dir_getinfo>
 801061a:	4603      	mov	r3, r0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3738      	adds	r7, #56	@ 0x38
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8010624:	b580      	push	{r7, lr}
 8010626:	b0a0      	sub	sp, #128	@ 0x80
 8010628:	af02      	add	r7, sp, #8
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f001 fe0c 	bl	801224c <lfs_fs_forceconsistency>
 8010634:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8010636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010638:	2b00      	cmp	r3, #0
 801063a:	d001      	beq.n	8010640 <lfs_remove_+0x1c>
        return err;
 801063c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801063e:	e0bc      	b.n	80107ba <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8010640:	463a      	mov	r2, r7
 8010642:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010646:	2300      	movs	r3, #0
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7fc fe21 	bl	800d290 <lfs_dir_find>
 801064e:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8010650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010652:	2b00      	cmp	r3, #0
 8010654:	db09      	blt.n	801066a <lfs_remove_+0x46>
 8010656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010658:	4618      	mov	r0, r3
 801065a:	f7fa ff85 	bl	800b568 <lfs_tag_id>
 801065e:	4603      	mov	r3, r0
 8010660:	461a      	mov	r2, r3
 8010662:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010666:	429a      	cmp	r2, r3
 8010668:	d107      	bne.n	801067a <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801066a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801066c:	2b00      	cmp	r3, #0
 801066e:	da01      	bge.n	8010674 <lfs_remove_+0x50>
 8010670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010672:	e0a2      	b.n	80107ba <lfs_remove_+0x196>
 8010674:	f06f 0315 	mvn.w	r3, #21
 8010678:	e09f      	b.n	80107ba <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801067e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010682:	4618      	mov	r0, r3
 8010684:	f7fa ff46 	bl	800b514 <lfs_tag_type3>
 8010688:	4603      	mov	r3, r0
 801068a:	2b02      	cmp	r3, #2
 801068c:	d142      	bne.n	8010714 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801068e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010690:	4618      	mov	r0, r3
 8010692:	f7fa ff69 	bl	800b568 <lfs_tag_id>
 8010696:	4603      	mov	r3, r0
 8010698:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801069a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801069e:	f043 0308 	orr.w	r3, r3, #8
 80106a2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80106a6:	f107 020c 	add.w	r2, r7, #12
 80106aa:	9200      	str	r2, [sp, #0]
 80106ac:	4a45      	ldr	r2, [pc, #276]	@ (80107c4 <lfs_remove_+0x1a0>)
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7fb fbd6 	bl	800be60 <lfs_dir_get>
 80106b4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 80106b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	da01      	bge.n	80106c0 <lfs_remove_+0x9c>
            return (int)res;
 80106bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106be:	e07c      	b.n	80107ba <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 80106c0:	f107 030c 	add.w	r3, r7, #12
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fa feb0 	bl	800b42a <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 80106ca:	f107 020c 	add.w	r2, r7, #12
 80106ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106d2:	3308      	adds	r3, #8
 80106d4:	4619      	mov	r1, r3
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7fc fcc8 	bl	800d06c <lfs_dir_fetch>
 80106dc:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80106de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <lfs_remove_+0xc4>
            return err;
 80106e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80106e6:	e068      	b.n	80107ba <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 80106e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80106ec:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80106ee:	2101      	movs	r1, #1
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f001 fa89 	bl	8011c08 <lfs_fs_preporphans>
 80106f6:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80106f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <lfs_remove_+0xde>
            return err;
 80106fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010700:	e05b      	b.n	80107ba <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8010708:	2300      	movs	r3, #0
 801070a:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010712:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8010714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010716:	4618      	mov	r0, r3
 8010718:	f7fa ff26 	bl	800b568 <lfs_tag_id>
 801071c:	4603      	mov	r3, r0
 801071e:	029b      	lsls	r3, r3, #10
 8010720:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010724:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010728:	61fb      	str	r3, [r7, #28]
 801072a:	2300      	movs	r3, #0
 801072c:	623b      	str	r3, [r7, #32]
 801072e:	f107 021c 	add.w	r2, r7, #28
 8010732:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010736:	2301      	movs	r3, #1
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7fe faf1 	bl	800ed20 <lfs_dir_commit>
 801073e:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8010740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010742:	2b00      	cmp	r3, #0
 8010744:	d004      	beq.n	8010750 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 8010746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 801074c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801074e:	e034      	b.n	80107ba <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8010750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8010756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010758:	4618      	mov	r0, r3
 801075a:	f7fa fedb 	bl	800b514 <lfs_tag_type3>
 801075e:	4603      	mov	r3, r0
 8010760:	2b02      	cmp	r3, #2
 8010762:	d129      	bne.n	80107b8 <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8010764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f001 fa4d 	bl	8011c08 <lfs_fs_preporphans>
 801076e:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8010770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <lfs_remove_+0x156>
            return err;
 8010776:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010778:	e01f      	b.n	80107ba <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801077a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010782:	3308      	adds	r3, #8
 8010784:	4619      	mov	r1, r3
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f001 f8f4 	bl	8011974 <lfs_fs_pred>
 801078c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 801078e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010790:	2b00      	cmp	r3, #0
 8010792:	d001      	beq.n	8010798 <lfs_remove_+0x174>
            return err;
 8010794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010796:	e010      	b.n	80107ba <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8010798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801079c:	f103 0208 	add.w	r2, r3, #8
 80107a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f7fd f90c 	bl	800d9c4 <lfs_dir_drop>
 80107ac:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80107ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <lfs_remove_+0x194>
            return err;
 80107b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80107b6:	e000      	b.n	80107ba <lfs_remove_+0x196>
        }
    }

    return 0;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3778      	adds	r7, #120	@ 0x78
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	700ffc00 	.word	0x700ffc00

080107c8 <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 80107c8:	b590      	push	{r4, r7, lr}
 80107ca:	b0c3      	sub	sp, #268	@ 0x10c
 80107cc:	af02      	add	r7, sp, #8
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f001 fd39 	bl	801224c <lfs_fs_forceconsistency>
 80107da:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 80107de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <lfs_rename_+0x24>
        return err;
 80107e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80107ea:	e203      	b.n	8010bf4 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80107ec:	f107 0208 	add.w	r2, r7, #8
 80107f0:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80107f4:	2300      	movs	r3, #0
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7fc fd4a 	bl	800d290 <lfs_dir_find>
 80107fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8010800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010804:	2b00      	cmp	r3, #0
 8010806:	db0a      	blt.n	801081e <lfs_rename_+0x56>
 8010808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801080c:	4618      	mov	r0, r3
 801080e:	f7fa feab 	bl	800b568 <lfs_tag_id>
 8010812:	4603      	mov	r3, r0
 8010814:	461a      	mov	r2, r3
 8010816:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801081a:	429a      	cmp	r2, r3
 801081c:	d109      	bne.n	8010832 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801081e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010822:	2b00      	cmp	r3, #0
 8010824:	da02      	bge.n	801082c <lfs_rename_+0x64>
 8010826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801082a:	e1e3      	b.n	8010bf4 <lfs_rename_+0x42c>
 801082c:	f06f 0315 	mvn.w	r3, #21
 8010830:	e1e0      	b.n	8010bf4 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8010832:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 8010836:	1d3a      	adds	r2, r7, #4
 8010838:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f7fc fd27 	bl	800d290 <lfs_dir_find>
 8010842:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8010846:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801084a:	2b00      	cmp	r3, #0
 801084c:	db0a      	blt.n	8010864 <lfs_rename_+0x9c>
 801084e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010852:	4618      	mov	r0, r3
 8010854:	f7fa fe88 	bl	800b568 <lfs_tag_id>
 8010858:	4603      	mov	r3, r0
 801085a:	461a      	mov	r2, r3
 801085c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010860:	429a      	cmp	r2, r3
 8010862:	d114      	bne.n	801088e <lfs_rename_+0xc6>
 8010864:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010868:	f113 0f02 	cmn.w	r3, #2
 801086c:	d105      	bne.n	801087a <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801086e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010872:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010876:	4293      	cmp	r3, r2
 8010878:	d109      	bne.n	801088e <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801087a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801087e:	2b00      	cmp	r3, #0
 8010880:	da02      	bge.n	8010888 <lfs_rename_+0xc0>
 8010882:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010886:	e1b5      	b.n	8010bf4 <lfs_rename_+0x42c>
 8010888:	f06f 0315 	mvn.w	r3, #21
 801088c:	e1b2      	b.n	8010bf4 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 801088e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8010892:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f7fa fd6f 	bl	800b37c <lfs_pair_cmp>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	bf0c      	ite	eq
 80108a4:	2301      	moveq	r3, #1
 80108a6:	2300      	movne	r3, #0
 80108a8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 80108ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fa fe59 	bl	800b568 <lfs_tag_id>
 80108b6:	4603      	mov	r3, r0
 80108b8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 80108c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80108c6:	f113 0f02 	cmn.w	r3, #2
 80108ca:	d120      	bne.n	801090e <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ef fcd6 	bl	8000280 <strlen>
 80108d4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d902      	bls.n	80108ea <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 80108e4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80108e8:	e184      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 80108ea:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	f000 8090 	beq.w	8010a14 <lfs_rename_+0x24c>
 80108f4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80108f8:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 80108fc:	429a      	cmp	r2, r3
 80108fe:	f0c0 8089 	bcc.w	8010a14 <lfs_rename_+0x24c>
            newoldid += 1;
 8010902:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8010906:	3301      	adds	r3, #1
 8010908:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 801090c:	e082      	b.n	8010a14 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801090e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010912:	4618      	mov	r0, r3
 8010914:	f7fa fdfe 	bl	800b514 <lfs_tag_type3>
 8010918:	4603      	mov	r3, r0
 801091a:	461c      	mov	r4, r3
 801091c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010920:	4618      	mov	r0, r3
 8010922:	f7fa fdf7 	bl	800b514 <lfs_tag_type3>
 8010926:	4603      	mov	r3, r0
 8010928:	429c      	cmp	r4, r3
 801092a:	d00d      	beq.n	8010948 <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 801092c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010930:	4618      	mov	r0, r3
 8010932:	f7fa fdef 	bl	800b514 <lfs_tag_type3>
 8010936:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8010938:	2b02      	cmp	r3, #2
 801093a:	d102      	bne.n	8010942 <lfs_rename_+0x17a>
 801093c:	f06f 0314 	mvn.w	r3, #20
 8010940:	e158      	b.n	8010bf4 <lfs_rename_+0x42c>
 8010942:	f06f 0313 	mvn.w	r3, #19
 8010946:	e155      	b.n	8010bf4 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8010948:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 801094c:	2b00      	cmp	r3, #0
 801094e:	d007      	beq.n	8010960 <lfs_rename_+0x198>
 8010950:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010954:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8010958:	429a      	cmp	r2, r3
 801095a:	d101      	bne.n	8010960 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 801095c:	2300      	movs	r3, #0
 801095e:	e149      	b.n	8010bf4 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8010960:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010964:	4618      	mov	r0, r3
 8010966:	f7fa fdd5 	bl	800b514 <lfs_tag_type3>
 801096a:	4603      	mov	r3, r0
 801096c:	2b02      	cmp	r3, #2
 801096e:	d151      	bne.n	8010a14 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8010970:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010974:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8010976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801097a:	f043 0308 	orr.w	r3, r3, #8
 801097e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8010982:	f107 0220 	add.w	r2, r7, #32
 8010986:	9200      	str	r2, [sp, #0]
 8010988:	4a9d      	ldr	r2, [pc, #628]	@ (8010c00 <lfs_rename_+0x438>)
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f7fb fa68 	bl	800be60 <lfs_dir_get>
 8010990:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8010994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010998:	2b00      	cmp	r3, #0
 801099a:	da02      	bge.n	80109a2 <lfs_rename_+0x1da>
            return (int)res;
 801099c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80109a0:	e128      	b.n	8010bf4 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 80109a2:	f107 0320 	add.w	r3, r7, #32
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7fa fd3f 	bl	800b42a <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 80109ac:	f107 0220 	add.w	r2, r7, #32
 80109b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80109b4:	3308      	adds	r3, #8
 80109b6:	4619      	mov	r1, r3
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7fc fb57 	bl	800d06c <lfs_dir_fetch>
 80109be:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80109c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <lfs_rename_+0x208>
            return err;
 80109ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80109ce:	e111      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 80109d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d103      	bne.n	80109e0 <lfs_rename_+0x218>
 80109d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 80109e0:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 80109e4:	e106      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80109e6:	2101      	movs	r1, #1
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f001 f90d 	bl	8011c08 <lfs_fs_preporphans>
 80109ee:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80109f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d002      	beq.n	8010a00 <lfs_rename_+0x238>
            return err;
 80109fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80109fe:	e0f9      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8010a12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8010a14:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8010a18:	f083 0301 	eor.w	r3, r3, #1
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d007      	beq.n	8010a32 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8010a22:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8010a26:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f001 f93b 	bl	8011ca8 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8010a32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010a36:	f113 0f02 	cmn.w	r3, #2
 8010a3a:	d007      	beq.n	8010a4c <lfs_rename_+0x284>
 8010a3c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010a40:	029b      	lsls	r3, r3, #10
 8010a42:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010a46:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010a4a:	e000      	b.n	8010a4e <lfs_rename_+0x286>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a50:	2300      	movs	r3, #0
 8010a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a54:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010a58:	029b      	lsls	r3, r3, #10
 8010a5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a64:	2300      	movs	r3, #0
 8010a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fa fd51 	bl	800b514 <lfs_tag_type3>
 8010a72:	4603      	mov	r3, r0
 8010a74:	051a      	lsls	r2, r3, #20
 8010a76:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010a7a:	029b      	lsls	r3, r3, #10
 8010a7c:	ea42 0403 	orr.w	r4, r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7ef fbfc 	bl	8000280 <strlen>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	4323      	orrs	r3, r4
 8010a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a92:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010a96:	029c      	lsls	r4, r3, #10
 8010a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fa fd63 	bl	800b568 <lfs_tag_id>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	4323      	orrs	r3, r4
 8010aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010aae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010ab0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8010ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010ab6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d007      	beq.n	8010ace <lfs_rename_+0x306>
 8010abe:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8010ac2:	029b      	lsls	r3, r3, #10
 8010ac4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010ac8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010acc:	e000      	b.n	8010ad0 <lfs_rename_+0x308>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	673b      	str	r3, [r7, #112]	@ 0x70
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	677b      	str	r3, [r7, #116]	@ 0x74
 8010ad6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8010ada:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8010ade:	2305      	movs	r3, #5
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f7fe f91d 	bl	800ed20 <lfs_dir_commit>
 8010ae6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8010aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d005      	beq.n	8010afe <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8010af2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8010af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010afc:	e07a      	b.n	8010bf4 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8010afe:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8010b02:	f083 0301 	eor.w	r3, r3, #1
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d02f      	beq.n	8010b6c <lfs_rename_+0x3a4>
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	3330      	adds	r3, #48	@ 0x30
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fa fdbe 	bl	800b692 <lfs_gstate_hasmove>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d027      	beq.n	8010b6c <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f001 f8c0 	bl	8011ca8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8010b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fa fd1b 	bl	800b568 <lfs_tag_id>
 8010b32:	4603      	mov	r3, r0
 8010b34:	029b      	lsls	r3, r3, #10
 8010b36:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010b3a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010b3e:	61bb      	str	r3, [r7, #24]
 8010b40:	2300      	movs	r3, #0
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	f107 0218 	add.w	r2, r7, #24
 8010b48:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f7fe f8e6 	bl	800ed20 <lfs_dir_commit>
 8010b54:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8010b58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d005      	beq.n	8010b6c <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 8010b60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8010b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010b6a:	e043      	b.n	8010bf4 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 8010b6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8010b72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010b76:	f113 0f02 	cmn.w	r3, #2
 8010b7a:	d03a      	beq.n	8010bf2 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8010b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fa fcc7 	bl	800b514 <lfs_tag_type3>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d132      	bne.n	8010bf2 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8010b8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f001 f839 	bl	8011c08 <lfs_fs_preporphans>
 8010b96:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8010b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <lfs_rename_+0x3e0>
            return err;
 8010ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010ba6:	e025      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8010ba8:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8010bac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f000 fedd 	bl	8011974 <lfs_fs_pred>
 8010bba:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8010bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <lfs_rename_+0x404>
            return err;
 8010bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010bca:	e013      	b.n	8010bf4 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8010bcc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8010bd0:	f103 0208 	add.w	r2, r3, #8
 8010bd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8010bd8:	4619      	mov	r1, r3
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7fc fef2 	bl	800d9c4 <lfs_dir_drop>
 8010be0:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8010be4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <lfs_rename_+0x42a>
            return err;
 8010bec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010bf0:	e000      	b.n	8010bf4 <lfs_rename_+0x42c>
        }
    }

    return 0;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd90      	pop	{r4, r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	700ffc00 	.word	0x700ffc00

08010c04 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8010c04:	b590      	push	{r4, r7, lr}
 8010c06:	b08d      	sub	sp, #52	@ 0x34
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	683a      	ldr	r2, [r7, #0]
 8010c12:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c24:	69db      	ldr	r3, [r3, #28]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d106      	bne.n	8010c38 <lfs_init+0x34>
 8010c2a:	4b96      	ldr	r3, [pc, #600]	@ (8010e84 <lfs_init+0x280>)
 8010c2c:	4a96      	ldr	r2, [pc, #600]	@ (8010e88 <lfs_init+0x284>)
 8010c2e:	f241 0152 	movw	r1, #4178	@ 0x1052
 8010c32:	4896      	ldr	r0, [pc, #600]	@ (8010e8c <lfs_init+0x288>)
 8010c34:	f00f fe48 	bl	80208c8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d106      	bne.n	8010c50 <lfs_init+0x4c>
 8010c42:	4b93      	ldr	r3, [pc, #588]	@ (8010e90 <lfs_init+0x28c>)
 8010c44:	4a90      	ldr	r2, [pc, #576]	@ (8010e88 <lfs_init+0x284>)
 8010c46:	f241 0153 	movw	r1, #4179	@ 0x1053
 8010c4a:	4890      	ldr	r0, [pc, #576]	@ (8010e8c <lfs_init+0x288>)
 8010c4c:	f00f fe3c 	bl	80208c8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <lfs_init+0x64>
 8010c5a:	4b8e      	ldr	r3, [pc, #568]	@ (8010e94 <lfs_init+0x290>)
 8010c5c:	4a8a      	ldr	r2, [pc, #552]	@ (8010e88 <lfs_init+0x284>)
 8010c5e:	f241 0154 	movw	r1, #4180	@ 0x1054
 8010c62:	488a      	ldr	r0, [pc, #552]	@ (8010e8c <lfs_init+0x288>)
 8010c64:	f00f fe30 	bl	80208c8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010c72:	69d2      	ldr	r2, [r2, #28]
 8010c74:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c78:	fb01 f202 	mul.w	r2, r1, r2
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d006      	beq.n	8010c90 <lfs_init+0x8c>
 8010c82:	4b85      	ldr	r3, [pc, #532]	@ (8010e98 <lfs_init+0x294>)
 8010c84:	4a80      	ldr	r2, [pc, #512]	@ (8010e88 <lfs_init+0x284>)
 8010c86:	f241 0158 	movw	r1, #4184	@ 0x1058
 8010c8a:	4880      	ldr	r0, [pc, #512]	@ (8010e8c <lfs_init+0x288>)
 8010c8c:	f00f fe1c 	bl	80208c8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010c9a:	6a12      	ldr	r2, [r2, #32]
 8010c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ca0:	fb01 f202 	mul.w	r2, r1, r2
 8010ca4:	1a9b      	subs	r3, r3, r2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d006      	beq.n	8010cb8 <lfs_init+0xb4>
 8010caa:	4b7c      	ldr	r3, [pc, #496]	@ (8010e9c <lfs_init+0x298>)
 8010cac:	4a76      	ldr	r2, [pc, #472]	@ (8010e88 <lfs_init+0x284>)
 8010cae:	f241 0159 	movw	r1, #4185	@ 0x1059
 8010cb2:	4876      	ldr	r0, [pc, #472]	@ (8010e8c <lfs_init+0x288>)
 8010cb4:	f00f fe08 	bl	80208c8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010cc2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cc8:	fb01 f202 	mul.w	r2, r1, r2
 8010ccc:	1a9b      	subs	r3, r3, r2
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d006      	beq.n	8010ce0 <lfs_init+0xdc>
 8010cd2:	4b73      	ldr	r3, [pc, #460]	@ (8010ea0 <lfs_init+0x29c>)
 8010cd4:	4a6c      	ldr	r2, [pc, #432]	@ (8010e88 <lfs_init+0x284>)
 8010cd6:	f241 015a 	movw	r1, #4186	@ 0x105a
 8010cda:	486c      	ldr	r0, [pc, #432]	@ (8010e8c <lfs_init+0x288>)
 8010cdc:	f00f fdf4 	bl	80208c8 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ce8:	d806      	bhi.n	8010cf8 <lfs_init+0xf4>
 8010cea:	4b6e      	ldr	r3, [pc, #440]	@ (8010ea4 <lfs_init+0x2a0>)
 8010cec:	4a66      	ldr	r2, [pc, #408]	@ (8010e88 <lfs_init+0x284>)
 8010cee:	f241 015d 	movw	r1, #4189	@ 0x105d
 8010cf2:	4866      	ldr	r0, [pc, #408]	@ (8010e8c <lfs_init+0x288>)
 8010cf4:	f00f fde8 	bl	80208c8 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cfe:	3b08      	subs	r3, #8
 8010d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7f9 fef1 	bl	800aaf0 <lfs_npw2>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	009a      	lsls	r2, r3, #2
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d906      	bls.n	8010d2a <lfs_init+0x126>
 8010d1c:	4b62      	ldr	r3, [pc, #392]	@ (8010ea8 <lfs_init+0x2a4>)
 8010d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8010e88 <lfs_init+0x284>)
 8010d20:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8010d24:	4859      	ldr	r0, [pc, #356]	@ (8010e8c <lfs_init+0x288>)
 8010d26:	f00f fdcf 	bl	80208c8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d106      	bne.n	8010d42 <lfs_init+0x13e>
 8010d34:	4b5d      	ldr	r3, [pc, #372]	@ (8010eac <lfs_init+0x2a8>)
 8010d36:	4a54      	ldr	r2, [pc, #336]	@ (8010e88 <lfs_init+0x284>)
 8010d38:	f241 0169 	movw	r1, #4201	@ 0x1069
 8010d3c:	4853      	ldr	r0, [pc, #332]	@ (8010e8c <lfs_init+0x288>)
 8010d3e:	f00f fdc3 	bl	80208c8 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00f      	beq.n	8010d6c <lfs_init+0x168>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d58:	085b      	lsrs	r3, r3, #1
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d206      	bcs.n	8010d6c <lfs_init+0x168>
 8010d5e:	4b54      	ldr	r3, [pc, #336]	@ (8010eb0 <lfs_init+0x2ac>)
 8010d60:	4a49      	ldr	r2, [pc, #292]	@ (8010e88 <lfs_init+0x284>)
 8010d62:	f241 016f 	movw	r1, #4207	@ 0x106f
 8010d66:	4849      	ldr	r0, [pc, #292]	@ (8010e8c <lfs_init+0x288>)
 8010d68:	f00f fdae 	bl	80208c8 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d76:	d00e      	beq.n	8010d96 <lfs_init+0x192>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d906      	bls.n	8010d96 <lfs_init+0x192>
 8010d88:	4b4a      	ldr	r3, [pc, #296]	@ (8010eb4 <lfs_init+0x2b0>)
 8010d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8010e88 <lfs_init+0x284>)
 8010d8c:	f241 0171 	movw	r1, #4209	@ 0x1071
 8010d90:	483e      	ldr	r0, [pc, #248]	@ (8010e8c <lfs_init+0x288>)
 8010d92:	f00f fd99 	bl	80208c8 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	60da      	str	r2, [r3, #12]
 8010daa:	e010      	b.n	8010dce <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f9 ff04 	bl	800abc0 <lfs_malloc>
 8010db8:	4602      	mov	r2, r0
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d103      	bne.n	8010dce <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8010dc6:	f06f 030b 	mvn.w	r3, #11
 8010dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010dcc:	e163      	b.n	8011096 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	61da      	str	r2, [r3, #28]
 8010de2:	e010      	b.n	8010e06 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f9 fee8 	bl	800abc0 <lfs_malloc>
 8010df0:	4602      	mov	r2, r0
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	69db      	ldr	r3, [r3, #28]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d103      	bne.n	8010e06 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8010dfe:	f06f 030b 	mvn.w	r3, #11
 8010e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010e04:	e147      	b.n	8011096 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7f9 fefe 	bl	800ac0c <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	3310      	adds	r3, #16
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7f9 fef8 	bl	800ac0c <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <lfs_init+0x230>
 8010e26:	4b24      	ldr	r3, [pc, #144]	@ (8010eb8 <lfs_init+0x2b4>)
 8010e28:	4a17      	ldr	r2, [pc, #92]	@ (8010e88 <lfs_init+0x284>)
 8010e2a:	f241 0190 	movw	r1, #4240	@ 0x1090
 8010e2e:	4817      	ldr	r0, [pc, #92]	@ (8010e8c <lfs_init+0x288>)
 8010e30:	f00f fd4a 	bl	80208c8 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d005      	beq.n	8010e4a <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	665a      	str	r2, [r3, #100]	@ 0x64
 8010e48:	e010      	b.n	8010e6c <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7f9 feb5 	bl	800abc0 <lfs_malloc>
 8010e56:	4602      	mov	r2, r0
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d103      	bne.n	8010e6c <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8010e64:	f06f 030b 	mvn.w	r3, #11
 8010e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8010e6a:	e114      	b.n	8011096 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e72:	2bff      	cmp	r3, #255	@ 0xff
 8010e74:	d924      	bls.n	8010ec0 <lfs_init+0x2bc>
 8010e76:	4b11      	ldr	r3, [pc, #68]	@ (8010ebc <lfs_init+0x2b8>)
 8010e78:	4a03      	ldr	r2, [pc, #12]	@ (8010e88 <lfs_init+0x284>)
 8010e7a:	f241 019c 	movw	r1, #4252	@ 0x109c
 8010e7e:	4803      	ldr	r0, [pc, #12]	@ (8010e8c <lfs_init+0x288>)
 8010e80:	f00f fd22 	bl	80208c8 <__assert_func>
 8010e84:	08023fe8 	.word	0x08023fe8
 8010e88:	08026d14 	.word	0x08026d14
 8010e8c:	08023c38 	.word	0x08023c38
 8010e90:	08024004 	.word	0x08024004
 8010e94:	08024020 	.word	0x08024020
 8010e98:	0802403c 	.word	0x0802403c
 8010e9c:	0802406c 	.word	0x0802406c
 8010ea0:	0802409c 	.word	0x0802409c
 8010ea4:	080240d0 	.word	0x080240d0
 8010ea8:	080240ec 	.word	0x080240ec
 8010eac:	08024138 	.word	0x08024138
 8010eb0:	08024154 	.word	0x08024154
 8010eb4:	080241a8 	.word	0x080241a8
 8010eb8:	08024208 	.word	0x08024208
 8010ebc:	08024228 	.word	0x08024228
    lfs->name_max = lfs->cfg->name_max;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ec4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d102      	bne.n	8010ed8 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	22ff      	movs	r2, #255	@ 0xff
 8010ed6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	da06      	bge.n	8010ef0 <lfs_init+0x2ec>
 8010ee2:	4b71      	ldr	r3, [pc, #452]	@ (80110a8 <lfs_init+0x4a4>)
 8010ee4:	4a71      	ldr	r2, [pc, #452]	@ (80110ac <lfs_init+0x4a8>)
 8010ee6:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 8010eea:	4871      	ldr	r0, [pc, #452]	@ (80110b0 <lfs_init+0x4ac>)
 8010eec:	f00f fcec 	bl	80208c8 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ef4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d103      	bne.n	8010f0a <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010f08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f10:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d906      	bls.n	8010f26 <lfs_init+0x322>
 8010f18:	4b66      	ldr	r3, [pc, #408]	@ (80110b4 <lfs_init+0x4b0>)
 8010f1a:	4a64      	ldr	r2, [pc, #400]	@ (80110ac <lfs_init+0x4a8>)
 8010f1c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8010f20:	4863      	ldr	r0, [pc, #396]	@ (80110b0 <lfs_init+0x4ac>)
 8010f22:	f00f fcd1 	bl	80208c8 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d103      	bne.n	8010f40 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8010f3e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d906      	bls.n	8010f5e <lfs_init+0x35a>
 8010f50:	4b59      	ldr	r3, [pc, #356]	@ (80110b8 <lfs_init+0x4b4>)
 8010f52:	4a56      	ldr	r2, [pc, #344]	@ (80110ac <lfs_init+0x4a8>)
 8010f54:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8010f58:	4855      	ldr	r0, [pc, #340]	@ (80110b0 <lfs_init+0x4ac>)
 8010f5a:	f00f fcb5 	bl	80208c8 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f68:	d00e      	beq.n	8010f88 <lfs_init+0x384>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d906      	bls.n	8010f88 <lfs_init+0x384>
 8010f7a:	4b50      	ldr	r3, [pc, #320]	@ (80110bc <lfs_init+0x4b8>)
 8010f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80110ac <lfs_init+0x4a8>)
 8010f7e:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8010f82:	484b      	ldr	r0, [pc, #300]	@ (80110b0 <lfs_init+0x4ac>)
 8010f84:	f00f fca0 	bl	80208c8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f92:	d00d      	beq.n	8010fb0 <lfs_init+0x3ac>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d906      	bls.n	8010fb0 <lfs_init+0x3ac>
 8010fa2:	4b47      	ldr	r3, [pc, #284]	@ (80110c0 <lfs_init+0x4bc>)
 8010fa4:	4a41      	ldr	r2, [pc, #260]	@ (80110ac <lfs_init+0x4a8>)
 8010fa6:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 8010faa:	4841      	ldr	r0, [pc, #260]	@ (80110b0 <lfs_init+0x4ac>)
 8010fac:	f00f fc8c 	bl	80208c8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010fba:	d019      	beq.n	8010ff0 <lfs_init+0x3ec>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d004      	beq.n	8010fd6 <lfs_init+0x3d2>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fd2:	08db      	lsrs	r3, r3, #3
 8010fd4:	e003      	b.n	8010fde <lfs_init+0x3da>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fdc:	08db      	lsrs	r3, r3, #3
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d206      	bcs.n	8010ff0 <lfs_init+0x3ec>
 8010fe2:	4b38      	ldr	r3, [pc, #224]	@ (80110c4 <lfs_init+0x4c0>)
 8010fe4:	4a31      	ldr	r2, [pc, #196]	@ (80110ac <lfs_init+0x4a8>)
 8010fe6:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8010fea:	4831      	ldr	r0, [pc, #196]	@ (80110b0 <lfs_init+0x4ac>)
 8010fec:	f00f fc6c 	bl	80208c8 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ff4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011002:	d103      	bne.n	801100c <lfs_init+0x408>
        lfs->inline_max = 0;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	67da      	str	r2, [r3, #124]	@ 0x7c
 801100a:	e022      	b.n	8011052 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d11e      	bne.n	8011052 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011018:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8011024:	2b00      	cmp	r3, #0
 8011026:	d004      	beq.n	8011032 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801102e:	08db      	lsrs	r3, r3, #3
 8011030:	e003      	b.n	801103a <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 8011038:	08db      	lsrs	r3, r3, #3
 801103a:	4619      	mov	r1, r3
 801103c:	4610      	mov	r0, r2
 801103e:	f7f9 fd20 	bl	800aa82 <lfs_min>
 8011042:	4603      	mov	r3, r0
 8011044:	4619      	mov	r1, r3
 8011046:	4620      	mov	r0, r4
 8011048:	f7f9 fd1b 	bl	800aa82 <lfs_min>
 801104c:	4602      	mov	r2, r0
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011058:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011060:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	333c      	adds	r3, #60	@ 0x3c
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	605a      	str	r2, [r3, #4]
 8011078:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	3330      	adds	r3, #48	@ 0x30
 801107e:	2200      	movs	r2, #0
 8011080:	601a      	str	r2, [r3, #0]
 8011082:	605a      	str	r2, [r3, #4]
 8011084:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	3348      	adds	r3, #72	@ 0x48
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	605a      	str	r2, [r3, #4]
 8011090:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8011092:	2300      	movs	r3, #0
 8011094:	e003      	b.n	801109e <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 f816 	bl	80110c8 <lfs_deinit>
    return err;
 801109c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3734      	adds	r7, #52	@ 0x34
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd90      	pop	{r4, r7, pc}
 80110a6:	bf00      	nop
 80110a8:	08024244 	.word	0x08024244
 80110ac:	08026d14 	.word	0x08026d14
 80110b0:	08023c38 	.word	0x08023c38
 80110b4:	08024268 	.word	0x08024268
 80110b8:	08024284 	.word	0x08024284
 80110bc:	080242b4 	.word	0x080242b4
 80110c0:	0802430c 	.word	0x0802430c
 80110c4:	0802435c 	.word	0x0802435c

080110c8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d104      	bne.n	80110e4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f9 fd7a 	bl	800abd8 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d104      	bne.n	80110f8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	69db      	ldr	r3, [r3, #28]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f9 fd70 	bl	800abd8 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d104      	bne.n	801110c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011106:	4618      	mov	r0, r3
 8011108:	f7f9 fd66 	bl	800abd8 <lfs_free>
    }

    return 0;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
	...

08011118 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8011118:	b580      	push	{r7, lr}
 801111a:	b0a0      	sub	sp, #128	@ 0x80
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
    int err = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff fd6b 	bl	8010c04 <lfs_init>
 801112e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8011130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <lfs_format_+0x22>
            return err;
 8011136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011138:	e08d      	b.n	8011256 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801113e:	2b00      	cmp	r3, #0
 8011140:	d106      	bne.n	8011150 <lfs_format_+0x38>
 8011142:	4b47      	ldr	r3, [pc, #284]	@ (8011260 <lfs_format_+0x148>)
 8011144:	4a47      	ldr	r2, [pc, #284]	@ (8011264 <lfs_format_+0x14c>)
 8011146:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801114a:	4847      	ldr	r0, [pc, #284]	@ (8011268 <lfs_format_+0x150>)
 801114c:	f00f fbbc 	bl	80208c8 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801115a:	461a      	mov	r2, r3
 801115c:	2100      	movs	r1, #0
 801115e:	f00f ff8f 	bl	8021080 <memset>
        lfs->lookahead.start = 0;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801116c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801116e:	00da      	lsls	r2, r3, #3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011174:	4619      	mov	r1, r3
 8011176:	4610      	mov	r0, r2
 8011178:	f7f9 fc83 	bl	800aa82 <lfs_min>
 801117c:	4602      	mov	r2, r0
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7fa fc54 	bl	800ba36 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 801118e:	f107 030c 	add.w	r3, r7, #12
 8011192:	4619      	mov	r1, r3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7fc fb9b 	bl	800d8d0 <lfs_dir_alloc>
 801119a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 801119c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d150      	bne.n	8011244 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f7fa fc1e 	bl	800b9e4 <lfs_fs_disk_version>
 80111a8:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80111aa:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80111b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 80111b2:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 80111b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 80111be:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 80111c4:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 80111ca:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 80111cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fa fb7d 	bl	800b8d0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80111d6:	4b25      	ldr	r3, [pc, #148]	@ (801126c <lfs_format_+0x154>)
 80111d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111da:	2300      	movs	r3, #0
 80111dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80111de:	4b24      	ldr	r3, [pc, #144]	@ (8011270 <lfs_format_+0x158>)
 80111e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80111e2:	4b24      	ldr	r3, [pc, #144]	@ (8011274 <lfs_format_+0x15c>)
 80111e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111e6:	4b24      	ldr	r3, [pc, #144]	@ (8011278 <lfs_format_+0x160>)
 80111e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80111ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80111ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80111f0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80111f4:	f107 010c 	add.w	r1, r7, #12
 80111f8:	2303      	movs	r3, #3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7fd fd90 	bl	800ed20 <lfs_dir_commit>
 8011200:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8011202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d11f      	bne.n	8011248 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8011208:	2300      	movs	r3, #0
 801120a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801120e:	f107 010c 	add.w	r1, r7, #12
 8011212:	2300      	movs	r3, #0
 8011214:	2200      	movs	r2, #0
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f7fd fd82 	bl	800ed20 <lfs_dir_commit>
 801121c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 801121e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d113      	bne.n	801124c <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8011224:	2300      	movs	r3, #0
 8011226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011228:	2301      	movs	r3, #1
 801122a:	633b      	str	r3, [r7, #48]	@ 0x30
 801122c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011230:	f107 030c 	add.w	r3, r7, #12
 8011234:	4619      	mov	r1, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7fb ff18 	bl	800d06c <lfs_dir_fetch>
 801123c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 801123e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011240:	2b00      	cmp	r3, #0
 8011242:	e004      	b.n	801124e <lfs_format_+0x136>
            goto cleanup;
 8011244:	bf00      	nop
 8011246:	e002      	b.n	801124e <lfs_format_+0x136>
            goto cleanup;
 8011248:	bf00      	nop
 801124a:	e000      	b.n	801124e <lfs_format_+0x136>
            goto cleanup;
 801124c:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff ff3a 	bl	80110c8 <lfs_deinit>
    return err;
 8011254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8011256:	4618      	mov	r0, r3
 8011258:	3780      	adds	r7, #128	@ 0x80
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	080243ec 	.word	0x080243ec
 8011264:	08026d20 	.word	0x08026d20
 8011268:	08023c38 	.word	0x08023c38
 801126c:	40100000 	.word	0x40100000
 8011270:	0ff00008 	.word	0x0ff00008
 8011274:	08024404 	.word	0x08024404
 8011278:	20100018 	.word	0x20100018

0801127c <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801127e:	b0a1      	sub	sp, #132	@ 0x84
 8011280:	af04      	add	r7, sp, #16
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff fcbb 	bl	8010c04 <lfs_init>
 801128e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8011290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <lfs_mount_+0x1e>
        return err;
 8011296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011298:	e202      	b.n	80116a0 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801129a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801129e:	2220      	movs	r2, #32
 80112a0:	2100      	movs	r1, #0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f00f feec 	bl	8021080 <memset>
 80112a8:	2301      	movs	r3, #1
 80112aa:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80112ac:	4a9a      	ldr	r2, [pc, #616]	@ (8011518 <lfs_mount_+0x29c>)
 80112ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80112b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112b6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80112ba:	2301      	movs	r3, #1
 80112bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 80112be:	2301      	movs	r3, #1
 80112c0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 80112c2:	e199      	b.n	80115f8 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80112c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80112c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80112cc:	3318      	adds	r3, #24
 80112ce:	4611      	mov	r1, r2
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fa f87d 	bl	800b3d0 <lfs_pair_issync>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00a      	beq.n	80112f2 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80112dc:	4b8f      	ldr	r3, [pc, #572]	@ (801151c <lfs_mount_+0x2a0>)
 80112de:	f241 123d 	movw	r2, #4413	@ 0x113d
 80112e2:	498f      	ldr	r1, [pc, #572]	@ (8011520 <lfs_mount_+0x2a4>)
 80112e4:	488f      	ldr	r0, [pc, #572]	@ (8011524 <lfs_mount_+0x2a8>)
 80112e6:	f00f fd9b 	bl	8020e20 <iprintf>
            err = LFS_ERR_CORRUPT;
 80112ea:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80112ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80112f0:	e1d2      	b.n	8011698 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 80112f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80112f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d108      	bne.n	801130c <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80112fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112fc:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 80112fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011300:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 8011306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 801130c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801130e:	3301      	adds	r3, #1
 8011310:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	627b      	str	r3, [r7, #36]	@ 0x24
 8011316:	4b84      	ldr	r3, [pc, #528]	@ (8011528 <lfs_mount_+0x2ac>)
 8011318:	62bb      	str	r3, [r7, #40]	@ 0x28
 801131a:	2308      	movs	r3, #8
 801131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801131e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011322:	f103 0218 	add.w	r2, r3, #24
 8011326:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801132e:	9303      	str	r3, [sp, #12]
 8011330:	4b7e      	ldr	r3, [pc, #504]	@ (801152c <lfs_mount_+0x2b0>)
 8011332:	9302      	str	r3, [sp, #8]
 8011334:	2300      	movs	r3, #0
 8011336:	9301      	str	r3, [sp, #4]
 8011338:	4b7d      	ldr	r3, [pc, #500]	@ (8011530 <lfs_mount_+0x2b4>)
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	4b7d      	ldr	r3, [pc, #500]	@ (8011534 <lfs_mount_+0x2b8>)
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7fb fac4 	bl	800c8cc <lfs_dir_fetchmatch>
 8011344:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8011346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011348:	2b00      	cmp	r3, #0
 801134a:	da02      	bge.n	8011352 <lfs_mount_+0xd6>
            err = tag;
 801134c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801134e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8011350:	e1a2      	b.n	8011698 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8011352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 8142 	beq.w	80115de <lfs_mount_+0x362>
 801135a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801135c:	4618      	mov	r0, r3
 801135e:	f7fa f8a6 	bl	800b4ae <lfs_tag_isdelete>
 8011362:	4603      	mov	r3, r0
 8011364:	f083 0301 	eor.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	f000 8137 	beq.w	80115de <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8011370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8011376:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801137c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011380:	f107 030c 	add.w	r3, r7, #12
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	4b6c      	ldr	r3, [pc, #432]	@ (8011538 <lfs_mount_+0x2bc>)
 8011388:	4a6a      	ldr	r2, [pc, #424]	@ (8011534 <lfs_mount_+0x2b8>)
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f7fa fd68 	bl	800be60 <lfs_dir_get>
 8011390:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8011392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011394:	2b00      	cmp	r3, #0
 8011396:	da02      	bge.n	801139e <lfs_mount_+0x122>
                err = tag;
 8011398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 801139c:	e17c      	b.n	8011698 <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 801139e:	f107 030c 	add.w	r3, r7, #12
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fa fa5c 	bl	800b860 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	0c1b      	lsrs	r3, r3, #16
 80113ac:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7fa fb22 	bl	800ba00 <lfs_fs_disk_version_major>
 80113bc:	4603      	mov	r3, r0
 80113be:	461a      	mov	r2, r3
 80113c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d108      	bne.n	80113da <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7fa fb27 	bl	800ba1c <lfs_fs_disk_version_minor>
 80113ce:	4603      	mov	r3, r0
 80113d0:	461a      	mov	r2, r3
 80113d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d91d      	bls.n	8011416 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 80113da:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80113de:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f7fa fb0c 	bl	800ba00 <lfs_fs_disk_version_major>
 80113e8:	4603      	mov	r3, r0
 80113ea:	461e      	mov	r6, r3
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7fa fb15 	bl	800ba1c <lfs_fs_disk_version_minor>
 80113f2:	4603      	mov	r3, r0
 80113f4:	461a      	mov	r2, r3
 80113f6:	4b49      	ldr	r3, [pc, #292]	@ (801151c <lfs_mount_+0x2a0>)
 80113f8:	9303      	str	r3, [sp, #12]
 80113fa:	9202      	str	r2, [sp, #8]
 80113fc:	9601      	str	r6, [sp, #4]
 80113fe:	9400      	str	r4, [sp, #0]
 8011400:	462b      	mov	r3, r5
 8011402:	f241 126b 	movw	r2, #4459	@ 0x116b
 8011406:	4946      	ldr	r1, [pc, #280]	@ (8011520 <lfs_mount_+0x2a4>)
 8011408:	484c      	ldr	r0, [pc, #304]	@ (801153c <lfs_mount_+0x2c0>)
 801140a:	f00f fd09 	bl	8020e20 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 801140e:	f06f 0315 	mvn.w	r3, #21
 8011412:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8011414:	e0e2      	b.n	80115dc <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8011416:	2300      	movs	r3, #0
 8011418:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7fa fafd 	bl	800ba1c <lfs_fs_disk_version_minor>
 8011422:	4603      	mov	r3, r0
 8011424:	461a      	mov	r2, r3
 8011426:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801142a:	4293      	cmp	r3, r2
 801142c:	d21c      	bcs.n	8011468 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 801142e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8011432:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7fa fae2 	bl	800ba00 <lfs_fs_disk_version_major>
 801143c:	4603      	mov	r3, r0
 801143e:	461e      	mov	r6, r3
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f7fa faeb 	bl	800ba1c <lfs_fs_disk_version_minor>
 8011446:	4603      	mov	r3, r0
 8011448:	461a      	mov	r2, r3
 801144a:	4b34      	ldr	r3, [pc, #208]	@ (801151c <lfs_mount_+0x2a0>)
 801144c:	9303      	str	r3, [sp, #12]
 801144e:	9202      	str	r2, [sp, #8]
 8011450:	9601      	str	r6, [sp, #4]
 8011452:	9400      	str	r4, [sp, #0]
 8011454:	462b      	mov	r3, r5
 8011456:	f241 127a 	movw	r2, #4474	@ 0x117a
 801145a:	4931      	ldr	r1, [pc, #196]	@ (8011520 <lfs_mount_+0x2a4>)
 801145c:	4838      	ldr	r0, [pc, #224]	@ (8011540 <lfs_mount_+0x2c4>)
 801145e:	f00f fcdf 	bl	8020e20 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8011462:	2301      	movs	r3, #1
 8011464:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8011468:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 801146c:	4619      	mov	r1, r3
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 fbb4 	bl	8011bdc <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d018      	beq.n	80114ac <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 801147a:	69ba      	ldr	r2, [r7, #24]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011480:	429a      	cmp	r2, r3
 8011482:	d910      	bls.n	80114a6 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8011484:	69ba      	ldr	r2, [r7, #24]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801148a:	4924      	ldr	r1, [pc, #144]	@ (801151c <lfs_mount_+0x2a0>)
 801148c:	9101      	str	r1, [sp, #4]
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	4613      	mov	r3, r2
 8011492:	f241 1289 	movw	r2, #4489	@ 0x1189
 8011496:	4922      	ldr	r1, [pc, #136]	@ (8011520 <lfs_mount_+0x2a4>)
 8011498:	482a      	ldr	r0, [pc, #168]	@ (8011544 <lfs_mount_+0x2c8>)
 801149a:	f00f fcc1 	bl	8020e20 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 801149e:	f06f 0315 	mvn.w	r3, #21
 80114a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80114a4:	e09a      	b.n	80115dc <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 80114a6:	69ba      	ldr	r2, [r7, #24]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d018      	beq.n	80114e4 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d910      	bls.n	80114de <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80114bc:	69fa      	ldr	r2, [r7, #28]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114c2:	4916      	ldr	r1, [pc, #88]	@ (801151c <lfs_mount_+0x2a0>)
 80114c4:	9101      	str	r1, [sp, #4]
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	4613      	mov	r3, r2
 80114ca:	f241 1294 	movw	r2, #4500	@ 0x1194
 80114ce:	4914      	ldr	r1, [pc, #80]	@ (8011520 <lfs_mount_+0x2a4>)
 80114d0:	481d      	ldr	r0, [pc, #116]	@ (8011548 <lfs_mount_+0x2cc>)
 80114d2:	f00f fca5 	bl	8020e20 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80114d6:	f06f 0315 	mvn.w	r3, #21
 80114da:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80114dc:	e07e      	b.n	80115dc <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 80114de:	69fa      	ldr	r2, [r7, #28]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d040      	beq.n	801156c <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 80114ea:	6a3a      	ldr	r2, [r7, #32]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d92d      	bls.n	8011550 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80114f4:	6a3a      	ldr	r2, [r7, #32]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114fa:	4908      	ldr	r1, [pc, #32]	@ (801151c <lfs_mount_+0x2a0>)
 80114fc:	9101      	str	r1, [sp, #4]
 80114fe:	9300      	str	r3, [sp, #0]
 8011500:	4613      	mov	r3, r2
 8011502:	f241 129f 	movw	r2, #4511	@ 0x119f
 8011506:	4906      	ldr	r1, [pc, #24]	@ (8011520 <lfs_mount_+0x2a4>)
 8011508:	4810      	ldr	r0, [pc, #64]	@ (801154c <lfs_mount_+0x2d0>)
 801150a:	f00f fc89 	bl	8020e20 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 801150e:	f06f 0315 	mvn.w	r3, #21
 8011512:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8011514:	e062      	b.n	80115dc <lfs_mount_+0x360>
 8011516:	bf00      	nop
 8011518:	08023da4 	.word	0x08023da4
 801151c:	08023d60 	.word	0x08023d60
 8011520:	08023c38 	.word	0x08023c38
 8011524:	08024410 	.word	0x08024410
 8011528:	08024404 	.word	0x08024404
 801152c:	0800d1fd 	.word	0x0800d1fd
 8011530:	0ff00008 	.word	0x0ff00008
 8011534:	7ffffc00 	.word	0x7ffffc00
 8011538:	20100018 	.word	0x20100018
 801153c:	0802443c 	.word	0x0802443c
 8011540:	08024474 	.word	0x08024474
 8011544:	080244b4 	.word	0x080244b4
 8011548:	080244e8 	.word	0x080244e8
 801154c:	0802451c 	.word	0x0802451c
                }

                lfs->attr_max = superblock.attr_max;
 8011550:	6a3a      	ldr	r2, [r7, #32]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801155e:	4619      	mov	r1, r3
 8011560:	4610      	mov	r0, r2
 8011562:	f7f9 fa8e 	bl	800aa82 <lfs_min>
 8011566:	4602      	mov	r2, r0
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011572:	2b00      	cmp	r3, #0
 8011574:	d017      	beq.n	80115a6 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8011576:	697a      	ldr	r2, [r7, #20]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157e:	429a      	cmp	r2, r3
 8011580:	d011      	beq.n	80115a6 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8011582:	697a      	ldr	r2, [r7, #20]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801158a:	4947      	ldr	r1, [pc, #284]	@ (80116a8 <lfs_mount_+0x42c>)
 801158c:	9101      	str	r1, [sp, #4]
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	4613      	mov	r3, r2
 8011592:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8011596:	4945      	ldr	r1, [pc, #276]	@ (80116ac <lfs_mount_+0x430>)
 8011598:	4845      	ldr	r0, [pc, #276]	@ (80116b0 <lfs_mount_+0x434>)
 801159a:	f00f fc41 	bl	8020e20 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 801159e:	f06f 0315 	mvn.w	r3, #21
 80115a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80115a4:	e01a      	b.n	80115dc <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 80115a6:	697a      	ldr	r2, [r7, #20]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80115b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d012      	beq.n	80115de <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80115b8:	693a      	ldr	r2, [r7, #16]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80115be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115c0:	4939      	ldr	r1, [pc, #228]	@ (80116a8 <lfs_mount_+0x42c>)
 80115c2:	9101      	str	r1, [sp, #4]
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	4613      	mov	r3, r2
 80115c8:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 80115cc:	4937      	ldr	r1, [pc, #220]	@ (80116ac <lfs_mount_+0x430>)
 80115ce:	4839      	ldr	r0, [pc, #228]	@ (80116b4 <lfs_mount_+0x438>)
 80115d0:	f00f fc26 	bl	8020e20 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80115d4:	f06f 0315 	mvn.w	r3, #21
 80115d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80115da:	bf00      	nop
            goto cleanup;
 80115dc:	e05c      	b.n	8011698 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80115e8:	4619      	mov	r1, r3
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f7fb fd5a 	bl	800d0a4 <lfs_dir_getgstate>
 80115f0:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 80115f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d14e      	bne.n	8011696 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 80115f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80115fc:	3318      	adds	r3, #24
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f9 fea1 	bl	800b346 <lfs_pair_isnull>
 8011604:	4603      	mov	r3, r0
 8011606:	f083 0301 	eor.w	r3, r3, #1
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b00      	cmp	r3, #0
 801160e:	f47f ae59 	bne.w	80112c4 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	3330      	adds	r3, #48	@ 0x30
 8011616:	4618      	mov	r0, r3
 8011618:	f7f9 fffc 	bl	800b614 <lfs_gstate_iszero>
 801161c:	4603      	mov	r3, r0
 801161e:	f083 0301 	eor.w	r3, r3, #1
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d010      	beq.n	801164a <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011634:	481c      	ldr	r0, [pc, #112]	@ (80116a8 <lfs_mount_+0x42c>)
 8011636:	9002      	str	r0, [sp, #8]
 8011638:	9201      	str	r2, [sp, #4]
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	460b      	mov	r3, r1
 801163e:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8011642:	491a      	ldr	r1, [pc, #104]	@ (80116ac <lfs_mount_+0x430>)
 8011644:	481c      	ldr	r0, [pc, #112]	@ (80116b8 <lfs_mount_+0x43c>)
 8011646:	f00f fbeb 	bl	8020e20 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801164e:	4618      	mov	r0, r3
 8011650:	f7f9 ff1f 	bl	800b492 <lfs_tag_isvalid>
 8011654:	4603      	mov	r3, r0
 8011656:	f083 0301 	eor.w	r3, r3, #1
 801165a:	b2db      	uxtb	r3, r3
 801165c:	461a      	mov	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011662:	441a      	add	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	333c      	adds	r3, #60	@ 0x3c
 801166e:	3230      	adds	r2, #48	@ 0x30
 8011670:	ca07      	ldmia	r2, {r0, r1, r2}
 8011672:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801167e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011682:	fb01 f202 	mul.w	r2, r1, r2
 8011686:	1a9a      	subs	r2, r3, r2
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7fa f9e0 	bl	800ba52 <lfs_alloc_drop>

    return 0;
 8011692:	2300      	movs	r3, #0
 8011694:	e004      	b.n	80116a0 <lfs_mount_+0x424>
            goto cleanup;
 8011696:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f000 f80f 	bl	80116bc <lfs_unmount_>
    return err;
 801169e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3774      	adds	r7, #116	@ 0x74
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a8:	08023d60 	.word	0x08023d60
 80116ac:	08023c38 	.word	0x08023c38
 80116b0:	08024550 	.word	0x08024550
 80116b4:	08024584 	.word	0x08024584
 80116b8:	080245b4 	.word	0x080245b4

080116bc <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7ff fcff 	bl	80110c8 <lfs_deinit>
 80116ca:	4603      	mov	r3, r0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80116d4:	b590      	push	{r4, r7, lr}
 80116d6:	b0a1      	sub	sp, #132	@ 0x84
 80116d8:	af04      	add	r7, sp, #16
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80116e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80116e6:	2220      	movs	r2, #32
 80116e8:	2100      	movs	r1, #0
 80116ea:	4618      	mov	r0, r3
 80116ec:	f00f fcc8 	bl	8021080 <memset>
 80116f0:	2301      	movs	r3, #1
 80116f2:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80116f4:	4a9a      	ldr	r2, [pc, #616]	@ (8011960 <lfs_fs_traverse_+0x28c>)
 80116f6:	f107 031c 	add.w	r3, r7, #28
 80116fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116fe:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8011702:	2301      	movs	r3, #1
 8011704:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8011706:	2301      	movs	r3, #1
 8011708:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 801170a:	e0c0      	b.n	801188e <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801170c:	f107 021c 	add.w	r2, r7, #28
 8011710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011714:	3318      	adds	r3, #24
 8011716:	4611      	mov	r1, r2
 8011718:	4618      	mov	r0, r3
 801171a:	f7f9 fe59 	bl	800b3d0 <lfs_pair_issync>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d009      	beq.n	8011738 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8011724:	4b8f      	ldr	r3, [pc, #572]	@ (8011964 <lfs_fs_traverse_+0x290>)
 8011726:	f241 2222 	movw	r2, #4642	@ 0x1222
 801172a:	498f      	ldr	r1, [pc, #572]	@ (8011968 <lfs_fs_traverse_+0x294>)
 801172c:	488f      	ldr	r0, [pc, #572]	@ (801196c <lfs_fs_traverse_+0x298>)
 801172e:	f00f fb77 	bl	8020e20 <iprintf>
            return LFS_ERR_CORRUPT;
 8011732:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8011736:	e10f      	b.n	8011958 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8011738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801173a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801173c:	429a      	cmp	r2, r3
 801173e:	d108      	bne.n	8011752 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8011740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011742:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8011744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011746:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8011748:	2300      	movs	r3, #0
 801174a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 801174c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8011752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011754:	3301      	adds	r3, #1
 8011756:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8011758:	2300      	movs	r3, #0
 801175a:	667b      	str	r3, [r7, #100]	@ 0x64
 801175c:	e013      	b.n	8011786 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 801175e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011760:	3306      	adds	r3, #6
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	3370      	adds	r3, #112	@ 0x70
 8011766:	443b      	add	r3, r7
 8011768:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	4611      	mov	r1, r2
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	4798      	blx	r3
 8011774:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8011776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011778:	2b00      	cmp	r3, #0
 801177a:	d001      	beq.n	8011780 <lfs_fs_traverse_+0xac>
                return err;
 801177c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801177e:	e0eb      	b.n	8011958 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8011780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011782:	3301      	adds	r3, #1
 8011784:	667b      	str	r3, [r7, #100]	@ 0x64
 8011786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011788:	2b01      	cmp	r3, #1
 801178a:	dde8      	ble.n	801175e <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011790:	f103 0218 	add.w	r2, r3, #24
 8011794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011798:	4619      	mov	r1, r3
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f7fb fc66 	bl	800d06c <lfs_dir_fetch>
 80117a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 80117a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <lfs_fs_traverse_+0xd8>
            return err;
 80117a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117aa:	e0d5      	b.n	8011958 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80117ac:	2300      	movs	r3, #0
 80117ae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80117b2:	e067      	b.n	8011884 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80117b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80117b8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80117ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80117be:	f043 0308 	orr.w	r3, r3, #8
 80117c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80117c6:	f107 0214 	add.w	r2, r7, #20
 80117ca:	9200      	str	r2, [sp, #0]
 80117cc:	4a68      	ldr	r2, [pc, #416]	@ (8011970 <lfs_fs_traverse_+0x29c>)
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7fa fb46 	bl	800be60 <lfs_dir_get>
 80117d4:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 80117d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117d8:	2b00      	cmp	r3, #0
 80117da:	da05      	bge.n	80117e8 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 80117dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117de:	f113 0f02 	cmn.w	r3, #2
 80117e2:	d049      	beq.n	8011878 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 80117e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117e6:	e0b7      	b.n	8011958 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 80117e8:	f107 0314 	add.w	r3, r7, #20
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fa f807 	bl	800b800 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80117f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7f9 fe8d 	bl	800b514 <lfs_tag_type3>
 80117fa:	4603      	mov	r3, r0
 80117fc:	461a      	mov	r2, r3
 80117fe:	f240 2302 	movw	r3, #514	@ 0x202
 8011802:	429a      	cmp	r2, r3
 8011804:	d113      	bne.n	801182e <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8011806:	68f9      	ldr	r1, [r7, #12]
 8011808:	6978      	ldr	r0, [r7, #20]
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	9202      	str	r2, [sp, #8]
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	9201      	str	r2, [sp, #4]
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	4603      	mov	r3, r0
 8011818:	460a      	mov	r2, r1
 801181a:	2100      	movs	r1, #0
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f7fd fe9d 	bl	800f55c <lfs_ctz_traverse>
 8011822:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8011824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011826:	2b00      	cmp	r3, #0
 8011828:	d027      	beq.n	801187a <lfs_fs_traverse_+0x1a6>
                    return err;
 801182a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801182c:	e094      	b.n	8011958 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 801182e:	78fb      	ldrb	r3, [r7, #3]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d022      	beq.n	801187a <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8011834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011836:	4618      	mov	r0, r3
 8011838:	f7f9 fe6c 	bl	800b514 <lfs_tag_type3>
 801183c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 801183e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011842:	d11a      	bne.n	801187a <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8011844:	2300      	movs	r3, #0
 8011846:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011848:	e012      	b.n	8011870 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 801184a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	f107 0214 	add.w	r2, r7, #20
 8011852:	4413      	add	r3, r2
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	4611      	mov	r1, r2
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	4798      	blx	r3
 801185e:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8011860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <lfs_fs_traverse_+0x196>
                        return err;
 8011866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011868:	e076      	b.n	8011958 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 801186a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801186c:	3301      	adds	r3, #1
 801186e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011872:	2b01      	cmp	r3, #1
 8011874:	dde9      	ble.n	801184a <lfs_fs_traverse_+0x176>
 8011876:	e000      	b.n	801187a <lfs_fs_traverse_+0x1a6>
                    continue;
 8011878:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 801187a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801187e:	3301      	adds	r3, #1
 8011880:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011884:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011886:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 801188a:	429a      	cmp	r2, r3
 801188c:	d392      	bcc.n	80117b4 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 801188e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011892:	3318      	adds	r3, #24
 8011894:	4618      	mov	r0, r3
 8011896:	f7f9 fd56 	bl	800b346 <lfs_pair_isnull>
 801189a:	4603      	mov	r3, r0
 801189c:	f083 0301 	eor.w	r3, r3, #1
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f47f af32 	bne.w	801170c <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80118ae:	e04f      	b.n	8011950 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 80118b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118b2:	799b      	ldrb	r3, [r3, #6]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d147      	bne.n	8011948 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80118b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d01d      	beq.n	8011900 <lfs_fs_traverse_+0x22c>
 80118c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d117      	bne.n	8011900 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80118d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118d2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118da:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80118dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	9202      	str	r2, [sp, #8]
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	9201      	str	r2, [sp, #4]
 80118e8:	9300      	str	r3, [sp, #0]
 80118ea:	4623      	mov	r3, r4
 80118ec:	4602      	mov	r2, r0
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7fd fe34 	bl	800f55c <lfs_ctz_traverse>
 80118f4:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80118f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d001      	beq.n	8011900 <lfs_fs_traverse_+0x22c>
                return err;
 80118fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118fe:	e02b      	b.n	8011958 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8011900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011908:	2b00      	cmp	r3, #0
 801190a:	d01e      	beq.n	801194a <lfs_fs_traverse_+0x276>
 801190c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011914:	2b00      	cmp	r3, #0
 8011916:	d118      	bne.n	801194a <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801191a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011922:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8011924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	9202      	str	r2, [sp, #8]
 801192c:	68ba      	ldr	r2, [r7, #8]
 801192e:	9201      	str	r2, [sp, #4]
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	4623      	mov	r3, r4
 8011934:	4602      	mov	r2, r0
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7fd fe10 	bl	800f55c <lfs_ctz_traverse>
 801193c:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 801193e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <lfs_fs_traverse_+0x276>
                return err;
 8011944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011946:	e007      	b.n	8011958 <lfs_fs_traverse_+0x284>
            continue;
 8011948:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801194a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1ac      	bne.n	80118b0 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3774      	adds	r7, #116	@ 0x74
 801195c:	46bd      	mov	sp, r7
 801195e:	bd90      	pop	{r4, r7, pc}
 8011960:	08023da4 	.word	0x08023da4
 8011964:	08023d60 	.word	0x08023d60
 8011968:	08023c38 	.word	0x08023c38
 801196c:	08024410 	.word	0x08024410
 8011970:	700ffc00 	.word	0x700ffc00

08011974 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8011974:	b580      	push	{r7, lr}
 8011976:	b08a      	sub	sp, #40	@ 0x28
 8011978:	af00      	add	r7, sp, #0
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801198c:	4a2d      	ldr	r2, [pc, #180]	@ (8011a44 <lfs_fs_pred+0xd0>)
 801198e:	f107 0314 	add.w	r3, r7, #20
 8011992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011996:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801199a:	2301      	movs	r3, #1
 801199c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 801199e:	2301      	movs	r3, #1
 80119a0:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 80119a2:	e03e      	b.n	8011a22 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	3318      	adds	r3, #24
 80119a8:	f107 0214 	add.w	r2, r7, #20
 80119ac:	4611      	mov	r1, r2
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f9 fd0e 	bl	800b3d0 <lfs_pair_issync>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d009      	beq.n	80119ce <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80119ba:	4b23      	ldr	r3, [pc, #140]	@ (8011a48 <lfs_fs_pred+0xd4>)
 80119bc:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 80119c0:	4922      	ldr	r1, [pc, #136]	@ (8011a4c <lfs_fs_pred+0xd8>)
 80119c2:	4823      	ldr	r0, [pc, #140]	@ (8011a50 <lfs_fs_pred+0xdc>)
 80119c4:	f00f fa2c 	bl	8020e20 <iprintf>
            return LFS_ERR_CORRUPT;
 80119c8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80119cc:	e036      	b.n	8011a3c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 80119ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119d0:	6a3b      	ldr	r3, [r7, #32]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d10a      	bne.n	80119ec <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	699b      	ldr	r3, [r3, #24]
 80119da:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	69db      	ldr	r3, [r3, #28]
 80119e0:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 80119ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ee:	3301      	adds	r3, #1
 80119f0:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	3318      	adds	r3, #24
 80119f6:	68b9      	ldr	r1, [r7, #8]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7f9 fcbf 	bl	800b37c <lfs_pair_cmp>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <lfs_fs_pred+0x94>
            return 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	e019      	b.n	8011a3c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	3318      	adds	r3, #24
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	6879      	ldr	r1, [r7, #4]
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f7fb fb2b 	bl	800d06c <lfs_dir_fetch>
 8011a16:	61f8      	str	r0, [r7, #28]
        if (err) {
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d001      	beq.n	8011a22 <lfs_fs_pred+0xae>
            return err;
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	e00c      	b.n	8011a3c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	3318      	adds	r3, #24
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7f9 fc8d 	bl	800b346 <lfs_pair_isnull>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f083 0301 	eor.w	r3, r3, #1
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d1b5      	bne.n	80119a4 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8011a38:	f06f 0301 	mvn.w	r3, #1
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3728      	adds	r7, #40	@ 0x28
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	08023da4 	.word	0x08023da4
 8011a48:	08023d60 	.word	0x08023d60
 8011a4c:	08023c38 	.word	0x08023c38
 8011a50:	08024410 	.word	0x08024410

08011a54 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8011a54:	b5b0      	push	{r4, r5, r7, lr}
 8011a56:	b08e      	sub	sp, #56	@ 0x38
 8011a58:	af04      	add	r7, sp, #16
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8011a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011a6e:	6a3b      	ldr	r3, [r7, #32]
 8011a70:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8011a74:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011a7a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	69fa      	ldr	r2, [r7, #28]
 8011a82:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8011a84:	2108      	movs	r1, #8
 8011a86:	9103      	str	r1, [sp, #12]
 8011a88:	f107 0110 	add.w	r1, r7, #16
 8011a8c:	9102      	str	r1, [sp, #8]
 8011a8e:	9201      	str	r2, [sp, #4]
 8011a90:	9300      	str	r3, [sp, #0]
 8011a92:	462b      	mov	r3, r5
 8011a94:	4622      	mov	r2, r4
 8011a96:	4601      	mov	r1, r0
 8011a98:	6a38      	ldr	r0, [r7, #32]
 8011a9a:	f7f9 f8cd 	bl	800ac38 <lfs_bd_read>
 8011a9e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <lfs_fs_parent_match+0x56>
        return err;
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	e012      	b.n	8011ad0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8011aaa:	f107 0310 	add.w	r3, r7, #16
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f9 fcbb 	bl	800b42a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab6:	1d1a      	adds	r2, r3, #4
 8011ab8:	f107 0310 	add.w	r3, r7, #16
 8011abc:	4611      	mov	r1, r2
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7f9 fc5c 	bl	800b37c <lfs_pair_cmp>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	bf14      	ite	ne
 8011aca:	2301      	movne	r3, #1
 8011acc:	2300      	moveq	r3, #0
 8011ace:	b2db      	uxtb	r3, r3
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3728      	adds	r7, #40	@ 0x28
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bdb0      	pop	{r4, r5, r7, pc}

08011ad8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b090      	sub	sp, #64	@ 0x40
 8011adc:	af04      	add	r7, sp, #16
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2201      	movs	r2, #1
 8011aee:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8011af0:	4a33      	ldr	r2, [pc, #204]	@ (8011bc0 <lfs_fs_parent+0xe8>)
 8011af2:	f107 031c 	add.w	r3, r7, #28
 8011af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011afa:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8011afe:	2301      	movs	r3, #1
 8011b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8011b02:	2301      	movs	r3, #1
 8011b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8011b06:	e04a      	b.n	8011b9e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3318      	adds	r3, #24
 8011b0c:	f107 021c 	add.w	r2, r7, #28
 8011b10:	4611      	mov	r1, r2
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7f9 fc5c 	bl	800b3d0 <lfs_pair_issync>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d009      	beq.n	8011b32 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8011b1e:	4b29      	ldr	r3, [pc, #164]	@ (8011bc4 <lfs_fs_parent+0xec>)
 8011b20:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8011b24:	4928      	ldr	r1, [pc, #160]	@ (8011bc8 <lfs_fs_parent+0xf0>)
 8011b26:	4829      	ldr	r0, [pc, #164]	@ (8011bcc <lfs_fs_parent+0xf4>)
 8011b28:	f00f f97a 	bl	8020e20 <iprintf>
            return LFS_ERR_CORRUPT;
 8011b2c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8011b30:	e042      	b.n	8011bb8 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8011b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d10a      	bne.n	8011b50 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	699b      	ldr	r3, [r3, #24]
 8011b3e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	69db      	ldr	r3, [r3, #28]
 8011b44:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 8011b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8011b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b52:	3301      	adds	r3, #1
 8011b54:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011b64:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011b6c:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011b6e:	f107 0310 	add.w	r3, r7, #16
 8011b72:	9303      	str	r3, [sp, #12]
 8011b74:	4b16      	ldr	r3, [pc, #88]	@ (8011bd0 <lfs_fs_parent+0xf8>)
 8011b76:	9302      	str	r3, [sp, #8]
 8011b78:	2300      	movs	r3, #0
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	4b15      	ldr	r3, [pc, #84]	@ (8011bd4 <lfs_fs_parent+0xfc>)
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	4b15      	ldr	r3, [pc, #84]	@ (8011bd8 <lfs_fs_parent+0x100>)
 8011b82:	6879      	ldr	r1, [r7, #4]
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f7fa fea1 	bl	800c8cc <lfs_dir_fetchmatch>
 8011b8a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d005      	beq.n	8011b9e <lfs_fs_parent+0xc6>
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	f113 0f02 	cmn.w	r3, #2
 8011b98:	d001      	beq.n	8011b9e <lfs_fs_parent+0xc6>
            return tag;
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9c:	e00c      	b.n	8011bb8 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3318      	adds	r3, #24
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7f9 fbcf 	bl	800b346 <lfs_pair_isnull>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	f083 0301 	eor.w	r3, r3, #1
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1a9      	bne.n	8011b08 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8011bb4:	f06f 0301 	mvn.w	r3, #1
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3730      	adds	r7, #48	@ 0x30
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	08023da4 	.word	0x08023da4
 8011bc4:	08023d60 	.word	0x08023d60
 8011bc8:	08023c38 	.word	0x08023c38
 8011bcc:	08024410 	.word	0x08024410
 8011bd0:	08011a55 	.word	0x08011a55
 8011bd4:	20000008 	.word	0x20000008
 8011bd8:	7ff003ff 	.word	0x7ff003ff

08011bdc <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	460b      	mov	r3, r1
 8011be6:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8011bf0:	78fb      	ldrb	r3, [r7, #3]
 8011bf2:	025b      	lsls	r3, r3, #9
 8011bf4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011bfa:	bf00      	nop
 8011bfc:	370c      	adds	r7, #12
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr
	...

08011c08 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8011c08:	b590      	push	{r4, r7, lr}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7f9 fcb5 	bl	800b588 <lfs_tag_size>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d10a      	bne.n	8011c3a <lfs_fs_preporphans+0x32>
 8011c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da06      	bge.n	8011c3a <lfs_fs_preporphans+0x32>
 8011c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8011c98 <lfs_fs_preporphans+0x90>)
 8011c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8011c9c <lfs_fs_preporphans+0x94>)
 8011c30:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8011c34:	481a      	ldr	r0, [pc, #104]	@ (8011ca0 <lfs_fs_preporphans+0x98>)
 8011c36:	f00e fe47 	bl	80208c8 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7f9 fca2 	bl	800b588 <lfs_tag_size>
 8011c44:	4603      	mov	r3, r0
 8011c46:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8011c4a:	d90a      	bls.n	8011c62 <lfs_fs_preporphans+0x5a>
 8011c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	dd06      	ble.n	8011c62 <lfs_fs_preporphans+0x5a>
 8011c54:	4b13      	ldr	r3, [pc, #76]	@ (8011ca4 <lfs_fs_preporphans+0x9c>)
 8011c56:	4a11      	ldr	r2, [pc, #68]	@ (8011c9c <lfs_fs_preporphans+0x94>)
 8011c58:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8011c5c:	4810      	ldr	r0, [pc, #64]	@ (8011ca0 <lfs_fs_preporphans+0x98>)
 8011c5e:	f00e fe33 	bl	80208c8 <__assert_func>
    lfs->gstate.tag += orphans;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c6a:	441a      	add	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c74:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	3330      	adds	r3, #48	@ 0x30
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f9 fce6 	bl	800b64e <lfs_gstate_hasorphans>
 8011c82:	4603      	mov	r3, r0
 8011c84:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011c86:	ea44 0203 	orr.w	r2, r4, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd90      	pop	{r4, r7, pc}
 8011c98:	080245ec 	.word	0x080245ec
 8011c9c:	08026d2c 	.word	0x08026d2c
 8011ca0:	08023c38 	.word	0x08023c38
 8011ca4:	08024624 	.word	0x08024624

08011ca8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cba:	4a17      	ldr	r2, [pc, #92]	@ (8011d18 <lfs_fs_prepmove+0x70>)
 8011cbc:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8011cbe:	897b      	ldrh	r3, [r7, #10]
 8011cc0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011cc4:	428b      	cmp	r3, r1
 8011cc6:	d006      	beq.n	8011cd6 <lfs_fs_prepmove+0x2e>
 8011cc8:	897b      	ldrh	r3, [r7, #10]
 8011cca:	029b      	lsls	r3, r3, #10
 8011ccc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011cd0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011cd4:	e000      	b.n	8011cd8 <lfs_fs_prepmove+0x30>
 8011cd6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011cd8:	431a      	orrs	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8011cde:	897b      	ldrh	r3, [r7, #10]
 8011ce0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d002      	beq.n	8011cee <lfs_fs_prepmove+0x46>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	e000      	b.n	8011cf0 <lfs_fs_prepmove+0x48>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8011cf4:	897b      	ldrh	r3, [r7, #10]
 8011cf6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d003      	beq.n	8011d06 <lfs_fs_prepmove+0x5e>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	3304      	adds	r3, #4
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	e000      	b.n	8011d08 <lfs_fs_prepmove+0x60>
 8011d06:	2300      	movs	r3, #0
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8011d0c:	bf00      	nop
 8011d0e:	3714      	adds	r7, #20
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	800003ff 	.word	0x800003ff

08011d1c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b098      	sub	sp, #96	@ 0x60
 8011d20:	af02      	add	r7, sp, #8
 8011d22:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3330      	adds	r3, #48	@ 0x30
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f7f9 fcc5 	bl	800b6b8 <lfs_gstate_needssuperblock>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	f083 0301 	eor.w	r3, r3, #1
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d001      	beq.n	8011d3e <lfs_fs_desuperblock+0x22>
        return 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e04e      	b.n	8011ddc <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6a1a      	ldr	r2, [r3, #32]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d46:	4927      	ldr	r1, [pc, #156]	@ (8011de4 <lfs_fs_desuperblock+0xc8>)
 8011d48:	9101      	str	r1, [sp, #4]
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8011d52:	4925      	ldr	r1, [pc, #148]	@ (8011de8 <lfs_fs_desuperblock+0xcc>)
 8011d54:	4825      	ldr	r0, [pc, #148]	@ (8011dec <lfs_fs_desuperblock+0xd0>)
 8011d56:	f00f f863 	bl	8020e20 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f103 0220 	add.w	r2, r3, #32
 8011d60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7fb f980 	bl	800d06c <lfs_dir_fetch>
 8011d6c:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8011d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d001      	beq.n	8011d78 <lfs_fs_desuperblock+0x5c>
        return err;
 8011d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d76:	e031      	b.n	8011ddc <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f7f9 fe33 	bl	800b9e4 <lfs_fs_disk_version>
 8011d7e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8011d80:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 8011d88:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8011d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8011d94:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8011d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8011da0:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8011da2:	f107 031c 	add.w	r3, r7, #28
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f9 fd92 	bl	800b8d0 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8011dac:	4b10      	ldr	r3, [pc, #64]	@ (8011df0 <lfs_fs_desuperblock+0xd4>)
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	f107 031c 	add.w	r3, r7, #28
 8011db4:	61bb      	str	r3, [r7, #24]
 8011db6:	f107 0214 	add.w	r2, r7, #20
 8011dba:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7fc ffad 	bl	800ed20 <lfs_dir_commit>
 8011dc6:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8011dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <lfs_fs_desuperblock+0xb6>
        return err;
 8011dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dd0:	e004      	b.n	8011ddc <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff ff01 	bl	8011bdc <lfs_fs_prepsuperblock>
    return 0;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3758      	adds	r7, #88	@ 0x58
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	08023d60 	.word	0x08023d60
 8011de8:	08023c38 	.word	0x08023c38
 8011dec:	0802465c 	.word	0x0802465c
 8011df0:	20100018 	.word	0x20100018

08011df4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8011df4:	b5b0      	push	{r4, r5, r7, lr}
 8011df6:	b094      	sub	sp, #80	@ 0x50
 8011df8:	af04      	add	r7, sp, #16
 8011dfa:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	333c      	adds	r3, #60	@ 0x3c
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f9 fc46 	bl	800b692 <lfs_gstate_hasmove>
 8011e06:	4603      	mov	r3, r0
 8011e08:	f083 0301 	eor.w	r3, r3, #1
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d001      	beq.n	8011e16 <lfs_fs_demove+0x22>
        return 0;
 8011e12:	2300      	movs	r3, #0
 8011e14:	e05b      	b.n	8011ece <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7f9 fba0 	bl	800b568 <lfs_tag_id>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8011ed8 <lfs_fs_demove+0xe4>)
 8011e2e:	9302      	str	r3, [sp, #8]
 8011e30:	9201      	str	r2, [sp, #4]
 8011e32:	9400      	str	r4, [sp, #0]
 8011e34:	462b      	mov	r3, r5
 8011e36:	f241 3224 	movw	r2, #4900	@ 0x1324
 8011e3a:	4928      	ldr	r1, [pc, #160]	@ (8011edc <lfs_fs_demove+0xe8>)
 8011e3c:	4828      	ldr	r0, [pc, #160]	@ (8011ee0 <lfs_fs_demove+0xec>)
 8011e3e:	f00e ffef 	bl	8020e20 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7f9 fb64 	bl	800b514 <lfs_tag_type3>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d006      	beq.n	8011e66 <lfs_fs_demove+0x72>
 8011e58:	4b22      	ldr	r3, [pc, #136]	@ (8011ee4 <lfs_fs_demove+0xf0>)
 8011e5a:	4a23      	ldr	r2, [pc, #140]	@ (8011ee8 <lfs_fs_demove+0xf4>)
 8011e5c:	f241 312b 	movw	r1, #4907	@ 0x132b
 8011e60:	481e      	ldr	r0, [pc, #120]	@ (8011edc <lfs_fs_demove+0xe8>)
 8011e62:	f00e fd31 	bl	80208c8 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8011e6c:	f107 0318 	add.w	r3, r7, #24
 8011e70:	4619      	mov	r1, r3
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7fb f8fa 	bl	800d06c <lfs_dir_fetch>
 8011e78:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8011e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <lfs_fs_demove+0x90>
        return err;
 8011e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e82:	e024      	b.n	8011ece <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7f9 fb6d 	bl	800b568 <lfs_tag_id>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8011e92:	2200      	movs	r2, #0
 8011e94:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff ff05 	bl	8011ca8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8011e9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ea0:	029b      	lsls	r3, r3, #10
 8011ea2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011ea6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011eaa:	613b      	str	r3, [r7, #16]
 8011eac:	2300      	movs	r3, #0
 8011eae:	617b      	str	r3, [r7, #20]
 8011eb0:	f107 0210 	add.w	r2, r7, #16
 8011eb4:	f107 0118 	add.w	r1, r7, #24
 8011eb8:	2301      	movs	r3, #1
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7fc ff30 	bl	800ed20 <lfs_dir_commit>
 8011ec0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8011ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d001      	beq.n	8011ecc <lfs_fs_demove+0xd8>
        return err;
 8011ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011eca:	e000      	b.n	8011ece <lfs_fs_demove+0xda>
    }

    return 0;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3740      	adds	r7, #64	@ 0x40
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	08023d60 	.word	0x08023d60
 8011edc:	08023c38 	.word	0x08023c38
 8011ee0:	08024690 	.word	0x08024690
 8011ee4:	080246c4 	.word	0x080246c4
 8011ee8:	08026d40 	.word	0x08026d40

08011eec <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8011eec:	b5b0      	push	{r4, r5, r7, lr}
 8011eee:	b0b2      	sub	sp, #200	@ 0xc8
 8011ef0:	af04      	add	r7, sp, #16
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	3330      	adds	r3, #48	@ 0x30
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7f9 fba6 	bl	800b64e <lfs_gstate_hasorphans>
 8011f02:	4603      	mov	r3, r0
 8011f04:	f083 0301 	eor.w	r3, r3, #1
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d001      	beq.n	8011f12 <lfs_fs_deorphan+0x26>
        return 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e187      	b.n	8012222 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8011f18:	e170      	b.n	80121fc <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8011f1a:	f107 0308 	add.w	r3, r7, #8
 8011f1e:	2220      	movs	r2, #32
 8011f20:	2100      	movs	r1, #0
 8011f22:	4618      	mov	r0, r3
 8011f24:	f00f f8ac 	bl	8021080 <memset>
 8011f28:	2301      	movs	r3, #1
 8011f2a:	77fb      	strb	r3, [r7, #31]
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8011f30:	2300      	movs	r3, #0
 8011f32:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8011f36:	e149      	b.n	80121cc <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8011f38:	f107 0308 	add.w	r3, r7, #8
 8011f3c:	f103 0218 	add.w	r2, r3, #24
 8011f40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011f44:	4619      	mov	r1, r3
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7fb f890 	bl	800d06c <lfs_dir_fetch>
 8011f4c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8011f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d002      	beq.n	8011f5e <lfs_fs_deorphan+0x72>
                return err;
 8011f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f5c:	e161      	b.n	8012222 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8011f5e:	7ffb      	ldrb	r3, [r7, #31]
 8011f60:	f083 0301 	eor.w	r3, r3, #1
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 8124 	beq.w	80121b4 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8011f6c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8011f70:	f107 0308 	add.w	r3, r7, #8
 8011f74:	3318      	adds	r3, #24
 8011f76:	4619      	mov	r1, r3
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7ff fdad 	bl	8011ad8 <lfs_fs_parent>
 8011f7e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8011f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	da07      	bge.n	8011f9a <lfs_fs_deorphan+0xae>
 8011f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011f8e:	f113 0f02 	cmn.w	r3, #2
 8011f92:	d002      	beq.n	8011f9a <lfs_fs_deorphan+0xae>
                    return tag;
 8011f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011f98:	e143      	b.n	8012222 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8011f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f040 80ac 	bne.w	80120fc <lfs_fs_deorphan+0x210>
 8011fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011fa8:	f113 0f02 	cmn.w	r3, #2
 8011fac:	f000 80a6 	beq.w	80120fc <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8011fb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011fb4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8011fb8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	4a9a      	ldr	r2, [pc, #616]	@ (801222c <lfs_fs_deorphan+0x340>)
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7f9 ff4c 	bl	800be60 <lfs_dir_get>
 8011fc8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8011fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	da02      	bge.n	8011fda <lfs_fs_deorphan+0xee>
                        return state;
 8011fd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fd8:	e0eb      	b.n	80121b2 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8011fda:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7f9 fa23 	bl	800b42a <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8011fe4:	f107 0308 	add.w	r3, r7, #8
 8011fe8:	f103 0218 	add.w	r2, r3, #24
 8011fec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011ff0:	4611      	mov	r1, r2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f9 f9ec 	bl	800b3d0 <lfs_pair_issync>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	f083 0301 	eor.w	r3, r3, #1
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d07b      	beq.n	80120fc <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8012004:	6a38      	ldr	r0, [r7, #32]
 8012006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012008:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801200c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8012010:	4c87      	ldr	r4, [pc, #540]	@ (8012230 <lfs_fs_deorphan+0x344>)
 8012012:	9403      	str	r4, [sp, #12]
 8012014:	9102      	str	r1, [sp, #8]
 8012016:	9201      	str	r2, [sp, #4]
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	4603      	mov	r3, r0
 801201c:	f241 3271 	movw	r2, #4977	@ 0x1371
 8012020:	4984      	ldr	r1, [pc, #528]	@ (8012234 <lfs_fs_deorphan+0x348>)
 8012022:	4885      	ldr	r0, [pc, #532]	@ (8012238 <lfs_fs_deorphan+0x34c>)
 8012024:	f00e fefc 	bl	8020e20 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8012028:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801202c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	3330      	adds	r3, #48	@ 0x30
 8012034:	f107 0208 	add.w	r2, r7, #8
 8012038:	4611      	mov	r1, r2
 801203a:	4618      	mov	r0, r3
 801203c:	f7f9 fb50 	bl	800b6e0 <lfs_gstate_hasmovehere>
 8012040:	4603      	mov	r3, r0
 8012042:	2b00      	cmp	r3, #0
 8012044:	d01c      	beq.n	8012080 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801204a:	4618      	mov	r0, r3
 801204c:	f7f9 fa8c 	bl	800b568 <lfs_tag_id>
 8012050:	4603      	mov	r3, r0
 8012052:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8012056:	68b9      	ldr	r1, [r7, #8]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 801205e:	4874      	ldr	r0, [pc, #464]	@ (8012230 <lfs_fs_deorphan+0x344>)
 8012060:	9002      	str	r0, [sp, #8]
 8012062:	9201      	str	r2, [sp, #4]
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	460b      	mov	r3, r1
 8012068:	f241 327c 	movw	r2, #4988	@ 0x137c
 801206c:	4971      	ldr	r1, [pc, #452]	@ (8012234 <lfs_fs_deorphan+0x348>)
 801206e:	4873      	ldr	r0, [pc, #460]	@ (801223c <lfs_fs_deorphan+0x350>)
 8012070:	f00e fed6 	bl	8020e20 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012074:	2200      	movs	r2, #0
 8012076:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff fe14 	bl	8011ca8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8012080:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012084:	4618      	mov	r0, r3
 8012086:	f7f9 f9ea 	bl	800b45e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801208a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801208e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012092:	4293      	cmp	r3, r2
 8012094:	d007      	beq.n	80120a6 <lfs_fs_deorphan+0x1ba>
 8012096:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801209a:	029b      	lsls	r3, r3, #10
 801209c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80120a0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80120a4:	e000      	b.n	80120a8 <lfs_fs_deorphan+0x1bc>
 80120a6:	2300      	movs	r3, #0
 80120a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80120ac:	2300      	movs	r3, #0
 80120ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80120b2:	4b63      	ldr	r3, [pc, #396]	@ (8012240 <lfs_fs_deorphan+0x354>)
 80120b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80120b8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80120bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80120c0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80120c4:	f107 0108 	add.w	r1, r7, #8
 80120c8:	2302      	movs	r3, #2
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7fc fb2e 	bl	800e72c <lfs_dir_orphaningcommit>
 80120d0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80120d4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80120d8:	4618      	mov	r0, r3
 80120da:	f7f9 f9a6 	bl	800b42a <lfs_pair_fromle32>
                        if (state < 0) {
 80120de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	da02      	bge.n	80120ec <lfs_fs_deorphan+0x200>
                            return state;
 80120e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80120ea:	e062      	b.n	80121b2 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80120ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120f0:	2b03      	cmp	r3, #3
 80120f2:	d16b      	bne.n	80121cc <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80120f4:	2301      	movs	r3, #1
 80120f6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80120fa:	e067      	b.n	80121cc <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80120fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012100:	2b01      	cmp	r3, #1
 8012102:	d157      	bne.n	80121b4 <lfs_fs_deorphan+0x2c8>
 8012104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012108:	f113 0f02 	cmn.w	r3, #2
 801210c:	d152      	bne.n	80121b4 <lfs_fs_deorphan+0x2c8>
 801210e:	78fb      	ldrb	r3, [r7, #3]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d04f      	beq.n	80121b4 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8012114:	6a3a      	ldr	r2, [r7, #32]
 8012116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012118:	4945      	ldr	r1, [pc, #276]	@ (8012230 <lfs_fs_deorphan+0x344>)
 801211a:	9101      	str	r1, [sp, #4]
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	4613      	mov	r3, r2
 8012120:	f241 329c 	movw	r2, #5020	@ 0x139c
 8012124:	4943      	ldr	r1, [pc, #268]	@ (8012234 <lfs_fs_deorphan+0x348>)
 8012126:	4847      	ldr	r0, [pc, #284]	@ (8012244 <lfs_fs_deorphan+0x358>)
 8012128:	f00e fe7a 	bl	8020e20 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012136:	4619      	mov	r1, r3
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7fa ffb3 	bl	800d0a4 <lfs_dir_getgstate>
 801213e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8012142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012146:	2b00      	cmp	r3, #0
 8012148:	d002      	beq.n	8012150 <lfs_fs_deorphan+0x264>
                        return err;
 801214a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801214e:	e030      	b.n	80121b2 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8012150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012154:	3318      	adds	r3, #24
 8012156:	4618      	mov	r0, r3
 8012158:	f7f9 f981 	bl	800b45e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801215c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012160:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8012164:	051a      	lsls	r2, r3, #20
 8012166:	4b38      	ldr	r3, [pc, #224]	@ (8012248 <lfs_fs_deorphan+0x35c>)
 8012168:	4313      	orrs	r3, r2
 801216a:	673b      	str	r3, [r7, #112]	@ 0x70
 801216c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012170:	3318      	adds	r3, #24
 8012172:	677b      	str	r3, [r7, #116]	@ 0x74
 8012174:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8012178:	f107 0108 	add.w	r1, r7, #8
 801217c:	2301      	movs	r3, #1
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7fc fad4 	bl	800e72c <lfs_dir_orphaningcommit>
 8012184:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8012188:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801218c:	3318      	adds	r3, #24
 801218e:	4618      	mov	r0, r3
 8012190:	f7f9 f94b 	bl	800b42a <lfs_pair_fromle32>
                    if (state < 0) {
 8012194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012198:	2b00      	cmp	r3, #0
 801219a:	da02      	bge.n	80121a2 <lfs_fs_deorphan+0x2b6>
                        return state;
 801219c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 80121a0:	e03f      	b.n	8012222 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80121a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80121a6:	2b03      	cmp	r3, #3
 80121a8:	d10f      	bne.n	80121ca <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 80121aa:	2301      	movs	r3, #1
 80121ac:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80121b0:	e00c      	b.n	80121cc <lfs_fs_deorphan+0x2e0>
                return err;
 80121b2:	e036      	b.n	8012222 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 80121b4:	f107 0408 	add.w	r4, r7, #8
 80121b8:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80121bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80121c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80121c8:	e000      	b.n	80121cc <lfs_fs_deorphan+0x2e0>
                    continue;
 80121ca:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 80121cc:	f107 0308 	add.w	r3, r7, #8
 80121d0:	3318      	adds	r3, #24
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7f9 f8b7 	bl	800b346 <lfs_pair_isnull>
 80121d8:	4603      	mov	r3, r0
 80121da:	f083 0301 	eor.w	r3, r3, #1
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f47f aea9 	bne.w	8011f38 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80121e6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d001      	beq.n	80121f2 <lfs_fs_deorphan+0x306>
 80121ee:	2300      	movs	r3, #0
 80121f0:	e002      	b.n	80121f8 <lfs_fs_deorphan+0x30c>
 80121f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80121f6:	3301      	adds	r3, #1
 80121f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80121fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012200:	2b01      	cmp	r3, #1
 8012202:	f77f ae8a 	ble.w	8011f1a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	3330      	adds	r3, #48	@ 0x30
 801220a:	4618      	mov	r0, r3
 801220c:	f7f9 fa32 	bl	800b674 <lfs_gstate_getorphans>
 8012210:	4603      	mov	r3, r0
 8012212:	425b      	negs	r3, r3
 8012214:	b2db      	uxtb	r3, r3
 8012216:	b25b      	sxtb	r3, r3
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7ff fcf4 	bl	8011c08 <lfs_fs_preporphans>
 8012220:	4603      	mov	r3, r0
}
 8012222:	4618      	mov	r0, r3
 8012224:	37b8      	adds	r7, #184	@ 0xb8
 8012226:	46bd      	mov	sp, r7
 8012228:	bdb0      	pop	{r4, r5, r7, pc}
 801222a:	bf00      	nop
 801222c:	7ffffc00 	.word	0x7ffffc00
 8012230:	08023d60 	.word	0x08023d60
 8012234:	08023c38 	.word	0x08023c38
 8012238:	080246f8 	.word	0x080246f8
 801223c:	0802473c 	.word	0x0802473c
 8012240:	600ffc08 	.word	0x600ffc08
 8012244:	08024784 	.word	0x08024784
 8012248:	000ffc08 	.word	0x000ffc08

0801224c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff fd61 	bl	8011d1c <lfs_fs_desuperblock>
 801225a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <lfs_fs_forceconsistency+0x1a>
        return err;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	e013      	b.n	801228e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ff fdc4 	bl	8011df4 <lfs_fs_demove>
 801226c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d001      	beq.n	8012278 <lfs_fs_forceconsistency+0x2c>
        return err;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	e00a      	b.n	801228e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8012278:	2101      	movs	r1, #1
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff fe36 	bl	8011eec <lfs_fs_deorphan>
 8012280:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <lfs_fs_forceconsistency+0x40>
        return err;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	e000      	b.n	801228e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8012296:	b480      	push	{r7}
 8012298:	b085      	sub	sp, #20
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
 801229e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	1c5a      	adds	r2, r3, #1
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	601a      	str	r2, [r3, #0]
    return 0;
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3714      	adds	r7, #20
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 80122c8:	f107 0208 	add.w	r2, r7, #8
 80122cc:	2300      	movs	r3, #0
 80122ce:	4907      	ldr	r1, [pc, #28]	@ (80122ec <lfs_fs_size_+0x30>)
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff f9ff 	bl	80116d4 <lfs_fs_traverse_>
 80122d6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d001      	beq.n	80122e2 <lfs_fs_size_+0x26>
        return err;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	e000      	b.n	80122e4 <lfs_fs_size_+0x28>
    }

    return size;
 80122e2:	68bb      	ldr	r3, [r7, #8]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	08012297 	.word	0x08012297

080122f0 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	695b      	ldr	r3, [r3, #20]
 80122fe:	6838      	ldr	r0, [r7, #0]
 8012300:	4798      	blx	r3
 8012302:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d001      	beq.n	801230e <lfs_format+0x1e>
        return err;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	e009      	b.n	8012322 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 801230e:	6839      	ldr	r1, [r7, #0]
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7fe ff01 	bl	8011118 <lfs_format_>
 8012316:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	6838      	ldr	r0, [r7, #0]
 801231e:	4798      	blx	r3
    return err;
 8012320:	68fb      	ldr	r3, [r7, #12]
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801232a:	b580      	push	{r7, lr}
 801232c:	b084      	sub	sp, #16
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	6838      	ldr	r0, [r7, #0]
 801233a:	4798      	blx	r3
 801233c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <lfs_mount+0x1e>
        return err;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	e009      	b.n	801235c <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7fe ff96 	bl	801127c <lfs_mount_>
 8012350:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	699b      	ldr	r3, [r3, #24]
 8012356:	6838      	ldr	r0, [r7, #0]
 8012358:	4798      	blx	r3
    return err;
 801235a:	68fb      	ldr	r3, [r7, #12]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3710      	adds	r7, #16
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012372:	695b      	ldr	r3, [r3, #20]
 8012374:	687a      	ldr	r2, [r7, #4]
 8012376:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012378:	4610      	mov	r0, r2
 801237a:	4798      	blx	r3
 801237c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <lfs_remove+0x24>
        return err;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	e00c      	b.n	80123a2 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 8012388:	6839      	ldr	r1, [r7, #0]
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f7fe f94a 	bl	8010624 <lfs_remove_>
 8012390:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012396:	699b      	ldr	r3, [r3, #24]
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801239c:	4610      	mov	r0, r2
 801239e:	4798      	blx	r3
    return err;
 80123a0:	68fb      	ldr	r3, [r7, #12]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b086      	sub	sp, #24
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	60f8      	str	r0, [r7, #12]
 80123b2:	60b9      	str	r1, [r7, #8]
 80123b4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80123ba:	695b      	ldr	r3, [r3, #20]
 80123bc:	68fa      	ldr	r2, [r7, #12]
 80123be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80123c0:	4610      	mov	r0, r2
 80123c2:	4798      	blx	r3
 80123c4:	6178      	str	r0, [r7, #20]
    if (err) {
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <lfs_rename+0x26>
        return err;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	e00d      	b.n	80123ec <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	68b9      	ldr	r1, [r7, #8]
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7fe f9f7 	bl	80107c8 <lfs_rename_>
 80123da:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	68fa      	ldr	r2, [r7, #12]
 80123e4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80123e6:	4610      	mov	r0, r2
 80123e8:	4798      	blx	r3
    return err;
 80123ea:	697b      	ldr	r3, [r7, #20]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3718      	adds	r7, #24
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b086      	sub	sp, #24
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012404:	695b      	ldr	r3, [r3, #20]
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801240a:	4610      	mov	r0, r2
 801240c:	4798      	blx	r3
 801240e:	6178      	str	r0, [r7, #20]
    if (err) {
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <lfs_stat+0x26>
        return err;
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	e00d      	b.n	8012436 <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	68b9      	ldr	r1, [r7, #8]
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7fe f8db 	bl	80105da <lfs_stat_>
 8012424:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012430:	4610      	mov	r0, r2
 8012432:	4798      	blx	r3
    return err;
 8012434:	697b      	ldr	r3, [r7, #20]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
	...

08012440 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	607a      	str	r2, [r7, #4]
 801244c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012452:	695b      	ldr	r3, [r3, #20]
 8012454:	68fa      	ldr	r2, [r7, #12]
 8012456:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012458:	4610      	mov	r0, r2
 801245a:	4798      	blx	r3
 801245c:	6178      	str	r0, [r7, #20]
    if (err) {
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d001      	beq.n	8012468 <lfs_file_open+0x28>
        return err;
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	e021      	b.n	80124ac <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801246c:	68b9      	ldr	r1, [r7, #8]
 801246e:	4618      	mov	r0, r3
 8012470:	f7f9 fa66 	bl	800b940 <lfs_mlist_isopen>
 8012474:	4603      	mov	r3, r0
 8012476:	f083 0301 	eor.w	r3, r3, #1
 801247a:	b2db      	uxtb	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	d106      	bne.n	801248e <lfs_file_open+0x4e>
 8012480:	4b0c      	ldr	r3, [pc, #48]	@ (80124b4 <lfs_file_open+0x74>)
 8012482:	4a0d      	ldr	r2, [pc, #52]	@ (80124b8 <lfs_file_open+0x78>)
 8012484:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 8012488:	480c      	ldr	r0, [pc, #48]	@ (80124bc <lfs_file_open+0x7c>)
 801248a:	f00e fa1d 	bl	80208c8 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f7fd faad 	bl	800f9f4 <lfs_file_open_>
 801249a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124a0:	699b      	ldr	r3, [r3, #24]
 80124a2:	68fa      	ldr	r2, [r7, #12]
 80124a4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80124a6:	4610      	mov	r0, r2
 80124a8:	4798      	blx	r3
    return err;
 80124aa:	697b      	ldr	r3, [r7, #20]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	080247d4 	.word	0x080247d4
 80124b8:	08026d50 	.word	0x08026d50
 80124bc:	08023c38 	.word	0x08023c38

080124c0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124ce:	695b      	ldr	r3, [r3, #20]
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80124d4:	4610      	mov	r0, r2
 80124d6:	4798      	blx	r3
 80124d8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <lfs_file_close+0x24>
        return err;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	e01c      	b.n	801251e <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124e8:	6839      	ldr	r1, [r7, #0]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7f9 fa28 	bl	800b940 <lfs_mlist_isopen>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <lfs_file_close+0x44>
 80124f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012528 <lfs_file_close+0x68>)
 80124f8:	4a0c      	ldr	r2, [pc, #48]	@ (801252c <lfs_file_close+0x6c>)
 80124fa:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 80124fe:	480c      	ldr	r0, [pc, #48]	@ (8012530 <lfs_file_close+0x70>)
 8012500:	f00e f9e2 	bl	80208c8 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8012504:	6839      	ldr	r1, [r7, #0]
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7fd fa8c 	bl	800fa24 <lfs_file_close_>
 801250c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012512:	699b      	ldr	r3, [r3, #24]
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012518:	4610      	mov	r0, r2
 801251a:	4798      	blx	r3
    return err;
 801251c:	68fb      	ldr	r3, [r7, #12]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	0802480c 	.word	0x0802480c
 801252c:	08026d60 	.word	0x08026d60
 8012530:	08023c38 	.word	0x08023c38

08012534 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8012534:	b580      	push	{r7, lr}
 8012536:	b086      	sub	sp, #24
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012546:	695b      	ldr	r3, [r3, #20]
 8012548:	68fa      	ldr	r2, [r7, #12]
 801254a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801254c:	4610      	mov	r0, r2
 801254e:	4798      	blx	r3
 8012550:	6178      	str	r0, [r7, #20]
    if (err) {
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <lfs_file_read+0x28>
        return err;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	e01e      	b.n	801259a <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012560:	68b9      	ldr	r1, [r7, #8]
 8012562:	4618      	mov	r0, r3
 8012564:	f7f9 f9ec 	bl	800b940 <lfs_mlist_isopen>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d106      	bne.n	801257c <lfs_file_read+0x48>
 801256e:	4b0d      	ldr	r3, [pc, #52]	@ (80125a4 <lfs_file_read+0x70>)
 8012570:	4a0d      	ldr	r2, [pc, #52]	@ (80125a8 <lfs_file_read+0x74>)
 8012572:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8012576:	480d      	ldr	r0, [pc, #52]	@ (80125ac <lfs_file_read+0x78>)
 8012578:	f00e f9a6 	bl	80208c8 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	687a      	ldr	r2, [r7, #4]
 8012580:	68b9      	ldr	r1, [r7, #8]
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f7fd fdae 	bl	80100e4 <lfs_file_read_>
 8012588:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801258e:	699b      	ldr	r3, [r3, #24]
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012594:	4610      	mov	r0, r2
 8012596:	4798      	blx	r3
    return res;
 8012598:	693b      	ldr	r3, [r7, #16]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3718      	adds	r7, #24
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	0802480c 	.word	0x0802480c
 80125a8:	08026d70 	.word	0x08026d70
 80125ac:	08023c38 	.word	0x08023c38

080125b0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80125c2:	695b      	ldr	r3, [r3, #20]
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80125c8:	4610      	mov	r0, r2
 80125ca:	4798      	blx	r3
 80125cc:	6178      	str	r0, [r7, #20]
    if (err) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <lfs_file_write+0x28>
        return err;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	e01e      	b.n	8012616 <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	4618      	mov	r0, r3
 80125e0:	f7f9 f9ae 	bl	800b940 <lfs_mlist_isopen>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d106      	bne.n	80125f8 <lfs_file_write+0x48>
 80125ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012620 <lfs_file_write+0x70>)
 80125ec:	4a0d      	ldr	r2, [pc, #52]	@ (8012624 <lfs_file_write+0x74>)
 80125ee:	f641 0105 	movw	r1, #6149	@ 0x1805
 80125f2:	480d      	ldr	r0, [pc, #52]	@ (8012628 <lfs_file_write+0x78>)
 80125f4:	f00e f968 	bl	80208c8 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	68b9      	ldr	r1, [r7, #8]
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f7fd feb6 	bl	8010370 <lfs_file_write_>
 8012604:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012610:	4610      	mov	r0, r2
 8012612:	4798      	blx	r3
    return res;
 8012614:	693b      	ldr	r3, [r7, #16]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3718      	adds	r7, #24
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	0802480c 	.word	0x0802480c
 8012624:	08026d80 	.word	0x08026d80
 8012628:	08023c38 	.word	0x08023c38

0801262c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801262c:	b580      	push	{r7, lr}
 801262e:	b086      	sub	sp, #24
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
 8012638:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012644:	4610      	mov	r0, r2
 8012646:	4798      	blx	r3
 8012648:	6178      	str	r0, [r7, #20]
    if (err) {
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d001      	beq.n	8012654 <lfs_file_seek+0x28>
        return err;
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	e01e      	b.n	8012692 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012658:	68b9      	ldr	r1, [r7, #8]
 801265a:	4618      	mov	r0, r3
 801265c:	f7f9 f970 	bl	800b940 <lfs_mlist_isopen>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d106      	bne.n	8012674 <lfs_file_seek+0x48>
 8012666:	4b0d      	ldr	r3, [pc, #52]	@ (801269c <lfs_file_seek+0x70>)
 8012668:	4a0d      	ldr	r2, [pc, #52]	@ (80126a0 <lfs_file_seek+0x74>)
 801266a:	f641 0117 	movw	r1, #6167	@ 0x1817
 801266e:	480d      	ldr	r0, [pc, #52]	@ (80126a4 <lfs_file_seek+0x78>)
 8012670:	f00e f92a 	bl	80208c8 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	68b9      	ldr	r1, [r7, #8]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f7fd fefc 	bl	8010478 <lfs_file_seek_>
 8012680:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012686:	699b      	ldr	r3, [r3, #24]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801268c:	4610      	mov	r0, r2
 801268e:	4798      	blx	r3
    return res;
 8012690:	693b      	ldr	r3, [r7, #16]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3718      	adds	r7, #24
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	0802480c 	.word	0x0802480c
 80126a0:	08026d90 	.word	0x08026d90
 80126a4:	08023c38 	.word	0x08023c38

080126a8 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80126b6:	695b      	ldr	r3, [r3, #20]
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80126bc:	4610      	mov	r0, r2
 80126be:	4798      	blx	r3
 80126c0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d001      	beq.n	80126cc <lfs_file_tell+0x24>
        return err;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	e01c      	b.n	8012706 <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d0:	6839      	ldr	r1, [r7, #0]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f9 f934 	bl	800b940 <lfs_mlist_isopen>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <lfs_file_tell+0x44>
 80126de:	4b0c      	ldr	r3, [pc, #48]	@ (8012710 <lfs_file_tell+0x68>)
 80126e0:	4a0c      	ldr	r2, [pc, #48]	@ (8012714 <lfs_file_tell+0x6c>)
 80126e2:	f641 0138 	movw	r1, #6200	@ 0x1838
 80126e6:	480c      	ldr	r0, [pc, #48]	@ (8012718 <lfs_file_tell+0x70>)
 80126e8:	f00e f8ee 	bl	80208c8 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 80126ec:	6839      	ldr	r1, [r7, #0]
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7fd ff4b 	bl	801058a <lfs_file_tell_>
 80126f4:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80126fa:	699b      	ldr	r3, [r3, #24]
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012700:	4610      	mov	r0, r2
 8012702:	4798      	blx	r3
    return res;
 8012704:	68bb      	ldr	r3, [r7, #8]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	0802480c 	.word	0x0802480c
 8012714:	08026da0 	.word	0x08026da0
 8012718:	08023c38 	.word	0x08023c38

0801271c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801271c:	b580      	push	{r7, lr}
 801271e:	b084      	sub	sp, #16
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012730:	4610      	mov	r0, r2
 8012732:	4798      	blx	r3
 8012734:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <lfs_mkdir+0x24>
        return err;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	e00c      	b.n	801275a <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7fc fb12 	bl	800ed6c <lfs_mkdir_>
 8012748:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801274e:	699b      	ldr	r3, [r3, #24]
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012754:	4610      	mov	r0, r2
 8012756:	4798      	blx	r3
    return err;
 8012758:	68fb      	ldr	r3, [r7, #12]
}
 801275a:	4618      	mov	r0, r3
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
	...

08012764 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801277a:	4610      	mov	r0, r2
 801277c:	4798      	blx	r3
 801277e:	6178      	str	r0, [r7, #20]
    if (err) {
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d001      	beq.n	801278a <lfs_dir_open+0x26>
        return err;
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	e020      	b.n	80127cc <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801278e:	68b9      	ldr	r1, [r7, #8]
 8012790:	4618      	mov	r0, r3
 8012792:	f7f9 f8d5 	bl	800b940 <lfs_mlist_isopen>
 8012796:	4603      	mov	r3, r0
 8012798:	f083 0301 	eor.w	r3, r3, #1
 801279c:	b2db      	uxtb	r3, r3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d106      	bne.n	80127b0 <lfs_dir_open+0x4c>
 80127a2:	4b0c      	ldr	r3, [pc, #48]	@ (80127d4 <lfs_dir_open+0x70>)
 80127a4:	4a0c      	ldr	r2, [pc, #48]	@ (80127d8 <lfs_dir_open+0x74>)
 80127a6:	f641 0174 	movw	r1, #6260	@ 0x1874
 80127aa:	480c      	ldr	r0, [pc, #48]	@ (80127dc <lfs_dir_open+0x78>)
 80127ac:	f00e f88c 	bl	80208c8 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	68b9      	ldr	r1, [r7, #8]
 80127b4:	68f8      	ldr	r0, [r7, #12]
 80127b6:	f7fc fc19 	bl	800efec <lfs_dir_open_>
 80127ba:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	68fa      	ldr	r2, [r7, #12]
 80127c4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80127c6:	4610      	mov	r0, r2
 80127c8:	4798      	blx	r3
    return err;
 80127ca:	697b      	ldr	r3, [r7, #20]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	08024844 	.word	0x08024844
 80127d8:	08026db0 	.word	0x08026db0
 80127dc:	08023c38 	.word	0x08023c38

080127e0 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b084      	sub	sp, #16
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127ee:	695b      	ldr	r3, [r3, #20]
 80127f0:	687a      	ldr	r2, [r7, #4]
 80127f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80127f4:	4610      	mov	r0, r2
 80127f6:	4798      	blx	r3
 80127f8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d001      	beq.n	8012804 <lfs_dir_close+0x24>
        return err;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	e00c      	b.n	801281e <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f7fc fc6a 	bl	800f0e0 <lfs_dir_close_>
 801280c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012812:	699b      	ldr	r3, [r3, #24]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012818:	4610      	mov	r0, r2
 801281a:	4798      	blx	r3
    return err;
 801281c:	68fb      	ldr	r3, [r7, #12]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8012826:	b580      	push	{r7, lr}
 8012828:	b086      	sub	sp, #24
 801282a:	af00      	add	r7, sp, #0
 801282c:	60f8      	str	r0, [r7, #12]
 801282e:	60b9      	str	r1, [r7, #8]
 8012830:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801283c:	4610      	mov	r0, r2
 801283e:	4798      	blx	r3
 8012840:	6178      	str	r0, [r7, #20]
    if (err) {
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <lfs_dir_read+0x26>
        return err;
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	e00d      	b.n	8012868 <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	68b9      	ldr	r1, [r7, #8]
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f7fc fc53 	bl	800f0fc <lfs_dir_read_>
 8012856:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801285c:	699b      	ldr	r3, [r3, #24]
 801285e:	68fa      	ldr	r2, [r7, #12]
 8012860:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012862:	4610      	mov	r0, r2
 8012864:	4798      	blx	r3
    return err;
 8012866:	697b      	ldr	r3, [r7, #20]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8012870:	b480      	push	{r7}
 8012872:	b087      	sub	sp, #28
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8012880:	2300      	movs	r3, #0
 8012882:	617b      	str	r3, [r7, #20]
 8012884:	e024      	b.n	80128d0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	091a      	lsrs	r2, r3, #4
 801288a:	6939      	ldr	r1, [r7, #16]
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	440b      	add	r3, r1
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	4619      	mov	r1, r3
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	404b      	eors	r3, r1
 8012898:	f003 030f 	and.w	r3, r3, #15
 801289c:	4912      	ldr	r1, [pc, #72]	@ (80128e8 <lfs_crc+0x78>)
 801289e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80128a2:	4053      	eors	r3, r2
 80128a4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	091a      	lsrs	r2, r3, #4
 80128aa:	6939      	ldr	r1, [r7, #16]
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	440b      	add	r3, r1
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	091b      	lsrs	r3, r3, #4
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	4619      	mov	r1, r3
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	404b      	eors	r3, r1
 80128bc:	f003 030f 	and.w	r3, r3, #15
 80128c0:	4909      	ldr	r1, [pc, #36]	@ (80128e8 <lfs_crc+0x78>)
 80128c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80128c6:	4053      	eors	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	3301      	adds	r3, #1
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d3d6      	bcc.n	8012886 <lfs_crc+0x16>
    }

    return crc;
 80128d8:	68fb      	ldr	r3, [r7, #12]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	371c      	adds	r7, #28
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	08026dc0 	.word	0x08026dc0

080128ec <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	683a      	ldr	r2, [r7, #0]
 80128fa:	fb02 f303 	mul.w	r3, r2, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f7 fbb4 	bl	800a06c <pvPortMalloc>
 8012904:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d008      	beq.n	801291e <mg_calloc+0x32>
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	fb02 f303 	mul.w	r3, r2, r3
 8012914:	461a      	mov	r2, r3
 8012916:	2100      	movs	r1, #0
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f00e fbb1 	bl	8021080 <memset>
  return p;
 801291e:	68fb      	ldr	r3, [r7, #12]
}
 8012920:	4618      	mov	r0, r3
 8012922:	3710      	adds	r7, #16
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	60fb      	str	r3, [r7, #12]
 8012936:	e002      	b.n	801293e <mg_dns_free+0x16>
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	60fb      	str	r3, [r7, #12]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	683a      	ldr	r2, [r7, #0]
 8012944:	429a      	cmp	r2, r3
 8012946:	d1f7      	bne.n	8012938 <mg_dns_free+0x10>
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	601a      	str	r2, [r3, #0]
  free(d);
 8012950:	6838      	ldr	r0, [r7, #0]
 8012952:	f7f7 fc59 	bl	800a208 <vPortFree>
}
 8012956:	bf00      	nop
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 801295e:	b580      	push	{r7, lr}
 8012960:	b086      	sub	sp, #24
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	3330      	adds	r3, #48	@ 0x30
 801296c:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	617b      	str	r3, [r7, #20]
 8012974:	e00d      	b.n	8012992 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	429a      	cmp	r2, r3
 8012984:	d103      	bne.n	801298e <mg_resolve_cancel+0x30>
 8012986:	6979      	ldr	r1, [r7, #20]
 8012988:	6938      	ldr	r0, [r7, #16]
 801298a:	f7ff ffcd 	bl	8012928 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	617b      	str	r3, [r7, #20]
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d1ee      	bne.n	8012976 <mg_resolve_cancel+0x18>
  }
}
 8012998:	bf00      	nop
 801299a:	bf00      	nop
 801299c:	3718      	adds	r7, #24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b08c      	sub	sp, #48	@ 0x30
 80129a6:	af04      	add	r7, sp, #16
 80129a8:	60f8      	str	r0, [r7, #12]
 80129aa:	60b9      	str	r1, [r7, #8]
 80129ac:	607a      	str	r2, [r7, #4]
 80129ae:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80129b0:	2300      	movs	r3, #0
 80129b2:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80129b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d005      	beq.n	80129c6 <mg_dns_parse_name_depth+0x24>
 80129ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d102      	bne.n	80129c6 <mg_dns_parse_name_depth+0x24>
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	2200      	movs	r2, #0
 80129c4:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 80129c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c8:	2b05      	cmp	r3, #5
 80129ca:	f340 8084 	ble.w	8012ad6 <mg_dns_parse_name_depth+0x134>
 80129ce:	2300      	movs	r3, #0
 80129d0:	e093      	b.n	8012afa <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	4413      	add	r3, r2
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	4413      	add	r3, r2
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d103      	bne.n	80129ee <mg_dns_parse_name_depth+0x4c>
      i++;
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	3301      	adds	r3, #1
 80129ea:	61fb      	str	r3, [r7, #28]
      break;
 80129ec:	e07b      	b.n	8012ae6 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80129ee:	69bb      	ldr	r3, [r7, #24]
 80129f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d02f      	beq.n	8012a58 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	021b      	lsls	r3, r3, #8
 80129fc:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	69fa      	ldr	r2, [r7, #28]
 8012a04:	440a      	add	r2, r1
 8012a06:	3201      	adds	r2, #1
 8012a08:	68f9      	ldr	r1, [r7, #12]
 8012a0a:	440a      	add	r2, r1
 8012a0c:	7812      	ldrb	r2, [r2, #0]
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	3301      	adds	r3, #1
 8012a16:	68ba      	ldr	r2, [r7, #8]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d919      	bls.n	8012a50 <mg_dns_parse_name_depth+0xae>
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	4413      	add	r3, r2
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d111      	bne.n	8012a50 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8012a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a2e:	3301      	adds	r3, #1
 8012a30:	9302      	str	r3, [sp, #8]
 8012a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a34:	9301      	str	r3, [sp, #4]
 8012a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a38:	9300      	str	r3, [sp, #0]
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	697a      	ldr	r2, [r7, #20]
 8012a3e:	68b9      	ldr	r1, [r7, #8]
 8012a40:	68f8      	ldr	r0, [r7, #12]
 8012a42:	f7ff ffae 	bl	80129a2 <mg_dns_parse_name_depth>
 8012a46:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <mg_dns_parse_name_depth+0xae>
        return 0;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e054      	b.n	8012afa <mg_dns_parse_name_depth+0x158>
      i += 2;
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	3302      	adds	r3, #2
 8012a54:	61fb      	str	r3, [r7, #28]
      break;
 8012a56:	e046      	b.n	8012ae6 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	441a      	add	r2, r3
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	4413      	add	r3, r2
 8012a62:	3301      	adds	r3, #1
 8012a64:	68ba      	ldr	r2, [r7, #8]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d801      	bhi.n	8012a6e <mg_dns_parse_name_depth+0xcc>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	e045      	b.n	8012afa <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8012a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d00b      	beq.n	8012a8c <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8012a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d204      	bcs.n	8012a86 <mg_dns_parse_name_depth+0xe4>
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a80:	4413      	add	r3, r2
 8012a82:	222e      	movs	r2, #46	@ 0x2e
 8012a84:	701a      	strb	r2, [r3, #0]
      j++;
 8012a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a88:	3301      	adds	r3, #1
 8012a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8012a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	4413      	add	r3, r2
 8012a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d90c      	bls.n	8012ab2 <mg_dns_parse_name_depth+0x110>
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9c:	18d0      	adds	r0, r2, r3
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	69ba      	ldr	r2, [r7, #24]
 8012aac:	4619      	mov	r1, r3
 8012aae:	f00e fbb8 	bl	8021222 <memcpy>
    j += n;
 8012ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	4413      	add	r3, r2
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8012ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d204      	bcs.n	8012ad6 <mg_dns_parse_name_depth+0x134>
 8012acc:	683a      	ldr	r2, [r7, #0]
 8012ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad0:	4413      	add	r3, r2
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	4413      	add	r3, r2
 8012adc:	3301      	adds	r3, #1
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	f63f af76 	bhi.w	80129d2 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8012ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d005      	beq.n	8012af8 <mg_dns_parse_name_depth+0x156>
 8012aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aee:	3b01      	subs	r3, #1
 8012af0:	683a      	ldr	r2, [r7, #0]
 8012af2:	4413      	add	r3, r2
 8012af4:	2200      	movs	r2, #0
 8012af6:	701a      	strb	r2, [r3, #0]
  return i;
 8012af8:	69fb      	ldr	r3, [r7, #28]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3720      	adds	r7, #32
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}

08012b02 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b088      	sub	sp, #32
 8012b06:	af04      	add	r7, sp, #16
 8012b08:	60f8      	str	r0, [r7, #12]
 8012b0a:	60b9      	str	r1, [r7, #8]
 8012b0c:	607a      	str	r2, [r7, #4]
 8012b0e:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8012b10:	2300      	movs	r3, #0
 8012b12:	9302      	str	r3, [sp, #8]
 8012b14:	2300      	movs	r3, #0
 8012b16:	9301      	str	r3, [sp, #4]
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	9300      	str	r3, [sp, #0]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	68b9      	ldr	r1, [r7, #8]
 8012b22:	68f8      	ldr	r0, [r7, #12]
 8012b24:	f7ff ff3d 	bl	80129a2 <mg_dns_parse_name_depth>
 8012b28:	4603      	mov	r3, r0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}

08012b32 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8012b32:	b580      	push	{r7, lr}
 8012b34:	b088      	sub	sp, #32
 8012b36:	af02      	add	r7, sp, #8
 8012b38:	60f8      	str	r0, [r7, #12]
 8012b3a:	60b9      	str	r1, [r7, #8]
 8012b3c:	607a      	str	r2, [r7, #4]
 8012b3e:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4413      	add	r3, r2
 8012b46:	617b      	str	r3, [r7, #20]
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8012b50:	2208      	movs	r2, #8
 8012b52:	2100      	movs	r1, #0
 8012b54:	6a38      	ldr	r0, [r7, #32]
 8012b56:	f00e fa93 	bl	8021080 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	2b0b      	cmp	r3, #11
 8012b5e:	d801      	bhi.n	8012b64 <mg_dns_parse_rr+0x32>
 8012b60:	2300      	movs	r3, #0
 8012b62:	e074      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b6a:	d901      	bls.n	8012b70 <mg_dns_parse_rr+0x3e>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	e06e      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8012b70:	697a      	ldr	r2, [r7, #20]
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d301      	bcc.n	8012b7c <mg_dns_parse_rr+0x4a>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e068      	b.n	8012c4e <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	9300      	str	r3, [sp, #0]
 8012b80:	2300      	movs	r3, #0
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	68f8      	ldr	r0, [r7, #12]
 8012b88:	f7ff ffbb 	bl	8012b02 <mg_dns_parse_name>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	801a      	strh	r2, [r3, #0]
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d101      	bne.n	8012ba0 <mg_dns_parse_rr+0x6e>
    return 0;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	e056      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8012ba0:	6a3b      	ldr	r3, [r7, #32]
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	3304      	adds	r3, #4
 8012ba6:	697a      	ldr	r2, [r7, #20]
 8012ba8:	4413      	add	r3, r2
 8012baa:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8012bac:	697a      	ldr	r2, [r7, #20]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d901      	bls.n	8012bb8 <mg_dns_parse_rr+0x86>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	e04a      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	3b04      	subs	r3, #4
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	021b      	lsls	r3, r3, #8
 8012bc0:	b21a      	sxth	r2, r3
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	3b03      	subs	r3, #3
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	b21b      	sxth	r3, r3
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	b21b      	sxth	r3, r3
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	3b02      	subs	r3, #2
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	021b      	lsls	r3, r3, #8
 8012bdc:	b21a      	sxth	r2, r3
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	3b01      	subs	r3, #1
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	b21b      	sxth	r3, r3
 8012be6:	4313      	orrs	r3, r2
 8012be8:	b21b      	sxth	r3, r3
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	6a3b      	ldr	r3, [r7, #32]
 8012bee:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8012bf0:	78fb      	ldrb	r3, [r7, #3]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d003      	beq.n	8012bfe <mg_dns_parse_rr+0xcc>
 8012bf6:	6a3b      	ldr	r3, [r7, #32]
 8012bf8:	881b      	ldrh	r3, [r3, #0]
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	e027      	b.n	8012c4e <mg_dns_parse_rr+0x11c>

  s += 6;
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	3306      	adds	r3, #6
 8012c02:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8012c04:	697a      	ldr	r2, [r7, #20]
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d901      	bls.n	8012c10 <mg_dns_parse_rr+0xde>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	e01e      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	3b02      	subs	r3, #2
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	021b      	lsls	r3, r3, #8
 8012c18:	b21a      	sxth	r2, r3
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	b21b      	sxth	r3, r3
 8012c22:	4313      	orrs	r3, r2
 8012c24:	b21b      	sxth	r3, r3
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
 8012c2e:	88db      	ldrh	r3, [r3, #6]
 8012c30:	461a      	mov	r2, r3
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	4413      	add	r3, r2
 8012c36:	693a      	ldr	r2, [r7, #16]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d201      	bcs.n	8012c40 <mg_dns_parse_rr+0x10e>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	e006      	b.n	8012c4e <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8012c40:	6a3b      	ldr	r3, [r7, #32]
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	461a      	mov	r2, r3
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	88db      	ldrh	r3, [r3, #6]
 8012c4a:	4413      	add	r3, r2
 8012c4c:	330a      	adds	r3, #10
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3718      	adds	r7, #24
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b08e      	sub	sp, #56	@ 0x38
 8012c5c:	af02      	add	r7, sp, #8
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8012c68:	230c      	movs	r3, #12
 8012c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8012c6c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012c70:	2100      	movs	r1, #0
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f00e fa04 	bl	8021080 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	2b0b      	cmp	r3, #11
 8012c7c:	d801      	bhi.n	8012c82 <mg_dns_parse+0x2a>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	e0aa      	b.n	8012dd8 <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8012c82:	6a3b      	ldr	r3, [r7, #32]
 8012c84:	889b      	ldrh	r3, [r3, #4]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f00d fa0f 	bl	80200aa <mg_ntohs>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d901      	bls.n	8012c96 <mg_dns_parse+0x3e>
 8012c92:	2300      	movs	r3, #0
 8012c94:	e0a0      	b.n	8012dd8 <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8012c96:	6a3b      	ldr	r3, [r7, #32]
 8012c98:	88db      	ldrh	r3, [r3, #6]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f00d fa05 	bl	80200aa <mg_ntohs>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8012ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca6:	2b0a      	cmp	r3, #10
 8012ca8:	d910      	bls.n	8012ccc <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8012caa:	4b4d      	ldr	r3, [pc, #308]	@ (8012de0 <mg_dns_parse+0x188>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	2b02      	cmp	r3, #2
 8012cb0:	dd0a      	ble.n	8012cc8 <mg_dns_parse+0x70>
 8012cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8012de4 <mg_dns_parse+0x18c>)
 8012cb4:	f240 4293 	movw	r2, #1171	@ 0x493
 8012cb8:	494b      	ldr	r1, [pc, #300]	@ (8012de8 <mg_dns_parse+0x190>)
 8012cba:	2003      	movs	r0, #3
 8012cbc:	f005 ffd6 	bl	8018c6c <mg_log_prefix>
 8012cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012cc2:	484a      	ldr	r0, [pc, #296]	@ (8012dec <mg_dns_parse+0x194>)
 8012cc4:	f006 f822 	bl	8018d0c <mg_log>
    num_answers = 10;  // Sanity cap
 8012cc8:	230a      	movs	r3, #10
 8012cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8012ccc:	6a3b      	ldr	r3, [r7, #32]
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f00d f9ea 	bl	80200aa <mg_ntohs>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8012cde:	2300      	movs	r3, #0
 8012ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ce2:	e015      	b.n	8012d10 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8012ce4:	f107 0314 	add.w	r3, r7, #20
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	2301      	movs	r3, #1
 8012cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cee:	68b9      	ldr	r1, [r7, #8]
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f7ff ff1e 	bl	8012b32 <mg_dns_parse_rr>
 8012cf6:	61f8      	str	r0, [r7, #28]
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d101      	bne.n	8012d02 <mg_dns_parse+0xaa>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	e06a      	b.n	8012dd8 <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8012d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	4413      	add	r3, r2
 8012d08:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8012d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d10:	6a3b      	ldr	r3, [r7, #32]
 8012d12:	889b      	ldrh	r3, [r3, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f00d f9c8 	bl	80200aa <mg_ntohs>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d20:	4293      	cmp	r3, r2
 8012d22:	d3df      	bcc.n	8012ce4 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8012d24:	2300      	movs	r3, #0
 8012d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d28:	e051      	b.n	8012dce <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8012d2a:	f107 0314 	add.w	r3, r7, #20
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	2300      	movs	r3, #0
 8012d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f7ff fefb 	bl	8012b32 <mg_dns_parse_rr>
 8012d3c:	61f8      	str	r0, [r7, #28]
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <mg_dns_parse+0xf0>
 8012d44:	2300      	movs	r3, #0
 8012d46:	e047      	b.n	8012dd8 <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3318      	adds	r3, #24
 8012d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012d50:	9200      	str	r2, [sp, #0]
 8012d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d54:	68b9      	ldr	r1, [r7, #8]
 8012d56:	68f8      	ldr	r0, [r7, #12]
 8012d58:	f7ff fed3 	bl	8012b02 <mg_dns_parse_name>
    ofs += n;
 8012d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	4413      	add	r3, r2
 8012d62:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8012d64:	8b7b      	ldrh	r3, [r7, #26]
 8012d66:	2b04      	cmp	r3, #4
 8012d68:	d114      	bne.n	8012d94 <mg_dns_parse+0x13c>
 8012d6a:	8afb      	ldrh	r3, [r7, #22]
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	d111      	bne.n	8012d94 <mg_dns_parse+0x13c>
 8012d70:	8b3b      	ldrh	r3, [r7, #24]
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	d10e      	bne.n	8012d94 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	3304      	adds	r3, #4
 8012d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d82:	3a04      	subs	r2, #4
 8012d84:	68f9      	ldr	r1, [r7, #12]
 8012d86:	440a      	add	r2, r1
 8012d88:	6812      	ldr	r2, [r2, #0]
 8012d8a:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2201      	movs	r2, #1
 8012d90:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8012d92:	e020      	b.n	8012dd6 <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8012d94:	8b7b      	ldrh	r3, [r7, #26]
 8012d96:	2b10      	cmp	r3, #16
 8012d98:	d116      	bne.n	8012dc8 <mg_dns_parse+0x170>
 8012d9a:	8afb      	ldrh	r3, [r7, #22]
 8012d9c:	2b1c      	cmp	r3, #28
 8012d9e:	d113      	bne.n	8012dc8 <mg_dns_parse+0x170>
 8012da0:	8b3b      	ldrh	r3, [r7, #24]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d110      	bne.n	8012dc8 <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2201      	movs	r2, #1
 8012daa:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	1d18      	adds	r0, r3, #4
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	3b10      	subs	r3, #16
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	4413      	add	r3, r2
 8012db8:	2210      	movs	r2, #16
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f00e fa31 	bl	8021222 <memcpy>
      dm->resolved = true;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8012dc6:	e006      	b.n	8012dd6 <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8012dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dca:	3301      	adds	r3, #1
 8012dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d3a9      	bcc.n	8012d2a <mg_dns_parse+0xd2>
    }
  }
  return true;
 8012dd6:	2301      	movs	r3, #1
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3730      	adds	r7, #48	@ 0x30
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	20000288 	.word	0x20000288
 8012de4:	08026e40 	.word	0x08026e40
 8012de8:	0802487c 	.word	0x0802487c
 8012dec:	080248ac 	.word	0x080248ac

08012df0 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8012df0:	b5b0      	push	{r4, r5, r7, lr}
 8012df2:	b0d2      	sub	sp, #328	@ 0x148
 8012df4:	af02      	add	r7, sp, #8
 8012df6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012dfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012dfe:	6018      	str	r0, [r3, #0]
 8012e00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e04:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8012e08:	6019      	str	r1, [r3, #0]
 8012e0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012e12:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8012e14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	3330      	adds	r3, #48	@ 0x30
 8012e22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8012e26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b02      	cmp	r3, #2
 8012e32:	d12d      	bne.n	8012e90 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8012e34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e42:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8012e46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8012e50:	e019      	b.n	8012e86 <dns_cb+0x96>
      tmp = d->next;
 8012e52:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8012e5c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012e60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8012e64:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8012e68:	4290      	cmp	r0, r2
 8012e6a:	eb71 0303 	sbcs.w	r3, r1, r3
 8012e6e:	d206      	bcs.n	8012e7e <dns_cb+0x8e>
 8012e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	4992      	ldr	r1, [pc, #584]	@ (80130c0 <dns_cb+0x2d0>)
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f000 fb37 	bl	80134ec <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8012e7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012e82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8012e86:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1e1      	bne.n	8012e52 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8012e8e:	e112      	b.n	80130b6 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8012e90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012e94:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2b07      	cmp	r3, #7
 8012e9c:	f040 80e4 	bne.w	8013068 <dns_cb+0x278>
    int resolved = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8012ea6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012eaa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012eb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012eb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ebe:	f107 0210 	add.w	r2, r7, #16
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	f7ff fec8 	bl	8012c58 <mg_dns_parse>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	f083 0301 	eor.w	r3, r3, #1
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d01e      	beq.n	8012f12 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8012ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80130c4 <dns_cb+0x2d4>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	dd09      	ble.n	8012ef0 <dns_cb+0x100>
 8012edc:	4b7a      	ldr	r3, [pc, #488]	@ (80130c8 <dns_cb+0x2d8>)
 8012ede:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8012ee2:	497a      	ldr	r1, [pc, #488]	@ (80130cc <dns_cb+0x2dc>)
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	f005 fec1 	bl	8018c6c <mg_log_prefix>
 8012eea:	4879      	ldr	r0, [pc, #484]	@ (80130d0 <dns_cb+0x2e0>)
 8012eec:	f005 ff0e 	bl	8018d0c <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8012ef0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012ef4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012efc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012f00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f08:	4619      	mov	r1, r3
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	f005 ff34 	bl	8018d78 <mg_hexdump>
 8012f10:	e090      	b.n	8013034 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8012f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8012f1c:	e085      	b.n	801302a <dns_cb+0x23a>
        tmp = d->next;
 8012f1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8012f28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012f2c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012f30:	881a      	ldrh	r2, [r3, #0]
 8012f32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012f36:	8a1b      	ldrh	r3, [r3, #16]
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d171      	bne.n	8013020 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8012f3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012f46:	f003 0308 	and.w	r3, r3, #8
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d04a      	beq.n	8012fe6 <dns_cb+0x1f6>
          if (dm.resolved) {
 8012f50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012f54:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012f58:	789b      	ldrb	r3, [r3, #2]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d038      	beq.n	8012fd0 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8012f5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012f66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012f6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012f6e:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8012f70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012f7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012f7e:	f102 041c 	add.w	r4, r2, #28
 8012f82:	1d1d      	adds	r5, r3, #4
 8012f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f88:	682b      	ldr	r3, [r5, #0]
 8012f8a:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8012f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80130c4 <dns_cb+0x2d4>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	dd16      	ble.n	8012fc2 <dns_cb+0x1d2>
 8012f94:	4b4c      	ldr	r3, [pc, #304]	@ (80130c8 <dns_cb+0x2d8>)
 8012f96:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 8012f9a:	494c      	ldr	r1, [pc, #304]	@ (80130cc <dns_cb+0x2dc>)
 8012f9c:	2003      	movs	r0, #3
 8012f9e:	f005 fe65 	bl	8018c6c <mg_log_prefix>
 8012fa2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8012faa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	331c      	adds	r3, #28
 8012fb2:	f107 0210 	add.w	r2, r7, #16
 8012fb6:	3218      	adds	r2, #24
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	4b46      	ldr	r3, [pc, #280]	@ (80130d4 <dns_cb+0x2e4>)
 8012fbc:	4846      	ldr	r0, [pc, #280]	@ (80130d8 <dns_cb+0x2e8>)
 8012fbe:	f005 fea5 	bl	8018d0c <mg_log>
            mg_connect_resolved(d->c);
 8012fc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f00b faa7 	bl	801e51c <mg_connect_resolved>
 8012fce:	e01d      	b.n	801300c <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8012fd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012fd4:	6858      	ldr	r0, [r3, #4]
 8012fd6:	f107 0310 	add.w	r3, r7, #16
 8012fda:	3318      	adds	r3, #24
 8012fdc:	461a      	mov	r2, r3
 8012fde:	493f      	ldr	r1, [pc, #252]	@ (80130dc <dns_cb+0x2ec>)
 8012fe0:	f000 fa84 	bl	80134ec <mg_error>
 8012fe4:	e012      	b.n	801300c <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8012fe6:	4b37      	ldr	r3, [pc, #220]	@ (80130c4 <dns_cb+0x2d4>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	dd0e      	ble.n	801300c <dns_cb+0x21c>
 8012fee:	4b36      	ldr	r3, [pc, #216]	@ (80130c8 <dns_cb+0x2d8>)
 8012ff0:	f240 42da 	movw	r2, #1242	@ 0x4da
 8012ff4:	4935      	ldr	r1, [pc, #212]	@ (80130cc <dns_cb+0x2dc>)
 8012ff6:	2001      	movs	r0, #1
 8012ff8:	f005 fe38 	bl	8018c6c <mg_log_prefix>
 8012ffc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013004:	4619      	mov	r1, r3
 8013006:	4836      	ldr	r0, [pc, #216]	@ (80130e0 <dns_cb+0x2f0>)
 8013008:	f005 fe80 	bl	8018d0c <mg_log>
        mg_dns_free(head, d);
 801300c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8013010:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8013014:	f7ff fc88 	bl	8012928 <mg_dns_free>
        resolved = 1;
 8013018:	2301      	movs	r3, #1
 801301a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801301e:	e000      	b.n	8013022 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8013020:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8013022:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013026:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801302a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801302e:	2b00      	cmp	r3, #0
 8013030:	f47f af75 	bne.w	8012f1e <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8013034:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013038:	2b00      	cmp	r3, #0
 801303a:	d10d      	bne.n	8013058 <dns_cb+0x268>
 801303c:	4b21      	ldr	r3, [pc, #132]	@ (80130c4 <dns_cb+0x2d4>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	dd09      	ble.n	8013058 <dns_cb+0x268>
 8013044:	4b20      	ldr	r3, [pc, #128]	@ (80130c8 <dns_cb+0x2d8>)
 8013046:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 801304a:	4920      	ldr	r1, [pc, #128]	@ (80130cc <dns_cb+0x2dc>)
 801304c:	2001      	movs	r0, #1
 801304e:	f005 fe0d 	bl	8018c6c <mg_log_prefix>
 8013052:	4824      	ldr	r0, [pc, #144]	@ (80130e4 <dns_cb+0x2f4>)
 8013054:	f005 fe5a 	bl	8018d0c <mg_log>
    c->recv.len = 0;
 8013058:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801305c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2200      	movs	r2, #0
 8013064:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8013066:	e026      	b.n	80130b6 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 8013068:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801306c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b09      	cmp	r3, #9
 8013074:	d11f      	bne.n	80130b6 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 8013076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8013080:	e015      	b.n	80130ae <dns_cb+0x2be>
      tmp = d->next;
 8013082:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 801308c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	4915      	ldr	r1, [pc, #84]	@ (80130e8 <dns_cb+0x2f8>)
 8013094:	4618      	mov	r0, r3
 8013096:	f000 fa29 	bl	80134ec <mg_error>
      mg_dns_free(head, d);
 801309a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 801309e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80130a2:	f7ff fc41 	bl	8012928 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80130a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80130aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80130ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d1e5      	bne.n	8013082 <dns_cb+0x292>
}
 80130b6:	bf00      	nop
 80130b8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80130bc:	46bd      	mov	sp, r7
 80130be:	bdb0      	pop	{r4, r5, r7, pc}
 80130c0:	080248d8 	.word	0x080248d8
 80130c4:	20000288 	.word	0x20000288
 80130c8:	08026e50 	.word	0x08026e50
 80130cc:	0802487c 	.word	0x0802487c
 80130d0:	080248e4 	.word	0x080248e4
 80130d4:	0801ee8b 	.word	0x0801ee8b
 80130d8:	08024900 	.word	0x08024900
 80130dc:	08024910 	.word	0x08024910
 80130e0:	08024928 	.word	0x08024928
 80130e4:	08024940 	.word	0x08024940
 80130e8:	08024950 	.word	0x08024950

080130ec <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 80130ec:	b590      	push	{r4, r7, lr}
 80130ee:	b0cb      	sub	sp, #300	@ 0x12c
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80130f6:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80130fa:	6020      	str	r0, [r4, #0]
 80130fc:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8013100:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8013104:	6001      	str	r1, [r0, #0]
 8013106:	4619      	mov	r1, r3
 8013108:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801310c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8013110:	801a      	strh	r2, [r3, #0]
 8013112:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013116:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 801311a:	460a      	mov	r2, r1
 801311c:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 801311e:	f107 0314 	add.w	r3, r7, #20
 8013122:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8013126:	2100      	movs	r1, #0
 8013128:	4618      	mov	r0, r3
 801312a:	f00d ffa9 	bl	8021080 <memset>
  pkt.header.txnid = mg_htons(txnid);
 801312e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013132:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	4618      	mov	r0, r3
 801313a:	f00c ffb6 	bl	80200aa <mg_ntohs>
 801313e:	4603      	mov	r3, r0
 8013140:	461a      	mov	r2, r3
 8013142:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013146:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801314a:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 801314c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8013150:	f00c ffab 	bl	80200aa <mg_ntohs>
 8013154:	4603      	mov	r3, r0
 8013156:	461a      	mov	r2, r3
 8013158:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801315c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013160:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8013162:	2001      	movs	r0, #1
 8013164:	f00c ffa1 	bl	80200aa <mg_ntohs>
 8013168:	4603      	mov	r3, r0
 801316a:	461a      	mov	r2, r3
 801316c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013170:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013174:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8013176:	2300      	movs	r3, #0
 8013178:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801317c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013180:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013184:	e054      	b.n	8013230 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8013186:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801318a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013196:	4413      	add	r3, r2
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2b2e      	cmp	r3, #46	@ 0x2e
 801319c:	d009      	beq.n	80131b2 <mg_dns_send+0xc6>
 801319e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80131a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d32f      	bcc.n	8013212 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 80131b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	b2d9      	uxtb	r1, r3
 80131c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80131c6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80131ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131ce:	4413      	add	r3, r2
 80131d0:	330c      	adds	r3, #12
 80131d2:	460a      	mov	r2, r1
 80131d4:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 80131d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131da:	3301      	adds	r3, #1
 80131dc:	f107 0214 	add.w	r2, r7, #20
 80131e0:	3308      	adds	r3, #8
 80131e2:	4413      	add	r3, r2
 80131e4:	1d18      	adds	r0, r3, #4
 80131e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80131ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131f6:	18d1      	adds	r1, r2, r3
 80131f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80131fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	461a      	mov	r2, r3
 8013204:	f00e f80d 	bl	8021222 <memcpy>
      n = i + 1;
 8013208:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801320c:	3301      	adds	r3, #1
 801320e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8013212:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013216:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8013222:	429a      	cmp	r2, r3
 8013224:	d209      	bcs.n	801323a <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8013226:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801322a:	3301      	adds	r3, #1
 801322c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013230:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013234:	2bfa      	cmp	r3, #250	@ 0xfa
 8013236:	d9a6      	bls.n	8013186 <mg_dns_send+0x9a>
 8013238:	e000      	b.n	801323c <mg_dns_send+0x150>
    if (i >= name->len) break;
 801323a:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 801323c:	f107 0214 	add.w	r2, r7, #20
 8013240:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013244:	3308      	adds	r3, #8
 8013246:	4413      	add	r3, r2
 8013248:	3304      	adds	r3, #4
 801324a:	2205      	movs	r2, #5
 801324c:	4916      	ldr	r1, [pc, #88]	@ (80132a8 <mg_dns_send+0x1bc>)
 801324e:	4618      	mov	r0, r3
 8013250:	f00d ffe7 	bl	8021222 <memcpy>
  n += 5;
 8013254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013258:	3305      	adds	r3, #5
 801325a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 801325e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013262:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d009      	beq.n	8013280 <mg_dns_send+0x194>
 801326c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013270:	3b03      	subs	r3, #3
 8013272:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8013276:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801327a:	4413      	add	r3, r2
 801327c:	221c      	movs	r2, #28
 801327e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8013280:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013284:	f103 020c 	add.w	r2, r3, #12
 8013288:	f107 0114 	add.w	r1, r7, #20
 801328c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8013290:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013294:	6818      	ldr	r0, [r3, #0]
 8013296:	f00b fc17 	bl	801eac8 <mg_send>
 801329a:	4603      	mov	r3, r0
}
 801329c:	4618      	mov	r0, r3
 801329e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd90      	pop	{r4, r7, pc}
 80132a6:	bf00      	nop
 80132a8:	0802495c 	.word	0x0802495c

080132ac <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 80132ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80132b0:	b088      	sub	sp, #32
 80132b2:	af02      	add	r7, sp, #8
 80132b4:	60f8      	str	r0, [r7, #12]
 80132b6:	60b9      	str	r1, [r7, #8]
 80132b8:	607a      	str	r2, [r7, #4]
 80132ba:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 80132bc:	2300      	movs	r3, #0
 80132be:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d104      	bne.n	80132d2 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 80132c8:	494d      	ldr	r1, [pc, #308]	@ (8013400 <mg_sendnsreq+0x154>)
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	f000 f90e 	bl	80134ec <mg_error>
 80132d0:	e017      	b.n	8013302 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d113      	bne.n	8013302 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	6858      	ldr	r0, [r3, #4]
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	6819      	ldr	r1, [r3, #0]
 80132e2:	2300      	movs	r3, #0
 80132e4:	2200      	movs	r2, #0
 80132e6:	f008 f92b 	bl	801b540 <mg_connect>
 80132ea:	4602      	mov	r2, r0
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d004      	beq.n	8013302 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	4a41      	ldr	r2, [pc, #260]	@ (8013404 <mg_sendnsreq+0x158>)
 80132fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d104      	bne.n	8013314 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 801330a:	493f      	ldr	r1, [pc, #252]	@ (8013408 <mg_sendnsreq+0x15c>)
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f000 f8ed 	bl	80134ec <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8013312:	e06f      	b.n	80133f4 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8013314:	2118      	movs	r1, #24
 8013316:	2001      	movs	r0, #1
 8013318:	f7ff fae8 	bl	80128ec <mg_calloc>
 801331c:	6178      	str	r0, [r7, #20]
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d104      	bne.n	801332e <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8013324:	4939      	ldr	r1, [pc, #228]	@ (801340c <mg_sendnsreq+0x160>)
 8013326:	68f8      	ldr	r0, [r7, #12]
 8013328:	f000 f8e0 	bl	80134ec <mg_error>
}
 801332c:	e062      	b.n	80133f4 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013334:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d004      	beq.n	8013346 <mg_sendnsreq+0x9a>
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	8a1b      	ldrh	r3, [r3, #16]
 8013340:	3301      	adds	r3, #1
 8013342:	b29a      	uxth	r2, r3
 8013344:	e000      	b.n	8013348 <mg_sendnsreq+0x9c>
 8013346:	2201      	movs	r2, #1
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	697a      	ldr	r2, [r7, #20]
 801335c:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 801335e:	f00c ff35 	bl	80201cc <mg_millis>
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	6879      	ldr	r1, [r7, #4]
 8013368:	17c8      	asrs	r0, r1, #31
 801336a:	460c      	mov	r4, r1
 801336c:	4605      	mov	r5, r0
 801336e:	eb12 0804 	adds.w	r8, r2, r4
 8013372:	eb43 0905 	adc.w	r9, r3, r5
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8013388:	f043 0308 	orr.w	r3, r3, #8
 801338c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8013390:	4b1f      	ldr	r3, [pc, #124]	@ (8013410 <mg_sendnsreq+0x164>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2b03      	cmp	r3, #3
 8013396:	dd18      	ble.n	80133ca <mg_sendnsreq+0x11e>
 8013398:	4b1e      	ldr	r3, [pc, #120]	@ (8013414 <mg_sendnsreq+0x168>)
 801339a:	f240 521e 	movw	r2, #1310	@ 0x51e
 801339e:	491e      	ldr	r1, [pc, #120]	@ (8013418 <mg_sendnsreq+0x16c>)
 80133a0:	2004      	movs	r0, #4
 80133a2:	f005 fc63 	bl	8018c6c <mg_log_prefix>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	461c      	mov	r4, r3
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	6818      	ldr	r0, [r3, #0]
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	697a      	ldr	r2, [r7, #20]
 80133ba:	8a12      	ldrh	r2, [r2, #16]
 80133bc:	9201      	str	r2, [sp, #4]
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	4603      	mov	r3, r0
 80133c2:	4622      	mov	r2, r4
 80133c4:	4815      	ldr	r0, [pc, #84]	@ (801341c <mg_sendnsreq+0x170>)
 80133c6:	f005 fca1 	bl	8018d0c <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	6858      	ldr	r0, [r3, #4]
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	8a1a      	ldrh	r2, [r3, #16]
 80133d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80133d6:	68b9      	ldr	r1, [r7, #8]
 80133d8:	f7ff fe88 	bl	80130ec <mg_dns_send>
 80133dc:	4603      	mov	r3, r0
 80133de:	f083 0301 	eor.w	r3, r3, #1
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d005      	beq.n	80133f4 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	490c      	ldr	r1, [pc, #48]	@ (8013420 <mg_sendnsreq+0x174>)
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 f87c 	bl	80134ec <mg_error>
}
 80133f4:	bf00      	nop
 80133f6:	3718      	adds	r7, #24
 80133f8:	46bd      	mov	sp, r7
 80133fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80133fe:	bf00      	nop
 8013400:	08024964 	.word	0x08024964
 8013404:	08012df1 	.word	0x08012df1
 8013408:	08024990 	.word	0x08024990
 801340c:	0802499c 	.word	0x0802499c
 8013410:	20000288 	.word	0x20000288
 8013414:	08026e58 	.word	0x08026e58
 8013418:	0802487c 	.word	0x0802487c
 801341c:	080249a8 	.word	0x080249a8
 8013420:	080249cc 	.word	0x080249cc

08013424 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8013424:	b580      	push	{r7, lr}
 8013426:	b088      	sub	sp, #32
 8013428:	af02      	add	r7, sp, #8
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 801342e:	f107 030c 	add.w	r3, r7, #12
 8013432:	6839      	ldr	r1, [r7, #0]
 8013434:	4618      	mov	r0, r3
 8013436:	f00c fd08 	bl	801fe4a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 801343a:	6838      	ldr	r0, [r7, #0]
 801343c:	f00c fd38 	bl	801feb0 <mg_url_port>
 8013440:	4603      	mov	r3, r0
 8013442:	4618      	mov	r0, r3
 8013444:	f00c fe31 	bl	80200aa <mg_ntohs>
 8013448:	4603      	mov	r3, r0
 801344a:	461a      	mov	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	331c      	adds	r3, #28
 8013454:	461a      	mov	r2, r3
 8013456:	f107 030c 	add.w	r3, r7, #12
 801345a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801345e:	f007 ffa0 	bl	801b3a2 <mg_aton>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d003      	beq.n	8013470 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f00b f857 	bl	801e51c <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 801346e:	e019      	b.n	80134a4 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	7e1b      	ldrb	r3, [r3, #24]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d003      	beq.n	8013482 <mg_resolve+0x5e>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	330c      	adds	r3, #12
 8013480:	e002      	b.n	8013488 <mg_resolve+0x64>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	3304      	adds	r3, #4
 8013488:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	695a      	ldr	r2, [r3, #20]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	7e1b      	ldrb	r3, [r3, #24]
 8013496:	f107 010c 	add.w	r1, r7, #12
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7ff ff04 	bl	80132ac <mg_sendnsreq>
}
 80134a4:	bf00      	nop
 80134a6:	3718      	adds	r7, #24
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d006      	beq.n	80134d0 <mg_call+0x24>
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	68b9      	ldr	r1, [r7, #8]
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d005      	beq.n	80134e4 <mg_call+0x38>
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80134dc:	687a      	ldr	r2, [r7, #4]
 80134de:	68b9      	ldr	r1, [r7, #8]
 80134e0:	68f8      	ldr	r0, [r7, #12]
 80134e2:	4798      	blx	r3
}
 80134e4:	bf00      	nop
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80134ec:	b40e      	push	{r1, r2, r3}
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b095      	sub	sp, #84	@ 0x54
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80134f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80134fa:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80134fc:	f107 030c 	add.w	r3, r7, #12
 8013500:	f107 0010 	add.w	r0, r7, #16
 8013504:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013506:	2140      	movs	r1, #64	@ 0x40
 8013508:	f00b fba4 	bl	801ec54 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 801350c:	4b14      	ldr	r3, [pc, #80]	@ (8013560 <mg_error+0x74>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	dd0f      	ble.n	8013534 <mg_error+0x48>
 8013514:	4b13      	ldr	r3, [pc, #76]	@ (8013564 <mg_error+0x78>)
 8013516:	f240 5253 	movw	r2, #1363	@ 0x553
 801351a:	4913      	ldr	r1, [pc, #76]	@ (8013568 <mg_error+0x7c>)
 801351c:	2001      	movs	r0, #1
 801351e:	f005 fba5 	bl	8018c6c <mg_log_prefix>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801352a:	f107 0310 	add.w	r3, r7, #16
 801352e:	480f      	ldr	r0, [pc, #60]	@ (801356c <mg_error+0x80>)
 8013530:	f005 fbec 	bl	8018d0c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801353a:	f043 0320 	orr.w	r3, r3, #32
 801353e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8013542:	f107 0310 	add.w	r3, r7, #16
 8013546:	461a      	mov	r2, r3
 8013548:	2100      	movs	r1, #0
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff ffae 	bl	80134ac <mg_call>
}
 8013550:	bf00      	nop
 8013552:	3754      	adds	r7, #84	@ 0x54
 8013554:	46bd      	mov	sp, r7
 8013556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801355a:	b003      	add	sp, #12
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop
 8013560:	20000288 	.word	0x20000288
 8013564:	08026e68 	.word	0x08026e68
 8013568:	0802487c 	.word	0x0802487c
 801356c:	080249d8 	.word	0x080249d8

08013570 <is_digit>:
#endif




static bool is_digit(int c) {
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b2f      	cmp	r3, #47	@ 0x2f
 801357c:	dd04      	ble.n	8013588 <is_digit+0x18>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2b39      	cmp	r3, #57	@ 0x39
 8013582:	dc01      	bgt.n	8013588 <is_digit+0x18>
 8013584:	2301      	movs	r3, #1
 8013586:	e000      	b.n	801358a <is_digit+0x1a>
 8013588:	2300      	movs	r3, #0
 801358a:	f003 0301 	and.w	r3, r3, #1
 801358e:	b2db      	uxtb	r3, r3
}
 8013590:	4618      	mov	r0, r3
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <addexp>:

static int addexp(char *buf, int e, int sign) {
 801359c:	b480      	push	{r7}
 801359e:	b087      	sub	sp, #28
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
  int n = 0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	617a      	str	r2, [r7, #20]
 80135b2:	461a      	mov	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	4413      	add	r3, r2
 80135b8:	2265      	movs	r2, #101	@ 0x65
 80135ba:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	617a      	str	r2, [r7, #20]
 80135c2:	461a      	mov	r2, r3
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	4413      	add	r3, r2
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	b2d2      	uxtb	r2, r2
 80135cc:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80135d4:	dd01      	ble.n	80135da <addexp+0x3e>
 80135d6:	2300      	movs	r3, #0
 80135d8:	e057      	b.n	801368a <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2b09      	cmp	r3, #9
 80135de:	dc07      	bgt.n	80135f0 <addexp+0x54>
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	1c5a      	adds	r2, r3, #1
 80135e4:	617a      	str	r2, [r7, #20]
 80135e6:	461a      	mov	r2, r3
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4413      	add	r3, r2
 80135ec:	2230      	movs	r2, #48	@ 0x30
 80135ee:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	2b63      	cmp	r3, #99	@ 0x63
 80135f4:	dd1c      	ble.n	8013630 <addexp+0x94>
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	4a27      	ldr	r2, [pc, #156]	@ (8013698 <addexp+0xfc>)
 80135fa:	fb82 1203 	smull	r1, r2, r2, r3
 80135fe:	1152      	asrs	r2, r2, #5
 8013600:	17db      	asrs	r3, r3, #31
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	b2da      	uxtb	r2, r3
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	1c59      	adds	r1, r3, #1
 801360a:	6179      	str	r1, [r7, #20]
 801360c:	4619      	mov	r1, r3
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	440b      	add	r3, r1
 8013612:	3230      	adds	r2, #48	@ 0x30
 8013614:	b2d2      	uxtb	r2, r2
 8013616:	701a      	strb	r2, [r3, #0]
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	4a1f      	ldr	r2, [pc, #124]	@ (8013698 <addexp+0xfc>)
 801361c:	fb82 1203 	smull	r1, r2, r2, r3
 8013620:	1151      	asrs	r1, r2, #5
 8013622:	17da      	asrs	r2, r3, #31
 8013624:	1a8a      	subs	r2, r1, r2
 8013626:	2164      	movs	r1, #100	@ 0x64
 8013628:	fb01 f202 	mul.w	r2, r1, r2
 801362c:	1a9b      	subs	r3, r3, r2
 801362e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b09      	cmp	r3, #9
 8013634:	dd1d      	ble.n	8013672 <addexp+0xd6>
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	4a18      	ldr	r2, [pc, #96]	@ (801369c <addexp+0x100>)
 801363a:	fb82 1203 	smull	r1, r2, r2, r3
 801363e:	1092      	asrs	r2, r2, #2
 8013640:	17db      	asrs	r3, r3, #31
 8013642:	1ad3      	subs	r3, r2, r3
 8013644:	b2da      	uxtb	r2, r3
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	1c59      	adds	r1, r3, #1
 801364a:	6179      	str	r1, [r7, #20]
 801364c:	4619      	mov	r1, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	440b      	add	r3, r1
 8013652:	3230      	adds	r2, #48	@ 0x30
 8013654:	b2d2      	uxtb	r2, r2
 8013656:	701a      	strb	r2, [r3, #0]
 8013658:	68ba      	ldr	r2, [r7, #8]
 801365a:	4b10      	ldr	r3, [pc, #64]	@ (801369c <addexp+0x100>)
 801365c:	fb83 1302 	smull	r1, r3, r3, r2
 8013660:	1099      	asrs	r1, r3, #2
 8013662:	17d3      	asrs	r3, r2, #31
 8013664:	1ac9      	subs	r1, r1, r3
 8013666:	460b      	mov	r3, r1
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	440b      	add	r3, r1
 801366c:	005b      	lsls	r3, r3, #1
 801366e:	1ad3      	subs	r3, r2, r3
 8013670:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	b2da      	uxtb	r2, r3
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	1c59      	adds	r1, r3, #1
 801367a:	6179      	str	r1, [r7, #20]
 801367c:	4619      	mov	r1, r3
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	440b      	add	r3, r1
 8013682:	3230      	adds	r2, #48	@ 0x30
 8013684:	b2d2      	uxtb	r2, r2
 8013686:	701a      	strb	r2, [r3, #0]
  return n;
 8013688:	697b      	ldr	r3, [r7, #20]
}
 801368a:	4618      	mov	r0, r3
 801368c:	371c      	adds	r7, #28
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop
 8013698:	51eb851f 	.word	0x51eb851f
 801369c:	66666667 	.word	0x66666667

080136a0 <xisinf>:

static int xisinf(double x) {
 80136a0:	b480      	push	{r7}
 80136a2:	b085      	sub	sp, #20
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80136aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80136b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80136b6:	f04f 0200 	mov.w	r2, #0
 80136ba:	f04f 0300 	mov.w	r3, #0
 80136be:	000a      	movs	r2, r1
 80136c0:	2300      	movs	r3, #0
 80136c2:	4613      	mov	r3, r2
 80136c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80136c8:	4a08      	ldr	r2, [pc, #32]	@ (80136ec <xisinf+0x4c>)
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d106      	bne.n	80136dc <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80136ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80136d2:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <xisinf+0x3c>
 80136d8:	2301      	movs	r3, #1
 80136da:	e000      	b.n	80136de <xisinf+0x3e>
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3714      	adds	r7, #20
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	7ff00000 	.word	0x7ff00000

080136f0 <xisnan>:

static int xisnan(double x) {
 80136f0:	b480      	push	{r7}
 80136f2:	b085      	sub	sp, #20
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80136fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8013702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013706:	f04f 0200 	mov.w	r2, #0
 801370a:	f04f 0300 	mov.w	r3, #0
 801370e:	000a      	movs	r2, r1
 8013710:	2300      	movs	r3, #0
 8013712:	4613      	mov	r3, r2
 8013714:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8013718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801371c:	4613      	mov	r3, r2
 801371e:	2b00      	cmp	r3, #0
 8013720:	bf14      	ite	ne
 8013722:	2301      	movne	r3, #1
 8013724:	2300      	moveq	r3, #0
 8013726:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8013728:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 801372a:	4a06      	ldr	r2, [pc, #24]	@ (8013744 <xisnan+0x54>)
 801372c:	4293      	cmp	r3, r2
 801372e:	bf8c      	ite	hi
 8013730:	2301      	movhi	r3, #1
 8013732:	2300      	movls	r3, #0
 8013734:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8013736:	4618      	mov	r0, r3
 8013738:	3714      	adds	r7, #20
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	7ff00000 	.word	0x7ff00000

08013748 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8013748:	b5b0      	push	{r4, r5, r7, lr}
 801374a:	b09e      	sub	sp, #120	@ 0x78
 801374c:	af02      	add	r7, sp, #8
 801374e:	6178      	str	r0, [r7, #20]
 8013750:	6139      	str	r1, [r7, #16]
 8013752:	ed87 0b02 	vstr	d0, [r7, #8]
 8013756:	607a      	str	r2, [r7, #4]
 8013758:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 801375a:	2300      	movs	r3, #0
 801375c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801375e:	2300      	movs	r3, #0
 8013760:	667b      	str	r3, [r7, #100]	@ 0x64
 8013762:	2300      	movs	r3, #0
 8013764:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8013766:	f04f 0200 	mov.w	r2, #0
 801376a:	f04f 0300 	mov.w	r3, #0
 801376e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013772:	f7ed f9bb 	bl	8000aec <__aeabi_dcmpeq>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d007      	beq.n	801378c <mg_dtoa+0x44>
 801377c:	4b7f      	ldr	r3, [pc, #508]	@ (801397c <mg_dtoa+0x234>)
 801377e:	4a80      	ldr	r2, [pc, #512]	@ (8013980 <mg_dtoa+0x238>)
 8013780:	6939      	ldr	r1, [r7, #16]
 8013782:	6978      	ldr	r0, [r7, #20]
 8013784:	f00b fa8e 	bl	801eca4 <mg_snprintf>
 8013788:	4603      	mov	r3, r0
 801378a:	e2c9      	b.n	8013d20 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 801378c:	ed97 0b02 	vldr	d0, [r7, #8]
 8013790:	f7ff ff86 	bl	80136a0 <xisinf>
 8013794:	4603      	mov	r3, r0
 8013796:	2b00      	cmp	r3, #0
 8013798:	d014      	beq.n	80137c4 <mg_dtoa+0x7c>
 801379a:	f04f 0200 	mov.w	r2, #0
 801379e:	f04f 0300 	mov.w	r3, #0
 80137a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80137a6:	f7ed f9c9 	bl	8000b3c <__aeabi_dcmpgt>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d001      	beq.n	80137b4 <mg_dtoa+0x6c>
 80137b0:	4b74      	ldr	r3, [pc, #464]	@ (8013984 <mg_dtoa+0x23c>)
 80137b2:	e000      	b.n	80137b6 <mg_dtoa+0x6e>
 80137b4:	4b74      	ldr	r3, [pc, #464]	@ (8013988 <mg_dtoa+0x240>)
 80137b6:	4a72      	ldr	r2, [pc, #456]	@ (8013980 <mg_dtoa+0x238>)
 80137b8:	6939      	ldr	r1, [r7, #16]
 80137ba:	6978      	ldr	r0, [r7, #20]
 80137bc:	f00b fa72 	bl	801eca4 <mg_snprintf>
 80137c0:	4603      	mov	r3, r0
 80137c2:	e2ad      	b.n	8013d20 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80137c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80137c8:	f7ff ff92 	bl	80136f0 <xisnan>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d007      	beq.n	80137e2 <mg_dtoa+0x9a>
 80137d2:	4b6e      	ldr	r3, [pc, #440]	@ (801398c <mg_dtoa+0x244>)
 80137d4:	4a6a      	ldr	r2, [pc, #424]	@ (8013980 <mg_dtoa+0x238>)
 80137d6:	6939      	ldr	r1, [r7, #16]
 80137d8:	6978      	ldr	r0, [r7, #20]
 80137da:	f00b fa63 	bl	801eca4 <mg_snprintf>
 80137de:	4603      	mov	r3, r0
 80137e0:	e29e      	b.n	8013d20 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80137e2:	f04f 0200 	mov.w	r2, #0
 80137e6:	f04f 0300 	mov.w	r3, #0
 80137ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80137ee:	f7ed f987 	bl	8000b00 <__aeabi_dcmplt>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d00d      	beq.n	8013814 <mg_dtoa+0xcc>
 80137f8:	68bc      	ldr	r4, [r7, #8]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8013800:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8013804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013806:	1c5a      	adds	r2, r3, #1
 8013808:	66ba      	str	r2, [r7, #104]	@ 0x68
 801380a:	3370      	adds	r3, #112	@ 0x70
 801380c:	443b      	add	r3, r7
 801380e:	222d      	movs	r2, #45	@ 0x2d
 8013810:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8013814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013818:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 801381c:	f04f 0200 	mov.w	r2, #0
 8013820:	4b5b      	ldr	r3, [pc, #364]	@ (8013990 <mg_dtoa+0x248>)
 8013822:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8013826:	e00a      	b.n	801383e <mg_dtoa+0xf6>
 8013828:	f04f 0200 	mov.w	r2, #0
 801382c:	4b59      	ldr	r3, [pc, #356]	@ (8013994 <mg_dtoa+0x24c>)
 801382e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8013832:	f7ec fef3 	bl	800061c <__aeabi_dmul>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801383e:	f04f 0200 	mov.w	r2, #0
 8013842:	4b54      	ldr	r3, [pc, #336]	@ (8013994 <mg_dtoa+0x24c>)
 8013844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013848:	f7ed f96e 	bl	8000b28 <__aeabi_dcmpge>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d011      	beq.n	8013876 <mg_dtoa+0x12e>
 8013852:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013856:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801385a:	f7ed f809 	bl	8000870 <__aeabi_ddiv>
 801385e:	4602      	mov	r2, r0
 8013860:	460b      	mov	r3, r1
 8013862:	4610      	mov	r0, r2
 8013864:	4619      	mov	r1, r3
 8013866:	f04f 0200 	mov.w	r2, #0
 801386a:	4b4a      	ldr	r3, [pc, #296]	@ (8013994 <mg_dtoa+0x24c>)
 801386c:	f7ed f95c 	bl	8000b28 <__aeabi_dcmpge>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d1d8      	bne.n	8013828 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8013876:	e00a      	b.n	801388e <mg_dtoa+0x146>
 8013878:	f04f 0200 	mov.w	r2, #0
 801387c:	4b45      	ldr	r3, [pc, #276]	@ (8013994 <mg_dtoa+0x24c>)
 801387e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8013882:	f7ec fff5 	bl	8000870 <__aeabi_ddiv>
 8013886:	4602      	mov	r2, r0
 8013888:	460b      	mov	r3, r1
 801388a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801388e:	f04f 0200 	mov.w	r2, #0
 8013892:	4b3f      	ldr	r3, [pc, #252]	@ (8013990 <mg_dtoa+0x248>)
 8013894:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013898:	f7ed f93c 	bl	8000b14 <__aeabi_dcmple>
 801389c:	4603      	mov	r3, r0
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d011      	beq.n	80138c6 <mg_dtoa+0x17e>
 80138a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80138a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80138aa:	f7ec ffe1 	bl	8000870 <__aeabi_ddiv>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	4610      	mov	r0, r2
 80138b4:	4619      	mov	r1, r3
 80138b6:	f04f 0200 	mov.w	r2, #0
 80138ba:	4b35      	ldr	r3, [pc, #212]	@ (8013990 <mg_dtoa+0x248>)
 80138bc:	f7ed f92a 	bl	8000b14 <__aeabi_dcmple>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1d8      	bne.n	8013878 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80138c6:	2300      	movs	r3, #0
 80138c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80138ca:	f04f 0200 	mov.w	r2, #0
 80138ce:	4b32      	ldr	r3, [pc, #200]	@ (8013998 <mg_dtoa+0x250>)
 80138d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80138d4:	f7ec fea2 	bl	800061c <__aeabi_dmul>
 80138d8:	4602      	mov	r2, r0
 80138da:	460b      	mov	r3, r1
 80138dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80138e0:	e00d      	b.n	80138fe <mg_dtoa+0x1b6>
 80138e2:	f04f 0200 	mov.w	r2, #0
 80138e6:	4b2b      	ldr	r3, [pc, #172]	@ (8013994 <mg_dtoa+0x24c>)
 80138e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80138ec:	f7ec ffc0 	bl	8000870 <__aeabi_ddiv>
 80138f0:	4602      	mov	r2, r0
 80138f2:	460b      	mov	r3, r1
 80138f4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80138f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138fa:	3301      	adds	r3, #1
 80138fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80138fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	429a      	cmp	r2, r3
 8013904:	dbed      	blt.n	80138e2 <mg_dtoa+0x19a>
  d += t;
 8013906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801390a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801390e:	f7ec fccf 	bl	80002b0 <__adddf3>
 8013912:	4602      	mov	r2, r0
 8013914:	460b      	mov	r3, r1
 8013916:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 801391a:	f04f 0200 	mov.w	r2, #0
 801391e:	4b1c      	ldr	r3, [pc, #112]	@ (8013990 <mg_dtoa+0x248>)
 8013920:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8013924:	e00d      	b.n	8013942 <mg_dtoa+0x1fa>
 8013926:	f04f 0200 	mov.w	r2, #0
 801392a:	4b1a      	ldr	r3, [pc, #104]	@ (8013994 <mg_dtoa+0x24c>)
 801392c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8013930:	f7ec fe74 	bl	800061c <__aeabi_dmul>
 8013934:	4602      	mov	r2, r0
 8013936:	460b      	mov	r3, r1
 8013938:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 801393c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801393e:	3301      	adds	r3, #1
 8013940:	663b      	str	r3, [r7, #96]	@ 0x60
 8013942:	f04f 0200 	mov.w	r2, #0
 8013946:	4b13      	ldr	r3, [pc, #76]	@ (8013994 <mg_dtoa+0x24c>)
 8013948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801394c:	f7ed f8ec 	bl	8000b28 <__aeabi_dcmpge>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d011      	beq.n	801397a <mg_dtoa+0x232>
 8013956:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801395a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801395e:	f7ec ff87 	bl	8000870 <__aeabi_ddiv>
 8013962:	4602      	mov	r2, r0
 8013964:	460b      	mov	r3, r1
 8013966:	4610      	mov	r0, r2
 8013968:	4619      	mov	r1, r3
 801396a:	f04f 0200 	mov.w	r2, #0
 801396e:	4b09      	ldr	r3, [pc, #36]	@ (8013994 <mg_dtoa+0x24c>)
 8013970:	f7ed f8da 	bl	8000b28 <__aeabi_dcmpge>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1d5      	bne.n	8013926 <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 801397a:	e01d      	b.n	80139b8 <mg_dtoa+0x270>
 801397c:	080249e4 	.word	0x080249e4
 8013980:	080249e8 	.word	0x080249e8
 8013984:	080249ec 	.word	0x080249ec
 8013988:	080249f0 	.word	0x080249f0
 801398c:	080249f8 	.word	0x080249f8
 8013990:	3ff00000 	.word	0x3ff00000
 8013994:	40240000 	.word	0x40240000
 8013998:	40140000 	.word	0x40140000
 801399c:	f04f 0200 	mov.w	r2, #0
 80139a0:	4b9d      	ldr	r3, [pc, #628]	@ (8013c18 <mg_dtoa+0x4d0>)
 80139a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80139a6:	f7ec ff63 	bl	8000870 <__aeabi_ddiv>
 80139aa:	4602      	mov	r2, r0
 80139ac:	460b      	mov	r3, r1
 80139ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80139b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80139b4:	3b01      	subs	r3, #1
 80139b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80139b8:	f04f 0200 	mov.w	r2, #0
 80139bc:	4b97      	ldr	r3, [pc, #604]	@ (8013c1c <mg_dtoa+0x4d4>)
 80139be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80139c2:	f7ed f89d 	bl	8000b00 <__aeabi_dcmplt>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d011      	beq.n	80139f0 <mg_dtoa+0x2a8>
 80139cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80139d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80139d4:	f7ec ff4c 	bl	8000870 <__aeabi_ddiv>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4610      	mov	r0, r2
 80139de:	4619      	mov	r1, r3
 80139e0:	f04f 0200 	mov.w	r2, #0
 80139e4:	4b8d      	ldr	r3, [pc, #564]	@ (8013c1c <mg_dtoa+0x4d4>)
 80139e6:	f7ed f88b 	bl	8000b00 <__aeabi_dcmplt>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1d5      	bne.n	801399c <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 80139f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	db33      	blt.n	8013a60 <mg_dtoa+0x318>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	dd30      	ble.n	8013a60 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80139fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013a02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8013a06:	f7ec ff33 	bl	8000870 <__aeabi_ddiv>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	ec43 2b17 	vmov	d7, r2, r3
 8013a12:	78fb      	ldrb	r3, [r7, #3]
 8013a14:	f107 0018 	add.w	r0, r7, #24
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8013a1e:	eef0 0a67 	vmov.f32	s1, s15
 8013a22:	2128      	movs	r1, #40	@ 0x28
 8013a24:	f7ff fe90 	bl	8013748 <mg_dtoa>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8013a2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a30:	4413      	add	r3, r2
 8013a32:	f107 0218 	add.w	r2, r7, #24
 8013a36:	4413      	add	r3, r2
 8013a38:	222b      	movs	r2, #43	@ 0x2b
 8013a3a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7ff fdad 	bl	801359c <addexp>
 8013a42:	4602      	mov	r2, r0
 8013a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a46:	4413      	add	r3, r2
 8013a48:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8013a4a:	f107 0318 	add.w	r3, r7, #24
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a52:	4a73      	ldr	r2, [pc, #460]	@ (8013c20 <mg_dtoa+0x4d8>)
 8013a54:	6939      	ldr	r1, [r7, #16]
 8013a56:	6978      	ldr	r0, [r7, #20]
 8013a58:	f00b f924 	bl	801eca4 <mg_snprintf>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	e15f      	b.n	8013d20 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	425b      	negs	r3, r3
 8013a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013a66:	429a      	cmp	r2, r3
 8013a68:	dc34      	bgt.n	8013ad4 <mg_dtoa+0x38c>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	dd31      	ble.n	8013ad4 <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8013a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013a74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8013a78:	f7ec fefa 	bl	8000870 <__aeabi_ddiv>
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	460b      	mov	r3, r1
 8013a80:	ec43 2b17 	vmov	d7, r2, r3
 8013a84:	78fb      	ldrb	r3, [r7, #3]
 8013a86:	f107 0018 	add.w	r0, r7, #24
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8013a90:	eef0 0a67 	vmov.f32	s1, s15
 8013a94:	2128      	movs	r1, #40	@ 0x28
 8013a96:	f7ff fe57 	bl	8013748 <mg_dtoa>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8013a9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f107 0218 	add.w	r2, r7, #24
 8013aa8:	18d0      	adds	r0, r2, r3
 8013aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013aac:	425b      	negs	r3, r3
 8013aae:	222d      	movs	r2, #45	@ 0x2d
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	f7ff fd73 	bl	801359c <addexp>
 8013ab6:	4602      	mov	r2, r0
 8013ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013aba:	4413      	add	r3, r2
 8013abc:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8013abe:	f107 0318 	add.w	r3, r7, #24
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ac6:	4a56      	ldr	r2, [pc, #344]	@ (8013c20 <mg_dtoa+0x4d8>)
 8013ac8:	6939      	ldr	r1, [r7, #16]
 8013aca:	6978      	ldr	r0, [r7, #20]
 8013acc:	f00b f8ea 	bl	801eca4 <mg_snprintf>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	e125      	b.n	8013d20 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013adc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8013ae0:	e03f      	b.n	8013b62 <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8013ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013aea:	f7ec fec1 	bl	8000870 <__aeabi_ddiv>
 8013aee:	4602      	mov	r2, r0
 8013af0:	460b      	mov	r3, r1
 8013af2:	4610      	mov	r0, r2
 8013af4:	4619      	mov	r1, r3
 8013af6:	f7ed f82b 	bl	8000b50 <__aeabi_d2iz>
 8013afa:	4603      	mov	r3, r0
 8013afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8013afe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	dc02      	bgt.n	8013b0a <mg_dtoa+0x3c2>
 8013b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	dd0c      	ble.n	8013b24 <mg_dtoa+0x3dc>
 8013b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b0c:	b2da      	uxtb	r2, r3
 8013b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b10:	1c59      	adds	r1, r3, #1
 8013b12:	6679      	str	r1, [r7, #100]	@ 0x64
 8013b14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013b16:	440b      	add	r3, r1
 8013b18:	3230      	adds	r2, #48	@ 0x30
 8013b1a:	b2d2      	uxtb	r2, r2
 8013b1c:	3370      	adds	r3, #112	@ 0x70
 8013b1e:	443b      	add	r3, r7
 8013b20:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8013b24:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013b26:	f7ec fd0f 	bl	8000548 <__aeabi_i2d>
 8013b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013b2e:	f7ec fd75 	bl	800061c <__aeabi_dmul>
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013b3a:	f7ec fbb7 	bl	80002ac <__aeabi_dsub>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	460b      	mov	r3, r1
 8013b42:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8013b46:	f04f 0200 	mov.w	r2, #0
 8013b4a:	4b33      	ldr	r3, [pc, #204]	@ (8013c18 <mg_dtoa+0x4d0>)
 8013b4c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013b50:	f7ec fe8e 	bl	8000870 <__aeabi_ddiv>
 8013b54:	4602      	mov	r2, r0
 8013b56:	460b      	mov	r3, r1
 8013b58:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8013b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b5e:	3301      	adds	r3, #1
 8013b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013b62:	f04f 0200 	mov.w	r2, #0
 8013b66:	4b2d      	ldr	r3, [pc, #180]	@ (8013c1c <mg_dtoa+0x4d4>)
 8013b68:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013b6c:	f7ec ffdc 	bl	8000b28 <__aeabi_dcmpge>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d004      	beq.n	8013b80 <mg_dtoa+0x438>
 8013b76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b7a:	4413      	add	r3, r2
 8013b7c:	2b27      	cmp	r3, #39	@ 0x27
 8013b7e:	ddb0      	ble.n	8013ae2 <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8013b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d11b      	bne.n	8013bbe <mg_dtoa+0x476>
 8013b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013b88:	1c5a      	adds	r2, r3, #1
 8013b8a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8013b8c:	3370      	adds	r3, #112	@ 0x70
 8013b8e:	443b      	add	r3, r7
 8013b90:	2230      	movs	r2, #48	@ 0x30
 8013b92:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8013b96:	e012      	b.n	8013bbe <mg_dtoa+0x476>
 8013b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b9a:	1c5a      	adds	r2, r3, #1
 8013b9c:	667a      	str	r2, [r7, #100]	@ 0x64
 8013b9e:	3370      	adds	r3, #112	@ 0x70
 8013ba0:	443b      	add	r3, r7
 8013ba2:	2230      	movs	r2, #48	@ 0x30
 8013ba4:	f803 2c58 	strb.w	r2, [r3, #-88]
 8013ba8:	f04f 0200 	mov.w	r2, #0
 8013bac:	4b1a      	ldr	r3, [pc, #104]	@ (8013c18 <mg_dtoa+0x4d0>)
 8013bae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013bb2:	f7ec fe5d 	bl	8000870 <__aeabi_ddiv>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	460b      	mov	r3, r1
 8013bba:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8013bbe:	f04f 0200 	mov.w	r2, #0
 8013bc2:	4b16      	ldr	r3, [pc, #88]	@ (8013c1c <mg_dtoa+0x4d4>)
 8013bc4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013bc8:	f7ec ffae 	bl	8000b28 <__aeabi_dcmpge>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d004      	beq.n	8013bdc <mg_dtoa+0x494>
 8013bd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013bd6:	4413      	add	r3, r2
 8013bd8:	2b27      	cmp	r3, #39	@ 0x27
 8013bda:	dddd      	ble.n	8013b98 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8013bdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013be0:	4413      	add	r3, r2
 8013be2:	2b27      	cmp	r3, #39	@ 0x27
 8013be4:	dc09      	bgt.n	8013bfa <mg_dtoa+0x4b2>
 8013be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013be8:	1c5a      	adds	r2, r3, #1
 8013bea:	66ba      	str	r2, [r7, #104]	@ 0x68
 8013bec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013bee:	4413      	add	r3, r2
 8013bf0:	3370      	adds	r3, #112	@ 0x70
 8013bf2:	443b      	add	r3, r7
 8013bf4:	222e      	movs	r2, #46	@ 0x2e
 8013bf6:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013bfe:	a304      	add	r3, pc, #16	@ (adr r3, 8013c10 <mg_dtoa+0x4c8>)
 8013c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c04:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8013c08:	e046      	b.n	8013c98 <mg_dtoa+0x550>
 8013c0a:	bf00      	nop
 8013c0c:	f3af 8000 	nop.w
 8013c10:	9999999a 	.word	0x9999999a
 8013c14:	3fb99999 	.word	0x3fb99999
 8013c18:	40240000 	.word	0x40240000
 8013c1c:	3ff00000 	.word	0x3ff00000
 8013c20:	080249fc 	.word	0x080249fc
      int ch = (int) (d / t);
 8013c24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013c28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013c2c:	f7ec fe20 	bl	8000870 <__aeabi_ddiv>
 8013c30:	4602      	mov	r2, r0
 8013c32:	460b      	mov	r3, r1
 8013c34:	4610      	mov	r0, r2
 8013c36:	4619      	mov	r1, r3
 8013c38:	f7ec ff8a 	bl	8000b50 <__aeabi_d2iz>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8013c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c42:	b2da      	uxtb	r2, r3
 8013c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c46:	1c59      	adds	r1, r3, #1
 8013c48:	6679      	str	r1, [r7, #100]	@ 0x64
 8013c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013c4c:	440b      	add	r3, r1
 8013c4e:	3230      	adds	r2, #48	@ 0x30
 8013c50:	b2d2      	uxtb	r2, r2
 8013c52:	3370      	adds	r3, #112	@ 0x70
 8013c54:	443b      	add	r3, r7
 8013c56:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8013c5a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8013c5c:	f7ec fc74 	bl	8000548 <__aeabi_i2d>
 8013c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013c64:	f7ec fcda 	bl	800061c <__aeabi_dmul>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013c70:	f7ec fb1c 	bl	80002ac <__aeabi_dsub>
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8013c7c:	f04f 0200 	mov.w	r2, #0
 8013c80:	4b29      	ldr	r3, [pc, #164]	@ (8013d28 <mg_dtoa+0x5e0>)
 8013c82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013c86:	f7ec fdf3 	bl	8000870 <__aeabi_ddiv>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8013c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c94:	3301      	adds	r3, #1
 8013c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013c98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c9c:	4413      	add	r3, r2
 8013c9e:	2b27      	cmp	r3, #39	@ 0x27
 8013ca0:	dc07      	bgt.n	8013cb2 <mg_dtoa+0x56a>
 8013ca2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	dbbc      	blt.n	8013c24 <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8013caa:	e002      	b.n	8013cb2 <mg_dtoa+0x56a>
 8013cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8013cb2:	78fb      	ldrb	r3, [r7, #3]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00c      	beq.n	8013cd2 <mg_dtoa+0x58a>
 8013cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	dd09      	ble.n	8013cd2 <mg_dtoa+0x58a>
 8013cbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cc2:	4413      	add	r3, r2
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	3370      	adds	r3, #112	@ 0x70
 8013cc8:	443b      	add	r3, r7
 8013cca:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8013cce:	2b30      	cmp	r3, #48	@ 0x30
 8013cd0:	d0ec      	beq.n	8013cac <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8013cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	dd0c      	ble.n	8013cf2 <mg_dtoa+0x5aa>
 8013cd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cdc:	4413      	add	r3, r2
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	3370      	adds	r3, #112	@ 0x70
 8013ce2:	443b      	add	r3, r7
 8013ce4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8013ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cea:	d102      	bne.n	8013cf2 <mg_dtoa+0x5aa>
 8013cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8013cf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cf6:	4413      	add	r3, r2
 8013cf8:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8013cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cfc:	2b27      	cmp	r3, #39	@ 0x27
 8013cfe:	dd01      	ble.n	8013d04 <mg_dtoa+0x5bc>
 8013d00:	2327      	movs	r3, #39	@ 0x27
 8013d02:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8013d04:	f107 0218 	add.w	r2, r7, #24
 8013d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d0a:	4413      	add	r3, r2
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8013d10:	f107 0318 	add.w	r3, r7, #24
 8013d14:	4a05      	ldr	r2, [pc, #20]	@ (8013d2c <mg_dtoa+0x5e4>)
 8013d16:	6939      	ldr	r1, [r7, #16]
 8013d18:	6978      	ldr	r0, [r7, #20]
 8013d1a:	f00a ffc3 	bl	801eca4 <mg_snprintf>
 8013d1e:	4603      	mov	r3, r0
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3770      	adds	r7, #112	@ 0x70
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bdb0      	pop	{r4, r5, r7, pc}
 8013d28:	40240000 	.word	0x40240000
 8013d2c:	080249e8 	.word	0x080249e8

08013d30 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8013d30:	b5b0      	push	{r4, r5, r7, lr}
 8013d32:	b08c      	sub	sp, #48	@ 0x30
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8013d3c:	4b53      	ldr	r3, [pc, #332]	@ (8013e8c <mg_lld+0x15c>)
 8013d3e:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8013d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8013d4c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d012      	beq.n	8013d7a <mg_lld+0x4a>
 8013d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	da0e      	bge.n	8013d7a <mg_lld+0x4a>
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d5e:	1c5a      	adds	r2, r3, #1
 8013d60:	627a      	str	r2, [r7, #36]	@ 0x24
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	4413      	add	r3, r2
 8013d66:	222d      	movs	r2, #45	@ 0x2d
 8013d68:	701a      	strb	r2, [r3, #0]
 8013d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d6e:	2100      	movs	r1, #0
 8013d70:	4254      	negs	r4, r2
 8013d72:	eb61 0503 	sbc.w	r5, r1, r3
 8013d76:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8013d7a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d021      	beq.n	8013dc6 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8013d82:	2300      	movs	r3, #0
 8013d84:	623b      	str	r3, [r7, #32]
 8013d86:	e019      	b.n	8013dbc <mg_lld+0x8c>
 8013d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d8a:	f003 030f 	and.w	r3, r3, #15
 8013d8e:	69ba      	ldr	r2, [r7, #24]
 8013d90:	441a      	add	r2, r3
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	1c59      	adds	r1, r3, #1
 8013d96:	6239      	str	r1, [r7, #32]
 8013d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013d9a:	440b      	add	r3, r1
 8013d9c:	68f9      	ldr	r1, [r7, #12]
 8013d9e:	440b      	add	r3, r1
 8013da0:	7812      	ldrb	r2, [r2, #0]
 8013da2:	701a      	strb	r2, [r3, #0]
 8013da4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8013da8:	f04f 0200 	mov.w	r2, #0
 8013dac:	f04f 0300 	mov.w	r3, #0
 8013db0:	0902      	lsrs	r2, r0, #4
 8013db2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8013db6:	090b      	lsrs	r3, r1, #4
 8013db8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8013dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	d1e1      	bne.n	8013d88 <mg_lld+0x58>
 8013dc4:	e025      	b.n	8013e12 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	623b      	str	r3, [r7, #32]
 8013dca:	e01e      	b.n	8013e0a <mg_lld+0xda>
 8013dcc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8013dd0:	f04f 020a 	mov.w	r2, #10
 8013dd4:	f04f 0300 	mov.w	r3, #0
 8013dd8:	f7ec ff02 	bl	8000be0 <__aeabi_uldivmod>
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	441a      	add	r2, r3
 8013de0:	6a3b      	ldr	r3, [r7, #32]
 8013de2:	1c59      	adds	r1, r3, #1
 8013de4:	6239      	str	r1, [r7, #32]
 8013de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013de8:	440b      	add	r3, r1
 8013dea:	68f9      	ldr	r1, [r7, #12]
 8013dec:	440b      	add	r3, r1
 8013dee:	7812      	ldrb	r2, [r2, #0]
 8013df0:	701a      	strb	r2, [r3, #0]
 8013df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8013df6:	f04f 020a 	mov.w	r2, #10
 8013dfa:	f04f 0300 	mov.w	r3, #0
 8013dfe:	f7ec feef 	bl	8000be0 <__aeabi_uldivmod>
 8013e02:	4602      	mov	r2, r0
 8013e04:	460b      	mov	r3, r1
 8013e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8013e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	d1dc      	bne.n	8013dcc <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8013e12:	2300      	movs	r3, #0
 8013e14:	61fb      	str	r3, [r7, #28]
 8013e16:	e022      	b.n	8013e5e <mg_lld+0x12e>
    char t = buf[s + i];
 8013e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	4413      	add	r3, r2
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8013e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e28:	6a3b      	ldr	r3, [r7, #32]
 8013e2a:	441a      	add	r2, r3
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	3b01      	subs	r3, #1
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	441a      	add	r2, r3
 8013e36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	440b      	add	r3, r1
 8013e3c:	68f9      	ldr	r1, [r7, #12]
 8013e3e:	440b      	add	r3, r1
 8013e40:	7812      	ldrb	r2, [r2, #0]
 8013e42:	701a      	strb	r2, [r3, #0]
 8013e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	441a      	add	r2, r3
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	3b01      	subs	r3, #1
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	4413      	add	r3, r2
 8013e54:	7dfa      	ldrb	r2, [r7, #23]
 8013e56:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	61fb      	str	r3, [r7, #28]
 8013e5e:	6a3b      	ldr	r3, [r7, #32]
 8013e60:	085b      	lsrs	r3, r3, #1
 8013e62:	69fa      	ldr	r2, [r7, #28]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d3d7      	bcc.n	8013e18 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8013e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e6c:	4313      	orrs	r3, r2
 8013e6e:	d106      	bne.n	8013e7e <mg_lld+0x14e>
 8013e70:	6a3b      	ldr	r3, [r7, #32]
 8013e72:	1c5a      	adds	r2, r3, #1
 8013e74:	623a      	str	r2, [r7, #32]
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	4413      	add	r3, r2
 8013e7a:	2230      	movs	r2, #48	@ 0x30
 8013e7c:	701a      	strb	r2, [r3, #0]
  return n + s;
 8013e7e:	6a3a      	ldr	r2, [r7, #32]
 8013e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e82:	4413      	add	r3, r2
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3730      	adds	r7, #48	@ 0x30
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e8c:	08024a04 	.word	0x08024a04

08013e90 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b086      	sub	sp, #24
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8013ea2:	e009      	b.n	8013eb8 <scpy+0x28>
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	1c5a      	adds	r2, r3, #1
 8013ea8:	617a      	str	r2, [r7, #20]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	4413      	add	r3, r2
 8013eae:	781a      	ldrb	r2, [r3, #0]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68b9      	ldr	r1, [r7, #8]
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	4798      	blx	r3
 8013eb8:	697a      	ldr	r2, [r7, #20]
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d205      	bcs.n	8013ecc <scpy+0x3c>
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1eb      	bne.n	8013ea4 <scpy+0x14>
  return i;
 8013ecc:	697b      	ldr	r3, [r7, #20]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8013ed6:	b40c      	push	{r2, r3}
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8013ee6:	f107 031c 	add.w	r3, r7, #28
 8013eea:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8013eec:	f107 0308 	add.w	r3, r7, #8
 8013ef0:	69ba      	ldr	r2, [r7, #24]
 8013ef2:	6839      	ldr	r1, [r7, #0]
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f000 f809 	bl	8013f0c <mg_vxprintf>
 8013efa:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8013efc:	68fb      	ldr	r3, [r7, #12]
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f08:	b002      	add	sp, #8
 8013f0a:	4770      	bx	lr

08013f0c <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8013f0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013f10:	b0a6      	sub	sp, #152	@ 0x98
 8013f12:	af02      	add	r7, sp, #8
 8013f14:	60f8      	str	r0, [r7, #12]
 8013f16:	60b9      	str	r1, [r7, #8]
 8013f18:	607a      	str	r2, [r7, #4]
 8013f1a:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013f22:	2300      	movs	r3, #0
 8013f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8013f28:	e383      	b.n	8014632 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f30:	4413      	add	r3, r2
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b25      	cmp	r3, #37	@ 0x25
 8013f36:	f040 8369 	bne.w	801460c <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f3e:	2300      	movs	r3, #0
 8013f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f42:	2300      	movs	r3, #0
 8013f44:	677b      	str	r3, [r7, #116]	@ 0x74
 8013f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f4a:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8013f4c:	2320      	movs	r3, #32
 8013f4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013f52:	2300      	movs	r3, #0
 8013f54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8013f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f68:	4413      	add	r3, r2
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8013f70:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8013f74:	2b23      	cmp	r3, #35	@ 0x23
 8013f76:	d10e      	bne.n	8013f96 <mg_vxprintf+0x8a>
 8013f78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f82:	3301      	adds	r3, #1
 8013f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f8e:	4413      	add	r3, r2
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8013f96:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8013f9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8013f9c:	d110      	bne.n	8013fc0 <mg_vxprintf+0xb4>
 8013f9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8013fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fac:	3301      	adds	r3, #1
 8013fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fb8:	4413      	add	r3, r2
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8013fc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8013fc4:	2b30      	cmp	r3, #48	@ 0x30
 8013fc6:	d127      	bne.n	8014018 <mg_vxprintf+0x10c>
 8013fc8:	2330      	movs	r3, #48	@ 0x30
 8013fca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fde:	4413      	add	r3, r2
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8013fe6:	e017      	b.n	8014018 <mg_vxprintf+0x10c>
 8013fe8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013fea:	4613      	mov	r3, r2
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	4413      	add	r3, r2
 8013ff0:	005b      	lsls	r3, r3, #1
 8013ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8013ff4:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8013ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013ffa:	4413      	add	r3, r2
 8013ffc:	3b30      	subs	r3, #48	@ 0x30
 8013ffe:	677b      	str	r3, [r7, #116]	@ 0x74
 8014000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014004:	3301      	adds	r3, #1
 8014006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014010:	4413      	add	r3, r2
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8014018:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801401c:	4618      	mov	r0, r3
 801401e:	f7ff faa7 	bl	8013570 <is_digit>
 8014022:	4603      	mov	r3, r0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d1df      	bne.n	8013fe8 <mg_vxprintf+0xdc>
      if (c == '.') {
 8014028:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801402c:	2b2e      	cmp	r3, #46	@ 0x2e
 801402e:	d153      	bne.n	80140d8 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8014030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014034:	3301      	adds	r3, #1
 8014036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014040:	4413      	add	r3, r2
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8014048:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801404c:	2b2a      	cmp	r3, #42	@ 0x2a
 801404e:	d113      	bne.n	8014078 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	1d19      	adds	r1, r3, #4
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	6011      	str	r1, [r2, #0]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 801405e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014062:	3301      	adds	r3, #1
 8014064:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801406e:	4413      	add	r3, r2
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8014076:	e02f      	b.n	80140d8 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8014078:	2300      	movs	r3, #0
 801407a:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 801407c:	e017      	b.n	80140ae <mg_vxprintf+0x1a2>
 801407e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014080:	4613      	mov	r3, r2
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4413      	add	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	673b      	str	r3, [r7, #112]	@ 0x70
 801408a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 801408e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014090:	4413      	add	r3, r2
 8014092:	3b30      	subs	r3, #48	@ 0x30
 8014094:	673b      	str	r3, [r7, #112]	@ 0x70
 8014096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801409a:	3301      	adds	r3, #1
 801409c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80140a0:	687a      	ldr	r2, [r7, #4]
 80140a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140a6:	4413      	add	r3, r2
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80140ae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7ff fa5c 	bl	8013570 <is_digit>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d1df      	bne.n	801407e <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80140be:	e00b      	b.n	80140d8 <mg_vxprintf+0x1cc>
 80140c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140c4:	3301      	adds	r3, #1
 80140c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140d0:	4413      	add	r3, r2
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80140d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80140dc:	2b68      	cmp	r3, #104	@ 0x68
 80140de:	d0ef      	beq.n	80140c0 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80140e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80140e4:	2b6c      	cmp	r3, #108	@ 0x6c
 80140e6:	d121      	bne.n	801412c <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80140e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80140ea:	3301      	adds	r3, #1
 80140ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80140ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140f2:	3301      	adds	r3, #1
 80140f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140fe:	4413      	add	r3, r2
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8014106:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801410a:	2b6c      	cmp	r3, #108	@ 0x6c
 801410c:	d10e      	bne.n	801412c <mg_vxprintf+0x220>
 801410e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014110:	3301      	adds	r3, #1
 8014112:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014118:	3301      	adds	r3, #1
 801411a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014124:	4413      	add	r3, r2
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 801412c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014130:	2b70      	cmp	r3, #112	@ 0x70
 8014132:	d103      	bne.n	801413c <mg_vxprintf+0x230>
 8014134:	2301      	movs	r3, #1
 8014136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014138:	2301      	movs	r3, #1
 801413a:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 801413c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014140:	2b64      	cmp	r3, #100	@ 0x64
 8014142:	d018      	beq.n	8014176 <mg_vxprintf+0x26a>
 8014144:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014148:	2b75      	cmp	r3, #117	@ 0x75
 801414a:	d014      	beq.n	8014176 <mg_vxprintf+0x26a>
 801414c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014150:	2b78      	cmp	r3, #120	@ 0x78
 8014152:	d010      	beq.n	8014176 <mg_vxprintf+0x26a>
 8014154:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014158:	2b58      	cmp	r3, #88	@ 0x58
 801415a:	d00c      	beq.n	8014176 <mg_vxprintf+0x26a>
 801415c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014160:	2b70      	cmp	r3, #112	@ 0x70
 8014162:	d008      	beq.n	8014176 <mg_vxprintf+0x26a>
 8014164:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014168:	2b67      	cmp	r3, #103	@ 0x67
 801416a:	d004      	beq.n	8014176 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 801416c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014170:	2b66      	cmp	r3, #102	@ 0x66
 8014172:	f040 816c 	bne.w	801444e <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8014176:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801417a:	2b64      	cmp	r3, #100	@ 0x64
 801417c:	bf0c      	ite	eq
 801417e:	2301      	moveq	r3, #1
 8014180:	2300      	movne	r3, #0
 8014182:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014186:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801418a:	2b78      	cmp	r3, #120	@ 0x78
 801418c:	d007      	beq.n	801419e <mg_vxprintf+0x292>
 801418e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014192:	2b58      	cmp	r3, #88	@ 0x58
 8014194:	d003      	beq.n	801419e <mg_vxprintf+0x292>
 8014196:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801419a:	2b70      	cmp	r3, #112	@ 0x70
 801419c:	d101      	bne.n	80141a2 <mg_vxprintf+0x296>
 801419e:	2301      	movs	r3, #1
 80141a0:	e000      	b.n	80141a4 <mg_vxprintf+0x298>
 80141a2:	2300      	movs	r3, #0
 80141a4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80141a8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80141ac:	f003 0301 	and.w	r3, r3, #1
 80141b0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80141b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <mg_vxprintf+0x2b2>
 80141ba:	2302      	movs	r3, #2
 80141bc:	e000      	b.n	80141c0 <mg_vxprintf+0x2b4>
 80141be:	2300      	movs	r3, #0
 80141c0:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 80141c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80141c6:	2b67      	cmp	r3, #103	@ 0x67
 80141c8:	d003      	beq.n	80141d2 <mg_vxprintf+0x2c6>
 80141ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80141ce:	2b66      	cmp	r3, #102	@ 0x66
 80141d0:	d124      	bne.n	801421c <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	3307      	adds	r3, #7
 80141d8:	f023 0307 	bic.w	r3, r3, #7
 80141dc:	f103 0108 	add.w	r1, r3, #8
 80141e0:	683a      	ldr	r2, [r7, #0]
 80141e2:	6011      	str	r1, [r2, #0]
 80141e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80141ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80141ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80141f2:	d101      	bne.n	80141f8 <mg_vxprintf+0x2ec>
 80141f4:	2306      	movs	r3, #6
 80141f6:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80141f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80141fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80141fe:	2b67      	cmp	r3, #103	@ 0x67
 8014200:	bf0c      	ite	eq
 8014202:	2301      	moveq	r3, #1
 8014204:	2300      	movne	r3, #0
 8014206:	b2db      	uxtb	r3, r3
 8014208:	f107 0014 	add.w	r0, r7, #20
 801420c:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8014210:	2128      	movs	r1, #40	@ 0x28
 8014212:	f7ff fa99 	bl	8013748 <mg_dtoa>
 8014216:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 801421a:	e069      	b.n	80142f0 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 801421c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801421e:	2b02      	cmp	r3, #2
 8014220:	d11c      	bne.n	801425c <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	3307      	adds	r3, #7
 8014228:	f023 0307 	bic.w	r3, r3, #7
 801422c:	f103 0108 	add.w	r1, r3, #8
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	6011      	str	r1, [r2, #0]
 8014234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014238:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 801423c:	f107 0114 	add.w	r1, r7, #20
 8014240:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8014250:	4608      	mov	r0, r1
 8014252:	f7ff fd6d 	bl	8013d30 <mg_lld>
 8014256:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 801425a:	e049      	b.n	80142f0 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 801425c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801425e:	2b01      	cmp	r3, #1
 8014260:	d123      	bne.n	80142aa <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	1d19      	adds	r1, r3, #4
 8014268:	683a      	ldr	r2, [r7, #0]
 801426a:	6011      	str	r1, [r2, #0]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8014270:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014274:	2b00      	cmp	r3, #0
 8014276:	d004      	beq.n	8014282 <mg_vxprintf+0x376>
 8014278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801427a:	17da      	asrs	r2, r3, #31
 801427c:	461c      	mov	r4, r3
 801427e:	4615      	mov	r5, r2
 8014280:	e003      	b.n	801428a <mg_vxprintf+0x37e>
 8014282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014284:	2200      	movs	r2, #0
 8014286:	461c      	mov	r4, r3
 8014288:	4615      	mov	r5, r2
 801428a:	f107 0114 	add.w	r1, r7, #20
 801428e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8014292:	9301      	str	r3, [sp, #4]
 8014294:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	4622      	mov	r2, r4
 801429c:	462b      	mov	r3, r5
 801429e:	4608      	mov	r0, r1
 80142a0:	f7ff fd46 	bl	8013d30 <mg_lld>
 80142a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80142a8:	e022      	b.n	80142f0 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	1d19      	adds	r1, r3, #4
 80142b0:	683a      	ldr	r2, [r7, #0]
 80142b2:	6011      	str	r1, [r2, #0]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80142b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d004      	beq.n	80142ca <mg_vxprintf+0x3be>
 80142c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142c2:	17da      	asrs	r2, r3, #31
 80142c4:	4698      	mov	r8, r3
 80142c6:	4691      	mov	r9, r2
 80142c8:	e003      	b.n	80142d2 <mg_vxprintf+0x3c6>
 80142ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142cc:	2200      	movs	r2, #0
 80142ce:	4698      	mov	r8, r3
 80142d0:	4691      	mov	r9, r2
 80142d2:	f107 0114 	add.w	r1, r7, #20
 80142d6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	4642      	mov	r2, r8
 80142e4:	464b      	mov	r3, r9
 80142e6:	4608      	mov	r0, r1
 80142e8:	f7ff fd22 	bl	8013d30 <mg_lld>
 80142ec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80142f0:	2300      	movs	r3, #0
 80142f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80142f6:	e007      	b.n	8014308 <mg_vxprintf+0x3fc>
 80142f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80142fa:	3b01      	subs	r3, #1
 80142fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80142fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014302:	3301      	adds	r3, #1
 8014304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014308:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801430c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801430e:	429a      	cmp	r2, r3
 8014310:	d202      	bcs.n	8014318 <mg_vxprintf+0x40c>
 8014312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1ef      	bne.n	80142f8 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8014318:	2300      	movs	r3, #0
 801431a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801431e:	e011      	b.n	8014344 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8014320:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8014324:	2301      	movs	r3, #1
 8014326:	68b9      	ldr	r1, [r7, #8]
 8014328:	68f8      	ldr	r0, [r7, #12]
 801432a:	f7ff fdb1 	bl	8013e90 <scpy>
 801432e:	4602      	mov	r2, r0
 8014330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014334:	4413      	add	r3, r2
 8014336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 801433a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801433e:	3301      	adds	r3, #1
 8014340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014344:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014348:	2b20      	cmp	r3, #32
 801434a:	d110      	bne.n	801436e <mg_vxprintf+0x462>
 801434c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10c      	bne.n	801436e <mg_vxprintf+0x462>
 8014354:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801435a:	429a      	cmp	r2, r3
 801435c:	d207      	bcs.n	801436e <mg_vxprintf+0x462>
 801435e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014362:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014366:	4413      	add	r3, r2
 8014368:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801436a:	429a      	cmp	r2, r3
 801436c:	d8d8      	bhi.n	8014320 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 801436e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014370:	4ab7      	ldr	r2, [pc, #732]	@ (8014650 <mg_vxprintf+0x744>)
 8014372:	68b9      	ldr	r1, [r7, #8]
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f7ff fd8b 	bl	8013e90 <scpy>
 801437a:	4602      	mov	r2, r0
 801437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014380:	4413      	add	r3, r2
 8014382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8014386:	2300      	movs	r3, #0
 8014388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801438c:	e011      	b.n	80143b2 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 801438e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8014392:	2301      	movs	r3, #1
 8014394:	68b9      	ldr	r1, [r7, #8]
 8014396:	68f8      	ldr	r0, [r7, #12]
 8014398:	f7ff fd7a 	bl	8013e90 <scpy>
 801439c:	4602      	mov	r2, r0
 801439e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80143a2:	4413      	add	r3, r2
 80143a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80143a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143ac:	3301      	adds	r3, #1
 80143ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80143b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80143b6:	2b30      	cmp	r3, #48	@ 0x30
 80143b8:	d10c      	bne.n	80143d4 <mg_vxprintf+0x4c8>
 80143ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80143be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d207      	bcs.n	80143d4 <mg_vxprintf+0x4c8>
 80143c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80143c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143cc:	4413      	add	r3, r2
 80143ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d8dc      	bhi.n	801438e <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80143d4:	f107 0214 	add.w	r2, r7, #20
 80143d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f7ff fd56 	bl	8013e90 <scpy>
 80143e4:	4602      	mov	r2, r0
 80143e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80143ea:	4413      	add	r3, r2
 80143ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80143f0:	2300      	movs	r3, #0
 80143f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80143f6:	e011      	b.n	801441c <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80143f8:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80143fc:	2301      	movs	r3, #1
 80143fe:	68b9      	ldr	r1, [r7, #8]
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	f7ff fd45 	bl	8013e90 <scpy>
 8014406:	4602      	mov	r2, r0
 8014408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801440c:	4413      	add	r3, r2
 801440e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8014412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014416:	3301      	adds	r3, #1
 8014418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801441c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014420:	2b20      	cmp	r3, #32
 8014422:	f040 80ea 	bne.w	80145fa <mg_vxprintf+0x6ee>
 8014426:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801442a:	2b00      	cmp	r3, #0
 801442c:	f000 80e5 	beq.w	80145fa <mg_vxprintf+0x6ee>
 8014430:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014436:	429a      	cmp	r2, r3
 8014438:	f080 80df 	bcs.w	80145fa <mg_vxprintf+0x6ee>
 801443c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014440:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014444:	4413      	add	r3, r2
 8014446:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014448:	429a      	cmp	r2, r3
 801444a:	d8d5      	bhi.n	80143f8 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 801444c:	e0d5      	b.n	80145fa <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 801444e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014452:	2b6d      	cmp	r3, #109	@ 0x6d
 8014454:	d003      	beq.n	801445e <mg_vxprintf+0x552>
 8014456:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801445a:	2b4d      	cmp	r3, #77	@ 0x4d
 801445c:	d128      	bne.n	80144b0 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	1d19      	adds	r1, r3, #4
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	6011      	str	r1, [r2, #0]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 801446c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014470:	2b6d      	cmp	r3, #109	@ 0x6d
 8014472:	d103      	bne.n	801447c <mg_vxprintf+0x570>
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	68b9      	ldr	r1, [r7, #8]
 8014478:	2022      	movs	r0, #34	@ 0x22
 801447a:	4798      	blx	r3
        n += f(out, param, ap);
 801447c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	68b9      	ldr	r1, [r7, #8]
 8014482:	68f8      	ldr	r0, [r7, #12]
 8014484:	4798      	blx	r3
 8014486:	4602      	mov	r2, r0
 8014488:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801448c:	4413      	add	r3, r2
 801448e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8014492:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8014496:	2b6d      	cmp	r3, #109	@ 0x6d
 8014498:	f040 80b1 	bne.w	80145fe <mg_vxprintf+0x6f2>
 801449c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144a0:	3302      	adds	r3, #2
 80144a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	2022      	movs	r0, #34	@ 0x22
 80144ac:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80144ae:	e0a6      	b.n	80145fe <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80144b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80144b4:	2b63      	cmp	r3, #99	@ 0x63
 80144b6:	d112      	bne.n	80144de <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	1d19      	adds	r1, r3, #4
 80144be:	683a      	ldr	r2, [r7, #0]
 80144c0:	6011      	str	r1, [r2, #0]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 80144c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	68b9      	ldr	r1, [r7, #8]
 80144ce:	4610      	mov	r0, r2
 80144d0:	4798      	blx	r3
        n++;
 80144d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144d6:	3301      	adds	r3, #1
 80144d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80144dc:	e090      	b.n	8014600 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80144de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80144e2:	2b73      	cmp	r3, #115	@ 0x73
 80144e4:	d16b      	bne.n	80145be <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	1d19      	adds	r1, r3, #4
 80144ec:	683a      	ldr	r2, [r7, #0]
 80144ee:	6011      	str	r1, [r2, #0]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80144f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80144f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80144fa:	d109      	bne.n	8014510 <mg_vxprintf+0x604>
 80144fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d004      	beq.n	801450c <mg_vxprintf+0x600>
 8014502:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8014504:	f7eb febc 	bl	8000280 <strlen>
 8014508:	4603      	mov	r3, r0
 801450a:	e000      	b.n	801450e <mg_vxprintf+0x602>
 801450c:	2300      	movs	r3, #0
 801450e:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8014510:	2300      	movs	r3, #0
 8014512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014516:	e011      	b.n	801453c <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8014518:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801451c:	2301      	movs	r3, #1
 801451e:	68b9      	ldr	r1, [r7, #8]
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f7ff fcb5 	bl	8013e90 <scpy>
 8014526:	4602      	mov	r2, r0
 8014528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801452c:	4413      	add	r3, r2
 801452e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8014532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014536:	3301      	adds	r3, #1
 8014538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801453c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014540:	2b00      	cmp	r3, #0
 8014542:	d10a      	bne.n	801455a <mg_vxprintf+0x64e>
 8014544:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014548:	429a      	cmp	r2, r3
 801454a:	d206      	bcs.n	801455a <mg_vxprintf+0x64e>
 801454c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014552:	4413      	add	r3, r2
 8014554:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014556:	429a      	cmp	r2, r3
 8014558:	d8de      	bhi.n	8014518 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 801455a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801455c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f7ff fc95 	bl	8013e90 <scpy>
 8014566:	4602      	mov	r2, r0
 8014568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801456c:	4413      	add	r3, r2
 801456e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8014572:	2300      	movs	r3, #0
 8014574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014578:	e011      	b.n	801459e <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 801457a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801457e:	2301      	movs	r3, #1
 8014580:	68b9      	ldr	r1, [r7, #8]
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f7ff fc84 	bl	8013e90 <scpy>
 8014588:	4602      	mov	r2, r0
 801458a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801458e:	4413      	add	r3, r2
 8014590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8014594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014598:	3301      	adds	r3, #1
 801459a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801459e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d02c      	beq.n	8014600 <mg_vxprintf+0x6f4>
 80145a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80145a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d228      	bcs.n	8014600 <mg_vxprintf+0x6f4>
 80145ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80145b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80145b4:	4413      	add	r3, r2
 80145b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d8de      	bhi.n	801457a <mg_vxprintf+0x66e>
 80145bc:	e020      	b.n	8014600 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80145be:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80145c2:	2b25      	cmp	r3, #37	@ 0x25
 80145c4:	d109      	bne.n	80145da <mg_vxprintf+0x6ce>
        out('%', param);
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	68b9      	ldr	r1, [r7, #8]
 80145ca:	2025      	movs	r0, #37	@ 0x25
 80145cc:	4798      	blx	r3
        n++;
 80145ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80145d2:	3301      	adds	r3, #1
 80145d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80145d8:	e012      	b.n	8014600 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	68b9      	ldr	r1, [r7, #8]
 80145de:	2025      	movs	r0, #37	@ 0x25
 80145e0:	4798      	blx	r3
        out(c, param);
 80145e2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	68b9      	ldr	r1, [r7, #8]
 80145ea:	4610      	mov	r0, r2
 80145ec:	4798      	blx	r3
        n += 2;
 80145ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80145f2:	3302      	adds	r3, #2
 80145f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80145f8:	e002      	b.n	8014600 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80145fa:	bf00      	nop
 80145fc:	e000      	b.n	8014600 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80145fe:	bf00      	nop
      }
      i++;
 8014600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014604:	3301      	adds	r3, #1
 8014606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801460a:	e012      	b.n	8014632 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014612:	4413      	add	r3, r2
 8014614:	781a      	ldrb	r2, [r3, #0]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	68b9      	ldr	r1, [r7, #8]
 801461a:	4610      	mov	r0, r2
 801461c:	4798      	blx	r3
 801461e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014622:	3301      	adds	r3, #1
 8014624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801462c:	3301      	adds	r3, #1
 801462e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014638:	4413      	add	r3, r2
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	f47f ac74 	bne.w	8013f2a <mg_vxprintf+0x1e>
    }
  }
  return n;
 8014642:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8014646:	4618      	mov	r0, r3
 8014648:	3790      	adds	r7, #144	@ 0x90
 801464a:	46bd      	mov	sp, r7
 801464c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014650:	08024a18 	.word	0x08024a18

08014654 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8014660:	2108      	movs	r1, #8
 8014662:	2001      	movs	r0, #1
 8014664:	f7fe f942 	bl	80128ec <mg_calloc>
 8014668:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d013      	beq.n	8014698 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	6879      	ldr	r1, [r7, #4]
 8014676:	68b8      	ldr	r0, [r7, #8]
 8014678:	4798      	blx	r3
 801467a:	4602      	mov	r2, r0
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d104      	bne.n	8014698 <mg_fs_open+0x44>
      free(fd);
 801468e:	6978      	ldr	r0, [r7, #20]
 8014690:	f7f5 fdba 	bl	800a208 <vPortFree>
      fd = NULL;
 8014694:	2300      	movs	r3, #0
 8014696:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8014698:	697b      	ldr	r3, [r7, #20]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3718      	adds	r7, #24
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b082      	sub	sp, #8
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d009      	beq.n	80146c4 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	6812      	ldr	r2, [r2, #0]
 80146ba:	4610      	mov	r0, r2
 80146bc:	4798      	blx	r3
    free(fd);
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f7f5 fda2 	bl	800a208 <vPortFree>
  }
}
 80146c4:	bf00      	nop
 80146c6:	3708      	adds	r7, #8
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3714      	adds	r7, #20
 80146de:	46bd      	mov	sp, r7
 80146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e4:	4770      	bx	lr

080146e6 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 80146e6:	b480      	push	{r7}
 80146e8:	b085      	sub	sp, #20
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	60f8      	str	r0, [r7, #12]
 80146ee:	60b9      	str	r1, [r7, #8]
 80146f0:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80146f2:	bf00      	nop
 80146f4:	3714      	adds	r7, #20
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr

080146fe <p_open>:
static void *p_open(const char *path, int flags) {
 80146fe:	b480      	push	{r7}
 8014700:	b083      	sub	sp, #12
 8014702:	af00      	add	r7, sp, #0
 8014704:	6078      	str	r0, [r7, #4]
 8014706:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8014708:	2300      	movs	r3, #0
}
 801470a:	4618      	mov	r0, r3
 801470c:	370c      	adds	r7, #12
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr

08014716 <p_close>:
static void p_close(void *fp) {
 8014716:	b480      	push	{r7}
 8014718:	b083      	sub	sp, #12
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 801471e:	bf00      	nop
 8014720:	370c      	adds	r7, #12
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr

0801472a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 801472a:	b480      	push	{r7}
 801472c:	b085      	sub	sp, #20
 801472e:	af00      	add	r7, sp, #0
 8014730:	60f8      	str	r0, [r7, #12]
 8014732:	60b9      	str	r1, [r7, #8]
 8014734:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8014736:	2300      	movs	r3, #0
}
 8014738:	4618      	mov	r0, r3
 801473a:	3714      	adds	r7, #20
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8014744:	b480      	push	{r7}
 8014746:	b085      	sub	sp, #20
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8014750:	2300      	movs	r3, #0
}
 8014752:	4618      	mov	r0, r3
 8014754:	3714      	adds	r7, #20
 8014756:	46bd      	mov	sp, r7
 8014758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475c:	4770      	bx	lr

0801475e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 801475e:	b480      	push	{r7}
 8014760:	b083      	sub	sp, #12
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
 8014766:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8014768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801476c:	4618      	mov	r0, r3
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr

08014778 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8014778:	b480      	push	{r7}
 801477a:	b083      	sub	sp, #12
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	370c      	adds	r7, #12
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr

08014790 <p_remove>:
static bool p_remove(const char *path) {
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	370c      	adds	r7, #12
 801479e:	46bd      	mov	sp, r7
 80147a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a4:	4770      	bx	lr

080147a6 <p_mkdir>:
static bool p_mkdir(const char *path) {
 80147a6:	b480      	push	{r7}
 80147a8:	b083      	sub	sp, #12
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80147ae:	2300      	movs	r3, #0
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	370c      	adds	r7, #12
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr

080147bc <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80147bc:	b480      	push	{r7}
 80147be:	b089      	sub	sp, #36	@ 0x24
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
  int diff = 0;
 80147c8:	2300      	movs	r3, #0
 80147ca:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d02d      	beq.n	801482e <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	1c5a      	adds	r2, r3, #1
 80147d6:	60fa      	str	r2, [r7, #12]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	61bb      	str	r3, [r7, #24]
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	1c5a      	adds	r2, r3, #1
 80147e0:	60ba      	str	r2, [r7, #8]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	2b40      	cmp	r3, #64	@ 0x40
 80147ea:	dd05      	ble.n	80147f8 <mg_ncasecmp+0x3c>
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80147f0:	dc02      	bgt.n	80147f8 <mg_ncasecmp+0x3c>
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	3320      	adds	r3, #32
 80147f6:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	2b40      	cmp	r3, #64	@ 0x40
 80147fc:	dd05      	ble.n	801480a <mg_ncasecmp+0x4e>
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b5a      	cmp	r3, #90	@ 0x5a
 8014802:	dc02      	bgt.n	801480a <mg_ncasecmp+0x4e>
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	3320      	adds	r3, #32
 8014808:	617b      	str	r3, [r7, #20]
      diff = c - d;
 801480a:	69ba      	ldr	r2, [r7, #24]
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	1ad3      	subs	r3, r2, r3
 8014810:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d10a      	bne.n	801482e <mg_ncasecmp+0x72>
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	3b01      	subs	r3, #1
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d005      	beq.n	801482e <mg_ncasecmp+0x72>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	3b01      	subs	r3, #1
 8014826:	607b      	str	r3, [r7, #4]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d1d1      	bne.n	80147d2 <mg_ncasecmp+0x16>
  return diff;
 801482e:	69fb      	ldr	r3, [r7, #28]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3724      	adds	r7, #36	@ 0x24
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 801483c:	b480      	push	{r7}
 801483e:	b08b      	sub	sp, #44	@ 0x2c
 8014840:	af00      	add	r7, sp, #0
 8014842:	f107 0308 	add.w	r3, r7, #8
 8014846:	e883 0003 	stmia.w	r3, {r0, r1}
 801484a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 801484c:	2300      	movs	r3, #0
 801484e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014854:	61bb      	str	r3, [r7, #24]
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	4a42      	ldr	r2, [pc, #264]	@ (8014964 <mg_to_size_t+0x128>)
 801485a:	fba2 2303 	umull	r2, r3, r2, r3
 801485e:	08db      	lsrs	r3, r3, #3
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	2300      	movs	r3, #0
 8014864:	623b      	str	r3, [r7, #32]
 8014866:	2300      	movs	r3, #0
 8014868:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 801486a:	e002      	b.n	8014872 <mg_to_size_t+0x36>
 801486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801486e:	3301      	adds	r3, #1
 8014870:	627b      	str	r3, [r7, #36]	@ 0x24
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014876:	429a      	cmp	r2, r3
 8014878:	d20b      	bcs.n	8014892 <mg_to_size_t+0x56>
 801487a:	68ba      	ldr	r2, [r7, #8]
 801487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801487e:	4413      	add	r3, r2
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	2b20      	cmp	r3, #32
 8014884:	d0f2      	beq.n	801486c <mg_to_size_t+0x30>
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801488a:	4413      	add	r3, r2
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	2b09      	cmp	r3, #9
 8014890:	d0ec      	beq.n	801486c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014896:	429a      	cmp	r2, r3
 8014898:	d22b      	bcs.n	80148f2 <mg_to_size_t+0xb6>
 801489a:	68ba      	ldr	r2, [r7, #8]
 801489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801489e:	4413      	add	r3, r2
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80148a4:	d125      	bne.n	80148f2 <mg_to_size_t+0xb6>
 80148a6:	2300      	movs	r3, #0
 80148a8:	e056      	b.n	8014958 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 80148aa:	68ba      	ldr	r2, [r7, #8]
 80148ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ae:	4413      	add	r3, r2
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	3b30      	subs	r3, #48	@ 0x30
 80148b4:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 80148b6:	6a3a      	ldr	r2, [r7, #32]
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d901      	bls.n	80148c2 <mg_to_size_t+0x86>
 80148be:	2300      	movs	r3, #0
 80148c0:	e04a      	b.n	8014958 <mg_to_size_t+0x11c>
    result *= 10;
 80148c2:	6a3a      	ldr	r2, [r7, #32]
 80148c4:	4613      	mov	r3, r2
 80148c6:	009b      	lsls	r3, r3, #2
 80148c8:	4413      	add	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 80148ce:	69ba      	ldr	r2, [r7, #24]
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	6a3a      	ldr	r2, [r7, #32]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d901      	bls.n	80148de <mg_to_size_t+0xa2>
 80148da:	2300      	movs	r3, #0
 80148dc:	e03c      	b.n	8014958 <mg_to_size_t+0x11c>
    result += digit;
 80148de:	6a3a      	ldr	r2, [r7, #32]
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	4413      	add	r3, r2
 80148e4:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 80148e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e8:	3301      	adds	r3, #1
 80148ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	3301      	adds	r3, #1
 80148f0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d20f      	bcs.n	801491a <mg_to_size_t+0xde>
 80148fa:	68ba      	ldr	r2, [r7, #8]
 80148fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fe:	4413      	add	r3, r2
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	2b2f      	cmp	r3, #47	@ 0x2f
 8014904:	d909      	bls.n	801491a <mg_to_size_t+0xde>
 8014906:	68ba      	ldr	r2, [r7, #8]
 8014908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801490a:	4413      	add	r3, r2
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	2b39      	cmp	r3, #57	@ 0x39
 8014910:	d9cb      	bls.n	80148aa <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8014912:	e002      	b.n	801491a <mg_to_size_t+0xde>
 8014914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014916:	3301      	adds	r3, #1
 8014918:	627b      	str	r3, [r7, #36]	@ 0x24
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801491e:	429a      	cmp	r2, r3
 8014920:	d20b      	bcs.n	801493a <mg_to_size_t+0xfe>
 8014922:	68ba      	ldr	r2, [r7, #8]
 8014924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014926:	4413      	add	r3, r2
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	2b20      	cmp	r3, #32
 801492c:	d0f2      	beq.n	8014914 <mg_to_size_t+0xd8>
 801492e:	68ba      	ldr	r2, [r7, #8]
 8014930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014932:	4413      	add	r3, r2
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	2b09      	cmp	r3, #9
 8014938:	d0ec      	beq.n	8014914 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 801493a:	69fb      	ldr	r3, [r7, #28]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d101      	bne.n	8014944 <mg_to_size_t+0x108>
 8014940:	2300      	movs	r3, #0
 8014942:	e009      	b.n	8014958 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014948:	429a      	cmp	r2, r3
 801494a:	d001      	beq.n	8014950 <mg_to_size_t+0x114>
 801494c:	2300      	movs	r3, #0
 801494e:	e003      	b.n	8014958 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6a3a      	ldr	r2, [r7, #32]
 8014954:	601a      	str	r2, [r3, #0]
  return true;
 8014956:	2301      	movs	r3, #1
}
 8014958:	4618      	mov	r0, r3
 801495a:	372c      	adds	r7, #44	@ 0x2c
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr
 8014964:	cccccccd 	.word	0xcccccccd

08014968 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8014968:	b082      	sub	sp, #8
 801496a:	b580      	push	{r7, lr}
 801496c:	b08e      	sub	sp, #56	@ 0x38
 801496e:	af02      	add	r7, sp, #8
 8014970:	60f8      	str	r0, [r7, #12]
 8014972:	1d38      	adds	r0, r7, #4
 8014974:	e880 0006 	stmia.w	r0, {r1, r2}
 8014978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 801497a:	f107 0310 	add.w	r3, r7, #16
 801497e:	2200      	movs	r2, #0
 8014980:	2100      	movs	r1, #0
 8014982:	4618      	mov	r0, r3
 8014984:	f00a fc0b 	bl	801f19e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8014988:	e023      	b.n	80149d2 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 801498a:	f107 0318 	add.w	r3, r7, #24
 801498e:	f107 0220 	add.w	r2, r7, #32
 8014992:	213d      	movs	r1, #61	@ 0x3d
 8014994:	9100      	str	r1, [sp, #0]
 8014996:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801499a:	c903      	ldmia	r1, {r0, r1}
 801499c:	f00a fda9 	bl	801f4f2 <mg_span>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d015      	beq.n	80149d2 <mg_http_var+0x6a>
 80149a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80149a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d111      	bne.n	80149d2 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 80149ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149b0:	6a39      	ldr	r1, [r7, #32]
 80149b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7ff ff01 	bl	80147bc <mg_ncasecmp>
 80149ba:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d108      	bne.n	80149d2 <mg_http_var+0x6a>
      result = v;
 80149c0:	f107 0310 	add.w	r3, r7, #16
 80149c4:	f107 0218 	add.w	r2, r7, #24
 80149c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149cc:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 80149d0:	e00b      	b.n	80149ea <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 80149d2:	1d3b      	adds	r3, r7, #4
 80149d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80149d8:	2126      	movs	r1, #38	@ 0x26
 80149da:	9100      	str	r1, [sp, #0]
 80149dc:	1d39      	adds	r1, r7, #4
 80149de:	c903      	ldmia	r1, {r0, r1}
 80149e0:	f00a fd87 	bl	801f4f2 <mg_span>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d1cf      	bne.n	801498a <mg_http_var+0x22>
    }
  }
  return result;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	461a      	mov	r2, r3
 80149ee:	f107 0310 	add.w	r3, r7, #16
 80149f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80149f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	3730      	adds	r7, #48	@ 0x30
 80149fe:	46bd      	mov	sp, r7
 8014a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014a04:	b002      	add	sp, #8
 8014a06:	4770      	bx	lr

08014a08 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b08c      	sub	sp, #48	@ 0x30
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
 8014a14:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d005      	beq.n	8014a28 <mg_http_get_var+0x20>
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d002      	beq.n	8014a28 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <mg_http_get_var+0x2c>
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d103      	bne.n	8014a3c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8014a34:	f06f 0301 	mvn.w	r3, #1
 8014a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a3a:	e033      	b.n	8014aa4 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d006      	beq.n	8014a52 <mg_http_get_var+0x4a>
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d003      	beq.n	8014a52 <mg_http_get_var+0x4a>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d103      	bne.n	8014a5a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a58:	e024      	b.n	8014aa4 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8014a5a:	f107 031c 	add.w	r3, r7, #28
 8014a5e:	68b9      	ldr	r1, [r7, #8]
 8014a60:	4618      	mov	r0, r3
 8014a62:	f00a fb7f 	bl	801f164 <mg_str_s>
 8014a66:	f107 0014 	add.w	r0, r7, #20
 8014a6a:	68fa      	ldr	r2, [r7, #12]
 8014a6c:	6a3b      	ldr	r3, [r7, #32]
 8014a6e:	9300      	str	r3, [sp, #0]
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	ca06      	ldmia	r2, {r1, r2}
 8014a74:	f7ff ff78 	bl	8014968 <mg_http_var>
    if (v.buf == NULL) {
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d103      	bne.n	8014a86 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8014a7e:	f06f 0303 	mvn.w	r3, #3
 8014a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a84:	e00e      	b.n	8014aa4 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8014a86:	6978      	ldr	r0, [r7, #20]
 8014a88:	69b9      	ldr	r1, [r7, #24]
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	9300      	str	r3, [sp, #0]
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	f000 f82e 	bl	8014af2 <mg_url_decode>
 8014a96:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8014a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	da02      	bge.n	8014aa4 <mg_http_get_var+0x9c>
 8014a9e:	f06f 0302 	mvn.w	r3, #2
 8014aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8014aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3728      	adds	r7, #40	@ 0x28
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}

08014aae <isx>:

static bool isx(int c) {
 8014aae:	b480      	push	{r7}
 8014ab0:	b083      	sub	sp, #12
 8014ab2:	af00      	add	r7, sp, #0
 8014ab4:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2b2f      	cmp	r3, #47	@ 0x2f
 8014aba:	dd02      	ble.n	8014ac2 <isx+0x14>
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b39      	cmp	r3, #57	@ 0x39
 8014ac0:	dd0b      	ble.n	8014ada <isx+0x2c>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b60      	cmp	r3, #96	@ 0x60
 8014ac6:	dd02      	ble.n	8014ace <isx+0x20>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b66      	cmp	r3, #102	@ 0x66
 8014acc:	dd05      	ble.n	8014ada <isx+0x2c>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2b40      	cmp	r3, #64	@ 0x40
 8014ad2:	dd04      	ble.n	8014ade <isx+0x30>
         (c >= 'A' && c <= 'F');
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2b46      	cmp	r3, #70	@ 0x46
 8014ad8:	dc01      	bgt.n	8014ade <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8014ada:	2301      	movs	r3, #1
 8014adc:	e000      	b.n	8014ae0 <isx+0x32>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	f003 0301 	and.w	r3, r3, #1
 8014ae4:	b2db      	uxtb	r3, r3
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr

08014af2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b08a      	sub	sp, #40	@ 0x28
 8014af6:	af02      	add	r7, sp, #8
 8014af8:	60f8      	str	r0, [r7, #12]
 8014afa:	60b9      	str	r1, [r7, #8]
 8014afc:	607a      	str	r2, [r7, #4]
 8014afe:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8014b00:	2300      	movs	r3, #0
 8014b02:	61bb      	str	r3, [r7, #24]
 8014b04:	69bb      	ldr	r3, [r7, #24]
 8014b06:	61fb      	str	r3, [r7, #28]
 8014b08:	e059      	b.n	8014bbe <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	4413      	add	r3, r2
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	2b25      	cmp	r3, #37	@ 0x25
 8014b14:	d136      	bne.n	8014b84 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	3302      	adds	r3, #2
 8014b1a:	68ba      	ldr	r2, [r7, #8]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d92e      	bls.n	8014b7e <mg_url_decode+0x8c>
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	3301      	adds	r3, #1
 8014b24:	68fa      	ldr	r2, [r7, #12]
 8014b26:	4413      	add	r3, r2
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff ffbf 	bl	8014aae <isx>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d023      	beq.n	8014b7e <mg_url_decode+0x8c>
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	3302      	adds	r3, #2
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7ff ffb4 	bl	8014aae <isx>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d018      	beq.n	8014b7e <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	18d1      	adds	r1, r2, r3
 8014b54:	f107 0310 	add.w	r3, r7, #16
 8014b58:	2202      	movs	r2, #2
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f00a fb1f 	bl	801f19e <mg_str_n>
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	4413      	add	r3, r2
 8014b66:	2201      	movs	r2, #1
 8014b68:	9200      	str	r2, [sp, #0]
 8014b6a:	2210      	movs	r2, #16
 8014b6c:	f107 0110 	add.w	r1, r7, #16
 8014b70:	c903      	ldmia	r1, {r0, r1}
 8014b72:	f00a fd1b 	bl	801f5ac <mg_str_to_num>
        i += 2;
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	3302      	adds	r3, #2
 8014b7a:	61fb      	str	r3, [r7, #28]
 8014b7c:	e019      	b.n	8014bb2 <mg_url_decode+0xc0>
      } else {
        return -1;
 8014b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014b82:	e03a      	b.n	8014bfa <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8014b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00b      	beq.n	8014ba2 <mg_url_decode+0xb0>
 8014b8a:	68fa      	ldr	r2, [r7, #12]
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	4413      	add	r3, r2
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b94:	d105      	bne.n	8014ba2 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	4413      	add	r3, r2
 8014b9c:	2220      	movs	r2, #32
 8014b9e:	701a      	strb	r2, [r3, #0]
 8014ba0:	e007      	b.n	8014bb2 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8014ba2:	68fa      	ldr	r2, [r7, #12]
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	441a      	add	r2, r3
 8014ba8:	6879      	ldr	r1, [r7, #4]
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	440b      	add	r3, r1
 8014bae:	7812      	ldrb	r2, [r2, #0]
 8014bb0:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	61fb      	str	r3, [r7, #28]
 8014bb8:	69bb      	ldr	r3, [r7, #24]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	61bb      	str	r3, [r7, #24]
 8014bbe:	69fa      	ldr	r2, [r7, #28]
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d204      	bcs.n	8014bd0 <mg_url_decode+0xde>
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	683a      	ldr	r2, [r7, #0]
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d89c      	bhi.n	8014b0a <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8014bd0:	69ba      	ldr	r2, [r7, #24]
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d204      	bcs.n	8014be2 <mg_url_decode+0xf0>
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	69bb      	ldr	r3, [r7, #24]
 8014bdc:	4413      	add	r3, r2
 8014bde:	2200      	movs	r2, #0
 8014be0:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8014be2:	69fa      	ldr	r2, [r7, #28]
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d305      	bcc.n	8014bf6 <mg_url_decode+0x104>
 8014bea:	69ba      	ldr	r2, [r7, #24]
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d201      	bcs.n	8014bf6 <mg_url_decode+0x104>
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	e001      	b.n	8014bfa <mg_url_decode+0x108>
 8014bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3720      	adds	r7, #32
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <isok>:

static bool isok(uint8_t c) {
 8014c02:	b480      	push	{r7}
 8014c04:	b083      	sub	sp, #12
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	4603      	mov	r3, r0
 8014c0a:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8014c0c:	79fb      	ldrb	r3, [r7, #7]
 8014c0e:	2b0a      	cmp	r3, #10
 8014c10:	d008      	beq.n	8014c24 <isok+0x22>
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	2b0d      	cmp	r3, #13
 8014c16:	d005      	beq.n	8014c24 <isok+0x22>
 8014c18:	79fb      	ldrb	r3, [r7, #7]
 8014c1a:	2b09      	cmp	r3, #9
 8014c1c:	d002      	beq.n	8014c24 <isok+0x22>
 8014c1e:	79fb      	ldrb	r3, [r7, #7]
 8014c20:	2b1f      	cmp	r3, #31
 8014c22:	d901      	bls.n	8014c28 <isok+0x26>
 8014c24:	2301      	movs	r3, #1
 8014c26:	e000      	b.n	8014c2a <isok+0x28>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	f003 0301 	and.w	r3, r3, #1
 8014c2e:	b2db      	uxtb	r3, r3
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr

08014c3c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8014c46:	2300      	movs	r3, #0
 8014c48:	60fb      	str	r3, [r7, #12]
 8014c4a:	e03c      	b.n	8014cc6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	4413      	add	r3, r2
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7ff ffd4 	bl	8014c02 <isok>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	f083 0301 	eor.w	r3, r3, #1
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d002      	beq.n	8014c6c <mg_http_get_request_len+0x30>
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014c6a:	e031      	b.n	8014cd0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d00c      	beq.n	8014c8c <mg_http_get_request_len+0x50>
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	4413      	add	r3, r2
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	2b0a      	cmp	r3, #10
 8014c7c:	d106      	bne.n	8014c8c <mg_http_get_request_len+0x50>
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3b01      	subs	r3, #1
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	4413      	add	r3, r2
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	2b0a      	cmp	r3, #10
 8014c8a:	d016      	beq.n	8014cba <mg_http_get_request_len+0x7e>
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2b03      	cmp	r3, #3
 8014c90:	d916      	bls.n	8014cc0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4413      	add	r3, r2
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	2b0a      	cmp	r3, #10
 8014c9c:	d110      	bne.n	8014cc0 <mg_http_get_request_len+0x84>
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	2b0d      	cmp	r3, #13
 8014caa:	d109      	bne.n	8014cc0 <mg_http_get_request_len+0x84>
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3b02      	subs	r3, #2
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	2b0a      	cmp	r3, #10
 8014cb8:	d102      	bne.n	8014cc0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	e007      	b.n	8014cd0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	60fb      	str	r3, [r7, #12]
 8014cc6:	68fa      	ldr	r2, [r7, #12]
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d3be      	bcc.n	8014c4c <mg_http_get_request_len+0x10>
  }
  return 0;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b088      	sub	sp, #32
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8014ce2:	6838      	ldr	r0, [r7, #0]
 8014ce4:	f7eb facc 	bl	8000280 <strlen>
 8014ce8:	61b8      	str	r0, [r7, #24]
 8014cea:	231e      	movs	r3, #30
 8014cec:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8014cee:	2300      	movs	r3, #0
 8014cf0:	61fb      	str	r3, [r7, #28]
 8014cf2:	e01f      	b.n	8014d34 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8014cf4:	69fb      	ldr	r3, [r7, #28]
 8014cf6:	3302      	adds	r3, #2
 8014cf8:	011b      	lsls	r3, r3, #4
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	4413      	add	r3, r2
 8014cfe:	613b      	str	r3, [r7, #16]
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	011b      	lsls	r3, r3, #4
 8014d04:	3328      	adds	r3, #40	@ 0x28
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	4413      	add	r3, r2
 8014d0a:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	685b      	ldr	r3, [r3, #4]
 8014d10:	69ba      	ldr	r2, [r7, #24]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d10b      	bne.n	8014d2e <mg_http_get_header+0x56>
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	69ba      	ldr	r2, [r7, #24]
 8014d1c:	6839      	ldr	r1, [r7, #0]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7ff fd4c 	bl	80147bc <mg_ncasecmp>
 8014d24:	4603      	mov	r3, r0
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d101      	bne.n	8014d2e <mg_http_get_header+0x56>
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	e010      	b.n	8014d50 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	3301      	adds	r3, #1
 8014d32:	61fb      	str	r3, [r7, #28]
 8014d34:	69fa      	ldr	r2, [r7, #28]
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d208      	bcs.n	8014d4e <mg_http_get_header+0x76>
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	69fb      	ldr	r3, [r7, #28]
 8014d40:	3302      	adds	r3, #2
 8014d42:	011b      	lsls	r3, r3, #4
 8014d44:	4413      	add	r3, r2
 8014d46:	3304      	adds	r3, #4
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d1d2      	bne.n	8014cf4 <mg_http_get_header+0x1c>
  }
  return NULL;
 8014d4e:	2300      	movs	r3, #0
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3720      	adds	r7, #32
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}

08014d58 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	4603      	mov	r3, r0
 8014d60:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8014d62:	79fb      	ldrb	r3, [r7, #7]
 8014d64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014d68:	2b80      	cmp	r3, #128	@ 0x80
 8014d6a:	bf0c      	ite	eq
 8014d6c:	2301      	moveq	r3, #1
 8014d6e:	2300      	movne	r3, #0
 8014d70:	b2db      	uxtb	r3, r3
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	370c      	adds	r7, #12
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b086      	sub	sp, #24
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
 8014d86:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	617b      	str	r3, [r7, #20]
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	1ad3      	subs	r3, r2, r3
 8014d98:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8014d9a:	7cfb      	ldrb	r3, [r7, #19]
 8014d9c:	2b20      	cmp	r3, #32
 8014d9e:	d904      	bls.n	8014daa <clen+0x2c>
 8014da0:	7cfb      	ldrb	r3, [r7, #19]
 8014da2:	2b7d      	cmp	r3, #125	@ 0x7d
 8014da4:	d801      	bhi.n	8014daa <clen+0x2c>
 8014da6:	2301      	movs	r3, #1
 8014da8:	e054      	b.n	8014e54 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8014daa:	7cfb      	ldrb	r3, [r7, #19]
 8014dac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8014db0:	2bc0      	cmp	r3, #192	@ 0xc0
 8014db2:	d10d      	bne.n	8014dd0 <clen+0x52>
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	dd0a      	ble.n	8014dd0 <clen+0x52>
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7ff ffc9 	bl	8014d58 <vcb>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d001      	beq.n	8014dd0 <clen+0x52>
 8014dcc:	2302      	movs	r3, #2
 8014dce:	e041      	b.n	8014e54 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8014dd0:	7cfb      	ldrb	r3, [r7, #19]
 8014dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014dd6:	2be0      	cmp	r3, #224	@ 0xe0
 8014dd8:	d116      	bne.n	8014e08 <clen+0x8a>
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2b02      	cmp	r3, #2
 8014dde:	dd13      	ble.n	8014e08 <clen+0x8a>
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	3301      	adds	r3, #1
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff ffb6 	bl	8014d58 <vcb>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00a      	beq.n	8014e08 <clen+0x8a>
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	3302      	adds	r3, #2
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7ff ffad 	bl	8014d58 <vcb>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <clen+0x8a>
 8014e04:	2303      	movs	r3, #3
 8014e06:	e025      	b.n	8014e54 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8014e08:	7cfb      	ldrb	r3, [r7, #19]
 8014e0a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8014e0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014e10:	d11f      	bne.n	8014e52 <clen+0xd4>
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2b03      	cmp	r3, #3
 8014e16:	dd1c      	ble.n	8014e52 <clen+0xd4>
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7ff ff9a 	bl	8014d58 <vcb>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d013      	beq.n	8014e52 <clen+0xd4>
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	3302      	adds	r3, #2
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff ff91 	bl	8014d58 <vcb>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d00a      	beq.n	8014e52 <clen+0xd4>
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	3303      	adds	r3, #3
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff ff88 	bl	8014d58 <vcb>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <clen+0xd4>
    return 4;
 8014e4e:	2304      	movs	r3, #4
 8014e50:	e000      	b.n	8014e54 <clen+0xd6>
  return 0;
 8014e52:	2300      	movs	r3, #0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3718      	adds	r7, #24
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8014e5c:	b480      	push	{r7}
 8014e5e:	b085      	sub	sp, #20
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	68fa      	ldr	r2, [r7, #12]
 8014e6c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8014e6e:	e007      	b.n	8014e80 <skiptorn+0x24>
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	3301      	adds	r3, #1
 8014e74:	60fb      	str	r3, [r7, #12]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	605a      	str	r2, [r3, #4]
 8014e80:	68fa      	ldr	r2, [r7, #12]
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d207      	bcs.n	8014e98 <skiptorn+0x3c>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	2b0a      	cmp	r3, #10
 8014e8e:	d003      	beq.n	8014e98 <skiptorn+0x3c>
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	2b0d      	cmp	r3, #13
 8014e96:	d1eb      	bne.n	8014e70 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d208      	bcs.n	8014eb2 <skiptorn+0x56>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	2b0d      	cmp	r3, #13
 8014ea6:	d106      	bne.n	8014eb6 <skiptorn+0x5a>
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	2b0a      	cmp	r3, #10
 8014eb0:	d001      	beq.n	8014eb6 <skiptorn+0x5a>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e017      	b.n	8014ee6 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d206      	bcs.n	8014ecc <skiptorn+0x70>
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	2b0d      	cmp	r3, #13
 8014ec4:	d102      	bne.n	8014ecc <skiptorn+0x70>
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d205      	bcs.n	8014ee0 <skiptorn+0x84>
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	1c5a      	adds	r2, r3, #1
 8014ed8:	60fa      	str	r2, [r7, #12]
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	2b0a      	cmp	r3, #10
 8014ede:	d001      	beq.n	8014ee4 <skiptorn+0x88>
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	e000      	b.n	8014ee6 <skiptorn+0x8a>
  return s;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3714      	adds	r7, #20
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr

08014ef2 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b08a      	sub	sp, #40	@ 0x28
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	60f8      	str	r0, [r7, #12]
 8014efa:	60b9      	str	r1, [r7, #8]
 8014efc:	607a      	str	r2, [r7, #4]
 8014efe:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8014f00:	2300      	movs	r3, #0
 8014f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f04:	e09a      	b.n	801503c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8014f06:	2300      	movs	r3, #0
 8014f08:	61bb      	str	r3, [r7, #24]
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	61fb      	str	r3, [r7, #28]
 8014f0e:	2300      	movs	r3, #0
 8014f10:	613b      	str	r3, [r7, #16]
 8014f12:	2300      	movs	r3, #0
 8014f14:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d301      	bcc.n	8014f22 <mg_http_parse_headers+0x30>
 8014f1e:	2300      	movs	r3, #0
 8014f20:	e092      	b.n	8015048 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	2b0a      	cmp	r3, #10
 8014f28:	f000 808d 	beq.w	8015046 <mg_http_parse_headers+0x154>
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	2b0d      	cmp	r3, #13
 8014f32:	d105      	bne.n	8014f40 <mg_http_parse_headers+0x4e>
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	3301      	adds	r3, #1
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	2b0a      	cmp	r3, #10
 8014f3c:	f000 8083 	beq.w	8015046 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8014f44:	e007      	b.n	8014f56 <mg_http_parse_headers+0x64>
 8014f46:	68fa      	ldr	r2, [r7, #12]
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	60fb      	str	r3, [r7, #12]
 8014f4e:	69fa      	ldr	r2, [r7, #28]
 8014f50:	6a3b      	ldr	r3, [r7, #32]
 8014f52:	4413      	add	r3, r2
 8014f54:	61fb      	str	r3, [r7, #28]
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d20b      	bcs.n	8014f76 <mg_http_parse_headers+0x84>
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	781b      	ldrb	r3, [r3, #0]
 8014f62:	2b3a      	cmp	r3, #58	@ 0x3a
 8014f64:	d007      	beq.n	8014f76 <mg_http_parse_headers+0x84>
 8014f66:	68b9      	ldr	r1, [r7, #8]
 8014f68:	68f8      	ldr	r0, [r7, #12]
 8014f6a:	f7ff ff08 	bl	8014d7e <clen>
 8014f6e:	6238      	str	r0, [r7, #32]
 8014f70:	6a3b      	ldr	r3, [r7, #32]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d1e7      	bne.n	8014f46 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <mg_http_parse_headers+0x8e>
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	e063      	b.n	8015048 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d206      	bcs.n	8014f96 <mg_http_parse_headers+0xa4>
 8014f88:	68b9      	ldr	r1, [r7, #8]
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f7ff fef7 	bl	8014d7e <clen>
 8014f90:	4603      	mov	r3, r0
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d101      	bne.n	8014f9a <mg_http_parse_headers+0xa8>
 8014f96:	2300      	movs	r3, #0
 8014f98:	e056      	b.n	8015048 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	1c5a      	adds	r2, r3, #1
 8014f9e:	60fa      	str	r2, [r7, #12]
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	2b3a      	cmp	r3, #58	@ 0x3a
 8014fa4:	d004      	beq.n	8014fb0 <mg_http_parse_headers+0xbe>
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	e04e      	b.n	8015048 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	3301      	adds	r3, #1
 8014fae:	60fb      	str	r3, [r7, #12]
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d207      	bcs.n	8014fc8 <mg_http_parse_headers+0xd6>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	2b20      	cmp	r3, #32
 8014fbe:	d0f4      	beq.n	8014faa <mg_http_parse_headers+0xb8>
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	2b09      	cmp	r3, #9
 8014fc6:	d0f0      	beq.n	8014faa <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8014fc8:	f107 0310 	add.w	r3, r7, #16
 8014fcc:	461a      	mov	r2, r3
 8014fce:	68b9      	ldr	r1, [r7, #8]
 8014fd0:	68f8      	ldr	r0, [r7, #12]
 8014fd2:	f7ff ff43 	bl	8014e5c <skiptorn>
 8014fd6:	60f8      	str	r0, [r7, #12]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d104      	bne.n	8014fe8 <mg_http_parse_headers+0xf6>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	e032      	b.n	8015048 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	3b01      	subs	r3, #1
 8014fe6:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00d      	beq.n	801500a <mg_http_parse_headers+0x118>
 8014fee:	693a      	ldr	r2, [r7, #16]
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	4413      	add	r3, r2
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	2b20      	cmp	r3, #32
 8014ffa:	d0f2      	beq.n	8014fe2 <mg_http_parse_headers+0xf0>
 8014ffc:	693a      	ldr	r2, [r7, #16]
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	3b01      	subs	r3, #1
 8015002:	4413      	add	r3, r2
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	2b09      	cmp	r3, #9
 8015008:	d0eb      	beq.n	8014fe2 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500c:	011b      	lsls	r3, r3, #4
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	4413      	add	r3, r2
 8015012:	461a      	mov	r2, r3
 8015014:	f107 0318 	add.w	r3, r7, #24
 8015018:	e893 0003 	ldmia.w	r3, {r0, r1}
 801501c:	e882 0003 	stmia.w	r2, {r0, r1}
 8015020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015022:	011b      	lsls	r3, r3, #4
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	4413      	add	r3, r2
 8015028:	3308      	adds	r3, #8
 801502a:	f107 0210 	add.w	r2, r7, #16
 801502e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015032:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8015036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015038:	3301      	adds	r3, #1
 801503a:	627b      	str	r3, [r7, #36]	@ 0x24
 801503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	429a      	cmp	r2, r3
 8015042:	f4ff af60 	bcc.w	8014f06 <mg_http_parse_headers+0x14>
  }
  return true;
 8015046:	2301      	movs	r3, #1
}
 8015048:	4618      	mov	r0, r3
 801504a:	3728      	adds	r7, #40	@ 0x28
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8015050:	b580      	push	{r7, lr}
 8015052:	b090      	sub	sp, #64	@ 0x40
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 801505c:	68b9      	ldr	r1, [r7, #8]
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f7ff fdec 	bl	8014c3c <mg_http_get_request_len>
 8015064:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d003      	beq.n	8015074 <mg_http_parse+0x24>
 801506c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	4413      	add	r3, r2
 8015072:	e000      	b.n	8015076 <mg_http_parse+0x26>
 8015074:	2300      	movs	r3, #0
 8015076:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8015078:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801507c:	2100      	movs	r1, #0
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f00b fffe 	bl	8021080 <memset>
  if (req_len <= 0) return req_len;
 8015084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015086:	2b00      	cmp	r3, #0
 8015088:	dc01      	bgt.n	801508e <mg_http_parse+0x3e>
 801508a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801508c:	e13f      	b.n	801530e <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 80150aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80150b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80150ce:	e009      	b.n	80150e4 <mg_http_parse+0x94>
 80150d0:	68fa      	ldr	r2, [r7, #12]
 80150d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150d4:	4413      	add	r3, r2
 80150d6:	60fb      	str	r3, [r7, #12]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685a      	ldr	r2, [r3, #4]
 80150dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150de:	441a      	add	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	605a      	str	r2, [r3, #4]
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d20b      	bcs.n	8015104 <mg_http_parse+0xb4>
 80150ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80150ee:	68f8      	ldr	r0, [r7, #12]
 80150f0:	f7ff fe45 	bl	8014d7e <clen>
 80150f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80150f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1e9      	bne.n	80150d0 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80150fc:	e002      	b.n	8015104 <mg_http_parse+0xb4>
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	3301      	adds	r3, #1
 8015102:	60fb      	str	r3, [r7, #12]
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015108:	429a      	cmp	r2, r3
 801510a:	d203      	bcs.n	8015114 <mg_http_parse+0xc4>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	2b20      	cmp	r3, #32
 8015112:	d0f4      	beq.n	80150fe <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	68fa      	ldr	r2, [r7, #12]
 8015118:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 801511a:	e009      	b.n	8015130 <mg_http_parse+0xe0>
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015120:	4413      	add	r3, r2
 8015122:	60fb      	str	r3, [r7, #12]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	68da      	ldr	r2, [r3, #12]
 8015128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801512a:	441a      	add	r2, r3
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	60da      	str	r2, [r3, #12]
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015134:	429a      	cmp	r2, r3
 8015136:	d20b      	bcs.n	8015150 <mg_http_parse+0x100>
 8015138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801513a:	68f8      	ldr	r0, [r7, #12]
 801513c:	f7ff fe1f 	bl	8014d7e <clen>
 8015140:	6378      	str	r0, [r7, #52]	@ 0x34
 8015142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015144:	2b00      	cmp	r3, #0
 8015146:	d1e9      	bne.n	801511c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8015148:	e002      	b.n	8015150 <mg_http_parse+0x100>
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	3301      	adds	r3, #1
 801514e:	60fb      	str	r3, [r7, #12]
 8015150:	68fa      	ldr	r2, [r7, #12]
 8015152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015154:	429a      	cmp	r2, r3
 8015156:	d203      	bcs.n	8015160 <mg_http_parse+0x110>
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	2b20      	cmp	r3, #32
 801515e:	d0f4      	beq.n	801514a <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3318      	adds	r3, #24
 8015164:	461a      	mov	r2, r3
 8015166:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015168:	68f8      	ldr	r0, [r7, #12]
 801516a:	f7ff fe77 	bl	8014e5c <skiptorn>
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d101      	bne.n	801517a <mg_http_parse+0x12a>
 8015176:	2300      	movs	r3, #0
 8015178:	e0c9      	b.n	801530e <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6898      	ldr	r0, [r3, #8]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	461a      	mov	r2, r3
 8015184:	213f      	movs	r1, #63	@ 0x3f
 8015186:	f7eb f82b 	bl	80001e0 <memchr>
 801518a:	6338      	str	r0, [r7, #48]	@ 0x30
 801518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801518e:	2b00      	cmp	r3, #0
 8015190:	d015      	beq.n	80151be <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8015192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015194:	1c5a      	adds	r2, r3, #1
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	689a      	ldr	r2, [r3, #8]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	441a      	add	r2, r3
 80151a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151a6:	3301      	adds	r3, #1
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	461a      	mov	r2, r3
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	689b      	ldr	r3, [r3, #8]
 80151b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80151b6:	1ad3      	subs	r3, r2, r3
 80151b8:	461a      	mov	r2, r3
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d003      	beq.n	80151ce <mg_http_parse+0x17e>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d102      	bne.n	80151d4 <mg_http_parse+0x184>
 80151ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80151d2:	e09c      	b.n	801530e <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f103 0220 	add.w	r2, r3, #32
 80151da:	231e      	movs	r3, #30
 80151dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80151de:	68f8      	ldr	r0, [r7, #12]
 80151e0:	f7ff fe87 	bl	8014ef2 <mg_http_parse_headers>
 80151e4:	4603      	mov	r3, r0
 80151e6:	f083 0301 	eor.w	r3, r3, #1
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d002      	beq.n	80151f6 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80151f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80151f4:	e08b      	b.n	801530e <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80151f6:	4948      	ldr	r1, [pc, #288]	@ (8015318 <mg_http_parse+0x2c8>)
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f7ff fd6d 	bl	8014cd8 <mg_http_get_header>
 80151fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8015200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015202:	2b00      	cmp	r3, #0
 8015204:	d018      	beq.n	8015238 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 801520c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801520e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015212:	f7ff fb13 	bl	801483c <mg_to_size_t>
 8015216:	4603      	mov	r3, r0
 8015218:	f083 0301 	eor.w	r3, r3, #1
 801521c:	b2db      	uxtb	r3, r3
 801521e:	2b00      	cmp	r3, #0
 8015220:	d002      	beq.n	8015228 <mg_http_parse+0x1d8>
 8015222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015226:	e072      	b.n	801530e <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801522e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015230:	441a      	add	r2, r3
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	2205      	movs	r2, #5
 801523e:	4937      	ldr	r1, [pc, #220]	@ (801531c <mg_http_parse+0x2cc>)
 8015240:	4618      	mov	r0, r3
 8015242:	f7ff fabb 	bl	80147bc <mg_ncasecmp>
 8015246:	4603      	mov	r3, r0
 8015248:	2b00      	cmp	r3, #0
 801524a:	bf0c      	ite	eq
 801524c:	2301      	moveq	r3, #1
 801524e:	2300      	movne	r3, #0
 8015250:	b2db      	uxtb	r3, r3
 8015252:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801525a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801525e:	d12a      	bne.n	80152b6 <mg_http_parse+0x266>
 8015260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015262:	2b00      	cmp	r3, #0
 8015264:	d127      	bne.n	80152b6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8015266:	f107 0310 	add.w	r3, r7, #16
 801526a:	492d      	ldr	r1, [pc, #180]	@ (8015320 <mg_http_parse+0x2d0>)
 801526c:	4618      	mov	r0, r3
 801526e:	f009 ff79 	bl	801f164 <mg_str_s>
 8015272:	6879      	ldr	r1, [r7, #4]
 8015274:	f107 0310 	add.w	r3, r7, #16
 8015278:	cb0c      	ldmia	r3, {r2, r3}
 801527a:	c903      	ldmia	r1, {r0, r1}
 801527c:	f009 fffe 	bl	801f27c <mg_strcasecmp>
 8015280:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8015282:	2b00      	cmp	r3, #0
 8015284:	d017      	beq.n	80152b6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8015286:	f107 0318 	add.w	r3, r7, #24
 801528a:	4926      	ldr	r1, [pc, #152]	@ (8015324 <mg_http_parse+0x2d4>)
 801528c:	4618      	mov	r0, r3
 801528e:	f009 ff69 	bl	801f164 <mg_str_s>
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	f107 0318 	add.w	r3, r7, #24
 8015298:	cb0c      	ldmia	r3, {r2, r3}
 801529a:	c903      	ldmia	r1, {r0, r1}
 801529c:	f009 ffee 	bl	801f27c <mg_strcasecmp>
 80152a0:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d007      	beq.n	80152b6 <mg_http_parse+0x266>
    hm->body.len = 0;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80152ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80152bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80152c0:	d11b      	bne.n	80152fa <mg_http_parse+0x2aa>
 80152c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d018      	beq.n	80152fa <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 80152c8:	f107 0320 	add.w	r3, r7, #32
 80152cc:	4916      	ldr	r1, [pc, #88]	@ (8015328 <mg_http_parse+0x2d8>)
 80152ce:	4618      	mov	r0, r3
 80152d0:	f009 ff48 	bl	801f164 <mg_str_s>
 80152d4:	6879      	ldr	r1, [r7, #4]
 80152d6:	f107 0320 	add.w	r3, r7, #32
 80152da:	cb0c      	ldmia	r3, {r2, r3}
 80152dc:	3108      	adds	r1, #8
 80152de:	c903      	ldmia	r1, {r0, r1}
 80152e0:	f009 ffcc 	bl	801f27c <mg_strcasecmp>
 80152e4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d107      	bne.n	80152fa <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2200      	movs	r2, #0
 80152ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80152f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8015300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015302:	429a      	cmp	r2, r3
 8015304:	d202      	bcs.n	801530c <mg_http_parse+0x2bc>
 8015306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801530a:	e000      	b.n	801530e <mg_http_parse+0x2be>

  return req_len;
 801530c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801530e:	4618      	mov	r0, r3
 8015310:	3740      	adds	r7, #64	@ 0x40
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	08024a78 	.word	0x08024a78
 801531c:	08024a88 	.word	0x08024a88
 8015320:	08024a90 	.word	0x08024a90
 8015324:	08024a94 	.word	0x08024a94
 8015328:	08024a9c 	.word	0x08024a9c

0801532c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	3b64      	subs	r3, #100	@ 0x64
 8015338:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801533c:	4293      	cmp	r3, r2
 801533e:	f200 8469 	bhi.w	8015c14 <mg_http_status_code_str+0x8e8>
 8015342:	a101      	add	r1, pc, #4	@ (adr r1, 8015348 <mg_http_status_code_str+0x1c>)
 8015344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015348:	08015b19 	.word	0x08015b19
 801534c:	08015b1d 	.word	0x08015b1d
 8015350:	08015b21 	.word	0x08015b21
 8015354:	08015c15 	.word	0x08015c15
 8015358:	08015c15 	.word	0x08015c15
 801535c:	08015c15 	.word	0x08015c15
 8015360:	08015c15 	.word	0x08015c15
 8015364:	08015c15 	.word	0x08015c15
 8015368:	08015c15 	.word	0x08015c15
 801536c:	08015c15 	.word	0x08015c15
 8015370:	08015c15 	.word	0x08015c15
 8015374:	08015c15 	.word	0x08015c15
 8015378:	08015c15 	.word	0x08015c15
 801537c:	08015c15 	.word	0x08015c15
 8015380:	08015c15 	.word	0x08015c15
 8015384:	08015c15 	.word	0x08015c15
 8015388:	08015c15 	.word	0x08015c15
 801538c:	08015c15 	.word	0x08015c15
 8015390:	08015c15 	.word	0x08015c15
 8015394:	08015c15 	.word	0x08015c15
 8015398:	08015c15 	.word	0x08015c15
 801539c:	08015c15 	.word	0x08015c15
 80153a0:	08015c15 	.word	0x08015c15
 80153a4:	08015c15 	.word	0x08015c15
 80153a8:	08015c15 	.word	0x08015c15
 80153ac:	08015c15 	.word	0x08015c15
 80153b0:	08015c15 	.word	0x08015c15
 80153b4:	08015c15 	.word	0x08015c15
 80153b8:	08015c15 	.word	0x08015c15
 80153bc:	08015c15 	.word	0x08015c15
 80153c0:	08015c15 	.word	0x08015c15
 80153c4:	08015c15 	.word	0x08015c15
 80153c8:	08015c15 	.word	0x08015c15
 80153cc:	08015c15 	.word	0x08015c15
 80153d0:	08015c15 	.word	0x08015c15
 80153d4:	08015c15 	.word	0x08015c15
 80153d8:	08015c15 	.word	0x08015c15
 80153dc:	08015c15 	.word	0x08015c15
 80153e0:	08015c15 	.word	0x08015c15
 80153e4:	08015c15 	.word	0x08015c15
 80153e8:	08015c15 	.word	0x08015c15
 80153ec:	08015c15 	.word	0x08015c15
 80153f0:	08015c15 	.word	0x08015c15
 80153f4:	08015c15 	.word	0x08015c15
 80153f8:	08015c15 	.word	0x08015c15
 80153fc:	08015c15 	.word	0x08015c15
 8015400:	08015c15 	.word	0x08015c15
 8015404:	08015c15 	.word	0x08015c15
 8015408:	08015c15 	.word	0x08015c15
 801540c:	08015c15 	.word	0x08015c15
 8015410:	08015c15 	.word	0x08015c15
 8015414:	08015c15 	.word	0x08015c15
 8015418:	08015c15 	.word	0x08015c15
 801541c:	08015c15 	.word	0x08015c15
 8015420:	08015c15 	.word	0x08015c15
 8015424:	08015c15 	.word	0x08015c15
 8015428:	08015c15 	.word	0x08015c15
 801542c:	08015c15 	.word	0x08015c15
 8015430:	08015c15 	.word	0x08015c15
 8015434:	08015c15 	.word	0x08015c15
 8015438:	08015c15 	.word	0x08015c15
 801543c:	08015c15 	.word	0x08015c15
 8015440:	08015c15 	.word	0x08015c15
 8015444:	08015c15 	.word	0x08015c15
 8015448:	08015c15 	.word	0x08015c15
 801544c:	08015c15 	.word	0x08015c15
 8015450:	08015c15 	.word	0x08015c15
 8015454:	08015c15 	.word	0x08015c15
 8015458:	08015c15 	.word	0x08015c15
 801545c:	08015c15 	.word	0x08015c15
 8015460:	08015c15 	.word	0x08015c15
 8015464:	08015c15 	.word	0x08015c15
 8015468:	08015c15 	.word	0x08015c15
 801546c:	08015c15 	.word	0x08015c15
 8015470:	08015c15 	.word	0x08015c15
 8015474:	08015c15 	.word	0x08015c15
 8015478:	08015c15 	.word	0x08015c15
 801547c:	08015c15 	.word	0x08015c15
 8015480:	08015c15 	.word	0x08015c15
 8015484:	08015c15 	.word	0x08015c15
 8015488:	08015c15 	.word	0x08015c15
 801548c:	08015c15 	.word	0x08015c15
 8015490:	08015c15 	.word	0x08015c15
 8015494:	08015c15 	.word	0x08015c15
 8015498:	08015c15 	.word	0x08015c15
 801549c:	08015c15 	.word	0x08015c15
 80154a0:	08015c15 	.word	0x08015c15
 80154a4:	08015c15 	.word	0x08015c15
 80154a8:	08015c15 	.word	0x08015c15
 80154ac:	08015c15 	.word	0x08015c15
 80154b0:	08015c15 	.word	0x08015c15
 80154b4:	08015c15 	.word	0x08015c15
 80154b8:	08015c15 	.word	0x08015c15
 80154bc:	08015c15 	.word	0x08015c15
 80154c0:	08015c15 	.word	0x08015c15
 80154c4:	08015c15 	.word	0x08015c15
 80154c8:	08015c15 	.word	0x08015c15
 80154cc:	08015c15 	.word	0x08015c15
 80154d0:	08015c15 	.word	0x08015c15
 80154d4:	08015c15 	.word	0x08015c15
 80154d8:	08015b25 	.word	0x08015b25
 80154dc:	08015b29 	.word	0x08015b29
 80154e0:	08015b2d 	.word	0x08015b2d
 80154e4:	08015b31 	.word	0x08015b31
 80154e8:	08015b35 	.word	0x08015b35
 80154ec:	08015b39 	.word	0x08015b39
 80154f0:	08015b3d 	.word	0x08015b3d
 80154f4:	08015b41 	.word	0x08015b41
 80154f8:	08015b45 	.word	0x08015b45
 80154fc:	08015c15 	.word	0x08015c15
 8015500:	08015c15 	.word	0x08015c15
 8015504:	08015c15 	.word	0x08015c15
 8015508:	08015c15 	.word	0x08015c15
 801550c:	08015c15 	.word	0x08015c15
 8015510:	08015c15 	.word	0x08015c15
 8015514:	08015c15 	.word	0x08015c15
 8015518:	08015c15 	.word	0x08015c15
 801551c:	08015c15 	.word	0x08015c15
 8015520:	08015c15 	.word	0x08015c15
 8015524:	08015c15 	.word	0x08015c15
 8015528:	08015c15 	.word	0x08015c15
 801552c:	08015c15 	.word	0x08015c15
 8015530:	08015c15 	.word	0x08015c15
 8015534:	08015c15 	.word	0x08015c15
 8015538:	08015c15 	.word	0x08015c15
 801553c:	08015c15 	.word	0x08015c15
 8015540:	08015b49 	.word	0x08015b49
 8015544:	08015c15 	.word	0x08015c15
 8015548:	08015c15 	.word	0x08015c15
 801554c:	08015c15 	.word	0x08015c15
 8015550:	08015c15 	.word	0x08015c15
 8015554:	08015c15 	.word	0x08015c15
 8015558:	08015c15 	.word	0x08015c15
 801555c:	08015c15 	.word	0x08015c15
 8015560:	08015c15 	.word	0x08015c15
 8015564:	08015c15 	.word	0x08015c15
 8015568:	08015c15 	.word	0x08015c15
 801556c:	08015c15 	.word	0x08015c15
 8015570:	08015c15 	.word	0x08015c15
 8015574:	08015c15 	.word	0x08015c15
 8015578:	08015c15 	.word	0x08015c15
 801557c:	08015c15 	.word	0x08015c15
 8015580:	08015c15 	.word	0x08015c15
 8015584:	08015c15 	.word	0x08015c15
 8015588:	08015c15 	.word	0x08015c15
 801558c:	08015c15 	.word	0x08015c15
 8015590:	08015c15 	.word	0x08015c15
 8015594:	08015c15 	.word	0x08015c15
 8015598:	08015c15 	.word	0x08015c15
 801559c:	08015c15 	.word	0x08015c15
 80155a0:	08015c15 	.word	0x08015c15
 80155a4:	08015c15 	.word	0x08015c15
 80155a8:	08015c15 	.word	0x08015c15
 80155ac:	08015c15 	.word	0x08015c15
 80155b0:	08015c15 	.word	0x08015c15
 80155b4:	08015c15 	.word	0x08015c15
 80155b8:	08015c15 	.word	0x08015c15
 80155bc:	08015c15 	.word	0x08015c15
 80155c0:	08015c15 	.word	0x08015c15
 80155c4:	08015c15 	.word	0x08015c15
 80155c8:	08015c15 	.word	0x08015c15
 80155cc:	08015c15 	.word	0x08015c15
 80155d0:	08015c15 	.word	0x08015c15
 80155d4:	08015c15 	.word	0x08015c15
 80155d8:	08015c15 	.word	0x08015c15
 80155dc:	08015c15 	.word	0x08015c15
 80155e0:	08015c15 	.word	0x08015c15
 80155e4:	08015c15 	.word	0x08015c15
 80155e8:	08015c15 	.word	0x08015c15
 80155ec:	08015c15 	.word	0x08015c15
 80155f0:	08015c15 	.word	0x08015c15
 80155f4:	08015c15 	.word	0x08015c15
 80155f8:	08015c15 	.word	0x08015c15
 80155fc:	08015c15 	.word	0x08015c15
 8015600:	08015c15 	.word	0x08015c15
 8015604:	08015c15 	.word	0x08015c15
 8015608:	08015c15 	.word	0x08015c15
 801560c:	08015c15 	.word	0x08015c15
 8015610:	08015c15 	.word	0x08015c15
 8015614:	08015c15 	.word	0x08015c15
 8015618:	08015c15 	.word	0x08015c15
 801561c:	08015c15 	.word	0x08015c15
 8015620:	08015c15 	.word	0x08015c15
 8015624:	08015c15 	.word	0x08015c15
 8015628:	08015c15 	.word	0x08015c15
 801562c:	08015c15 	.word	0x08015c15
 8015630:	08015c15 	.word	0x08015c15
 8015634:	08015c15 	.word	0x08015c15
 8015638:	08015c15 	.word	0x08015c15
 801563c:	08015c15 	.word	0x08015c15
 8015640:	08015c15 	.word	0x08015c15
 8015644:	08015c15 	.word	0x08015c15
 8015648:	08015c15 	.word	0x08015c15
 801564c:	08015c15 	.word	0x08015c15
 8015650:	08015c15 	.word	0x08015c15
 8015654:	08015c15 	.word	0x08015c15
 8015658:	08015c15 	.word	0x08015c15
 801565c:	08015c15 	.word	0x08015c15
 8015660:	08015c15 	.word	0x08015c15
 8015664:	08015c15 	.word	0x08015c15
 8015668:	08015b4d 	.word	0x08015b4d
 801566c:	08015b51 	.word	0x08015b51
 8015670:	08015b55 	.word	0x08015b55
 8015674:	08015b59 	.word	0x08015b59
 8015678:	08015b5d 	.word	0x08015b5d
 801567c:	08015b61 	.word	0x08015b61
 8015680:	08015c15 	.word	0x08015c15
 8015684:	08015b65 	.word	0x08015b65
 8015688:	08015b69 	.word	0x08015b69
 801568c:	08015c15 	.word	0x08015c15
 8015690:	08015c15 	.word	0x08015c15
 8015694:	08015c15 	.word	0x08015c15
 8015698:	08015c15 	.word	0x08015c15
 801569c:	08015c15 	.word	0x08015c15
 80156a0:	08015c15 	.word	0x08015c15
 80156a4:	08015c15 	.word	0x08015c15
 80156a8:	08015c15 	.word	0x08015c15
 80156ac:	08015c15 	.word	0x08015c15
 80156b0:	08015c15 	.word	0x08015c15
 80156b4:	08015c15 	.word	0x08015c15
 80156b8:	08015c15 	.word	0x08015c15
 80156bc:	08015c15 	.word	0x08015c15
 80156c0:	08015c15 	.word	0x08015c15
 80156c4:	08015c15 	.word	0x08015c15
 80156c8:	08015c15 	.word	0x08015c15
 80156cc:	08015c15 	.word	0x08015c15
 80156d0:	08015c15 	.word	0x08015c15
 80156d4:	08015c15 	.word	0x08015c15
 80156d8:	08015c15 	.word	0x08015c15
 80156dc:	08015c15 	.word	0x08015c15
 80156e0:	08015c15 	.word	0x08015c15
 80156e4:	08015c15 	.word	0x08015c15
 80156e8:	08015c15 	.word	0x08015c15
 80156ec:	08015c15 	.word	0x08015c15
 80156f0:	08015c15 	.word	0x08015c15
 80156f4:	08015c15 	.word	0x08015c15
 80156f8:	08015c15 	.word	0x08015c15
 80156fc:	08015c15 	.word	0x08015c15
 8015700:	08015c15 	.word	0x08015c15
 8015704:	08015c15 	.word	0x08015c15
 8015708:	08015c15 	.word	0x08015c15
 801570c:	08015c15 	.word	0x08015c15
 8015710:	08015c15 	.word	0x08015c15
 8015714:	08015c15 	.word	0x08015c15
 8015718:	08015c15 	.word	0x08015c15
 801571c:	08015c15 	.word	0x08015c15
 8015720:	08015c15 	.word	0x08015c15
 8015724:	08015c15 	.word	0x08015c15
 8015728:	08015c15 	.word	0x08015c15
 801572c:	08015c15 	.word	0x08015c15
 8015730:	08015c15 	.word	0x08015c15
 8015734:	08015c15 	.word	0x08015c15
 8015738:	08015c15 	.word	0x08015c15
 801573c:	08015c15 	.word	0x08015c15
 8015740:	08015c15 	.word	0x08015c15
 8015744:	08015c15 	.word	0x08015c15
 8015748:	08015c15 	.word	0x08015c15
 801574c:	08015c15 	.word	0x08015c15
 8015750:	08015c15 	.word	0x08015c15
 8015754:	08015c15 	.word	0x08015c15
 8015758:	08015c15 	.word	0x08015c15
 801575c:	08015c15 	.word	0x08015c15
 8015760:	08015c15 	.word	0x08015c15
 8015764:	08015c15 	.word	0x08015c15
 8015768:	08015c15 	.word	0x08015c15
 801576c:	08015c15 	.word	0x08015c15
 8015770:	08015c15 	.word	0x08015c15
 8015774:	08015c15 	.word	0x08015c15
 8015778:	08015c15 	.word	0x08015c15
 801577c:	08015c15 	.word	0x08015c15
 8015780:	08015c15 	.word	0x08015c15
 8015784:	08015c15 	.word	0x08015c15
 8015788:	08015c15 	.word	0x08015c15
 801578c:	08015c15 	.word	0x08015c15
 8015790:	08015c15 	.word	0x08015c15
 8015794:	08015c15 	.word	0x08015c15
 8015798:	08015c15 	.word	0x08015c15
 801579c:	08015c15 	.word	0x08015c15
 80157a0:	08015c15 	.word	0x08015c15
 80157a4:	08015c15 	.word	0x08015c15
 80157a8:	08015c15 	.word	0x08015c15
 80157ac:	08015c15 	.word	0x08015c15
 80157b0:	08015c15 	.word	0x08015c15
 80157b4:	08015c15 	.word	0x08015c15
 80157b8:	08015c15 	.word	0x08015c15
 80157bc:	08015c15 	.word	0x08015c15
 80157c0:	08015c15 	.word	0x08015c15
 80157c4:	08015c15 	.word	0x08015c15
 80157c8:	08015c15 	.word	0x08015c15
 80157cc:	08015c15 	.word	0x08015c15
 80157d0:	08015c15 	.word	0x08015c15
 80157d4:	08015c15 	.word	0x08015c15
 80157d8:	08015c15 	.word	0x08015c15
 80157dc:	08015c15 	.word	0x08015c15
 80157e0:	08015c15 	.word	0x08015c15
 80157e4:	08015c15 	.word	0x08015c15
 80157e8:	08015c15 	.word	0x08015c15
 80157ec:	08015c15 	.word	0x08015c15
 80157f0:	08015c15 	.word	0x08015c15
 80157f4:	08015c15 	.word	0x08015c15
 80157f8:	08015b6d 	.word	0x08015b6d
 80157fc:	08015b71 	.word	0x08015b71
 8015800:	08015b75 	.word	0x08015b75
 8015804:	08015b79 	.word	0x08015b79
 8015808:	08015b7d 	.word	0x08015b7d
 801580c:	08015b81 	.word	0x08015b81
 8015810:	08015b85 	.word	0x08015b85
 8015814:	08015b89 	.word	0x08015b89
 8015818:	08015b8d 	.word	0x08015b8d
 801581c:	08015b91 	.word	0x08015b91
 8015820:	08015b95 	.word	0x08015b95
 8015824:	08015b99 	.word	0x08015b99
 8015828:	08015b9d 	.word	0x08015b9d
 801582c:	08015ba1 	.word	0x08015ba1
 8015830:	08015ba5 	.word	0x08015ba5
 8015834:	08015ba9 	.word	0x08015ba9
 8015838:	08015bad 	.word	0x08015bad
 801583c:	08015bb1 	.word	0x08015bb1
 8015840:	08015bb5 	.word	0x08015bb5
 8015844:	08015c15 	.word	0x08015c15
 8015848:	08015c15 	.word	0x08015c15
 801584c:	08015bb9 	.word	0x08015bb9
 8015850:	08015bbd 	.word	0x08015bbd
 8015854:	08015bc1 	.word	0x08015bc1
 8015858:	08015bc5 	.word	0x08015bc5
 801585c:	08015c15 	.word	0x08015c15
 8015860:	08015bc9 	.word	0x08015bc9
 8015864:	08015c15 	.word	0x08015c15
 8015868:	08015bcd 	.word	0x08015bcd
 801586c:	08015bd1 	.word	0x08015bd1
 8015870:	08015c15 	.word	0x08015c15
 8015874:	08015bd5 	.word	0x08015bd5
 8015878:	08015c15 	.word	0x08015c15
 801587c:	08015c15 	.word	0x08015c15
 8015880:	08015c15 	.word	0x08015c15
 8015884:	08015c15 	.word	0x08015c15
 8015888:	08015c15 	.word	0x08015c15
 801588c:	08015c15 	.word	0x08015c15
 8015890:	08015c15 	.word	0x08015c15
 8015894:	08015c15 	.word	0x08015c15
 8015898:	08015c15 	.word	0x08015c15
 801589c:	08015c15 	.word	0x08015c15
 80158a0:	08015c15 	.word	0x08015c15
 80158a4:	08015c15 	.word	0x08015c15
 80158a8:	08015bd9 	.word	0x08015bd9
 80158ac:	08015c15 	.word	0x08015c15
 80158b0:	08015c15 	.word	0x08015c15
 80158b4:	08015c15 	.word	0x08015c15
 80158b8:	08015c15 	.word	0x08015c15
 80158bc:	08015c15 	.word	0x08015c15
 80158c0:	08015c15 	.word	0x08015c15
 80158c4:	08015bdd 	.word	0x08015bdd
 80158c8:	08015c15 	.word	0x08015c15
 80158cc:	08015c15 	.word	0x08015c15
 80158d0:	08015c15 	.word	0x08015c15
 80158d4:	08015c15 	.word	0x08015c15
 80158d8:	08015c15 	.word	0x08015c15
 80158dc:	08015c15 	.word	0x08015c15
 80158e0:	08015c15 	.word	0x08015c15
 80158e4:	08015c15 	.word	0x08015c15
 80158e8:	08015c15 	.word	0x08015c15
 80158ec:	08015c15 	.word	0x08015c15
 80158f0:	08015c15 	.word	0x08015c15
 80158f4:	08015c15 	.word	0x08015c15
 80158f8:	08015c15 	.word	0x08015c15
 80158fc:	08015c15 	.word	0x08015c15
 8015900:	08015c15 	.word	0x08015c15
 8015904:	08015c15 	.word	0x08015c15
 8015908:	08015c15 	.word	0x08015c15
 801590c:	08015c15 	.word	0x08015c15
 8015910:	08015c15 	.word	0x08015c15
 8015914:	08015c15 	.word	0x08015c15
 8015918:	08015c15 	.word	0x08015c15
 801591c:	08015c15 	.word	0x08015c15
 8015920:	08015c15 	.word	0x08015c15
 8015924:	08015c15 	.word	0x08015c15
 8015928:	08015c15 	.word	0x08015c15
 801592c:	08015c15 	.word	0x08015c15
 8015930:	08015c15 	.word	0x08015c15
 8015934:	08015c15 	.word	0x08015c15
 8015938:	08015c15 	.word	0x08015c15
 801593c:	08015c15 	.word	0x08015c15
 8015940:	08015c15 	.word	0x08015c15
 8015944:	08015c15 	.word	0x08015c15
 8015948:	08015c15 	.word	0x08015c15
 801594c:	08015c15 	.word	0x08015c15
 8015950:	08015c15 	.word	0x08015c15
 8015954:	08015c15 	.word	0x08015c15
 8015958:	08015c15 	.word	0x08015c15
 801595c:	08015c15 	.word	0x08015c15
 8015960:	08015c15 	.word	0x08015c15
 8015964:	08015c15 	.word	0x08015c15
 8015968:	08015c15 	.word	0x08015c15
 801596c:	08015c15 	.word	0x08015c15
 8015970:	08015c15 	.word	0x08015c15
 8015974:	08015c15 	.word	0x08015c15
 8015978:	08015c15 	.word	0x08015c15
 801597c:	08015c15 	.word	0x08015c15
 8015980:	08015c15 	.word	0x08015c15
 8015984:	08015be1 	.word	0x08015be1
 8015988:	08015be5 	.word	0x08015be5
 801598c:	08015be9 	.word	0x08015be9
 8015990:	08015bed 	.word	0x08015bed
 8015994:	08015bf1 	.word	0x08015bf1
 8015998:	08015bf5 	.word	0x08015bf5
 801599c:	08015bf9 	.word	0x08015bf9
 80159a0:	08015bfd 	.word	0x08015bfd
 80159a4:	08015c01 	.word	0x08015c01
 80159a8:	08015c05 	.word	0x08015c05
 80159ac:	08015c15 	.word	0x08015c15
 80159b0:	08015c09 	.word	0x08015c09
 80159b4:	08015c0d 	.word	0x08015c0d
 80159b8:	08015c15 	.word	0x08015c15
 80159bc:	08015c15 	.word	0x08015c15
 80159c0:	08015c15 	.word	0x08015c15
 80159c4:	08015c15 	.word	0x08015c15
 80159c8:	08015c15 	.word	0x08015c15
 80159cc:	08015c15 	.word	0x08015c15
 80159d0:	08015c15 	.word	0x08015c15
 80159d4:	08015c15 	.word	0x08015c15
 80159d8:	08015c15 	.word	0x08015c15
 80159dc:	08015c15 	.word	0x08015c15
 80159e0:	08015c15 	.word	0x08015c15
 80159e4:	08015c15 	.word	0x08015c15
 80159e8:	08015c15 	.word	0x08015c15
 80159ec:	08015c15 	.word	0x08015c15
 80159f0:	08015c15 	.word	0x08015c15
 80159f4:	08015c15 	.word	0x08015c15
 80159f8:	08015c15 	.word	0x08015c15
 80159fc:	08015c15 	.word	0x08015c15
 8015a00:	08015c15 	.word	0x08015c15
 8015a04:	08015c15 	.word	0x08015c15
 8015a08:	08015c15 	.word	0x08015c15
 8015a0c:	08015c15 	.word	0x08015c15
 8015a10:	08015c15 	.word	0x08015c15
 8015a14:	08015c15 	.word	0x08015c15
 8015a18:	08015c15 	.word	0x08015c15
 8015a1c:	08015c15 	.word	0x08015c15
 8015a20:	08015c15 	.word	0x08015c15
 8015a24:	08015c15 	.word	0x08015c15
 8015a28:	08015c15 	.word	0x08015c15
 8015a2c:	08015c15 	.word	0x08015c15
 8015a30:	08015c15 	.word	0x08015c15
 8015a34:	08015c15 	.word	0x08015c15
 8015a38:	08015c15 	.word	0x08015c15
 8015a3c:	08015c15 	.word	0x08015c15
 8015a40:	08015c15 	.word	0x08015c15
 8015a44:	08015c15 	.word	0x08015c15
 8015a48:	08015c15 	.word	0x08015c15
 8015a4c:	08015c15 	.word	0x08015c15
 8015a50:	08015c15 	.word	0x08015c15
 8015a54:	08015c15 	.word	0x08015c15
 8015a58:	08015c15 	.word	0x08015c15
 8015a5c:	08015c15 	.word	0x08015c15
 8015a60:	08015c15 	.word	0x08015c15
 8015a64:	08015c15 	.word	0x08015c15
 8015a68:	08015c15 	.word	0x08015c15
 8015a6c:	08015c15 	.word	0x08015c15
 8015a70:	08015c15 	.word	0x08015c15
 8015a74:	08015c15 	.word	0x08015c15
 8015a78:	08015c15 	.word	0x08015c15
 8015a7c:	08015c15 	.word	0x08015c15
 8015a80:	08015c15 	.word	0x08015c15
 8015a84:	08015c15 	.word	0x08015c15
 8015a88:	08015c15 	.word	0x08015c15
 8015a8c:	08015c15 	.word	0x08015c15
 8015a90:	08015c15 	.word	0x08015c15
 8015a94:	08015c15 	.word	0x08015c15
 8015a98:	08015c15 	.word	0x08015c15
 8015a9c:	08015c15 	.word	0x08015c15
 8015aa0:	08015c15 	.word	0x08015c15
 8015aa4:	08015c15 	.word	0x08015c15
 8015aa8:	08015c15 	.word	0x08015c15
 8015aac:	08015c15 	.word	0x08015c15
 8015ab0:	08015c15 	.word	0x08015c15
 8015ab4:	08015c15 	.word	0x08015c15
 8015ab8:	08015c15 	.word	0x08015c15
 8015abc:	08015c15 	.word	0x08015c15
 8015ac0:	08015c15 	.word	0x08015c15
 8015ac4:	08015c15 	.word	0x08015c15
 8015ac8:	08015c15 	.word	0x08015c15
 8015acc:	08015c15 	.word	0x08015c15
 8015ad0:	08015c15 	.word	0x08015c15
 8015ad4:	08015c15 	.word	0x08015c15
 8015ad8:	08015c15 	.word	0x08015c15
 8015adc:	08015c15 	.word	0x08015c15
 8015ae0:	08015c15 	.word	0x08015c15
 8015ae4:	08015c15 	.word	0x08015c15
 8015ae8:	08015c15 	.word	0x08015c15
 8015aec:	08015c15 	.word	0x08015c15
 8015af0:	08015c15 	.word	0x08015c15
 8015af4:	08015c15 	.word	0x08015c15
 8015af8:	08015c15 	.word	0x08015c15
 8015afc:	08015c15 	.word	0x08015c15
 8015b00:	08015c15 	.word	0x08015c15
 8015b04:	08015c15 	.word	0x08015c15
 8015b08:	08015c15 	.word	0x08015c15
 8015b0c:	08015c15 	.word	0x08015c15
 8015b10:	08015c15 	.word	0x08015c15
 8015b14:	08015c11 	.word	0x08015c11
    case 100: return "Continue";
 8015b18:	4b42      	ldr	r3, [pc, #264]	@ (8015c24 <mg_http_status_code_str+0x8f8>)
 8015b1a:	e07c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8015b1c:	4b42      	ldr	r3, [pc, #264]	@ (8015c28 <mg_http_status_code_str+0x8fc>)
 8015b1e:	e07a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8015b20:	4b42      	ldr	r3, [pc, #264]	@ (8015c2c <mg_http_status_code_str+0x900>)
 8015b22:	e078      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8015b24:	4b42      	ldr	r3, [pc, #264]	@ (8015c30 <mg_http_status_code_str+0x904>)
 8015b26:	e076      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8015b28:	4b42      	ldr	r3, [pc, #264]	@ (8015c34 <mg_http_status_code_str+0x908>)
 8015b2a:	e074      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8015b2c:	4b42      	ldr	r3, [pc, #264]	@ (8015c38 <mg_http_status_code_str+0x90c>)
 8015b2e:	e072      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8015b30:	4b42      	ldr	r3, [pc, #264]	@ (8015c3c <mg_http_status_code_str+0x910>)
 8015b32:	e070      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8015b34:	4b42      	ldr	r3, [pc, #264]	@ (8015c40 <mg_http_status_code_str+0x914>)
 8015b36:	e06e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8015b38:	4b42      	ldr	r3, [pc, #264]	@ (8015c44 <mg_http_status_code_str+0x918>)
 8015b3a:	e06c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8015b3c:	4b42      	ldr	r3, [pc, #264]	@ (8015c48 <mg_http_status_code_str+0x91c>)
 8015b3e:	e06a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8015b40:	4b42      	ldr	r3, [pc, #264]	@ (8015c4c <mg_http_status_code_str+0x920>)
 8015b42:	e068      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8015b44:	4b42      	ldr	r3, [pc, #264]	@ (8015c50 <mg_http_status_code_str+0x924>)
 8015b46:	e066      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8015b48:	4b42      	ldr	r3, [pc, #264]	@ (8015c54 <mg_http_status_code_str+0x928>)
 8015b4a:	e064      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8015b4c:	4b42      	ldr	r3, [pc, #264]	@ (8015c58 <mg_http_status_code_str+0x92c>)
 8015b4e:	e062      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8015b50:	4b42      	ldr	r3, [pc, #264]	@ (8015c5c <mg_http_status_code_str+0x930>)
 8015b52:	e060      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8015b54:	4b42      	ldr	r3, [pc, #264]	@ (8015c60 <mg_http_status_code_str+0x934>)
 8015b56:	e05e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8015b58:	4b42      	ldr	r3, [pc, #264]	@ (8015c64 <mg_http_status_code_str+0x938>)
 8015b5a:	e05c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8015b5c:	4b42      	ldr	r3, [pc, #264]	@ (8015c68 <mg_http_status_code_str+0x93c>)
 8015b5e:	e05a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8015b60:	4b42      	ldr	r3, [pc, #264]	@ (8015c6c <mg_http_status_code_str+0x940>)
 8015b62:	e058      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8015b64:	4b42      	ldr	r3, [pc, #264]	@ (8015c70 <mg_http_status_code_str+0x944>)
 8015b66:	e056      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8015b68:	4b42      	ldr	r3, [pc, #264]	@ (8015c74 <mg_http_status_code_str+0x948>)
 8015b6a:	e054      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8015b6c:	4b42      	ldr	r3, [pc, #264]	@ (8015c78 <mg_http_status_code_str+0x94c>)
 8015b6e:	e052      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8015b70:	4b42      	ldr	r3, [pc, #264]	@ (8015c7c <mg_http_status_code_str+0x950>)
 8015b72:	e050      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8015b74:	4b42      	ldr	r3, [pc, #264]	@ (8015c80 <mg_http_status_code_str+0x954>)
 8015b76:	e04e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8015b78:	4b42      	ldr	r3, [pc, #264]	@ (8015c84 <mg_http_status_code_str+0x958>)
 8015b7a:	e04c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8015b7c:	4b42      	ldr	r3, [pc, #264]	@ (8015c88 <mg_http_status_code_str+0x95c>)
 8015b7e:	e04a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8015b80:	4b42      	ldr	r3, [pc, #264]	@ (8015c8c <mg_http_status_code_str+0x960>)
 8015b82:	e048      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8015b84:	4b42      	ldr	r3, [pc, #264]	@ (8015c90 <mg_http_status_code_str+0x964>)
 8015b86:	e046      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8015b88:	4b42      	ldr	r3, [pc, #264]	@ (8015c94 <mg_http_status_code_str+0x968>)
 8015b8a:	e044      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8015b8c:	4b42      	ldr	r3, [pc, #264]	@ (8015c98 <mg_http_status_code_str+0x96c>)
 8015b8e:	e042      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8015b90:	4b42      	ldr	r3, [pc, #264]	@ (8015c9c <mg_http_status_code_str+0x970>)
 8015b92:	e040      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8015b94:	4b42      	ldr	r3, [pc, #264]	@ (8015ca0 <mg_http_status_code_str+0x974>)
 8015b96:	e03e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8015b98:	4b42      	ldr	r3, [pc, #264]	@ (8015ca4 <mg_http_status_code_str+0x978>)
 8015b9a:	e03c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8015b9c:	4b42      	ldr	r3, [pc, #264]	@ (8015ca8 <mg_http_status_code_str+0x97c>)
 8015b9e:	e03a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8015ba0:	4b42      	ldr	r3, [pc, #264]	@ (8015cac <mg_http_status_code_str+0x980>)
 8015ba2:	e038      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8015ba4:	4b42      	ldr	r3, [pc, #264]	@ (8015cb0 <mg_http_status_code_str+0x984>)
 8015ba6:	e036      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8015ba8:	4b42      	ldr	r3, [pc, #264]	@ (8015cb4 <mg_http_status_code_str+0x988>)
 8015baa:	e034      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8015bac:	4b42      	ldr	r3, [pc, #264]	@ (8015cb8 <mg_http_status_code_str+0x98c>)
 8015bae:	e032      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8015bb0:	4b42      	ldr	r3, [pc, #264]	@ (8015cbc <mg_http_status_code_str+0x990>)
 8015bb2:	e030      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8015bb4:	4b42      	ldr	r3, [pc, #264]	@ (8015cc0 <mg_http_status_code_str+0x994>)
 8015bb6:	e02e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8015bb8:	4b42      	ldr	r3, [pc, #264]	@ (8015cc4 <mg_http_status_code_str+0x998>)
 8015bba:	e02c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8015bbc:	4b42      	ldr	r3, [pc, #264]	@ (8015cc8 <mg_http_status_code_str+0x99c>)
 8015bbe:	e02a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8015bc0:	4b42      	ldr	r3, [pc, #264]	@ (8015ccc <mg_http_status_code_str+0x9a0>)
 8015bc2:	e028      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8015bc4:	4b42      	ldr	r3, [pc, #264]	@ (8015cd0 <mg_http_status_code_str+0x9a4>)
 8015bc6:	e026      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8015bc8:	4b42      	ldr	r3, [pc, #264]	@ (8015cd4 <mg_http_status_code_str+0x9a8>)
 8015bca:	e024      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8015bcc:	4b42      	ldr	r3, [pc, #264]	@ (8015cd8 <mg_http_status_code_str+0x9ac>)
 8015bce:	e022      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8015bd0:	4b42      	ldr	r3, [pc, #264]	@ (8015cdc <mg_http_status_code_str+0x9b0>)
 8015bd2:	e020      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8015bd4:	4b42      	ldr	r3, [pc, #264]	@ (8015ce0 <mg_http_status_code_str+0x9b4>)
 8015bd6:	e01e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8015bd8:	4b42      	ldr	r3, [pc, #264]	@ (8015ce4 <mg_http_status_code_str+0x9b8>)
 8015bda:	e01c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8015bdc:	4b42      	ldr	r3, [pc, #264]	@ (8015ce8 <mg_http_status_code_str+0x9bc>)
 8015bde:	e01a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8015be0:	4b42      	ldr	r3, [pc, #264]	@ (8015cec <mg_http_status_code_str+0x9c0>)
 8015be2:	e018      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8015be4:	4b42      	ldr	r3, [pc, #264]	@ (8015cf0 <mg_http_status_code_str+0x9c4>)
 8015be6:	e016      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8015be8:	4b42      	ldr	r3, [pc, #264]	@ (8015cf4 <mg_http_status_code_str+0x9c8>)
 8015bea:	e014      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8015bec:	4b42      	ldr	r3, [pc, #264]	@ (8015cf8 <mg_http_status_code_str+0x9cc>)
 8015bee:	e012      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8015bf0:	4b42      	ldr	r3, [pc, #264]	@ (8015cfc <mg_http_status_code_str+0x9d0>)
 8015bf2:	e010      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8015bf4:	4b42      	ldr	r3, [pc, #264]	@ (8015d00 <mg_http_status_code_str+0x9d4>)
 8015bf6:	e00e      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8015bf8:	4b42      	ldr	r3, [pc, #264]	@ (8015d04 <mg_http_status_code_str+0x9d8>)
 8015bfa:	e00c      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8015bfc:	4b42      	ldr	r3, [pc, #264]	@ (8015d08 <mg_http_status_code_str+0x9dc>)
 8015bfe:	e00a      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8015c00:	4b42      	ldr	r3, [pc, #264]	@ (8015d0c <mg_http_status_code_str+0x9e0>)
 8015c02:	e008      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8015c04:	4b42      	ldr	r3, [pc, #264]	@ (8015d10 <mg_http_status_code_str+0x9e4>)
 8015c06:	e006      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8015c08:	4b42      	ldr	r3, [pc, #264]	@ (8015d14 <mg_http_status_code_str+0x9e8>)
 8015c0a:	e004      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8015c0c:	4b42      	ldr	r3, [pc, #264]	@ (8015d18 <mg_http_status_code_str+0x9ec>)
 8015c0e:	e002      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8015c10:	4b42      	ldr	r3, [pc, #264]	@ (8015d1c <mg_http_status_code_str+0x9f0>)
 8015c12:	e000      	b.n	8015c16 <mg_http_status_code_str+0x8ea>
    default: return "";
 8015c14:	4b42      	ldr	r3, [pc, #264]	@ (8015d20 <mg_http_status_code_str+0x9f4>)
  }
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	370c      	adds	r7, #12
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr
 8015c22:	bf00      	nop
 8015c24:	08024abc 	.word	0x08024abc
 8015c28:	08024ac8 	.word	0x08024ac8
 8015c2c:	08024adc 	.word	0x08024adc
 8015c30:	08024ae8 	.word	0x08024ae8
 8015c34:	08024aec 	.word	0x08024aec
 8015c38:	08024af4 	.word	0x08024af4
 8015c3c:	08024b00 	.word	0x08024b00
 8015c40:	08024b20 	.word	0x08024b20
 8015c44:	08024b2c 	.word	0x08024b2c
 8015c48:	08024b3c 	.word	0x08024b3c
 8015c4c:	08024b4c 	.word	0x08024b4c
 8015c50:	08024b5c 	.word	0x08024b5c
 8015c54:	08024b70 	.word	0x08024b70
 8015c58:	08024b78 	.word	0x08024b78
 8015c5c:	08024b8c 	.word	0x08024b8c
 8015c60:	08024ba0 	.word	0x08024ba0
 8015c64:	08024ba8 	.word	0x08024ba8
 8015c68:	08024bb4 	.word	0x08024bb4
 8015c6c:	08024bc4 	.word	0x08024bc4
 8015c70:	08024bd0 	.word	0x08024bd0
 8015c74:	08024be4 	.word	0x08024be4
 8015c78:	08024bf8 	.word	0x08024bf8
 8015c7c:	08024c04 	.word	0x08024c04
 8015c80:	08024c14 	.word	0x08024c14
 8015c84:	08024c28 	.word	0x08024c28
 8015c88:	08024c34 	.word	0x08024c34
 8015c8c:	08024c40 	.word	0x08024c40
 8015c90:	08024c54 	.word	0x08024c54
 8015c94:	08024c64 	.word	0x08024c64
 8015c98:	08024c84 	.word	0x08024c84
 8015c9c:	08024c94 	.word	0x08024c94
 8015ca0:	08024ca0 	.word	0x08024ca0
 8015ca4:	08024ca8 	.word	0x08024ca8
 8015ca8:	08024cb8 	.word	0x08024cb8
 8015cac:	08024ccc 	.word	0x08024ccc
 8015cb0:	08024ce0 	.word	0x08024ce0
 8015cb4:	08024cf8 	.word	0x08024cf8
 8015cb8:	08024d10 	.word	0x08024d10
 8015cbc:	08024d30 	.word	0x08024d30
 8015cc0:	08024d44 	.word	0x08024d44
 8015cc4:	08024d54 	.word	0x08024d54
 8015cc8:	08024d68 	.word	0x08024d68
 8015ccc:	08024d80 	.word	0x08024d80
 8015cd0:	08024d88 	.word	0x08024d88
 8015cd4:	08024d9c 	.word	0x08024d9c
 8015cd8:	08024db0 	.word	0x08024db0
 8015cdc:	08024dc8 	.word	0x08024dc8
 8015ce0:	08024ddc 	.word	0x08024ddc
 8015ce4:	08024dfc 	.word	0x08024dfc
 8015ce8:	08024e20 	.word	0x08024e20
 8015cec:	08024e40 	.word	0x08024e40
 8015cf0:	08024e58 	.word	0x08024e58
 8015cf4:	08024e70 	.word	0x08024e70
 8015cf8:	08024e80 	.word	0x08024e80
 8015cfc:	08024e8c 	.word	0x08024e8c
 8015d00:	08024ea0 	.word	0x08024ea0
 8015d04:	08024eb0 	.word	0x08024eb0
 8015d08:	08024ecc 	.word	0x08024ecc
 8015d0c:	08024ee4 	.word	0x08024ee4
 8015d10:	08024efc 	.word	0x08024efc
 8015d14:	08024f0c 	.word	0x08024f0c
 8015d18:	08024f1c 	.word	0x08024f1c
 8015d1c:	08024f3c 	.word	0x08024f3c
 8015d20:	08024f5c 	.word	0x08024f5c

08015d24 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8015d24:	b408      	push	{r3}
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b08b      	sub	sp, #44	@ 0x2c
 8015d2a:	af02      	add	r7, sp, #8
 8015d2c:	60f8      	str	r0, [r7, #12]
 8015d2e:	60b9      	str	r1, [r7, #8]
 8015d30:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8015d32:	68b8      	ldr	r0, [r7, #8]
 8015d34:	f7ff fafa 	bl	801532c <mg_http_status_code_str>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <mg_http_reply+0x20>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	e000      	b.n	8015d46 <mg_http_reply+0x22>
 8015d44:	4b1f      	ldr	r3, [pc, #124]	@ (8015dc4 <mg_http_reply+0xa0>)
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	4613      	mov	r3, r2
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	491e      	ldr	r1, [pc, #120]	@ (8015dc8 <mg_http_reply+0xa4>)
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	f005 f8d4 	bl	801aefc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d58:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8015d5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015d5e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8015d66:	f107 0314 	add.w	r3, r7, #20
 8015d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d6c:	4817      	ldr	r0, [pc, #92]	@ (8015dcc <mg_http_reply+0xa8>)
 8015d6e:	f7fe f8cd 	bl	8013f0c <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d76:	2b10      	cmp	r3, #16
 8015d78:	d916      	bls.n	8015da8 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	3b0f      	subs	r3, #15
 8015d82:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8015d8c:	4a10      	ldr	r2, [pc, #64]	@ (8015dd0 <mg_http_reply+0xac>)
 8015d8e:	210b      	movs	r1, #11
 8015d90:	f008 ff88 	bl	801eca4 <mg_snprintf>
 8015d94:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015d9a:	69f9      	ldr	r1, [r7, #28]
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	440b      	add	r3, r1
 8015da0:	3b0f      	subs	r3, #15
 8015da2:	4413      	add	r3, r2
 8015da4:	2220      	movs	r2, #32
 8015da6:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8015da8:	68fa      	ldr	r2, [r7, #12]
 8015daa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8015dae:	f36f 13c7 	bfc	r3, #7, #1
 8015db2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8015db6:	bf00      	nop
 8015db8:	3724      	adds	r7, #36	@ 0x24
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015dc0:	b001      	add	sp, #4
 8015dc2:	4770      	bx	lr
 8015dc4:	08024f5c 	.word	0x08024f5c
 8015dc8:	08024f60 	.word	0x08024f60
 8015dcc:	0801ec35 	.word	0x0801ec35
 8015dd0:	08024f94 	.word	0x08024f94

08015dd4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7fe fc5d 	bl	80146a2 <mg_fs_close>
  c->pfn_data = NULL;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	4a07      	ldr	r2, [pc, #28]	@ (8015e10 <restore_http_cb+0x3c>)
 8015df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8015dfe:	f36f 13c7 	bfc	r3, #7, #1
 8015e02:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8015e06:	bf00      	nop
 8015e08:	3708      	adds	r7, #8
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	0801758d 	.word	0x0801758d

08015e14 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8015e14:	b5b0      	push	{r4, r5, r7, lr}
 8015e16:	b088      	sub	sp, #32
 8015e18:	af04      	add	r7, sp, #16
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2200      	movs	r2, #0
 8015e24:	461c      	mov	r4, r3
 8015e26:	4615      	mov	r5, r2
 8015e28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015e2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015e30:	e9cd 2300 	strd	r2, r3, [sp]
 8015e34:	4a04      	ldr	r2, [pc, #16]	@ (8015e48 <mg_http_etag+0x34>)
 8015e36:	68b9      	ldr	r1, [r7, #8]
 8015e38:	68f8      	ldr	r0, [r7, #12]
 8015e3a:	f008 ff33 	bl	801eca4 <mg_snprintf>
  return buf;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3710      	adds	r7, #16
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bdb0      	pop	{r4, r5, r7, pc}
 8015e48:	08024f9c 	.word	0x08024f9c

08015e4c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b08a      	sub	sp, #40	@ 0x28
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	2b08      	cmp	r3, #8
 8015e5c:	d002      	beq.n	8015e64 <static_cb+0x18>
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	2b02      	cmp	r3, #2
 8015e62:	d148      	bne.n	8015ef6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e6a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8015e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015e70:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	33a4      	adds	r3, #164	@ 0xa4
 8015e76:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e7c:	69fa      	ldr	r2, [r7, #28]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d905      	bls.n	8015e8e <static_cb+0x42>
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	3348      	adds	r3, #72	@ 0x48
 8015e86:	69f9      	ldr	r1, [r7, #28]
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f001 ff01 	bl	8017c90 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d234      	bcs.n	8015f04 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ea2:	1ad3      	subs	r3, r2, r3
 8015ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ea6:	69bb      	ldr	r3, [r7, #24]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d902      	bls.n	8015eb6 <static_cb+0x6a>
 8015eb0:	69bb      	ldr	r3, [r7, #24]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	691b      	ldr	r3, [r3, #16]
 8015ebc:	6a3a      	ldr	r2, [r7, #32]
 8015ebe:	6810      	ldr	r0, [r2, #0]
 8015ec0:	68fa      	ldr	r2, [r7, #12]
 8015ec2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8015ec4:	68fa      	ldr	r2, [r7, #12]
 8015ec6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015ec8:	4411      	add	r1, r2
 8015eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ecc:	4798      	blx	r3
 8015ece:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	441a      	add	r2, r3
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	1ad2      	subs	r2, r2, r3
 8015ee4:	69bb      	ldr	r3, [r7, #24]
 8015ee6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d10c      	bne.n	8015f08 <static_cb+0xbc>
 8015eee:	68f8      	ldr	r0, [r7, #12]
 8015ef0:	f7ff ff70 	bl	8015dd4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8015ef4:	e008      	b.n	8015f08 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	2b09      	cmp	r3, #9
 8015efa:	d106      	bne.n	8015f0a <static_cb+0xbe>
    restore_http_cb(c);
 8015efc:	68f8      	ldr	r0, [r7, #12]
 8015efe:	f7ff ff69 	bl	8015dd4 <restore_http_cb>
 8015f02:	e002      	b.n	8015f0a <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8015f04:	bf00      	nop
 8015f06:	e000      	b.n	8015f0a <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8015f08:	bf00      	nop
  }
  (void) ev_data;
}
 8015f0a:	3728      	adds	r7, #40	@ 0x28
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}

08015f10 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8015f10:	b590      	push	{r4, r7, lr}
 8015f12:	b091      	sub	sp, #68	@ 0x44
 8015f14:	af02      	add	r7, sp, #8
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	1d38      	adds	r0, r7, #4
 8015f1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8015f1e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 8015f20:	f107 0314 	add.w	r3, r7, #20
 8015f24:	6839      	ldr	r1, [r7, #0]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f009 f91c 	bl	801f164 <mg_str_s>
  size_t i = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8015f30:	e002      	b.n	8015f38 <guess_content_type+0x28>
 8015f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f34:	3301      	adds	r3, #1
 8015f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d208      	bcs.n	8015f52 <guess_content_type+0x42>
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	68b9      	ldr	r1, [r7, #8]
 8015f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f46:	1acb      	subs	r3, r1, r3
 8015f48:	3b01      	subs	r3, #1
 8015f4a:	4413      	add	r3, r2
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f50:	d1ef      	bne.n	8015f32 <guess_content_type+0x22>
  path.buf += path.len - i;
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	68b9      	ldr	r1, [r7, #8]
 8015f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f58:	1acb      	subs	r3, r1, r3
 8015f5a:	4413      	add	r3, r2
 8015f5c:	607b      	str	r3, [r7, #4]
  path.len = i;
 8015f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f60:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8015f62:	e020      	b.n	8015fa6 <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8015f64:	f107 031c 	add.w	r3, r7, #28
 8015f68:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8015f6c:	213d      	movs	r1, #61	@ 0x3d
 8015f6e:	9100      	str	r1, [sp, #0]
 8015f70:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8015f74:	c903      	ldmia	r1, {r0, r1}
 8015f76:	f009 fabc 	bl	801f4f2 <mg_span>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d012      	beq.n	8015fa6 <guess_content_type+0x96>
 8015f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015f84:	cb0c      	ldmia	r3, {r2, r3}
 8015f86:	1d39      	adds	r1, r7, #4
 8015f88:	c903      	ldmia	r1, {r0, r1}
 8015f8a:	f009 f935 	bl	801f1f8 <mg_strcmp>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d108      	bne.n	8015fa6 <guess_content_type+0x96>
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	461a      	mov	r2, r3
 8015f98:	f107 031c 	add.w	r3, r7, #28
 8015f9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fa0:	e882 0003 	stmia.w	r2, {r0, r1}
 8015fa4:	e036      	b.n	8016014 <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 8015fa6:	f107 0314 	add.w	r3, r7, #20
 8015faa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8015fae:	212c      	movs	r1, #44	@ 0x2c
 8015fb0:	9100      	str	r1, [sp, #0]
 8015fb2:	f107 0114 	add.w	r1, r7, #20
 8015fb6:	c903      	ldmia	r1, {r0, r1}
 8015fb8:	f009 fa9b 	bl	801f4f2 <mg_span>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d1d0      	bne.n	8015f64 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015fc6:	e01a      	b.n	8015ffe <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8015fc8:	4a14      	ldr	r2, [pc, #80]	@ (801601c <guess_content_type+0x10c>)
 8015fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015fcc:	00db      	lsls	r3, r3, #3
 8015fce:	4413      	add	r3, r2
 8015fd0:	cb0c      	ldmia	r3, {r2, r3}
 8015fd2:	1d39      	adds	r1, r7, #4
 8015fd4:	c903      	ldmia	r1, {r0, r1}
 8015fd6:	f009 f90f 	bl	801f1f8 <mg_strcmp>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d10b      	bne.n	8015ff8 <guess_content_type+0xe8>
 8015fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015fe2:	3301      	adds	r3, #1
 8015fe4:	68f9      	ldr	r1, [r7, #12]
 8015fe6:	4a0d      	ldr	r2, [pc, #52]	@ (801601c <guess_content_type+0x10c>)
 8015fe8:	460c      	mov	r4, r1
 8015fea:	00db      	lsls	r3, r3, #3
 8015fec:	4413      	add	r3, r2
 8015fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ff2:	e884 0003 	stmia.w	r4, {r0, r1}
 8015ff6:	e00d      	b.n	8016014 <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8015ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ffa:	3302      	adds	r3, #2
 8015ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ffe:	4a07      	ldr	r2, [pc, #28]	@ (801601c <guess_content_type+0x10c>)
 8016000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016002:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d1de      	bne.n	8015fc8 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	4904      	ldr	r1, [pc, #16]	@ (8016020 <guess_content_type+0x110>)
 801600e:	4618      	mov	r0, r3
 8016010:	f009 f8a8 	bl	801f164 <mg_str_s>
}
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	373c      	adds	r7, #60	@ 0x3c
 8016018:	46bd      	mov	sp, r7
 801601a:	bd90      	pop	{r4, r7, pc}
 801601c:	200000a0 	.word	0x200000a0
 8016020:	08025084 	.word	0x08025084

08016024 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8016024:	b580      	push	{r7, lr}
 8016026:	b08c      	sub	sp, #48	@ 0x30
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8016030:	2300      	movs	r3, #0
 8016032:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8016034:	2300      	movs	r3, #0
 8016036:	627b      	str	r3, [r7, #36]	@ 0x24
 8016038:	e058      	b.n	80160ec <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016040:	3306      	adds	r3, #6
 8016042:	18d1      	adds	r1, r2, r3
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	685a      	ldr	r2, [r3, #4]
 8016048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801604a:	1ad3      	subs	r3, r2, r3
 801604c:	1f9a      	subs	r2, r3, #6
 801604e:	f107 0310 	add.w	r3, r7, #16
 8016052:	4618      	mov	r0, r3
 8016054:	f009 f8a3 	bl	801f19e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801605e:	4413      	add	r3, r2
 8016060:	2206      	movs	r2, #6
 8016062:	4929      	ldr	r1, [pc, #164]	@ (8016108 <getrange+0xe4>)
 8016064:	4618      	mov	r0, r3
 8016066:	f00a ffe1 	bl	802102c <memcmp>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d003      	beq.n	8016078 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8016070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016072:	3301      	adds	r3, #1
 8016074:	627b      	str	r3, [r7, #36]	@ 0x24
 8016076:	e039      	b.n	80160ec <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8016078:	f107 0310 	add.w	r3, r7, #16
 801607c:	f107 0218 	add.w	r2, r7, #24
 8016080:	212d      	movs	r1, #45	@ 0x2d
 8016082:	9100      	str	r1, [sp, #0]
 8016084:	f107 0110 	add.w	r1, r7, #16
 8016088:	c903      	ldmia	r1, {r0, r1}
 801608a:	f009 fa32 	bl	801f4f2 <mg_span>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	d01d      	beq.n	80160d0 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 8016094:	68ba      	ldr	r2, [r7, #8]
 8016096:	f107 0318 	add.w	r3, r7, #24
 801609a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801609e:	f7fe fbcd 	bl	801483c <mg_to_size_t>
 80160a2:	4603      	mov	r3, r0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <getrange+0x8a>
 80160a8:	6a3b      	ldr	r3, [r7, #32]
 80160aa:	3301      	adds	r3, #1
 80160ac:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d022      	beq.n	80160fa <getrange+0xd6>
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	f107 0310 	add.w	r3, r7, #16
 80160ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160be:	f7fe fbbd 	bl	801483c <mg_to_size_t>
 80160c2:	4603      	mov	r3, r0
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d018      	beq.n	80160fa <getrange+0xd6>
 80160c8:	6a3b      	ldr	r3, [r7, #32]
 80160ca:	3301      	adds	r3, #1
 80160cc:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 80160ce:	e014      	b.n	80160fa <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 80160d0:	68ba      	ldr	r2, [r7, #8]
 80160d2:	f107 0310 	add.w	r3, r7, #16
 80160d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160da:	f7fe fbaf 	bl	801483c <mg_to_size_t>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00a      	beq.n	80160fa <getrange+0xd6>
 80160e4:	6a3b      	ldr	r3, [r7, #32]
 80160e6:	3301      	adds	r3, #1
 80160e8:	623b      	str	r3, [r7, #32]
 80160ea:	e007      	b.n	80160fc <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80160ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160ee:	1d9a      	adds	r2, r3, #6
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d3a0      	bcc.n	801603a <getrange+0x16>
 80160f8:	e000      	b.n	80160fc <getrange+0xd8>
    break;
 80160fa:	bf00      	nop
  }
  return (int) numparsed;
 80160fc:	6a3b      	ldr	r3, [r7, #32]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3728      	adds	r7, #40	@ 0x28
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	08025208 	.word	0x08025208

0801610c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 801610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016110:	b0f9      	sub	sp, #484	@ 0x1e4
 8016112:	af0a      	add	r7, sp, #40	@ 0x28
 8016114:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8016118:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 801611c:	6020      	str	r0, [r4, #0]
 801611e:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8016122:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 8016126:	6001      	str	r1, [r0, #0]
 8016128:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 801612c:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8016130:	600a      	str	r2, [r1, #0]
 8016132:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8016136:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 801613a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 801613c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016140:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	695b      	ldr	r3, [r3, #20]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d006      	beq.n	801615a <mg_http_serve_file+0x4e>
 801614c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016150:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	695b      	ldr	r3, [r3, #20]
 8016158:	e000      	b.n	801615c <mg_http_serve_file+0x50>
 801615a:	4ba7      	ldr	r3, [pc, #668]	@ (80163f8 <mg_http_serve_file+0x2ec>)
 801615c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 8016160:	2300      	movs	r3, #0
 8016162:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 8016166:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801616a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801616e:	2200      	movs	r2, #0
 8016170:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 8016172:	f04f 0200 	mov.w	r2, #0
 8016176:	f04f 0300 	mov.w	r3, #0
 801617a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 801617e:	2300      	movs	r3, #0
 8016180:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8016184:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8016188:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801618c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8016190:	6819      	ldr	r1, [r3, #0]
 8016192:	4610      	mov	r0, r2
 8016194:	f008 ffe6 	bl	801f164 <mg_str_s>
 8016198:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801619c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	68db      	ldr	r3, [r3, #12]
 80161a4:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80161a8:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 80161ac:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80161b0:	ca06      	ldmia	r2, {r1, r2}
 80161b2:	f7ff fead 	bl	8015f10 <guess_content_type>
  bool gzip = false;
 80161b6:	2300      	movs	r3, #0
 80161b8:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 80161bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80161c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d05c      	beq.n	8016284 <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80161ca:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80161ce:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80161d2:	498a      	ldr	r1, [pc, #552]	@ (80163fc <mg_http_serve_file+0x2f0>)
 80161d4:	6818      	ldr	r0, [r3, #0]
 80161d6:	f7fe fd7f 	bl	8014cd8 <mg_http_get_header>
 80161da:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 80161de:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d03e      	beq.n	8016264 <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80161e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80161ea:	6859      	ldr	r1, [r3, #4]
 80161ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	461a      	mov	r2, r3
 80161f4:	4882      	ldr	r0, [pc, #520]	@ (8016400 <mg_http_serve_file+0x2f4>)
 80161f6:	f008 fd8b 	bl	801ed10 <mg_mprintf>
 80161fa:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80161fe:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8016202:	2b00      	cmp	r3, #0
 8016204:	d02a      	beq.n	801625c <mg_http_serve_file+0x150>
 8016206:	497f      	ldr	r1, [pc, #508]	@ (8016404 <mg_http_serve_file+0x2f8>)
 8016208:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 801620c:	f00a fef8 	bl	8021000 <strstr>
 8016210:	4603      	mov	r3, r0
 8016212:	2b00      	cmp	r3, #0
 8016214:	d022      	beq.n	801625c <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8016216:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801621a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801621e:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	4a78      	ldr	r2, [pc, #480]	@ (8016408 <mg_http_serve_file+0x2fc>)
 8016226:	2180      	movs	r1, #128	@ 0x80
 8016228:	f008 fd3c 	bl	801eca4 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 801622c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8016230:	2201      	movs	r2, #1
 8016232:	4619      	mov	r1, r3
 8016234:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8016238:	f7fe fa0c 	bl	8014654 <mg_fs_open>
 801623c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 8016240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016244:	2b00      	cmp	r3, #0
 8016246:	d009      	beq.n	801625c <mg_http_serve_file+0x150>
 8016248:	2301      	movs	r3, #1
 801624a:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 801624e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016252:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8016256:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 801625a:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 801625c:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8016260:	f7f3 ffd2 	bl	800a208 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8016264:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016268:	2b00      	cmp	r3, #0
 801626a:	d10b      	bne.n	8016284 <mg_http_serve_file+0x178>
 801626c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016270:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8016274:	2201      	movs	r2, #1
 8016276:	6819      	ldr	r1, [r3, #0]
 8016278:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 801627c:	f7fe f9ea 	bl	8014654 <mg_fs_open>
 8016280:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8016284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016288:	2b00      	cmp	r3, #0
 801628a:	d144      	bne.n	8016316 <mg_http_serve_file+0x20a>
 801628c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016290:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	691b      	ldr	r3, [r3, #16]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d03c      	beq.n	8016316 <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 801629c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80162a0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	691b      	ldr	r3, [r3, #16]
 80162a8:	2201      	movs	r2, #1
 80162aa:	4619      	mov	r1, r3
 80162ac:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80162b0:	f7fe f9d0 	bl	8014654 <mg_fs_open>
 80162b4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 80162b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80162bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80162c0:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80162c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80162c8:	6812      	ldr	r2, [r2, #0]
 80162ca:	6912      	ldr	r2, [r2, #16]
 80162cc:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80162ce:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80162d2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80162d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80162da:	6819      	ldr	r1, [r3, #0]
 80162dc:	4610      	mov	r0, r2
 80162de:	f008 ff41 	bl	801f164 <mg_str_s>
 80162e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80162e6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	68db      	ldr	r3, [r3, #12]
 80162ee:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80162f2:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 80162f6:	f107 0010 	add.w	r0, r7, #16
 80162fa:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80162fe:	ca06      	ldmia	r2, {r1, r2}
 8016300:	f7ff fe06 	bl	8015f10 <guess_content_type>
 8016304:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016308:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 801630c:	4623      	mov	r3, r4
 801630e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016312:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8016316:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801631a:	2b00      	cmp	r3, #0
 801631c:	d00f      	beq.n	801633e <mg_http_serve_file+0x232>
 801631e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8016322:	681c      	ldr	r4, [r3, #0]
 8016324:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8016328:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801632c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016330:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8016334:	6818      	ldr	r0, [r3, #0]
 8016336:	47a0      	blx	r4
 8016338:	4603      	mov	r3, r0
 801633a:	2b00      	cmp	r3, #0
 801633c:	d114      	bne.n	8016368 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 801633e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016342:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	689a      	ldr	r2, [r3, #8]
 801634a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801634e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8016352:	4b2e      	ldr	r3, [pc, #184]	@ (801640c <mg_http_serve_file+0x300>)
 8016354:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8016358:	6800      	ldr	r0, [r0, #0]
 801635a:	f7ff fce3 	bl	8015d24 <mg_http_reply>
    mg_fs_close(fd);
 801635e:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8016362:	f7fe f99e 	bl	80146a2 <mg_fs_close>
 8016366:	e19d      	b.n	80166a4 <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8016368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801636c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8016370:	6819      	ldr	r1, [r3, #0]
 8016372:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8016376:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 801637a:	e9cd 2300 	strd	r2, r3, [sp]
 801637e:	460a      	mov	r2, r1
 8016380:	2140      	movs	r1, #64	@ 0x40
 8016382:	f7ff fd47 	bl	8015e14 <mg_http_etag>
 8016386:	4603      	mov	r3, r0
 8016388:	2b00      	cmp	r3, #0
 801638a:	d045      	beq.n	8016418 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 801638c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016390:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8016394:	491e      	ldr	r1, [pc, #120]	@ (8016410 <mg_http_serve_file+0x304>)
 8016396:	6818      	ldr	r0, [r3, #0]
 8016398:	f7fe fc9e 	bl	8014cd8 <mg_http_get_header>
 801639c:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80163a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d037      	beq.n	8016418 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 80163a8:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80163ac:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 80163b0:	4611      	mov	r1, r2
 80163b2:	4618      	mov	r0, r3
 80163b4:	f008 fed6 	bl	801f164 <mg_str_s>
 80163b8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 80163bc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80163c0:	cb0c      	ldmia	r3, {r2, r3}
 80163c2:	c903      	ldmia	r1, {r0, r1}
 80163c4:	f008 ff5a 	bl	801f27c <mg_strcasecmp>
 80163c8:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d124      	bne.n	8016418 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 80163ce:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 80163d2:	f7fe f966 	bl	80146a2 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 80163d6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80163da:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	689a      	ldr	r2, [r3, #8]
 80163e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80163e6:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80163ea:	4b0a      	ldr	r3, [pc, #40]	@ (8016414 <mg_http_serve_file+0x308>)
 80163ec:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80163f0:	6800      	ldr	r0, [r0, #0]
 80163f2:	f7ff fc97 	bl	8015d24 <mg_http_reply>
 80163f6:	e155      	b.n	80166a4 <mg_http_serve_file+0x598>
 80163f8:	20000078 	.word	0x20000078
 80163fc:	08025210 	.word	0x08025210
 8016400:	080249fc 	.word	0x080249fc
 8016404:	08025220 	.word	0x08025220
 8016408:	08025228 	.word	0x08025228
 801640c:	08025230 	.word	0x08025230
 8016410:	0802523c 	.word	0x0802523c
 8016414:	08024f5c 	.word	0x08024f5c
  } else {
    int n, status = 200;
 8016418:	23c8      	movs	r3, #200	@ 0xc8
 801641a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 801641e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016422:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016426:	2200      	movs	r2, #0
 8016428:	601a      	str	r2, [r3, #0]
 801642a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801642e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016432:	2200      	movs	r2, #0
 8016434:	601a      	str	r2, [r3, #0]
 8016436:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801643a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8016444:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016448:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801644c:	4998      	ldr	r1, [pc, #608]	@ (80166b0 <mg_http_serve_file+0x5a4>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	f7fe fc42 	bl	8014cd8 <mg_http_get_header>
 8016454:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8016458:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801645c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8016460:	2200      	movs	r2, #0
 8016462:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8016464:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8016468:	2b00      	cmp	r3, #0
 801646a:	f000 8095 	beq.w	8016598 <mg_http_serve_file+0x48c>
 801646e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8016472:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8016476:	4619      	mov	r1, r3
 8016478:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 801647c:	f7ff fdd2 	bl	8016024 <getrange>
 8016480:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8016484:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8016488:	2b00      	cmp	r3, #0
 801648a:	f340 8085 	ble.w	8016598 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 801648e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8016492:	2b01      	cmp	r3, #1
 8016494:	d107      	bne.n	80164a6 <mg_http_serve_file+0x39a>
 8016496:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801649a:	1e5a      	subs	r2, r3, #1
 801649c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80164a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80164a4:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 80164a6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80164aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80164ae:	681a      	ldr	r2, [r3, #0]
 80164b0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80164b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d808      	bhi.n	80164d0 <mg_http_serve_file+0x3c4>
 80164be:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80164c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d81a      	bhi.n	8016506 <mg_http_serve_file+0x3fa>
        status = 416;
 80164d0:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80164d4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 80164d8:	2300      	movs	r3, #0
 80164da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80164de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80164e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	2200      	movs	r2, #0
 80164ea:	60bb      	str	r3, [r7, #8]
 80164ec:	60fa      	str	r2, [r7, #12]
 80164ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80164f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80164f6:	e9cd 1200 	strd	r1, r2, [sp]
 80164fa:	4a6e      	ldr	r2, [pc, #440]	@ (80166b4 <mg_http_serve_file+0x5a8>)
 80164fc:	2164      	movs	r1, #100	@ 0x64
 80164fe:	4618      	mov	r0, r3
 8016500:	f008 fbd0 	bl	801eca4 <mg_snprintf>
 8016504:	e048      	b.n	8016598 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 8016506:	23ce      	movs	r3, #206	@ 0xce
 8016508:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 801650c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016510:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801651a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	3301      	adds	r3, #1
 8016524:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 8016528:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801652c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2200      	movs	r2, #0
 8016534:	469a      	mov	sl, r3
 8016536:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8016538:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801653c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016540:	681a      	ldr	r2, [r3, #0]
 8016542:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8016546:	4413      	add	r3, r2
 8016548:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 801654a:	2200      	movs	r2, #0
 801654c:	461d      	mov	r5, r3
 801654e:	4616      	mov	r6, r2
 8016550:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016554:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	2200      	movs	r2, #0
 801655c:	603b      	str	r3, [r7, #0]
 801655e:	607a      	str	r2, [r7, #4]
 8016560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016564:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016568:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801656c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8016570:	e9cd ab00 	strd	sl, fp, [sp]
 8016574:	4a50      	ldr	r2, [pc, #320]	@ (80166b8 <mg_http_serve_file+0x5ac>)
 8016576:	2164      	movs	r1, #100	@ 0x64
 8016578:	4618      	mov	r0, r3
 801657a:	f008 fb93 	bl	801eca4 <mg_snprintf>
        fs->sk(fd->fd, r1);
 801657e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8016582:	699b      	ldr	r3, [r3, #24]
 8016584:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8016588:	6810      	ldr	r0, [r2, #0]
 801658a:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801658e:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8016592:	6812      	ldr	r2, [r2, #0]
 8016594:	4611      	mov	r1, r2
 8016596:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8016598:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 801659c:	f7fe fec6 	bl	801532c <mg_http_status_code_str>
 80165a0:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 80165a2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80165a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80165aa:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 80165ac:	461d      	mov	r5, r3
 80165ae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80165b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80165bc:	2100      	movs	r1, #0
 80165be:	4698      	mov	r8, r3
 80165c0:	4689      	mov	r9, r1
 80165c2:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d001      	beq.n	80165ce <mg_http_serve_file+0x4c2>
 80165ca:	493c      	ldr	r1, [pc, #240]	@ (80166bc <mg_http_serve_file+0x5b0>)
 80165cc:	e000      	b.n	80165d0 <mg_http_serve_file+0x4c4>
 80165ce:	493c      	ldr	r1, [pc, #240]	@ (80166c0 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 80165d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80165d4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d006      	beq.n	80165ee <mg_http_serve_file+0x4e2>
 80165e0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80165e4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	689b      	ldr	r3, [r3, #8]
 80165ec:	e000      	b.n	80165f0 <mg_http_serve_file+0x4e4>
 80165ee:	4b34      	ldr	r3, [pc, #208]	@ (80166c0 <mg_http_serve_file+0x5b4>)
 80165f0:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80165f4:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 80165f8:	9308      	str	r3, [sp, #32]
 80165fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80165fe:	9307      	str	r3, [sp, #28]
 8016600:	9106      	str	r1, [sp, #24]
 8016602:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016606:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801660a:	9302      	str	r3, [sp, #8]
 801660c:	9201      	str	r2, [sp, #4]
 801660e:	9500      	str	r5, [sp, #0]
 8016610:	4623      	mov	r3, r4
 8016612:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8016616:	492b      	ldr	r1, [pc, #172]	@ (80166c4 <mg_http_serve_file+0x5b8>)
 8016618:	6800      	ldr	r0, [r0, #0]
 801661a:	f004 fc6f 	bl	801aefc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 801661e:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8016622:	4929      	ldr	r1, [pc, #164]	@ (80166c8 <mg_http_serve_file+0x5bc>)
 8016624:	4618      	mov	r0, r3
 8016626:	f008 fd9d 	bl	801f164 <mg_str_s>
 801662a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801662e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8016632:	6819      	ldr	r1, [r3, #0]
 8016634:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8016638:	cb0c      	ldmia	r3, {r2, r3}
 801663a:	c903      	ldmia	r1, {r0, r1}
 801663c:	f008 fe1e 	bl	801f27c <mg_strcasecmp>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d10f      	bne.n	8016666 <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 8016646:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801664a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8016654:	f36f 13c7 	bfc	r3, #7, #1
 8016658:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 801665c:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8016660:	f7fe f81f 	bl	80146a2 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8016664:	e01e      	b.n	80166a4 <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8016666:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801666a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	33a4      	adds	r3, #164	@ 0xa4
 8016672:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 8016676:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801667a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a12      	ldr	r2, [pc, #72]	@ (80166cc <mg_http_serve_file+0x5c0>)
 8016682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8016686:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801668a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8016694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8016698:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801669c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80166a0:	601a      	str	r2, [r3, #0]
}
 80166a2:	e7ff      	b.n	80166a4 <mg_http_serve_file+0x598>
 80166a4:	bf00      	nop
 80166a6:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 80166aa:	46bd      	mov	sp, r7
 80166ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b0:	0802524c 	.word	0x0802524c
 80166b4:	08025254 	.word	0x08025254
 80166b8:	08025274 	.word	0x08025274
 80166bc:	0802529c 	.word	0x0802529c
 80166c0:	08024f5c 	.word	0x08024f5c
 80166c4:	080252b8 	.word	0x080252b8
 80166c8:	08025308 	.word	0x08025308
 80166cc:	08015e4d 	.word	0x08015e4d

080166d0 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 80166d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80166d4:	b0c8      	sub	sp, #288	@ 0x120
 80166d6:	af0a      	add	r7, sp, #40	@ 0x28
 80166d8:	6078      	str	r0, [r7, #4]
 80166da:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80166e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80166e6:	689b      	ldr	r3, [r3, #8]
 80166e8:	695b      	ldr	r3, [r3, #20]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d004      	beq.n	80166f8 <printdirentry+0x28>
 80166ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80166f2:	689b      	ldr	r3, [r3, #8]
 80166f4:	695b      	ldr	r3, [r3, #20]
 80166f6:	e000      	b.n	80166fa <printdirentry+0x2a>
 80166f8:	4b66      	ldr	r3, [pc, #408]	@ (8016894 <printdirentry+0x1c4>)
 80166fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 80166fe:	2300      	movs	r3, #0
 8016700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 8016704:	f04f 0200 	mov.w	r2, #0
 8016708:	f04f 0300 	mov.w	r3, #0
 801670c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8016716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801671a:	68da      	ldr	r2, [r3, #12]
 801671c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	9301      	str	r3, [sp, #4]
 8016724:	232f      	movs	r3, #47	@ 0x2f
 8016726:	9300      	str	r3, [sp, #0]
 8016728:	4613      	mov	r3, r2
 801672a:	4a5b      	ldr	r2, [pc, #364]	@ (8016898 <printdirentry+0x1c8>)
 801672c:	2180      	movs	r1, #128	@ 0x80
 801672e:	f008 fab9 	bl	801eca4 <mg_snprintf>
 8016732:	4603      	mov	r3, r0
 8016734:	2b80      	cmp	r3, #128	@ 0x80
 8016736:	d910      	bls.n	801675a <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8016738:	4b58      	ldr	r3, [pc, #352]	@ (801689c <printdirentry+0x1cc>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	2b00      	cmp	r3, #0
 801673e:	f340 80a3 	ble.w	8016888 <printdirentry+0x1b8>
 8016742:	4b57      	ldr	r3, [pc, #348]	@ (80168a0 <printdirentry+0x1d0>)
 8016744:	f640 3248 	movw	r2, #2888	@ 0xb48
 8016748:	4956      	ldr	r1, [pc, #344]	@ (80168a4 <printdirentry+0x1d4>)
 801674a:	2001      	movs	r0, #1
 801674c:	f002 fa8e 	bl	8018c6c <mg_log_prefix>
 8016750:	6879      	ldr	r1, [r7, #4]
 8016752:	4855      	ldr	r0, [pc, #340]	@ (80168a8 <printdirentry+0x1d8>)
 8016754:	f002 fada 	bl	8018d0c <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8016758:	e096      	b.n	8016888 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 801675a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8016764:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8016768:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801676c:	4798      	blx	r3
 801676e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8016772:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8016776:	2b00      	cmp	r3, #0
 8016778:	d11a      	bne.n	80167b0 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 801677a:	4b48      	ldr	r3, [pc, #288]	@ (801689c <printdirentry+0x1cc>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	f340 8082 	ble.w	8016888 <printdirentry+0x1b8>
 8016784:	4b46      	ldr	r3, [pc, #280]	@ (80168a0 <printdirentry+0x1d0>)
 8016786:	f640 324a 	movw	r2, #2890	@ 0xb4a
 801678a:	4946      	ldr	r1, [pc, #280]	@ (80168a4 <printdirentry+0x1d4>)
 801678c:	2001      	movs	r0, #1
 801678e:	f002 fa6d 	bl	8018c6c <mg_log_prefix>
 8016792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801679a:	f00a fd15 	bl	80211c8 <__errno>
 801679e:	4603      	mov	r3, r0
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80167a6:	4621      	mov	r1, r4
 80167a8:	4840      	ldr	r0, [pc, #256]	@ (80168ac <printdirentry+0x1dc>)
 80167aa:	f002 faaf 	bl	8018d0c <mg_log>
}
 80167ae:	e06b      	b.n	8016888 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 80167b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80167b4:	f003 0304 	and.w	r3, r3, #4
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d001      	beq.n	80167c0 <printdirentry+0xf0>
 80167bc:	4b3c      	ldr	r3, [pc, #240]	@ (80168b0 <printdirentry+0x1e0>)
 80167be:	e000      	b.n	80167c2 <printdirentry+0xf2>
 80167c0:	4b3c      	ldr	r3, [pc, #240]	@ (80168b4 <printdirentry+0x1e4>)
 80167c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 80167c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80167ca:	f003 0304 	and.w	r3, r3, #4
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d007      	beq.n	80167e2 <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 80167d2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80167d6:	4b38      	ldr	r3, [pc, #224]	@ (80168b8 <printdirentry+0x1e8>)
 80167d8:	4a38      	ldr	r2, [pc, #224]	@ (80168bc <printdirentry+0x1ec>)
 80167da:	2128      	movs	r1, #40	@ 0x28
 80167dc:	f008 fa62 	bl	801eca4 <mg_snprintf>
 80167e0:	e00d      	b.n	80167fe <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80167e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80167e6:	2200      	movs	r2, #0
 80167e8:	4698      	mov	r8, r3
 80167ea:	4691      	mov	r9, r2
 80167ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80167f0:	e9cd 8900 	strd	r8, r9, [sp]
 80167f4:	4a32      	ldr	r2, [pc, #200]	@ (80168c0 <printdirentry+0x1f0>)
 80167f6:	2128      	movs	r1, #40	@ 0x28
 80167f8:	4618      	mov	r0, r3
 80167fa:	f008 fa53 	bl	801eca4 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80167fe:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8016802:	4613      	mov	r3, r2
 8016804:	f107 0008 	add.w	r0, r7, #8
 8016808:	4a2e      	ldr	r2, [pc, #184]	@ (80168c4 <printdirentry+0x1f4>)
 801680a:	2128      	movs	r1, #40	@ 0x28
 801680c:	f008 fa4a 	bl	801eca4 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7e9 fd35 	bl	8000280 <strlen>
 8016816:	4601      	mov	r1, r0
 8016818:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801681c:	2380      	movs	r3, #128	@ 0x80
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 fbdc 	bl	8016fdc <mg_url_encode>
 8016824:	4603      	mov	r3, r0
 8016826:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 801682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801682e:	6818      	ldr	r0, [r3, #0]
 8016830:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8016834:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8016836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801683a:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 801683e:	2b00      	cmp	r3, #0
 8016840:	d105      	bne.n	801684e <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8016842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 8016846:	2200      	movs	r2, #0
 8016848:	461c      	mov	r4, r3
 801684a:	4615      	mov	r5, r2
 801684c:	e003      	b.n	8016856 <printdirentry+0x186>
 801684e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016852:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016856:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801685a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801685e:	9308      	str	r3, [sp, #32]
 8016860:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016864:	f107 0308 	add.w	r3, r7, #8
 8016868:	9304      	str	r3, [sp, #16]
 801686a:	9103      	str	r1, [sp, #12]
 801686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016870:	9302      	str	r3, [sp, #8]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	9301      	str	r3, [sp, #4]
 8016876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801687a:	9300      	str	r3, [sp, #0]
 801687c:	4613      	mov	r3, r2
 801687e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8016882:	4911      	ldr	r1, [pc, #68]	@ (80168c8 <printdirentry+0x1f8>)
 8016884:	f004 fb3a 	bl	801aefc <mg_printf>
}
 8016888:	bf00      	nop
 801688a:	37f8      	adds	r7, #248	@ 0xf8
 801688c:	46bd      	mov	sp, r7
 801688e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016892:	bf00      	nop
 8016894:	20000078 	.word	0x20000078
 8016898:	08025310 	.word	0x08025310
 801689c:	20000288 	.word	0x20000288
 80168a0:	08026e74 	.word	0x08026e74
 80168a4:	0802487c 	.word	0x0802487c
 80168a8:	08025318 	.word	0x08025318
 80168ac:	08025328 	.word	0x08025328
 80168b0:	0802533c 	.word	0x0802533c
 80168b4:	08024f5c 	.word	0x08024f5c
 80168b8:	08025340 	.word	0x08025340
 80168bc:	080249e8 	.word	0x080249e8
 80168c0:	08025348 	.word	0x08025348
 80168c4:	08025350 	.word	0x08025350
 80168c8:	08025354 	.word	0x08025354

080168cc <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b0b8      	sub	sp, #224	@ 0xe0
 80168d0:	af04      	add	r7, sp, #16
 80168d2:	60f8      	str	r0, [r7, #12]
 80168d4:	60b9      	str	r1, [r7, #8]
 80168d6:	607a      	str	r2, [r7, #4]
 80168d8:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 80168da:	4b51      	ldr	r3, [pc, #324]	@ (8016a20 <listdir+0x154>)
 80168dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 80168e0:	4b50      	ldr	r3, [pc, #320]	@ (8016a24 <listdir+0x158>)
 80168e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	695b      	ldr	r3, [r3, #20]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d002      	beq.n	80168f4 <listdir+0x28>
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	695b      	ldr	r3, [r3, #20]
 80168f2:	e000      	b.n	80168f6 <listdir+0x2a>
 80168f4:	4b4c      	ldr	r3, [pc, #304]	@ (8016a28 <listdir+0x15c>)
 80168f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	6898      	ldr	r0, [r3, #8]
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	68d9      	ldr	r1, [r3, #12]
 801691a:	f107 021c 	add.w	r2, r7, #28
 801691e:	2300      	movs	r3, #0
 8016920:	9300      	str	r3, [sp, #0]
 8016922:	2380      	movs	r3, #128	@ 0x80
 8016924:	f7fe f8e5 	bl	8014af2 <mg_url_decode>
 8016928:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 801692c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016930:	2b00      	cmp	r3, #0
 8016932:	dd09      	ble.n	8016948 <listdir+0x7c>
 8016934:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8016938:	f107 0314 	add.w	r3, r7, #20
 801693c:	f107 011c 	add.w	r1, r7, #28
 8016940:	4618      	mov	r0, r3
 8016942:	f008 fc2c 	bl	801f19e <mg_str_n>
 8016946:	e007      	b.n	8016958 <listdir+0x8c>
 8016948:	68ba      	ldr	r2, [r7, #8]
 801694a:	f107 0314 	add.w	r3, r7, #20
 801694e:	3208      	adds	r2, #8
 8016950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016954:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 801695c:	2b00      	cmp	r3, #0
 801695e:	d002      	beq.n	8016966 <listdir+0x9a>
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	689b      	ldr	r3, [r3, #8]
 8016964:	e000      	b.n	8016968 <listdir+0x9c>
 8016966:	4b31      	ldr	r3, [pc, #196]	@ (8016a2c <listdir+0x160>)
 8016968:	461a      	mov	r2, r3
 801696a:	4931      	ldr	r1, [pc, #196]	@ (8016a30 <listdir+0x164>)
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f004 fac5 	bl	801aefc <mg_printf>
  off = c->send.len;  // Start of body
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016976:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 801697a:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 801697c:	4618      	mov	r0, r3
 801697e:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8016980:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8016982:	4619      	mov	r1, r3
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	9303      	str	r3, [sp, #12]
 8016988:	9102      	str	r1, [sp, #8]
 801698a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801698e:	9301      	str	r3, [sp, #4]
 8016990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8016994:	9300      	str	r3, [sp, #0]
 8016996:	4613      	mov	r3, r2
 8016998:	4602      	mov	r2, r0
 801699a:	4926      	ldr	r1, [pc, #152]	@ (8016a34 <listdir+0x168>)
 801699c:	68f8      	ldr	r0, [r7, #12]
 801699e:	f004 faad 	bl	801aefc <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 80169a2:	4a25      	ldr	r2, [pc, #148]	@ (8016a38 <listdir+0x16c>)
 80169a4:	4925      	ldr	r1, [pc, #148]	@ (8016a3c <listdir+0x170>)
 80169a6:	68f8      	ldr	r0, [r7, #12]
 80169a8:	f004 faa8 	bl	801aefc <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 80169ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80169b6:	4922      	ldr	r1, [pc, #136]	@ (8016a40 <listdir+0x174>)
 80169b8:	6838      	ldr	r0, [r7, #0]
 80169ba:	4798      	blx	r3
  mg_printf(c,
 80169bc:	4a21      	ldr	r2, [pc, #132]	@ (8016a44 <listdir+0x178>)
 80169be:	4922      	ldr	r1, [pc, #136]	@ (8016a48 <listdir+0x17c>)
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f004 fa9b 	bl	801aefc <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80169ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80169ce:	1ad3      	subs	r3, r2, r3
 80169d0:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80169d4:	4a1d      	ldr	r2, [pc, #116]	@ (8016a4c <listdir+0x180>)
 80169d6:	210a      	movs	r1, #10
 80169d8:	f008 f964 	bl	801eca4 <mg_snprintf>
 80169dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 80169e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80169e4:	2b0a      	cmp	r3, #10
 80169e6:	d902      	bls.n	80169ee <listdir+0x122>
 80169e8:	2300      	movs	r3, #0
 80169ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80169f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80169f6:	3b0c      	subs	r3, #12
 80169f8:	4413      	add	r3, r2
 80169fa:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80169fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8016a02:	4618      	mov	r0, r3
 8016a04:	f00a fc0d 	bl	8021222 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8016a08:	68fa      	ldr	r2, [r7, #12]
 8016a0a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8016a0e:	f36f 13c7 	bfc	r3, #7, #1
 8016a12:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8016a16:	bf00      	nop
 8016a18:	37d0      	adds	r7, #208	@ 0xd0
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	080253ac 	.word	0x080253ac
 8016a24:	08025574 	.word	0x08025574
 8016a28:	20000078 	.word	0x20000078
 8016a2c:	08024f5c 	.word	0x08024f5c
 8016a30:	08025738 	.word	0x08025738
 8016a34:	08025790 	.word	0x08025790
 8016a38:	08025918 	.word	0x08025918
 8016a3c:	080249e8 	.word	0x080249e8
 8016a40:	080166d1 	.word	0x080166d1
 8016a44:	08025968 	.word	0x08025968
 8016a48:	08025970 	.word	0x08025970
 8016a4c:	08025350 	.word	0x08025350

08016a50 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8016a50:	b082      	sub	sp, #8
 8016a52:	b590      	push	{r4, r7, lr}
 8016a54:	b08f      	sub	sp, #60	@ 0x3c
 8016a56:	af02      	add	r7, sp, #8
 8016a58:	60f8      	str	r0, [r7, #12]
 8016a5a:	60b9      	str	r1, [r7, #8]
 8016a5c:	607a      	str	r2, [r7, #4]
 8016a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8016a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a62:	461a      	mov	r2, r3
 8016a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a66:	9300      	str	r3, [sp, #0]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	4a9c      	ldr	r2, [pc, #624]	@ (8016cdc <uri_to_path2+0x28c>)
 8016a6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016a6e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016a70:	f008 f918 	bl	801eca4 <mg_snprintf>
 8016a74:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8016a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a78:	3302      	adds	r3, #2
 8016a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d809      	bhi.n	8016a94 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8016a80:	4b97      	ldr	r3, [pc, #604]	@ (8016ce0 <uri_to_path2+0x290>)
 8016a82:	4a98      	ldr	r2, [pc, #608]	@ (8016ce4 <uri_to_path2+0x294>)
 8016a84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f7ff f94b 	bl	8015d24 <mg_http_reply>
    return -1;
 8016a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a92:	e143      	b.n	8016d1c <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8016a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a96:	3b01      	subs	r3, #1
 8016a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016a9a:	4413      	add	r3, r2
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d012      	beq.n	8016acc <uri_to_path2+0x7c>
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa8:	3b01      	subs	r3, #1
 8016aaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016aac:	4413      	add	r3, r2
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	2b2f      	cmp	r3, #47	@ 0x2f
 8016ab2:	d00b      	beq.n	8016acc <uri_to_path2+0x7c>
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab6:	1c5a      	adds	r2, r3, #1
 8016ab8:	627a      	str	r2, [r7, #36]	@ 0x24
 8016aba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016abc:	4413      	add	r3, r2
 8016abe:	222f      	movs	r2, #47	@ 0x2f
 8016ac0:	701a      	strb	r2, [r3, #0]
 8016ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac6:	4413      	add	r3, r2
 8016ac8:	2200      	movs	r2, #0
 8016aca:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8016acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d212      	bcs.n	8016afc <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	689a      	ldr	r2, [r3, #8]
 8016ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016adc:	18d0      	adds	r0, r2, r3
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	68da      	ldr	r2, [r3, #12]
 8016ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016ae4:	1ad1      	subs	r1, r2, r3
 8016ae6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aea:	18d4      	adds	r4, r2, r3
 8016aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af0:	1ad3      	subs	r3, r2, r3
 8016af2:	2200      	movs	r2, #0
 8016af4:	9200      	str	r2, [sp, #0]
 8016af6:	4622      	mov	r2, r4
 8016af8:	f7fd fffb 	bl	8014af2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8016afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016afe:	3b01      	subs	r3, #1
 8016b00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016b02:	4413      	add	r3, r2
 8016b04:	2200      	movs	r2, #0
 8016b06:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8016b08:	f107 0314 	add.w	r3, r7, #20
 8016b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016b10:	4618      	mov	r0, r3
 8016b12:	f008 fb44 	bl	801f19e <mg_str_n>
 8016b16:	f107 0314 	add.w	r3, r7, #20
 8016b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b1e:	f009 fb15 	bl	802014c <mg_path_is_sane>
 8016b22:	4603      	mov	r3, r0
 8016b24:	f083 0301 	eor.w	r3, r3, #1
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d009      	beq.n	8016b42 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8016b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8016ce8 <uri_to_path2+0x298>)
 8016b30:	4a6c      	ldr	r2, [pc, #432]	@ (8016ce4 <uri_to_path2+0x294>)
 8016b32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8016b36:	68f8      	ldr	r0, [r7, #12]
 8016b38:	f7ff f8f4 	bl	8015d24 <mg_http_reply>
    return -1;
 8016b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016b40:	e0ec      	b.n	8016d1c <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8016b42:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016b44:	f7e9 fb9c 	bl	8000280 <strlen>
 8016b48:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8016b4a:	e007      	b.n	8016b5c <uri_to_path2+0x10c>
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b4e:	3b01      	subs	r3, #1
 8016b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b56:	4413      	add	r3, r2
 8016b58:	2200      	movs	r2, #0
 8016b5a:	701a      	strb	r2, [r3, #0]
 8016b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5e:	2b01      	cmp	r3, #1
 8016b60:	d906      	bls.n	8016b70 <uri_to_path2+0x120>
 8016b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b64:	3b01      	subs	r3, #1
 8016b66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016b68:	4413      	add	r3, r2
 8016b6a:	781b      	ldrb	r3, [r3, #0]
 8016b6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b6e:	d0ed      	beq.n	8016b4c <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8016b70:	f107 031c 	add.w	r3, r7, #28
 8016b74:	495d      	ldr	r1, [pc, #372]	@ (8016cec <uri_to_path2+0x29c>)
 8016b76:	4618      	mov	r0, r3
 8016b78:	f008 faf4 	bl	801f164 <mg_str_s>
 8016b7c:	68b9      	ldr	r1, [r7, #8]
 8016b7e:	f107 031c 	add.w	r3, r7, #28
 8016b82:	cb0c      	ldmia	r3, {r2, r3}
 8016b84:	3108      	adds	r1, #8
 8016b86:	c903      	ldmia	r1, {r0, r1}
 8016b88:	f008 fb36 	bl	801f1f8 <mg_strcmp>
 8016b8c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d007      	beq.n	8016ba2 <uri_to_path2+0x152>
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2200      	movs	r2, #0
 8016b98:	2100      	movs	r1, #0
 8016b9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016b9c:	4798      	blx	r3
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	e000      	b.n	8016ba4 <uri_to_path2+0x154>
 8016ba2:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8016ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8016ba6:	4b52      	ldr	r3, [pc, #328]	@ (8016cf0 <uri_to_path2+0x2a0>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b03      	cmp	r3, #3
 8016bac:	dd16      	ble.n	8016bdc <uri_to_path2+0x18c>
 8016bae:	4b51      	ldr	r3, [pc, #324]	@ (8016cf4 <uri_to_path2+0x2a4>)
 8016bb0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8016bb4:	4950      	ldr	r1, [pc, #320]	@ (8016cf8 <uri_to_path2+0x2a8>)
 8016bb6:	2004      	movs	r0, #4
 8016bb8:	f002 f858 	bl	8018c6c <mg_log_prefix>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	68db      	ldr	r3, [r3, #12]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	689a      	ldr	r2, [r3, #8]
 8016bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	4602      	mov	r2, r0
 8016bd6:	4849      	ldr	r0, [pc, #292]	@ (8016cfc <uri_to_path2+0x2ac>)
 8016bd8:	f002 f898 	bl	8018d0c <mg_log>
              flags));
  if (flags == 0) {
 8016bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f000 809b 	beq.w	8016d1a <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8016be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016be6:	f003 0304 	and.w	r3, r3, #4
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d020      	beq.n	8016c30 <uri_to_path2+0x1e0>
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d01c      	beq.n	8016c30 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	689a      	ldr	r2, [r3, #8]
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	3b01      	subs	r3, #1
 8016c00:	4413      	add	r3, r2
 8016c02:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8016c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c06:	d013      	beq.n	8016c30 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	689b      	ldr	r3, [r3, #8]
 8016c12:	493b      	ldr	r1, [pc, #236]	@ (8016d00 <uri_to_path2+0x2b0>)
 8016c14:	68f8      	ldr	r0, [r7, #12]
 8016c16:	f004 f971 	bl	801aefc <mg_printf>
    c->is_resp = 0;
 8016c1a:	68fa      	ldr	r2, [r7, #12]
 8016c1c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8016c20:	f36f 13c7 	bfc	r3, #7, #1
 8016c24:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8016c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016c2e:	e074      	b.n	8016d1a <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8016c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c32:	f003 0304 	and.w	r3, r3, #4
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d06f      	beq.n	8016d1a <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8016c3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	18d0      	adds	r0, r2, r3
 8016c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c44:	1ad3      	subs	r3, r2, r3
 8016c46:	4a2f      	ldr	r2, [pc, #188]	@ (8016d04 <uri_to_path2+0x2b4>)
 8016c48:	4619      	mov	r1, r3
 8016c4a:	f008 f82b 	bl	801eca4 <mg_snprintf>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d009      	beq.n	8016c68 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016c5e:	4798      	blx	r3
 8016c60:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8016c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d116      	bne.n	8016c96 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8016c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c6c:	18d0      	adds	r0, r2, r3
 8016c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	4a24      	ldr	r2, [pc, #144]	@ (8016d08 <uri_to_path2+0x2b8>)
 8016c76:	4619      	mov	r1, r3
 8016c78:	f008 f814 	bl	801eca4 <mg_snprintf>
 8016c7c:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d00c      	beq.n	8016c9c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2200      	movs	r2, #0
 8016c88:	2100      	movs	r1, #0
 8016c8a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016c8c:	4798      	blx	r3
 8016c8e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8016c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d002      	beq.n	8016c9c <uri_to_path2+0x24c>
      flags = tmp;
 8016c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016c9a:	e03e      	b.n	8016d1a <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8016c9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca0:	18d0      	adds	r0, r2, r3
 8016ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca6:	1ad3      	subs	r3, r2, r3
 8016ca8:	4a18      	ldr	r2, [pc, #96]	@ (8016d0c <uri_to_path2+0x2bc>)
 8016caa:	4619      	mov	r1, r3
 8016cac:	f007 fffa 	bl	801eca4 <mg_snprintf>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d02c      	beq.n	8016d10 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	2100      	movs	r1, #0
 8016cbe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016cc0:	4798      	blx	r3
 8016cc2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8016cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d022      	beq.n	8016d10 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8016cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8016cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd0:	330b      	adds	r3, #11
 8016cd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016cd4:	4413      	add	r3, r2
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	701a      	strb	r2, [r3, #0]
 8016cda:	e01e      	b.n	8016d1a <uri_to_path2+0x2ca>
 8016cdc:	080249fc 	.word	0x080249fc
 8016ce0:	080259e4 	.word	0x080259e4
 8016ce4:	08024f5c 	.word	0x08024f5c
 8016ce8:	080259f8 	.word	0x080259f8
 8016cec:	0802533c 	.word	0x0802533c
 8016cf0:	20000288 	.word	0x20000288
 8016cf4:	08026e84 	.word	0x08026e84
 8016cf8:	0802487c 	.word	0x0802487c
 8016cfc:	08025a08 	.word	0x08025a08
 8016d00:	08025a1c 	.word	0x08025a1c
 8016d04:	08025a58 	.word	0x08025a58
 8016d08:	08025a64 	.word	0x08025a64
 8016d0c:	08025a74 	.word	0x08025a74
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8016d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d14:	4413      	add	r3, r2
 8016d16:	2200      	movs	r2, #0
 8016d18:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8016d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3734      	adds	r7, #52	@ 0x34
 8016d20:	46bd      	mov	sp, r7
 8016d22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016d26:	b002      	add	sp, #8
 8016d28:	4770      	bx	lr
 8016d2a:	bf00      	nop

08016d2c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b09c      	sub	sp, #112	@ 0x70
 8016d30:	af06      	add	r7, sp, #24
 8016d32:	6178      	str	r0, [r7, #20]
 8016d34:	6139      	str	r1, [r7, #16]
 8016d36:	60fa      	str	r2, [r7, #12]
 8016d38:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	695b      	ldr	r3, [r3, #20]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d002      	beq.n	8016d48 <uri_to_path+0x1c>
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	695b      	ldr	r3, [r3, #20]
 8016d46:	e000      	b.n	8016d4a <uri_to_path+0x1e>
 8016d48:	4b5b      	ldr	r3, [pc, #364]	@ (8016eb8 <uri_to_path+0x18c>)
 8016d4a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016d54:	4611      	mov	r1, r2
 8016d56:	4618      	mov	r0, r3
 8016d58:	f008 fa04 	bl	801f164 <mg_str_s>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016d60:	2300      	movs	r3, #0
 8016d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016d64:	f107 031c 	add.w	r3, r7, #28
 8016d68:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d70:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8016d74:	e078      	b.n	8016e68 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8016d76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016d7a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8016d7e:	213d      	movs	r1, #61	@ 0x3d
 8016d80:	9100      	str	r1, [sp, #0]
 8016d82:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8016d86:	c903      	ldmia	r1, {r0, r1}
 8016d88:	f008 fbb3 	bl	801f4f2 <mg_span>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	f083 0301 	eor.w	r3, r3, #1
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d014      	beq.n	8016dc2 <uri_to_path+0x96>
 8016d98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016d9c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8016da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016da4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016da8:	463b      	mov	r3, r7
 8016daa:	2200      	movs	r2, #0
 8016dac:	2100      	movs	r1, #0
 8016dae:	4618      	mov	r0, r3
 8016db0:	f008 f9f5 	bl	801f19e <mg_str_n>
 8016db4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016db8:	463a      	mov	r2, r7
 8016dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dbe:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8016dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d123      	bne.n	8016e10 <uri_to_path+0xe4>
 8016dc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016dcc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8016dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016dd8:	463b      	mov	r3, r7
 8016dda:	4938      	ldr	r1, [pc, #224]	@ (8016ebc <uri_to_path+0x190>)
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f008 f9c1 	bl	801f164 <mg_str_s>
 8016de2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016de6:	463a      	mov	r2, r7
 8016de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8016df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016df4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8016df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e00:	f107 031c 	add.w	r3, r7, #28
 8016e04:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e0c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	68da      	ldr	r2, [r3, #12]
 8016e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d323      	bcc.n	8016e62 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8016e1a:	693b      	ldr	r3, [r7, #16]
 8016e1c:	6899      	ldr	r1, [r3, #8]
 8016e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016e20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016e24:	4618      	mov	r0, r3
 8016e26:	f008 f9ba 	bl	801f19e <mg_str_n>
 8016e2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016e2e:	cb0c      	ldmia	r3, {r2, r3}
 8016e30:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8016e34:	c903      	ldmia	r1, {r0, r1}
 8016e36:	f008 f9df 	bl	801f1f8 <mg_strcmp>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d112      	bne.n	8016e66 <uri_to_path+0x13a>
    u = k, p = v;
 8016e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016e44:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8016e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e50:	f107 031c 	add.w	r3, r7, #28
 8016e54:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e60:	e002      	b.n	8016e68 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 8016e62:	bf00      	nop
 8016e64:	e000      	b.n	8016e68 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8016e66:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8016e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016e6c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8016e70:	212c      	movs	r1, #44	@ 0x2c
 8016e72:	9100      	str	r1, [sp, #0]
 8016e74:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8016e78:	c903      	ldmia	r1, {r0, r1}
 8016e7a:	f008 fb3a 	bl	801f4f2 <mg_span>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f47f af78 	bne.w	8016d76 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8016e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016e88:	9304      	str	r3, [sp, #16]
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	9303      	str	r3, [sp, #12]
 8016e8e:	aa01      	add	r2, sp, #4
 8016e90:	f107 031c 	add.w	r3, r7, #28
 8016e94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e98:	e882 0003 	stmia.w	r2, {r0, r1}
 8016e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016ea4:	6939      	ldr	r1, [r7, #16]
 8016ea6:	6978      	ldr	r0, [r7, #20]
 8016ea8:	f7ff fdd2 	bl	8016a50 <uri_to_path2>
 8016eac:	4603      	mov	r3, r0
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3758      	adds	r7, #88	@ 0x58
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	20000078 	.word	0x20000078
 8016ebc:	0802533c 	.word	0x0802533c

08016ec0 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b0ac      	sub	sp, #176	@ 0xb0
 8016ec4:	af02      	add	r7, sp, #8
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8016ed4:	f107 0310 	add.w	r3, r7, #16
 8016ed8:	2280      	movs	r2, #128	@ 0x80
 8016eda:	9200      	str	r2, [sp, #0]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	68b9      	ldr	r1, [r7, #8]
 8016ee0:	68f8      	ldr	r0, [r7, #12]
 8016ee2:	f7ff ff23 	bl	8016d2c <uri_to_path>
 8016ee6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 8016eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	db41      	blt.n	8016f76 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8016ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016ef6:	f003 0304 	and.w	r3, r3, #4
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d007      	beq.n	8016f0e <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 8016efe:	f107 0310 	add.w	r3, r7, #16
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	68b9      	ldr	r1, [r7, #8]
 8016f06:	68f8      	ldr	r0, [r7, #12]
 8016f08:	f7ff fce0 	bl	80168cc <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8016f0c:	e033      	b.n	8016f76 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8016f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d028      	beq.n	8016f68 <mg_http_serve_dir+0xa8>
 8016f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d024      	beq.n	8016f68 <mg_http_serve_dir+0xa8>
 8016f1e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016f22:	f107 0210 	add.w	r2, r7, #16
 8016f26:	4611      	mov	r1, r2
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f008 f91b 	bl	801f164 <mg_str_s>
 8016f2e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8016f36:	4618      	mov	r0, r3
 8016f38:	f008 f914 	bl	801f164 <mg_str_s>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016f44:	cb0c      	ldmia	r3, {r2, r3}
 8016f46:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8016f4a:	c903      	ldmia	r1, {r0, r1}
 8016f4c:	f008 f9dd 	bl	801f30a <mg_match>
 8016f50:	4603      	mov	r3, r0
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d008      	beq.n	8016f68 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f107 0210 	add.w	r2, r7, #16
 8016f5e:	4619      	mov	r1, r3
 8016f60:	68f8      	ldr	r0, [r7, #12]
 8016f62:	f008 f8eb 	bl	801f13c <mg_http_serve_ssi>
}
 8016f66:	e006      	b.n	8016f76 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8016f68:	f107 0210 	add.w	r2, r7, #16
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	68b9      	ldr	r1, [r7, #8]
 8016f70:	68f8      	ldr	r0, [r7, #12]
 8016f72:	f7ff f8cb 	bl	801610c <mg_http_serve_file>
}
 8016f76:	bf00      	nop
 8016f78:	37a8      	adds	r7, #168	@ 0xa8
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}

08016f7e <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8016f7e:	b480      	push	{r7}
 8016f80:	b083      	sub	sp, #12
 8016f82:	af00      	add	r7, sp, #0
 8016f84:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f8a:	dd02      	ble.n	8016f92 <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2b39      	cmp	r3, #57	@ 0x39
 8016f90:	dd17      	ble.n	8016fc2 <mg_is_url_safe+0x44>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2b60      	cmp	r3, #96	@ 0x60
 8016f96:	dd02      	ble.n	8016f9e <mg_is_url_safe+0x20>
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2b7a      	cmp	r3, #122	@ 0x7a
 8016f9c:	dd11      	ble.n	8016fc2 <mg_is_url_safe+0x44>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	2b40      	cmp	r3, #64	@ 0x40
 8016fa2:	dd02      	ble.n	8016faa <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2b5a      	cmp	r3, #90	@ 0x5a
 8016fa8:	dd0b      	ble.n	8016fc2 <mg_is_url_safe+0x44>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8016fae:	d008      	beq.n	8016fc2 <mg_is_url_safe+0x44>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2b5f      	cmp	r3, #95	@ 0x5f
 8016fb4:	d005      	beq.n	8016fc2 <mg_is_url_safe+0x44>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	2b2d      	cmp	r3, #45	@ 0x2d
 8016fba:	d002      	beq.n	8016fc2 <mg_is_url_safe+0x44>
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2b7e      	cmp	r3, #126	@ 0x7e
 8016fc0:	d101      	bne.n	8016fc6 <mg_is_url_safe+0x48>
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	e000      	b.n	8016fc8 <mg_is_url_safe+0x4a>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	f003 0301 	and.w	r3, r3, #1
 8016fcc:	b2db      	uxtb	r3, r3
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	370c      	adds	r7, #12
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr
	...

08016fdc <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b08a      	sub	sp, #40	@ 0x28
 8016fe0:	af02      	add	r7, sp, #8
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 8016fea:	2300      	movs	r3, #0
 8016fec:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8016fee:	2300      	movs	r3, #0
 8016ff0:	61fb      	str	r3, [r7, #28]
 8016ff2:	e030      	b.n	8017056 <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 8016ff4:	68fa      	ldr	r2, [r7, #12]
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	4413      	add	r3, r2
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	3304      	adds	r3, #4
 8017002:	683a      	ldr	r2, [r7, #0]
 8017004:	429a      	cmp	r2, r3
 8017006:	d801      	bhi.n	801700c <mg_url_encode+0x30>
 8017008:	2300      	movs	r3, #0
 801700a:	e03f      	b.n	801708c <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 801700c:	6978      	ldr	r0, [r7, #20]
 801700e:	f7ff ffb6 	bl	8016f7e <mg_is_url_safe>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d00a      	beq.n	801702e <mg_url_encode+0x52>
      buf[n++] = s[i];
 8017018:	68fa      	ldr	r2, [r7, #12]
 801701a:	69fb      	ldr	r3, [r7, #28]
 801701c:	441a      	add	r2, r3
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	1c59      	adds	r1, r3, #1
 8017022:	61b9      	str	r1, [r7, #24]
 8017024:	6879      	ldr	r1, [r7, #4]
 8017026:	440b      	add	r3, r1
 8017028:	7812      	ldrb	r2, [r2, #0]
 801702a:	701a      	strb	r2, [r3, #0]
 801702c:	e010      	b.n	8017050 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	69bb      	ldr	r3, [r7, #24]
 8017032:	18d0      	adds	r0, r2, r3
 8017034:	68fa      	ldr	r2, [r7, #12]
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	4413      	add	r3, r2
 801703a:	9301      	str	r3, [sp, #4]
 801703c:	2301      	movs	r3, #1
 801703e:	9300      	str	r3, [sp, #0]
 8017040:	4b14      	ldr	r3, [pc, #80]	@ (8017094 <mg_url_encode+0xb8>)
 8017042:	4a15      	ldr	r2, [pc, #84]	@ (8017098 <mg_url_encode+0xbc>)
 8017044:	2104      	movs	r1, #4
 8017046:	f007 fe2d 	bl	801eca4 <mg_snprintf>
      n += 3;
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	3303      	adds	r3, #3
 801704e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8017050:	69fb      	ldr	r3, [r7, #28]
 8017052:	3301      	adds	r3, #1
 8017054:	61fb      	str	r3, [r7, #28]
 8017056:	69fa      	ldr	r2, [r7, #28]
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	429a      	cmp	r2, r3
 801705c:	d3ca      	bcc.n	8016ff4 <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d009      	beq.n	8017078 <mg_url_encode+0x9c>
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	3b01      	subs	r3, #1
 8017068:	69ba      	ldr	r2, [r7, #24]
 801706a:	429a      	cmp	r2, r3
 801706c:	d204      	bcs.n	8017078 <mg_url_encode+0x9c>
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	69bb      	ldr	r3, [r7, #24]
 8017072:	4413      	add	r3, r2
 8017074:	2200      	movs	r2, #0
 8017076:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d005      	beq.n	801708a <mg_url_encode+0xae>
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	3b01      	subs	r3, #1
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	4413      	add	r3, r2
 8017086:	2200      	movs	r2, #0
 8017088:	701a      	strb	r2, [r3, #0]
  return n;
 801708a:	69bb      	ldr	r3, [r7, #24]
}
 801708c:	4618      	mov	r0, r3
 801708e:	3720      	adds	r7, #32
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	0801ef8d 	.word	0x0801ef8d
 8017098:	08025a84 	.word	0x08025a84

0801709c <mg_http_upload>:
  }
  return mg_str_n(NULL, 0);
}

long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 801709c:	b590      	push	{r4, r7, lr}
 801709e:	b0d3      	sub	sp, #332	@ 0x14c
 80170a0:	af02      	add	r7, sp, #8
 80170a2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 80170a6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 80170aa:	6020      	str	r0, [r4, #0]
 80170ac:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80170b0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80170b4:	6001      	str	r1, [r0, #0]
 80170b6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80170ba:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 80170be:	600a      	str	r2, [r1, #0]
 80170c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80170c4:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80170c8:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 80170ca:	2330      	movs	r3, #48	@ 0x30
 80170cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80170d0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80170d4:	2200      	movs	r2, #0
 80170d6:	601a      	str	r2, [r3, #0]
 80170d8:	605a      	str	r2, [r3, #4]
 80170da:	609a      	str	r2, [r3, #8]
 80170dc:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 80170de:	2300      	movs	r3, #0
 80170e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 80170e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80170e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	f103 0010 	add.w	r0, r3, #16
 80170f2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80170f6:	2314      	movs	r3, #20
 80170f8:	49b5      	ldr	r1, [pc, #724]	@ (80173d0 <mg_http_upload+0x334>)
 80170fa:	f7fd fc85 	bl	8014a08 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80170fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017102:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f103 0010 	add.w	r0, r3, #16
 801710c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8017110:	2380      	movs	r3, #128	@ 0x80
 8017112:	49b0      	ldr	r1, [pc, #704]	@ (80173d4 <mg_http_upload+0x338>)
 8017114:	f7fd fc78 	bl	8014a08 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8017118:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801711c:	2200      	movs	r2, #0
 801711e:	2100      	movs	r1, #0
 8017120:	4618      	mov	r0, r3
 8017122:	f009 fe55 	bl	8020dd0 <strtol>
 8017126:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 801712a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801712e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8017132:	f107 0018 	add.w	r0, r7, #24
 8017136:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 801713a:	9201      	str	r2, [sp, #4]
 801713c:	222f      	movs	r2, #47	@ 0x2f
 801713e:	9200      	str	r2, [sp, #0]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	4aa5      	ldr	r2, [pc, #660]	@ (80173d8 <mg_http_upload+0x33c>)
 8017144:	2180      	movs	r1, #128	@ 0x80
 8017146:	f007 fdad 	bl	801eca4 <mg_snprintf>
  if (hm->body.len == 0) {
 801714a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801714e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017158:	2b00      	cmp	r3, #0
 801715a:	d10d      	bne.n	8017178 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, "", "%ld", res);  // Nothing to write
 801715c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017160:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8017164:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	4b9c      	ldr	r3, [pc, #624]	@ (80173dc <mg_http_upload+0x340>)
 801716c:	4a9c      	ldr	r2, [pc, #624]	@ (80173e0 <mg_http_upload+0x344>)
 801716e:	21c8      	movs	r1, #200	@ 0xc8
 8017170:	6800      	ldr	r0, [r0, #0]
 8017172:	f7fe fdd7 	bl	8015d24 <mg_http_reply>
 8017176:	e123      	b.n	80173c0 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 8017178:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801717c:	2b00      	cmp	r3, #0
 801717e:	d10f      	bne.n	80171a0 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 8017180:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017184:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8017188:	4b96      	ldr	r3, [pc, #600]	@ (80173e4 <mg_http_upload+0x348>)
 801718a:	4a95      	ldr	r2, [pc, #596]	@ (80173e0 <mg_http_upload+0x344>)
 801718c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017190:	6800      	ldr	r0, [r0, #0]
 8017192:	f7fe fdc7 	bl	8015d24 <mg_http_reply>
    res = -1;
 8017196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801719a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801719e:	e10f      	b.n	80173c0 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 80171a0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80171a4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80171a8:	4611      	mov	r1, r2
 80171aa:	4618      	mov	r0, r3
 80171ac:	f007 ffda 	bl	801f164 <mg_str_s>
 80171b0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80171b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80171b8:	f008 ffc8 	bl	802014c <mg_path_is_sane>
 80171bc:	4603      	mov	r3, r0
 80171be:	f083 0301 	eor.w	r3, r3, #1
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d012      	beq.n	80171ee <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 80171c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80171cc:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80171d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80171d4:	9300      	str	r3, [sp, #0]
 80171d6:	4b84      	ldr	r3, [pc, #528]	@ (80173e8 <mg_http_upload+0x34c>)
 80171d8:	4a81      	ldr	r2, [pc, #516]	@ (80173e0 <mg_http_upload+0x344>)
 80171da:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80171de:	6800      	ldr	r0, [r0, #0]
 80171e0:	f7fe fda0 	bl	8015d24 <mg_http_reply>
    res = -2;
 80171e4:	f06f 0301 	mvn.w	r3, #1
 80171e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80171ec:	e0e8      	b.n	80173c0 <mg_http_upload+0x324>
  } else if (offset < 0) {
 80171ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	da0f      	bge.n	8017216 <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 80171f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80171fa:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80171fe:	4b7b      	ldr	r3, [pc, #492]	@ (80173ec <mg_http_upload+0x350>)
 8017200:	4a77      	ldr	r2, [pc, #476]	@ (80173e0 <mg_http_upload+0x344>)
 8017202:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017206:	6800      	ldr	r0, [r0, #0]
 8017208:	f7fe fd8c 	bl	8015d24 <mg_http_reply>
    res = -3;
 801720c:	f06f 0302 	mvn.w	r3, #2
 8017210:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8017214:	e0d4      	b.n	80173c0 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8017216:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801721a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017224:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8017228:	4413      	add	r3, r2
 801722a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801722e:	429a      	cmp	r2, r3
 8017230:	d215      	bcs.n	801725e <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8017232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017236:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 801723a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801723e:	9301      	str	r3, [sp, #4]
 8017240:	f107 0318 	add.w	r3, r7, #24
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	4b6a      	ldr	r3, [pc, #424]	@ (80173f0 <mg_http_upload+0x354>)
 8017248:	4a65      	ldr	r2, [pc, #404]	@ (80173e0 <mg_http_upload+0x344>)
 801724a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801724e:	6800      	ldr	r0, [r0, #0]
 8017250:	f7fe fd68 	bl	8015d24 <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 8017254:	f06f 0303 	mvn.w	r3, #3
 8017258:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801725c:	e0b0      	b.n	80173c0 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 801725e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017262:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8017266:	2200      	movs	r2, #0
 8017268:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 801726a:	4b62      	ldr	r3, [pc, #392]	@ (80173f4 <mg_http_upload+0x358>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	2b02      	cmp	r3, #2
 8017270:	dd14      	ble.n	801729c <mg_http_upload+0x200>
 8017272:	4b61      	ldr	r3, [pc, #388]	@ (80173f8 <mg_http_upload+0x35c>)
 8017274:	f640 4266 	movw	r2, #3174	@ 0xc66
 8017278:	4960      	ldr	r1, [pc, #384]	@ (80173fc <mg_http_upload+0x360>)
 801727a:	2003      	movs	r0, #3
 801727c:	f001 fcf6 	bl	8018c6c <mg_log_prefix>
 8017280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017284:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801728e:	f107 0118 	add.w	r1, r7, #24
 8017292:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8017296:	485a      	ldr	r0, [pc, #360]	@ (8017400 <mg_http_upload+0x364>)
 8017298:	f001 fd38 	bl	8018d0c <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 801729c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d109      	bne.n	80172b8 <mg_http_upload+0x21c>
 80172a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80172a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	6a1b      	ldr	r3, [r3, #32]
 80172b0:	f107 0218 	add.w	r2, r7, #24
 80172b4:	4610      	mov	r0, r2
 80172b6:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 80172b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80172bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f107 0114 	add.w	r1, r7, #20
 80172c8:	f107 0018 	add.w	r0, r7, #24
 80172cc:	2200      	movs	r2, #0
 80172ce:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 80172d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dd1b      	ble.n	8017310 <mg_http_upload+0x274>
 80172d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80172dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80172e0:	681a      	ldr	r2, [r3, #0]
 80172e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d012      	beq.n	8017310 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80172ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80172ee:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80172f2:	f107 0318 	add.w	r3, r7, #24
 80172f6:	9300      	str	r3, [sp, #0]
 80172f8:	4b42      	ldr	r3, [pc, #264]	@ (8017404 <mg_http_upload+0x368>)
 80172fa:	4a39      	ldr	r2, [pc, #228]	@ (80173e0 <mg_http_upload+0x344>)
 80172fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017300:	6800      	ldr	r0, [r0, #0]
 8017302:	f7fe fd0f 	bl	8015d24 <mg_http_reply>
      res = -5;
 8017306:	f06f 0304 	mvn.w	r3, #4
 801730a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801730e:	e057      	b.n	80173c0 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8017310:	f107 0118 	add.w	r1, r7, #24
 8017314:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017318:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801731c:	2202      	movs	r2, #2
 801731e:	6818      	ldr	r0, [r3, #0]
 8017320:	f7fd f998 	bl	8014654 <mg_fs_open>
 8017324:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8017328:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801732c:	2b00      	cmp	r3, #0
 801732e:	d117      	bne.n	8017360 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8017330:	f009 ff4a 	bl	80211c8 <__errno>
 8017334:	4603      	mov	r3, r0
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801733c:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 8017340:	9301      	str	r3, [sp, #4]
 8017342:	f107 0318 	add.w	r3, r7, #24
 8017346:	9300      	str	r3, [sp, #0]
 8017348:	4b2f      	ldr	r3, [pc, #188]	@ (8017408 <mg_http_upload+0x36c>)
 801734a:	4a25      	ldr	r2, [pc, #148]	@ (80173e0 <mg_http_upload+0x344>)
 801734c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017350:	6800      	ldr	r0, [r0, #0]
 8017352:	f7fe fce7 	bl	8015d24 <mg_http_reply>
      res = -6;
 8017356:	f06f 0305 	mvn.w	r3, #5
 801735a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801735e:	e02f      	b.n	80173c0 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8017360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017364:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	695b      	ldr	r3, [r3, #20]
 801736c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8017370:	6810      	ldr	r0, [r2, #0]
 8017372:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8017376:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 801737a:	6812      	ldr	r2, [r2, #0]
 801737c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8017380:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8017384:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8017388:	6812      	ldr	r2, [r2, #0]
 801738a:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 801738e:	4798      	blx	r3
 8017390:	4603      	mov	r3, r0
 8017392:	461a      	mov	r2, r3
 8017394:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8017398:	4413      	add	r3, r2
 801739a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 801739e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80173a2:	f7fd f97e 	bl	80146a2 <mg_fs_close>
      mg_http_reply(c, 200, "", "%ld", res);
 80173a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80173aa:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80173ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	4b09      	ldr	r3, [pc, #36]	@ (80173dc <mg_http_upload+0x340>)
 80173b6:	4a0a      	ldr	r2, [pc, #40]	@ (80173e0 <mg_http_upload+0x344>)
 80173b8:	21c8      	movs	r1, #200	@ 0xc8
 80173ba:	6800      	ldr	r0, [r0, #0]
 80173bc:	f7fe fcb2 	bl	8015d24 <mg_http_reply>
    }
  }
  return res;
 80173c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd90      	pop	{r4, r7, pc}
 80173ce:	bf00      	nop
 80173d0:	08025ac4 	.word	0x08025ac4
 80173d4:	08025acc 	.word	0x08025acc
 80173d8:	08025310 	.word	0x08025310
 80173dc:	08025ad4 	.word	0x08025ad4
 80173e0:	08024f5c 	.word	0x08024f5c
 80173e4:	08025ad8 	.word	0x08025ad8
 80173e8:	08025ae8 	.word	0x08025ae8
 80173ec:	08025afc 	.word	0x08025afc
 80173f0:	08025b0c 	.word	0x08025b0c
 80173f4:	20000288 	.word	0x20000288
 80173f8:	08026e94 	.word	0x08026e94
 80173fc:	0802487c 	.word	0x0802487c
 8017400:	08025b28 	.word	0x08025b28
 8017404:	08025b40 	.word	0x08025b40
 8017408:	08025b54 	.word	0x08025b54

0801740c <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	689b      	ldr	r3, [r3, #8]
 8017418:	4618      	mov	r0, r3
 801741a:	f009 fa73 	bl	8020904 <atoi>
 801741e:	4603      	mov	r3, r0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3708      	adds	r7, #8
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}

08017428 <is_hex_digit>:

static bool is_hex_digit(int c) {
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2b2f      	cmp	r3, #47	@ 0x2f
 8017434:	dd02      	ble.n	801743c <is_hex_digit+0x14>
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2b39      	cmp	r3, #57	@ 0x39
 801743a:	dd0b      	ble.n	8017454 <is_hex_digit+0x2c>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b60      	cmp	r3, #96	@ 0x60
 8017440:	dd02      	ble.n	8017448 <is_hex_digit+0x20>
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2b66      	cmp	r3, #102	@ 0x66
 8017446:	dd05      	ble.n	8017454 <is_hex_digit+0x2c>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2b40      	cmp	r3, #64	@ 0x40
 801744c:	dd04      	ble.n	8017458 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2b46      	cmp	r3, #70	@ 0x46
 8017452:	dc01      	bgt.n	8017458 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8017454:	2301      	movs	r3, #1
 8017456:	e000      	b.n	801745a <is_hex_digit+0x32>
 8017458:	2300      	movs	r3, #0
 801745a:	f003 0301 	and.w	r3, r3, #1
 801745e:	b2db      	uxtb	r3, r3
}
 8017460:	4618      	mov	r0, r3
 8017462:	370c      	adds	r7, #12
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr

0801746c <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 801746c:	b580      	push	{r7, lr}
 801746e:	b08a      	sub	sp, #40	@ 0x28
 8017470:	af02      	add	r7, sp, #8
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	607a      	str	r2, [r7, #4]
 8017478:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 801747a:	2300      	movs	r3, #0
 801747c:	61fb      	str	r3, [r7, #28]
 801747e:	2300      	movs	r3, #0
 8017480:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	2b02      	cmp	r3, #2
 8017486:	dc04      	bgt.n	8017492 <skip_chunk+0x26>
 8017488:	2300      	movs	r3, #0
 801748a:	e07a      	b.n	8017582 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 801748c:	69fb      	ldr	r3, [r7, #28]
 801748e:	3301      	adds	r3, #1
 8017490:	61fb      	str	r3, [r7, #28]
 8017492:	69fa      	ldr	r2, [r7, #28]
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	429a      	cmp	r2, r3
 8017498:	da09      	bge.n	80174ae <skip_chunk+0x42>
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	68fa      	ldr	r2, [r7, #12]
 801749e:	4413      	add	r3, r2
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7ff ffc0 	bl	8017428 <is_hex_digit>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1ee      	bne.n	801748c <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 80174ae:	69fb      	ldr	r3, [r7, #28]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d102      	bne.n	80174ba <skip_chunk+0x4e>
 80174b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174b8:	e063      	b.n	8017582 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	2b08      	cmp	r3, #8
 80174be:	dd02      	ble.n	80174c6 <skip_chunk+0x5a>
 80174c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174c4:	e05d      	b.n	8017582 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80174c6:	69fa      	ldr	r2, [r7, #28]
 80174c8:	68bb      	ldr	r3, [r7, #8]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	da0c      	bge.n	80174e8 <skip_chunk+0x7c>
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	68fa      	ldr	r2, [r7, #12]
 80174d2:	4413      	add	r3, r2
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	2b0d      	cmp	r3, #13
 80174d8:	d106      	bne.n	80174e8 <skip_chunk+0x7c>
 80174da:	69fb      	ldr	r3, [r7, #28]
 80174dc:	3301      	adds	r3, #1
 80174de:	68fa      	ldr	r2, [r7, #12]
 80174e0:	4413      	add	r3, r2
 80174e2:	781b      	ldrb	r3, [r3, #0]
 80174e4:	2b0a      	cmp	r3, #10
 80174e6:	d002      	beq.n	80174ee <skip_chunk+0x82>
 80174e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174ec:	e049      	b.n	8017582 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80174ee:	69fa      	ldr	r2, [r7, #28]
 80174f0:	f107 0314 	add.w	r3, r7, #20
 80174f4:	68f9      	ldr	r1, [r7, #12]
 80174f6:	4618      	mov	r0, r3
 80174f8:	f007 fe51 	bl	801f19e <mg_str_n>
 80174fc:	f107 0310 	add.w	r3, r7, #16
 8017500:	2204      	movs	r2, #4
 8017502:	9200      	str	r2, [sp, #0]
 8017504:	2210      	movs	r2, #16
 8017506:	f107 0114 	add.w	r1, r7, #20
 801750a:	c903      	ldmia	r1, {r0, r1}
 801750c:	f008 f84e 	bl	801f5ac <mg_str_to_num>
 8017510:	4603      	mov	r3, r0
 8017512:	f083 0301 	eor.w	r3, r3, #1
 8017516:	b2db      	uxtb	r3, r3
 8017518:	2b00      	cmp	r3, #0
 801751a:	d002      	beq.n	8017522 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 801751c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017520:	e02f      	b.n	8017582 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	2b00      	cmp	r3, #0
 8017526:	da02      	bge.n	801752e <skip_chunk+0xc2>
 8017528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801752c:	e029      	b.n	8017582 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 801752e:	68ba      	ldr	r2, [r7, #8]
 8017530:	69fb      	ldr	r3, [r7, #28]
 8017532:	1ad3      	subs	r3, r2, r3
 8017534:	1eda      	subs	r2, r3, #3
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	429a      	cmp	r2, r3
 801753a:	dc01      	bgt.n	8017540 <skip_chunk+0xd4>
 801753c:	2300      	movs	r3, #0
 801753e:	e020      	b.n	8017582 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8017540:	693a      	ldr	r2, [r7, #16]
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	4413      	add	r3, r2
 8017546:	3302      	adds	r3, #2
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	4413      	add	r3, r2
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	2b0d      	cmp	r3, #13
 8017550:	d108      	bne.n	8017564 <skip_chunk+0xf8>
 8017552:	693a      	ldr	r2, [r7, #16]
 8017554:	69fb      	ldr	r3, [r7, #28]
 8017556:	4413      	add	r3, r2
 8017558:	3303      	adds	r3, #3
 801755a:	68fa      	ldr	r2, [r7, #12]
 801755c:	4413      	add	r3, r2
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	2b0a      	cmp	r3, #10
 8017562:	d002      	beq.n	801756a <skip_chunk+0xfe>
 8017564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017568:	e00b      	b.n	8017582 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 801756a:	69fb      	ldr	r3, [r7, #28]
 801756c:	1c9a      	adds	r2, r3, #2
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	601a      	str	r2, [r3, #0]
 8017572:	693a      	ldr	r2, [r7, #16]
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	1c9a      	adds	r2, r3, #2
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	4413      	add	r3, r2
 8017580:	3302      	adds	r3, #2
}
 8017582:	4618      	mov	r0, r3
 8017584:	3720      	adds	r7, #32
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
	...

0801758c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 801758c:	b580      	push	{r7, lr}
 801758e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017592:	af00      	add	r7, sp, #0
 8017594:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017598:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801759c:	6018      	str	r0, [r3, #0]
 801759e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175a2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80175a6:	6019      	str	r1, [r3, #0]
 80175a8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175ac:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80175b0:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 80175b2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175b6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2b07      	cmp	r3, #7
 80175be:	d031      	beq.n	8017624 <http_cb+0x98>
 80175c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175c4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	2b09      	cmp	r3, #9
 80175cc:	d02a      	beq.n	8017624 <http_cb+0x98>
 80175ce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175d2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2b02      	cmp	r3, #2
 80175da:	f040 831a 	bne.w	8017c12 <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80175de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175e2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80175ec:	f003 0304 	and.w	r3, r3, #4
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f000 830d 	beq.w	8017c12 <http_cb+0x686>
 80175f8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80175fc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8017606:	f003 0310 	and.w	r3, r3, #16
 801760a:	b2db      	uxtb	r3, r3
 801760c:	2b00      	cmp	r3, #0
 801760e:	f040 8300 	bne.w	8017c12 <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 8017612:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017616:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 801761e:	2b00      	cmp	r3, #0
 8017620:	f000 82f7 	beq.w	8017c12 <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8017624:	2300      	movs	r3, #0
 8017626:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 801762a:	e2c5      	b.n	8017bb8 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 801762c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017630:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017638:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 801763c:	4413      	add	r3, r2
 801763e:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8017642:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017646:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801764e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	f107 0214 	add.w	r2, r7, #20
 8017658:	4619      	mov	r1, r3
 801765a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 801765e:	f7fd fcf7 	bl	8015050 <mg_http_parse>
 8017662:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8017666:	2300      	movs	r3, #0
 8017668:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 801766c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8017670:	2b00      	cmp	r3, #0
 8017672:	da38      	bge.n	80176e6 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8017674:	4bc8      	ldr	r3, [pc, #800]	@ (8017998 <http_cb+0x40c>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	dd10      	ble.n	801769e <http_cb+0x112>
 801767c:	4bc7      	ldr	r3, [pc, #796]	@ (801799c <http_cb+0x410>)
 801767e:	f640 429f 	movw	r2, #3231	@ 0xc9f
 8017682:	49c7      	ldr	r1, [pc, #796]	@ (80179a0 <http_cb+0x414>)
 8017684:	2001      	movs	r0, #1
 8017686:	f001 faf1 	bl	8018c6c <mg_log_prefix>
 801768a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801768e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017696:	4619      	mov	r1, r3
 8017698:	48c2      	ldr	r0, [pc, #776]	@ (80179a4 <http_cb+0x418>)
 801769a:	f001 fb37 	bl	8018d0c <mg_log>
        c->is_draining = 1;
 801769e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80176a2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80176ac:	f043 0310 	orr.w	r3, r3, #16
 80176b0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80176b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80176b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80176c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80176c4:	1ad3      	subs	r3, r2, r3
 80176c6:	2b10      	cmp	r3, #16
 80176c8:	bf28      	it	cs
 80176ca:	2310      	movcs	r3, #16
 80176cc:	4619      	mov	r1, r3
 80176ce:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80176d2:	f001 fb51 	bl	8018d78 <mg_hexdump>
        c->recv.len = 0;
 80176d6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80176da:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2200      	movs	r2, #0
 80176e2:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80176e4:	e295      	b.n	8017c12 <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80176e6:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	f000 827c 	beq.w	8017be8 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80176f0:	f107 0214 	add.w	r2, r7, #20
 80176f4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80176f8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80176fc:	210a      	movs	r1, #10
 80176fe:	6818      	ldr	r0, [r3, #0]
 8017700:	f7fb fed4 	bl	80134ac <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8017704:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017708:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	2b09      	cmp	r3, #9
 8017710:	d128      	bne.n	8017764 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8017712:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017716:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801771e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017722:	1ad2      	subs	r2, r2, r3
 8017724:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017728:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801772c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8017730:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017734:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017738:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801773c:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8017740:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8017744:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8017748:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 801774c:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8017750:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8017754:	1a8a      	subs	r2, r1, r2
 8017756:	1a9a      	subs	r2, r3, r2
 8017758:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801775c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017760:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8017764:	f107 0314 	add.w	r3, r7, #20
 8017768:	498f      	ldr	r1, [pc, #572]	@ (80179a8 <http_cb+0x41c>)
 801776a:	4618      	mov	r0, r3
 801776c:	f7fd fab4 	bl	8014cd8 <mg_http_get_header>
 8017770:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8017774:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8017778:	2b00      	cmp	r3, #0
 801777a:	d01d      	beq.n	80177b8 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 801777c:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8017780:	498a      	ldr	r1, [pc, #552]	@ (80179ac <http_cb+0x420>)
 8017782:	4618      	mov	r0, r3
 8017784:	f007 fcee 	bl	801f164 <mg_str_s>
 8017788:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801778c:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8017790:	cb0c      	ldmia	r3, {r2, r3}
 8017792:	c903      	ldmia	r1, {r0, r1}
 8017794:	f007 fd72 	bl	801f27c <mg_strcasecmp>
 8017798:	4603      	mov	r3, r0
 801779a:	2b00      	cmp	r3, #0
 801779c:	d103      	bne.n	80177a6 <http_cb+0x21a>
          is_chunked = true;
 801779e:	2301      	movs	r3, #1
 80177a0:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 80177a4:	e09f      	b.n	80178e6 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80177a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80177aa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80177ae:	4980      	ldr	r1, [pc, #512]	@ (80179b0 <http_cb+0x424>)
 80177b0:	6818      	ldr	r0, [r3, #0]
 80177b2:	f7fb fe9b 	bl	80134ec <mg_error>
          return;
 80177b6:	e22c      	b.n	8017c12 <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80177b8:	f107 0314 	add.w	r3, r7, #20
 80177bc:	497d      	ldr	r1, [pc, #500]	@ (80179b4 <http_cb+0x428>)
 80177be:	4618      	mov	r0, r3
 80177c0:	f7fd fa8a 	bl	8014cd8 <mg_http_get_header>
 80177c4:	4603      	mov	r3, r0
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f040 808d 	bne.w	80178e6 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80177cc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80177d0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	2205      	movs	r2, #5
 80177d8:	4977      	ldr	r1, [pc, #476]	@ (80179b8 <http_cb+0x42c>)
 80177da:	4618      	mov	r0, r3
 80177dc:	f7fc ffee 	bl	80147bc <mg_ncasecmp>
 80177e0:	4603      	mov	r3, r0
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	bf0c      	ite	eq
 80177e6:	2301      	moveq	r3, #1
 80177e8:	2300      	movne	r3, #0
 80177ea:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 80177ee:	2300      	movs	r3, #0
 80177f0:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80177f4:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80177f8:	f083 0301 	eor.w	r3, r3, #1
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d030      	beq.n	8017864 <http_cb+0x2d8>
 8017802:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017806:	496d      	ldr	r1, [pc, #436]	@ (80179bc <http_cb+0x430>)
 8017808:	4618      	mov	r0, r3
 801780a:	f007 fcab 	bl	801f164 <mg_str_s>
 801780e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017812:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8017816:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801781a:	cb0c      	ldmia	r3, {r2, r3}
 801781c:	c903      	ldmia	r1, {r0, r1}
 801781e:	f007 fd2d 	bl	801f27c <mg_strcasecmp>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d012      	beq.n	801784e <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8017828:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801782c:	4964      	ldr	r1, [pc, #400]	@ (80179c0 <http_cb+0x434>)
 801782e:	4618      	mov	r0, r3
 8017830:	f007 fc98 	bl	801f164 <mg_str_s>
 8017834:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017838:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 801783c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8017840:	cb0c      	ldmia	r3, {r2, r3}
 8017842:	c903      	ldmia	r1, {r0, r1}
 8017844:	f007 fd1a 	bl	801f27c <mg_strcasecmp>
 8017848:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 801784a:	2b00      	cmp	r3, #0
 801784c:	d10a      	bne.n	8017864 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 801784e:	2301      	movs	r3, #1
 8017850:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8017854:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8017858:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801785c:	4413      	add	r3, r2
 801785e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8017862:	e022      	b.n	80178aa <http_cb+0x31e>
        } else if (is_response) {
 8017864:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8017868:	2b00      	cmp	r3, #0
 801786a:	d01e      	beq.n	80178aa <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 801786c:	f107 0314 	add.w	r3, r7, #20
 8017870:	4618      	mov	r0, r3
 8017872:	f7ff fdcb 	bl	801740c <mg_http_status>
 8017876:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 801787a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801787e:	2bc7      	cmp	r3, #199	@ 0xc7
 8017880:	dd0a      	ble.n	8017898 <http_cb+0x30c>
 8017882:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8017886:	2bcc      	cmp	r3, #204	@ 0xcc
 8017888:	d006      	beq.n	8017898 <http_cb+0x30c>
 801788a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801788e:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8017892:	d001      	beq.n	8017898 <http_cb+0x30c>
 8017894:	2301      	movs	r3, #1
 8017896:	e000      	b.n	801789a <http_cb+0x30e>
 8017898:	2300      	movs	r3, #0
 801789a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 801789e:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80178a2:	f003 0301 	and.w	r3, r3, #1
 80178a6:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 80178aa:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d019      	beq.n	80178e6 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 80178b2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80178b6:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 80178ba:	4b42      	ldr	r3, [pc, #264]	@ (80179c4 <http_cb+0x438>)
 80178bc:	4a41      	ldr	r2, [pc, #260]	@ (80179c4 <http_cb+0x438>)
 80178be:	f240 119b 	movw	r1, #411	@ 0x19b
 80178c2:	6800      	ldr	r0, [r0, #0]
 80178c4:	f7fe fa2e 	bl	8015d24 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 80178c8:	4b33      	ldr	r3, [pc, #204]	@ (8017998 <http_cb+0x40c>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	dd0a      	ble.n	80178e6 <http_cb+0x35a>
 80178d0:	4b32      	ldr	r3, [pc, #200]	@ (801799c <http_cb+0x410>)
 80178d2:	f640 42c6 	movw	r2, #3270	@ 0xcc6
 80178d6:	4932      	ldr	r1, [pc, #200]	@ (80179a0 <http_cb+0x414>)
 80178d8:	2001      	movs	r0, #1
 80178da:	f001 f9c7 	bl	8018c6c <mg_log_prefix>
 80178de:	493a      	ldr	r1, [pc, #232]	@ (80179c8 <http_cb+0x43c>)
 80178e0:	483a      	ldr	r0, [pc, #232]	@ (80179cc <http_cb+0x440>)
 80178e2:	f001 fa13 	bl	8018d0c <mg_log>
        }
      }

      if (is_chunked) {
 80178e6:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	f000 80e8 	beq.w	8017ac0 <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 80178f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80178f4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80178fc:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8017900:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017904:	440b      	add	r3, r1
 8017906:	4413      	add	r3, r2
 8017908:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 801790c:	2300      	movs	r3, #0
 801790e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8017912:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017916:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801791e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017922:	1ad2      	subs	r2, r2, r3
 8017924:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8017928:	1ad3      	subs	r3, r2, r3
 801792a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 801792e:	e006      	b.n	801793e <http_cb+0x3b2>
 8017930:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8017934:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017938:	4413      	add	r3, r2
 801793a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 801793e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017942:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8017946:	18d0      	adds	r0, r2, r3
 8017948:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801794c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017950:	1ad1      	subs	r1, r2, r3
 8017952:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8017956:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 801795a:	f7ff fd87 	bl	801746c <skip_chunk>
 801795e:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8017962:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017966:	2b00      	cmp	r3, #0
 8017968:	dd03      	ble.n	8017972 <http_cb+0x3e6>
 801796a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 801796e:	2b00      	cmp	r3, #0
 8017970:	d1de      	bne.n	8017930 <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8017972:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017976:	2b00      	cmp	r3, #0
 8017978:	f000 8138 	beq.w	8017bec <http_cb+0x660>
        if (cl < 0) {
 801797c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017980:	2b00      	cmp	r3, #0
 8017982:	da27      	bge.n	80179d4 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8017984:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017988:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801798c:	4910      	ldr	r1, [pc, #64]	@ (80179d0 <http_cb+0x444>)
 801798e:	6818      	ldr	r0, [r3, #0]
 8017990:	f7fb fdac 	bl	80134ec <mg_error>
          break;
 8017994:	e12d      	b.n	8017bf2 <http_cb+0x666>
 8017996:	bf00      	nop
 8017998:	20000288 	.word	0x20000288
 801799c:	08026ea4 	.word	0x08026ea4
 80179a0:	0802487c 	.word	0x0802487c
 80179a4:	08025b64 	.word	0x08025b64
 80179a8:	08025b7c 	.word	0x08025b7c
 80179ac:	08025b90 	.word	0x08025b90
 80179b0:	08025b98 	.word	0x08025b98
 80179b4:	08025bb4 	.word	0x08025bb4
 80179b8:	08024a88 	.word	0x08024a88
 80179bc:	08024a94 	.word	0x08024a94
 80179c0:	08024a90 	.word	0x08024a90
 80179c4:	08024f5c 	.word	0x08024f5c
 80179c8:	08025bc4 	.word	0x08025bc4
 80179cc:	080249e8 	.word	0x080249e8
 80179d0:	08025be8 	.word	0x08025be8
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80179d4:	2300      	movs	r3, #0
 80179d6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80179da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80179de:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80179e2:	2200      	movs	r2, #0
 80179e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80179e8:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 80179ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80179f0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80179f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 80179f8:	e03e      	b.n	8017a78 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 80179fa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80179fe:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017a02:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017a06:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8017a0a:	18d0      	adds	r0, r2, r3
 8017a0c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017a10:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8017a14:	4413      	add	r3, r2
 8017a16:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8017a1a:	4413      	add	r3, r2
 8017a1c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8017a20:	4619      	mov	r1, r3
 8017a22:	f009 fb13 	bl	802104c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8017a26:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8017a2a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017a2e:	4413      	add	r3, r2
 8017a30:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8017a34:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017a38:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017a3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017a40:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8017a44:	441a      	add	r2, r3
 8017a46:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017a4a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017a4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8017a52:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017a56:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017a5e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8017a62:	441a      	add	r2, r3
 8017a64:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017a68:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017a6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8017a70:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d016      	beq.n	8017aa6 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8017a78:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017a7c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8017a80:	18d0      	adds	r0, r2, r3
 8017a82:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8017a86:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017a8a:	1ad1      	subs	r1, r2, r3
 8017a8c:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8017a90:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8017a94:	f7ff fcea 	bl	801746c <skip_chunk>
 8017a98:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8017a9c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	dcaa      	bgt.n	80179fa <http_cb+0x46e>
 8017aa4:	e000      	b.n	8017aa8 <http_cb+0x51c>
          if (dl == 0) break;
 8017aa6:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8017aa8:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8017aac:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8017ab0:	4413      	add	r3, r2
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017ab8:	4413      	add	r3, r2
 8017aba:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8017abe:	e025      	b.n	8017b0c <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8017ac0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017ac4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017acc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017ad0:	1ad2      	subs	r2, r2, r3
 8017ad2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8017ad6:	1ad3      	subs	r3, r2, r3
 8017ad8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 8017adc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017ae0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017ae4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017ae8:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d37f      	bcc.n	8017bf0 <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 8017af0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017af4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8017af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017afc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8017b00:	4413      	add	r3, r2
 8017b02:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8017b06:	4413      	add	r3, r2
 8017b08:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8017b0c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017b10:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017b1a:	f003 0304 	and.w	r3, r3, #4
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d00a      	beq.n	8017b3a <http_cb+0x5ae>
 8017b24:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017b28:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017b2c:	681a      	ldr	r2, [r3, #0]
 8017b2e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b36:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8017b3a:	f107 0214 	add.w	r2, r7, #20
 8017b3e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017b42:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017b46:	210b      	movs	r1, #11
 8017b48:	6818      	ldr	r0, [r3, #0]
 8017b4a:	f7fb fcaf 	bl	80134ac <mg_call>
      if (c->is_accepted) {
 8017b4e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017b52:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017b5c:	f003 0304 	and.w	r3, r3, #4
 8017b60:	b2db      	uxtb	r3, r3
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d028      	beq.n	8017bb8 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8017b66:	f107 0314 	add.w	r3, r7, #20
 8017b6a:	492c      	ldr	r1, [pc, #176]	@ (8017c1c <http_cb+0x690>)
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f7fd f8b3 	bl	8014cd8 <mg_http_get_header>
 8017b72:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8017b76:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d01c      	beq.n	8017bb8 <http_cb+0x62c>
 8017b7e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8017b82:	4927      	ldr	r1, [pc, #156]	@ (8017c20 <http_cb+0x694>)
 8017b84:	4618      	mov	r0, r3
 8017b86:	f007 faed 	bl	801f164 <mg_str_s>
 8017b8a:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8017b8e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8017b92:	cb0c      	ldmia	r3, {r2, r3}
 8017b94:	c903      	ldmia	r1, {r0, r1}
 8017b96:	f007 fb71 	bl	801f27c <mg_strcasecmp>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d10b      	bne.n	8017bb8 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 8017ba0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017ba4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017bae:	f043 0310 	orr.w	r3, r3, #16
 8017bb2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8017bb6:	e01c      	b.n	8017bf2 <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8017bb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017bbc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8017bc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017bca:	b2db      	uxtb	r3, r3
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d110      	bne.n	8017bf2 <http_cb+0x666>
 8017bd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017bd4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017bdc:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8017be0:	429a      	cmp	r2, r3
 8017be2:	f4ff ad23 	bcc.w	801762c <http_cb+0xa0>
 8017be6:	e004      	b.n	8017bf2 <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 8017be8:	bf00      	nop
 8017bea:	e002      	b.n	8017bf2 <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8017bec:	bf00      	nop
 8017bee:	e000      	b.n	8017bf2 <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 8017bf0:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8017bf2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d00b      	beq.n	8017c12 <http_cb+0x686>
 8017bfa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8017bfe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	3338      	adds	r3, #56	@ 0x38
 8017c06:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8017c0a:	2100      	movs	r1, #0
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f000 f91d 	bl	8017e4c <mg_iobuf_del>
  }
  (void) ev_data;
}
 8017c12:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	08025bf8 	.word	0x08025bf8
 8017c20:	08025c04 	.word	0x08025c04

08017c24 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b086      	sub	sp, #24
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	60f8      	str	r0, [r7, #12]
 8017c2c:	60b9      	str	r1, [r7, #8]
 8017c2e:	607a      	str	r2, [r7, #4]
 8017c30:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	68b9      	ldr	r1, [r7, #8]
 8017c38:	68f8      	ldr	r0, [r7, #12]
 8017c3a:	f003 fd0f 	bl	801b65c <mg_listen>
 8017c3e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8017c40:	697b      	ldr	r3, [r7, #20]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d003      	beq.n	8017c4e <mg_http_listen+0x2a>
 8017c46:	697b      	ldr	r3, [r7, #20]
 8017c48:	4a03      	ldr	r2, [pc, #12]	@ (8017c58 <mg_http_listen+0x34>)
 8017c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8017c4e:	697b      	ldr	r3, [r7, #20]
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	3718      	adds	r7, #24
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}
 8017c58:	0801758d 	.word	0x0801758d

08017c5c <roundup>:





static size_t roundup(size_t size, size_t align) {
 8017c5c:	b480      	push	{r7}
 8017c5e:	b083      	sub	sp, #12
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d00a      	beq.n	8017c82 <roundup+0x26>
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	4413      	add	r3, r2
 8017c72:	1e5a      	subs	r2, r3, #1
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c7a:	683a      	ldr	r2, [r7, #0]
 8017c7c:	fb02 f303 	mul.w	r3, r2, r3
 8017c80:	e000      	b.n	8017c84 <roundup+0x28>
 8017c82:	687b      	ldr	r3, [r7, #4]
}
 8017c84:	4618      	mov	r0, r3
 8017c86:	370c      	adds	r7, #12
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8e:	4770      	bx	lr

08017c90 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8017c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017c94:	b088      	sub	sp, #32
 8017c96:	af02      	add	r7, sp, #8
 8017c98:	6078      	str	r0, [r7, #4]
 8017c9a:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	68db      	ldr	r3, [r3, #12]
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	6838      	ldr	r0, [r7, #0]
 8017ca8:	f7ff ffd8 	bl	8017c5c <roundup>
 8017cac:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d117      	bne.n	8017ce4 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	4619      	mov	r1, r3
 8017cbe:	4610      	mov	r0, r2
 8017cc0:	f008 f95a 	bl	801ff78 <mg_bzero>
    free(io->buf);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7f2 fa9d 	bl	800a208 <vPortFree>
    io->buf = NULL;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	605a      	str	r2, [r3, #4]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	685a      	ldr	r2, [r3, #4]
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	609a      	str	r2, [r3, #8]
 8017ce2:	e052      	b.n	8017d8a <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	683a      	ldr	r2, [r7, #0]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d04d      	beq.n	8017d8a <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8017cee:	6839      	ldr	r1, [r7, #0]
 8017cf0:	2001      	movs	r0, #1
 8017cf2:	f7fa fdfb 	bl	80128ec <mg_calloc>
 8017cf6:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d028      	beq.n	8017d50 <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	689b      	ldr	r3, [r3, #8]
 8017d02:	683a      	ldr	r2, [r7, #0]
 8017d04:	4293      	cmp	r3, r2
 8017d06:	bf28      	it	cs
 8017d08:	4613      	movcs	r3, r2
 8017d0a:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d00a      	beq.n	8017d28 <mg_iobuf_resize+0x98>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d006      	beq.n	8017d28 <mg_iobuf_resize+0x98>
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	68fa      	ldr	r2, [r7, #12]
 8017d20:	4619      	mov	r1, r3
 8017d22:	6938      	ldr	r0, [r7, #16]
 8017d24:	f009 f992 	bl	802104c <memmove>
      mg_bzero(io->buf, io->size);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681a      	ldr	r2, [r3, #0]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	4619      	mov	r1, r3
 8017d32:	4610      	mov	r0, r2
 8017d34:	f008 f920 	bl	801ff78 <mg_bzero>
      free(io->buf);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7f2 fa63 	bl	800a208 <vPortFree>
      io->buf = (unsigned char *) p;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	693a      	ldr	r2, [r7, #16]
 8017d46:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	683a      	ldr	r2, [r7, #0]
 8017d4c:	605a      	str	r2, [r3, #4]
 8017d4e:	e01c      	b.n	8017d8a <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8017d50:	2300      	movs	r3, #0
 8017d52:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8017d54:	4b10      	ldr	r3, [pc, #64]	@ (8017d98 <mg_iobuf_resize+0x108>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	dd16      	ble.n	8017d8a <mg_iobuf_resize+0xfa>
 8017d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8017d9c <mg_iobuf_resize+0x10c>)
 8017d5e:	f44f 6254 	mov.w	r2, #3392	@ 0xd40
 8017d62:	490f      	ldr	r1, [pc, #60]	@ (8017da0 <mg_iobuf_resize+0x110>)
 8017d64:	2001      	movs	r0, #1
 8017d66:	f000 ff81 	bl	8018c6c <mg_log_prefix>
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	4698      	mov	r8, r3
 8017d72:	4691      	mov	r9, r2
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	2200      	movs	r2, #0
 8017d78:	461c      	mov	r4, r3
 8017d7a:	4615      	mov	r5, r2
 8017d7c:	e9cd 4500 	strd	r4, r5, [sp]
 8017d80:	4642      	mov	r2, r8
 8017d82:	464b      	mov	r3, r9
 8017d84:	4807      	ldr	r0, [pc, #28]	@ (8017da4 <mg_iobuf_resize+0x114>)
 8017d86:	f000 ffc1 	bl	8018d0c <mg_log>
    }
  }
  return ok;
 8017d8a:	697b      	ldr	r3, [r7, #20]
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3718      	adds	r7, #24
 8017d90:	46bd      	mov	sp, r7
 8017d92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017d96:	bf00      	nop
 8017d98:	20000288 	.word	0x20000288
 8017d9c:	08026eac 	.word	0x08026eac
 8017da0:	0802487c 	.word	0x0802487c
 8017da4:	08025c44 	.word	0x08025c44

08017da8 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b086      	sub	sp, #24
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	60f8      	str	r0, [r7, #12]
 8017db0:	60b9      	str	r1, [r7, #8]
 8017db2:	607a      	str	r2, [r7, #4]
 8017db4:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	689a      	ldr	r2, [r3, #8]
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	441a      	add	r2, r3
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	68db      	ldr	r3, [r3, #12]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	4610      	mov	r0, r2
 8017dc6:	f7ff ff49 	bl	8017c5c <roundup>
 8017dca:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8017dcc:	6979      	ldr	r1, [r7, #20]
 8017dce:	68f8      	ldr	r0, [r7, #12]
 8017dd0:	f7ff ff5e 	bl	8017c90 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	697a      	ldr	r2, [r7, #20]
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	d001      	beq.n	8017de2 <mg_iobuf_add+0x3a>
 8017dde:	2300      	movs	r3, #0
 8017de0:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	689b      	ldr	r3, [r3, #8]
 8017de6:	68ba      	ldr	r2, [r7, #8]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d210      	bcs.n	8017e0e <mg_iobuf_add+0x66>
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	68b9      	ldr	r1, [r7, #8]
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	440b      	add	r3, r1
 8017df6:	18d0      	adds	r0, r2, r3
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	18d1      	adds	r1, r2, r3
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	689a      	ldr	r2, [r3, #8]
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	1ad3      	subs	r3, r2, r3
 8017e08:	461a      	mov	r2, r3
 8017e0a:	f009 f91f 	bl	802104c <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d008      	beq.n	8017e26 <mg_iobuf_add+0x7e>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	4413      	add	r3, r2
 8017e1c:	683a      	ldr	r2, [r7, #0]
 8017e1e:	6879      	ldr	r1, [r7, #4]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f009 f913 	bl	802104c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	68ba      	ldr	r2, [r7, #8]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d902      	bls.n	8017e36 <mg_iobuf_add+0x8e>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	68ba      	ldr	r2, [r7, #8]
 8017e34:	609a      	str	r2, [r3, #8]
  io->len += len;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	689a      	ldr	r2, [r3, #8]
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	441a      	add	r2, r3
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	609a      	str	r2, [r3, #8]
  return len;
 8017e42:	683b      	ldr	r3, [r7, #0]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b084      	sub	sp, #16
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	60f8      	str	r0, [r7, #12]
 8017e54:	60b9      	str	r1, [r7, #8]
 8017e56:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	689b      	ldr	r3, [r3, #8]
 8017e5c:	68ba      	ldr	r2, [r7, #8]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d902      	bls.n	8017e68 <mg_iobuf_del+0x1c>
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	689b      	ldr	r3, [r3, #8]
 8017e66:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8017e68:	68ba      	ldr	r2, [r7, #8]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	441a      	add	r2, r3
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d904      	bls.n	8017e80 <mg_iobuf_del+0x34>
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	689a      	ldr	r2, [r3, #8]
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	1ad3      	subs	r3, r2, r3
 8017e7e:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d012      	beq.n	8017eae <mg_iobuf_del+0x62>
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681a      	ldr	r2, [r3, #0]
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	18d0      	adds	r0, r2, r3
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	68b9      	ldr	r1, [r7, #8]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	440b      	add	r3, r1
 8017e9a:	18d1      	adds	r1, r2, r3
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	689a      	ldr	r2, [r3, #8]
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	1ad2      	subs	r2, r2, r3
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	1ad3      	subs	r3, r2, r3
 8017ea8:	461a      	mov	r2, r3
 8017eaa:	f009 f8cf 	bl	802104c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d00a      	beq.n	8017ecc <mg_iobuf_del+0x80>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681a      	ldr	r2, [r3, #0]
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	6899      	ldr	r1, [r3, #8]
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	1acb      	subs	r3, r1, r3
 8017ec2:	4413      	add	r3, r2
 8017ec4:	6879      	ldr	r1, [r7, #4]
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f008 f856 	bl	801ff78 <mg_bzero>
  io->len -= len;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	689a      	ldr	r2, [r3, #8]
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	1ad2      	subs	r2, r2, r3
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	609a      	str	r2, [r3, #8]
  return len;
 8017ed8:	687b      	ldr	r3, [r7, #4]
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	3710      	adds	r7, #16
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd80      	pop	{r7, pc}

08017ee2 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8017ee2:	b580      	push	{r7, lr}
 8017ee4:	b082      	sub	sp, #8
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8017eea:	2100      	movs	r1, #0
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f7ff fecf 	bl	8017c90 <mg_iobuf_resize>
}
 8017ef2:	bf00      	nop
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
	...

08017efc <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8017efc:	b480      	push	{r7}
 8017efe:	b083      	sub	sp, #12
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <escapeseq+0x12>
 8017f0a:	4b04      	ldr	r3, [pc, #16]	@ (8017f1c <escapeseq+0x20>)
 8017f0c:	e000      	b.n	8017f10 <escapeseq+0x14>
 8017f0e:	4b04      	ldr	r3, [pc, #16]	@ (8017f20 <escapeseq+0x24>)
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	370c      	adds	r7, #12
 8017f14:	46bd      	mov	sp, r7
 8017f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1a:	4770      	bx	lr
 8017f1c:	08025c50 	.word	0x08025c50
 8017f20:	08025c58 	.word	0x08025c58

08017f24 <json_esc>:

static char json_esc(int c, int esc) {
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8017f2e:	6838      	ldr	r0, [r7, #0]
 8017f30:	f7ff ffe4 	bl	8017efc <escapeseq>
 8017f34:	6138      	str	r0, [r7, #16]
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	bf0c      	ite	eq
 8017f3c:	2301      	moveq	r3, #1
 8017f3e:	2300      	movne	r3, #0
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7ff ffda 	bl	8017efc <escapeseq>
 8017f48:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	617b      	str	r3, [r7, #20]
 8017f4e:	e010      	b.n	8017f72 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8017f50:	697b      	ldr	r3, [r7, #20]
 8017f52:	781b      	ldrb	r3, [r3, #0]
 8017f54:	461a      	mov	r2, r3
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d107      	bne.n	8017f6c <json_esc+0x48>
 8017f5c:	697a      	ldr	r2, [r7, #20]
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	1ad3      	subs	r3, r2, r3
 8017f62:	461a      	mov	r2, r3
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	4413      	add	r3, r2
 8017f68:	781b      	ldrb	r3, [r3, #0]
 8017f6a:	e007      	b.n	8017f7c <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	617b      	str	r3, [r7, #20]
 8017f72:	697b      	ldr	r3, [r7, #20]
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1ea      	bne.n	8017f50 <json_esc+0x2c>
  }
  return 0;
 8017f7a:	2300      	movs	r3, #0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3718      	adds	r7, #24
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b084      	sub	sp, #16
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8017f8e:	2300      	movs	r3, #0
 8017f90:	60fb      	str	r3, [r7, #12]
 8017f92:	e02e      	b.n	8017ff2 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	687a      	ldr	r2, [r7, #4]
 8017f98:	4413      	add	r3, r2
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8017f9e:	d114      	bne.n	8017fca <mg_pass_string+0x46>
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	3301      	adds	r3, #1
 8017fa4:	683a      	ldr	r2, [r7, #0]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	dd0f      	ble.n	8017fca <mg_pass_string+0x46>
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	3301      	adds	r3, #1
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	2101      	movs	r1, #1
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7ff ffb4 	bl	8017f24 <json_esc>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d003      	beq.n	8017fca <mg_pass_string+0x46>
      i++;
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	60fb      	str	r3, [r7, #12]
 8017fc8:	e010      	b.n	8017fec <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	4413      	add	r3, r2
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d102      	bne.n	8017fdc <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8017fd6:	f06f 0301 	mvn.w	r3, #1
 8017fda:	e010      	b.n	8017ffe <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	687a      	ldr	r2, [r7, #4]
 8017fe0:	4413      	add	r3, r2
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	2b22      	cmp	r3, #34	@ 0x22
 8017fe6:	d101      	bne.n	8017fec <mg_pass_string+0x68>
      return i;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	e008      	b.n	8017ffe <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	60fb      	str	r3, [r7, #12]
 8017ff2:	68fa      	ldr	r2, [r7, #12]
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	429a      	cmp	r2, r3
 8017ff8:	dbcc      	blt.n	8017f94 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8017ffa:	f06f 0301 	mvn.w	r3, #1
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	3710      	adds	r7, #16
 8018002:	46bd      	mov	sp, r7
 8018004:	bd80      	pop	{r7, pc}
	...

08018008 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8018008:	b580      	push	{r7, lr}
 801800a:	b090      	sub	sp, #64	@ 0x40
 801800c:	af00      	add	r7, sp, #0
 801800e:	60f8      	str	r0, [r7, #12]
 8018010:	60b9      	str	r1, [r7, #8]
 8018012:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8018014:	f04f 0200 	mov.w	r2, #0
 8018018:	f04f 0300 	mov.w	r3, #0
 801801c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8018020:	2300      	movs	r3, #0
 8018022:	637b      	str	r3, [r7, #52]	@ 0x34
 8018024:	2301      	movs	r3, #1
 8018026:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8018028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	429a      	cmp	r2, r3
 801802e:	da0a      	bge.n	8018046 <mg_atod+0x3e>
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	781b      	ldrb	r3, [r3, #0]
 8018034:	2b2d      	cmp	r3, #45	@ 0x2d
 8018036:	d106      	bne.n	8018046 <mg_atod+0x3e>
    sign = -1, i++;
 8018038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801803c:	633b      	str	r3, [r7, #48]	@ 0x30
 801803e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018040:	3301      	adds	r3, #1
 8018042:	637b      	str	r3, [r7, #52]	@ 0x34
 8018044:	e00a      	b.n	801805c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8018046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	429a      	cmp	r2, r3
 801804c:	da27      	bge.n	801809e <mg_atod+0x96>
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	2b2b      	cmp	r3, #43	@ 0x2b
 8018054:	d123      	bne.n	801809e <mg_atod+0x96>
    i++;
 8018056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018058:	3301      	adds	r3, #1
 801805a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801805c:	e01f      	b.n	801809e <mg_atod+0x96>
    d *= 10.0;
 801805e:	f04f 0200 	mov.w	r2, #0
 8018062:	4b9d      	ldr	r3, [pc, #628]	@ (80182d8 <mg_atod+0x2d0>)
 8018064:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8018068:	f7e8 fad8 	bl	800061c <__aeabi_dmul>
 801806c:	4602      	mov	r2, r0
 801806e:	460b      	mov	r3, r1
 8018070:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 8018074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018076:	68fa      	ldr	r2, [r7, #12]
 8018078:	4413      	add	r3, r2
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	3b30      	subs	r3, #48	@ 0x30
 801807e:	4618      	mov	r0, r3
 8018080:	f7e8 fa62 	bl	8000548 <__aeabi_i2d>
 8018084:	4602      	mov	r2, r0
 8018086:	460b      	mov	r3, r1
 8018088:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801808c:	f7e8 f910 	bl	80002b0 <__adddf3>
 8018090:	4602      	mov	r2, r0
 8018092:	460b      	mov	r3, r1
 8018094:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8018098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801809a:	3301      	adds	r3, #1
 801809c:	637b      	str	r3, [r7, #52]	@ 0x34
 801809e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	da0b      	bge.n	80180be <mg_atod+0xb6>
 80180a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	4413      	add	r3, r2
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80180b0:	d905      	bls.n	80180be <mg_atod+0xb6>
 80180b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180b4:	68fa      	ldr	r2, [r7, #12]
 80180b6:	4413      	add	r3, r2
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	2b39      	cmp	r3, #57	@ 0x39
 80180bc:	d9cf      	bls.n	801805e <mg_atod+0x56>
  }
  d *= sign;
 80180be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80180c0:	f7e8 fa42 	bl	8000548 <__aeabi_i2d>
 80180c4:	4602      	mov	r2, r0
 80180c6:	460b      	mov	r3, r1
 80180c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80180cc:	f7e8 faa6 	bl	800061c <__aeabi_dmul>
 80180d0:	4602      	mov	r2, r0
 80180d2:	460b      	mov	r3, r1
 80180d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 80180d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	429a      	cmp	r2, r3
 80180de:	da59      	bge.n	8018194 <mg_atod+0x18c>
 80180e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180e2:	68fa      	ldr	r2, [r7, #12]
 80180e4:	4413      	add	r3, r2
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80180ea:	d153      	bne.n	8018194 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 80180ec:	f04f 0200 	mov.w	r2, #0
 80180f0:	f04f 0300 	mov.w	r3, #0
 80180f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80180f8:	a375      	add	r3, pc, #468	@ (adr r3, 80182d0 <mg_atod+0x2c8>)
 80180fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8018102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018104:	3301      	adds	r3, #1
 8018106:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8018108:	e023      	b.n	8018152 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 801810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801810c:	68fa      	ldr	r2, [r7, #12]
 801810e:	4413      	add	r3, r2
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	3b30      	subs	r3, #48	@ 0x30
 8018114:	4618      	mov	r0, r3
 8018116:	f7e8 fa17 	bl	8000548 <__aeabi_i2d>
 801811a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801811e:	f7e8 fa7d 	bl	800061c <__aeabi_dmul>
 8018122:	4602      	mov	r2, r0
 8018124:	460b      	mov	r3, r1
 8018126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801812a:	f7e8 f8c1 	bl	80002b0 <__adddf3>
 801812e:	4602      	mov	r2, r0
 8018130:	460b      	mov	r3, r1
 8018132:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 8018136:	f04f 0200 	mov.w	r2, #0
 801813a:	4b67      	ldr	r3, [pc, #412]	@ (80182d8 <mg_atod+0x2d0>)
 801813c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8018140:	f7e8 fb96 	bl	8000870 <__aeabi_ddiv>
 8018144:	4602      	mov	r2, r0
 8018146:	460b      	mov	r3, r1
 8018148:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801814e:	3301      	adds	r3, #1
 8018150:	637b      	str	r3, [r7, #52]	@ 0x34
 8018152:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	429a      	cmp	r2, r3
 8018158:	da0b      	bge.n	8018172 <mg_atod+0x16a>
 801815a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801815c:	68fa      	ldr	r2, [r7, #12]
 801815e:	4413      	add	r3, r2
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	2b2f      	cmp	r3, #47	@ 0x2f
 8018164:	d905      	bls.n	8018172 <mg_atod+0x16a>
 8018166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018168:	68fa      	ldr	r2, [r7, #12]
 801816a:	4413      	add	r3, r2
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	2b39      	cmp	r3, #57	@ 0x39
 8018170:	d9cb      	bls.n	801810a <mg_atod+0x102>
    }
    d += frac * sign;
 8018172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018174:	f7e8 f9e8 	bl	8000548 <__aeabi_i2d>
 8018178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801817c:	f7e8 fa4e 	bl	800061c <__aeabi_dmul>
 8018180:	4602      	mov	r2, r0
 8018182:	460b      	mov	r3, r1
 8018184:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8018188:	f7e8 f892 	bl	80002b0 <__adddf3>
 801818c:	4602      	mov	r2, r0
 801818e:	460b      	mov	r3, r1
 8018190:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8018194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	429a      	cmp	r2, r3
 801819a:	f280 8085 	bge.w	80182a8 <mg_atod+0x2a0>
 801819e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	4413      	add	r3, r2
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	2b65      	cmp	r3, #101	@ 0x65
 80181a8:	d005      	beq.n	80181b6 <mg_atod+0x1ae>
 80181aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ac:	68fa      	ldr	r2, [r7, #12]
 80181ae:	4413      	add	r3, r2
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	2b45      	cmp	r3, #69	@ 0x45
 80181b4:	d178      	bne.n	80182a8 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 80181b6:	2300      	movs	r3, #0
 80181b8:	61bb      	str	r3, [r7, #24]
 80181ba:	2300      	movs	r3, #0
 80181bc:	617b      	str	r3, [r7, #20]
    i++;
 80181be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181c0:	3301      	adds	r3, #1
 80181c2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80181c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181c6:	68bb      	ldr	r3, [r7, #8]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	da0a      	bge.n	80181e2 <mg_atod+0x1da>
 80181cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ce:	68fa      	ldr	r2, [r7, #12]
 80181d0:	4413      	add	r3, r2
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80181d6:	d104      	bne.n	80181e2 <mg_atod+0x1da>
 80181d8:	2301      	movs	r3, #1
 80181da:	617b      	str	r3, [r7, #20]
 80181dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181de:	3301      	adds	r3, #1
 80181e0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 80181e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	429a      	cmp	r2, r3
 80181e8:	da19      	bge.n	801821e <mg_atod+0x216>
 80181ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ec:	68fa      	ldr	r2, [r7, #12]
 80181ee:	4413      	add	r3, r2
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80181f4:	d113      	bne.n	801821e <mg_atod+0x216>
 80181f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f8:	3301      	adds	r3, #1
 80181fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80181fc:	e00f      	b.n	801821e <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 80181fe:	69ba      	ldr	r2, [r7, #24]
 8018200:	4613      	mov	r3, r2
 8018202:	009b      	lsls	r3, r3, #2
 8018204:	4413      	add	r3, r2
 8018206:	005b      	lsls	r3, r3, #1
 8018208:	4619      	mov	r1, r3
 801820a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801820c:	1c5a      	adds	r2, r3, #1
 801820e:	637a      	str	r2, [r7, #52]	@ 0x34
 8018210:	461a      	mov	r2, r3
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	4413      	add	r3, r2
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	3b30      	subs	r3, #48	@ 0x30
 801821a:	440b      	add	r3, r1
 801821c:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801821e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	429a      	cmp	r2, r3
 8018224:	da0f      	bge.n	8018246 <mg_atod+0x23e>
 8018226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018228:	68fa      	ldr	r2, [r7, #12]
 801822a:	4413      	add	r3, r2
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	2b2f      	cmp	r3, #47	@ 0x2f
 8018230:	d909      	bls.n	8018246 <mg_atod+0x23e>
 8018232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018234:	68fa      	ldr	r2, [r7, #12]
 8018236:	4413      	add	r3, r2
 8018238:	781b      	ldrb	r3, [r3, #0]
 801823a:	2b39      	cmp	r3, #57	@ 0x39
 801823c:	d803      	bhi.n	8018246 <mg_atod+0x23e>
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8018244:	dbdb      	blt.n	80181fe <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8018246:	697b      	ldr	r3, [r7, #20]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d002      	beq.n	8018252 <mg_atod+0x24a>
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	425b      	negs	r3, r3
 8018250:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8018252:	2300      	movs	r3, #0
 8018254:	61fb      	str	r3, [r7, #28]
 8018256:	e00d      	b.n	8018274 <mg_atod+0x26c>
 8018258:	f04f 0200 	mov.w	r2, #0
 801825c:	4b1e      	ldr	r3, [pc, #120]	@ (80182d8 <mg_atod+0x2d0>)
 801825e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8018262:	f7e8 f9db 	bl	800061c <__aeabi_dmul>
 8018266:	4602      	mov	r2, r0
 8018268:	460b      	mov	r3, r1
 801826a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	3301      	adds	r3, #1
 8018272:	61fb      	str	r3, [r7, #28]
 8018274:	69fa      	ldr	r2, [r7, #28]
 8018276:	69bb      	ldr	r3, [r7, #24]
 8018278:	429a      	cmp	r2, r3
 801827a:	dbed      	blt.n	8018258 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801827c:	2300      	movs	r3, #0
 801827e:	61fb      	str	r3, [r7, #28]
 8018280:	e00d      	b.n	801829e <mg_atod+0x296>
 8018282:	f04f 0200 	mov.w	r2, #0
 8018286:	4b14      	ldr	r3, [pc, #80]	@ (80182d8 <mg_atod+0x2d0>)
 8018288:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801828c:	f7e8 faf0 	bl	8000870 <__aeabi_ddiv>
 8018290:	4602      	mov	r2, r0
 8018292:	460b      	mov	r3, r1
 8018294:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8018298:	69fb      	ldr	r3, [r7, #28]
 801829a:	3301      	adds	r3, #1
 801829c:	61fb      	str	r3, [r7, #28]
 801829e:	69bb      	ldr	r3, [r7, #24]
 80182a0:	425b      	negs	r3, r3
 80182a2:	69fa      	ldr	r2, [r7, #28]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	dbec      	blt.n	8018282 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d002      	beq.n	80182b4 <mg_atod+0x2ac>
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80182b2:	601a      	str	r2, [r3, #0]
  return d;
 80182b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80182b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80182bc:	eeb0 0a47 	vmov.f32	s0, s14
 80182c0:	eef0 0a67 	vmov.f32	s1, s15
 80182c4:	3740      	adds	r7, #64	@ 0x40
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	bf00      	nop
 80182cc:	f3af 8000 	nop.w
 80182d0:	9999999a 	.word	0x9999999a
 80182d4:	3fb99999 	.word	0x3fb99999
 80182d8:	40240000 	.word	0x40240000

080182dc <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80182dc:	b590      	push	{r4, r7, lr}
 80182de:	b09b      	sub	sp, #108	@ 0x6c
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	f107 0408 	add.w	r4, r7, #8
 80182e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80182ea:	607a      	str	r2, [r7, #4]
 80182ec:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80182f6:	2300      	movs	r3, #0
 80182f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 80182fc:	2300      	movs	r3, #0
 80182fe:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8018300:	2300      	movs	r3, #0
 8018302:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 8018304:	2300      	movs	r3, #0
 8018306:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 8018308:	2300      	movs	r3, #0
 801830a:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 801830c:	2301      	movs	r3, #1
 801830e:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8018310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801831a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d002      	beq.n	8018328 <mg_json_get+0x4c>
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	2200      	movs	r2, #0
 8018326:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	781b      	ldrb	r3, [r3, #0]
 801832c:	2b24      	cmp	r3, #36	@ 0x24
 801832e:	d002      	beq.n	8018336 <mg_json_get+0x5a>
 8018330:	f06f 0301 	mvn.w	r3, #1
 8018334:	e308      	b.n	8018948 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8018336:	2300      	movs	r3, #0
 8018338:	663b      	str	r3, [r7, #96]	@ 0x60
 801833a:	e2fe      	b.n	801893a <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 801833c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801833e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018340:	4413      	add	r3, r2
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8018348:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801834c:	2b20      	cmp	r3, #32
 801834e:	f000 82ee 	beq.w	801892e <mg_json_get+0x652>
 8018352:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018356:	2b09      	cmp	r3, #9
 8018358:	f000 82e9 	beq.w	801892e <mg_json_get+0x652>
 801835c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018360:	2b0a      	cmp	r3, #10
 8018362:	f000 82e4 	beq.w	801892e <mg_json_get+0x652>
 8018366:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801836a:	2b0d      	cmp	r3, #13
 801836c:	f000 82df 	beq.w	801892e <mg_json_get+0x652>
    switch (expecting) {
 8018370:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8018374:	2b03      	cmp	r3, #3
 8018376:	f200 82dd 	bhi.w	8018934 <mg_json_get+0x658>
 801837a:	a201      	add	r2, pc, #4	@ (adr r2, 8018380 <mg_json_get+0xa4>)
 801837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018380:	08018391 	.word	0x08018391
 8018384:	08018679 	.word	0x08018679
 8018388:	08018807 	.word	0x08018807
 801838c:	0801881d 	.word	0x0801881d
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8018390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018394:	429a      	cmp	r2, r3
 8018396:	d101      	bne.n	801839c <mg_json_get+0xc0>
 8018398:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801839a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 801839c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80183a0:	2b7b      	cmp	r3, #123	@ 0x7b
 80183a2:	d12b      	bne.n	80183fc <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80183a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183a6:	2b1d      	cmp	r3, #29
 80183a8:	dd02      	ble.n	80183b0 <mg_json_get+0xd4>
 80183aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80183ae:	e2cb      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80183b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80183b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d114      	bne.n	80183e2 <mg_json_get+0x106>
 80183b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183ba:	687a      	ldr	r2, [r7, #4]
 80183bc:	4413      	add	r3, r2
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80183c2:	d10e      	bne.n	80183e2 <mg_json_get+0x106>
 80183c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80183c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d10a      	bne.n	80183e2 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 80183cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80183ce:	3301      	adds	r3, #1
 80183d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80183d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183d4:	3301      	adds	r3, #1
 80183d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80183d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80183dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80183de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 80183e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183e4:	1c5a      	adds	r2, r3, #1
 80183e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80183e8:	3368      	adds	r3, #104	@ 0x68
 80183ea:	443b      	add	r3, r7
 80183ec:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80183f0:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 80183f4:	2301      	movs	r3, #1
 80183f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 80183fa:	e29b      	b.n	8018934 <mg_json_get+0x658>
        } else if (c == '[') {
 80183fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018400:	2b5b      	cmp	r3, #91	@ 0x5b
 8018402:	d14e      	bne.n	80184a2 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8018404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018406:	2b1d      	cmp	r3, #29
 8018408:	dd02      	ble.n	8018410 <mg_json_get+0x134>
 801840a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801840e:	e29b      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8018410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018414:	429a      	cmp	r2, r3
 8018416:	d13a      	bne.n	801848e <mg_json_get+0x1b2>
 8018418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	4413      	add	r3, r2
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	2b5b      	cmp	r3, #91	@ 0x5b
 8018422:	d134      	bne.n	801848e <mg_json_get+0x1b2>
 8018424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018428:	429a      	cmp	r2, r3
 801842a:	d130      	bne.n	801848e <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 801842c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801842e:	3301      	adds	r3, #1
 8018430:	657b      	str	r3, [r7, #84]	@ 0x54
 8018432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018434:	3301      	adds	r3, #1
 8018436:	653b      	str	r3, [r7, #80]	@ 0x50
 8018438:	2300      	movs	r3, #0
 801843a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801843c:	2300      	movs	r3, #0
 801843e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018440:	e010      	b.n	8018464 <mg_json_get+0x188>
              ei *= 10;
 8018442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018444:	4613      	mov	r3, r2
 8018446:	009b      	lsls	r3, r3, #2
 8018448:	4413      	add	r3, r2
 801844a:	005b      	lsls	r3, r3, #1
 801844c:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 801844e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018450:	687a      	ldr	r2, [r7, #4]
 8018452:	4413      	add	r3, r2
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	3b30      	subs	r3, #48	@ 0x30
 8018458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801845a:	4413      	add	r3, r2
 801845c:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801845e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018460:	3301      	adds	r3, #1
 8018462:	653b      	str	r3, [r7, #80]	@ 0x50
 8018464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	4413      	add	r3, r2
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	2b5d      	cmp	r3, #93	@ 0x5d
 801846e:	d005      	beq.n	801847c <mg_json_get+0x1a0>
 8018470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018472:	687a      	ldr	r2, [r7, #4]
 8018474:	4413      	add	r3, r2
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d1e2      	bne.n	8018442 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 801847c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	4413      	add	r3, r2
 8018482:	781b      	ldrb	r3, [r3, #0]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d002      	beq.n	801848e <mg_json_get+0x1b2>
 8018488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801848a:	3301      	adds	r3, #1
 801848c:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 801848e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018490:	1c5a      	adds	r2, r3, #1
 8018492:	65ba      	str	r2, [r7, #88]	@ 0x58
 8018494:	3368      	adds	r3, #104	@ 0x68
 8018496:	443b      	add	r3, r7
 8018498:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801849c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 80184a0:	e248      	b.n	8018934 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 80184a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80184a6:	2b5d      	cmp	r3, #93	@ 0x5d
 80184a8:	d13a      	bne.n	8018520 <mg_json_get+0x244>
 80184aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	dd37      	ble.n	8018520 <mg_json_get+0x244>
          MG_EOO(']');
 80184b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80184b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d106      	bne.n	80184c6 <mg_json_get+0x1ea>
 80184b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80184ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80184bc:	429a      	cmp	r2, r3
 80184be:	d002      	beq.n	80184c6 <mg_json_get+0x1ea>
 80184c0:	f06f 0302 	mvn.w	r3, #2
 80184c4:	e240      	b.n	8018948 <mg_json_get+0x66c>
 80184c6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80184ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184cc:	3b01      	subs	r3, #1
 80184ce:	3368      	adds	r3, #104	@ 0x68
 80184d0:	443b      	add	r3, r7
 80184d2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80184d6:	3302      	adds	r3, #2
 80184d8:	429a      	cmp	r2, r3
 80184da:	d002      	beq.n	80184e2 <mg_json_get+0x206>
 80184dc:	f06f 0301 	mvn.w	r3, #1
 80184e0:	e232      	b.n	8018948 <mg_json_get+0x66c>
 80184e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184e4:	3b01      	subs	r3, #1
 80184e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80184e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80184ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184ec:	429a      	cmp	r2, r3
 80184ee:	f040 809c 	bne.w	801862a <mg_json_get+0x34e>
 80184f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184f4:	687a      	ldr	r2, [r7, #4]
 80184f6:	4413      	add	r3, r2
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	f040 8095 	bne.w	801862a <mg_json_get+0x34e>
 8018500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018504:	429a      	cmp	r2, r3
 8018506:	f040 8090 	bne.w	801862a <mg_json_get+0x34e>
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d005      	beq.n	801851c <mg_json_get+0x240>
 8018510:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018514:	1ad3      	subs	r3, r2, r3
 8018516:	1c5a      	adds	r2, r3, #1
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	601a      	str	r2, [r3, #0]
 801851c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801851e:	e213      	b.n	8018948 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8018520:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018524:	2b74      	cmp	r3, #116	@ 0x74
 8018526:	d113      	bne.n	8018550 <mg_json_get+0x274>
 8018528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801852a:	3303      	adds	r3, #3
 801852c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801852e:	429a      	cmp	r2, r3
 8018530:	dd0e      	ble.n	8018550 <mg_json_get+0x274>
 8018532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018536:	4413      	add	r3, r2
 8018538:	2204      	movs	r2, #4
 801853a:	4998      	ldr	r1, [pc, #608]	@ (801879c <mg_json_get+0x4c0>)
 801853c:	4618      	mov	r0, r3
 801853e:	f008 fd75 	bl	802102c <memcmp>
 8018542:	4603      	mov	r3, r0
 8018544:	2b00      	cmp	r3, #0
 8018546:	d103      	bne.n	8018550 <mg_json_get+0x274>
          i += 3;
 8018548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801854a:	3303      	adds	r3, #3
 801854c:	663b      	str	r3, [r7, #96]	@ 0x60
 801854e:	e06c      	b.n	801862a <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8018550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018554:	2b6e      	cmp	r3, #110	@ 0x6e
 8018556:	d113      	bne.n	8018580 <mg_json_get+0x2a4>
 8018558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801855a:	3303      	adds	r3, #3
 801855c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801855e:	429a      	cmp	r2, r3
 8018560:	dd0e      	ble.n	8018580 <mg_json_get+0x2a4>
 8018562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018566:	4413      	add	r3, r2
 8018568:	2204      	movs	r2, #4
 801856a:	498d      	ldr	r1, [pc, #564]	@ (80187a0 <mg_json_get+0x4c4>)
 801856c:	4618      	mov	r0, r3
 801856e:	f008 fd5d 	bl	802102c <memcmp>
 8018572:	4603      	mov	r3, r0
 8018574:	2b00      	cmp	r3, #0
 8018576:	d103      	bne.n	8018580 <mg_json_get+0x2a4>
          i += 3;
 8018578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801857a:	3303      	adds	r3, #3
 801857c:	663b      	str	r3, [r7, #96]	@ 0x60
 801857e:	e054      	b.n	801862a <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8018580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018584:	2b66      	cmp	r3, #102	@ 0x66
 8018586:	d113      	bne.n	80185b0 <mg_json_get+0x2d4>
 8018588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801858a:	3304      	adds	r3, #4
 801858c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801858e:	429a      	cmp	r2, r3
 8018590:	dd0e      	ble.n	80185b0 <mg_json_get+0x2d4>
 8018592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018596:	4413      	add	r3, r2
 8018598:	2205      	movs	r2, #5
 801859a:	4982      	ldr	r1, [pc, #520]	@ (80187a4 <mg_json_get+0x4c8>)
 801859c:	4618      	mov	r0, r3
 801859e:	f008 fd45 	bl	802102c <memcmp>
 80185a2:	4603      	mov	r3, r0
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d103      	bne.n	80185b0 <mg_json_get+0x2d4>
          i += 4;
 80185a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80185aa:	3304      	adds	r3, #4
 80185ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80185ae:	e03c      	b.n	801862a <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80185b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80185b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80185b6:	d007      	beq.n	80185c8 <mg_json_get+0x2ec>
 80185b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80185bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80185be:	d916      	bls.n	80185ee <mg_json_get+0x312>
 80185c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80185c4:	2b39      	cmp	r3, #57	@ 0x39
 80185c6:	d812      	bhi.n	80185ee <mg_json_get+0x312>
          int numlen = 0;
 80185c8:	2300      	movs	r3, #0
 80185ca:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 80185cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80185ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80185d0:	18d0      	adds	r0, r2, r3
 80185d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80185d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80185d6:	1ad3      	subs	r3, r2, r3
 80185d8:	f107 0210 	add.w	r2, r7, #16
 80185dc:	4619      	mov	r1, r3
 80185de:	f7ff fd13 	bl	8018008 <mg_atod>
          i += numlen - 1;
 80185e2:	693b      	ldr	r3, [r7, #16]
 80185e4:	3b01      	subs	r3, #1
 80185e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80185e8:	4413      	add	r3, r2
 80185ea:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80185ec:	e01d      	b.n	801862a <mg_json_get+0x34e>
        } else if (c == '"') {
 80185ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80185f2:	2b22      	cmp	r3, #34	@ 0x22
 80185f4:	d116      	bne.n	8018624 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80185f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80185f8:	3301      	adds	r3, #1
 80185fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80185fc:	18d0      	adds	r0, r2, r3
 80185fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018602:	1ad3      	subs	r3, r2, r3
 8018604:	3b01      	subs	r3, #1
 8018606:	4619      	mov	r1, r3
 8018608:	f7ff fcbc 	bl	8017f84 <mg_pass_string>
 801860c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 801860e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018610:	2b00      	cmp	r3, #0
 8018612:	da01      	bge.n	8018618 <mg_json_get+0x33c>
 8018614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018616:	e197      	b.n	8018948 <mg_json_get+0x66c>
          i += n + 1;
 8018618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801861a:	3301      	adds	r3, #1
 801861c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801861e:	4413      	add	r3, r2
 8018620:	663b      	str	r3, [r7, #96]	@ 0x60
 8018622:	e002      	b.n	801862a <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8018624:	f06f 0301 	mvn.w	r3, #1
 8018628:	e18e      	b.n	8018948 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 801862a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801862c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801862e:	429a      	cmp	r2, r3
 8018630:	d114      	bne.n	801865c <mg_json_get+0x380>
 8018632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	4413      	add	r3, r2
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d10e      	bne.n	801865c <mg_json_get+0x380>
 801863e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018642:	429a      	cmp	r2, r3
 8018644:	d10a      	bne.n	801865c <mg_json_get+0x380>
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d005      	beq.n	8018658 <mg_json_get+0x37c>
 801864c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801864e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018650:	1ad3      	subs	r3, r2, r3
 8018652:	1c5a      	adds	r2, r3, #1
 8018654:	683b      	ldr	r3, [r7, #0]
 8018656:	601a      	str	r2, [r3, #0]
 8018658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801865a:	e175      	b.n	8018948 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 801865c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801865e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018660:	429a      	cmp	r2, r3
 8018662:	d105      	bne.n	8018670 <mg_json_get+0x394>
 8018664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018666:	2b00      	cmp	r3, #0
 8018668:	db02      	blt.n	8018670 <mg_json_get+0x394>
 801866a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801866c:	3301      	adds	r3, #1
 801866e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 8018670:	2303      	movs	r3, #3
 8018672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8018676:	e15d      	b.n	8018934 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 8018678:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801867c:	2b22      	cmp	r3, #34	@ 0x22
 801867e:	d170      	bne.n	8018762 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8018680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018682:	3301      	adds	r3, #1
 8018684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018686:	18d0      	adds	r0, r2, r3
 8018688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801868a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801868c:	1ad3      	subs	r3, r2, r3
 801868e:	3b01      	subs	r3, #1
 8018690:	4619      	mov	r1, r3
 8018692:	f7ff fc77 	bl	8017f84 <mg_pass_string>
 8018696:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 8018698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801869a:	2b00      	cmp	r3, #0
 801869c:	da01      	bge.n	80186a2 <mg_json_get+0x3c6>
 801869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186a0:	e152      	b.n	8018948 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80186a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186a4:	1c5a      	adds	r2, r3, #1
 80186a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186a8:	4413      	add	r3, r2
 80186aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80186ac:	429a      	cmp	r2, r3
 80186ae:	dc02      	bgt.n	80186b6 <mg_json_get+0x3da>
 80186b0:	f06f 0302 	mvn.w	r3, #2
 80186b4:	e148      	b.n	8018948 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80186b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186ba:	429a      	cmp	r2, r3
 80186bc:	da02      	bge.n	80186c4 <mg_json_get+0x3e8>
 80186be:	f06f 0302 	mvn.w	r3, #2
 80186c2:	e141      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80186c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186c8:	429a      	cmp	r2, r3
 80186ca:	d109      	bne.n	80186e0 <mg_json_get+0x404>
 80186cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186ce:	3b01      	subs	r3, #1
 80186d0:	687a      	ldr	r2, [r7, #4]
 80186d2:	4413      	add	r3, r2
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80186d8:	d002      	beq.n	80186e0 <mg_json_get+0x404>
 80186da:	f06f 0302 	mvn.w	r3, #2
 80186de:	e133      	b.n	8018948 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 80186e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d133      	bne.n	8018750 <mg_json_get+0x474>
 80186e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186ea:	3b01      	subs	r3, #1
 80186ec:	687a      	ldr	r2, [r7, #4]
 80186ee:	4413      	add	r3, r2
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80186f4:	d12c      	bne.n	8018750 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80186f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186f8:	3301      	adds	r3, #1
 80186fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80186fc:	18d0      	adds	r0, r2, r3
 80186fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018700:	687a      	ldr	r2, [r7, #4]
 8018702:	4413      	add	r3, r2
 8018704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018706:	4619      	mov	r1, r3
 8018708:	f008 fc2f 	bl	8020f6a <strncmp>
 801870c:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 801870e:	2b00      	cmp	r3, #0
 8018710:	d11e      	bne.n	8018750 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8018712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018716:	4413      	add	r3, r2
 8018718:	461a      	mov	r2, r3
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	4413      	add	r3, r2
 801871e:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8018720:	2b00      	cmp	r3, #0
 8018722:	d011      	beq.n	8018748 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8018724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018728:	4413      	add	r3, r2
 801872a:	461a      	mov	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	4413      	add	r3, r2
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	2b2e      	cmp	r3, #46	@ 0x2e
 8018734:	d008      	beq.n	8018748 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8018736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801873a:	4413      	add	r3, r2
 801873c:	461a      	mov	r2, r3
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	4413      	add	r3, r2
 8018742:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8018744:	2b5b      	cmp	r3, #91	@ 0x5b
 8018746:	d103      	bne.n	8018750 <mg_json_get+0x474>
            pos += n;
 8018748:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801874c:	4413      	add	r3, r2
 801874e:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 8018750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018752:	3301      	adds	r3, #1
 8018754:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018756:	4413      	add	r3, r2
 8018758:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 801875a:	2302      	movs	r3, #2
 801875c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8018760:	e0e7      	b.n	8018932 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 8018762:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018766:	2b7d      	cmp	r3, #125	@ 0x7d
 8018768:	d14a      	bne.n	8018800 <mg_json_get+0x524>
          MG_EOO('}');
 801876a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801876c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801876e:	429a      	cmp	r2, r3
 8018770:	d106      	bne.n	8018780 <mg_json_get+0x4a4>
 8018772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018776:	429a      	cmp	r2, r3
 8018778:	d002      	beq.n	8018780 <mg_json_get+0x4a4>
 801877a:	f06f 0302 	mvn.w	r3, #2
 801877e:	e0e3      	b.n	8018948 <mg_json_get+0x66c>
 8018780:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8018784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018786:	3b01      	subs	r3, #1
 8018788:	3368      	adds	r3, #104	@ 0x68
 801878a:	443b      	add	r3, r7
 801878c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8018790:	3302      	adds	r3, #2
 8018792:	429a      	cmp	r2, r3
 8018794:	d008      	beq.n	80187a8 <mg_json_get+0x4cc>
 8018796:	f06f 0301 	mvn.w	r3, #1
 801879a:	e0d5      	b.n	8018948 <mg_json_get+0x66c>
 801879c:	08025c64 	.word	0x08025c64
 80187a0:	08025c6c 	.word	0x08025c6c
 80187a4:	08025c74 	.word	0x08025c74
 80187a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80187aa:	3b01      	subs	r3, #1
 80187ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80187ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80187b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d114      	bne.n	80187e0 <mg_json_get+0x504>
 80187b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	4413      	add	r3, r2
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d10e      	bne.n	80187e0 <mg_json_get+0x504>
 80187c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80187c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d10a      	bne.n	80187e0 <mg_json_get+0x504>
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d005      	beq.n	80187dc <mg_json_get+0x500>
 80187d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80187d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187d4:	1ad3      	subs	r3, r2, r3
 80187d6:	1c5a      	adds	r2, r3, #1
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187de:	e0b3      	b.n	8018948 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 80187e0:	2303      	movs	r3, #3
 80187e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 80187e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80187e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187ea:	429a      	cmp	r2, r3
 80187ec:	f040 80a1 	bne.w	8018932 <mg_json_get+0x656>
 80187f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f2c0 809d 	blt.w	8018932 <mg_json_get+0x656>
 80187f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80187fa:	3301      	adds	r3, #1
 80187fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 80187fe:	e098      	b.n	8018932 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 8018800:	f06f 0301 	mvn.w	r3, #1
 8018804:	e0a0      	b.n	8018948 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 8018806:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801880a:	2b3a      	cmp	r3, #58	@ 0x3a
 801880c:	d103      	bne.n	8018816 <mg_json_get+0x53a>
          expecting = S_VALUE;
 801880e:	2300      	movs	r3, #0
 8018810:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8018814:	e08e      	b.n	8018934 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 8018816:	f06f 0301 	mvn.w	r3, #1
 801881a:	e095      	b.n	8018948 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 801881c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801881e:	2b00      	cmp	r3, #0
 8018820:	dc02      	bgt.n	8018828 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 8018822:	f06f 0301 	mvn.w	r3, #1
 8018826:	e08f      	b.n	8018948 <mg_json_get+0x66c>
        } else if (c == ',') {
 8018828:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801882c:	2b2c      	cmp	r3, #44	@ 0x2c
 801882e:	d10d      	bne.n	801884c <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8018830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018832:	3b01      	subs	r3, #1
 8018834:	3368      	adds	r3, #104	@ 0x68
 8018836:	443b      	add	r3, r7
 8018838:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801883c:	2b7b      	cmp	r3, #123	@ 0x7b
 801883e:	bf0c      	ite	eq
 8018840:	2301      	moveq	r3, #1
 8018842:	2300      	movne	r3, #0
 8018844:	b2db      	uxtb	r3, r3
 8018846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801884a:	e073      	b.n	8018934 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 801884c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018850:	2b5d      	cmp	r3, #93	@ 0x5d
 8018852:	d003      	beq.n	801885c <mg_json_get+0x580>
 8018854:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018858:	2b7d      	cmp	r3, #125	@ 0x7d
 801885a:	d163      	bne.n	8018924 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 801885c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801885e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018860:	429a      	cmp	r2, r3
 8018862:	d10d      	bne.n	8018880 <mg_json_get+0x5a4>
 8018864:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018868:	2b7d      	cmp	r3, #125	@ 0x7d
 801886a:	d109      	bne.n	8018880 <mg_json_get+0x5a4>
 801886c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801886e:	3b01      	subs	r3, #1
 8018870:	687a      	ldr	r2, [r7, #4]
 8018872:	4413      	add	r3, r2
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	2b2e      	cmp	r3, #46	@ 0x2e
 8018878:	d102      	bne.n	8018880 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 801887a:	f06f 0302 	mvn.w	r3, #2
 801887e:	e063      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8018880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018884:	429a      	cmp	r2, r3
 8018886:	d10d      	bne.n	80188a4 <mg_json_get+0x5c8>
 8018888:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801888c:	2b5d      	cmp	r3, #93	@ 0x5d
 801888e:	d109      	bne.n	80188a4 <mg_json_get+0x5c8>
 8018890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018892:	3b01      	subs	r3, #1
 8018894:	687a      	ldr	r2, [r7, #4]
 8018896:	4413      	add	r3, r2
 8018898:	781b      	ldrb	r3, [r3, #0]
 801889a:	2b2c      	cmp	r3, #44	@ 0x2c
 801889c:	d102      	bne.n	80188a4 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 801889e:	f06f 0302 	mvn.w	r3, #2
 80188a2:	e051      	b.n	8018948 <mg_json_get+0x66c>
          MG_EOO('O');
 80188a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80188a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d106      	bne.n	80188ba <mg_json_get+0x5de>
 80188ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80188ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d002      	beq.n	80188ba <mg_json_get+0x5de>
 80188b4:	f06f 0302 	mvn.w	r3, #2
 80188b8:	e046      	b.n	8018948 <mg_json_get+0x66c>
 80188ba:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80188be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80188c0:	3b01      	subs	r3, #1
 80188c2:	3368      	adds	r3, #104	@ 0x68
 80188c4:	443b      	add	r3, r7
 80188c6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80188ca:	3302      	adds	r3, #2
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d002      	beq.n	80188d6 <mg_json_get+0x5fa>
 80188d0:	f06f 0301 	mvn.w	r3, #1
 80188d4:	e038      	b.n	8018948 <mg_json_get+0x66c>
 80188d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80188d8:	3b01      	subs	r3, #1
 80188da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80188dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80188de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188e0:	429a      	cmp	r2, r3
 80188e2:	d114      	bne.n	801890e <mg_json_get+0x632>
 80188e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	4413      	add	r3, r2
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d10e      	bne.n	801890e <mg_json_get+0x632>
 80188f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80188f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d10a      	bne.n	801890e <mg_json_get+0x632>
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d005      	beq.n	801890a <mg_json_get+0x62e>
 80188fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018902:	1ad3      	subs	r3, r2, r3
 8018904:	1c5a      	adds	r2, r3, #1
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	601a      	str	r2, [r3, #0]
 801890a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801890c:	e01c      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801890e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018912:	429a      	cmp	r2, r3
 8018914:	d109      	bne.n	801892a <mg_json_get+0x64e>
 8018916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018918:	2b00      	cmp	r3, #0
 801891a:	db06      	blt.n	801892a <mg_json_get+0x64e>
 801891c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801891e:	3301      	adds	r3, #1
 8018920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018922:	e002      	b.n	801892a <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8018924:	f06f 0301 	mvn.w	r3, #1
 8018928:	e00e      	b.n	8018948 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801892a:	bf00      	nop
        break;
 801892c:	e002      	b.n	8018934 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801892e:	bf00      	nop
 8018930:	e000      	b.n	8018934 <mg_json_get+0x658>
        break;
 8018932:	bf00      	nop
  for (i = 0; i < len; i++) {
 8018934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018936:	3301      	adds	r3, #1
 8018938:	663b      	str	r3, [r7, #96]	@ 0x60
 801893a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801893c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801893e:	429a      	cmp	r2, r3
 8018940:	f6ff acfc 	blt.w	801833c <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8018944:	f06f 0302 	mvn.w	r3, #2
}
 8018948:	4618      	mov	r0, r3
 801894a:	376c      	adds	r7, #108	@ 0x6c
 801894c:	46bd      	mov	sp, r7
 801894e:	bd90      	pop	{r4, r7, pc}

08018950 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8018950:	b590      	push	{r4, r7, lr}
 8018952:	b089      	sub	sp, #36	@ 0x24
 8018954:	af00      	add	r7, sp, #0
 8018956:	f107 0408 	add.w	r4, r7, #8
 801895a:	e884 0003 	stmia.w	r4, {r0, r1}
 801895e:	607a      	str	r2, [r7, #4]
 8018960:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8018962:	2300      	movs	r3, #0
 8018964:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8018966:	f107 0314 	add.w	r3, r7, #20
 801896a:	687a      	ldr	r2, [r7, #4]
 801896c:	f107 0108 	add.w	r1, r7, #8
 8018970:	c903      	ldmia	r1, {r0, r1}
 8018972:	f7ff fcb3 	bl	80182dc <mg_json_get>
 8018976:	61b8      	str	r0, [r7, #24]
 8018978:	69bb      	ldr	r3, [r7, #24]
 801897a:	2b00      	cmp	r3, #0
 801897c:	db25      	blt.n	80189ca <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801897e:	68ba      	ldr	r2, [r7, #8]
 8018980:	69bb      	ldr	r3, [r7, #24]
 8018982:	4413      	add	r3, r2
 8018984:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8018986:	2b2d      	cmp	r3, #45	@ 0x2d
 8018988:	d00b      	beq.n	80189a2 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801898a:	68ba      	ldr	r2, [r7, #8]
 801898c:	69bb      	ldr	r3, [r7, #24]
 801898e:	4413      	add	r3, r2
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	2b2f      	cmp	r3, #47	@ 0x2f
 8018994:	d919      	bls.n	80189ca <mg_json_get_num+0x7a>
 8018996:	68ba      	ldr	r2, [r7, #8]
 8018998:	69bb      	ldr	r3, [r7, #24]
 801899a:	4413      	add	r3, r2
 801899c:	781b      	ldrb	r3, [r3, #0]
 801899e:	2b39      	cmp	r3, #57	@ 0x39
 80189a0:	d813      	bhi.n	80189ca <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d00e      	beq.n	80189c6 <mg_json_get_num+0x76>
 80189a8:	68ba      	ldr	r2, [r7, #8]
 80189aa:	69bb      	ldr	r3, [r7, #24]
 80189ac:	4413      	add	r3, r2
 80189ae:	6979      	ldr	r1, [r7, #20]
 80189b0:	2200      	movs	r2, #0
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7ff fb28 	bl	8018008 <mg_atod>
 80189b8:	eeb0 7a40 	vmov.f32	s14, s0
 80189bc:	eef0 7a60 	vmov.f32	s15, s1
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 80189c6:	2301      	movs	r3, #1
 80189c8:	61fb      	str	r3, [r7, #28]
  }
  return found;
 80189ca:	69fb      	ldr	r3, [r7, #28]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	bf14      	ite	ne
 80189d0:	2301      	movne	r3, #1
 80189d2:	2300      	moveq	r3, #0
 80189d4:	b2db      	uxtb	r3, r3
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3724      	adds	r7, #36	@ 0x24
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd90      	pop	{r4, r7, pc}

080189de <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 80189de:	b590      	push	{r4, r7, lr}
 80189e0:	b087      	sub	sp, #28
 80189e2:	af00      	add	r7, sp, #0
 80189e4:	f107 0408 	add.w	r4, r7, #8
 80189e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80189ec:	607a      	str	r2, [r7, #4]
 80189ee:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 80189f0:	2300      	movs	r3, #0
 80189f2:	617b      	str	r3, [r7, #20]
 80189f4:	2300      	movs	r3, #0
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	f107 0108 	add.w	r1, r7, #8
 80189fc:	c903      	ldmia	r1, {r0, r1}
 80189fe:	f7ff fc6d 	bl	80182dc <mg_json_get>
 8018a02:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8018a04:	693b      	ldr	r3, [r7, #16]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	db1b      	blt.n	8018a42 <mg_json_get_bool+0x64>
 8018a0a:	68ba      	ldr	r2, [r7, #8]
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	4413      	add	r3, r2
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	2b74      	cmp	r3, #116	@ 0x74
 8018a14:	d005      	beq.n	8018a22 <mg_json_get_bool+0x44>
 8018a16:	68ba      	ldr	r2, [r7, #8]
 8018a18:	693b      	ldr	r3, [r7, #16]
 8018a1a:	4413      	add	r3, r2
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	2b66      	cmp	r3, #102	@ 0x66
 8018a20:	d10f      	bne.n	8018a42 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00a      	beq.n	8018a3e <mg_json_get_bool+0x60>
 8018a28:	68ba      	ldr	r2, [r7, #8]
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	4413      	add	r3, r2
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2b74      	cmp	r3, #116	@ 0x74
 8018a32:	bf0c      	ite	eq
 8018a34:	2301      	moveq	r3, #1
 8018a36:	2300      	movne	r3, #0
 8018a38:	b2da      	uxtb	r2, r3
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	701a      	strb	r2, [r3, #0]
    found = 1;
 8018a3e:	2301      	movs	r3, #1
 8018a40:	617b      	str	r3, [r7, #20]
  }
  return found;
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	bf14      	ite	ne
 8018a48:	2301      	movne	r3, #1
 8018a4a:	2300      	moveq	r3, #0
 8018a4c:	b2db      	uxtb	r3, r3
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	371c      	adds	r7, #28
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd90      	pop	{r4, r7, pc}

08018a56 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8018a56:	b590      	push	{r4, r7, lr}
 8018a58:	b08d      	sub	sp, #52	@ 0x34
 8018a5a:	af02      	add	r7, sp, #8
 8018a5c:	f107 0408 	add.w	r4, r7, #8
 8018a60:	e884 0003 	stmia.w	r4, {r0, r1}
 8018a64:	607a      	str	r2, [r7, #4]
 8018a66:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8018a68:	2300      	movs	r3, #0
 8018a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	623b      	str	r3, [r7, #32]
 8018a70:	e064      	b.n	8018b3c <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8018a72:	68ba      	ldr	r2, [r7, #8]
 8018a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a76:	4413      	add	r3, r2
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	2b5c      	cmp	r3, #92	@ 0x5c
 8018a7c:	d12c      	bne.n	8018ad8 <mg_json_unescape+0x82>
 8018a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a80:	1d5a      	adds	r2, r3, #5
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d227      	bcs.n	8018ad8 <mg_json_unescape+0x82>
 8018a88:	68ba      	ldr	r2, [r7, #8]
 8018a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	4413      	add	r3, r2
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	2b75      	cmp	r3, #117	@ 0x75
 8018a94:	d120      	bne.n	8018ad8 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8018a96:	68ba      	ldr	r2, [r7, #8]
 8018a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a9a:	3302      	adds	r3, #2
 8018a9c:	18d1      	adds	r1, r2, r3
 8018a9e:	f107 0314 	add.w	r3, r7, #20
 8018aa2:	2204      	movs	r2, #4
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f006 fb7a 	bl	801f19e <mg_str_n>
 8018aaa:	687a      	ldr	r2, [r7, #4]
 8018aac:	6a3b      	ldr	r3, [r7, #32]
 8018aae:	4413      	add	r3, r2
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	9200      	str	r2, [sp, #0]
 8018ab4:	2210      	movs	r2, #16
 8018ab6:	f107 0114 	add.w	r1, r7, #20
 8018aba:	c903      	ldmia	r1, {r0, r1}
 8018abc:	f006 fd76 	bl	801f5ac <mg_str_to_num>
 8018ac0:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 8018ac2:	f083 0301 	eor.w	r3, r3, #1
 8018ac6:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d001      	beq.n	8018ad0 <mg_json_unescape+0x7a>
        return false;
 8018acc:	2300      	movs	r3, #0
 8018ace:	e04c      	b.n	8018b6a <mg_json_unescape+0x114>
      i += 5;
 8018ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad2:	3305      	adds	r3, #5
 8018ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ad6:	e02b      	b.n	8018b30 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8018ad8:	68ba      	ldr	r2, [r7, #8]
 8018ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018adc:	4413      	add	r3, r2
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	2b5c      	cmp	r3, #92	@ 0x5c
 8018ae2:	d11d      	bne.n	8018b20 <mg_json_unescape+0xca>
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ae6:	1c5a      	adds	r2, r3, #1
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d218      	bcs.n	8018b20 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 8018aee:	68ba      	ldr	r2, [r7, #8]
 8018af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018af2:	3301      	adds	r3, #1
 8018af4:	4413      	add	r3, r2
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	2100      	movs	r1, #0
 8018afa:	4618      	mov	r0, r3
 8018afc:	f7ff fa12 	bl	8017f24 <json_esc>
 8018b00:	4603      	mov	r3, r0
 8018b02:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 8018b04:	7ffb      	ldrb	r3, [r7, #31]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d101      	bne.n	8018b0e <mg_json_unescape+0xb8>
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	e02d      	b.n	8018b6a <mg_json_unescape+0x114>
      to[j] = c;
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	6a3b      	ldr	r3, [r7, #32]
 8018b12:	4413      	add	r3, r2
 8018b14:	7ffa      	ldrb	r2, [r7, #31]
 8018b16:	701a      	strb	r2, [r3, #0]
      i++;
 8018b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8018b1e:	e007      	b.n	8018b30 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 8018b20:	68ba      	ldr	r2, [r7, #8]
 8018b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b24:	441a      	add	r2, r3
 8018b26:	6879      	ldr	r1, [r7, #4]
 8018b28:	6a3b      	ldr	r3, [r7, #32]
 8018b2a:	440b      	add	r3, r1
 8018b2c:	7812      	ldrb	r2, [r2, #0]
 8018b2e:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8018b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b32:	3301      	adds	r3, #1
 8018b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b36:	6a3b      	ldr	r3, [r7, #32]
 8018b38:	3301      	adds	r3, #1
 8018b3a:	623b      	str	r3, [r7, #32]
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d203      	bcs.n	8018b4c <mg_json_unescape+0xf6>
 8018b44:	6a3a      	ldr	r2, [r7, #32]
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d392      	bcc.n	8018a72 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8018b4c:	6a3a      	ldr	r2, [r7, #32]
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d301      	bcc.n	8018b58 <mg_json_unescape+0x102>
 8018b54:	2300      	movs	r3, #0
 8018b56:	e008      	b.n	8018b6a <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d004      	beq.n	8018b68 <mg_json_unescape+0x112>
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	6a3b      	ldr	r3, [r7, #32]
 8018b62:	4413      	add	r3, r2
 8018b64:	2200      	movs	r2, #0
 8018b66:	701a      	strb	r2, [r3, #0]
  return true;
 8018b68:	2301      	movs	r3, #1
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	372c      	adds	r7, #44	@ 0x2c
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd90      	pop	{r4, r7, pc}

08018b72 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 8018b72:	b580      	push	{r7, lr}
 8018b74:	b08a      	sub	sp, #40	@ 0x28
 8018b76:	af00      	add	r7, sp, #0
 8018b78:	f107 0308 	add.w	r3, r7, #8
 8018b7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b80:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 8018b82:	2300      	movs	r3, #0
 8018b84:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 8018b86:	2300      	movs	r3, #0
 8018b88:	617b      	str	r3, [r7, #20]
 8018b8a:	f107 0314 	add.w	r3, r7, #20
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	f107 0108 	add.w	r1, r7, #8
 8018b94:	c903      	ldmia	r1, {r0, r1}
 8018b96:	f7ff fba1 	bl	80182dc <mg_json_get>
 8018b9a:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8018b9c:	6a3b      	ldr	r3, [r7, #32]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	db2f      	blt.n	8018c02 <mg_json_get_str+0x90>
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	2b01      	cmp	r3, #1
 8018ba6:	dd2c      	ble.n	8018c02 <mg_json_get_str+0x90>
 8018ba8:	68ba      	ldr	r2, [r7, #8]
 8018baa:	6a3b      	ldr	r3, [r7, #32]
 8018bac:	4413      	add	r3, r2
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b22      	cmp	r3, #34	@ 0x22
 8018bb2:	d126      	bne.n	8018c02 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	2001      	movs	r0, #1
 8018bba:	f7f9 fe97 	bl	80128ec <mg_calloc>
 8018bbe:	6278      	str	r0, [r7, #36]	@ 0x24
 8018bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d01d      	beq.n	8018c02 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8018bc6:	68ba      	ldr	r2, [r7, #8]
 8018bc8:	6a3b      	ldr	r3, [r7, #32]
 8018bca:	3301      	adds	r3, #1
 8018bcc:	18d1      	adds	r1, r2, r3
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	3b02      	subs	r3, #2
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	f107 0318 	add.w	r3, r7, #24
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f006 fae0 	bl	801f19e <mg_str_n>
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018be2:	f107 0118 	add.w	r1, r7, #24
 8018be6:	c903      	ldmia	r1, {r0, r1}
 8018be8:	f7ff ff35 	bl	8018a56 <mg_json_unescape>
 8018bec:	4603      	mov	r3, r0
 8018bee:	f083 0301 	eor.w	r3, r3, #1
 8018bf2:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d004      	beq.n	8018c02 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 8018bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018bfa:	f7f1 fb05 	bl	800a208 <vPortFree>
      result = NULL;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 8018c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018c04:	4618      	mov	r0, r3
 8018c06:	3728      	adds	r7, #40	@ 0x28
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}

08018c0c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	4603      	mov	r3, r0
 8018c14:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8018c16:	4b05      	ldr	r3, [pc, #20]	@ (8018c2c <logc+0x20>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a05      	ldr	r2, [pc, #20]	@ (8018c30 <logc+0x24>)
 8018c1c:	6811      	ldr	r1, [r2, #0]
 8018c1e:	79fa      	ldrb	r2, [r7, #7]
 8018c20:	4610      	mov	r0, r2
 8018c22:	4798      	blx	r3
}
 8018c24:	bf00      	nop
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	2000028c 	.word	0x2000028c
 8018c30:	20017454 	.word	0x20017454

08018c34 <logs>:

static void logs(const char *buf, size_t len) {
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8018c3e:	2300      	movs	r3, #0
 8018c40:	60fb      	str	r3, [r7, #12]
 8018c42:	e009      	b.n	8018c58 <logs+0x24>
 8018c44:	687a      	ldr	r2, [r7, #4]
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	4413      	add	r3, r2
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7ff ffdd 	bl	8018c0c <logc>
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	3301      	adds	r3, #1
 8018c56:	60fb      	str	r3, [r7, #12]
 8018c58:	68fa      	ldr	r2, [r7, #12]
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d3f1      	bcc.n	8018c44 <logs+0x10>
}
 8018c60:	bf00      	nop
 8018c62:	bf00      	nop
 8018c64:	3710      	adds	r7, #16
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
	...

08018c6c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8018c6c:	b590      	push	{r4, r7, lr}
 8018c6e:	b099      	sub	sp, #100	@ 0x64
 8018c70:	af06      	add	r7, sp, #24
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
 8018c78:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8018c7a:	212f      	movs	r1, #47	@ 0x2f
 8018c7c:	68b8      	ldr	r0, [r7, #8]
 8018c7e:	f008 f999 	bl	8020fb4 <strrchr>
 8018c82:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8018c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d104      	bne.n	8018c94 <mg_log_prefix+0x28>
 8018c8a:	215c      	movs	r1, #92	@ 0x5c
 8018c8c:	68b8      	ldr	r0, [r7, #8]
 8018c8e:	f008 f991 	bl	8020fb4 <strrchr>
 8018c92:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8018c94:	f007 fa9a 	bl	80201cc <mg_millis>
 8018c98:	4602      	mov	r2, r0
 8018c9a:	460b      	mov	r3, r1
 8018c9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018c9e:	2900      	cmp	r1, #0
 8018ca0:	d002      	beq.n	8018ca8 <mg_log_prefix+0x3c>
 8018ca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018ca4:	3101      	adds	r1, #1
 8018ca6:	e000      	b.n	8018caa <mg_log_prefix+0x3e>
 8018ca8:	68b9      	ldr	r1, [r7, #8]
 8018caa:	f107 0414 	add.w	r4, r7, #20
 8018cae:	6838      	ldr	r0, [r7, #0]
 8018cb0:	9005      	str	r0, [sp, #20]
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	9004      	str	r0, [sp, #16]
 8018cb6:	9103      	str	r1, [sp, #12]
 8018cb8:	68f9      	ldr	r1, [r7, #12]
 8018cba:	9102      	str	r1, [sp, #8]
 8018cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8018cc0:	4a11      	ldr	r2, [pc, #68]	@ (8018d08 <mg_log_prefix+0x9c>)
 8018cc2:	2129      	movs	r1, #41	@ 0x29
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	f005 ffed 	bl	801eca4 <mg_snprintf>
 8018cca:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8018ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018cce:	2b27      	cmp	r3, #39	@ 0x27
 8018cd0:	d90a      	bls.n	8018ce8 <mg_log_prefix+0x7c>
 8018cd2:	2327      	movs	r3, #39	@ 0x27
 8018cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8018cd6:	e007      	b.n	8018ce8 <mg_log_prefix+0x7c>
 8018cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018cda:	1c5a      	adds	r2, r3, #1
 8018cdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8018cde:	3348      	adds	r3, #72	@ 0x48
 8018ce0:	443b      	add	r3, r7
 8018ce2:	2220      	movs	r2, #32
 8018ce4:	f803 2c34 	strb.w	r2, [r3, #-52]
 8018ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018cea:	2b28      	cmp	r3, #40	@ 0x28
 8018cec:	d9f4      	bls.n	8018cd8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 8018cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018cf0:	1e5a      	subs	r2, r3, #1
 8018cf2:	f107 0314 	add.w	r3, r7, #20
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7ff ff9b 	bl	8018c34 <logs>
}
 8018cfe:	bf00      	nop
 8018d00:	374c      	adds	r7, #76	@ 0x4c
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd90      	pop	{r4, r7, pc}
 8018d06:	bf00      	nop
 8018d08:	08025c7c 	.word	0x08025c7c

08018d0c <mg_log>:

void mg_log(const char *fmt, ...) {
 8018d0c:	b40f      	push	{r0, r1, r2, r3}
 8018d0e:	b580      	push	{r7, lr}
 8018d10:	b082      	sub	sp, #8
 8018d12:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8018d14:	f107 0314 	add.w	r3, r7, #20
 8018d18:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8018d1a:	4b09      	ldr	r3, [pc, #36]	@ (8018d40 <mg_log+0x34>)
 8018d1c:	6818      	ldr	r0, [r3, #0]
 8018d1e:	4b09      	ldr	r3, [pc, #36]	@ (8018d44 <mg_log+0x38>)
 8018d20:	6819      	ldr	r1, [r3, #0]
 8018d22:	1d3b      	adds	r3, r7, #4
 8018d24:	693a      	ldr	r2, [r7, #16]
 8018d26:	f7fb f8f1 	bl	8013f0c <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8018d2a:	2102      	movs	r1, #2
 8018d2c:	4806      	ldr	r0, [pc, #24]	@ (8018d48 <mg_log+0x3c>)
 8018d2e:	f7ff ff81 	bl	8018c34 <logs>
}
 8018d32:	bf00      	nop
 8018d34:	3708      	adds	r7, #8
 8018d36:	46bd      	mov	sp, r7
 8018d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018d3c:	b004      	add	sp, #16
 8018d3e:	4770      	bx	lr
 8018d40:	2000028c 	.word	0x2000028c
 8018d44:	20017454 	.word	0x20017454
 8018d48:	08024a64 	.word	0x08024a64

08018d4c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8018d4c:	b480      	push	{r7}
 8018d4e:	b083      	sub	sp, #12
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2b09      	cmp	r3, #9
 8018d58:	d804      	bhi.n	8018d64 <nibble+0x18>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	b2db      	uxtb	r3, r3
 8018d5e:	3330      	adds	r3, #48	@ 0x30
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	e003      	b.n	8018d6c <nibble+0x20>
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	3357      	adds	r3, #87	@ 0x57
 8018d6a:	b2db      	uxtb	r3, r3
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	370c      	adds	r7, #12
 8018d70:	46bd      	mov	sp, r7
 8018d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d76:	4770      	bx	lr

08018d78 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b08a      	sub	sp, #40	@ 0x28
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8018d86:	2300      	movs	r3, #0
 8018d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	623b      	str	r3, [r7, #32]
 8018d90:	e07a      	b.n	8018e88 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8018d92:	6a3b      	ldr	r3, [r7, #32]
 8018d94:	f003 030f 	and.w	r3, r3, #15
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d13a      	bne.n	8018e12 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8018d9c:	6a3b      	ldr	r3, [r7, #32]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d00f      	beq.n	8018dc2 <mg_hexdump+0x4a>
 8018da2:	2102      	movs	r1, #2
 8018da4:	484c      	ldr	r0, [pc, #304]	@ (8018ed8 <mg_hexdump+0x160>)
 8018da6:	f7ff ff45 	bl	8018c34 <logs>
 8018daa:	f107 030c 	add.w	r3, r7, #12
 8018dae:	2110      	movs	r1, #16
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7ff ff3f 	bl	8018c34 <logs>
 8018db6:	200a      	movs	r0, #10
 8018db8:	f7ff ff28 	bl	8018c0c <logc>
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8018dc2:	6a3b      	ldr	r3, [r7, #32]
 8018dc4:	0b1b      	lsrs	r3, r3, #12
 8018dc6:	f003 030f 	and.w	r3, r3, #15
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7ff ffbe 	bl	8018d4c <nibble>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7ff ff1a 	bl	8018c0c <logc>
 8018dd8:	6a3b      	ldr	r3, [r7, #32]
 8018dda:	0a1b      	lsrs	r3, r3, #8
 8018ddc:	f003 030f 	and.w	r3, r3, #15
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7ff ffb3 	bl	8018d4c <nibble>
 8018de6:	4603      	mov	r3, r0
 8018de8:	4618      	mov	r0, r3
 8018dea:	f7ff ff0f 	bl	8018c0c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8018dee:	6a3b      	ldr	r3, [r7, #32]
 8018df0:	091b      	lsrs	r3, r3, #4
 8018df2:	f003 030f 	and.w	r3, r3, #15
 8018df6:	4618      	mov	r0, r3
 8018df8:	f7ff ffa8 	bl	8018d4c <nibble>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f7ff ff04 	bl	8018c0c <logc>
 8018e04:	2030      	movs	r0, #48	@ 0x30
 8018e06:	f7ff ff01 	bl	8018c0c <logc>
 8018e0a:	2103      	movs	r1, #3
 8018e0c:	4833      	ldr	r0, [pc, #204]	@ (8018edc <mg_hexdump+0x164>)
 8018e0e:	f7ff ff11 	bl	8018c34 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8018e12:	69fa      	ldr	r2, [r7, #28]
 8018e14:	6a3b      	ldr	r3, [r7, #32]
 8018e16:	4413      	add	r3, r2
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	091b      	lsrs	r3, r3, #4
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7ff ff94 	bl	8018d4c <nibble>
 8018e24:	4603      	mov	r3, r0
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7ff fef0 	bl	8018c0c <logc>
 8018e2c:	69fa      	ldr	r2, [r7, #28]
 8018e2e:	6a3b      	ldr	r3, [r7, #32]
 8018e30:	4413      	add	r3, r2
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	f003 030f 	and.w	r3, r3, #15
 8018e38:	4618      	mov	r0, r3
 8018e3a:	f7ff ff87 	bl	8018d4c <nibble>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7ff fee3 	bl	8018c0c <logc>
    logc(' ');                                         // Space after hex number
 8018e46:	2020      	movs	r0, #32
 8018e48:	f7ff fee0 	bl	8018c0c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8018e4c:	69fa      	ldr	r2, [r7, #28]
 8018e4e:	6a3b      	ldr	r3, [r7, #32]
 8018e50:	4413      	add	r3, r2
 8018e52:	781b      	ldrb	r3, [r3, #0]
 8018e54:	2b1f      	cmp	r3, #31
 8018e56:	d90a      	bls.n	8018e6e <mg_hexdump+0xf6>
 8018e58:	69fa      	ldr	r2, [r7, #28]
 8018e5a:	6a3b      	ldr	r3, [r7, #32]
 8018e5c:	4413      	add	r3, r2
 8018e5e:	781b      	ldrb	r3, [r3, #0]
 8018e60:	2b7e      	cmp	r3, #126	@ 0x7e
 8018e62:	d804      	bhi.n	8018e6e <mg_hexdump+0xf6>
 8018e64:	69fa      	ldr	r2, [r7, #28]
 8018e66:	6a3b      	ldr	r3, [r7, #32]
 8018e68:	4413      	add	r3, r2
 8018e6a:	781a      	ldrb	r2, [r3, #0]
 8018e6c:	e000      	b.n	8018e70 <mg_hexdump+0xf8>
 8018e6e:	222e      	movs	r2, #46	@ 0x2e
 8018e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e74:	1c59      	adds	r1, r3, #1
 8018e76:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8018e7a:	3328      	adds	r3, #40	@ 0x28
 8018e7c:	443b      	add	r3, r7
 8018e7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8018e82:	6a3b      	ldr	r3, [r7, #32]
 8018e84:	3301      	adds	r3, #1
 8018e86:	623b      	str	r3, [r7, #32]
 8018e88:	6a3a      	ldr	r2, [r7, #32]
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	d380      	bcc.n	8018d92 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8018e90:	e00d      	b.n	8018eae <mg_hexdump+0x136>
 8018e92:	2103      	movs	r1, #3
 8018e94:	4811      	ldr	r0, [pc, #68]	@ (8018edc <mg_hexdump+0x164>)
 8018e96:	f7ff fecd 	bl	8018c34 <logs>
 8018e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e9e:	1c5a      	adds	r2, r3, #1
 8018ea0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8018ea4:	3328      	adds	r3, #40	@ 0x28
 8018ea6:	443b      	add	r3, r7
 8018ea8:	2220      	movs	r2, #32
 8018eaa:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8018eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018eb2:	2b0f      	cmp	r3, #15
 8018eb4:	d9ed      	bls.n	8018e92 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8018eb6:	2102      	movs	r1, #2
 8018eb8:	4807      	ldr	r0, [pc, #28]	@ (8018ed8 <mg_hexdump+0x160>)
 8018eba:	f7ff febb 	bl	8018c34 <logs>
 8018ebe:	f107 030c 	add.w	r3, r7, #12
 8018ec2:	2110      	movs	r1, #16
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7ff feb5 	bl	8018c34 <logs>
 8018eca:	200a      	movs	r0, #10
 8018ecc:	f7ff fe9e 	bl	8018c0c <logc>
}
 8018ed0:	bf00      	nop
 8018ed2:	3728      	adds	r7, #40	@ 0x28
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}
 8018ed8:	08025c90 	.word	0x08025c90
 8018edc:	08025c94 	.word	0x08025c94

08018ee0 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 8018ee0:	b480      	push	{r7}
 8018ee2:	b085      	sub	sp, #20
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 8018eea:	4b14      	ldr	r3, [pc, #80]	@ (8018f3c <mg_byte_reverse+0x5c>)
 8018eec:	881b      	ldrh	r3, [r3, #0]
 8018eee:	2bff      	cmp	r3, #255	@ 0xff
 8018ef0:	d81d      	bhi.n	8018f2e <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	3303      	adds	r3, #3
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	021b      	lsls	r3, r3, #8
 8018efa:	687a      	ldr	r2, [r7, #4]
 8018efc:	3202      	adds	r2, #2
 8018efe:	7812      	ldrb	r2, [r2, #0]
 8018f00:	4313      	orrs	r3, r2
 8018f02:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	3301      	adds	r3, #1
 8018f08:	781b      	ldrb	r3, [r3, #0]
 8018f0a:	021b      	lsls	r3, r3, #8
 8018f0c:	6879      	ldr	r1, [r7, #4]
 8018f0e:	7809      	ldrb	r1, [r1, #0]
 8018f10:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 8018f12:	4313      	orrs	r3, r2
 8018f14:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	68fa      	ldr	r2, [r7, #12]
 8018f1a:	601a      	str	r2, [r3, #0]
      buf += 4;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	3304      	adds	r3, #4
 8018f20:	607b      	str	r3, [r7, #4]
    } while (--longs);
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	3b01      	subs	r3, #1
 8018f26:	603b      	str	r3, [r7, #0]
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d1e1      	bne.n	8018ef2 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 8018f2e:	bf00      	nop
 8018f30:	3714      	adds	r7, #20
 8018f32:	46bd      	mov	sp, r7
 8018f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f38:	4770      	bx	lr
 8018f3a:	bf00      	nop
 8018f3c:	08025c98 	.word	0x08025c98

08018f40 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 8018f40:	b480      	push	{r7}
 8018f42:	b083      	sub	sp, #12
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8018f78 <mg_md5_init+0x38>)
 8018f4c:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	4a0a      	ldr	r2, [pc, #40]	@ (8018f7c <mg_md5_init+0x3c>)
 8018f52:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	4a0a      	ldr	r2, [pc, #40]	@ (8018f80 <mg_md5_init+0x40>)
 8018f58:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	4a09      	ldr	r2, [pc, #36]	@ (8018f84 <mg_md5_init+0x44>)
 8018f5e:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2200      	movs	r2, #0
 8018f64:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	615a      	str	r2, [r3, #20]
}
 8018f6c:	bf00      	nop
 8018f6e:	370c      	adds	r7, #12
 8018f70:	46bd      	mov	sp, r7
 8018f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f76:	4770      	bx	lr
 8018f78:	67452301 	.word	0x67452301
 8018f7c:	efcdab89 	.word	0xefcdab89
 8018f80:	98badcfe 	.word	0x98badcfe
 8018f84:	10325476 	.word	0x10325476

08018f88 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8018f88:	b480      	push	{r7}
 8018f8a:	b087      	sub	sp, #28
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	617b      	str	r3, [r7, #20]
  b = buf[1];
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	685b      	ldr	r3, [r3, #4]
 8018f9c:	613b      	str	r3, [r7, #16]
  c = buf[2];
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	689b      	ldr	r3, [r3, #8]
 8018fa2:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	68db      	ldr	r3, [r3, #12]
 8018fa8:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8018faa:	68fa      	ldr	r2, [r7, #12]
 8018fac:	68bb      	ldr	r3, [r7, #8]
 8018fae:	405a      	eors	r2, r3
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	401a      	ands	r2, r3
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	405a      	eors	r2, r3
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	441a      	add	r2, r3
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	441a      	add	r2, r3
 8018fc2:	4ba1      	ldr	r3, [pc, #644]	@ (8019248 <mg_md5_transform+0x2c0>)
 8018fc4:	4413      	add	r3, r2
 8018fc6:	617b      	str	r3, [r7, #20]
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018fce:	617b      	str	r3, [r7, #20]
 8018fd0:	697a      	ldr	r2, [r7, #20]
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	4413      	add	r3, r2
 8018fd6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 8018fd8:	693a      	ldr	r2, [r7, #16]
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	405a      	eors	r2, r3
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	401a      	ands	r2, r3
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	405a      	eors	r2, r3
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	3304      	adds	r3, #4
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	441a      	add	r2, r3
 8018fee:	68bb      	ldr	r3, [r7, #8]
 8018ff0:	441a      	add	r2, r3
 8018ff2:	4b96      	ldr	r3, [pc, #600]	@ (801924c <mg_md5_transform+0x2c4>)
 8018ff4:	4413      	add	r3, r2
 8018ff6:	60bb      	str	r3, [r7, #8]
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018ffe:	60bb      	str	r3, [r7, #8]
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	4413      	add	r3, r2
 8019006:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8019008:	697a      	ldr	r2, [r7, #20]
 801900a:	693b      	ldr	r3, [r7, #16]
 801900c:	405a      	eors	r2, r3
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	401a      	ands	r2, r3
 8019012:	693b      	ldr	r3, [r7, #16]
 8019014:	405a      	eors	r2, r3
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	3308      	adds	r3, #8
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	441a      	add	r2, r3
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	441a      	add	r2, r3
 8019022:	4b8b      	ldr	r3, [pc, #556]	@ (8019250 <mg_md5_transform+0x2c8>)
 8019024:	4413      	add	r3, r2
 8019026:	60fb      	str	r3, [r7, #12]
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801902e:	60fb      	str	r3, [r7, #12]
 8019030:	68fa      	ldr	r2, [r7, #12]
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	4413      	add	r3, r2
 8019036:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8019038:	68ba      	ldr	r2, [r7, #8]
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	405a      	eors	r2, r3
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	401a      	ands	r2, r3
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	405a      	eors	r2, r3
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	330c      	adds	r3, #12
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	441a      	add	r2, r3
 801904e:	693b      	ldr	r3, [r7, #16]
 8019050:	441a      	add	r2, r3
 8019052:	4b80      	ldr	r3, [pc, #512]	@ (8019254 <mg_md5_transform+0x2cc>)
 8019054:	4413      	add	r3, r2
 8019056:	613b      	str	r3, [r7, #16]
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801905e:	613b      	str	r3, [r7, #16]
 8019060:	693a      	ldr	r2, [r7, #16]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	4413      	add	r3, r2
 8019066:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 8019068:	68fa      	ldr	r2, [r7, #12]
 801906a:	68bb      	ldr	r3, [r7, #8]
 801906c:	405a      	eors	r2, r3
 801906e:	693b      	ldr	r3, [r7, #16]
 8019070:	401a      	ands	r2, r3
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	405a      	eors	r2, r3
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	3310      	adds	r3, #16
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	441a      	add	r2, r3
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	441a      	add	r2, r3
 8019082:	4b75      	ldr	r3, [pc, #468]	@ (8019258 <mg_md5_transform+0x2d0>)
 8019084:	4413      	add	r3, r2
 8019086:	617b      	str	r3, [r7, #20]
 8019088:	697b      	ldr	r3, [r7, #20]
 801908a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801908e:	617b      	str	r3, [r7, #20]
 8019090:	697a      	ldr	r2, [r7, #20]
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	4413      	add	r3, r2
 8019096:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8019098:	693a      	ldr	r2, [r7, #16]
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	405a      	eors	r2, r3
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	401a      	ands	r2, r3
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	405a      	eors	r2, r3
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	3314      	adds	r3, #20
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	441a      	add	r2, r3
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	441a      	add	r2, r3
 80190b2:	4b6a      	ldr	r3, [pc, #424]	@ (801925c <mg_md5_transform+0x2d4>)
 80190b4:	4413      	add	r3, r2
 80190b6:	60bb      	str	r3, [r7, #8]
 80190b8:	68bb      	ldr	r3, [r7, #8]
 80190ba:	ea4f 5333 	mov.w	r3, r3, ror #20
 80190be:	60bb      	str	r3, [r7, #8]
 80190c0:	68ba      	ldr	r2, [r7, #8]
 80190c2:	697b      	ldr	r3, [r7, #20]
 80190c4:	4413      	add	r3, r2
 80190c6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 80190c8:	697a      	ldr	r2, [r7, #20]
 80190ca:	693b      	ldr	r3, [r7, #16]
 80190cc:	405a      	eors	r2, r3
 80190ce:	68bb      	ldr	r3, [r7, #8]
 80190d0:	401a      	ands	r2, r3
 80190d2:	693b      	ldr	r3, [r7, #16]
 80190d4:	405a      	eors	r2, r3
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	3318      	adds	r3, #24
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	441a      	add	r2, r3
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	441a      	add	r2, r3
 80190e2:	4b5f      	ldr	r3, [pc, #380]	@ (8019260 <mg_md5_transform+0x2d8>)
 80190e4:	4413      	add	r3, r2
 80190e6:	60fb      	str	r3, [r7, #12]
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80190ee:	60fb      	str	r3, [r7, #12]
 80190f0:	68fa      	ldr	r2, [r7, #12]
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	4413      	add	r3, r2
 80190f6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 80190f8:	68ba      	ldr	r2, [r7, #8]
 80190fa:	697b      	ldr	r3, [r7, #20]
 80190fc:	405a      	eors	r2, r3
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	401a      	ands	r2, r3
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	405a      	eors	r2, r3
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	331c      	adds	r3, #28
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	441a      	add	r2, r3
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	441a      	add	r2, r3
 8019112:	4b54      	ldr	r3, [pc, #336]	@ (8019264 <mg_md5_transform+0x2dc>)
 8019114:	4413      	add	r3, r2
 8019116:	613b      	str	r3, [r7, #16]
 8019118:	693b      	ldr	r3, [r7, #16]
 801911a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801911e:	613b      	str	r3, [r7, #16]
 8019120:	693a      	ldr	r2, [r7, #16]
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	4413      	add	r3, r2
 8019126:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 8019128:	68fa      	ldr	r2, [r7, #12]
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	405a      	eors	r2, r3
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	401a      	ands	r2, r3
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	405a      	eors	r2, r3
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	3320      	adds	r3, #32
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	441a      	add	r2, r3
 801913e:	697b      	ldr	r3, [r7, #20]
 8019140:	441a      	add	r2, r3
 8019142:	4b49      	ldr	r3, [pc, #292]	@ (8019268 <mg_md5_transform+0x2e0>)
 8019144:	4413      	add	r3, r2
 8019146:	617b      	str	r3, [r7, #20]
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801914e:	617b      	str	r3, [r7, #20]
 8019150:	697a      	ldr	r2, [r7, #20]
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	4413      	add	r3, r2
 8019156:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 8019158:	693a      	ldr	r2, [r7, #16]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	405a      	eors	r2, r3
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	401a      	ands	r2, r3
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	405a      	eors	r2, r3
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	3324      	adds	r3, #36	@ 0x24
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	441a      	add	r2, r3
 801916e:	68bb      	ldr	r3, [r7, #8]
 8019170:	441a      	add	r2, r3
 8019172:	4b3e      	ldr	r3, [pc, #248]	@ (801926c <mg_md5_transform+0x2e4>)
 8019174:	4413      	add	r3, r2
 8019176:	60bb      	str	r3, [r7, #8]
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801917e:	60bb      	str	r3, [r7, #8]
 8019180:	68ba      	ldr	r2, [r7, #8]
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	4413      	add	r3, r2
 8019186:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8019188:	697a      	ldr	r2, [r7, #20]
 801918a:	693b      	ldr	r3, [r7, #16]
 801918c:	405a      	eors	r2, r3
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	401a      	ands	r2, r3
 8019192:	693b      	ldr	r3, [r7, #16]
 8019194:	405a      	eors	r2, r3
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	3328      	adds	r3, #40	@ 0x28
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	441a      	add	r2, r3
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	4413      	add	r3, r2
 80191a2:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 80191a6:	3b4f      	subs	r3, #79	@ 0x4f
 80191a8:	60fb      	str	r3, [r7, #12]
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80191b0:	60fb      	str	r3, [r7, #12]
 80191b2:	68fa      	ldr	r2, [r7, #12]
 80191b4:	68bb      	ldr	r3, [r7, #8]
 80191b6:	4413      	add	r3, r2
 80191b8:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 80191ba:	68ba      	ldr	r2, [r7, #8]
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	405a      	eors	r2, r3
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	401a      	ands	r2, r3
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	405a      	eors	r2, r3
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	332c      	adds	r3, #44	@ 0x2c
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	441a      	add	r2, r3
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	441a      	add	r2, r3
 80191d4:	4b26      	ldr	r3, [pc, #152]	@ (8019270 <mg_md5_transform+0x2e8>)
 80191d6:	4413      	add	r3, r2
 80191d8:	613b      	str	r3, [r7, #16]
 80191da:	693b      	ldr	r3, [r7, #16]
 80191dc:	ea4f 23b3 	mov.w	r3, r3, ror #10
 80191e0:	613b      	str	r3, [r7, #16]
 80191e2:	693a      	ldr	r2, [r7, #16]
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	4413      	add	r3, r2
 80191e8:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 80191ea:	68fa      	ldr	r2, [r7, #12]
 80191ec:	68bb      	ldr	r3, [r7, #8]
 80191ee:	405a      	eors	r2, r3
 80191f0:	693b      	ldr	r3, [r7, #16]
 80191f2:	401a      	ands	r2, r3
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	405a      	eors	r2, r3
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	3330      	adds	r3, #48	@ 0x30
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	441a      	add	r2, r3
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	441a      	add	r2, r3
 8019204:	4b1b      	ldr	r3, [pc, #108]	@ (8019274 <mg_md5_transform+0x2ec>)
 8019206:	4413      	add	r3, r2
 8019208:	617b      	str	r3, [r7, #20]
 801920a:	697b      	ldr	r3, [r7, #20]
 801920c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019210:	617b      	str	r3, [r7, #20]
 8019212:	697a      	ldr	r2, [r7, #20]
 8019214:	693b      	ldr	r3, [r7, #16]
 8019216:	4413      	add	r3, r2
 8019218:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801921a:	693a      	ldr	r2, [r7, #16]
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	405a      	eors	r2, r3
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	401a      	ands	r2, r3
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	405a      	eors	r2, r3
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	3334      	adds	r3, #52	@ 0x34
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	441a      	add	r2, r3
 8019230:	68bb      	ldr	r3, [r7, #8]
 8019232:	441a      	add	r2, r3
 8019234:	4b10      	ldr	r3, [pc, #64]	@ (8019278 <mg_md5_transform+0x2f0>)
 8019236:	4413      	add	r3, r2
 8019238:	60bb      	str	r3, [r7, #8]
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019240:	60bb      	str	r3, [r7, #8]
 8019242:	68ba      	ldr	r2, [r7, #8]
 8019244:	e01a      	b.n	801927c <mg_md5_transform+0x2f4>
 8019246:	bf00      	nop
 8019248:	d76aa478 	.word	0xd76aa478
 801924c:	e8c7b756 	.word	0xe8c7b756
 8019250:	242070db 	.word	0x242070db
 8019254:	c1bdceee 	.word	0xc1bdceee
 8019258:	f57c0faf 	.word	0xf57c0faf
 801925c:	4787c62a 	.word	0x4787c62a
 8019260:	a8304613 	.word	0xa8304613
 8019264:	fd469501 	.word	0xfd469501
 8019268:	698098d8 	.word	0x698098d8
 801926c:	8b44f7af 	.word	0x8b44f7af
 8019270:	895cd7be 	.word	0x895cd7be
 8019274:	6b901122 	.word	0x6b901122
 8019278:	fd987193 	.word	0xfd987193
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	4413      	add	r3, r2
 8019280:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8019282:	697a      	ldr	r2, [r7, #20]
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	405a      	eors	r2, r3
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	401a      	ands	r2, r3
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	405a      	eors	r2, r3
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	3338      	adds	r3, #56	@ 0x38
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	441a      	add	r2, r3
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	441a      	add	r2, r3
 801929c:	4ba0      	ldr	r3, [pc, #640]	@ (8019520 <mg_md5_transform+0x598>)
 801929e:	4413      	add	r3, r2
 80192a0:	60fb      	str	r3, [r7, #12]
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80192a8:	60fb      	str	r3, [r7, #12]
 80192aa:	68fa      	ldr	r2, [r7, #12]
 80192ac:	68bb      	ldr	r3, [r7, #8]
 80192ae:	4413      	add	r3, r2
 80192b0:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 80192b2:	68ba      	ldr	r2, [r7, #8]
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	405a      	eors	r2, r3
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	401a      	ands	r2, r3
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	405a      	eors	r2, r3
 80192c0:	683b      	ldr	r3, [r7, #0]
 80192c2:	333c      	adds	r3, #60	@ 0x3c
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	441a      	add	r2, r3
 80192c8:	693b      	ldr	r3, [r7, #16]
 80192ca:	441a      	add	r2, r3
 80192cc:	4b95      	ldr	r3, [pc, #596]	@ (8019524 <mg_md5_transform+0x59c>)
 80192ce:	4413      	add	r3, r2
 80192d0:	613b      	str	r3, [r7, #16]
 80192d2:	693b      	ldr	r3, [r7, #16]
 80192d4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 80192d8:	613b      	str	r3, [r7, #16]
 80192da:	693a      	ldr	r2, [r7, #16]
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	4413      	add	r3, r2
 80192e0:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 80192e2:	693a      	ldr	r2, [r7, #16]
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	405a      	eors	r2, r3
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	401a      	ands	r2, r3
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	405a      	eors	r2, r3
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	3304      	adds	r3, #4
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	441a      	add	r2, r3
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	441a      	add	r2, r3
 80192fc:	4b8a      	ldr	r3, [pc, #552]	@ (8019528 <mg_md5_transform+0x5a0>)
 80192fe:	4413      	add	r3, r2
 8019300:	617b      	str	r3, [r7, #20]
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8019308:	617b      	str	r3, [r7, #20]
 801930a:	697a      	ldr	r2, [r7, #20]
 801930c:	693b      	ldr	r3, [r7, #16]
 801930e:	4413      	add	r3, r2
 8019310:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 8019312:	697a      	ldr	r2, [r7, #20]
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	405a      	eors	r2, r3
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	401a      	ands	r2, r3
 801931c:	693b      	ldr	r3, [r7, #16]
 801931e:	405a      	eors	r2, r3
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	3318      	adds	r3, #24
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	441a      	add	r2, r3
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	441a      	add	r2, r3
 801932c:	4b7f      	ldr	r3, [pc, #508]	@ (801952c <mg_md5_transform+0x5a4>)
 801932e:	4413      	add	r3, r2
 8019330:	60bb      	str	r3, [r7, #8]
 8019332:	68bb      	ldr	r3, [r7, #8]
 8019334:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8019338:	60bb      	str	r3, [r7, #8]
 801933a:	68ba      	ldr	r2, [r7, #8]
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	4413      	add	r3, r2
 8019340:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8019342:	68ba      	ldr	r2, [r7, #8]
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	405a      	eors	r2, r3
 8019348:	693b      	ldr	r3, [r7, #16]
 801934a:	401a      	ands	r2, r3
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	405a      	eors	r2, r3
 8019350:	683b      	ldr	r3, [r7, #0]
 8019352:	332c      	adds	r3, #44	@ 0x2c
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	441a      	add	r2, r3
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	441a      	add	r2, r3
 801935c:	4b74      	ldr	r3, [pc, #464]	@ (8019530 <mg_md5_transform+0x5a8>)
 801935e:	4413      	add	r3, r2
 8019360:	60fb      	str	r3, [r7, #12]
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8019368:	60fb      	str	r3, [r7, #12]
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	68bb      	ldr	r3, [r7, #8]
 801936e:	4413      	add	r3, r2
 8019370:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8019372:	68fa      	ldr	r2, [r7, #12]
 8019374:	68bb      	ldr	r3, [r7, #8]
 8019376:	405a      	eors	r2, r3
 8019378:	697b      	ldr	r3, [r7, #20]
 801937a:	401a      	ands	r2, r3
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	405a      	eors	r2, r3
 8019380:	683b      	ldr	r3, [r7, #0]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	441a      	add	r2, r3
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	441a      	add	r2, r3
 801938a:	4b6a      	ldr	r3, [pc, #424]	@ (8019534 <mg_md5_transform+0x5ac>)
 801938c:	4413      	add	r3, r2
 801938e:	613b      	str	r3, [r7, #16]
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	ea4f 3333 	mov.w	r3, r3, ror #12
 8019396:	613b      	str	r3, [r7, #16]
 8019398:	693a      	ldr	r2, [r7, #16]
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	4413      	add	r3, r2
 801939e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 80193a0:	693a      	ldr	r2, [r7, #16]
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	405a      	eors	r2, r3
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	401a      	ands	r2, r3
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	405a      	eors	r2, r3
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	3314      	adds	r3, #20
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	441a      	add	r2, r3
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	441a      	add	r2, r3
 80193ba:	4b5f      	ldr	r3, [pc, #380]	@ (8019538 <mg_md5_transform+0x5b0>)
 80193bc:	4413      	add	r3, r2
 80193be:	617b      	str	r3, [r7, #20]
 80193c0:	697b      	ldr	r3, [r7, #20]
 80193c2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80193c6:	617b      	str	r3, [r7, #20]
 80193c8:	697a      	ldr	r2, [r7, #20]
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	4413      	add	r3, r2
 80193ce:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 80193d0:	697a      	ldr	r2, [r7, #20]
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	405a      	eors	r2, r3
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	401a      	ands	r2, r3
 80193da:	693b      	ldr	r3, [r7, #16]
 80193dc:	405a      	eors	r2, r3
 80193de:	683b      	ldr	r3, [r7, #0]
 80193e0:	3328      	adds	r3, #40	@ 0x28
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	441a      	add	r2, r3
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	441a      	add	r2, r3
 80193ea:	4b54      	ldr	r3, [pc, #336]	@ (801953c <mg_md5_transform+0x5b4>)
 80193ec:	4413      	add	r3, r2
 80193ee:	60bb      	str	r3, [r7, #8]
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80193f6:	60bb      	str	r3, [r7, #8]
 80193f8:	68ba      	ldr	r2, [r7, #8]
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	4413      	add	r3, r2
 80193fe:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 8019400:	68ba      	ldr	r2, [r7, #8]
 8019402:	697b      	ldr	r3, [r7, #20]
 8019404:	405a      	eors	r2, r3
 8019406:	693b      	ldr	r3, [r7, #16]
 8019408:	401a      	ands	r2, r3
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	405a      	eors	r2, r3
 801940e:	683b      	ldr	r3, [r7, #0]
 8019410:	333c      	adds	r3, #60	@ 0x3c
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	441a      	add	r2, r3
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	441a      	add	r2, r3
 801941a:	4b49      	ldr	r3, [pc, #292]	@ (8019540 <mg_md5_transform+0x5b8>)
 801941c:	4413      	add	r3, r2
 801941e:	60fb      	str	r3, [r7, #12]
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8019426:	60fb      	str	r3, [r7, #12]
 8019428:	68fa      	ldr	r2, [r7, #12]
 801942a:	68bb      	ldr	r3, [r7, #8]
 801942c:	4413      	add	r3, r2
 801942e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8019430:	68fa      	ldr	r2, [r7, #12]
 8019432:	68bb      	ldr	r3, [r7, #8]
 8019434:	405a      	eors	r2, r3
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	401a      	ands	r2, r3
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	405a      	eors	r2, r3
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	3310      	adds	r3, #16
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	441a      	add	r2, r3
 8019446:	693b      	ldr	r3, [r7, #16]
 8019448:	441a      	add	r2, r3
 801944a:	4b3e      	ldr	r3, [pc, #248]	@ (8019544 <mg_md5_transform+0x5bc>)
 801944c:	4413      	add	r3, r2
 801944e:	613b      	str	r3, [r7, #16]
 8019450:	693b      	ldr	r3, [r7, #16]
 8019452:	ea4f 3333 	mov.w	r3, r3, ror #12
 8019456:	613b      	str	r3, [r7, #16]
 8019458:	693a      	ldr	r2, [r7, #16]
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	4413      	add	r3, r2
 801945e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8019460:	693a      	ldr	r2, [r7, #16]
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	405a      	eors	r2, r3
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	401a      	ands	r2, r3
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	405a      	eors	r2, r3
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	3324      	adds	r3, #36	@ 0x24
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	441a      	add	r2, r3
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	441a      	add	r2, r3
 801947a:	4b33      	ldr	r3, [pc, #204]	@ (8019548 <mg_md5_transform+0x5c0>)
 801947c:	4413      	add	r3, r2
 801947e:	617b      	str	r3, [r7, #20]
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8019486:	617b      	str	r3, [r7, #20]
 8019488:	697a      	ldr	r2, [r7, #20]
 801948a:	693b      	ldr	r3, [r7, #16]
 801948c:	4413      	add	r3, r2
 801948e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8019490:	697a      	ldr	r2, [r7, #20]
 8019492:	693b      	ldr	r3, [r7, #16]
 8019494:	405a      	eors	r2, r3
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	401a      	ands	r2, r3
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	405a      	eors	r2, r3
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	3338      	adds	r3, #56	@ 0x38
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	441a      	add	r2, r3
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	441a      	add	r2, r3
 80194aa:	4b28      	ldr	r3, [pc, #160]	@ (801954c <mg_md5_transform+0x5c4>)
 80194ac:	4413      	add	r3, r2
 80194ae:	60bb      	str	r3, [r7, #8]
 80194b0:	68bb      	ldr	r3, [r7, #8]
 80194b2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80194b6:	60bb      	str	r3, [r7, #8]
 80194b8:	68ba      	ldr	r2, [r7, #8]
 80194ba:	697b      	ldr	r3, [r7, #20]
 80194bc:	4413      	add	r3, r2
 80194be:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 80194c0:	68ba      	ldr	r2, [r7, #8]
 80194c2:	697b      	ldr	r3, [r7, #20]
 80194c4:	405a      	eors	r2, r3
 80194c6:	693b      	ldr	r3, [r7, #16]
 80194c8:	401a      	ands	r2, r3
 80194ca:	697b      	ldr	r3, [r7, #20]
 80194cc:	405a      	eors	r2, r3
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	330c      	adds	r3, #12
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	441a      	add	r2, r3
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	441a      	add	r2, r3
 80194da:	4b1d      	ldr	r3, [pc, #116]	@ (8019550 <mg_md5_transform+0x5c8>)
 80194dc:	4413      	add	r3, r2
 80194de:	60fb      	str	r3, [r7, #12]
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80194e6:	60fb      	str	r3, [r7, #12]
 80194e8:	68fa      	ldr	r2, [r7, #12]
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	4413      	add	r3, r2
 80194ee:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 80194f0:	68fa      	ldr	r2, [r7, #12]
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	405a      	eors	r2, r3
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	401a      	ands	r2, r3
 80194fa:	68bb      	ldr	r3, [r7, #8]
 80194fc:	405a      	eors	r2, r3
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	3320      	adds	r3, #32
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	441a      	add	r2, r3
 8019506:	693b      	ldr	r3, [r7, #16]
 8019508:	441a      	add	r2, r3
 801950a:	4b12      	ldr	r3, [pc, #72]	@ (8019554 <mg_md5_transform+0x5cc>)
 801950c:	4413      	add	r3, r2
 801950e:	613b      	str	r3, [r7, #16]
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	ea4f 3333 	mov.w	r3, r3, ror #12
 8019516:	613b      	str	r3, [r7, #16]
 8019518:	693a      	ldr	r2, [r7, #16]
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	e01c      	b.n	8019558 <mg_md5_transform+0x5d0>
 801951e:	bf00      	nop
 8019520:	a679438e 	.word	0xa679438e
 8019524:	49b40821 	.word	0x49b40821
 8019528:	f61e2562 	.word	0xf61e2562
 801952c:	c040b340 	.word	0xc040b340
 8019530:	265e5a51 	.word	0x265e5a51
 8019534:	e9b6c7aa 	.word	0xe9b6c7aa
 8019538:	d62f105d 	.word	0xd62f105d
 801953c:	02441453 	.word	0x02441453
 8019540:	d8a1e681 	.word	0xd8a1e681
 8019544:	e7d3fbc8 	.word	0xe7d3fbc8
 8019548:	21e1cde6 	.word	0x21e1cde6
 801954c:	c33707d6 	.word	0xc33707d6
 8019550:	f4d50d87 	.word	0xf4d50d87
 8019554:	455a14ed 	.word	0x455a14ed
 8019558:	4413      	add	r3, r2
 801955a:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801955c:	693a      	ldr	r2, [r7, #16]
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	405a      	eors	r2, r3
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	401a      	ands	r2, r3
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	405a      	eors	r2, r3
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	3334      	adds	r3, #52	@ 0x34
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	441a      	add	r2, r3
 8019572:	697b      	ldr	r3, [r7, #20]
 8019574:	441a      	add	r2, r3
 8019576:	4ba1      	ldr	r3, [pc, #644]	@ (80197fc <mg_md5_transform+0x874>)
 8019578:	4413      	add	r3, r2
 801957a:	617b      	str	r3, [r7, #20]
 801957c:	697b      	ldr	r3, [r7, #20]
 801957e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8019582:	617b      	str	r3, [r7, #20]
 8019584:	697a      	ldr	r2, [r7, #20]
 8019586:	693b      	ldr	r3, [r7, #16]
 8019588:	4413      	add	r3, r2
 801958a:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801958c:	697a      	ldr	r2, [r7, #20]
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	405a      	eors	r2, r3
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	401a      	ands	r2, r3
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	405a      	eors	r2, r3
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	3308      	adds	r3, #8
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	441a      	add	r2, r3
 80195a2:	68bb      	ldr	r3, [r7, #8]
 80195a4:	441a      	add	r2, r3
 80195a6:	4b96      	ldr	r3, [pc, #600]	@ (8019800 <mg_md5_transform+0x878>)
 80195a8:	4413      	add	r3, r2
 80195aa:	60bb      	str	r3, [r7, #8]
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80195b2:	60bb      	str	r3, [r7, #8]
 80195b4:	68ba      	ldr	r2, [r7, #8]
 80195b6:	697b      	ldr	r3, [r7, #20]
 80195b8:	4413      	add	r3, r2
 80195ba:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 80195bc:	68ba      	ldr	r2, [r7, #8]
 80195be:	697b      	ldr	r3, [r7, #20]
 80195c0:	405a      	eors	r2, r3
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	401a      	ands	r2, r3
 80195c6:	697b      	ldr	r3, [r7, #20]
 80195c8:	405a      	eors	r2, r3
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	331c      	adds	r3, #28
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	441a      	add	r2, r3
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	441a      	add	r2, r3
 80195d6:	4b8b      	ldr	r3, [pc, #556]	@ (8019804 <mg_md5_transform+0x87c>)
 80195d8:	4413      	add	r3, r2
 80195da:	60fb      	str	r3, [r7, #12]
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80195e2:	60fb      	str	r3, [r7, #12]
 80195e4:	68fa      	ldr	r2, [r7, #12]
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	4413      	add	r3, r2
 80195ea:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 80195ec:	68fa      	ldr	r2, [r7, #12]
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	405a      	eors	r2, r3
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	401a      	ands	r2, r3
 80195f6:	68bb      	ldr	r3, [r7, #8]
 80195f8:	405a      	eors	r2, r3
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	3330      	adds	r3, #48	@ 0x30
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	441a      	add	r2, r3
 8019602:	693b      	ldr	r3, [r7, #16]
 8019604:	441a      	add	r2, r3
 8019606:	4b80      	ldr	r3, [pc, #512]	@ (8019808 <mg_md5_transform+0x880>)
 8019608:	4413      	add	r3, r2
 801960a:	613b      	str	r3, [r7, #16]
 801960c:	693b      	ldr	r3, [r7, #16]
 801960e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8019612:	613b      	str	r3, [r7, #16]
 8019614:	693a      	ldr	r2, [r7, #16]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	4413      	add	r3, r2
 801961a:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801961c:	693a      	ldr	r2, [r7, #16]
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	405a      	eors	r2, r3
 8019622:	68bb      	ldr	r3, [r7, #8]
 8019624:	405a      	eors	r2, r3
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	3314      	adds	r3, #20
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	441a      	add	r2, r3
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	4413      	add	r3, r2
 8019632:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8019636:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801963a:	617b      	str	r3, [r7, #20]
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	ea4f 7333 	mov.w	r3, r3, ror #28
 8019642:	617b      	str	r3, [r7, #20]
 8019644:	697a      	ldr	r2, [r7, #20]
 8019646:	693b      	ldr	r3, [r7, #16]
 8019648:	4413      	add	r3, r2
 801964a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801964c:	697a      	ldr	r2, [r7, #20]
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	405a      	eors	r2, r3
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	405a      	eors	r2, r3
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	3320      	adds	r3, #32
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	441a      	add	r2, r3
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	441a      	add	r2, r3
 8019662:	4b6a      	ldr	r3, [pc, #424]	@ (801980c <mg_md5_transform+0x884>)
 8019664:	4413      	add	r3, r2
 8019666:	60bb      	str	r3, [r7, #8]
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	ea4f 5373 	mov.w	r3, r3, ror #21
 801966e:	60bb      	str	r3, [r7, #8]
 8019670:	68ba      	ldr	r2, [r7, #8]
 8019672:	697b      	ldr	r3, [r7, #20]
 8019674:	4413      	add	r3, r2
 8019676:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8019678:	68ba      	ldr	r2, [r7, #8]
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	405a      	eors	r2, r3
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	405a      	eors	r2, r3
 8019682:	683b      	ldr	r3, [r7, #0]
 8019684:	332c      	adds	r3, #44	@ 0x2c
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	441a      	add	r2, r3
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	441a      	add	r2, r3
 801968e:	4b60      	ldr	r3, [pc, #384]	@ (8019810 <mg_md5_transform+0x888>)
 8019690:	4413      	add	r3, r2
 8019692:	60fb      	str	r3, [r7, #12]
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	ea4f 4333 	mov.w	r3, r3, ror #16
 801969a:	60fb      	str	r3, [r7, #12]
 801969c:	68fa      	ldr	r2, [r7, #12]
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	4413      	add	r3, r2
 80196a2:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	405a      	eors	r2, r3
 80196aa:	697b      	ldr	r3, [r7, #20]
 80196ac:	405a      	eors	r2, r3
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	3338      	adds	r3, #56	@ 0x38
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	441a      	add	r2, r3
 80196b6:	693b      	ldr	r3, [r7, #16]
 80196b8:	441a      	add	r2, r3
 80196ba:	4b56      	ldr	r3, [pc, #344]	@ (8019814 <mg_md5_transform+0x88c>)
 80196bc:	4413      	add	r3, r2
 80196be:	613b      	str	r3, [r7, #16]
 80196c0:	693b      	ldr	r3, [r7, #16]
 80196c2:	ea4f 2373 	mov.w	r3, r3, ror #9
 80196c6:	613b      	str	r3, [r7, #16]
 80196c8:	693a      	ldr	r2, [r7, #16]
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	4413      	add	r3, r2
 80196ce:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 80196d0:	693a      	ldr	r2, [r7, #16]
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	405a      	eors	r2, r3
 80196d6:	68bb      	ldr	r3, [r7, #8]
 80196d8:	405a      	eors	r2, r3
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	3304      	adds	r3, #4
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	441a      	add	r2, r3
 80196e2:	697b      	ldr	r3, [r7, #20]
 80196e4:	441a      	add	r2, r3
 80196e6:	4b4c      	ldr	r3, [pc, #304]	@ (8019818 <mg_md5_transform+0x890>)
 80196e8:	4413      	add	r3, r2
 80196ea:	617b      	str	r3, [r7, #20]
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	ea4f 7333 	mov.w	r3, r3, ror #28
 80196f2:	617b      	str	r3, [r7, #20]
 80196f4:	697a      	ldr	r2, [r7, #20]
 80196f6:	693b      	ldr	r3, [r7, #16]
 80196f8:	4413      	add	r3, r2
 80196fa:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 80196fc:	697a      	ldr	r2, [r7, #20]
 80196fe:	693b      	ldr	r3, [r7, #16]
 8019700:	405a      	eors	r2, r3
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	405a      	eors	r2, r3
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	3310      	adds	r3, #16
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	441a      	add	r2, r3
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	441a      	add	r2, r3
 8019712:	4b42      	ldr	r3, [pc, #264]	@ (801981c <mg_md5_transform+0x894>)
 8019714:	4413      	add	r3, r2
 8019716:	60bb      	str	r3, [r7, #8]
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	ea4f 5373 	mov.w	r3, r3, ror #21
 801971e:	60bb      	str	r3, [r7, #8]
 8019720:	68ba      	ldr	r2, [r7, #8]
 8019722:	697b      	ldr	r3, [r7, #20]
 8019724:	4413      	add	r3, r2
 8019726:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8019728:	68ba      	ldr	r2, [r7, #8]
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	405a      	eors	r2, r3
 801972e:	693b      	ldr	r3, [r7, #16]
 8019730:	405a      	eors	r2, r3
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	331c      	adds	r3, #28
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	441a      	add	r2, r3
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	441a      	add	r2, r3
 801973e:	4b38      	ldr	r3, [pc, #224]	@ (8019820 <mg_md5_transform+0x898>)
 8019740:	4413      	add	r3, r2
 8019742:	60fb      	str	r3, [r7, #12]
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	ea4f 4333 	mov.w	r3, r3, ror #16
 801974a:	60fb      	str	r3, [r7, #12]
 801974c:	68fa      	ldr	r2, [r7, #12]
 801974e:	68bb      	ldr	r3, [r7, #8]
 8019750:	4413      	add	r3, r2
 8019752:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8019754:	68fa      	ldr	r2, [r7, #12]
 8019756:	68bb      	ldr	r3, [r7, #8]
 8019758:	405a      	eors	r2, r3
 801975a:	697b      	ldr	r3, [r7, #20]
 801975c:	405a      	eors	r2, r3
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	3328      	adds	r3, #40	@ 0x28
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	441a      	add	r2, r3
 8019766:	693b      	ldr	r3, [r7, #16]
 8019768:	441a      	add	r2, r3
 801976a:	4b2e      	ldr	r3, [pc, #184]	@ (8019824 <mg_md5_transform+0x89c>)
 801976c:	4413      	add	r3, r2
 801976e:	613b      	str	r3, [r7, #16]
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	ea4f 2373 	mov.w	r3, r3, ror #9
 8019776:	613b      	str	r3, [r7, #16]
 8019778:	693a      	ldr	r2, [r7, #16]
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	4413      	add	r3, r2
 801977e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8019780:	693a      	ldr	r2, [r7, #16]
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	405a      	eors	r2, r3
 8019786:	68bb      	ldr	r3, [r7, #8]
 8019788:	405a      	eors	r2, r3
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	3334      	adds	r3, #52	@ 0x34
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	441a      	add	r2, r3
 8019792:	697b      	ldr	r3, [r7, #20]
 8019794:	441a      	add	r2, r3
 8019796:	4b24      	ldr	r3, [pc, #144]	@ (8019828 <mg_md5_transform+0x8a0>)
 8019798:	4413      	add	r3, r2
 801979a:	617b      	str	r3, [r7, #20]
 801979c:	697b      	ldr	r3, [r7, #20]
 801979e:	ea4f 7333 	mov.w	r3, r3, ror #28
 80197a2:	617b      	str	r3, [r7, #20]
 80197a4:	697a      	ldr	r2, [r7, #20]
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	4413      	add	r3, r2
 80197aa:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 80197ac:	697a      	ldr	r2, [r7, #20]
 80197ae:	693b      	ldr	r3, [r7, #16]
 80197b0:	405a      	eors	r2, r3
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	405a      	eors	r2, r3
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	441a      	add	r2, r3
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	441a      	add	r2, r3
 80197c0:	4b1a      	ldr	r3, [pc, #104]	@ (801982c <mg_md5_transform+0x8a4>)
 80197c2:	4413      	add	r3, r2
 80197c4:	60bb      	str	r3, [r7, #8]
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	ea4f 5373 	mov.w	r3, r3, ror #21
 80197cc:	60bb      	str	r3, [r7, #8]
 80197ce:	68ba      	ldr	r2, [r7, #8]
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	4413      	add	r3, r2
 80197d4:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 80197d6:	68ba      	ldr	r2, [r7, #8]
 80197d8:	697b      	ldr	r3, [r7, #20]
 80197da:	405a      	eors	r2, r3
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	405a      	eors	r2, r3
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	330c      	adds	r3, #12
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	441a      	add	r2, r3
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	441a      	add	r2, r3
 80197ec:	4b10      	ldr	r3, [pc, #64]	@ (8019830 <mg_md5_transform+0x8a8>)
 80197ee:	4413      	add	r3, r2
 80197f0:	60fb      	str	r3, [r7, #12]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80197f8:	e01c      	b.n	8019834 <mg_md5_transform+0x8ac>
 80197fa:	bf00      	nop
 80197fc:	a9e3e905 	.word	0xa9e3e905
 8019800:	fcefa3f8 	.word	0xfcefa3f8
 8019804:	676f02d9 	.word	0x676f02d9
 8019808:	8d2a4c8a 	.word	0x8d2a4c8a
 801980c:	8771f681 	.word	0x8771f681
 8019810:	6d9d6122 	.word	0x6d9d6122
 8019814:	fde5380c 	.word	0xfde5380c
 8019818:	a4beea44 	.word	0xa4beea44
 801981c:	4bdecfa9 	.word	0x4bdecfa9
 8019820:	f6bb4b60 	.word	0xf6bb4b60
 8019824:	bebfbc70 	.word	0xbebfbc70
 8019828:	289b7ec6 	.word	0x289b7ec6
 801982c:	eaa127fa 	.word	0xeaa127fa
 8019830:	d4ef3085 	.word	0xd4ef3085
 8019834:	60fb      	str	r3, [r7, #12]
 8019836:	68fa      	ldr	r2, [r7, #12]
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	4413      	add	r3, r2
 801983c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801983e:	68fa      	ldr	r2, [r7, #12]
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	405a      	eors	r2, r3
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	405a      	eors	r2, r3
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	3318      	adds	r3, #24
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	441a      	add	r2, r3
 8019850:	693b      	ldr	r3, [r7, #16]
 8019852:	441a      	add	r2, r3
 8019854:	4ba1      	ldr	r3, [pc, #644]	@ (8019adc <mg_md5_transform+0xb54>)
 8019856:	4413      	add	r3, r2
 8019858:	613b      	str	r3, [r7, #16]
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	ea4f 2373 	mov.w	r3, r3, ror #9
 8019860:	613b      	str	r3, [r7, #16]
 8019862:	693a      	ldr	r2, [r7, #16]
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	4413      	add	r3, r2
 8019868:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801986a:	693a      	ldr	r2, [r7, #16]
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	405a      	eors	r2, r3
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	405a      	eors	r2, r3
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	3324      	adds	r3, #36	@ 0x24
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	441a      	add	r2, r3
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	441a      	add	r2, r3
 8019880:	4b97      	ldr	r3, [pc, #604]	@ (8019ae0 <mg_md5_transform+0xb58>)
 8019882:	4413      	add	r3, r2
 8019884:	617b      	str	r3, [r7, #20]
 8019886:	697b      	ldr	r3, [r7, #20]
 8019888:	ea4f 7333 	mov.w	r3, r3, ror #28
 801988c:	617b      	str	r3, [r7, #20]
 801988e:	697a      	ldr	r2, [r7, #20]
 8019890:	693b      	ldr	r3, [r7, #16]
 8019892:	4413      	add	r3, r2
 8019894:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8019896:	697a      	ldr	r2, [r7, #20]
 8019898:	693b      	ldr	r3, [r7, #16]
 801989a:	405a      	eors	r2, r3
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	405a      	eors	r2, r3
 80198a0:	683b      	ldr	r3, [r7, #0]
 80198a2:	3330      	adds	r3, #48	@ 0x30
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	441a      	add	r2, r3
 80198a8:	68bb      	ldr	r3, [r7, #8]
 80198aa:	441a      	add	r2, r3
 80198ac:	4b8d      	ldr	r3, [pc, #564]	@ (8019ae4 <mg_md5_transform+0xb5c>)
 80198ae:	4413      	add	r3, r2
 80198b0:	60bb      	str	r3, [r7, #8]
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	ea4f 5373 	mov.w	r3, r3, ror #21
 80198b8:	60bb      	str	r3, [r7, #8]
 80198ba:	68ba      	ldr	r2, [r7, #8]
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	4413      	add	r3, r2
 80198c0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 80198c2:	68ba      	ldr	r2, [r7, #8]
 80198c4:	697b      	ldr	r3, [r7, #20]
 80198c6:	405a      	eors	r2, r3
 80198c8:	693b      	ldr	r3, [r7, #16]
 80198ca:	405a      	eors	r2, r3
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	333c      	adds	r3, #60	@ 0x3c
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	441a      	add	r2, r3
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	441a      	add	r2, r3
 80198d8:	4b83      	ldr	r3, [pc, #524]	@ (8019ae8 <mg_md5_transform+0xb60>)
 80198da:	4413      	add	r3, r2
 80198dc:	60fb      	str	r3, [r7, #12]
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	ea4f 4333 	mov.w	r3, r3, ror #16
 80198e4:	60fb      	str	r3, [r7, #12]
 80198e6:	68fa      	ldr	r2, [r7, #12]
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	4413      	add	r3, r2
 80198ec:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 80198ee:	68fa      	ldr	r2, [r7, #12]
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	405a      	eors	r2, r3
 80198f4:	697b      	ldr	r3, [r7, #20]
 80198f6:	405a      	eors	r2, r3
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	3308      	adds	r3, #8
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	441a      	add	r2, r3
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	441a      	add	r2, r3
 8019904:	4b79      	ldr	r3, [pc, #484]	@ (8019aec <mg_md5_transform+0xb64>)
 8019906:	4413      	add	r3, r2
 8019908:	613b      	str	r3, [r7, #16]
 801990a:	693b      	ldr	r3, [r7, #16]
 801990c:	ea4f 2373 	mov.w	r3, r3, ror #9
 8019910:	613b      	str	r3, [r7, #16]
 8019912:	693a      	ldr	r2, [r7, #16]
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	4413      	add	r3, r2
 8019918:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801991a:	68bb      	ldr	r3, [r7, #8]
 801991c:	43da      	mvns	r2, r3
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	431a      	orrs	r2, r3
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	405a      	eors	r2, r3
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	441a      	add	r2, r3
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	441a      	add	r2, r3
 8019930:	4b6f      	ldr	r3, [pc, #444]	@ (8019af0 <mg_md5_transform+0xb68>)
 8019932:	4413      	add	r3, r2
 8019934:	617b      	str	r3, [r7, #20]
 8019936:	697b      	ldr	r3, [r7, #20]
 8019938:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801993c:	617b      	str	r3, [r7, #20]
 801993e:	697a      	ldr	r2, [r7, #20]
 8019940:	693b      	ldr	r3, [r7, #16]
 8019942:	4413      	add	r3, r2
 8019944:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	43da      	mvns	r2, r3
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	431a      	orrs	r2, r3
 801994e:	693b      	ldr	r3, [r7, #16]
 8019950:	405a      	eors	r2, r3
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	331c      	adds	r3, #28
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	441a      	add	r2, r3
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	441a      	add	r2, r3
 801995e:	4b65      	ldr	r3, [pc, #404]	@ (8019af4 <mg_md5_transform+0xb6c>)
 8019960:	4413      	add	r3, r2
 8019962:	60bb      	str	r3, [r7, #8]
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801996a:	60bb      	str	r3, [r7, #8]
 801996c:	68ba      	ldr	r2, [r7, #8]
 801996e:	697b      	ldr	r3, [r7, #20]
 8019970:	4413      	add	r3, r2
 8019972:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8019974:	693b      	ldr	r3, [r7, #16]
 8019976:	43da      	mvns	r2, r3
 8019978:	68bb      	ldr	r3, [r7, #8]
 801997a:	431a      	orrs	r2, r3
 801997c:	697b      	ldr	r3, [r7, #20]
 801997e:	405a      	eors	r2, r3
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	3338      	adds	r3, #56	@ 0x38
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	441a      	add	r2, r3
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	441a      	add	r2, r3
 801998c:	4b5a      	ldr	r3, [pc, #360]	@ (8019af8 <mg_md5_transform+0xb70>)
 801998e:	4413      	add	r3, r2
 8019990:	60fb      	str	r3, [r7, #12]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	ea4f 4373 	mov.w	r3, r3, ror #17
 8019998:	60fb      	str	r3, [r7, #12]
 801999a:	68fa      	ldr	r2, [r7, #12]
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	4413      	add	r3, r2
 80199a0:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	43da      	mvns	r2, r3
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	431a      	orrs	r2, r3
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	405a      	eors	r2, r3
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	3314      	adds	r3, #20
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	441a      	add	r2, r3
 80199b6:	693b      	ldr	r3, [r7, #16]
 80199b8:	441a      	add	r2, r3
 80199ba:	4b50      	ldr	r3, [pc, #320]	@ (8019afc <mg_md5_transform+0xb74>)
 80199bc:	4413      	add	r3, r2
 80199be:	613b      	str	r3, [r7, #16]
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80199c6:	613b      	str	r3, [r7, #16]
 80199c8:	693a      	ldr	r2, [r7, #16]
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	4413      	add	r3, r2
 80199ce:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	43da      	mvns	r2, r3
 80199d4:	693b      	ldr	r3, [r7, #16]
 80199d6:	431a      	orrs	r2, r3
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	405a      	eors	r2, r3
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	3330      	adds	r3, #48	@ 0x30
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	441a      	add	r2, r3
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	441a      	add	r2, r3
 80199e8:	4b45      	ldr	r3, [pc, #276]	@ (8019b00 <mg_md5_transform+0xb78>)
 80199ea:	4413      	add	r3, r2
 80199ec:	617b      	str	r3, [r7, #20]
 80199ee:	697b      	ldr	r3, [r7, #20]
 80199f0:	ea4f 63b3 	mov.w	r3, r3, ror #26
 80199f4:	617b      	str	r3, [r7, #20]
 80199f6:	697a      	ldr	r2, [r7, #20]
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	4413      	add	r3, r2
 80199fc:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	43da      	mvns	r2, r3
 8019a02:	697b      	ldr	r3, [r7, #20]
 8019a04:	431a      	orrs	r2, r3
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	405a      	eors	r2, r3
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	330c      	adds	r3, #12
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	441a      	add	r2, r3
 8019a12:	68bb      	ldr	r3, [r7, #8]
 8019a14:	441a      	add	r2, r3
 8019a16:	4b3b      	ldr	r3, [pc, #236]	@ (8019b04 <mg_md5_transform+0xb7c>)
 8019a18:	4413      	add	r3, r2
 8019a1a:	60bb      	str	r3, [r7, #8]
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8019a22:	60bb      	str	r3, [r7, #8]
 8019a24:	68ba      	ldr	r2, [r7, #8]
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	4413      	add	r3, r2
 8019a2a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8019a2c:	693b      	ldr	r3, [r7, #16]
 8019a2e:	43da      	mvns	r2, r3
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	431a      	orrs	r2, r3
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	405a      	eors	r2, r3
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	3328      	adds	r3, #40	@ 0x28
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	441a      	add	r2, r3
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	4413      	add	r3, r2
 8019a44:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019a48:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 8019a4c:	60fb      	str	r3, [r7, #12]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	ea4f 4373 	mov.w	r3, r3, ror #17
 8019a54:	60fb      	str	r3, [r7, #12]
 8019a56:	68fa      	ldr	r2, [r7, #12]
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	4413      	add	r3, r2
 8019a5c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	43da      	mvns	r2, r3
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	431a      	orrs	r2, r3
 8019a66:	68bb      	ldr	r3, [r7, #8]
 8019a68:	405a      	eors	r2, r3
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	3304      	adds	r3, #4
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	441a      	add	r2, r3
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	441a      	add	r2, r3
 8019a76:	4b24      	ldr	r3, [pc, #144]	@ (8019b08 <mg_md5_transform+0xb80>)
 8019a78:	4413      	add	r3, r2
 8019a7a:	613b      	str	r3, [r7, #16]
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8019a82:	613b      	str	r3, [r7, #16]
 8019a84:	693a      	ldr	r2, [r7, #16]
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	4413      	add	r3, r2
 8019a8a:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	43da      	mvns	r2, r3
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	431a      	orrs	r2, r3
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	405a      	eors	r2, r3
 8019a98:	683b      	ldr	r3, [r7, #0]
 8019a9a:	3320      	adds	r3, #32
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	441a      	add	r2, r3
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	441a      	add	r2, r3
 8019aa4:	4b19      	ldr	r3, [pc, #100]	@ (8019b0c <mg_md5_transform+0xb84>)
 8019aa6:	4413      	add	r3, r2
 8019aa8:	617b      	str	r3, [r7, #20]
 8019aaa:	697b      	ldr	r3, [r7, #20]
 8019aac:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8019ab0:	617b      	str	r3, [r7, #20]
 8019ab2:	697a      	ldr	r2, [r7, #20]
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	4413      	add	r3, r2
 8019ab8:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	43da      	mvns	r2, r3
 8019abe:	697b      	ldr	r3, [r7, #20]
 8019ac0:	431a      	orrs	r2, r3
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	405a      	eors	r2, r3
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	333c      	adds	r3, #60	@ 0x3c
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	441a      	add	r2, r3
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	441a      	add	r2, r3
 8019ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8019b10 <mg_md5_transform+0xb88>)
 8019ad4:	4413      	add	r3, r2
 8019ad6:	60bb      	str	r3, [r7, #8]
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	e01b      	b.n	8019b14 <mg_md5_transform+0xb8c>
 8019adc:	04881d05 	.word	0x04881d05
 8019ae0:	d9d4d039 	.word	0xd9d4d039
 8019ae4:	e6db99e5 	.word	0xe6db99e5
 8019ae8:	1fa27cf8 	.word	0x1fa27cf8
 8019aec:	c4ac5665 	.word	0xc4ac5665
 8019af0:	f4292244 	.word	0xf4292244
 8019af4:	432aff97 	.word	0x432aff97
 8019af8:	ab9423a7 	.word	0xab9423a7
 8019afc:	fc93a039 	.word	0xfc93a039
 8019b00:	655b59c3 	.word	0x655b59c3
 8019b04:	8f0ccc92 	.word	0x8f0ccc92
 8019b08:	85845dd1 	.word	0x85845dd1
 8019b0c:	6fa87e4f 	.word	0x6fa87e4f
 8019b10:	fe2ce6e0 	.word	0xfe2ce6e0
 8019b14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8019b18:	60bb      	str	r3, [r7, #8]
 8019b1a:	68ba      	ldr	r2, [r7, #8]
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	4413      	add	r3, r2
 8019b20:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	43da      	mvns	r2, r3
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	431a      	orrs	r2, r3
 8019b2a:	697b      	ldr	r3, [r7, #20]
 8019b2c:	405a      	eors	r2, r3
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	3318      	adds	r3, #24
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	441a      	add	r2, r3
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	441a      	add	r2, r3
 8019b3a:	4b51      	ldr	r3, [pc, #324]	@ (8019c80 <mg_md5_transform+0xcf8>)
 8019b3c:	4413      	add	r3, r2
 8019b3e:	60fb      	str	r3, [r7, #12]
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	ea4f 4373 	mov.w	r3, r3, ror #17
 8019b46:	60fb      	str	r3, [r7, #12]
 8019b48:	68fa      	ldr	r2, [r7, #12]
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8019b50:	697b      	ldr	r3, [r7, #20]
 8019b52:	43da      	mvns	r2, r3
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	431a      	orrs	r2, r3
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	405a      	eors	r2, r3
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	3334      	adds	r3, #52	@ 0x34
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	441a      	add	r2, r3
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	441a      	add	r2, r3
 8019b68:	4b46      	ldr	r3, [pc, #280]	@ (8019c84 <mg_md5_transform+0xcfc>)
 8019b6a:	4413      	add	r3, r2
 8019b6c:	613b      	str	r3, [r7, #16]
 8019b6e:	693b      	ldr	r3, [r7, #16]
 8019b70:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8019b74:	613b      	str	r3, [r7, #16]
 8019b76:	693a      	ldr	r2, [r7, #16]
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	4413      	add	r3, r2
 8019b7c:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	43da      	mvns	r2, r3
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	431a      	orrs	r2, r3
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	405a      	eors	r2, r3
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	3310      	adds	r3, #16
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	441a      	add	r2, r3
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	441a      	add	r2, r3
 8019b96:	4b3c      	ldr	r3, [pc, #240]	@ (8019c88 <mg_md5_transform+0xd00>)
 8019b98:	4413      	add	r3, r2
 8019b9a:	617b      	str	r3, [r7, #20]
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8019ba2:	617b      	str	r3, [r7, #20]
 8019ba4:	697a      	ldr	r2, [r7, #20]
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	4413      	add	r3, r2
 8019baa:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	43da      	mvns	r2, r3
 8019bb0:	697b      	ldr	r3, [r7, #20]
 8019bb2:	431a      	orrs	r2, r3
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	405a      	eors	r2, r3
 8019bb8:	683b      	ldr	r3, [r7, #0]
 8019bba:	332c      	adds	r3, #44	@ 0x2c
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	441a      	add	r2, r3
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	441a      	add	r2, r3
 8019bc4:	4b31      	ldr	r3, [pc, #196]	@ (8019c8c <mg_md5_transform+0xd04>)
 8019bc6:	4413      	add	r3, r2
 8019bc8:	60bb      	str	r3, [r7, #8]
 8019bca:	68bb      	ldr	r3, [r7, #8]
 8019bcc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8019bd0:	60bb      	str	r3, [r7, #8]
 8019bd2:	68ba      	ldr	r2, [r7, #8]
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8019bda:	693b      	ldr	r3, [r7, #16]
 8019bdc:	43da      	mvns	r2, r3
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	431a      	orrs	r2, r3
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	405a      	eors	r2, r3
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	3308      	adds	r3, #8
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	441a      	add	r2, r3
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	441a      	add	r2, r3
 8019bf2:	4b27      	ldr	r3, [pc, #156]	@ (8019c90 <mg_md5_transform+0xd08>)
 8019bf4:	4413      	add	r3, r2
 8019bf6:	60fb      	str	r3, [r7, #12]
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	ea4f 4373 	mov.w	r3, r3, ror #17
 8019bfe:	60fb      	str	r3, [r7, #12]
 8019c00:	68fa      	ldr	r2, [r7, #12]
 8019c02:	68bb      	ldr	r3, [r7, #8]
 8019c04:	4413      	add	r3, r2
 8019c06:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	43da      	mvns	r2, r3
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	431a      	orrs	r2, r3
 8019c10:	68bb      	ldr	r3, [r7, #8]
 8019c12:	405a      	eors	r2, r3
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	3324      	adds	r3, #36	@ 0x24
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	441a      	add	r2, r3
 8019c1c:	693b      	ldr	r3, [r7, #16]
 8019c1e:	441a      	add	r2, r3
 8019c20:	4b1c      	ldr	r3, [pc, #112]	@ (8019c94 <mg_md5_transform+0xd0c>)
 8019c22:	4413      	add	r3, r2
 8019c24:	613b      	str	r3, [r7, #16]
 8019c26:	693b      	ldr	r3, [r7, #16]
 8019c28:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8019c2c:	613b      	str	r3, [r7, #16]
 8019c2e:	693a      	ldr	r2, [r7, #16]
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	4413      	add	r3, r2
 8019c34:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681a      	ldr	r2, [r3, #0]
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	441a      	add	r2, r3
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	3304      	adds	r3, #4
 8019c46:	6819      	ldr	r1, [r3, #0]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	3304      	adds	r3, #4
 8019c4c:	693a      	ldr	r2, [r7, #16]
 8019c4e:	440a      	add	r2, r1
 8019c50:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	3308      	adds	r3, #8
 8019c56:	6819      	ldr	r1, [r3, #0]
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	3308      	adds	r3, #8
 8019c5c:	68fa      	ldr	r2, [r7, #12]
 8019c5e:	440a      	add	r2, r1
 8019c60:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	330c      	adds	r3, #12
 8019c66:	6819      	ldr	r1, [r3, #0]
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	330c      	adds	r3, #12
 8019c6c:	68ba      	ldr	r2, [r7, #8]
 8019c6e:	440a      	add	r2, r1
 8019c70:	601a      	str	r2, [r3, #0]
}
 8019c72:	bf00      	nop
 8019c74:	371c      	adds	r7, #28
 8019c76:	46bd      	mov	sp, r7
 8019c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	a3014314 	.word	0xa3014314
 8019c84:	4e0811a1 	.word	0x4e0811a1
 8019c88:	f7537e82 	.word	0xf7537e82
 8019c8c:	bd3af235 	.word	0xbd3af235
 8019c90:	2ad7d2bb 	.word	0x2ad7d2bb
 8019c94:	eb86d391 	.word	0xeb86d391

08019c98 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b086      	sub	sp, #24
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	60f8      	str	r0, [r7, #12]
 8019ca0:	60b9      	str	r1, [r7, #8]
 8019ca2:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	691b      	ldr	r3, [r3, #16]
 8019ca8:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	00da      	lsls	r2, r3, #3
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	441a      	add	r2, r3
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	611a      	str	r2, [r3, #16]
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	691b      	ldr	r3, [r3, #16]
 8019cba:	697a      	ldr	r2, [r7, #20]
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	d904      	bls.n	8019cca <mg_md5_update+0x32>
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	695b      	ldr	r3, [r3, #20]
 8019cc4:	1c5a      	adds	r2, r3, #1
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	695a      	ldr	r2, [r3, #20]
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	0f5b      	lsrs	r3, r3, #29
 8019cd2:	441a      	add	r2, r3
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 8019cd8:	697b      	ldr	r3, [r7, #20]
 8019cda:	08db      	lsrs	r3, r3, #3
 8019cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019ce0:	617b      	str	r3, [r7, #20]

  if (t) {
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d048      	beq.n	8019d7a <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f103 0218 	add.w	r2, r3, #24
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	4413      	add	r3, r2
 8019cf2:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8019cfa:	617b      	str	r3, [r7, #20]
    if (len < t) {
 8019cfc:	687a      	ldr	r2, [r7, #4]
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d205      	bcs.n	8019d10 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 8019d04:	687a      	ldr	r2, [r7, #4]
 8019d06:	68b9      	ldr	r1, [r7, #8]
 8019d08:	6938      	ldr	r0, [r7, #16]
 8019d0a:	f007 fa8a 	bl	8021222 <memcpy>
      return;
 8019d0e:	e03e      	b.n	8019d8e <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 8019d10:	697a      	ldr	r2, [r7, #20]
 8019d12:	68b9      	ldr	r1, [r7, #8]
 8019d14:	6938      	ldr	r0, [r7, #16]
 8019d16:	f007 fa84 	bl	8021222 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	3318      	adds	r3, #24
 8019d1e:	2110      	movs	r1, #16
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7ff f8dd 	bl	8018ee0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8019d26:	68fa      	ldr	r2, [r7, #12]
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	3318      	adds	r3, #24
 8019d2c:	4619      	mov	r1, r3
 8019d2e:	4610      	mov	r0, r2
 8019d30:	f7ff f92a 	bl	8018f88 <mg_md5_transform>
    buf += t;
 8019d34:	68ba      	ldr	r2, [r7, #8]
 8019d36:	697b      	ldr	r3, [r7, #20]
 8019d38:	4413      	add	r3, r2
 8019d3a:	60bb      	str	r3, [r7, #8]
    len -= t;
 8019d3c:	687a      	ldr	r2, [r7, #4]
 8019d3e:	697b      	ldr	r3, [r7, #20]
 8019d40:	1ad3      	subs	r3, r2, r3
 8019d42:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 8019d44:	e019      	b.n	8019d7a <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	3318      	adds	r3, #24
 8019d4a:	2240      	movs	r2, #64	@ 0x40
 8019d4c:	68b9      	ldr	r1, [r7, #8]
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f007 fa67 	bl	8021222 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	3318      	adds	r3, #24
 8019d58:	2110      	movs	r1, #16
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f7ff f8c0 	bl	8018ee0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8019d60:	68fa      	ldr	r2, [r7, #12]
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	3318      	adds	r3, #24
 8019d66:	4619      	mov	r1, r3
 8019d68:	4610      	mov	r0, r2
 8019d6a:	f7ff f90d 	bl	8018f88 <mg_md5_transform>
    buf += 64;
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	3340      	adds	r3, #64	@ 0x40
 8019d72:	60bb      	str	r3, [r7, #8]
    len -= 64;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	3b40      	subs	r3, #64	@ 0x40
 8019d78:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8019d7e:	d8e2      	bhi.n	8019d46 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	3318      	adds	r3, #24
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	68b9      	ldr	r1, [r7, #8]
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f007 fa4a 	bl	8021222 <memcpy>
}
 8019d8e:	3718      	adds	r7, #24
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}

08019d94 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b086      	sub	sp, #24
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	691b      	ldr	r3, [r3, #16]
 8019da2:	08db      	lsrs	r3, r3, #3
 8019da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019da8:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	f103 0218 	add.w	r2, r3, #24
 8019db0:	697b      	ldr	r3, [r7, #20]
 8019db2:	4413      	add	r3, r2
 8019db4:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	1c5a      	adds	r2, r3, #1
 8019dba:	613a      	str	r2, [r7, #16]
 8019dbc:	2280      	movs	r2, #128	@ 0x80
 8019dbe:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8019dc6:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	2b07      	cmp	r3, #7
 8019dcc:	d819      	bhi.n	8019e02 <mg_md5_final+0x6e>
    memset(p, 0, count);
 8019dce:	697a      	ldr	r2, [r7, #20]
 8019dd0:	2100      	movs	r1, #0
 8019dd2:	6938      	ldr	r0, [r7, #16]
 8019dd4:	f007 f954 	bl	8021080 <memset>
    mg_byte_reverse(ctx->in, 16);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	3318      	adds	r3, #24
 8019ddc:	2110      	movs	r1, #16
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7ff f87e 	bl	8018ee0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8019de4:	687a      	ldr	r2, [r7, #4]
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	3318      	adds	r3, #24
 8019dea:	4619      	mov	r1, r3
 8019dec:	4610      	mov	r0, r2
 8019dee:	f7ff f8cb 	bl	8018f88 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	3318      	adds	r3, #24
 8019df6:	2238      	movs	r2, #56	@ 0x38
 8019df8:	2100      	movs	r1, #0
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f007 f940 	bl	8021080 <memset>
 8019e00:	e006      	b.n	8019e10 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	3b08      	subs	r3, #8
 8019e06:	461a      	mov	r2, r3
 8019e08:	2100      	movs	r1, #0
 8019e0a:	6938      	ldr	r0, [r7, #16]
 8019e0c:	f007 f938 	bl	8021080 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	3318      	adds	r3, #24
 8019e14:	210e      	movs	r1, #14
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7ff f862 	bl	8018ee0 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	3318      	adds	r3, #24
 8019e20:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	3338      	adds	r3, #56	@ 0x38
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	6912      	ldr	r2, [r2, #16]
 8019e2a:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	333c      	adds	r3, #60	@ 0x3c
 8019e30:	687a      	ldr	r2, [r7, #4]
 8019e32:	6952      	ldr	r2, [r2, #20]
 8019e34:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8019e36:	687a      	ldr	r2, [r7, #4]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	3318      	adds	r3, #24
 8019e3c:	4619      	mov	r1, r3
 8019e3e:	4610      	mov	r0, r2
 8019e40:	f7ff f8a2 	bl	8018f88 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	2104      	movs	r1, #4
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7ff f849 	bl	8018ee0 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	2210      	movs	r2, #16
 8019e52:	4619      	mov	r1, r3
 8019e54:	6838      	ldr	r0, [r7, #0]
 8019e56:	f007 f9e4 	bl	8021222 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 8019e5a:	2258      	movs	r2, #88	@ 0x58
 8019e5c:	2100      	movs	r1, #0
 8019e5e:	6878      	ldr	r0, [r7, #4]
 8019e60:	f007 f90e 	bl	8021080 <memset>
}
 8019e64:	bf00      	nop
 8019e66:	3718      	adds	r7, #24
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}

08019e6c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b088      	sub	sp, #32
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	60f8      	str	r0, [r7, #12]
 8019e74:	607b      	str	r3, [r7, #4]
 8019e76:	460b      	mov	r3, r1
 8019e78:	72fb      	strb	r3, [r7, #11]
 8019e7a:	4613      	mov	r3, r2
 8019e7c:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8019e7e:	f107 0314 	add.w	r3, r7, #20
 8019e82:	3301      	adds	r3, #1
 8019e84:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8019e86:	7afb      	ldrb	r3, [r7, #11]
 8019e88:	011b      	lsls	r3, r3, #4
 8019e8a:	b25a      	sxtb	r2, r3
 8019e8c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8019e90:	4313      	orrs	r3, r2
 8019e92:	b25b      	sxtb	r3, r3
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	b2db      	uxtb	r3, r3
 8019e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019ea0:	b2da      	uxtb	r2, r3
 8019ea2:	69fb      	ldr	r3, [r7, #28]
 8019ea4:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	09db      	lsrs	r3, r3, #7
 8019eaa:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d006      	beq.n	8019ec0 <mg_mqtt_send_header+0x54>
 8019eb2:	69fb      	ldr	r3, [r7, #28]
 8019eb4:	781b      	ldrb	r3, [r3, #0]
 8019eb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019eba:	b2da      	uxtb	r2, r3
 8019ebc:	69fb      	ldr	r3, [r7, #28]
 8019ebe:	701a      	strb	r2, [r3, #0]
    vlen++;
 8019ec0:	69fb      	ldr	r3, [r7, #28]
 8019ec2:	3301      	adds	r3, #1
 8019ec4:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d005      	beq.n	8019ed8 <mg_mqtt_send_header+0x6c>
 8019ecc:	f107 0314 	add.w	r3, r7, #20
 8019ed0:	3305      	adds	r3, #5
 8019ed2:	69fa      	ldr	r2, [r7, #28]
 8019ed4:	429a      	cmp	r2, r3
 8019ed6:	d3df      	bcc.n	8019e98 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8019ed8:	f107 0314 	add.w	r3, r7, #20
 8019edc:	69fa      	ldr	r2, [r7, #28]
 8019ede:	1ad3      	subs	r3, r2, r3
 8019ee0:	461a      	mov	r2, r3
 8019ee2:	f107 0314 	add.w	r3, r7, #20
 8019ee6:	4619      	mov	r1, r3
 8019ee8:	68f8      	ldr	r0, [r7, #12]
 8019eea:	f004 fded 	bl	801eac8 <mg_send>
}
 8019eee:	bf00      	nop
 8019ef0:	3720      	adds	r7, #32
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}

08019ef6 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8019ef6:	b580      	push	{r7, lr}
 8019ef8:	b082      	sub	sp, #8
 8019efa:	af00      	add	r7, sp, #0
 8019efc:	6078      	str	r0, [r7, #4]
 8019efe:	460b      	mov	r3, r1
 8019f00:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 8019f02:	1cbb      	adds	r3, r7, #2
 8019f04:	2202      	movs	r2, #2
 8019f06:	4619      	mov	r1, r3
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f004 fddd 	bl	801eac8 <mg_send>
}
 8019f0e:	bf00      	nop
 8019f10:	3708      	adds	r7, #8
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}

08019f16 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8019f16:	b580      	push	{r7, lr}
 8019f18:	b082      	sub	sp, #8
 8019f1a:	af00      	add	r7, sp, #0
 8019f1c:	6078      	str	r0, [r7, #4]
 8019f1e:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8019f20:	463b      	mov	r3, r7
 8019f22:	2204      	movs	r2, #4
 8019f24:	4619      	mov	r1, r3
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	f004 fdce 	bl	801eac8 <mg_send>
}
 8019f2c:	bf00      	nop
 8019f2e:	3708      	adds	r7, #8
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd80      	pop	{r7, pc}

08019f34 <varint_size>:

static uint8_t varint_size(size_t length) {
 8019f34:	b480      	push	{r7}
 8019f36:	b085      	sub	sp, #20
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8019f40:	7bfb      	ldrb	r3, [r7, #15]
 8019f42:	3301      	adds	r3, #1
 8019f44:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	09db      	lsrs	r3, r3, #7
 8019f4a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d1f6      	bne.n	8019f40 <varint_size+0xc>
  return bytes_needed;
 8019f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	3714      	adds	r7, #20
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5e:	4770      	bx	lr

08019f60 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8019f60:	b480      	push	{r7}
 8019f62:	b085      	sub	sp, #20
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019f76:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	09db      	lsrs	r3, r3, #7
 8019f7c:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d003      	beq.n	8019f8c <encode_varint+0x2c>
 8019f84:	7afb      	ldrb	r3, [r7, #11]
 8019f86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019f8a:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	1c5a      	adds	r2, r3, #1
 8019f90:	60fa      	str	r2, [r7, #12]
 8019f92:	687a      	ldr	r2, [r7, #4]
 8019f94:	4413      	add	r3, r2
 8019f96:	7afa      	ldrb	r2, [r7, #11]
 8019f98:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d1e6      	bne.n	8019f6e <encode_varint+0xe>

  return len;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	3714      	adds	r7, #20
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fac:	4770      	bx	lr

08019fae <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8019fae:	b480      	push	{r7}
 8019fb0:	b089      	sub	sp, #36	@ 0x24
 8019fb2:	af00      	add	r7, sp, #0
 8019fb4:	60f8      	str	r0, [r7, #12]
 8019fb6:	60b9      	str	r1, [r7, #8]
 8019fb8:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 8019fba:	2301      	movs	r3, #1
 8019fbc:	61fb      	str	r3, [r7, #28]
  *value = 0;
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	2200      	movs	r2, #0
 8019fc2:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	61bb      	str	r3, [r7, #24]
 8019fc8:	e01c      	b.n	801a004 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 8019fca:	68fa      	ldr	r2, [r7, #12]
 8019fcc:	69bb      	ldr	r3, [r7, #24]
 8019fce:	4413      	add	r3, r2
 8019fd0:	781b      	ldrb	r3, [r3, #0]
 8019fd2:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681a      	ldr	r2, [r3, #0]
 8019fd8:	7dfb      	ldrb	r3, [r7, #23]
 8019fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019fde:	69f9      	ldr	r1, [r7, #28]
 8019fe0:	fb01 f303 	mul.w	r3, r1, r3
 8019fe4:	441a      	add	r2, r3
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	01db      	lsls	r3, r3, #7
 8019fee:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8019ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	db02      	blt.n	8019ffe <decode_varint+0x50>
 8019ff8:	69bb      	ldr	r3, [r7, #24]
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	e00a      	b.n	801a014 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8019ffe:	69bb      	ldr	r3, [r7, #24]
 801a000:	3301      	adds	r3, #1
 801a002:	61bb      	str	r3, [r7, #24]
 801a004:	69bb      	ldr	r3, [r7, #24]
 801a006:	2b03      	cmp	r3, #3
 801a008:	d803      	bhi.n	801a012 <decode_varint+0x64>
 801a00a:	69ba      	ldr	r2, [r7, #24]
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	429a      	cmp	r2, r3
 801a010:	d3db      	bcc.n	8019fca <decode_varint+0x1c>
  }

  return 0;
 801a012:	2300      	movs	r3, #0
}
 801a014:	4618      	mov	r0, r3
 801a016:	3724      	adds	r7, #36	@ 0x24
 801a018:	46bd      	mov	sp, r7
 801a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a01e:	4770      	bx	lr

0801a020 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 801a020:	b480      	push	{r7}
 801a022:	b085      	sub	sp, #20
 801a024:	af00      	add	r7, sp, #0
 801a026:	4603      	mov	r3, r0
 801a028:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 801a02a:	231b      	movs	r3, #27
 801a02c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 801a02e:	2300      	movs	r3, #0
 801a030:	60fb      	str	r3, [r7, #12]
 801a032:	e00f      	b.n	801a054 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801a034:	4a0d      	ldr	r2, [pc, #52]	@ (801a06c <mqtt_prop_type_by_id+0x4c>)
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801a03c:	79fa      	ldrb	r2, [r7, #7]
 801a03e:	429a      	cmp	r2, r3
 801a040:	d105      	bne.n	801a04e <mqtt_prop_type_by_id+0x2e>
 801a042:	4a0a      	ldr	r2, [pc, #40]	@ (801a06c <mqtt_prop_type_by_id+0x4c>)
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	005b      	lsls	r3, r3, #1
 801a048:	4413      	add	r3, r2
 801a04a:	785b      	ldrb	r3, [r3, #1]
 801a04c:	e008      	b.n	801a060 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	3301      	adds	r3, #1
 801a052:	60fb      	str	r3, [r7, #12]
 801a054:	68fa      	ldr	r2, [r7, #12]
 801a056:	68bb      	ldr	r3, [r7, #8]
 801a058:	429a      	cmp	r2, r3
 801a05a:	d3eb      	bcc.n	801a034 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 801a05c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a060:	4618      	mov	r0, r3
 801a062:	3714      	adds	r7, #20
 801a064:	46bd      	mov	sp, r7
 801a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06a:	4770      	bx	lr
 801a06c:	08026e00 	.word	0x08026e00

0801a070 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801a070:	b580      	push	{r7, lr}
 801a072:	b084      	sub	sp, #16
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 801a07a:	2300      	movs	r3, #0
 801a07c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 801a07e:	2300      	movs	r3, #0
 801a080:	60fb      	str	r3, [r7, #12]
 801a082:	e07a      	b.n	801a17a <get_properties_length+0x10a>
    size++;  // identifier
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	3301      	adds	r3, #1
 801a088:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801a08a:	68fa      	ldr	r2, [r7, #12]
 801a08c:	4613      	mov	r3, r2
 801a08e:	005b      	lsls	r3, r3, #1
 801a090:	4413      	add	r3, r2
 801a092:	00db      	lsls	r3, r3, #3
 801a094:	461a      	mov	r2, r3
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	4413      	add	r3, r2
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7ff ffbf 	bl	801a020 <mqtt_prop_type_by_id>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	2b06      	cmp	r3, #6
 801a0a6:	d863      	bhi.n	801a170 <get_properties_length+0x100>
 801a0a8:	a201      	add	r2, pc, #4	@ (adr r2, 801a0b0 <get_properties_length+0x40>)
 801a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0ae:	bf00      	nop
 801a0b0:	0801a169 	.word	0x0801a169
 801a0b4:	0801a0fd 	.word	0x0801a0fd
 801a0b8:	0801a0cd 	.word	0x0801a0cd
 801a0bc:	0801a119 	.word	0x0801a119
 801a0c0:	0801a135 	.word	0x0801a135
 801a0c4:	0801a159 	.word	0x0801a159
 801a0c8:	0801a161 	.word	0x0801a161
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801a0cc:	68fa      	ldr	r2, [r7, #12]
 801a0ce:	4613      	mov	r3, r2
 801a0d0:	005b      	lsls	r3, r3, #1
 801a0d2:	4413      	add	r3, r2
 801a0d4:	00db      	lsls	r3, r3, #3
 801a0d6:	461a      	mov	r2, r3
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	4413      	add	r3, r2
 801a0dc:	6959      	ldr	r1, [r3, #20]
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	4613      	mov	r3, r2
 801a0e2:	005b      	lsls	r3, r3, #1
 801a0e4:	4413      	add	r3, r2
 801a0e6:	00db      	lsls	r3, r3, #3
 801a0e8:	461a      	mov	r2, r3
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	4413      	add	r3, r2
 801a0ee:	68db      	ldr	r3, [r3, #12]
 801a0f0:	18ca      	adds	r2, r1, r3
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	4413      	add	r3, r2
 801a0f6:	3304      	adds	r3, #4
 801a0f8:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 801a0fa:	e03b      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801a0fc:	68fa      	ldr	r2, [r7, #12]
 801a0fe:	4613      	mov	r3, r2
 801a100:	005b      	lsls	r3, r3, #1
 801a102:	4413      	add	r3, r2
 801a104:	00db      	lsls	r3, r3, #3
 801a106:	461a      	mov	r2, r3
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	4413      	add	r3, r2
 801a10c:	695a      	ldr	r2, [r3, #20]
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	4413      	add	r3, r2
 801a112:	3302      	adds	r3, #2
 801a114:	60bb      	str	r3, [r7, #8]
        break;
 801a116:	e02d      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801a118:	68fa      	ldr	r2, [r7, #12]
 801a11a:	4613      	mov	r3, r2
 801a11c:	005b      	lsls	r3, r3, #1
 801a11e:	4413      	add	r3, r2
 801a120:	00db      	lsls	r3, r3, #3
 801a122:	461a      	mov	r2, r3
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	4413      	add	r3, r2
 801a128:	695a      	ldr	r2, [r3, #20]
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	4413      	add	r3, r2
 801a12e:	3302      	adds	r3, #2
 801a130:	60bb      	str	r3, [r7, #8]
        break;
 801a132:	e01f      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801a134:	68fa      	ldr	r2, [r7, #12]
 801a136:	4613      	mov	r3, r2
 801a138:	005b      	lsls	r3, r3, #1
 801a13a:	4413      	add	r3, r2
 801a13c:	00db      	lsls	r3, r3, #3
 801a13e:	461a      	mov	r2, r3
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	4413      	add	r3, r2
 801a144:	685b      	ldr	r3, [r3, #4]
 801a146:	4618      	mov	r0, r3
 801a148:	f7ff fef4 	bl	8019f34 <varint_size>
 801a14c:	4603      	mov	r3, r0
 801a14e:	461a      	mov	r2, r3
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	4413      	add	r3, r2
 801a154:	60bb      	str	r3, [r7, #8]
        break;
 801a156:	e00d      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801a158:	68bb      	ldr	r3, [r7, #8]
 801a15a:	3304      	adds	r3, #4
 801a15c:	60bb      	str	r3, [r7, #8]
        break;
 801a15e:	e009      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801a160:	68bb      	ldr	r3, [r7, #8]
 801a162:	3302      	adds	r3, #2
 801a164:	60bb      	str	r3, [r7, #8]
        break;
 801a166:	e005      	b.n	801a174 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	3301      	adds	r3, #1
 801a16c:	60bb      	str	r3, [r7, #8]
        break;
 801a16e:	e001      	b.n	801a174 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	e007      	b.n	801a184 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	3301      	adds	r3, #1
 801a178:	60fb      	str	r3, [r7, #12]
 801a17a:	68fa      	ldr	r2, [r7, #12]
 801a17c:	683b      	ldr	r3, [r7, #0]
 801a17e:	429a      	cmp	r2, r3
 801a180:	d380      	bcc.n	801a084 <get_properties_length+0x14>
    }
  }

  return size;
 801a182:	68bb      	ldr	r3, [r7, #8]
}
 801a184:	4618      	mov	r0, r3
 801a186:	3710      	adds	r7, #16
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b084      	sub	sp, #16
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
 801a194:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 801a196:	6839      	ldr	r1, [r7, #0]
 801a198:	6878      	ldr	r0, [r7, #4]
 801a19a:	f7ff ff69 	bl	801a070 <get_properties_length>
 801a19e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 801a1a0:	68f8      	ldr	r0, [r7, #12]
 801a1a2:	f7ff fec7 	bl	8019f34 <varint_size>
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	461a      	mov	r2, r3
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	60fb      	str	r3, [r7, #12]
  return size;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
}
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	3710      	adds	r7, #16
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}
	...

0801a1bc <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b08a      	sub	sp, #40	@ 0x28
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	60f8      	str	r0, [r7, #12]
 801a1c4:	60b9      	str	r1, [r7, #8]
 801a1c6:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 801a1c8:	6879      	ldr	r1, [r7, #4]
 801a1ca:	68b8      	ldr	r0, [r7, #8]
 801a1cc:	f7ff ff50 	bl	801a070 <get_properties_length>
 801a1d0:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 801a1da:	f107 0314 	add.w	r3, r7, #20
 801a1de:	6a39      	ldr	r1, [r7, #32]
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7ff febd 	bl	8019f60 <encode_varint>
 801a1e6:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 801a1e8:	f107 0314 	add.w	r3, r7, #20
 801a1ec:	69fa      	ldr	r2, [r7, #28]
 801a1ee:	4619      	mov	r1, r3
 801a1f0:	68f8      	ldr	r0, [r7, #12]
 801a1f2:	f004 fc69 	bl	801eac8 <mg_send>
  for (i = 0; i < nprops; i++) {
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1fa:	e11f      	b.n	801a43c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 801a1fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1fe:	4613      	mov	r3, r2
 801a200:	005b      	lsls	r3, r3, #1
 801a202:	4413      	add	r3, r2
 801a204:	00db      	lsls	r3, r3, #3
 801a206:	461a      	mov	r2, r3
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	4413      	add	r3, r2
 801a20c:	2201      	movs	r2, #1
 801a20e:	4619      	mov	r1, r3
 801a210:	68f8      	ldr	r0, [r7, #12]
 801a212:	f004 fc59 	bl	801eac8 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801a216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a218:	4613      	mov	r3, r2
 801a21a:	005b      	lsls	r3, r3, #1
 801a21c:	4413      	add	r3, r2
 801a21e:	00db      	lsls	r3, r3, #3
 801a220:	461a      	mov	r2, r3
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	4413      	add	r3, r2
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	4618      	mov	r0, r3
 801a22a:	f7ff fef9 	bl	801a020 <mqtt_prop_type_by_id>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b06      	cmp	r3, #6
 801a232:	f200 8100 	bhi.w	801a436 <mg_send_mqtt_properties+0x27a>
 801a236:	a201      	add	r2, pc, #4	@ (adr r2, 801a23c <mg_send_mqtt_properties+0x80>)
 801a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a23c:	0801a2fb 	.word	0x0801a2fb
 801a240:	0801a363 	.word	0x0801a363
 801a244:	0801a259 	.word	0x0801a259
 801a248:	0801a3b5 	.word	0x0801a3b5
 801a24c:	0801a407 	.word	0x0801a407
 801a250:	0801a33f 	.word	0x0801a33f
 801a254:	0801a319 	.word	0x0801a319
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 801a258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a25a:	4613      	mov	r3, r2
 801a25c:	005b      	lsls	r3, r3, #1
 801a25e:	4413      	add	r3, r2
 801a260:	00db      	lsls	r3, r3, #3
 801a262:	461a      	mov	r2, r3
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	4413      	add	r3, r2
 801a268:	68db      	ldr	r3, [r3, #12]
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	4618      	mov	r0, r3
 801a26e:	f005 ff1c 	bl	80200aa <mg_ntohs>
 801a272:	4603      	mov	r3, r0
 801a274:	4619      	mov	r1, r3
 801a276:	68f8      	ldr	r0, [r7, #12]
 801a278:	f7ff fe3d 	bl	8019ef6 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 801a27c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a27e:	4613      	mov	r3, r2
 801a280:	005b      	lsls	r3, r3, #1
 801a282:	4413      	add	r3, r2
 801a284:	00db      	lsls	r3, r3, #3
 801a286:	461a      	mov	r2, r3
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	4413      	add	r3, r2
 801a28c:	6899      	ldr	r1, [r3, #8]
 801a28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a290:	4613      	mov	r3, r2
 801a292:	005b      	lsls	r3, r3, #1
 801a294:	4413      	add	r3, r2
 801a296:	00db      	lsls	r3, r3, #3
 801a298:	461a      	mov	r2, r3
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	4413      	add	r3, r2
 801a29e:	68db      	ldr	r3, [r3, #12]
 801a2a0:	461a      	mov	r2, r3
 801a2a2:	68f8      	ldr	r0, [r7, #12]
 801a2a4:	f004 fc10 	bl	801eac8 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801a2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a2aa:	4613      	mov	r3, r2
 801a2ac:	005b      	lsls	r3, r3, #1
 801a2ae:	4413      	add	r3, r2
 801a2b0:	00db      	lsls	r3, r3, #3
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	4413      	add	r3, r2
 801a2b8:	695b      	ldr	r3, [r3, #20]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	4618      	mov	r0, r3
 801a2be:	f005 fef4 	bl	80200aa <mg_ntohs>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	68f8      	ldr	r0, [r7, #12]
 801a2c8:	f7ff fe15 	bl	8019ef6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801a2cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a2ce:	4613      	mov	r3, r2
 801a2d0:	005b      	lsls	r3, r3, #1
 801a2d2:	4413      	add	r3, r2
 801a2d4:	00db      	lsls	r3, r3, #3
 801a2d6:	461a      	mov	r2, r3
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	4413      	add	r3, r2
 801a2dc:	6919      	ldr	r1, [r3, #16]
 801a2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a2e0:	4613      	mov	r3, r2
 801a2e2:	005b      	lsls	r3, r3, #1
 801a2e4:	4413      	add	r3, r2
 801a2e6:	00db      	lsls	r3, r3, #3
 801a2e8:	461a      	mov	r2, r3
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	4413      	add	r3, r2
 801a2ee:	695b      	ldr	r3, [r3, #20]
 801a2f0:	461a      	mov	r2, r3
 801a2f2:	68f8      	ldr	r0, [r7, #12]
 801a2f4:	f004 fbe8 	bl	801eac8 <mg_send>
        break;
 801a2f8:	e09d      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 801a2fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a2fc:	4613      	mov	r3, r2
 801a2fe:	005b      	lsls	r3, r3, #1
 801a300:	4413      	add	r3, r2
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	461a      	mov	r2, r3
 801a306:	68bb      	ldr	r3, [r7, #8]
 801a308:	4413      	add	r3, r2
 801a30a:	3304      	adds	r3, #4
 801a30c:	2201      	movs	r2, #1
 801a30e:	4619      	mov	r1, r3
 801a310:	68f8      	ldr	r0, [r7, #12]
 801a312:	f004 fbd9 	bl	801eac8 <mg_send>
        break;
 801a316:	e08e      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 801a318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a31a:	4613      	mov	r3, r2
 801a31c:	005b      	lsls	r3, r3, #1
 801a31e:	4413      	add	r3, r2
 801a320:	00db      	lsls	r3, r3, #3
 801a322:	461a      	mov	r2, r3
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	4413      	add	r3, r2
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	4618      	mov	r0, r3
 801a32e:	f005 febc 	bl	80200aa <mg_ntohs>
 801a332:	4603      	mov	r3, r0
 801a334:	4619      	mov	r1, r3
 801a336:	68f8      	ldr	r0, [r7, #12]
 801a338:	f7ff fddd 	bl	8019ef6 <mg_send_u16>
        break;
 801a33c:	e07b      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 801a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a340:	4613      	mov	r3, r2
 801a342:	005b      	lsls	r3, r3, #1
 801a344:	4413      	add	r3, r2
 801a346:	00db      	lsls	r3, r3, #3
 801a348:	461a      	mov	r2, r3
 801a34a:	68bb      	ldr	r3, [r7, #8]
 801a34c:	4413      	add	r3, r2
 801a34e:	685b      	ldr	r3, [r3, #4]
 801a350:	4618      	mov	r0, r3
 801a352:	f005 fe91 	bl	8020078 <mg_ntohl>
 801a356:	4603      	mov	r3, r0
 801a358:	4619      	mov	r1, r3
 801a35a:	68f8      	ldr	r0, [r7, #12]
 801a35c:	f7ff fddb 	bl	8019f16 <mg_send_u32>
        break;
 801a360:	e069      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801a362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a364:	4613      	mov	r3, r2
 801a366:	005b      	lsls	r3, r3, #1
 801a368:	4413      	add	r3, r2
 801a36a:	00db      	lsls	r3, r3, #3
 801a36c:	461a      	mov	r2, r3
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	4413      	add	r3, r2
 801a372:	695b      	ldr	r3, [r3, #20]
 801a374:	b29b      	uxth	r3, r3
 801a376:	4618      	mov	r0, r3
 801a378:	f005 fe97 	bl	80200aa <mg_ntohs>
 801a37c:	4603      	mov	r3, r0
 801a37e:	4619      	mov	r1, r3
 801a380:	68f8      	ldr	r0, [r7, #12]
 801a382:	f7ff fdb8 	bl	8019ef6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801a386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a388:	4613      	mov	r3, r2
 801a38a:	005b      	lsls	r3, r3, #1
 801a38c:	4413      	add	r3, r2
 801a38e:	00db      	lsls	r3, r3, #3
 801a390:	461a      	mov	r2, r3
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	4413      	add	r3, r2
 801a396:	6919      	ldr	r1, [r3, #16]
 801a398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a39a:	4613      	mov	r3, r2
 801a39c:	005b      	lsls	r3, r3, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	00db      	lsls	r3, r3, #3
 801a3a2:	461a      	mov	r2, r3
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	4413      	add	r3, r2
 801a3a8:	695b      	ldr	r3, [r3, #20]
 801a3aa:	461a      	mov	r2, r3
 801a3ac:	68f8      	ldr	r0, [r7, #12]
 801a3ae:	f004 fb8b 	bl	801eac8 <mg_send>
        break;
 801a3b2:	e040      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801a3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	461a      	mov	r2, r3
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	4413      	add	r3, r2
 801a3c4:	695b      	ldr	r3, [r3, #20]
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	f005 fe6e 	bl	80200aa <mg_ntohs>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	68f8      	ldr	r0, [r7, #12]
 801a3d4:	f7ff fd8f 	bl	8019ef6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801a3d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a3da:	4613      	mov	r3, r2
 801a3dc:	005b      	lsls	r3, r3, #1
 801a3de:	4413      	add	r3, r2
 801a3e0:	00db      	lsls	r3, r3, #3
 801a3e2:	461a      	mov	r2, r3
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	4413      	add	r3, r2
 801a3e8:	6919      	ldr	r1, [r3, #16]
 801a3ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a3ec:	4613      	mov	r3, r2
 801a3ee:	005b      	lsls	r3, r3, #1
 801a3f0:	4413      	add	r3, r2
 801a3f2:	00db      	lsls	r3, r3, #3
 801a3f4:	461a      	mov	r2, r3
 801a3f6:	68bb      	ldr	r3, [r7, #8]
 801a3f8:	4413      	add	r3, r2
 801a3fa:	695b      	ldr	r3, [r3, #20]
 801a3fc:	461a      	mov	r2, r3
 801a3fe:	68f8      	ldr	r0, [r7, #12]
 801a400:	f004 fb62 	bl	801eac8 <mg_send>
        break;
 801a404:	e017      	b.n	801a436 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 801a406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a408:	4613      	mov	r3, r2
 801a40a:	005b      	lsls	r3, r3, #1
 801a40c:	4413      	add	r3, r2
 801a40e:	00db      	lsls	r3, r3, #3
 801a410:	461a      	mov	r2, r3
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	4413      	add	r3, r2
 801a416:	685a      	ldr	r2, [r3, #4]
 801a418:	f107 0318 	add.w	r3, r7, #24
 801a41c:	4611      	mov	r1, r2
 801a41e:	4618      	mov	r0, r3
 801a420:	f7ff fd9e 	bl	8019f60 <encode_varint>
 801a424:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 801a426:	f107 0318 	add.w	r3, r7, #24
 801a42a:	69fa      	ldr	r2, [r7, #28]
 801a42c:	4619      	mov	r1, r3
 801a42e:	68f8      	ldr	r0, [r7, #12]
 801a430:	f004 fb4a 	bl	801eac8 <mg_send>
        break;
 801a434:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 801a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a438:	3301      	adds	r3, #1
 801a43a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	429a      	cmp	r2, r3
 801a442:	f4ff aedb 	bcc.w	801a1fc <mg_send_mqtt_properties+0x40>
    }
  }
}
 801a446:	bf00      	nop
 801a448:	bf00      	nop
 801a44a:	3728      	adds	r7, #40	@ 0x28
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801a450:	b580      	push	{r7, lr}
 801a452:	b08e      	sub	sp, #56	@ 0x38
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 801a45a:	683a      	ldr	r2, [r7, #0]
 801a45c:	f107 0314 	add.w	r3, r7, #20
 801a460:	3210      	adds	r2, #16
 801a462:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a466:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 801a46a:	230c      	movs	r3, #12
 801a46c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 801a46e:	2300      	movs	r3, #0
 801a470:	733b      	strb	r3, [r7, #12]
 801a472:	2304      	movs	r3, #4
 801a474:	737b      	strb	r3, [r7, #13]
 801a476:	234d      	movs	r3, #77	@ 0x4d
 801a478:	73bb      	strb	r3, [r7, #14]
 801a47a:	2351      	movs	r3, #81	@ 0x51
 801a47c:	73fb      	strb	r3, [r7, #15]
 801a47e:	2354      	movs	r3, #84	@ 0x54
 801a480:	743b      	strb	r3, [r7, #16]
 801a482:	2354      	movs	r3, #84	@ 0x54
 801a484:	747b      	strb	r3, [r7, #17]
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a48c:	74bb      	strb	r3, [r7, #18]
 801a48e:	2300      	movs	r3, #0
 801a490:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 801a492:	69bb      	ldr	r3, [r7, #24]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d110      	bne.n	801a4ba <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 801a498:	f107 031c 	add.w	r3, r7, #28
 801a49c:	2114      	movs	r1, #20
 801a49e:	4618      	mov	r0, r3
 801a4a0:	f005 fda4 	bl	801ffec <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 801a4aa:	f107 0314 	add.w	r3, r7, #20
 801a4ae:	f107 021c 	add.w	r2, r7, #28
 801a4b2:	4611      	mov	r1, r2
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f004 fe55 	bl	801f164 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 801a4ba:	7cbb      	ldrb	r3, [r7, #18]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d101      	bne.n	801a4c4 <mg_mqtt_login+0x74>
 801a4c0:	2304      	movs	r3, #4
 801a4c2:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 801a4c4:	7cbb      	ldrb	r3, [r7, #18]
 801a4c6:	2b05      	cmp	r3, #5
 801a4c8:	bf0c      	ite	eq
 801a4ca:	2301      	moveq	r3, #1
 801a4cc:	2300      	movne	r3, #0
 801a4ce:	b2d9      	uxtb	r1, r3
 801a4d0:	687a      	ldr	r2, [r7, #4]
 801a4d2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801a4d6:	f361 0382 	bfi	r3, r1, #2, #1
 801a4da:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a4e4:	00db      	lsls	r3, r3, #3
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	f003 0318 	and.w	r3, r3, #24
 801a4ec:	b2db      	uxtb	r3, r3
 801a4ee:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	685b      	ldr	r3, [r3, #4]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d00a      	beq.n	801a50e <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 801a4f8:	683b      	ldr	r3, [r7, #0]
 801a4fa:	685a      	ldr	r2, [r3, #4]
 801a4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4fe:	4413      	add	r3, r2
 801a500:	3302      	adds	r3, #2
 801a502:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 801a504:	7cfb      	ldrb	r3, [r7, #19]
 801a506:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a50a:	b2db      	uxtb	r3, r3
 801a50c:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	68db      	ldr	r3, [r3, #12]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d00a      	beq.n	801a52c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	68da      	ldr	r2, [r3, #12]
 801a51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a51c:	4413      	add	r3, r2
 801a51e:	3302      	adds	r3, #2
 801a520:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 801a522:	7cfb      	ldrb	r3, [r7, #19]
 801a524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a528:	b2db      	uxtb	r3, r3
 801a52a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	69db      	ldr	r3, [r3, #28]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d00d      	beq.n	801a550 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	69da      	ldr	r2, [r3, #28]
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a53c:	441a      	add	r2, r3
 801a53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a540:	4413      	add	r3, r2
 801a542:	3304      	adds	r3, #4
 801a544:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 801a546:	7cfb      	ldrb	r3, [r7, #19]
 801a548:	f043 0304 	orr.w	r3, r3, #4
 801a54c:	b2db      	uxtb	r3, r3
 801a54e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a556:	2b00      	cmp	r3, #0
 801a558:	d102      	bne.n	801a560 <mg_mqtt_login+0x110>
 801a55a:	69bb      	ldr	r3, [r7, #24]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d104      	bne.n	801a56a <mg_mqtt_login+0x11a>
 801a560:	7cfb      	ldrb	r3, [r7, #19]
 801a562:	f043 0302 	orr.w	r3, r3, #2
 801a566:	b2db      	uxtb	r3, r3
 801a568:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 801a56a:	683b      	ldr	r3, [r7, #0]
 801a56c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801a570:	2b00      	cmp	r3, #0
 801a572:	d004      	beq.n	801a57e <mg_mqtt_login+0x12e>
 801a574:	7cfb      	ldrb	r3, [r7, #19]
 801a576:	f043 0320 	orr.w	r3, r3, #32
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 801a57e:	69bb      	ldr	r3, [r7, #24]
 801a580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a582:	4413      	add	r3, r2
 801a584:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a58c:	f003 0304 	and.w	r3, r3, #4
 801a590:	b2db      	uxtb	r3, r3
 801a592:	2b00      	cmp	r3, #0
 801a594:	d01c      	beq.n	801a5d0 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a59e:	4619      	mov	r1, r3
 801a5a0:	4610      	mov	r0, r2
 801a5a2:	f7ff fdf3 	bl	801a18c <get_props_size>
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5aa:	4413      	add	r3, r2
 801a5ac:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 801a5ae:	7cfb      	ldrb	r3, [r7, #19]
 801a5b0:	f003 0304 	and.w	r3, r3, #4
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d00b      	beq.n	801a5d0 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a5c0:	4619      	mov	r1, r3
 801a5c2:	4610      	mov	r0, r2
 801a5c4:	f7ff fde2 	bl	801a18c <get_props_size>
 801a5c8:	4602      	mov	r2, r0
 801a5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5cc:	4413      	add	r3, r2
 801a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 801a5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	2101      	movs	r1, #1
 801a5d6:	6878      	ldr	r0, [r7, #4]
 801a5d8:	f7ff fc48 	bl	8019e6c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 801a5dc:	f107 030c 	add.w	r3, r7, #12
 801a5e0:	2208      	movs	r2, #8
 801a5e2:	4619      	mov	r1, r3
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f004 fa6f 	bl	801eac8 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f005 fd5b 	bl	80200aa <mg_ntohs>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	4619      	mov	r1, r3
 801a5f8:	6878      	ldr	r0, [r7, #4]
 801a5fa:	f7ff fc7c 	bl	8019ef6 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a604:	f003 0304 	and.w	r3, r3, #4
 801a608:	b2db      	uxtb	r3, r3
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d007      	beq.n	801a61e <mg_mqtt_login+0x1ce>
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a616:	461a      	mov	r2, r3
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f7ff fdcf 	bl	801a1bc <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 801a61e:	69bb      	ldr	r3, [r7, #24]
 801a620:	b29b      	uxth	r3, r3
 801a622:	4618      	mov	r0, r3
 801a624:	f005 fd41 	bl	80200aa <mg_ntohs>
 801a628:	4603      	mov	r3, r0
 801a62a:	4619      	mov	r1, r3
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f7ff fc62 	bl	8019ef6 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 801a632:	697b      	ldr	r3, [r7, #20]
 801a634:	69ba      	ldr	r2, [r7, #24]
 801a636:	4619      	mov	r1, r3
 801a638:	6878      	ldr	r0, [r7, #4]
 801a63a:	f004 fa45 	bl	801eac8 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 801a63e:	7cfb      	ldrb	r3, [r7, #19]
 801a640:	f003 0304 	and.w	r3, r3, #4
 801a644:	2b00      	cmp	r3, #0
 801a646:	d035      	beq.n	801a6b4 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a64e:	f003 0304 	and.w	r3, r3, #4
 801a652:	b2db      	uxtb	r3, r3
 801a654:	2b00      	cmp	r3, #0
 801a656:	d007      	beq.n	801a668 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 801a658:	683b      	ldr	r3, [r7, #0]
 801a65a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a660:	461a      	mov	r2, r3
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f7ff fdaa 	bl	801a1bc <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	69db      	ldr	r3, [r3, #28]
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	4618      	mov	r0, r3
 801a670:	f005 fd1b 	bl	80200aa <mg_ntohs>
 801a674:	4603      	mov	r3, r0
 801a676:	4619      	mov	r1, r3
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f7ff fc3c 	bl	8019ef6 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 801a67e:	683b      	ldr	r3, [r7, #0]
 801a680:	6999      	ldr	r1, [r3, #24]
 801a682:	683b      	ldr	r3, [r7, #0]
 801a684:	69db      	ldr	r3, [r3, #28]
 801a686:	461a      	mov	r2, r3
 801a688:	6878      	ldr	r0, [r7, #4]
 801a68a:	f004 fa1d 	bl	801eac8 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a692:	b29b      	uxth	r3, r3
 801a694:	4618      	mov	r0, r3
 801a696:	f005 fd08 	bl	80200aa <mg_ntohs>
 801a69a:	4603      	mov	r3, r0
 801a69c:	4619      	mov	r1, r3
 801a69e:	6878      	ldr	r0, [r7, #4]
 801a6a0:	f7ff fc29 	bl	8019ef6 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 801a6a4:	683b      	ldr	r3, [r7, #0]
 801a6a6:	6a19      	ldr	r1, [r3, #32]
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6ac:	461a      	mov	r2, r3
 801a6ae:	6878      	ldr	r0, [r7, #4]
 801a6b0:	f004 fa0a 	bl	801eac8 <mg_send>
  }
  if (opts->user.len > 0) {
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	685b      	ldr	r3, [r3, #4]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d012      	beq.n	801a6e2 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 801a6bc:	683b      	ldr	r3, [r7, #0]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f005 fcf1 	bl	80200aa <mg_ntohs>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	4619      	mov	r1, r3
 801a6cc:	6878      	ldr	r0, [r7, #4]
 801a6ce:	f7ff fc12 	bl	8019ef6 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	6819      	ldr	r1, [r3, #0]
 801a6d6:	683b      	ldr	r3, [r7, #0]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	461a      	mov	r2, r3
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f004 f9f3 	bl	801eac8 <mg_send>
  }
  if (opts->pass.len > 0) {
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	68db      	ldr	r3, [r3, #12]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d012      	beq.n	801a710 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	68db      	ldr	r3, [r3, #12]
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f005 fcda 	bl	80200aa <mg_ntohs>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	6878      	ldr	r0, [r7, #4]
 801a6fc:	f7ff fbfb 	bl	8019ef6 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 801a700:	683b      	ldr	r3, [r7, #0]
 801a702:	6899      	ldr	r1, [r3, #8]
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	68db      	ldr	r3, [r3, #12]
 801a708:	461a      	mov	r2, r3
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f004 f9dc 	bl	801eac8 <mg_send>
  }
}
 801a710:	bf00      	nop
 801a712:	3738      	adds	r7, #56	@ 0x38
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801a718:	b590      	push	{r4, r7, lr}
 801a71a:	b087      	sub	sp, #28
 801a71c:	af02      	add	r7, sp, #8
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801a726:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a72e:	005b      	lsls	r3, r3, #1
 801a730:	b25b      	sxtb	r3, r3
 801a732:	f003 0306 	and.w	r3, r3, #6
 801a736:	b25b      	sxtb	r3, r3
 801a738:	683a      	ldr	r2, [r7, #0]
 801a73a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 801a73e:	2a00      	cmp	r2, #0
 801a740:	d001      	beq.n	801a746 <mg_mqtt_pub+0x2e>
 801a742:	2201      	movs	r2, #1
 801a744:	e000      	b.n	801a748 <mg_mqtt_pub+0x30>
 801a746:	2200      	movs	r2, #0
 801a748:	4313      	orrs	r3, r2
 801a74a:	b25b      	sxtb	r3, r3
 801a74c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	69da      	ldr	r2, [r3, #28]
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a756:	4413      	add	r3, r2
 801a758:	3302      	adds	r3, #2
 801a75a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 801a75c:	4b51      	ldr	r3, [pc, #324]	@ (801a8a4 <mg_mqtt_pub+0x18c>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	2b02      	cmp	r3, #2
 801a762:	dd19      	ble.n	801a798 <mg_mqtt_pub+0x80>
 801a764:	4b50      	ldr	r3, [pc, #320]	@ (801a8a8 <mg_mqtt_pub+0x190>)
 801a766:	f241 1238 	movw	r2, #4408	@ 0x1138
 801a76a:	4950      	ldr	r1, [pc, #320]	@ (801a8ac <mg_mqtt_pub+0x194>)
 801a76c:	2003      	movs	r0, #3
 801a76e:	f7fe fa7d 	bl	8018c6c <mg_log_prefix>
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	69db      	ldr	r3, [r3, #28]
 801a77a:	461c      	mov	r4, r3
 801a77c:	683b      	ldr	r3, [r7, #0]
 801a77e:	699a      	ldr	r2, [r3, #24]
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a784:	4618      	mov	r0, r3
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	6a1b      	ldr	r3, [r3, #32]
 801a78a:	9301      	str	r3, [sp, #4]
 801a78c:	9000      	str	r0, [sp, #0]
 801a78e:	4613      	mov	r3, r2
 801a790:	4622      	mov	r2, r4
 801a792:	4847      	ldr	r0, [pc, #284]	@ (801a8b0 <mg_mqtt_pub+0x198>)
 801a794:	f7fe faba 	bl	8018d0c <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 801a798:	683b      	ldr	r3, [r7, #0]
 801a79a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d002      	beq.n	801a7a8 <mg_mqtt_pub+0x90>
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	3302      	adds	r3, #2
 801a7a6:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a7ae:	f003 0304 	and.w	r3, r3, #4
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d00b      	beq.n	801a7d0 <mg_mqtt_pub+0xb8>
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	4610      	mov	r0, r2
 801a7c4:	f7ff fce2 	bl	801a18c <get_props_size>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	4413      	add	r3, r2
 801a7ce:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d006      	beq.n	801a7e8 <mg_mqtt_pub+0xd0>
 801a7da:	89fb      	ldrh	r3, [r7, #14]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d003      	beq.n	801a7e8 <mg_mqtt_pub+0xd0>
 801a7e0:	7b7b      	ldrb	r3, [r7, #13]
 801a7e2:	f043 0308 	orr.w	r3, r3, #8
 801a7e6:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 801a7e8:	7b7a      	ldrb	r2, [r7, #13]
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	2103      	movs	r1, #3
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f7ff fb3c 	bl	8019e6c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	69db      	ldr	r3, [r3, #28]
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f005 fc55 	bl	80200aa <mg_ntohs>
 801a800:	4603      	mov	r3, r0
 801a802:	4619      	mov	r1, r3
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f7ff fb76 	bl	8019ef6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	6999      	ldr	r1, [r3, #24]
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	69db      	ldr	r3, [r3, #28]
 801a812:	461a      	mov	r2, r3
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f004 f957 	bl	801eac8 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 801a81a:	683b      	ldr	r3, [r7, #0]
 801a81c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a820:	2b00      	cmp	r3, #0
 801a822:	d01e      	beq.n	801a862 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 801a824:	89fb      	ldrh	r3, [r7, #14]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d112      	bne.n	801a850 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	685b      	ldr	r3, [r3, #4]
 801a82e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801a830:	3201      	adds	r2, #1
 801a832:	b292      	uxth	r2, r2
 801a834:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801a836:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d105      	bne.n	801a848 <mg_mqtt_pub+0x130>
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801a842:	3201      	adds	r2, #1
 801a844:	b292      	uxth	r2, r2
 801a846:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801a84e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 801a850:	89fb      	ldrh	r3, [r7, #14]
 801a852:	4618      	mov	r0, r3
 801a854:	f005 fc29 	bl	80200aa <mg_ntohs>
 801a858:	4603      	mov	r3, r0
 801a85a:	4619      	mov	r1, r3
 801a85c:	6878      	ldr	r0, [r7, #4]
 801a85e:	f7ff fb4a 	bl	8019ef6 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a868:	f003 0304 	and.w	r3, r3, #4
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d007      	beq.n	801a882 <mg_mqtt_pub+0x16a>
 801a872:	683b      	ldr	r3, [r7, #0]
 801a874:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801a876:	683b      	ldr	r3, [r7, #0]
 801a878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a87a:	461a      	mov	r2, r3
 801a87c:	6878      	ldr	r0, [r7, #4]
 801a87e:	f7ff fc9d 	bl	801a1bc <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a886:	2b00      	cmp	r3, #0
 801a888:	d007      	beq.n	801a89a <mg_mqtt_pub+0x182>
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	6a19      	ldr	r1, [r3, #32]
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a892:	461a      	mov	r2, r3
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f004 f917 	bl	801eac8 <mg_send>
  return id;
 801a89a:	89fb      	ldrh	r3, [r7, #14]
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3714      	adds	r7, #20
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd90      	pop	{r4, r7, pc}
 801a8a4:	20000288 	.word	0x20000288
 801a8a8:	08026ebc 	.word	0x08026ebc
 801a8ac:	0802487c 	.word	0x0802487c
 801a8b0:	08025c9c 	.word	0x08025c9c

0801a8b4 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b086      	sub	sp, #24
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a8c4:	f003 0303 	and.w	r3, r3, #3
 801a8c8:	b2db      	uxtb	r3, r3
 801a8ca:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a8d2:	f003 0304 	and.w	r3, r3, #4
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d009      	beq.n	801a8f0 <mg_mqtt_sub+0x3c>
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	4610      	mov	r0, r2
 801a8e8:	f7ff fc50 	bl	801a18c <get_props_size>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	e000      	b.n	801a8f2 <mg_mqtt_sub+0x3e>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 801a8f4:	683b      	ldr	r3, [r7, #0]
 801a8f6:	69da      	ldr	r2, [r3, #28]
 801a8f8:	697b      	ldr	r3, [r7, #20]
 801a8fa:	4413      	add	r3, r2
 801a8fc:	3305      	adds	r3, #5
 801a8fe:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 801a900:	693b      	ldr	r3, [r7, #16]
 801a902:	2202      	movs	r2, #2
 801a904:	2108      	movs	r1, #8
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	f7ff fab0 	bl	8019e6c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801a912:	3201      	adds	r2, #1
 801a914:	b292      	uxth	r2, r2
 801a916:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801a918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d105      	bne.n	801a92a <mg_mqtt_sub+0x76>
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801a924:	3201      	adds	r2, #1
 801a926:	b292      	uxth	r2, r2
 801a928:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	685b      	ldr	r3, [r3, #4]
 801a92e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801a930:	4618      	mov	r0, r3
 801a932:	f005 fbba 	bl	80200aa <mg_ntohs>
 801a936:	4603      	mov	r3, r0
 801a938:	4619      	mov	r1, r3
 801a93a:	6878      	ldr	r0, [r7, #4]
 801a93c:	f7ff fadb 	bl	8019ef6 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a946:	f003 0304 	and.w	r3, r3, #4
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d007      	beq.n	801a960 <mg_mqtt_sub+0xac>
 801a950:	683b      	ldr	r3, [r7, #0]
 801a952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801a954:	683b      	ldr	r3, [r7, #0]
 801a956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a958:	461a      	mov	r2, r3
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f7ff fc2e 	bl	801a1bc <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801a960:	683b      	ldr	r3, [r7, #0]
 801a962:	69db      	ldr	r3, [r3, #28]
 801a964:	b29b      	uxth	r3, r3
 801a966:	4618      	mov	r0, r3
 801a968:	f005 fb9f 	bl	80200aa <mg_ntohs>
 801a96c:	4603      	mov	r3, r0
 801a96e:	4619      	mov	r1, r3
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	f7ff fac0 	bl	8019ef6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801a976:	683b      	ldr	r3, [r7, #0]
 801a978:	6999      	ldr	r1, [r3, #24]
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	69db      	ldr	r3, [r3, #28]
 801a97e:	461a      	mov	r2, r3
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f004 f8a1 	bl	801eac8 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 801a986:	f107 030f 	add.w	r3, r7, #15
 801a98a:	2201      	movs	r2, #1
 801a98c:	4619      	mov	r1, r3
 801a98e:	6878      	ldr	r0, [r7, #4]
 801a990:	f004 f89a 	bl	801eac8 <mg_send>
}
 801a994:	bf00      	nop
 801a996:	3718      	adds	r7, #24
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}

0801a99c <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b08a      	sub	sp, #40	@ 0x28
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	60f8      	str	r0, [r7, #12]
 801a9a4:	60b9      	str	r1, [r7, #8]
 801a9a6:	603b      	str	r3, [r7, #0]
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	61fb      	str	r3, [r7, #28]
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 801a9ba:	2228      	movs	r2, #40	@ 0x28
 801a9bc:	2100      	movs	r1, #0
 801a9be:	6838      	ldr	r0, [r7, #0]
 801a9c0:	f006 fb5e 	bl	8021080 <memset>
  m->dgram.buf = (char *) buf;
 801a9c4:	683b      	ldr	r3, [r7, #0]
 801a9c6:	68fa      	ldr	r2, [r7, #12]
 801a9c8:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	2b01      	cmp	r3, #1
 801a9ce:	d801      	bhi.n	801a9d4 <mg_mqtt_parse+0x38>
 801a9d0:	2301      	movs	r3, #1
 801a9d2:	e104      	b.n	801abde <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	781b      	ldrb	r3, [r3, #0]
 801a9d8:	091b      	lsrs	r3, r3, #4
 801a9da:	b2da      	uxtb	r2, r3
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	085b      	lsrs	r3, r3, #1
 801a9e6:	b2db      	uxtb	r3, r3
 801a9e8:	f003 0303 	and.w	r3, r3, #3
 801a9ec:	b2da      	uxtb	r2, r3
 801a9ee:	683b      	ldr	r3, [r7, #0]
 801a9f0:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	61bb      	str	r3, [r7, #24]
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	3301      	adds	r3, #1
 801a9fe:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 801aa00:	e01f      	b.n	801aa42 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 801aa02:	6a3b      	ldr	r3, [r7, #32]
 801aa04:	1c5a      	adds	r2, r3, #1
 801aa06:	623a      	str	r2, [r7, #32]
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 801aa0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aa12:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 801aa16:	69ba      	ldr	r2, [r7, #24]
 801aa18:	4613      	mov	r3, r2
 801aa1a:	00db      	lsls	r3, r3, #3
 801aa1c:	1a9b      	subs	r3, r3, r2
 801aa1e:	fa01 f303 	lsl.w	r3, r1, r3
 801aa22:	461a      	mov	r2, r3
 801aa24:	69fb      	ldr	r3, [r7, #28]
 801aa26:	4413      	add	r3, r2
 801aa28:	61fb      	str	r3, [r7, #28]
    len_len++;
 801aa2a:	69bb      	ldr	r3, [r7, #24]
 801aa2c:	3301      	adds	r3, #1
 801aa2e:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 801aa30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	da0c      	bge.n	801aa52 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 801aa38:	69bb      	ldr	r3, [r7, #24]
 801aa3a:	2b03      	cmp	r3, #3
 801aa3c:	d901      	bls.n	801aa42 <mg_mqtt_parse+0xa6>
 801aa3e:	2302      	movs	r3, #2
 801aa40:	e0cd      	b.n	801abde <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 801aa42:	6a3a      	ldr	r2, [r7, #32]
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	1ad3      	subs	r3, r2, r3
 801aa48:	461a      	mov	r2, r3
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d8d8      	bhi.n	801aa02 <mg_mqtt_parse+0x66>
 801aa50:	e000      	b.n	801aa54 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 801aa52:	bf00      	nop
  }
  end = p + n;
 801aa54:	6a3a      	ldr	r2, [r7, #32]
 801aa56:	69fb      	ldr	r3, [r7, #28]
 801aa58:	4413      	add	r3, r2
 801aa5a:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 801aa5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	db05      	blt.n	801aa70 <mg_mqtt_parse+0xd4>
 801aa64:	68fa      	ldr	r2, [r7, #12]
 801aa66:	68bb      	ldr	r3, [r7, #8]
 801aa68:	4413      	add	r3, r2
 801aa6a:	697a      	ldr	r2, [r7, #20]
 801aa6c:	429a      	cmp	r2, r3
 801aa6e:	d901      	bls.n	801aa74 <mg_mqtt_parse+0xd8>
 801aa70:	2301      	movs	r3, #1
 801aa72:	e0b4      	b.n	801abde <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 801aa74:	697a      	ldr	r2, [r7, #20]
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	1ad3      	subs	r3, r2, r3
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	683b      	ldr	r3, [r7, #0]
 801aa7e:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	7e9b      	ldrb	r3, [r3, #26]
 801aa84:	2b0b      	cmp	r3, #11
 801aa86:	f300 80a8 	bgt.w	801abda <mg_mqtt_parse+0x23e>
 801aa8a:	2b04      	cmp	r3, #4
 801aa8c:	da10      	bge.n	801aab0 <mg_mqtt_parse+0x114>
 801aa8e:	2b02      	cmp	r3, #2
 801aa90:	d002      	beq.n	801aa98 <mg_mqtt_parse+0xfc>
 801aa92:	2b03      	cmp	r3, #3
 801aa94:	d024      	beq.n	801aae0 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 801aa96:	e0a0      	b.n	801abda <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 801aa98:	697a      	ldr	r2, [r7, #20]
 801aa9a:	6a3b      	ldr	r3, [r7, #32]
 801aa9c:	1ad3      	subs	r3, r2, r3
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	dc01      	bgt.n	801aaa6 <mg_mqtt_parse+0x10a>
 801aaa2:	2302      	movs	r3, #2
 801aaa4:	e09b      	b.n	801abde <mg_mqtt_parse+0x242>
      m->ack = p[1];
 801aaa6:	6a3b      	ldr	r3, [r7, #32]
 801aaa8:	785a      	ldrb	r2, [r3, #1]
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	771a      	strb	r2, [r3, #28]
      break;
 801aaae:	e095      	b.n	801abdc <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801aab0:	6a3b      	ldr	r3, [r7, #32]
 801aab2:	3302      	adds	r3, #2
 801aab4:	697a      	ldr	r2, [r7, #20]
 801aab6:	429a      	cmp	r2, r3
 801aab8:	d201      	bcs.n	801aabe <mg_mqtt_parse+0x122>
 801aaba:	2302      	movs	r3, #2
 801aabc:	e08f      	b.n	801abde <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801aabe:	6a3b      	ldr	r3, [r7, #32]
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	021b      	lsls	r3, r3, #8
 801aac4:	b21a      	sxth	r2, r3
 801aac6:	6a3b      	ldr	r3, [r7, #32]
 801aac8:	3301      	adds	r3, #1
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	b21b      	sxth	r3, r3
 801aace:	4313      	orrs	r3, r2
 801aad0:	b21b      	sxth	r3, r3
 801aad2:	b29a      	uxth	r2, r3
 801aad4:	683b      	ldr	r3, [r7, #0]
 801aad6:	831a      	strh	r2, [r3, #24]
      p += 2;
 801aad8:	6a3b      	ldr	r3, [r7, #32]
 801aada:	3302      	adds	r3, #2
 801aadc:	623b      	str	r3, [r7, #32]
      break;
 801aade:	e07d      	b.n	801abdc <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801aae0:	6a3b      	ldr	r3, [r7, #32]
 801aae2:	3302      	adds	r3, #2
 801aae4:	697a      	ldr	r2, [r7, #20]
 801aae6:	429a      	cmp	r2, r3
 801aae8:	d201      	bcs.n	801aaee <mg_mqtt_parse+0x152>
 801aaea:	2302      	movs	r3, #2
 801aaec:	e077      	b.n	801abde <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801aaee:	6a3b      	ldr	r3, [r7, #32]
 801aaf0:	781b      	ldrb	r3, [r3, #0]
 801aaf2:	021b      	lsls	r3, r3, #8
 801aaf4:	b21a      	sxth	r2, r3
 801aaf6:	6a3b      	ldr	r3, [r7, #32]
 801aaf8:	3301      	adds	r3, #1
 801aafa:	781b      	ldrb	r3, [r3, #0]
 801aafc:	b21b      	sxth	r3, r3
 801aafe:	4313      	orrs	r3, r2
 801ab00:	b21b      	sxth	r3, r3
 801ab02:	b29b      	uxth	r3, r3
 801ab04:	461a      	mov	r2, r3
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 801ab0a:	6a3b      	ldr	r3, [r7, #32]
 801ab0c:	1c9a      	adds	r2, r3, #2
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	3302      	adds	r3, #2
 801ab18:	6a3a      	ldr	r2, [r7, #32]
 801ab1a:	4413      	add	r3, r2
 801ab1c:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801ab1e:	6a3a      	ldr	r2, [r7, #32]
 801ab20:	697b      	ldr	r3, [r7, #20]
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d901      	bls.n	801ab2a <mg_mqtt_parse+0x18e>
 801ab26:	2302      	movs	r3, #2
 801ab28:	e059      	b.n	801abde <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	7edb      	ldrb	r3, [r3, #27]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d016      	beq.n	801ab60 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 801ab32:	6a3b      	ldr	r3, [r7, #32]
 801ab34:	3302      	adds	r3, #2
 801ab36:	697a      	ldr	r2, [r7, #20]
 801ab38:	429a      	cmp	r2, r3
 801ab3a:	d201      	bcs.n	801ab40 <mg_mqtt_parse+0x1a4>
 801ab3c:	2302      	movs	r3, #2
 801ab3e:	e04e      	b.n	801abde <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801ab40:	6a3b      	ldr	r3, [r7, #32]
 801ab42:	781b      	ldrb	r3, [r3, #0]
 801ab44:	021b      	lsls	r3, r3, #8
 801ab46:	b21a      	sxth	r2, r3
 801ab48:	6a3b      	ldr	r3, [r7, #32]
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	b21b      	sxth	r3, r3
 801ab50:	4313      	orrs	r3, r2
 801ab52:	b21b      	sxth	r3, r3
 801ab54:	b29a      	uxth	r2, r3
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	831a      	strh	r2, [r3, #24]
        p += 2;
 801ab5a:	6a3b      	ldr	r3, [r7, #32]
 801ab5c:	3302      	adds	r3, #2
 801ab5e:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801ab60:	6a3a      	ldr	r2, [r7, #32]
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	429a      	cmp	r2, r3
 801ab66:	d901      	bls.n	801ab6c <mg_mqtt_parse+0x1d0>
 801ab68:	2302      	movs	r3, #2
 801ab6a:	e038      	b.n	801abde <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 801ab6c:	79fb      	ldrb	r3, [r7, #7]
 801ab6e:	2b05      	cmp	r3, #5
 801ab70:	d123      	bne.n	801abba <mg_mqtt_parse+0x21e>
 801ab72:	6a3b      	ldr	r3, [r7, #32]
 801ab74:	3302      	adds	r3, #2
 801ab76:	697a      	ldr	r2, [r7, #20]
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d91e      	bls.n	801abba <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 801ab7c:	697a      	ldr	r2, [r7, #20]
 801ab7e:	6a3b      	ldr	r3, [r7, #32]
 801ab80:	1ad3      	subs	r3, r2, r3
 801ab82:	4619      	mov	r1, r3
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	3324      	adds	r3, #36	@ 0x24
 801ab88:	461a      	mov	r2, r3
 801ab8a:	6a38      	ldr	r0, [r7, #32]
 801ab8c:	f7ff fa0f 	bl	8019fae <decode_varint>
 801ab90:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 801ab92:	69bb      	ldr	r3, [r7, #24]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d101      	bne.n	801ab9c <mg_mqtt_parse+0x200>
 801ab98:	2302      	movs	r3, #2
 801ab9a:	e020      	b.n	801abde <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 801ab9c:	6a3a      	ldr	r2, [r7, #32]
 801ab9e:	69bb      	ldr	r3, [r7, #24]
 801aba0:	441a      	add	r2, r3
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	1ad3      	subs	r3, r2, r3
 801aba6:	461a      	mov	r2, r3
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801abb0:	69bb      	ldr	r3, [r7, #24]
 801abb2:	4413      	add	r3, r2
 801abb4:	6a3a      	ldr	r2, [r7, #32]
 801abb6:	4413      	add	r3, r2
 801abb8:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801abba:	6a3a      	ldr	r2, [r7, #32]
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d901      	bls.n	801abc6 <mg_mqtt_parse+0x22a>
 801abc2:	2302      	movs	r3, #2
 801abc4:	e00b      	b.n	801abde <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	6a3a      	ldr	r2, [r7, #32]
 801abca:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 801abcc:	697a      	ldr	r2, [r7, #20]
 801abce:	6a3b      	ldr	r3, [r7, #32]
 801abd0:	1ad3      	subs	r3, r2, r3
 801abd2:	461a      	mov	r2, r3
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	60da      	str	r2, [r3, #12]
      break;
 801abd8:	e000      	b.n	801abdc <mg_mqtt_parse+0x240>
      break;
 801abda:	bf00      	nop
  }
  return MQTT_OK;
 801abdc:	2300      	movs	r3, #0
}
 801abde:	4618      	mov	r0, r3
 801abe0:	3728      	adds	r7, #40	@ 0x28
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bd80      	pop	{r7, pc}
	...

0801abe8 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 801abe8:	b590      	push	{r4, r7, lr}
 801abea:	b099      	sub	sp, #100	@ 0x64
 801abec:	af02      	add	r7, sp, #8
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	2b07      	cmp	r3, #7
 801abf8:	f040 8124 	bne.w	801ae44 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ac02:	f003 0304 	and.w	r3, r3, #4
 801ac06:	b2db      	uxtb	r3, r3
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d001      	beq.n	801ac10 <mqtt_cb+0x28>
 801ac0c:	2305      	movs	r3, #5
 801ac0e:	e000      	b.n	801ac12 <mqtt_cb+0x2a>
 801ac10:	2304      	movs	r3, #4
 801ac12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801ac1e:	f107 0314 	add.w	r3, r7, #20
 801ac22:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ac26:	f7ff feb9 	bl	801a99c <mg_mqtt_parse>
 801ac2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 801ac2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	d118      	bne.n	801ac64 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 801ac32:	4b86      	ldr	r3, [pc, #536]	@ (801ae4c <mqtt_cb+0x264>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	dd0c      	ble.n	801ac54 <mqtt_cb+0x6c>
 801ac3a:	4b85      	ldr	r3, [pc, #532]	@ (801ae50 <mqtt_cb+0x268>)
 801ac3c:	f241 12ad 	movw	r2, #4525	@ 0x11ad
 801ac40:	4984      	ldr	r1, [pc, #528]	@ (801ae54 <mqtt_cb+0x26c>)
 801ac42:	2001      	movs	r0, #1
 801ac44:	f7fe f812 	bl	8018c6c <mg_log_prefix>
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac4c:	4619      	mov	r1, r3
 801ac4e:	4882      	ldr	r0, [pc, #520]	@ (801ae58 <mqtt_cb+0x270>)
 801ac50:	f7fe f85c 	bl	8018d0c <mg_log>
        c->is_closing = 1;
 801ac54:	68fa      	ldr	r2, [r7, #12]
 801ac56:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ac5a:	f043 0320 	orr.w	r3, r3, #32
 801ac5e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 801ac62:	e0ef      	b.n	801ae44 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 801ac64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	f040 80eb 	bne.w	801ae42 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 801ac6c:	4b77      	ldr	r3, [pc, #476]	@ (801ae4c <mqtt_cb+0x264>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2b03      	cmp	r3, #3
 801ac72:	dd17      	ble.n	801aca4 <mqtt_cb+0xbc>
 801ac74:	4b76      	ldr	r3, [pc, #472]	@ (801ae50 <mqtt_cb+0x268>)
 801ac76:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 801ac7a:	4976      	ldr	r1, [pc, #472]	@ (801ae54 <mqtt_cb+0x26c>)
 801ac7c:	2004      	movs	r0, #4
 801ac7e:	f7fd fff5 	bl	8018c6c <mg_log_prefix>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801ac86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac8e:	461c      	mov	r4, r3
 801ac90:	6a3b      	ldr	r3, [r7, #32]
 801ac92:	461a      	mov	r2, r3
 801ac94:	69fb      	ldr	r3, [r7, #28]
 801ac96:	9301      	str	r3, [sp, #4]
 801ac98:	9200      	str	r2, [sp, #0]
 801ac9a:	4623      	mov	r3, r4
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	486f      	ldr	r0, [pc, #444]	@ (801ae5c <mqtt_cb+0x274>)
 801aca0:	f7fe f834 	bl	8018d0c <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 801aca4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801aca8:	3b02      	subs	r3, #2
 801acaa:	2b04      	cmp	r3, #4
 801acac:	f200 80ba 	bhi.w	801ae24 <mqtt_cb+0x23c>
 801acb0:	a201      	add	r2, pc, #4	@ (adr r2, 801acb8 <mqtt_cb+0xd0>)
 801acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acb6:	bf00      	nop
 801acb8:	0801accd 	.word	0x0801accd
 801acbc:	0801ad41 	.word	0x0801ad41
 801acc0:	0801ae25 	.word	0x0801ae25
 801acc4:	0801adcb 	.word	0x0801adcb
 801acc8:	0801adf7 	.word	0x0801adf7
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 801accc:	f107 0314 	add.w	r3, r7, #20
 801acd0:	331c      	adds	r3, #28
 801acd2:	461a      	mov	r2, r3
 801acd4:	2111      	movs	r1, #17
 801acd6:	68f8      	ldr	r0, [r7, #12]
 801acd8:	f7f8 fbe8 	bl	80134ac <mg_call>
            if (mm.ack == 0) {
 801acdc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d112      	bne.n	801ad0a <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 801ace4:	4b59      	ldr	r3, [pc, #356]	@ (801ae4c <mqtt_cb+0x264>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	2b02      	cmp	r3, #2
 801acea:	f340 809a 	ble.w	801ae22 <mqtt_cb+0x23a>
 801acee:	4b58      	ldr	r3, [pc, #352]	@ (801ae50 <mqtt_cb+0x268>)
 801acf0:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801acf4:	4957      	ldr	r1, [pc, #348]	@ (801ae54 <mqtt_cb+0x26c>)
 801acf6:	2003      	movs	r0, #3
 801acf8:	f7fd ffb8 	bl	8018c6c <mg_log_prefix>
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad00:	4619      	mov	r1, r3
 801ad02:	4857      	ldr	r0, [pc, #348]	@ (801ae60 <mqtt_cb+0x278>)
 801ad04:	f7fe f802 	bl	8018d0c <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 801ad08:	e08b      	b.n	801ae22 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 801ad0a:	4b50      	ldr	r3, [pc, #320]	@ (801ae4c <mqtt_cb+0x264>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	dd0e      	ble.n	801ad30 <mqtt_cb+0x148>
 801ad12:	4b4f      	ldr	r3, [pc, #316]	@ (801ae50 <mqtt_cb+0x268>)
 801ad14:	f241 12b9 	movw	r2, #4537	@ 0x11b9
 801ad18:	494e      	ldr	r1, [pc, #312]	@ (801ae54 <mqtt_cb+0x26c>)
 801ad1a:	2001      	movs	r0, #1
 801ad1c:	f7fd ffa6 	bl	8018c6c <mg_log_prefix>
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad24:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801ad28:	4619      	mov	r1, r3
 801ad2a:	484e      	ldr	r0, [pc, #312]	@ (801ae64 <mqtt_cb+0x27c>)
 801ad2c:	f7fd ffee 	bl	8018d0c <mg_log>
              c->is_closing = 1;
 801ad30:	68fa      	ldr	r2, [r7, #12]
 801ad32:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ad36:	f043 0320 	orr.w	r3, r3, #32
 801ad3a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 801ad3e:	e070      	b.n	801ae22 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 801ad40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d038      	beq.n	801adba <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 801ad48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f005 f9ad 	bl	80200aa <mg_ntohs>
 801ad50:	4603      	mov	r3, r0
 801ad52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 801ad56:	2302      	movs	r3, #2
 801ad58:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ad60:	f003 0304 	and.w	r3, r3, #4
 801ad64:	b2db      	uxtb	r3, r3
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d002      	beq.n	801ad70 <mqtt_cb+0x188>
 801ad6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad6c:	3302      	adds	r3, #2
 801ad6e:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 801ad70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 801ad74:	2b02      	cmp	r3, #2
 801ad76:	d101      	bne.n	801ad7c <mqtt_cb+0x194>
 801ad78:	2105      	movs	r1, #5
 801ad7a:	e000      	b.n	801ad7e <mqtt_cb+0x196>
 801ad7c:	2104      	movs	r1, #4
 801ad7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad80:	2200      	movs	r2, #0
 801ad82:	68f8      	ldr	r0, [r7, #12]
 801ad84:	f7ff f872 	bl	8019e6c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 801ad88:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 801ad8c:	2202      	movs	r2, #2
 801ad8e:	4619      	mov	r1, r3
 801ad90:	68f8      	ldr	r0, [r7, #12]
 801ad92:	f003 fe99 	bl	801eac8 <mg_send>

              if (c->is_mqtt5) {
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ad9c:	f003 0304 	and.w	r3, r3, #4
 801ada0:	b2db      	uxtb	r3, r3
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d009      	beq.n	801adba <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 801ada6:	2300      	movs	r3, #0
 801ada8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 801adac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801adb0:	2202      	movs	r2, #2
 801adb2:	4619      	mov	r1, r3
 801adb4:	68f8      	ldr	r0, [r7, #12]
 801adb6:	f003 fe87 	bl	801eac8 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 801adba:	f107 0314 	add.w	r3, r7, #20
 801adbe:	461a      	mov	r2, r3
 801adc0:	2110      	movs	r1, #16
 801adc2:	68f8      	ldr	r0, [r7, #12]
 801adc4:	f7f8 fb72 	bl	80134ac <mg_call>
            break;
 801adc8:	e02c      	b.n	801ae24 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801adca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801adcc:	4618      	mov	r0, r3
 801adce:	f005 f96c 	bl	80200aa <mg_ntohs>
 801add2:	4603      	mov	r3, r0
 801add4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 801add6:	2302      	movs	r3, #2
 801add8:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 801adda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801addc:	2202      	movs	r2, #2
 801adde:	2106      	movs	r1, #6
 801ade0:	68f8      	ldr	r0, [r7, #12]
 801ade2:	f7ff f843 	bl	8019e6c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 801ade6:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 801adea:	2202      	movs	r2, #2
 801adec:	4619      	mov	r1, r3
 801adee:	68f8      	ldr	r0, [r7, #12]
 801adf0:	f003 fe6a 	bl	801eac8 <mg_send>
            break;
 801adf4:	e016      	b.n	801ae24 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801adf6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801adf8:	4618      	mov	r0, r3
 801adfa:	f005 f956 	bl	80200aa <mg_ntohs>
 801adfe:	4603      	mov	r3, r0
 801ae00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 801ae02:	2302      	movs	r3, #2
 801ae04:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 801ae06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae08:	2200      	movs	r2, #0
 801ae0a:	2107      	movs	r1, #7
 801ae0c:	68f8      	ldr	r0, [r7, #12]
 801ae0e:	f7ff f82d 	bl	8019e6c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 801ae12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801ae16:	2202      	movs	r2, #2
 801ae18:	4619      	mov	r1, r3
 801ae1a:	68f8      	ldr	r0, [r7, #12]
 801ae1c:	f003 fe54 	bl	801eac8 <mg_send>
            break;
 801ae20:	e000      	b.n	801ae24 <mqtt_cb+0x23c>
            break;
 801ae22:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 801ae24:	f107 0314 	add.w	r3, r7, #20
 801ae28:	461a      	mov	r2, r3
 801ae2a:	210f      	movs	r1, #15
 801ae2c:	68f8      	ldr	r0, [r7, #12]
 801ae2e:	f7f8 fb3d 	bl	80134ac <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	3338      	adds	r3, #56	@ 0x38
 801ae36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae38:	2100      	movs	r1, #0
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f7fd f806 	bl	8017e4c <mg_iobuf_del>
    for (;;) {
 801ae40:	e6dc      	b.n	801abfc <mqtt_cb+0x14>
      } else {
        break;
 801ae42:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801ae44:	bf00      	nop
 801ae46:	375c      	adds	r7, #92	@ 0x5c
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	bd90      	pop	{r4, r7, pc}
 801ae4c:	20000288 	.word	0x20000288
 801ae50:	08026ec8 	.word	0x08026ec8
 801ae54:	0802487c 	.word	0x0802487c
 801ae58:	08025cb4 	.word	0x08025cb4
 801ae5c:	08025cd0 	.word	0x08025cd0
 801ae60:	08025cf0 	.word	0x08025cf0
 801ae64:	08025d00 	.word	0x08025d00

0801ae68 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b096      	sub	sp, #88	@ 0x58
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	60f8      	str	r0, [r7, #12]
 801ae70:	60b9      	str	r1, [r7, #8]
 801ae72:	607a      	str	r2, [r7, #4]
 801ae74:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 801ae76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ae78:	683a      	ldr	r2, [r7, #0]
 801ae7a:	68b9      	ldr	r1, [r7, #8]
 801ae7c:	68f8      	ldr	r0, [r7, #12]
 801ae7e:	f000 fb5f 	bl	801b540 <mg_connect>
 801ae82:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 801ae84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d015      	beq.n	801aeb6 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 801ae8a:	f107 0314 	add.w	r3, r7, #20
 801ae8e:	2240      	movs	r2, #64	@ 0x40
 801ae90:	2100      	movs	r1, #0
 801ae92:	4618      	mov	r0, r3
 801ae94:	f006 f8f4 	bl	8021080 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d102      	bne.n	801aea4 <mg_mqtt_connect+0x3c>
 801ae9e:	f107 0314 	add.w	r3, r7, #20
 801aea2:	e000      	b.n	801aea6 <mg_mqtt_connect+0x3e>
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	4619      	mov	r1, r3
 801aea8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801aeaa:	f7ff fad1 	bl	801a450 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 801aeae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aeb0:	4a03      	ldr	r2, [pc, #12]	@ (801aec0 <mg_mqtt_connect+0x58>)
 801aeb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 801aeb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801aeb8:	4618      	mov	r0, r3
 801aeba:	3758      	adds	r7, #88	@ 0x58
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}
 801aec0:	0801abe9 	.word	0x0801abe9

0801aec4 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b086      	sub	sp, #24
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	60f8      	str	r0, [r7, #12]
 801aecc:	60b9      	str	r1, [r7, #8]
 801aece:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aed4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	68ba      	ldr	r2, [r7, #8]
 801aee0:	4805      	ldr	r0, [pc, #20]	@ (801aef8 <mg_vprintf+0x34>)
 801aee2:	f7f9 f813 	bl	8013f0c <mg_vxprintf>
  return c->send.len - old;
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aeea:	697b      	ldr	r3, [r7, #20]
 801aeec:	1ad3      	subs	r3, r2, r3
}
 801aeee:	4618      	mov	r0, r3
 801aef0:	3718      	adds	r7, #24
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}
 801aef6:	bf00      	nop
 801aef8:	0801ec35 	.word	0x0801ec35

0801aefc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 801aefc:	b40e      	push	{r1, r2, r3}
 801aefe:	b580      	push	{r7, lr}
 801af00:	b085      	sub	sp, #20
 801af02:	af00      	add	r7, sp, #0
 801af04:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 801af06:	2300      	movs	r3, #0
 801af08:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801af0a:	f107 0320 	add.w	r3, r7, #32
 801af0e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 801af10:	f107 0308 	add.w	r3, r7, #8
 801af14:	461a      	mov	r2, r3
 801af16:	69f9      	ldr	r1, [r7, #28]
 801af18:	6878      	ldr	r0, [r7, #4]
 801af1a:	f7ff ffd3 	bl	801aec4 <mg_vprintf>
 801af1e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 801af20:	68fb      	ldr	r3, [r7, #12]
}
 801af22:	4618      	mov	r0, r3
 801af24:	3714      	adds	r7, #20
 801af26:	46bd      	mov	sp, r7
 801af28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801af2c:	b003      	add	sp, #12
 801af2e:	4770      	bx	lr

0801af30 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 801af30:	b580      	push	{r7, lr}
 801af32:	b088      	sub	sp, #32
 801af34:	af00      	add	r7, sp, #0
 801af36:	f107 0308 	add.w	r3, r7, #8
 801af3a:	e883 0003 	stmia.w	r3, {r0, r1}
 801af3e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 801af40:	4811      	ldr	r0, [pc, #68]	@ (801af88 <mg_atonl+0x58>)
 801af42:	f005 f899 	bl	8020078 <mg_ntohl>
 801af46:	4603      	mov	r3, r0
 801af48:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 801af4a:	f107 0318 	add.w	r3, r7, #24
 801af4e:	490f      	ldr	r1, [pc, #60]	@ (801af8c <mg_atonl+0x5c>)
 801af50:	4618      	mov	r0, r3
 801af52:	f004 f907 	bl	801f164 <mg_str_s>
 801af56:	f107 0318 	add.w	r3, r7, #24
 801af5a:	cb0c      	ldmia	r3, {r2, r3}
 801af5c:	f107 0108 	add.w	r1, r7, #8
 801af60:	c903      	ldmia	r1, {r0, r1}
 801af62:	f004 f98b 	bl	801f27c <mg_strcasecmp>
 801af66:	4603      	mov	r3, r0
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d001      	beq.n	801af70 <mg_atonl+0x40>
 801af6c:	2300      	movs	r3, #0
 801af6e:	e006      	b.n	801af7e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	697a      	ldr	r2, [r7, #20]
 801af74:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2200      	movs	r2, #0
 801af7a:	74da      	strb	r2, [r3, #19]
  return true;
 801af7c:	2301      	movs	r3, #1
}
 801af7e:	4618      	mov	r0, r3
 801af80:	3720      	adds	r7, #32
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
 801af86:	bf00      	nop
 801af88:	7f000001 	.word	0x7f000001
 801af8c:	08025d20 	.word	0x08025d20

0801af90 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801af90:	b580      	push	{r7, lr}
 801af92:	b084      	sub	sp, #16
 801af94:	af00      	add	r7, sp, #0
 801af96:	f107 0308 	add.w	r3, r7, #8
 801af9a:	e883 0003 	stmia.w	r3, {r0, r1}
 801af9e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d001      	beq.n	801afaa <mg_atone+0x1a>
 801afa6:	2300      	movs	r3, #0
 801afa8:	e009      	b.n	801afbe <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2210      	movs	r2, #16
 801afae:	2100      	movs	r1, #0
 801afb0:	4618      	mov	r0, r3
 801afb2:	f006 f865 	bl	8021080 <memset>
  addr->is_ip6 = false;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	2200      	movs	r2, #0
 801afba:	74da      	strb	r2, [r3, #19]
  return true;
 801afbc:	2301      	movs	r3, #1
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	3710      	adds	r7, #16
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}

0801afc6 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801afc6:	b480      	push	{r7}
 801afc8:	b089      	sub	sp, #36	@ 0x24
 801afca:	af00      	add	r7, sp, #0
 801afcc:	f107 0308 	add.w	r3, r7, #8
 801afd0:	e883 0003 	stmia.w	r3, {r0, r1}
 801afd4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801afd6:	2300      	movs	r3, #0
 801afd8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 801afda:	2300      	movs	r3, #0
 801afdc:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 801afde:	2300      	movs	r3, #0
 801afe0:	61fb      	str	r3, [r7, #28]
 801afe2:	e049      	b.n	801b078 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801afe4:	68ba      	ldr	r2, [r7, #8]
 801afe6:	69fb      	ldr	r3, [r7, #28]
 801afe8:	4413      	add	r3, r2
 801afea:	781b      	ldrb	r3, [r3, #0]
 801afec:	2b2f      	cmp	r3, #47	@ 0x2f
 801afee:	d925      	bls.n	801b03c <mg_aton4+0x76>
 801aff0:	68ba      	ldr	r2, [r7, #8]
 801aff2:	69fb      	ldr	r3, [r7, #28]
 801aff4:	4413      	add	r3, r2
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	2b39      	cmp	r3, #57	@ 0x39
 801affa:	d81f      	bhi.n	801b03c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801affc:	f107 0210 	add.w	r2, r7, #16
 801b000:	69bb      	ldr	r3, [r7, #24]
 801b002:	4413      	add	r3, r2
 801b004:	781b      	ldrb	r3, [r3, #0]
 801b006:	461a      	mov	r2, r3
 801b008:	4613      	mov	r3, r2
 801b00a:	009b      	lsls	r3, r3, #2
 801b00c:	4413      	add	r3, r2
 801b00e:	005b      	lsls	r3, r3, #1
 801b010:	4619      	mov	r1, r3
 801b012:	68ba      	ldr	r2, [r7, #8]
 801b014:	69fb      	ldr	r3, [r7, #28]
 801b016:	4413      	add	r3, r2
 801b018:	781b      	ldrb	r3, [r3, #0]
 801b01a:	3b30      	subs	r3, #48	@ 0x30
 801b01c:	440b      	add	r3, r1
 801b01e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	2bff      	cmp	r3, #255	@ 0xff
 801b024:	dd01      	ble.n	801b02a <mg_aton4+0x64>
 801b026:	2300      	movs	r3, #0
 801b028:	e03d      	b.n	801b0a6 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 801b02a:	697b      	ldr	r3, [r7, #20]
 801b02c:	b2d9      	uxtb	r1, r3
 801b02e:	f107 0210 	add.w	r2, r7, #16
 801b032:	69bb      	ldr	r3, [r7, #24]
 801b034:	4413      	add	r3, r2
 801b036:	460a      	mov	r2, r1
 801b038:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801b03a:	e01a      	b.n	801b072 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 801b03c:	68ba      	ldr	r2, [r7, #8]
 801b03e:	69fb      	ldr	r3, [r7, #28]
 801b040:	4413      	add	r3, r2
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	2b2e      	cmp	r3, #46	@ 0x2e
 801b046:	d112      	bne.n	801b06e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801b048:	69bb      	ldr	r3, [r7, #24]
 801b04a:	2b02      	cmp	r3, #2
 801b04c:	d809      	bhi.n	801b062 <mg_aton4+0x9c>
 801b04e:	69fb      	ldr	r3, [r7, #28]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d006      	beq.n	801b062 <mg_aton4+0x9c>
 801b054:	68ba      	ldr	r2, [r7, #8]
 801b056:	69fb      	ldr	r3, [r7, #28]
 801b058:	3b01      	subs	r3, #1
 801b05a:	4413      	add	r3, r2
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	2b2e      	cmp	r3, #46	@ 0x2e
 801b060:	d101      	bne.n	801b066 <mg_aton4+0xa0>
 801b062:	2300      	movs	r3, #0
 801b064:	e01f      	b.n	801b0a6 <mg_aton4+0xe0>
      num_dots++;
 801b066:	69bb      	ldr	r3, [r7, #24]
 801b068:	3301      	adds	r3, #1
 801b06a:	61bb      	str	r3, [r7, #24]
 801b06c:	e001      	b.n	801b072 <mg_aton4+0xac>
    } else {
      return false;
 801b06e:	2300      	movs	r3, #0
 801b070:	e019      	b.n	801b0a6 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 801b072:	69fb      	ldr	r3, [r7, #28]
 801b074:	3301      	adds	r3, #1
 801b076:	61fb      	str	r3, [r7, #28]
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	69fa      	ldr	r2, [r7, #28]
 801b07c:	429a      	cmp	r2, r3
 801b07e:	d3b1      	bcc.n	801afe4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801b080:	69bb      	ldr	r3, [r7, #24]
 801b082:	2b03      	cmp	r3, #3
 801b084:	d106      	bne.n	801b094 <mg_aton4+0xce>
 801b086:	68ba      	ldr	r2, [r7, #8]
 801b088:	69fb      	ldr	r3, [r7, #28]
 801b08a:	3b01      	subs	r3, #1
 801b08c:	4413      	add	r3, r2
 801b08e:	781b      	ldrb	r3, [r3, #0]
 801b090:	2b2e      	cmp	r3, #46	@ 0x2e
 801b092:	d101      	bne.n	801b098 <mg_aton4+0xd2>
 801b094:	2300      	movs	r3, #0
 801b096:	e006      	b.n	801b0a6 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	693a      	ldr	r2, [r7, #16]
 801b09c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	74da      	strb	r2, [r3, #19]
  return true;
 801b0a4:	2301      	movs	r3, #1
}
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	3724      	adds	r7, #36	@ 0x24
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b0:	4770      	bx	lr

0801b0b2 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 801b0b2:	b580      	push	{r7, lr}
 801b0b4:	b088      	sub	sp, #32
 801b0b6:	af00      	add	r7, sp, #0
 801b0b8:	f107 0308 	add.w	r3, r7, #8
 801b0bc:	e883 0003 	stmia.w	r3, {r0, r1}
 801b0c0:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	2b0d      	cmp	r3, #13
 801b0c6:	d801      	bhi.n	801b0cc <mg_v4mapped+0x1a>
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	e056      	b.n	801b17a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	781b      	ldrb	r3, [r3, #0]
 801b0d0:	2b3a      	cmp	r3, #58	@ 0x3a
 801b0d2:	d109      	bne.n	801b0e8 <mg_v4mapped+0x36>
 801b0d4:	68bb      	ldr	r3, [r7, #8]
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	781b      	ldrb	r3, [r3, #0]
 801b0da:	2b3a      	cmp	r3, #58	@ 0x3a
 801b0dc:	d104      	bne.n	801b0e8 <mg_v4mapped+0x36>
 801b0de:	68bb      	ldr	r3, [r7, #8]
 801b0e0:	3306      	adds	r3, #6
 801b0e2:	781b      	ldrb	r3, [r3, #0]
 801b0e4:	2b3a      	cmp	r3, #58	@ 0x3a
 801b0e6:	d001      	beq.n	801b0ec <mg_v4mapped+0x3a>
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	e046      	b.n	801b17a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801b0ec:	2302      	movs	r3, #2
 801b0ee:	61fb      	str	r3, [r7, #28]
 801b0f0:	e010      	b.n	801b114 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 801b0f2:	68ba      	ldr	r2, [r7, #8]
 801b0f4:	69fb      	ldr	r3, [r7, #28]
 801b0f6:	4413      	add	r3, r2
 801b0f8:	781b      	ldrb	r3, [r3, #0]
 801b0fa:	2b66      	cmp	r3, #102	@ 0x66
 801b0fc:	d007      	beq.n	801b10e <mg_v4mapped+0x5c>
 801b0fe:	68ba      	ldr	r2, [r7, #8]
 801b100:	69fb      	ldr	r3, [r7, #28]
 801b102:	4413      	add	r3, r2
 801b104:	781b      	ldrb	r3, [r3, #0]
 801b106:	2b46      	cmp	r3, #70	@ 0x46
 801b108:	d001      	beq.n	801b10e <mg_v4mapped+0x5c>
 801b10a:	2300      	movs	r3, #0
 801b10c:	e035      	b.n	801b17a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801b10e:	69fb      	ldr	r3, [r7, #28]
 801b110:	3301      	adds	r3, #1
 801b112:	61fb      	str	r3, [r7, #28]
 801b114:	69fb      	ldr	r3, [r7, #28]
 801b116:	2b05      	cmp	r3, #5
 801b118:	ddeb      	ble.n	801b0f2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	1dd9      	adds	r1, r3, #7
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	1fda      	subs	r2, r3, #7
 801b122:	f107 0314 	add.w	r3, r7, #20
 801b126:	4618      	mov	r0, r3
 801b128:	f004 f839 	bl	801f19e <mg_str_n>
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	f107 0314 	add.w	r3, r7, #20
 801b132:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b136:	f7ff ff46 	bl	801afc6 <mg_aton4>
 801b13a:	4603      	mov	r3, r0
 801b13c:	f083 0301 	eor.w	r3, r3, #1
 801b140:	b2db      	uxtb	r3, r3
 801b142:	2b00      	cmp	r3, #0
 801b144:	d001      	beq.n	801b14a <mg_v4mapped+0x98>
 801b146:	2300      	movs	r3, #0
 801b148:	e017      	b.n	801b17a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2210      	movs	r2, #16
 801b154:	2100      	movs	r1, #0
 801b156:	4618      	mov	r0, r3
 801b158:	f005 ff92 	bl	8021080 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	22ff      	movs	r2, #255	@ 0xff
 801b160:	72da      	strb	r2, [r3, #11]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	7ada      	ldrb	r2, [r3, #11]
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	330c      	adds	r3, #12
 801b16e:	693a      	ldr	r2, [r7, #16]
 801b170:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2201      	movs	r2, #1
 801b176:	74da      	strb	r2, [r3, #19]
  return true;
 801b178:	2301      	movs	r3, #1
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3720      	adds	r7, #32
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}

0801b182 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 801b182:	b580      	push	{r7, lr}
 801b184:	b090      	sub	sp, #64	@ 0x40
 801b186:	af02      	add	r7, sp, #8
 801b188:	f107 0308 	add.w	r3, r7, #8
 801b18c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b190:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 801b192:	2300      	movs	r3, #0
 801b194:	633b      	str	r3, [r7, #48]	@ 0x30
 801b196:	2300      	movs	r3, #0
 801b198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b19a:	232a      	movs	r3, #42	@ 0x2a
 801b19c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	2200      	movs	r2, #0
 801b1a2:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	2b02      	cmp	r3, #2
 801b1a8:	d909      	bls.n	801b1be <mg_aton6+0x3c>
 801b1aa:	68bb      	ldr	r3, [r7, #8]
 801b1ac:	781b      	ldrb	r3, [r3, #0]
 801b1ae:	2b5b      	cmp	r3, #91	@ 0x5b
 801b1b0:	d105      	bne.n	801b1be <mg_aton6+0x3c>
 801b1b2:	68bb      	ldr	r3, [r7, #8]
 801b1b4:	3301      	adds	r3, #1
 801b1b6:	60bb      	str	r3, [r7, #8]
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	3b02      	subs	r3, #2
 801b1bc:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 801b1be:	687a      	ldr	r2, [r7, #4]
 801b1c0:	f107 0308 	add.w	r3, r7, #8
 801b1c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1c8:	f7ff ff73 	bl	801b0b2 <mg_v4mapped>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d001      	beq.n	801b1d6 <mg_aton6+0x54>
 801b1d2:	2301      	movs	r3, #1
 801b1d4:	e0e1      	b.n	801b39a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 801b1da:	e0b0      	b.n	801b33e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801b1dc:	68ba      	ldr	r2, [r7, #8]
 801b1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1e0:	4413      	add	r3, r2
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	2b2f      	cmp	r3, #47	@ 0x2f
 801b1e6:	d905      	bls.n	801b1f4 <mg_aton6+0x72>
 801b1e8:	68ba      	ldr	r2, [r7, #8]
 801b1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1ec:	4413      	add	r3, r2
 801b1ee:	781b      	ldrb	r3, [r3, #0]
 801b1f0:	2b39      	cmp	r3, #57	@ 0x39
 801b1f2:	d917      	bls.n	801b224 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801b1f4:	68ba      	ldr	r2, [r7, #8]
 801b1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1f8:	4413      	add	r3, r2
 801b1fa:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801b1fc:	2b60      	cmp	r3, #96	@ 0x60
 801b1fe:	d905      	bls.n	801b20c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801b200:	68ba      	ldr	r2, [r7, #8]
 801b202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b204:	4413      	add	r3, r2
 801b206:	781b      	ldrb	r3, [r3, #0]
 801b208:	2b66      	cmp	r3, #102	@ 0x66
 801b20a:	d90b      	bls.n	801b224 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801b20c:	68ba      	ldr	r2, [r7, #8]
 801b20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b210:	4413      	add	r3, r2
 801b212:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801b214:	2b40      	cmp	r3, #64	@ 0x40
 801b216:	d933      	bls.n	801b280 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801b218:	68ba      	ldr	r2, [r7, #8]
 801b21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b21c:	4413      	add	r3, r2
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	2b46      	cmp	r3, #70	@ 0x46
 801b222:	d82d      	bhi.n	801b280 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 801b224:	2300      	movs	r3, #0
 801b226:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 801b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b22a:	3303      	adds	r3, #3
 801b22c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b22e:	429a      	cmp	r2, r3
 801b230:	d901      	bls.n	801b236 <mg_aton6+0xb4>
 801b232:	2300      	movs	r3, #0
 801b234:	e0b1      	b.n	801b39a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 801b236:	68ba      	ldr	r2, [r7, #8]
 801b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b23a:	18d1      	adds	r1, r2, r3
 801b23c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	1c5a      	adds	r2, r3, #1
 801b244:	f107 0318 	add.w	r3, r7, #24
 801b248:	4618      	mov	r0, r3
 801b24a:	f003 ffa8 	bl	801f19e <mg_str_n>
 801b24e:	f107 0314 	add.w	r3, r7, #20
 801b252:	2204      	movs	r2, #4
 801b254:	9200      	str	r2, [sp, #0]
 801b256:	2210      	movs	r2, #16
 801b258:	f107 0118 	add.w	r1, r7, #24
 801b25c:	c903      	ldmia	r1, {r0, r1}
 801b25e:	f004 f9a5 	bl	801f5ac <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 801b262:	697b      	ldr	r3, [r7, #20]
 801b264:	0a1b      	lsrs	r3, r3, #8
 801b266:	b2d9      	uxtb	r1, r3
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b26c:	4413      	add	r3, r2
 801b26e:	460a      	mov	r2, r1
 801b270:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 801b272:	697a      	ldr	r2, [r7, #20]
 801b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b276:	3301      	adds	r3, #1
 801b278:	b2d1      	uxtb	r1, r2
 801b27a:	687a      	ldr	r2, [r7, #4]
 801b27c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801b27e:	e05b      	b.n	801b338 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 801b280:	68ba      	ldr	r2, [r7, #8]
 801b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b284:	4413      	add	r3, r2
 801b286:	781b      	ldrb	r3, [r3, #0]
 801b288:	2b3a      	cmp	r3, #58	@ 0x3a
 801b28a:	d134      	bne.n	801b2f6 <mg_aton6+0x174>
      j = i + 1;
 801b28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b28e:	3301      	adds	r3, #1
 801b290:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 801b292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b294:	2b00      	cmp	r3, #0
 801b296:	d014      	beq.n	801b2c2 <mg_aton6+0x140>
 801b298:	68ba      	ldr	r2, [r7, #8]
 801b29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b29c:	3b01      	subs	r3, #1
 801b29e:	4413      	add	r3, r2
 801b2a0:	781b      	ldrb	r3, [r3, #0]
 801b2a2:	2b3a      	cmp	r3, #58	@ 0x3a
 801b2a4:	d10d      	bne.n	801b2c2 <mg_aton6+0x140>
        dc = n;  // Double colon
 801b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801b2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	d90f      	bls.n	801b2d0 <mg_aton6+0x14e>
 801b2b0:	68ba      	ldr	r2, [r7, #8]
 801b2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2b4:	3b02      	subs	r3, #2
 801b2b6:	4413      	add	r3, r2
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	2b3a      	cmp	r3, #58	@ 0x3a
 801b2bc:	d108      	bne.n	801b2d0 <mg_aton6+0x14e>
 801b2be:	2300      	movs	r3, #0
 801b2c0:	e06b      	b.n	801b39a <mg_aton6+0x218>
      } else if (i > 0) {
 801b2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d004      	beq.n	801b2d2 <mg_aton6+0x150>
        n += 2;
 801b2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2ca:	3302      	adds	r3, #2
 801b2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b2ce:	e000      	b.n	801b2d2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801b2d0:	bf00      	nop
      }
      if (n > 14) return false;
 801b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2d4:	2b0e      	cmp	r3, #14
 801b2d6:	d901      	bls.n	801b2dc <mg_aton6+0x15a>
 801b2d8:	2300      	movs	r3, #0
 801b2da:	e05e      	b.n	801b39a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 801b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2de:	3301      	adds	r3, #1
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	2100      	movs	r1, #0
 801b2e4:	54d1      	strb	r1, [r2, r3]
 801b2e6:	687a      	ldr	r2, [r7, #4]
 801b2e8:	5cd1      	ldrb	r1, [r2, r3]
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2ee:	4413      	add	r3, r2
 801b2f0:	460a      	mov	r2, r1
 801b2f2:	701a      	strb	r2, [r3, #0]
 801b2f4:	e020      	b.n	801b338 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 801b2f6:	68ba      	ldr	r2, [r7, #8]
 801b2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2fa:	4413      	add	r3, r2
 801b2fc:	781b      	ldrb	r3, [r3, #0]
 801b2fe:	2b25      	cmp	r3, #37	@ 0x25
 801b300:	d118      	bne.n	801b334 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801b302:	68ba      	ldr	r2, [r7, #8]
 801b304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b306:	3301      	adds	r3, #1
 801b308:	18d1      	adds	r1, r2, r3
 801b30a:	68fa      	ldr	r2, [r7, #12]
 801b30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b30e:	1ad3      	subs	r3, r2, r3
 801b310:	1e5a      	subs	r2, r3, #1
 801b312:	f107 0320 	add.w	r3, r7, #32
 801b316:	4618      	mov	r0, r3
 801b318:	f003 ff41 	bl	801f19e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801b320:	2201      	movs	r2, #1
 801b322:	9200      	str	r2, [sp, #0]
 801b324:	220a      	movs	r2, #10
 801b326:	f107 0120 	add.w	r1, r7, #32
 801b32a:	c903      	ldmia	r1, {r0, r1}
 801b32c:	f004 f93e 	bl	801f5ac <mg_str_to_num>
 801b330:	4603      	mov	r3, r0
 801b332:	e032      	b.n	801b39a <mg_aton6+0x218>
    } else {
      return false;
 801b334:	2300      	movs	r3, #0
 801b336:	e030      	b.n	801b39a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801b338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b33a:	3301      	adds	r3, #1
 801b33c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b342:	429a      	cmp	r2, r3
 801b344:	f4ff af4a 	bcc.w	801b1dc <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 801b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b34a:	2b0d      	cmp	r3, #13
 801b34c:	d804      	bhi.n	801b358 <mg_aton6+0x1d6>
 801b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b350:	2b2a      	cmp	r3, #42	@ 0x2a
 801b352:	d101      	bne.n	801b358 <mg_aton6+0x1d6>
 801b354:	2300      	movs	r3, #0
 801b356:	e020      	b.n	801b39a <mg_aton6+0x218>
  if (n < 14) {
 801b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b35a:	2b0d      	cmp	r3, #13
 801b35c:	d819      	bhi.n	801b392 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 801b35e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b362:	1ad3      	subs	r3, r2, r3
 801b364:	330e      	adds	r3, #14
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	18d0      	adds	r0, r2, r3
 801b36a:	687a      	ldr	r2, [r7, #4]
 801b36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b36e:	18d1      	adds	r1, r2, r3
 801b370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b374:	1ad3      	subs	r3, r2, r3
 801b376:	3302      	adds	r3, #2
 801b378:	461a      	mov	r2, r3
 801b37a:	f005 fe67 	bl	802104c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b382:	18d0      	adds	r0, r2, r3
 801b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b386:	f1c3 030e 	rsb	r3, r3, #14
 801b38a:	461a      	mov	r2, r3
 801b38c:	2100      	movs	r1, #0
 801b38e:	f005 fe77 	bl	8021080 <memset>
  }

  addr->is_ip6 = true;
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	2201      	movs	r2, #1
 801b396:	74da      	strb	r2, [r3, #19]
  return true;
 801b398:	2301      	movs	r3, #1
}
 801b39a:	4618      	mov	r0, r3
 801b39c:	3738      	adds	r7, #56	@ 0x38
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	bd80      	pop	{r7, pc}

0801b3a2 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 801b3a2:	b580      	push	{r7, lr}
 801b3a4:	b084      	sub	sp, #16
 801b3a6:	af00      	add	r7, sp, #0
 801b3a8:	f107 0308 	add.w	r3, r7, #8
 801b3ac:	e883 0003 	stmia.w	r3, {r0, r1}
 801b3b0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801b3b2:	687a      	ldr	r2, [r7, #4]
 801b3b4:	f107 0308 	add.w	r3, r7, #8
 801b3b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3bc:	f7ff fde8 	bl	801af90 <mg_atone>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d11d      	bne.n	801b402 <mg_aton+0x60>
 801b3c6:	687a      	ldr	r2, [r7, #4]
 801b3c8:	f107 0308 	add.w	r3, r7, #8
 801b3cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3d0:	f7ff fdae 	bl	801af30 <mg_atonl>
 801b3d4:	4603      	mov	r3, r0
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d113      	bne.n	801b402 <mg_aton+0x60>
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	f107 0308 	add.w	r3, r7, #8
 801b3e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3e4:	f7ff fdef 	bl	801afc6 <mg_aton4>
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d109      	bne.n	801b402 <mg_aton+0x60>
         mg_aton6(str, addr);
 801b3ee:	687a      	ldr	r2, [r7, #4]
 801b3f0:	f107 0308 	add.w	r3, r7, #8
 801b3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3f8:	f7ff fec3 	bl	801b182 <mg_aton6>
 801b3fc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d001      	beq.n	801b406 <mg_aton+0x64>
 801b402:	2301      	movs	r3, #1
 801b404:	e000      	b.n	801b408 <mg_aton+0x66>
 801b406:	2300      	movs	r3, #0
 801b408:	f003 0301 	and.w	r3, r3, #1
 801b40c:	b2db      	uxtb	r3, r3
}
 801b40e:	4618      	mov	r0, r3
 801b410:	3710      	adds	r7, #16
 801b412:	46bd      	mov	sp, r7
 801b414:	bd80      	pop	{r7, pc}

0801b416 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 801b416:	b580      	push	{r7, lr}
 801b418:	b084      	sub	sp, #16
 801b41a:	af00      	add	r7, sp, #0
 801b41c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b422:	33b0      	adds	r3, #176	@ 0xb0
 801b424:	4619      	mov	r1, r3
 801b426:	2001      	movs	r0, #1
 801b428:	f7f7 fa60 	bl	80128ec <mg_calloc>
 801b42c:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d017      	beq.n	801b464 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	687a      	ldr	r2, [r7, #4]
 801b438:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b440:	675a      	str	r2, [r3, #116]	@ 0x74
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	645a      	str	r2, [r3, #68]	@ 0x44
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	69db      	ldr	r3, [r3, #28]
 801b456:	1c5a      	adds	r2, r3, #1
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	61da      	str	r2, [r3, #28]
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	69da      	ldr	r2, [r3, #28]
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 801b464:	68fb      	ldr	r3, [r7, #12]
}
 801b466:	4618      	mov	r0, r3
 801b468:	3710      	adds	r7, #16
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bd80      	pop	{r7, pc}
	...

0801b470 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 801b470:	b580      	push	{r7, lr}
 801b472:	b084      	sub	sp, #16
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 801b478:	6878      	ldr	r0, [r7, #4]
 801b47a:	f7f7 fa70 	bl	801295e <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	685b      	ldr	r3, [r3, #4]
 801b482:	60fb      	str	r3, [r7, #12]
 801b484:	e002      	b.n	801b48c <mg_close_conn+0x1c>
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	60fb      	str	r3, [r7, #12]
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	687a      	ldr	r2, [r7, #4]
 801b492:	429a      	cmp	r2, r3
 801b494:	d1f7      	bne.n	801b486 <mg_close_conn+0x16>
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681a      	ldr	r2, [r3, #0]
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	689b      	ldr	r3, [r3, #8]
 801b4a4:	687a      	ldr	r2, [r7, #4]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d103      	bne.n	801b4b2 <mg_close_conn+0x42>
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	685b      	ldr	r3, [r3, #4]
 801b4b6:	691b      	ldr	r3, [r3, #16]
 801b4b8:	687a      	ldr	r2, [r7, #4]
 801b4ba:	429a      	cmp	r2, r3
 801b4bc:	d103      	bne.n	801b4c6 <mg_close_conn+0x56>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	685b      	ldr	r3, [r3, #4]
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	2109      	movs	r1, #9
 801b4ca:	6878      	ldr	r0, [r7, #4]
 801b4cc:	f7f7 ffee 	bl	80134ac <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 801b4d0:	4b17      	ldr	r3, [pc, #92]	@ (801b530 <mg_close_conn+0xc0>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	2b02      	cmp	r3, #2
 801b4d6:	dd0e      	ble.n	801b4f6 <mg_close_conn+0x86>
 801b4d8:	4b16      	ldr	r3, [pc, #88]	@ (801b534 <mg_close_conn+0xc4>)
 801b4da:	f241 22aa 	movw	r2, #4778	@ 0x12aa
 801b4de:	4916      	ldr	r1, [pc, #88]	@ (801b538 <mg_close_conn+0xc8>)
 801b4e0:	2003      	movs	r0, #3
 801b4e2:	f7fd fbc3 	bl	8018c6c <mg_log_prefix>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b4ee:	461a      	mov	r2, r3
 801b4f0:	4812      	ldr	r0, [pc, #72]	@ (801b53c <mg_close_conn+0xcc>)
 801b4f2:	f7fd fc0b 	bl	8018d0c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 801b4f6:	6878      	ldr	r0, [r7, #4]
 801b4f8:	f004 fb8c 	bl	801fc14 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	3338      	adds	r3, #56	@ 0x38
 801b500:	4618      	mov	r0, r3
 801b502:	f7fc fcee 	bl	8017ee2 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	3348      	adds	r3, #72	@ 0x48
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7fc fce9 	bl	8017ee2 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	3368      	adds	r3, #104	@ 0x68
 801b514:	4618      	mov	r0, r3
 801b516:	f7fc fce4 	bl	8017ee2 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801b51a:	21b0      	movs	r1, #176	@ 0xb0
 801b51c:	6878      	ldr	r0, [r7, #4]
 801b51e:	f004 fd2b 	bl	801ff78 <mg_bzero>
  free(c);
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f7ee fe70 	bl	800a208 <vPortFree>
}
 801b528:	bf00      	nop
 801b52a:	3710      	adds	r7, #16
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd80      	pop	{r7, pc}
 801b530:	20000288 	.word	0x20000288
 801b534:	08026ed0 	.word	0x08026ed0
 801b538:	0802487c 	.word	0x0802487c
 801b53c:	08025d2c 	.word	0x08025d2c

0801b540 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 801b540:	b580      	push	{r7, lr}
 801b542:	b086      	sub	sp, #24
 801b544:	af00      	add	r7, sp, #0
 801b546:	60f8      	str	r0, [r7, #12]
 801b548:	60b9      	str	r1, [r7, #8]
 801b54a:	607a      	str	r2, [r7, #4]
 801b54c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801b54e:	2300      	movs	r3, #0
 801b550:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d003      	beq.n	801b560 <mg_connect+0x20>
 801b558:	68bb      	ldr	r3, [r7, #8]
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d10e      	bne.n	801b57e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 801b560:	4b37      	ldr	r3, [pc, #220]	@ (801b640 <mg_connect+0x100>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	2b00      	cmp	r3, #0
 801b566:	dd66      	ble.n	801b636 <mg_connect+0xf6>
 801b568:	4b36      	ldr	r3, [pc, #216]	@ (801b644 <mg_connect+0x104>)
 801b56a:	f241 22ba 	movw	r2, #4794	@ 0x12ba
 801b56e:	4936      	ldr	r1, [pc, #216]	@ (801b648 <mg_connect+0x108>)
 801b570:	2001      	movs	r0, #1
 801b572:	f7fd fb7b 	bl	8018c6c <mg_log_prefix>
 801b576:	4835      	ldr	r0, [pc, #212]	@ (801b64c <mg_connect+0x10c>)
 801b578:	f7fd fbc8 	bl	8018d0c <mg_log>
 801b57c:	e05b      	b.n	801b636 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801b57e:	68f8      	ldr	r0, [r7, #12]
 801b580:	f7ff ff49 	bl	801b416 <mg_alloc_conn>
 801b584:	6178      	str	r0, [r7, #20]
 801b586:	697b      	ldr	r3, [r7, #20]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d10e      	bne.n	801b5aa <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801b58c:	4b2c      	ldr	r3, [pc, #176]	@ (801b640 <mg_connect+0x100>)
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	2b00      	cmp	r3, #0
 801b592:	dd50      	ble.n	801b636 <mg_connect+0xf6>
 801b594:	4b2b      	ldr	r3, [pc, #172]	@ (801b644 <mg_connect+0x104>)
 801b596:	f241 22bc 	movw	r2, #4796	@ 0x12bc
 801b59a:	492b      	ldr	r1, [pc, #172]	@ (801b648 <mg_connect+0x108>)
 801b59c:	2001      	movs	r0, #1
 801b59e:	f7fd fb65 	bl	8018c6c <mg_log_prefix>
 801b5a2:	482b      	ldr	r0, [pc, #172]	@ (801b650 <mg_connect+0x110>)
 801b5a4:	f7fd fbb2 	bl	8018d0c <mg_log>
 801b5a8:	e045      	b.n	801b636 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	681a      	ldr	r2, [r3, #0]
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	601a      	str	r2, [r3, #0]
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	697a      	ldr	r2, [r7, #20]
 801b5b6:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 801b5b8:	2204      	movs	r2, #4
 801b5ba:	4926      	ldr	r1, [pc, #152]	@ (801b654 <mg_connect+0x114>)
 801b5bc:	68b8      	ldr	r0, [r7, #8]
 801b5be:	f005 fcd4 	bl	8020f6a <strncmp>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	bf0c      	ite	eq
 801b5c8:	2301      	moveq	r3, #1
 801b5ca:	2300      	movne	r3, #0
 801b5cc:	b2d9      	uxtb	r1, r3
 801b5ce:	697a      	ldr	r2, [r7, #20]
 801b5d0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801b5d4:	f361 0300 	bfi	r3, r1, #0, #1
 801b5d8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b5e2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 801b5e4:	697b      	ldr	r3, [r7, #20]
 801b5e6:	687a      	ldr	r2, [r7, #4]
 801b5e8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 801b5ea:	697a      	ldr	r2, [r7, #20]
 801b5ec:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b5f0:	f043 0302 	orr.w	r3, r3, #2
 801b5f4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	683a      	ldr	r2, [r7, #0]
 801b5fc:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801b5fe:	4b10      	ldr	r3, [pc, #64]	@ (801b640 <mg_connect+0x100>)
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2b02      	cmp	r3, #2
 801b604:	dd0e      	ble.n	801b624 <mg_connect+0xe4>
 801b606:	4b0f      	ldr	r3, [pc, #60]	@ (801b644 <mg_connect+0x104>)
 801b608:	f241 22c4 	movw	r2, #4804	@ 0x12c4
 801b60c:	490e      	ldr	r1, [pc, #56]	@ (801b648 <mg_connect+0x108>)
 801b60e:	2003      	movs	r0, #3
 801b610:	f7fd fb2c 	bl	8018c6c <mg_log_prefix>
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b618:	697b      	ldr	r3, [r7, #20]
 801b61a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	480e      	ldr	r0, [pc, #56]	@ (801b658 <mg_connect+0x118>)
 801b620:	f7fd fb74 	bl	8018d0c <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 801b624:	68ba      	ldr	r2, [r7, #8]
 801b626:	2101      	movs	r1, #1
 801b628:	6978      	ldr	r0, [r7, #20]
 801b62a:	f7f7 ff3f 	bl	80134ac <mg_call>
    mg_resolve(c, url);
 801b62e:	68b9      	ldr	r1, [r7, #8]
 801b630:	6978      	ldr	r0, [r7, #20]
 801b632:	f7f7 fef7 	bl	8013424 <mg_resolve>
  }
  return c;
 801b636:	697b      	ldr	r3, [r7, #20]
}
 801b638:	4618      	mov	r0, r3
 801b63a:	3718      	adds	r7, #24
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bd80      	pop	{r7, pc}
 801b640:	20000288 	.word	0x20000288
 801b644:	08026ee0 	.word	0x08026ee0
 801b648:	0802487c 	.word	0x0802487c
 801b64c:	08025d3c 	.word	0x08025d3c
 801b650:	08025d48 	.word	0x08025d48
 801b654:	08025d4c 	.word	0x08025d4c
 801b658:	080249d8 	.word	0x080249d8

0801b65c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b086      	sub	sp, #24
 801b660:	af00      	add	r7, sp, #0
 801b662:	60f8      	str	r0, [r7, #12]
 801b664:	60b9      	str	r1, [r7, #8]
 801b666:	607a      	str	r2, [r7, #4]
 801b668:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801b66a:	2300      	movs	r3, #0
 801b66c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801b66e:	68f8      	ldr	r0, [r7, #12]
 801b670:	f7ff fed1 	bl	801b416 <mg_alloc_conn>
 801b674:	6178      	str	r0, [r7, #20]
 801b676:	697b      	ldr	r3, [r7, #20]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d10f      	bne.n	801b69c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801b67c:	4b41      	ldr	r3, [pc, #260]	@ (801b784 <mg_listen+0x128>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	2b00      	cmp	r3, #0
 801b682:	dd7a      	ble.n	801b77a <mg_listen+0x11e>
 801b684:	4b40      	ldr	r3, [pc, #256]	@ (801b788 <mg_listen+0x12c>)
 801b686:	f241 22cf 	movw	r2, #4815	@ 0x12cf
 801b68a:	4940      	ldr	r1, [pc, #256]	@ (801b78c <mg_listen+0x130>)
 801b68c:	2001      	movs	r0, #1
 801b68e:	f7fd faed 	bl	8018c6c <mg_log_prefix>
 801b692:	68b9      	ldr	r1, [r7, #8]
 801b694:	483e      	ldr	r0, [pc, #248]	@ (801b790 <mg_listen+0x134>)
 801b696:	f7fd fb39 	bl	8018d0c <mg_log>
 801b69a:	e06e      	b.n	801b77a <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 801b69c:	68b9      	ldr	r1, [r7, #8]
 801b69e:	6978      	ldr	r0, [r7, #20]
 801b6a0:	f003 f852 	bl	801e748 <mg_open_listener>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	f083 0301 	eor.w	r3, r3, #1
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d019      	beq.n	801b6e4 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 801b6b0:	4b34      	ldr	r3, [pc, #208]	@ (801b784 <mg_listen+0x128>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	dd0f      	ble.n	801b6d8 <mg_listen+0x7c>
 801b6b8:	4b33      	ldr	r3, [pc, #204]	@ (801b788 <mg_listen+0x12c>)
 801b6ba:	f241 22d1 	movw	r2, #4817	@ 0x12d1
 801b6be:	4933      	ldr	r1, [pc, #204]	@ (801b78c <mg_listen+0x130>)
 801b6c0:	2001      	movs	r0, #1
 801b6c2:	f7fd fad3 	bl	8018c6c <mg_log_prefix>
 801b6c6:	f005 fd7f 	bl	80211c8 <__errno>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	461a      	mov	r2, r3
 801b6d0:	68b9      	ldr	r1, [r7, #8]
 801b6d2:	4830      	ldr	r0, [pc, #192]	@ (801b794 <mg_listen+0x138>)
 801b6d4:	f7fd fb1a 	bl	8018d0c <mg_log>
    MG_PROF_FREE(c);
    free(c);
 801b6d8:	6978      	ldr	r0, [r7, #20]
 801b6da:	f7ee fd95 	bl	800a208 <vPortFree>
    c = NULL;
 801b6de:	2300      	movs	r3, #0
 801b6e0:	617b      	str	r3, [r7, #20]
 801b6e2:	e04a      	b.n	801b77a <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 801b6e4:	697a      	ldr	r2, [r7, #20]
 801b6e6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b6ea:	f043 0301 	orr.w	r3, r3, #1
 801b6ee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 801b6f2:	2204      	movs	r2, #4
 801b6f4:	4928      	ldr	r1, [pc, #160]	@ (801b798 <mg_listen+0x13c>)
 801b6f6:	68b8      	ldr	r0, [r7, #8]
 801b6f8:	f005 fc37 	bl	8020f6a <strncmp>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	bf0c      	ite	eq
 801b702:	2301      	moveq	r3, #1
 801b704:	2300      	movne	r3, #0
 801b706:	b2d9      	uxtb	r1, r3
 801b708:	697a      	ldr	r2, [r7, #20]
 801b70a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801b70e:	f361 0300 	bfi	r3, r1, #0, #1
 801b712:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	681a      	ldr	r2, [r3, #0]
 801b71a:	697b      	ldr	r3, [r7, #20]
 801b71c:	601a      	str	r2, [r3, #0]
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	697a      	ldr	r2, [r7, #20]
 801b722:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	687a      	ldr	r2, [r7, #4]
 801b728:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	683a      	ldr	r2, [r7, #0]
 801b72e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 801b730:	2200      	movs	r2, #0
 801b732:	2101      	movs	r1, #1
 801b734:	6978      	ldr	r0, [r7, #20]
 801b736:	f7f7 feb9 	bl	80134ac <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 801b73a:	68b8      	ldr	r0, [r7, #8]
 801b73c:	f004 fabc 	bl	801fcb8 <mg_url_is_ssl>
 801b740:	4603      	mov	r3, r0
 801b742:	2b00      	cmp	r3, #0
 801b744:	d006      	beq.n	801b754 <mg_listen+0xf8>
 801b746:	697a      	ldr	r2, [r7, #20]
 801b748:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b74c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b750:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801b754:	4b0b      	ldr	r3, [pc, #44]	@ (801b784 <mg_listen+0x128>)
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	2b02      	cmp	r3, #2
 801b75a:	dd0e      	ble.n	801b77a <mg_listen+0x11e>
 801b75c:	4b0a      	ldr	r3, [pc, #40]	@ (801b788 <mg_listen+0x12c>)
 801b75e:	f241 22dd 	movw	r2, #4829	@ 0x12dd
 801b762:	490a      	ldr	r1, [pc, #40]	@ (801b78c <mg_listen+0x130>)
 801b764:	2003      	movs	r0, #3
 801b766:	f7fd fa81 	bl	8018c6c <mg_log_prefix>
 801b76a:	697b      	ldr	r3, [r7, #20]
 801b76c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b76e:	697b      	ldr	r3, [r7, #20]
 801b770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	4809      	ldr	r0, [pc, #36]	@ (801b79c <mg_listen+0x140>)
 801b776:	f7fd fac9 	bl	8018d0c <mg_log>
  }
  return c;
 801b77a:	697b      	ldr	r3, [r7, #20]
}
 801b77c:	4618      	mov	r0, r3
 801b77e:	3718      	adds	r7, #24
 801b780:	46bd      	mov	sp, r7
 801b782:	bd80      	pop	{r7, pc}
 801b784:	20000288 	.word	0x20000288
 801b788:	08026eec 	.word	0x08026eec
 801b78c:	0802487c 	.word	0x0802487c
 801b790:	08025d54 	.word	0x08025d54
 801b794:	08025d5c 	.word	0x08025d5c
 801b798:	08025d4c 	.word	0x08025d4c
 801b79c:	080249d8 	.word	0x080249d8

0801b7a0 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b08a      	sub	sp, #40	@ 0x28
 801b7a4:	af04      	add	r7, sp, #16
 801b7a6:	60f8      	str	r0, [r7, #12]
 801b7a8:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 801b7ac:	2128      	movs	r1, #40	@ 0x28
 801b7ae:	2001      	movs	r0, #1
 801b7b0:	f7f7 f89c 	bl	80128ec <mg_calloc>
 801b7b4:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 801b7b6:	697b      	ldr	r3, [r7, #20]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d014      	beq.n	801b7e6 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801b7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7c4:	9302      	str	r3, [sp, #8]
 801b7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7c8:	9301      	str	r3, [sp, #4]
 801b7ca:	6a3b      	ldr	r3, [r7, #32]
 801b7cc:	9300      	str	r3, [sp, #0]
 801b7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b7d2:	6979      	ldr	r1, [r7, #20]
 801b7d4:	f004 f91d 	bl	801fa12 <mg_timer_init>
    t->id = mgr->timerid++;
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	6a1b      	ldr	r3, [r3, #32]
 801b7dc:	1c59      	adds	r1, r3, #1
 801b7de:	68fa      	ldr	r2, [r7, #12]
 801b7e0:	6211      	str	r1, [r2, #32]
 801b7e2:	697a      	ldr	r2, [r7, #20]
 801b7e4:	6013      	str	r3, [r2, #0]
  }
  return t;
 801b7e6:	697b      	ldr	r3, [r7, #20]
}
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	3718      	adds	r7, #24
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}

0801b7f0 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b082      	sub	sp, #8
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801b7f8:	2248      	movs	r2, #72	@ 0x48
 801b7fa:	2100      	movs	r1, #0
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	f005 fc3f 	bl	8021080 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b808:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b810:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801b818:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	4a05      	ldr	r2, [pc, #20]	@ (801b834 <mg_mgr_init+0x44>)
 801b81e:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	4a05      	ldr	r2, [pc, #20]	@ (801b838 <mg_mgr_init+0x48>)
 801b824:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 801b826:	6878      	ldr	r0, [r7, #4]
 801b828:	f004 fa3b 	bl	801fca2 <mg_tls_ctx_init>
}
 801b82c:	bf00      	nop
 801b82e:	3708      	adds	r7, #8
 801b830:	46bd      	mov	sp, r7
 801b832:	bd80      	pop	{r7, pc}
 801b834:	08025d8c 	.word	0x08025d8c
 801b838:	08025da0 	.word	0x08025da0

0801b83c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b084      	sub	sp, #16
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	60b9      	str	r1, [r7, #8]
 801b846:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d005      	beq.n	801b85c <mg_tcpip_call+0x20>
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b854:	687a      	ldr	r2, [r7, #4]
 801b856:	68b9      	ldr	r1, [r7, #8]
 801b858:	68f8      	ldr	r0, [r7, #12]
 801b85a:	4798      	blx	r3
}
 801b85c:	bf00      	nop
 801b85e:	3710      	adds	r7, #16
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}

0801b864 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 801b864:	b590      	push	{r4, r7, lr}
 801b866:	b085      	sub	sp, #20
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	441a      	add	r2, r3
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	1ad3      	subs	r3, r2, r3
 801b87c:	461a      	mov	r2, r3
 801b87e:	68fc      	ldr	r4, [r7, #12]
 801b880:	463b      	mov	r3, r7
 801b882:	68b9      	ldr	r1, [r7, #8]
 801b884:	4618      	mov	r0, r3
 801b886:	f003 fc8a 	bl	801f19e <mg_str_n>
 801b88a:	f104 0308 	add.w	r3, r4, #8
 801b88e:	463a      	mov	r2, r7
 801b890:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b894:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801b898:	bf00      	nop
 801b89a:	3714      	adds	r7, #20
 801b89c:	46bd      	mov	sp, r7
 801b89e:	bd90      	pop	{r4, r7, pc}

0801b8a0 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 801b8a0:	b480      	push	{r7}
 801b8a2:	b087      	sub	sp, #28
 801b8a4:	af00      	add	r7, sp, #0
 801b8a6:	60f8      	str	r0, [r7, #12]
 801b8a8:	60b9      	str	r1, [r7, #8]
 801b8aa:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	617b      	str	r3, [r7, #20]
 801b8b4:	e014      	b.n	801b8e0 <csumup+0x40>
 801b8b6:	697b      	ldr	r3, [r7, #20]
 801b8b8:	f003 0301 	and.w	r3, r3, #1
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d004      	beq.n	801b8ca <csumup+0x2a>
 801b8c0:	693a      	ldr	r2, [r7, #16]
 801b8c2:	697b      	ldr	r3, [r7, #20]
 801b8c4:	4413      	add	r3, r2
 801b8c6:	781b      	ldrb	r3, [r3, #0]
 801b8c8:	e004      	b.n	801b8d4 <csumup+0x34>
 801b8ca:	693a      	ldr	r2, [r7, #16]
 801b8cc:	697b      	ldr	r3, [r7, #20]
 801b8ce:	4413      	add	r3, r2
 801b8d0:	781b      	ldrb	r3, [r3, #0]
 801b8d2:	021b      	lsls	r3, r3, #8
 801b8d4:	68fa      	ldr	r2, [r7, #12]
 801b8d6:	4413      	add	r3, r2
 801b8d8:	60fb      	str	r3, [r7, #12]
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	3301      	adds	r3, #1
 801b8de:	617b      	str	r3, [r7, #20]
 801b8e0:	697a      	ldr	r2, [r7, #20]
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d3e6      	bcc.n	801b8b6 <csumup+0x16>
  return sum;
 801b8e8:	68fb      	ldr	r3, [r7, #12]
}
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	371c      	adds	r7, #28
 801b8ee:	46bd      	mov	sp, r7
 801b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f4:	4770      	bx	lr

0801b8f6 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 801b8f6:	b580      	push	{r7, lr}
 801b8f8:	b082      	sub	sp, #8
 801b8fa:	af00      	add	r7, sp, #0
 801b8fc:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 801b8fe:	e005      	b.n	801b90c <csumfin+0x16>
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	b29a      	uxth	r2, r3
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	0c1b      	lsrs	r3, r3, #16
 801b908:	4413      	add	r3, r2
 801b90a:	607b      	str	r3, [r7, #4]
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	0c1b      	lsrs	r3, r3, #16
 801b910:	2b00      	cmp	r3, #0
 801b912:	d1f5      	bne.n	801b900 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	b29b      	uxth	r3, r3
 801b918:	43db      	mvns	r3, r3
 801b91a:	b29b      	uxth	r3, r3
 801b91c:	4618      	mov	r0, r3
 801b91e:	f004 fbc4 	bl	80200aa <mg_ntohs>
 801b922:	4603      	mov	r3, r0
}
 801b924:	4618      	mov	r0, r3
 801b926:	3708      	adds	r7, #8
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}

0801b92c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 801b92c:	b580      	push	{r7, lr}
 801b92e:	b084      	sub	sp, #16
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801b936:	683a      	ldr	r2, [r7, #0]
 801b938:	6879      	ldr	r1, [r7, #4]
 801b93a:	2000      	movs	r0, #0
 801b93c:	f7ff ffb0 	bl	801b8a0 <csumup>
 801b940:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 801b942:	68f8      	ldr	r0, [r7, #12]
 801b944:	f7ff ffd7 	bl	801b8f6 <csumfin>
 801b948:	4603      	mov	r3, r0
}
 801b94a:	4618      	mov	r0, r3
 801b94c:	3710      	adds	r7, #16
 801b94e:	46bd      	mov	sp, r7
 801b950:	bd80      	pop	{r7, pc}
	...

0801b954 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 801b954:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b958:	b088      	sub	sp, #32
 801b95a:	af02      	add	r7, sp, #8
 801b95c:	6078      	str	r0, [r7, #4]
 801b95e:	460b      	mov	r3, r1
 801b960:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b968:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	33b0      	adds	r3, #176	@ 0xb0
 801b96e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 801b970:	78fb      	ldrb	r3, [r7, #3]
 801b972:	2b01      	cmp	r3, #1
 801b974:	d013      	beq.n	801b99e <settmout+0x4a>
 801b976:	78fb      	ldrb	r3, [r7, #3]
 801b978:	2b02      	cmp	r3, #2
 801b97a:	d00e      	beq.n	801b99a <settmout+0x46>
 801b97c:	78fb      	ldrb	r3, [r7, #3]
 801b97e:	2b03      	cmp	r3, #3
 801b980:	d008      	beq.n	801b994 <settmout+0x40>
 801b982:	78fb      	ldrb	r3, [r7, #3]
 801b984:	2b04      	cmp	r3, #4
 801b986:	d102      	bne.n	801b98e <settmout+0x3a>
 801b988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b98c:	e008      	b.n	801b9a0 <settmout+0x4c>
 801b98e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 801b992:	e005      	b.n	801b9a0 <settmout+0x4c>
 801b994:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801b998:	e002      	b.n	801b9a0 <settmout+0x4c>
 801b99a:	2364      	movs	r3, #100	@ 0x64
 801b99c:	e000      	b.n	801b9a0 <settmout+0x4c>
 801b99e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 801b9a0:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 801b9a2:	697b      	ldr	r3, [r7, #20]
 801b9a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801b9a8:	68f9      	ldr	r1, [r7, #12]
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	460c      	mov	r4, r1
 801b9ae:	4605      	mov	r5, r0
 801b9b0:	eb12 0804 	adds.w	r8, r2, r4
 801b9b4:	eb43 0905 	adc.w	r9, r3, r5
 801b9b8:	693b      	ldr	r3, [r7, #16]
 801b9ba:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	78fa      	ldrb	r2, [r7, #3]
 801b9c2:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 801b9c4:	4b0d      	ldr	r3, [pc, #52]	@ (801b9fc <settmout+0xa8>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	2b03      	cmp	r3, #3
 801b9ca:	dd12      	ble.n	801b9f2 <settmout+0x9e>
 801b9cc:	4b0c      	ldr	r3, [pc, #48]	@ (801ba00 <settmout+0xac>)
 801b9ce:	f241 32e4 	movw	r2, #5092	@ 0x13e4
 801b9d2:	490c      	ldr	r1, [pc, #48]	@ (801ba04 <settmout+0xb0>)
 801b9d4:	2004      	movs	r0, #4
 801b9d6:	f7fd f949 	bl	8018c6c <mg_log_prefix>
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b9de:	78f8      	ldrb	r0, [r7, #3]
 801b9e0:	693b      	ldr	r3, [r7, #16]
 801b9e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b9e6:	e9cd 2300 	strd	r2, r3, [sp]
 801b9ea:	4602      	mov	r2, r0
 801b9ec:	4806      	ldr	r0, [pc, #24]	@ (801ba08 <settmout+0xb4>)
 801b9ee:	f7fd f98d 	bl	8018d0c <mg_log>
}
 801b9f2:	bf00      	nop
 801b9f4:	3718      	adds	r7, #24
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b9fc:	20000288 	.word	0x20000288
 801ba00:	08026ef8 	.word	0x08026ef8
 801ba04:	0802487c 	.word	0x0802487c
 801ba08:	08025dc0 	.word	0x08025dc0

0801ba0c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b084      	sub	sp, #16
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
 801ba14:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba1a:	685b      	ldr	r3, [r3, #4]
 801ba1c:	687a      	ldr	r2, [r7, #4]
 801ba1e:	6950      	ldr	r0, [r2, #20]
 801ba20:	687a      	ldr	r2, [r7, #4]
 801ba22:	6839      	ldr	r1, [r7, #0]
 801ba24:	4798      	blx	r3
 801ba26:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801ba28:	68fa      	ldr	r2, [r7, #12]
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	429a      	cmp	r2, r3
 801ba2e:	d104      	bne.n	801ba3a <ether_output+0x2e>
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba34:	1c5a      	adds	r2, r3, #1
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 801ba3a:	68fb      	ldr	r3, [r7, #12]
}
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	3710      	adds	r7, #16
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}

0801ba44 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b084      	sub	sp, #16
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
 801ba4c:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	695b      	ldr	r3, [r3, #20]
 801ba52:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	330e      	adds	r3, #14
 801ba58:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	2206      	movs	r2, #6
 801ba5e:	21ff      	movs	r1, #255	@ 0xff
 801ba60:	4618      	mov	r0, r3
 801ba62:	f005 fb0d 	bl	8021080 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	3306      	adds	r3, #6
 801ba6a:	6879      	ldr	r1, [r7, #4]
 801ba6c:	2206      	movs	r2, #6
 801ba6e:	4618      	mov	r0, r3
 801ba70:	f005 fbd7 	bl	8021222 <memcpy>
  eth->type = mg_htons(0x806);
 801ba74:	f640 0006 	movw	r0, #2054	@ 0x806
 801ba78:	f004 fb17 	bl	80200aa <mg_ntohs>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	461a      	mov	r2, r3
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801ba84:	221c      	movs	r2, #28
 801ba86:	2100      	movs	r1, #0
 801ba88:	68b8      	ldr	r0, [r7, #8]
 801ba8a:	f005 faf9 	bl	8021080 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 801ba8e:	2001      	movs	r0, #1
 801ba90:	f004 fb0b 	bl	80200aa <mg_ntohs>
 801ba94:	4603      	mov	r3, r0
 801ba96:	461a      	mov	r2, r3
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	801a      	strh	r2, [r3, #0]
 801ba9c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801baa0:	f004 fb03 	bl	80200aa <mg_ntohs>
 801baa4:	4603      	mov	r3, r0
 801baa6:	461a      	mov	r2, r3
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	805a      	strh	r2, [r3, #2]
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	2206      	movs	r2, #6
 801bab0:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 801bab2:	68bb      	ldr	r3, [r7, #8]
 801bab4:	2204      	movs	r2, #4
 801bab6:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 801bab8:	2001      	movs	r0, #1
 801baba:	f004 faf6 	bl	80200aa <mg_ntohs>
 801babe:	4603      	mov	r3, r0
 801bac0:	461a      	mov	r2, r3
 801bac2:	68bb      	ldr	r3, [r7, #8]
 801bac4:	80da      	strh	r2, [r3, #6]
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	683a      	ldr	r2, [r7, #0]
 801baca:	619a      	str	r2, [r3, #24]
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	689a      	ldr	r2, [r3, #8]
 801bad0:	68bb      	ldr	r3, [r7, #8]
 801bad2:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 801bad6:	68bb      	ldr	r3, [r7, #8]
 801bad8:	3308      	adds	r3, #8
 801bada:	6879      	ldr	r1, [r7, #4]
 801badc:	2206      	movs	r2, #6
 801bade:	4618      	mov	r0, r3
 801bae0:	f005 fb9f 	bl	8021222 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801bae4:	68bb      	ldr	r3, [r7, #8]
 801bae6:	f103 021c 	add.w	r2, r3, #28
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	1ad3      	subs	r3, r2, r3
 801baee:	4619      	mov	r1, r3
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f7ff ff8b 	bl	801ba0c <ether_output>
}
 801baf6:	bf00      	nop
 801baf8:	3710      	adds	r7, #16
 801bafa:	46bd      	mov	sp, r7
 801bafc:	bd80      	pop	{r7, pc}
	...

0801bb00 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b082      	sub	sp, #8
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801bb0e:	2b03      	cmp	r3, #3
 801bb10:	d13b      	bne.n	801bb8a <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801bb12:	4b3b      	ldr	r3, [pc, #236]	@ (801bc00 <onstatechange+0x100>)
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	2b01      	cmp	r3, #1
 801bb18:	dd0d      	ble.n	801bb36 <onstatechange+0x36>
 801bb1a:	4b3a      	ldr	r3, [pc, #232]	@ (801bc04 <onstatechange+0x104>)
 801bb1c:	f241 32fd 	movw	r2, #5117	@ 0x13fd
 801bb20:	4939      	ldr	r1, [pc, #228]	@ (801bc08 <onstatechange+0x108>)
 801bb22:	2002      	movs	r0, #2
 801bb24:	f7fd f8a2 	bl	8018c6c <mg_log_prefix>
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	3308      	adds	r3, #8
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	4937      	ldr	r1, [pc, #220]	@ (801bc0c <onstatechange+0x10c>)
 801bb30:	4837      	ldr	r0, [pc, #220]	@ (801bc10 <onstatechange+0x110>)
 801bb32:	f7fd f8eb 	bl	8018d0c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801bb36:	4b32      	ldr	r3, [pc, #200]	@ (801bc00 <onstatechange+0x100>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2b01      	cmp	r3, #1
 801bb3c:	dd0d      	ble.n	801bb5a <onstatechange+0x5a>
 801bb3e:	4b31      	ldr	r3, [pc, #196]	@ (801bc04 <onstatechange+0x104>)
 801bb40:	f241 32fe 	movw	r2, #5118	@ 0x13fe
 801bb44:	4930      	ldr	r1, [pc, #192]	@ (801bc08 <onstatechange+0x108>)
 801bb46:	2002      	movs	r0, #2
 801bb48:	f7fd f890 	bl	8018c6c <mg_log_prefix>
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	3310      	adds	r3, #16
 801bb50:	461a      	mov	r2, r3
 801bb52:	492e      	ldr	r1, [pc, #184]	@ (801bc0c <onstatechange+0x10c>)
 801bb54:	482f      	ldr	r0, [pc, #188]	@ (801bc14 <onstatechange+0x114>)
 801bb56:	f7fd f8d9 	bl	8018d0c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 801bb5a:	4b29      	ldr	r3, [pc, #164]	@ (801bc00 <onstatechange+0x100>)
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	2b01      	cmp	r3, #1
 801bb60:	dd0c      	ble.n	801bb7c <onstatechange+0x7c>
 801bb62:	4b28      	ldr	r3, [pc, #160]	@ (801bc04 <onstatechange+0x104>)
 801bb64:	f241 32ff 	movw	r2, #5119	@ 0x13ff
 801bb68:	4927      	ldr	r1, [pc, #156]	@ (801bc08 <onstatechange+0x108>)
 801bb6a:	2002      	movs	r0, #2
 801bb6c:	f7fd f87e 	bl	8018c6c <mg_log_prefix>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	461a      	mov	r2, r3
 801bb74:	4928      	ldr	r1, [pc, #160]	@ (801bc18 <onstatechange+0x118>)
 801bb76:	4829      	ldr	r0, [pc, #164]	@ (801bc1c <onstatechange+0x11c>)
 801bb78:	f7fd f8c8 	bl	8018d0c <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	691b      	ldr	r3, [r3, #16]
 801bb80:	4619      	mov	r1, r3
 801bb82:	6878      	ldr	r0, [r7, #4]
 801bb84:	f7ff ff5e 	bl	801ba44 <arp_ask>
 801bb88:	e02e      	b.n	801bbe8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801bb90:	2b01      	cmp	r3, #1
 801bb92:	d116      	bne.n	801bbc2 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 801bb94:	4b1a      	ldr	r3, [pc, #104]	@ (801bc00 <onstatechange+0x100>)
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	dd09      	ble.n	801bbb0 <onstatechange+0xb0>
 801bb9c:	4b19      	ldr	r3, [pc, #100]	@ (801bc04 <onstatechange+0x104>)
 801bb9e:	f241 4202 	movw	r2, #5122	@ 0x1402
 801bba2:	4919      	ldr	r1, [pc, #100]	@ (801bc08 <onstatechange+0x108>)
 801bba4:	2001      	movs	r0, #1
 801bba6:	f7fd f861 	bl	8018c6c <mg_log_prefix>
 801bbaa:	481d      	ldr	r0, [pc, #116]	@ (801bc20 <onstatechange+0x120>)
 801bbac:	f7fd f8ae 	bl	8018d0c <mg_log>
    srand((unsigned int) mg_millis());
 801bbb0:	f004 fb0c 	bl	80201cc <mg_millis>
 801bbb4:	4602      	mov	r2, r0
 801bbb6:	460b      	mov	r3, r1
 801bbb8:	4613      	mov	r3, r2
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f004 ff6a 	bl	8020a94 <srand>
 801bbc0:	e012      	b.n	801bbe8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d10d      	bne.n	801bbe8 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 801bbcc:	4b0c      	ldr	r3, [pc, #48]	@ (801bc00 <onstatechange+0x100>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	dd09      	ble.n	801bbe8 <onstatechange+0xe8>
 801bbd4:	4b0b      	ldr	r3, [pc, #44]	@ (801bc04 <onstatechange+0x104>)
 801bbd6:	f241 4205 	movw	r2, #5125	@ 0x1405
 801bbda:	490b      	ldr	r1, [pc, #44]	@ (801bc08 <onstatechange+0x108>)
 801bbdc:	2001      	movs	r0, #1
 801bbde:	f7fd f845 	bl	8018c6c <mg_log_prefix>
 801bbe2:	4810      	ldr	r0, [pc, #64]	@ (801bc24 <onstatechange+0x124>)
 801bbe4:	f7fd f892 	bl	8018d0c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	337c      	adds	r3, #124	@ 0x7c
 801bbec:	461a      	mov	r2, r3
 801bbee:	2100      	movs	r1, #0
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f7ff fe23 	bl	801b83c <mg_tcpip_call>
}
 801bbf6:	bf00      	nop
 801bbf8:	3708      	adds	r7, #8
 801bbfa:	46bd      	mov	sp, r7
 801bbfc:	bd80      	pop	{r7, pc}
 801bbfe:	bf00      	nop
 801bc00:	20000288 	.word	0x20000288
 801bc04:	08026f04 	.word	0x08026f04
 801bc08:	0802487c 	.word	0x0802487c
 801bc0c:	0801ee5d 	.word	0x0801ee5d
 801bc10:	08025dd0 	.word	0x08025dd0
 801bc14:	08025de0 	.word	0x08025de0
 801bc18:	0801ef21 	.word	0x0801ef21
 801bc1c:	08025df0 	.word	0x08025df0
 801bc20:	08025e00 	.word	0x08025e00
 801bc24:	08025e08 	.word	0x08025e08

0801bc28 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b086      	sub	sp, #24
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	60f8      	str	r0, [r7, #12]
 801bc30:	60b9      	str	r1, [r7, #8]
 801bc32:	603b      	str	r3, [r7, #0]
 801bc34:	4613      	mov	r3, r2
 801bc36:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	695b      	ldr	r3, [r3, #20]
 801bc3c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 801bc3e:	697b      	ldr	r3, [r7, #20]
 801bc40:	330e      	adds	r3, #14
 801bc42:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 801bc44:	697b      	ldr	r3, [r7, #20]
 801bc46:	2206      	movs	r2, #6
 801bc48:	68b9      	ldr	r1, [r7, #8]
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f005 fae9 	bl	8021222 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	3306      	adds	r3, #6
 801bc54:	68f9      	ldr	r1, [r7, #12]
 801bc56:	2206      	movs	r2, #6
 801bc58:	4618      	mov	r0, r3
 801bc5a:	f005 fae2 	bl	8021222 <memcpy>
  eth->type = mg_htons(0x800);
 801bc5e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801bc62:	f004 fa22 	bl	80200aa <mg_ntohs>
 801bc66:	4603      	mov	r3, r0
 801bc68:	461a      	mov	r2, r3
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 801bc6e:	2214      	movs	r2, #20
 801bc70:	2100      	movs	r1, #0
 801bc72:	6938      	ldr	r0, [r7, #16]
 801bc74:	f005 fa04 	bl	8021080 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 801bc78:	693b      	ldr	r3, [r7, #16]
 801bc7a:	2245      	movs	r2, #69	@ 0x45
 801bc7c:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 801bc7e:	693b      	ldr	r3, [r7, #16]
 801bc80:	2200      	movs	r2, #0
 801bc82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801bc86:	719a      	strb	r2, [r3, #6]
 801bc88:	2200      	movs	r2, #0
 801bc8a:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 801bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc8e:	b29b      	uxth	r3, r3
 801bc90:	3314      	adds	r3, #20
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	4618      	mov	r0, r3
 801bc96:	f004 fa08 	bl	80200aa <mg_ntohs>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	693b      	ldr	r3, [r7, #16]
 801bca0:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 801bca2:	693b      	ldr	r3, [r7, #16]
 801bca4:	2240      	movs	r2, #64	@ 0x40
 801bca6:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	79fa      	ldrb	r2, [r7, #7]
 801bcac:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 801bcae:	693b      	ldr	r3, [r7, #16]
 801bcb0:	683a      	ldr	r2, [r7, #0]
 801bcb2:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801bcb4:	693b      	ldr	r3, [r7, #16]
 801bcb6:	6a3a      	ldr	r2, [r7, #32]
 801bcb8:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 801bcba:	2114      	movs	r1, #20
 801bcbc:	6938      	ldr	r0, [r7, #16]
 801bcbe:	f7ff fe35 	bl	801b92c <ipcsum>
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	461a      	mov	r2, r3
 801bcc6:	693b      	ldr	r3, [r7, #16]
 801bcc8:	815a      	strh	r2, [r3, #10]
  return ip;
 801bcca:	693b      	ldr	r3, [r7, #16]
}
 801bccc:	4618      	mov	r0, r3
 801bcce:	3718      	adds	r7, #24
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bd80      	pop	{r7, pc}

0801bcd4 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b08a      	sub	sp, #40	@ 0x28
 801bcd8:	af02      	add	r7, sp, #8
 801bcda:	60f8      	str	r0, [r7, #12]
 801bcdc:	60b9      	str	r1, [r7, #8]
 801bcde:	607a      	str	r2, [r7, #4]
 801bce0:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 801bce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bce4:	3308      	adds	r3, #8
 801bce6:	9301      	str	r3, [sp, #4]
 801bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcea:	9300      	str	r3, [sp, #0]
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	2211      	movs	r2, #17
 801bcf0:	68b9      	ldr	r1, [r7, #8]
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	f7ff ff98 	bl	801bc28 <tx_ip>
 801bcf8:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 801bcfa:	69fb      	ldr	r3, [r7, #28]
 801bcfc:	3314      	adds	r3, #20
 801bcfe:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 801bd00:	69bb      	ldr	r3, [r7, #24]
 801bd02:	887a      	ldrh	r2, [r7, #2]
 801bd04:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801bd06:	69bb      	ldr	r3, [r7, #24]
 801bd08:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801bd0a:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 801bd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd0e:	b29b      	uxth	r3, r3
 801bd10:	3308      	adds	r3, #8
 801bd12:	b29b      	uxth	r3, r3
 801bd14:	4618      	mov	r0, r3
 801bd16:	f004 f9c8 	bl	80200aa <mg_ntohs>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	461a      	mov	r2, r3
 801bd1e:	69bb      	ldr	r3, [r7, #24]
 801bd20:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 801bd22:	69bb      	ldr	r3, [r7, #24]
 801bd24:	2200      	movs	r2, #0
 801bd26:	719a      	strb	r2, [r3, #6]
 801bd28:	2200      	movs	r2, #0
 801bd2a:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 801bd2c:	2208      	movs	r2, #8
 801bd2e:	69b9      	ldr	r1, [r7, #24]
 801bd30:	2000      	movs	r0, #0
 801bd32:	f7ff fdb5 	bl	801b8a0 <csumup>
 801bd36:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801bd38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bd3c:	6978      	ldr	r0, [r7, #20]
 801bd3e:	f7ff fdaf 	bl	801b8a0 <csumup>
 801bd42:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801bd44:	69fb      	ldr	r3, [r7, #28]
 801bd46:	330c      	adds	r3, #12
 801bd48:	2204      	movs	r2, #4
 801bd4a:	4619      	mov	r1, r3
 801bd4c:	6978      	ldr	r0, [r7, #20]
 801bd4e:	f7ff fda7 	bl	801b8a0 <csumup>
 801bd52:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801bd54:	69fb      	ldr	r3, [r7, #28]
 801bd56:	3310      	adds	r3, #16
 801bd58:	2204      	movs	r2, #4
 801bd5a:	4619      	mov	r1, r3
 801bd5c:	6978      	ldr	r0, [r7, #20]
 801bd5e:	f7ff fd9f 	bl	801b8a0 <csumup>
 801bd62:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 801bd64:	69fb      	ldr	r3, [r7, #28]
 801bd66:	7a5b      	ldrb	r3, [r3, #9]
 801bd68:	461a      	mov	r2, r3
 801bd6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd6c:	441a      	add	r2, r3
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	4413      	add	r3, r2
 801bd72:	3308      	adds	r3, #8
 801bd74:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 801bd76:	6978      	ldr	r0, [r7, #20]
 801bd78:	f7ff fdbd 	bl	801b8f6 <csumfin>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	461a      	mov	r2, r3
 801bd80:	69bb      	ldr	r3, [r7, #24]
 801bd82:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 801bd84:	69bb      	ldr	r3, [r7, #24]
 801bd86:	3308      	adds	r3, #8
 801bd88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f005 f95d 	bl	802104c <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 801bd92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd94:	332a      	adds	r3, #42	@ 0x2a
 801bd96:	4619      	mov	r1, r3
 801bd98:	68f8      	ldr	r0, [r7, #12]
 801bd9a:	f7ff fe37 	bl	801ba0c <ether_output>
}
 801bd9e:	bf00      	nop
 801bda0:	3720      	adds	r7, #32
 801bda2:	46bd      	mov	sp, r7
 801bda4:	bd80      	pop	{r7, pc}
	...

0801bda8 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 801bda8:	b5b0      	push	{r4, r5, r7, lr}
 801bdaa:	b0cc      	sub	sp, #304	@ 0x130
 801bdac:	af04      	add	r7, sp, #16
 801bdae:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801bdb2:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 801bdb6:	6020      	str	r0, [r4, #0]
 801bdb8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801bdbc:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 801bdc0:	6001      	str	r1, [r0, #0]
 801bdc2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801bdc6:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801bdca:	600a      	str	r2, [r1, #0]
 801bdcc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801bdd0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801bdd4:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801bdd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801bdda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801bdde:	4a38      	ldr	r2, [pc, #224]	@ (801bec0 <tx_dhcp+0x118>)
 801bde0:	4618      	mov	r0, r3
 801bde2:	4611      	mov	r1, r2
 801bde4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801bde8:	461a      	mov	r2, r3
 801bdea:	f005 fa1a 	bl	8021222 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 801bdee:	4835      	ldr	r0, [pc, #212]	@ (801bec4 <tx_dhcp+0x11c>)
 801bdf0:	f004 f942 	bl	8020078 <mg_ntohl>
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801bdfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801bdfe:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 801be02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801be0a:	6819      	ldr	r1, [r3, #0]
 801be0c:	f107 0310 	add.w	r3, r7, #16
 801be10:	331c      	adds	r3, #28
 801be12:	2206      	movs	r2, #6
 801be14:	4618      	mov	r0, r3
 801be16:	f005 fa04 	bl	8021222 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 801be1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	3302      	adds	r3, #2
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	461a      	mov	r2, r3
 801be2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801be32:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 801be34:	f107 0310 	add.w	r3, r7, #16
 801be38:	33f0      	adds	r3, #240	@ 0xf0
 801be3a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801be3e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801be42:	4618      	mov	r0, r3
 801be44:	f005 f9ed 	bl	8021222 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 801be48:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d009      	beq.n	801be64 <tx_dhcp+0xbc>
 801be50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801be58:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801be5c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801be60:	6812      	ldr	r2, [r2, #0]
 801be62:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 801be64:	2044      	movs	r0, #68	@ 0x44
 801be66:	f004 f920 	bl	80200aa <mg_ntohs>
 801be6a:	4603      	mov	r3, r0
 801be6c:	461d      	mov	r5, r3
 801be6e:	2043      	movs	r0, #67	@ 0x43
 801be70:	f004 f91b 	bl	80200aa <mg_ntohs>
 801be74:	4603      	mov	r3, r0
 801be76:	461c      	mov	r4, r3
 801be78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be7c:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 801be80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be84:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 801be88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801be8c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801be90:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801be94:	9303      	str	r3, [sp, #12]
 801be96:	f107 0310 	add.w	r3, r7, #16
 801be9a:	9302      	str	r3, [sp, #8]
 801be9c:	9401      	str	r4, [sp, #4]
 801be9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801bea2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	9300      	str	r3, [sp, #0]
 801beaa:	462b      	mov	r3, r5
 801beac:	6812      	ldr	r2, [r2, #0]
 801beae:	6809      	ldr	r1, [r1, #0]
 801beb0:	6800      	ldr	r0, [r0, #0]
 801beb2:	f7ff ff0f 	bl	801bcd4 <tx_udp>
         sizeof(dhcp));
}
 801beb6:	bf00      	nop
 801beb8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801bebc:	46bd      	mov	sp, r7
 801bebe:	bdb0      	pop	{r4, r5, r7, pc}
 801bec0:	08025e14 	.word	0x08025e14
 801bec4:	63825363 	.word	0x63825363

0801bec8 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 801bec8:	b5b0      	push	{r4, r5, r7, lr}
 801beca:	b090      	sub	sp, #64	@ 0x40
 801becc:	af04      	add	r7, sp, #16
 801bece:	60f8      	str	r0, [r7, #12]
 801bed0:	60b9      	str	r1, [r7, #8]
 801bed2:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 801bed4:	4b31      	ldr	r3, [pc, #196]	@ (801bf9c <tx_dhcp_request_sel+0xd4>)
 801bed6:	f107 0414 	add.w	r4, r7, #20
 801beda:	461d      	mov	r5, r3
 801bedc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bee4:	c403      	stmia	r4!, {r0, r1}
 801bee6:	8022      	strh	r2, [r4, #0]
 801bee8:	3402      	adds	r4, #2
 801beea:	0c13      	lsrs	r3, r2, #16
 801beec:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 801beee:	2300      	movs	r3, #0
 801bef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 801bef4:	f107 0314 	add.w	r3, r7, #20
 801bef8:	330a      	adds	r3, #10
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 801befe:	f107 0314 	add.w	r3, r7, #20
 801bf02:	3310      	adds	r3, #16
 801bf04:	68ba      	ldr	r2, [r7, #8]
 801bf06:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	7fdb      	ldrb	r3, [r3, #31]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d00a      	beq.n	801bf26 <tx_dhcp_request_sel+0x5e>
 801bf10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf14:	1c5a      	adds	r2, r3, #1
 801bf16:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801bf1a:	3318      	adds	r3, #24
 801bf1c:	3330      	adds	r3, #48	@ 0x30
 801bf1e:	443b      	add	r3, r7
 801bf20:	2206      	movs	r2, #6
 801bf22:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	f893 3020 	ldrb.w	r3, [r3, #32]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d00a      	beq.n	801bf46 <tx_dhcp_request_sel+0x7e>
 801bf30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf34:	1c5a      	adds	r2, r3, #1
 801bf36:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801bf3a:	3318      	adds	r3, #24
 801bf3c:	3330      	adds	r3, #48	@ 0x30
 801bf3e:	443b      	add	r3, r7
 801bf40:	222a      	movs	r2, #42	@ 0x2a
 801bf42:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 801bf46:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 801bf4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf4e:	4413      	add	r3, r2
 801bf50:	b2db      	uxtb	r3, r3
 801bf52:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 801bf56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf5a:	3319      	adds	r3, #25
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	9202      	str	r2, [sp, #8]
 801bf60:	9301      	str	r3, [sp, #4]
 801bf62:	f107 0314 	add.w	r3, r7, #20
 801bf66:	9300      	str	r3, [sp, #0]
 801bf68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf6c:	2200      	movs	r2, #0
 801bf6e:	490c      	ldr	r1, [pc, #48]	@ (801bfa0 <tx_dhcp_request_sel+0xd8>)
 801bf70:	68f8      	ldr	r0, [r7, #12]
 801bf72:	f7ff ff19 	bl	801bda8 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 801bf76:	4b0b      	ldr	r3, [pc, #44]	@ (801bfa4 <tx_dhcp_request_sel+0xdc>)
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	2b02      	cmp	r3, #2
 801bf7c:	dd09      	ble.n	801bf92 <tx_dhcp_request_sel+0xca>
 801bf7e:	4b0a      	ldr	r3, [pc, #40]	@ (801bfa8 <tx_dhcp_request_sel+0xe0>)
 801bf80:	f241 4257 	movw	r2, #5207	@ 0x1457
 801bf84:	4909      	ldr	r1, [pc, #36]	@ (801bfac <tx_dhcp_request_sel+0xe4>)
 801bf86:	2003      	movs	r0, #3
 801bf88:	f7fc fe70 	bl	8018c6c <mg_log_prefix>
 801bf8c:	4808      	ldr	r0, [pc, #32]	@ (801bfb0 <tx_dhcp_request_sel+0xe8>)
 801bf8e:	f7fc febd 	bl	8018d0c <mg_log>
}
 801bf92:	bf00      	nop
 801bf94:	3730      	adds	r7, #48	@ 0x30
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bdb0      	pop	{r4, r5, r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	08025f34 	.word	0x08025f34
 801bfa0:	08026e38 	.word	0x08026e38
 801bfa4:	20000288 	.word	0x20000288
 801bfa8:	08026f14 	.word	0x08026f14
 801bfac:	0802487c 	.word	0x0802487c
 801bfb0:	08025f24 	.word	0x08025f24

0801bfb4 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b08a      	sub	sp, #40	@ 0x28
 801bfb8:	af04      	add	r7, sp, #16
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	60b9      	str	r1, [r7, #8]
 801bfbe:	607a      	str	r2, [r7, #4]
 801bfc0:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 801bfc2:	4b10      	ldr	r3, [pc, #64]	@ (801c004 <tx_dhcp_request_re+0x50>)
 801bfc4:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 801bfc6:	2301      	movs	r3, #1
 801bfc8:	9302      	str	r3, [sp, #8]
 801bfca:	2304      	movs	r3, #4
 801bfcc:	9301      	str	r3, [sp, #4]
 801bfce:	f107 0314 	add.w	r3, r7, #20
 801bfd2:	9300      	str	r3, [sp, #0]
 801bfd4:	683b      	ldr	r3, [r7, #0]
 801bfd6:	687a      	ldr	r2, [r7, #4]
 801bfd8:	68b9      	ldr	r1, [r7, #8]
 801bfda:	68f8      	ldr	r0, [r7, #12]
 801bfdc:	f7ff fee4 	bl	801bda8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 801bfe0:	4b09      	ldr	r3, [pc, #36]	@ (801c008 <tx_dhcp_request_re+0x54>)
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	2b02      	cmp	r3, #2
 801bfe6:	dd09      	ble.n	801bffc <tx_dhcp_request_re+0x48>
 801bfe8:	4b08      	ldr	r3, [pc, #32]	@ (801c00c <tx_dhcp_request_re+0x58>)
 801bfea:	f241 4262 	movw	r2, #5218	@ 0x1462
 801bfee:	4908      	ldr	r1, [pc, #32]	@ (801c010 <tx_dhcp_request_re+0x5c>)
 801bff0:	2003      	movs	r0, #3
 801bff2:	f7fc fe3b 	bl	8018c6c <mg_log_prefix>
 801bff6:	4807      	ldr	r0, [pc, #28]	@ (801c014 <tx_dhcp_request_re+0x60>)
 801bff8:	f7fc fe88 	bl	8018d0c <mg_log>
}
 801bffc:	bf00      	nop
 801bffe:	3718      	adds	r7, #24
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}
 801c004:	ff030135 	.word	0xff030135
 801c008:	20000288 	.word	0x20000288
 801c00c:	08026f28 	.word	0x08026f28
 801c010:	0802487c 	.word	0x0802487c
 801c014:	08025f24 	.word	0x08025f24

0801c018 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 801c018:	b580      	push	{r7, lr}
 801c01a:	b088      	sub	sp, #32
 801c01c:	af04      	add	r7, sp, #16
 801c01e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 801c020:	4a14      	ldr	r2, [pc, #80]	@ (801c074 <tx_dhcp_discover+0x5c>)
 801c022:	f107 0308 	add.w	r3, r7, #8
 801c026:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c02a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 801c02e:	2300      	movs	r3, #0
 801c030:	9302      	str	r3, [sp, #8]
 801c032:	2308      	movs	r3, #8
 801c034:	9301      	str	r3, [sp, #4]
 801c036:	f107 0308 	add.w	r3, r7, #8
 801c03a:	9300      	str	r3, [sp, #0]
 801c03c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c040:	2200      	movs	r2, #0
 801c042:	490d      	ldr	r1, [pc, #52]	@ (801c078 <tx_dhcp_discover+0x60>)
 801c044:	6878      	ldr	r0, [r7, #4]
 801c046:	f7ff feaf 	bl	801bda8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 801c04a:	4b0c      	ldr	r3, [pc, #48]	@ (801c07c <tx_dhcp_discover+0x64>)
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	2b02      	cmp	r3, #2
 801c050:	dd0c      	ble.n	801c06c <tx_dhcp_discover+0x54>
 801c052:	4b0b      	ldr	r3, [pc, #44]	@ (801c080 <tx_dhcp_discover+0x68>)
 801c054:	f241 426c 	movw	r2, #5228	@ 0x146c
 801c058:	490a      	ldr	r1, [pc, #40]	@ (801c084 <tx_dhcp_discover+0x6c>)
 801c05a:	2003      	movs	r0, #3
 801c05c:	f7fc fe06 	bl	8018c6c <mg_log_prefix>
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	461a      	mov	r2, r3
 801c064:	4908      	ldr	r1, [pc, #32]	@ (801c088 <tx_dhcp_discover+0x70>)
 801c066:	4809      	ldr	r0, [pc, #36]	@ (801c08c <tx_dhcp_discover+0x74>)
 801c068:	f7fc fe50 	bl	8018d0c <mg_log>
}
 801c06c:	bf00      	nop
 801c06e:	3710      	adds	r7, #16
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}
 801c074:	08025f70 	.word	0x08025f70
 801c078:	08026e38 	.word	0x08026e38
 801c07c:	20000288 	.word	0x20000288
 801c080:	08026f3c 	.word	0x08026f3c
 801c084:	0802487c 	.word	0x0802487c
 801c088:	0801ef21 	.word	0x0801ef21
 801c08c:	08025f50 	.word	0x08025f50

0801c090 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 801c090:	b580      	push	{r7, lr}
 801c092:	b086      	sub	sp, #24
 801c094:	af00      	add	r7, sp, #0
 801c096:	60f8      	str	r0, [r7, #12]
 801c098:	60b9      	str	r1, [r7, #8]
 801c09a:	4613      	mov	r3, r2
 801c09c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 801c09e:	2300      	movs	r3, #0
 801c0a0:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	617b      	str	r3, [r7, #20]
 801c0a8:	e057      	b.n	801c15a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801c0b0:	f003 0310 	and.w	r3, r3, #16
 801c0b4:	b2db      	uxtb	r3, r3
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d010      	beq.n	801c0dc <getpeer+0x4c>
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	699b      	ldr	r3, [r3, #24]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d00c      	beq.n	801c0dc <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801c0c2:	68bb      	ldr	r3, [r7, #8]
 801c0c4:	699b      	ldr	r3, [r3, #24]
 801c0c6:	f103 000e 	add.w	r0, r3, #14
 801c0ca:	697b      	ldr	r3, [r7, #20]
 801c0cc:	331c      	adds	r3, #28
 801c0ce:	2204      	movs	r2, #4
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	f004 ffab 	bl	802102c <memcmp>
 801c0d6:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d042      	beq.n	801c162 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801c0dc:	697b      	ldr	r3, [r7, #20]
 801c0de:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c0e2:	f003 0301 	and.w	r3, r3, #1
 801c0e6:	b2db      	uxtb	r3, r3
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d00b      	beq.n	801c104 <getpeer+0x74>
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d007      	beq.n	801c104 <getpeer+0x74>
 801c0f4:	697b      	ldr	r3, [r7, #20]
 801c0f6:	8b1a      	ldrh	r2, [r3, #24]
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0fc:	885b      	ldrh	r3, [r3, #2]
 801c0fe:	b29b      	uxth	r3, r3
 801c100:	429a      	cmp	r2, r3
 801c102:	d030      	beq.n	801c166 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801c104:	697b      	ldr	r3, [r7, #20]
 801c106:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c10a:	f003 0301 	and.w	r3, r3, #1
 801c10e:	b2db      	uxtb	r3, r3
 801c110:	2b00      	cmp	r3, #0
 801c112:	d11f      	bne.n	801c154 <getpeer+0xc4>
 801c114:	68bb      	ldr	r3, [r7, #8]
 801c116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d01b      	beq.n	801c154 <getpeer+0xc4>
 801c11c:	697b      	ldr	r3, [r7, #20]
 801c11e:	8b1a      	ldrh	r2, [r3, #24]
 801c120:	68bb      	ldr	r3, [r7, #8]
 801c122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c124:	885b      	ldrh	r3, [r3, #2]
 801c126:	b29b      	uxth	r3, r3
 801c128:	429a      	cmp	r2, r3
 801c12a:	d113      	bne.n	801c154 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801c132:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c136:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801c138:	79fa      	ldrb	r2, [r7, #7]
 801c13a:	429a      	cmp	r2, r3
 801c13c:	d10a      	bne.n	801c154 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801c13e:	79fb      	ldrb	r3, [r7, #7]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d111      	bne.n	801c168 <getpeer+0xd8>
 801c144:	697b      	ldr	r3, [r7, #20]
 801c146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c14c:	881b      	ldrh	r3, [r3, #0]
 801c14e:	b29b      	uxth	r3, r3
 801c150:	429a      	cmp	r2, r3
 801c152:	d009      	beq.n	801c168 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 801c154:	697b      	ldr	r3, [r7, #20]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	617b      	str	r3, [r7, #20]
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d1a4      	bne.n	801c0aa <getpeer+0x1a>
 801c160:	e002      	b.n	801c168 <getpeer+0xd8>
      break;
 801c162:	bf00      	nop
 801c164:	e000      	b.n	801c168 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801c166:	bf00      	nop
      break;
  }
  return c;
 801c168:	697b      	ldr	r3, [r7, #20]
}
 801c16a:	4618      	mov	r0, r3
 801c16c:	3718      	adds	r7, #24
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
	...

0801c174 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801c174:	b5b0      	push	{r4, r5, r7, lr}
 801c176:	b088      	sub	sp, #32
 801c178:	af02      	add	r7, sp, #8
 801c17a:	6078      	str	r0, [r7, #4]
 801c17c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	699b      	ldr	r3, [r3, #24]
 801c182:	88db      	ldrh	r3, [r3, #6]
 801c184:	b29c      	uxth	r4, r3
 801c186:	2001      	movs	r0, #1
 801c188:	f003 ff8f 	bl	80200aa <mg_ntohs>
 801c18c:	4603      	mov	r3, r0
 801c18e:	429c      	cmp	r4, r3
 801c190:	d176      	bne.n	801c280 <rx_arp+0x10c>
 801c192:	683b      	ldr	r3, [r7, #0]
 801c194:	699b      	ldr	r3, [r3, #24]
 801c196:	699a      	ldr	r2, [r3, #24]
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	689b      	ldr	r3, [r3, #8]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	d16f      	bne.n	801c280 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	695b      	ldr	r3, [r3, #20]
 801c1a4:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801c1a6:	697b      	ldr	r3, [r7, #20]
 801c1a8:	330e      	adds	r3, #14
 801c1aa:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 801c1ac:	6978      	ldr	r0, [r7, #20]
 801c1ae:	683b      	ldr	r3, [r7, #0]
 801c1b0:	691b      	ldr	r3, [r3, #16]
 801c1b2:	3306      	adds	r3, #6
 801c1b4:	2206      	movs	r2, #6
 801c1b6:	4619      	mov	r1, r3
 801c1b8:	f005 f833 	bl	8021222 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	3306      	adds	r3, #6
 801c1c0:	6879      	ldr	r1, [r7, #4]
 801c1c2:	2206      	movs	r2, #6
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	f005 f82c 	bl	8021222 <memcpy>
    eth->type = mg_htons(0x806);
 801c1ca:	f640 0006 	movw	r0, #2054	@ 0x806
 801c1ce:	f003 ff6c 	bl	80200aa <mg_ntohs>
 801c1d2:	4603      	mov	r3, r0
 801c1d4:	461a      	mov	r2, r3
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801c1da:	683b      	ldr	r3, [r7, #0]
 801c1dc:	699a      	ldr	r2, [r3, #24]
 801c1de:	693b      	ldr	r3, [r7, #16]
 801c1e0:	6814      	ldr	r4, [r2, #0]
 801c1e2:	6850      	ldr	r0, [r2, #4]
 801c1e4:	6891      	ldr	r1, [r2, #8]
 801c1e6:	68d5      	ldr	r5, [r2, #12]
 801c1e8:	601c      	str	r4, [r3, #0]
 801c1ea:	6058      	str	r0, [r3, #4]
 801c1ec:	6099      	str	r1, [r3, #8]
 801c1ee:	60dd      	str	r5, [r3, #12]
 801c1f0:	6914      	ldr	r4, [r2, #16]
 801c1f2:	6950      	ldr	r0, [r2, #20]
 801c1f4:	6991      	ldr	r1, [r2, #24]
 801c1f6:	611c      	str	r4, [r3, #16]
 801c1f8:	6158      	str	r0, [r3, #20]
 801c1fa:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801c1fc:	2002      	movs	r0, #2
 801c1fe:	f003 ff54 	bl	80200aa <mg_ntohs>
 801c202:	4603      	mov	r3, r0
 801c204:	461a      	mov	r2, r3
 801c206:	693b      	ldr	r3, [r7, #16]
 801c208:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801c20a:	693b      	ldr	r3, [r7, #16]
 801c20c:	f103 0012 	add.w	r0, r3, #18
 801c210:	683b      	ldr	r3, [r7, #0]
 801c212:	699b      	ldr	r3, [r3, #24]
 801c214:	3308      	adds	r3, #8
 801c216:	2206      	movs	r2, #6
 801c218:	4619      	mov	r1, r3
 801c21a:	f005 f802 	bl	8021222 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801c21e:	693b      	ldr	r3, [r7, #16]
 801c220:	3308      	adds	r3, #8
 801c222:	6879      	ldr	r1, [r7, #4]
 801c224:	2206      	movs	r2, #6
 801c226:	4618      	mov	r0, r3
 801c228:	f004 fffb 	bl	8021222 <memcpy>
    arp->tpa = pkt->arp->spa;
 801c22c:	683b      	ldr	r3, [r7, #0]
 801c22e:	699b      	ldr	r3, [r3, #24]
 801c230:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	689a      	ldr	r2, [r3, #8]
 801c23c:	693b      	ldr	r3, [r7, #16]
 801c23e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 801c242:	4b4a      	ldr	r3, [pc, #296]	@ (801c36c <rx_arp+0x1f8>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	2b02      	cmp	r3, #2
 801c248:	dd10      	ble.n	801c26c <rx_arp+0xf8>
 801c24a:	4b49      	ldr	r3, [pc, #292]	@ (801c370 <rx_arp+0x1fc>)
 801c24c:	f241 428e 	movw	r2, #5262	@ 0x148e
 801c250:	4948      	ldr	r1, [pc, #288]	@ (801c374 <rx_arp+0x200>)
 801c252:	2003      	movs	r0, #3
 801c254:	f7fc fd0a 	bl	8018c6c <mg_log_prefix>
 801c258:	693b      	ldr	r3, [r7, #16]
 801c25a:	f103 0218 	add.w	r2, r3, #24
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	4b45      	ldr	r3, [pc, #276]	@ (801c378 <rx_arp+0x204>)
 801c264:	4945      	ldr	r1, [pc, #276]	@ (801c37c <rx_arp+0x208>)
 801c266:	4846      	ldr	r0, [pc, #280]	@ (801c380 <rx_arp+0x20c>)
 801c268:	f7fc fd50 	bl	8018d0c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 801c26c:	693b      	ldr	r3, [r7, #16]
 801c26e:	f103 021c 	add.w	r2, r3, #28
 801c272:	697b      	ldr	r3, [r7, #20]
 801c274:	1ad3      	subs	r3, r2, r3
 801c276:	4619      	mov	r1, r3
 801c278:	6878      	ldr	r0, [r7, #4]
 801c27a:	f7ff fbc7 	bl	801ba0c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801c27e:	e071      	b.n	801c364 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 801c280:	683b      	ldr	r3, [r7, #0]
 801c282:	699b      	ldr	r3, [r3, #24]
 801c284:	88db      	ldrh	r3, [r3, #6]
 801c286:	b29c      	uxth	r4, r3
 801c288:	2002      	movs	r0, #2
 801c28a:	f003 ff0e 	bl	80200aa <mg_ntohs>
 801c28e:	4603      	mov	r3, r0
 801c290:	429c      	cmp	r4, r3
 801c292:	d167      	bne.n	801c364 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	699b      	ldr	r3, [r3, #24]
 801c298:	3312      	adds	r3, #18
 801c29a:	6879      	ldr	r1, [r7, #4]
 801c29c:	2206      	movs	r2, #6
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f004 fec4 	bl	802102c <memcmp>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d15b      	bne.n	801c362 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 801c2aa:	683b      	ldr	r3, [r7, #0]
 801c2ac:	699b      	ldr	r3, [r3, #24]
 801c2ae:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	691b      	ldr	r3, [r3, #16]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d10a      	bne.n	801c2d0 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	699b      	ldr	r3, [r3, #24]
 801c2c4:	3308      	adds	r3, #8
 801c2c6:	2206      	movs	r2, #6
 801c2c8:	4619      	mov	r1, r3
 801c2ca:	f004 ffaa 	bl	8021222 <memcpy>
 801c2ce:	e049      	b.n	801c364 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2d4:	2200      	movs	r2, #0
 801c2d6:	6839      	ldr	r1, [r7, #0]
 801c2d8:	4618      	mov	r0, r3
 801c2da:	f7ff fed9 	bl	801c090 <getpeer>
 801c2de:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d03e      	beq.n	801c364 <rx_arp+0x1f0>
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801c2ec:	f003 0310 	and.w	r3, r3, #16
 801c2f0:	b2db      	uxtb	r3, r3
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d036      	beq.n	801c364 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	33b0      	adds	r3, #176	@ 0xb0
 801c2fa:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801c2fc:	68bb      	ldr	r3, [r7, #8]
 801c2fe:	f103 0018 	add.w	r0, r3, #24
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	699b      	ldr	r3, [r3, #24]
 801c306:	3308      	adds	r3, #8
 801c308:	2206      	movs	r2, #6
 801c30a:	4619      	mov	r1, r3
 801c30c:	f004 ff89 	bl	8021222 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 801c310:	4b16      	ldr	r3, [pc, #88]	@ (801c36c <rx_arp+0x1f8>)
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	2b02      	cmp	r3, #2
 801c316:	dd15      	ble.n	801c344 <rx_arp+0x1d0>
 801c318:	4b15      	ldr	r3, [pc, #84]	@ (801c370 <rx_arp+0x1fc>)
 801c31a:	f241 429b 	movw	r2, #5275	@ 0x149b
 801c31e:	4915      	ldr	r1, [pc, #84]	@ (801c374 <rx_arp+0x200>)
 801c320:	2003      	movs	r0, #3
 801c322:	f7fc fca3 	bl	8018c6c <mg_log_prefix>
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	f103 021c 	add.w	r2, r3, #28
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	3318      	adds	r3, #24
 801c334:	9301      	str	r3, [sp, #4]
 801c336:	4b10      	ldr	r3, [pc, #64]	@ (801c378 <rx_arp+0x204>)
 801c338:	9300      	str	r3, [sp, #0]
 801c33a:	4613      	mov	r3, r2
 801c33c:	4a0f      	ldr	r2, [pc, #60]	@ (801c37c <rx_arp+0x208>)
 801c33e:	4811      	ldr	r0, [pc, #68]	@ (801c384 <rx_arp+0x210>)
 801c340:	f7fc fce4 	bl	8018d0c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801c344:	68fa      	ldr	r2, [r7, #12]
 801c346:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801c34a:	f36f 1304 	bfc	r3, #4, #1
 801c34e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 801c352:	68f8      	ldr	r0, [r7, #12]
 801c354:	f002 f8ac 	bl	801e4b0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 801c358:	2103      	movs	r1, #3
 801c35a:	68f8      	ldr	r0, [r7, #12]
 801c35c:	f7ff fafa 	bl	801b954 <settmout>
 801c360:	e000      	b.n	801c364 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801c362:	bf00      	nop
      }
    }
  }
}
 801c364:	3718      	adds	r7, #24
 801c366:	46bd      	mov	sp, r7
 801c368:	bdb0      	pop	{r4, r5, r7, pc}
 801c36a:	bf00      	nop
 801c36c:	20000288 	.word	0x20000288
 801c370:	08026f50 	.word	0x08026f50
 801c374:	0802487c 	.word	0x0802487c
 801c378:	0801ef21 	.word	0x0801ef21
 801c37c:	0801ee5d 	.word	0x0801ee5d
 801c380:	08025f78 	.word	0x08025f78
 801c384:	08025f90 	.word	0x08025f90

0801c388 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801c388:	b580      	push	{r7, lr}
 801c38a:	b08a      	sub	sp, #40	@ 0x28
 801c38c:	af02      	add	r7, sp, #8
 801c38e:	6078      	str	r0, [r7, #4]
 801c390:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801c392:	683b      	ldr	r3, [r7, #0]
 801c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c396:	781b      	ldrb	r3, [r3, #0]
 801c398:	2b08      	cmp	r3, #8
 801c39a:	d14d      	bne.n	801c438 <rx_icmp+0xb0>
 801c39c:	683b      	ldr	r3, [r7, #0]
 801c39e:	69db      	ldr	r3, [r3, #28]
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d049      	beq.n	801c438 <rx_icmp+0xb0>
 801c3a4:	683b      	ldr	r3, [r7, #0]
 801c3a6:	69db      	ldr	r3, [r3, #28]
 801c3a8:	691a      	ldr	r2, [r3, #16]
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	689b      	ldr	r3, [r3, #8]
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	d142      	bne.n	801c438 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801c3b2:	2326      	movs	r3, #38	@ 0x26
 801c3b4:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	699a      	ldr	r2, [r3, #24]
 801c3ba:	69bb      	ldr	r3, [r7, #24]
 801c3bc:	1ad3      	subs	r3, r2, r3
 801c3be:	617b      	str	r3, [r7, #20]
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	68db      	ldr	r3, [r3, #12]
 801c3c4:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801c3c6:	69fa      	ldr	r2, [r7, #28]
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	d901      	bls.n	801c3d2 <rx_icmp+0x4a>
 801c3ce:	697b      	ldr	r3, [r7, #20]
 801c3d0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801c3d2:	683b      	ldr	r3, [r7, #0]
 801c3d4:	691b      	ldr	r3, [r3, #16]
 801c3d6:	1d99      	adds	r1, r3, #6
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	6898      	ldr	r0, [r3, #8]
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	69db      	ldr	r3, [r3, #28]
 801c3e0:	68db      	ldr	r3, [r3, #12]
 801c3e2:	69fa      	ldr	r2, [r7, #28]
 801c3e4:	3204      	adds	r2, #4
 801c3e6:	9201      	str	r2, [sp, #4]
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	2201      	movs	r2, #1
 801c3ee:	6878      	ldr	r0, [r7, #4]
 801c3f0:	f7ff fc1a 	bl	801bc28 <tx_ip>
 801c3f4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801c3f6:	693b      	ldr	r3, [r7, #16]
 801c3f8:	3314      	adds	r3, #20
 801c3fa:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801c3fc:	2204      	movs	r2, #4
 801c3fe:	2100      	movs	r1, #0
 801c400:	68f8      	ldr	r0, [r7, #12]
 801c402:	f004 fe3d 	bl	8021080 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	1d18      	adds	r0, r3, #4
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	689b      	ldr	r3, [r3, #8]
 801c40e:	69fa      	ldr	r2, [r7, #28]
 801c410:	4619      	mov	r1, r3
 801c412:	f004 ff06 	bl	8021222 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801c416:	69fb      	ldr	r3, [r7, #28]
 801c418:	3304      	adds	r3, #4
 801c41a:	4619      	mov	r1, r3
 801c41c:	68f8      	ldr	r0, [r7, #12]
 801c41e:	f7ff fa85 	bl	801b92c <ipcsum>
 801c422:	4603      	mov	r3, r0
 801c424:	461a      	mov	r2, r3
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801c42a:	69ba      	ldr	r2, [r7, #24]
 801c42c:	69fb      	ldr	r3, [r7, #28]
 801c42e:	4413      	add	r3, r2
 801c430:	4619      	mov	r1, r3
 801c432:	6878      	ldr	r0, [r7, #4]
 801c434:	f7ff faea 	bl	801ba0c <ether_output>
  }
}
 801c438:	bf00      	nop
 801c43a:	3720      	adds	r7, #32
 801c43c:	46bd      	mov	sp, r7
 801c43e:	bd80      	pop	{r7, pc}

0801c440 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801c440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c444:	b090      	sub	sp, #64	@ 0x40
 801c446:	af00      	add	r7, sp, #0
 801c448:	60f8      	str	r0, [r7, #12]
 801c44a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801c44c:	2300      	movs	r3, #0
 801c44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c450:	2300      	movs	r3, #0
 801c452:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c454:	2300      	movs	r3, #0
 801c456:	627b      	str	r3, [r7, #36]	@ 0x24
 801c458:	2300      	movs	r3, #0
 801c45a:	623b      	str	r3, [r7, #32]
 801c45c:	2300      	movs	r3, #0
 801c45e:	61fb      	str	r3, [r7, #28]
 801c460:	2300      	movs	r3, #0
 801c462:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801c464:	2300      	movs	r3, #0
 801c466:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801c470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c478:	33f0      	adds	r3, #240	@ 0xf0
 801c47a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801c47c:	68bb      	ldr	r3, [r7, #8]
 801c47e:	681a      	ldr	r2, [r3, #0]
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	685b      	ldr	r3, [r3, #4]
 801c484:	4413      	add	r3, r2
 801c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c48c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801c490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c492:	429a      	cmp	r2, r3
 801c494:	f0c0 81ac 	bcc.w	801c7f0 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c49c:	1d18      	adds	r0, r3, #4
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	3302      	adds	r3, #2
 801c4a2:	2204      	movs	r2, #4
 801c4a4:	4619      	mov	r1, r3
 801c4a6:	f004 fdc1 	bl	802102c <memcmp>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	f040 81a1 	bne.w	801c7f4 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801c4b2:	e08a      	b.n	801c5ca <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801c4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4b6:	781b      	ldrb	r3, [r3, #0]
 801c4b8:	2b01      	cmp	r3, #1
 801c4ba:	d10e      	bne.n	801c4da <rx_dhcp_client+0x9a>
 801c4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4be:	3301      	adds	r3, #1
 801c4c0:	781b      	ldrb	r3, [r3, #0]
 801c4c2:	2b04      	cmp	r3, #4
 801c4c4:	d109      	bne.n	801c4da <rx_dhcp_client+0x9a>
 801c4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4c8:	3306      	adds	r3, #6
 801c4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c4cc:	429a      	cmp	r2, r3
 801c4ce:	d904      	bls.n	801c4da <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 801c4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4d2:	3302      	adds	r3, #2
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c4d8:	e070      	b.n	801c5bc <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801c4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4dc:	781b      	ldrb	r3, [r3, #0]
 801c4de:	2b03      	cmp	r3, #3
 801c4e0:	d112      	bne.n	801c508 <rx_dhcp_client+0xc8>
 801c4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4e4:	3301      	adds	r3, #1
 801c4e6:	781b      	ldrb	r3, [r3, #0]
 801c4e8:	2b04      	cmp	r3, #4
 801c4ea:	d10d      	bne.n	801c508 <rx_dhcp_client+0xc8>
 801c4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4ee:	3306      	adds	r3, #6
 801c4f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c4f2:	429a      	cmp	r2, r3
 801c4f4:	d908      	bls.n	801c508 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801c4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4f8:	3302      	adds	r3, #2
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801c4fe:	68bb      	ldr	r3, [r7, #8]
 801c500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c502:	691b      	ldr	r3, [r3, #16]
 801c504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c506:	e059      	b.n	801c5bc <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	7fdb      	ldrb	r3, [r3, #31]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d012      	beq.n	801c536 <rx_dhcp_client+0xf6>
 801c510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c512:	781b      	ldrb	r3, [r3, #0]
 801c514:	2b06      	cmp	r3, #6
 801c516:	d10e      	bne.n	801c536 <rx_dhcp_client+0xf6>
 801c518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c51a:	3301      	adds	r3, #1
 801c51c:	781b      	ldrb	r3, [r3, #0]
 801c51e:	2b04      	cmp	r3, #4
 801c520:	d109      	bne.n	801c536 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c524:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801c526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c528:	429a      	cmp	r2, r3
 801c52a:	d904      	bls.n	801c536 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801c52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c52e:	3302      	adds	r3, #2
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	61fb      	str	r3, [r7, #28]
 801c534:	e042      	b.n	801c5bc <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d012      	beq.n	801c566 <rx_dhcp_client+0x126>
 801c540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c542:	781b      	ldrb	r3, [r3, #0]
 801c544:	2b2a      	cmp	r3, #42	@ 0x2a
 801c546:	d10e      	bne.n	801c566 <rx_dhcp_client+0x126>
 801c548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c54a:	3301      	adds	r3, #1
 801c54c:	781b      	ldrb	r3, [r3, #0]
 801c54e:	2b04      	cmp	r3, #4
 801c550:	d109      	bne.n	801c566 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801c552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c554:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801c556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c558:	429a      	cmp	r2, r3
 801c55a:	d904      	bls.n	801c566 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 801c55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c55e:	3302      	adds	r3, #2
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	61bb      	str	r3, [r7, #24]
 801c564:	e02a      	b.n	801c5bc <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801c566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c568:	781b      	ldrb	r3, [r3, #0]
 801c56a:	2b33      	cmp	r3, #51	@ 0x33
 801c56c:	d114      	bne.n	801c598 <rx_dhcp_client+0x158>
 801c56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c570:	3301      	adds	r3, #1
 801c572:	781b      	ldrb	r3, [r3, #0]
 801c574:	2b04      	cmp	r3, #4
 801c576:	d10f      	bne.n	801c598 <rx_dhcp_client+0x158>
 801c578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c57a:	3306      	adds	r3, #6
 801c57c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c57e:	429a      	cmp	r2, r3
 801c580:	d90a      	bls.n	801c598 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801c582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c584:	3302      	adds	r3, #2
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 801c58a:	6a3b      	ldr	r3, [r7, #32]
 801c58c:	4618      	mov	r0, r3
 801c58e:	f003 fd73 	bl	8020078 <mg_ntohl>
 801c592:	4603      	mov	r3, r0
 801c594:	623b      	str	r3, [r7, #32]
 801c596:	e011      	b.n	801c5bc <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 801c598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c59a:	781b      	ldrb	r3, [r3, #0]
 801c59c:	2b35      	cmp	r3, #53	@ 0x35
 801c59e:	d10d      	bne.n	801c5bc <rx_dhcp_client+0x17c>
 801c5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5a2:	3301      	adds	r3, #1
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	2b01      	cmp	r3, #1
 801c5a8:	d108      	bne.n	801c5bc <rx_dhcp_client+0x17c>
 801c5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5ac:	3306      	adds	r3, #6
 801c5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d903      	bls.n	801c5bc <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801c5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5b6:	789b      	ldrb	r3, [r3, #2]
 801c5b8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801c5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5be:	3301      	adds	r3, #1
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	3302      	adds	r3, #2
 801c5c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5c6:	4413      	add	r3, r2
 801c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801c5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5cc:	3301      	adds	r3, #1
 801c5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5d0:	429a      	cmp	r2, r3
 801c5d2:	d904      	bls.n	801c5de <rx_dhcp_client+0x19e>
 801c5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	2bff      	cmp	r3, #255	@ 0xff
 801c5da:	f47f af6b 	bne.w	801c4b4 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801c5de:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801c5e2:	2b06      	cmp	r3, #6
 801c5e4:	d10c      	bne.n	801c600 <rx_dhcp_client+0x1c0>
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	689b      	ldr	r3, [r3, #8]
 801c5ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c5ec:	429a      	cmp	r2, r3
 801c5ee:	d107      	bne.n	801c600 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	2201      	movs	r2, #1
 801c5f4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	609a      	str	r2, [r3, #8]
 801c5fe:	e0ec      	b.n	801c7da <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 801c600:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801c604:	2b02      	cmp	r3, #2
 801c606:	d123      	bne.n	801c650 <rx_dhcp_client+0x210>
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801c60e:	2b01      	cmp	r3, #1
 801c610:	d11e      	bne.n	801c650 <rx_dhcp_client+0x210>
 801c612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c614:	2b00      	cmp	r3, #0
 801c616:	d01b      	beq.n	801c650 <rx_dhcp_client+0x210>
 801c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d018      	beq.n	801c650 <rx_dhcp_client+0x210>
 801c61e:	6a3b      	ldr	r3, [r7, #32]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d015      	beq.n	801c650 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801c624:	68bb      	ldr	r3, [r7, #8]
 801c626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c628:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d003      	beq.n	801c636 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801c62e:	68bb      	ldr	r3, [r7, #8]
 801c630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801c632:	695b      	ldr	r3, [r3, #20]
 801c634:	e002      	b.n	801c63c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801c63a:	68db      	ldr	r3, [r3, #12]
 801c63c:	461a      	mov	r2, r3
 801c63e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c640:	68f8      	ldr	r0, [r7, #12]
 801c642:	f7ff fc41 	bl	801bec8 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	2202      	movs	r2, #2
 801c64a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801c64e:	e0c4      	b.n	801c7da <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 801c650:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801c654:	2b05      	cmp	r3, #5
 801c656:	f040 80c0 	bne.w	801c7da <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801c660:	2b02      	cmp	r3, #2
 801c662:	f040 8081 	bne.w	801c768 <rx_dhcp_client+0x328>
 801c666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d07d      	beq.n	801c768 <rx_dhcp_client+0x328>
 801c66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d07a      	beq.n	801c768 <rx_dhcp_client+0x328>
 801c672:	6a3b      	ldr	r3, [r7, #32]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d077      	beq.n	801c768 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801c67e:	6a39      	ldr	r1, [r7, #32]
 801c680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c684:	fb00 f101 	mul.w	r1, r0, r1
 801c688:	2000      	movs	r0, #0
 801c68a:	4688      	mov	r8, r1
 801c68c:	4681      	mov	r9, r0
 801c68e:	eb12 0108 	adds.w	r1, r2, r8
 801c692:	6039      	str	r1, [r7, #0]
 801c694:	eb43 0309 	adc.w	r3, r3, r9
 801c698:	607b      	str	r3, [r7, #4]
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801c6a0:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801c6a4:	4b56      	ldr	r3, [pc, #344]	@ (801c800 <rx_dhcp_client+0x3c0>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	2b01      	cmp	r3, #1
 801c6aa:	dd16      	ble.n	801c6da <rx_dhcp_client+0x29a>
 801c6ac:	4b55      	ldr	r3, [pc, #340]	@ (801c804 <rx_dhcp_client+0x3c4>)
 801c6ae:	f241 42dd 	movw	r2, #5341	@ 0x14dd
 801c6b2:	4955      	ldr	r1, [pc, #340]	@ (801c808 <rx_dhcp_client+0x3c8>)
 801c6b4:	2002      	movs	r0, #2
 801c6b6:	f7fc fad9 	bl	8018c6c <mg_log_prefix>
 801c6ba:	6a3c      	ldr	r4, [r7, #32]
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801c6c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c6c6:	f04f 0300 	mov.w	r3, #0
 801c6ca:	f7e4 fa89 	bl	8000be0 <__aeabi_uldivmod>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	460b      	mov	r3, r1
 801c6d2:	4621      	mov	r1, r4
 801c6d4:	484d      	ldr	r0, [pc, #308]	@ (801c80c <rx_dhcp_client+0x3cc>)
 801c6d6:	f7fc fb19 	bl	8018d0c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801c6e0:	68bb      	ldr	r3, [r7, #8]
 801c6e2:	691b      	ldr	r3, [r3, #16]
 801c6e4:	3306      	adds	r3, #6
 801c6e6:	2206      	movs	r2, #6
 801c6e8:	4619      	mov	r1, r3
 801c6ea:	f004 fd9a 	bl	8021222 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c6f2:	609a      	str	r2, [r3, #8]
 801c6f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	611a      	str	r2, [r3, #16]
 801c6fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	2203      	movs	r2, #3
 801c704:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 801c708:	f107 0310 	add.w	r3, r7, #16
 801c70c:	2108      	movs	r1, #8
 801c70e:	4618      	mov	r0, r3
 801c710:	f003 fc4b 	bl	801ffaa <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801c714:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c718:	4614      	mov	r4, r2
 801c71a:	f003 fd57 	bl	80201cc <mg_millis>
 801c71e:	4602      	mov	r2, r0
 801c720:	460b      	mov	r3, r1
 801c722:	4613      	mov	r3, r2
 801c724:	4423      	add	r3, r4
 801c726:	4618      	mov	r0, r3
 801c728:	f004 f9b4 	bl	8020a94 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	7fdb      	ldrb	r3, [r3, #31]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d009      	beq.n	801c748 <rx_dhcp_client+0x308>
 801c734:	69fb      	ldr	r3, [r7, #28]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d006      	beq.n	801c748 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801c73a:	f107 031c 	add.w	r3, r7, #28
 801c73e:	461a      	mov	r2, r3
 801c740:	2101      	movs	r1, #1
 801c742:	68f8      	ldr	r0, [r7, #12]
 801c744:	f7ff f87a 	bl	801b83c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d042      	beq.n	801c7d8 <rx_dhcp_client+0x398>
 801c752:	69bb      	ldr	r3, [r7, #24]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d03f      	beq.n	801c7d8 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 801c758:	f107 0318 	add.w	r3, r7, #24
 801c75c:	461a      	mov	r2, r3
 801c75e:	2102      	movs	r1, #2
 801c760:	68f8      	ldr	r0, [r7, #12]
 801c762:	f7ff f86b 	bl	801b83c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801c766:	e037      	b.n	801c7d8 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801c76e:	2b03      	cmp	r3, #3
 801c770:	d133      	bne.n	801c7da <rx_dhcp_client+0x39a>
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	689b      	ldr	r3, [r3, #8]
 801c776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c778:	429a      	cmp	r2, r3
 801c77a:	d12e      	bne.n	801c7da <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801c782:	6a39      	ldr	r1, [r7, #32]
 801c784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c788:	fb00 f101 	mul.w	r1, r0, r1
 801c78c:	2000      	movs	r0, #0
 801c78e:	460c      	mov	r4, r1
 801c790:	4605      	mov	r5, r0
 801c792:	eb12 0a04 	adds.w	sl, r2, r4
 801c796:	eb43 0b05 	adc.w	fp, r3, r5
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801c7a0:	4b17      	ldr	r3, [pc, #92]	@ (801c800 <rx_dhcp_client+0x3c0>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b01      	cmp	r3, #1
 801c7a6:	dd18      	ble.n	801c7da <rx_dhcp_client+0x39a>
 801c7a8:	4b16      	ldr	r3, [pc, #88]	@ (801c804 <rx_dhcp_client+0x3c4>)
 801c7aa:	f241 42eb 	movw	r2, #5355	@ 0x14eb
 801c7ae:	4916      	ldr	r1, [pc, #88]	@ (801c808 <rx_dhcp_client+0x3c8>)
 801c7b0:	2002      	movs	r0, #2
 801c7b2:	f7fc fa5b 	bl	8018c6c <mg_log_prefix>
 801c7b6:	6a3c      	ldr	r4, [r7, #32]
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801c7be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c7c2:	f04f 0300 	mov.w	r3, #0
 801c7c6:	f7e4 fa0b 	bl	8000be0 <__aeabi_uldivmod>
 801c7ca:	4602      	mov	r2, r0
 801c7cc:	460b      	mov	r3, r1
 801c7ce:	4621      	mov	r1, r4
 801c7d0:	480e      	ldr	r0, [pc, #56]	@ (801c80c <rx_dhcp_client+0x3cc>)
 801c7d2:	f7fc fa9b 	bl	8018d0c <mg_log>
 801c7d6:	e000      	b.n	801c7da <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801c7d8:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801c7e0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d006      	beq.n	801c7f6 <rx_dhcp_client+0x3b6>
 801c7e8:	68f8      	ldr	r0, [r7, #12]
 801c7ea:	f7ff f989 	bl	801bb00 <onstatechange>
 801c7ee:	e002      	b.n	801c7f6 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801c7f0:	bf00      	nop
 801c7f2:	e000      	b.n	801c7f6 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801c7f4:	bf00      	nop
}
 801c7f6:	3740      	adds	r7, #64	@ 0x40
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c7fe:	bf00      	nop
 801c800:	20000288 	.word	0x20000288
 801c804:	08026f58 	.word	0x08026f58
 801c808:	0802487c 	.word	0x0802487c
 801c80c:	08025fac 	.word	0x08025fac

0801c810 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c814:	b0d6      	sub	sp, #344	@ 0x158
 801c816:	af04      	add	r7, sp, #16
 801c818:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c81c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801c820:	6018      	str	r0, [r3, #0]
 801c822:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c826:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801c82a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801c82c:	2300      	movs	r3, #0
 801c82e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 801c832:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c836:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c83e:	33f0      	adds	r3, #240	@ 0xf0
 801c840:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801c844:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c848:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	681a      	ldr	r2, [r3, #0]
 801c850:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c854:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	685b      	ldr	r3, [r3, #4]
 801c85c:	4413      	add	r3, r2
 801c85e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801c862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c866:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c86e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801c872:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801c876:	429a      	cmp	r2, r3
 801c878:	f0c0 81b0 	bcc.w	801cbdc <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801c87c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c880:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801c884:	4ad8      	ldr	r2, [pc, #864]	@ (801cbe8 <rx_dhcp_server+0x3d8>)
 801c886:	4618      	mov	r0, r3
 801c888:	4611      	mov	r1, r2
 801c88a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801c88e:	461a      	mov	r2, r3
 801c890:	f004 fcc7 	bl	8021222 <memcpy>
  res.yiaddr = ifp->ip;
 801c894:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c898:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	689a      	ldr	r2, [r3, #8]
 801c8a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c8a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801c8a8:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 801c8aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801c8ae:	3310      	adds	r3, #16
 801c8b0:	3303      	adds	r3, #3
 801c8b2:	781a      	ldrb	r2, [r3, #0]
 801c8b4:	3201      	adds	r2, #1
 801c8b6:	b2d2      	uxtb	r2, r2
 801c8b8:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801c8ba:	e020      	b.n	801c8fe <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801c8bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c8c0:	781b      	ldrb	r3, [r3, #0]
 801c8c2:	2b35      	cmp	r3, #53	@ 0x35
 801c8c4:	d111      	bne.n	801c8ea <rx_dhcp_server+0xda>
 801c8c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c8ca:	3301      	adds	r3, #1
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	2b01      	cmp	r3, #1
 801c8d0:	d10b      	bne.n	801c8ea <rx_dhcp_server+0xda>
 801c8d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c8d6:	3302      	adds	r3, #2
 801c8d8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	d904      	bls.n	801c8ea <rx_dhcp_server+0xda>
      op = p[2];
 801c8e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c8e4:	789b      	ldrb	r3, [r3, #2]
 801c8e6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 801c8ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c8ee:	3301      	adds	r3, #1
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	3302      	adds	r3, #2
 801c8f4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801c8f8:	4413      	add	r3, r2
 801c8fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801c8fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c902:	3301      	adds	r3, #1
 801c904:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801c908:	429a      	cmp	r2, r3
 801c90a:	d904      	bls.n	801c916 <rx_dhcp_server+0x106>
 801c90c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801c910:	781b      	ldrb	r3, [r3, #0]
 801c912:	2bff      	cmp	r3, #255	@ 0xff
 801c914:	d1d2      	bne.n	801c8bc <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801c916:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801c91a:	2b01      	cmp	r3, #1
 801c91c:	d004      	beq.n	801c928 <rx_dhcp_server+0x118>
 801c91e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801c922:	2b03      	cmp	r3, #3
 801c924:	f040 815b 	bne.w	801cbde <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 801c928:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801c92c:	2b01      	cmp	r3, #1
 801c92e:	d101      	bne.n	801c934 <rx_dhcp_server+0x124>
 801c930:	2302      	movs	r3, #2
 801c932:	e000      	b.n	801c936 <rx_dhcp_server+0x126>
 801c934:	2305      	movs	r3, #5
 801c936:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 801c93a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c93e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c942:	2235      	movs	r2, #53	@ 0x35
 801c944:	701a      	strb	r2, [r3, #0]
 801c946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c94a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c94e:	2201      	movs	r2, #1
 801c950:	705a      	strb	r2, [r3, #1]
 801c952:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c956:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c95a:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 801c95e:	709a      	strb	r2, [r3, #2]
 801c960:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c964:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c968:	2201      	movs	r2, #1
 801c96a:	70da      	strb	r2, [r3, #3]
 801c96c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c970:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c974:	2204      	movs	r2, #4
 801c976:	711a      	strb	r2, [r3, #4]
 801c978:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c97c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c980:	2200      	movs	r2, #0
 801c982:	715a      	strb	r2, [r3, #5]
 801c984:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c988:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c98c:	2200      	movs	r2, #0
 801c98e:	719a      	strb	r2, [r3, #6]
 801c990:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c994:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c998:	2200      	movs	r2, #0
 801c99a:	71da      	strb	r2, [r3, #7]
 801c99c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	721a      	strb	r2, [r3, #8]
 801c9a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9b0:	2236      	movs	r2, #54	@ 0x36
 801c9b2:	725a      	strb	r2, [r3, #9]
 801c9b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9bc:	2204      	movs	r2, #4
 801c9be:	729a      	strb	r2, [r3, #10]
 801c9c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9c8:	2200      	movs	r2, #0
 801c9ca:	72da      	strb	r2, [r3, #11]
 801c9cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9d4:	2200      	movs	r2, #0
 801c9d6:	731a      	strb	r2, [r3, #12]
 801c9d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9e0:	2200      	movs	r2, #0
 801c9e2:	735a      	strb	r2, [r3, #13]
 801c9e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9ec:	2200      	movs	r2, #0
 801c9ee:	739a      	strb	r2, [r3, #14]
 801c9f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801c9f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801c9f8:	220c      	movs	r2, #12
 801c9fa:	73da      	strb	r2, [r3, #15]
 801c9fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca04:	2203      	movs	r2, #3
 801ca06:	741a      	strb	r2, [r3, #16]
 801ca08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca10:	226d      	movs	r2, #109	@ 0x6d
 801ca12:	745a      	strb	r2, [r3, #17]
 801ca14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca1c:	2269      	movs	r2, #105	@ 0x69
 801ca1e:	749a      	strb	r2, [r3, #18]
 801ca20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca28:	2270      	movs	r2, #112	@ 0x70
 801ca2a:	74da      	strb	r2, [r3, #19]
 801ca2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca34:	2233      	movs	r2, #51	@ 0x33
 801ca36:	751a      	strb	r2, [r3, #20]
 801ca38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca40:	2204      	movs	r2, #4
 801ca42:	755a      	strb	r2, [r3, #21]
 801ca44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca4c:	22ff      	movs	r2, #255	@ 0xff
 801ca4e:	759a      	strb	r2, [r3, #22]
 801ca50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca58:	22ff      	movs	r2, #255	@ 0xff
 801ca5a:	75da      	strb	r2, [r3, #23]
 801ca5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca64:	22ff      	movs	r2, #255	@ 0xff
 801ca66:	761a      	strb	r2, [r3, #24]
 801ca68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca70:	22ff      	movs	r2, #255	@ 0xff
 801ca72:	765a      	strb	r2, [r3, #25]
 801ca74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ca7c:	22ff      	movs	r2, #255	@ 0xff
 801ca7e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 801ca80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ca84:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ca8c:	f103 011c 	add.w	r1, r3, #28
 801ca90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ca94:	331c      	adds	r3, #28
 801ca96:	2206      	movs	r2, #6
 801ca98:	4618      	mov	r0, r3
 801ca9a:	f004 fbc2 	bl	8021222 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 801ca9e:	f107 030c 	add.w	r3, r7, #12
 801caa2:	3305      	adds	r3, #5
 801caa4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801caa8:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801caac:	6812      	ldr	r2, [r2, #0]
 801caae:	320c      	adds	r2, #12
 801cab0:	6812      	ldr	r2, [r2, #0]
 801cab2:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801cab4:	f107 030c 	add.w	r3, r7, #12
 801cab8:	330b      	adds	r3, #11
 801caba:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801cabe:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801cac2:	6812      	ldr	r2, [r2, #0]
 801cac4:	3208      	adds	r2, #8
 801cac6:	6812      	ldr	r2, [r2, #0]
 801cac8:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 801caca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cace:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801cad2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801cad6:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801cada:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 801cade:	4615      	mov	r5, r2
 801cae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801cae8:	c403      	stmia	r4!, {r0, r1}
 801caea:	8022      	strh	r2, [r4, #0]
 801caec:	3402      	adds	r4, #2
 801caee:	0c13      	lsrs	r3, r2, #16
 801caf0:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801caf2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801caf6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cafe:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801cb02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801cb0a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 801cb0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb12:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cb1a:	685a      	ldr	r2, [r3, #4]
 801cb1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb20:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801cb24:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801cb26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	7f9b      	ldrb	r3, [r3, #30]
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d01c      	beq.n	801cb70 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 801cb36:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801cb3e:	691a      	ldr	r2, [r3, #16]
 801cb40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801cb4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801cb5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb5e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	691b      	ldr	r3, [r3, #16]
 801cb66:	3306      	adds	r3, #6
 801cb68:	2206      	movs	r2, #6
 801cb6a:	4619      	mov	r1, r3
 801cb6c:	f004 fb59 	bl	8021222 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 801cb70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	691b      	ldr	r3, [r3, #16]
 801cb7c:	1d9d      	adds	r5, r3, #6
 801cb7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cb82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	689e      	ldr	r6, [r3, #8]
 801cb8a:	2043      	movs	r0, #67	@ 0x43
 801cb8c:	f003 fa8d 	bl	80200aa <mg_ntohs>
 801cb90:	4603      	mov	r3, r0
 801cb92:	4698      	mov	r8, r3
 801cb94:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801cb98:	2b01      	cmp	r3, #1
 801cb9a:	d005      	beq.n	801cba8 <rx_dhcp_server+0x398>
 801cb9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cba0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801cba4:	691c      	ldr	r4, [r3, #16]
 801cba6:	e001      	b.n	801cbac <rx_dhcp_server+0x39c>
 801cba8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cbac:	2044      	movs	r0, #68	@ 0x44
 801cbae:	f003 fa7c 	bl	80200aa <mg_ntohs>
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	461a      	mov	r2, r3
 801cbb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801cbba:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 801cbbe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801cbc2:	9303      	str	r3, [sp, #12]
 801cbc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801cbc8:	9302      	str	r3, [sp, #8]
 801cbca:	9201      	str	r2, [sp, #4]
 801cbcc:	9400      	str	r4, [sp, #0]
 801cbce:	4643      	mov	r3, r8
 801cbd0:	4632      	mov	r2, r6
 801cbd2:	4629      	mov	r1, r5
 801cbd4:	6800      	ldr	r0, [r0, #0]
 801cbd6:	f7ff f87d 	bl	801bcd4 <tx_udp>
 801cbda:	e000      	b.n	801cbde <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801cbdc:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 801cbde:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbe8:	08025fc4 	.word	0x08025fc4

0801cbec <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b084      	sub	sp, #16
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	6078      	str	r0, [r7, #4]
 801cbf4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbfa:	2201      	movs	r2, #1
 801cbfc:	6839      	ldr	r1, [r7, #0]
 801cbfe:	4618      	mov	r0, r3
 801cc00:	f7ff fa46 	bl	801c090 <getpeer>
 801cc04:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d059      	beq.n	801ccc0 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc10:	881b      	ldrh	r3, [r3, #0]
 801cc12:	b29a      	uxth	r2, r3
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	331c      	adds	r3, #28
 801cc1c:	683a      	ldr	r2, [r7, #0]
 801cc1e:	69d2      	ldr	r2, [r2, #28]
 801cc20:	320c      	adds	r2, #12
 801cc22:	6812      	ldr	r2, [r2, #0]
 801cc24:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	33b0      	adds	r3, #176	@ 0xb0
 801cc2a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	f103 0018 	add.w	r0, r3, #24
 801cc32:	683b      	ldr	r3, [r7, #0]
 801cc34:	691b      	ldr	r3, [r3, #16]
 801cc36:	3306      	adds	r3, #6
 801cc38:	2206      	movs	r2, #6
 801cc3a:	4619      	mov	r1, r3
 801cc3c:	f004 faf1 	bl	8021222 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cc44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cc48:	d304      	bcc.n	801cc54 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 801cc4a:	491f      	ldr	r1, [pc, #124]	@ (801ccc8 <rx_udp+0xdc>)
 801cc4c:	68f8      	ldr	r0, [r7, #12]
 801cc4e:	f7f6 fc4d 	bl	80134ec <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801cc52:	e035      	b.n	801ccc0 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cc5c:	1ad2      	subs	r2, r2, r3
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	68db      	ldr	r3, [r3, #12]
 801cc62:	429a      	cmp	r2, r3
 801cc64:	d212      	bcs.n	801cc8c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cc70:	683b      	ldr	r3, [r7, #0]
 801cc72:	68db      	ldr	r3, [r3, #12]
 801cc74:	4413      	add	r3, r2
 801cc76:	4619      	mov	r1, r3
 801cc78:	f7fb f80a 	bl	8017c90 <mg_iobuf_resize>
 801cc7c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d104      	bne.n	801cc8c <rx_udp+0xa0>
      mg_error(c, "oom");
 801cc82:	4912      	ldr	r1, [pc, #72]	@ (801cccc <rx_udp+0xe0>)
 801cc84:	68f8      	ldr	r0, [r7, #12]
 801cc86:	f7f6 fc31 	bl	80134ec <mg_error>
}
 801cc8a:	e019      	b.n	801ccc0 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cc94:	18d0      	adds	r0, r2, r3
 801cc96:	683b      	ldr	r3, [r7, #0]
 801cc98:	6899      	ldr	r1, [r3, #8]
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	68db      	ldr	r3, [r3, #12]
 801cc9e:	461a      	mov	r2, r3
 801cca0:	f004 fabf 	bl	8021222 <memcpy>
      c->recv.len += pkt->pay.len;
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	68db      	ldr	r3, [r3, #12]
 801ccac:	441a      	add	r2, r3
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801ccb2:	683b      	ldr	r3, [r7, #0]
 801ccb4:	330c      	adds	r3, #12
 801ccb6:	461a      	mov	r2, r3
 801ccb8:	2107      	movs	r1, #7
 801ccba:	68f8      	ldr	r0, [r7, #12]
 801ccbc:	f7f6 fbf6 	bl	80134ac <mg_call>
}
 801ccc0:	bf00      	nop
 801ccc2:	3710      	adds	r7, #16
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	bd80      	pop	{r7, pc}
 801ccc8:	080260d4 	.word	0x080260d4
 801cccc:	080260f0 	.word	0x080260f0

0801ccd0 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 801ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccd2:	b091      	sub	sp, #68	@ 0x44
 801ccd4:	af06      	add	r7, sp, #24
 801ccd6:	60f8      	str	r0, [r7, #12]
 801ccd8:	60b9      	str	r1, [r7, #8]
 801ccda:	607a      	str	r2, [r7, #4]
 801ccdc:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	689a      	ldr	r2, [r3, #8]
 801cce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cce4:	3314      	adds	r3, #20
 801cce6:	9301      	str	r3, [sp, #4]
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	9300      	str	r3, [sp, #0]
 801ccec:	4613      	mov	r3, r2
 801ccee:	2206      	movs	r2, #6
 801ccf0:	68b9      	ldr	r1, [r7, #8]
 801ccf2:	68f8      	ldr	r0, [r7, #12]
 801ccf4:	f7fe ff98 	bl	801bc28 <tx_ip>
 801ccf8:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 801ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccfc:	3314      	adds	r3, #20
 801ccfe:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 801cd00:	2214      	movs	r2, #20
 801cd02:	2100      	movs	r1, #0
 801cd04:	6a38      	ldr	r0, [r7, #32]
 801cd06:	f004 f9bb 	bl	8021080 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801cd0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d009      	beq.n	801cd24 <tx_tcp+0x54>
 801cd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d006      	beq.n	801cd24 <tx_tcp+0x54>
 801cd16:	6a3b      	ldr	r3, [r7, #32]
 801cd18:	3314      	adds	r3, #20
 801cd1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cd1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f004 f994 	bl	802104c <memmove>
  tcp->sport = sport;
 801cd24:	6a3b      	ldr	r3, [r7, #32]
 801cd26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cd2a:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801cd2c:	6a3b      	ldr	r3, [r7, #32]
 801cd2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cd32:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 801cd34:	6a3b      	ldr	r3, [r7, #32]
 801cd36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cd38:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801cd3a:	6a3b      	ldr	r3, [r7, #32]
 801cd3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cd3e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 801cd40:	6a3b      	ldr	r3, [r7, #32]
 801cd42:	78fa      	ldrb	r2, [r7, #3]
 801cd44:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 801cd46:	f241 7070 	movw	r0, #6000	@ 0x1770
 801cd4a:	f003 f9ae 	bl	80200aa <mg_ntohs>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	461a      	mov	r2, r3
 801cd52:	6a3b      	ldr	r3, [r7, #32]
 801cd54:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 801cd56:	6a3b      	ldr	r3, [r7, #32]
 801cd58:	2250      	movs	r2, #80	@ 0x50
 801cd5a:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 801cd60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd62:	b29b      	uxth	r3, r3
 801cd64:	3314      	adds	r3, #20
 801cd66:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 801cd68:	2300      	movs	r3, #0
 801cd6a:	753b      	strb	r3, [r7, #20]
 801cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd6e:	7a5b      	ldrb	r3, [r3, #9]
 801cd70:	757b      	strb	r3, [r7, #21]
 801cd72:	8b7b      	ldrh	r3, [r7, #26]
 801cd74:	0a1b      	lsrs	r3, r3, #8
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	b2db      	uxtb	r3, r3
 801cd7a:	75bb      	strb	r3, [r7, #22]
 801cd7c:	8b7b      	ldrh	r3, [r7, #26]
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 801cd82:	8b7b      	ldrh	r3, [r7, #26]
 801cd84:	461a      	mov	r2, r3
 801cd86:	6a39      	ldr	r1, [r7, #32]
 801cd88:	69f8      	ldr	r0, [r7, #28]
 801cd8a:	f7fe fd89 	bl	801b8a0 <csumup>
 801cd8e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801cd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd92:	330c      	adds	r3, #12
 801cd94:	2204      	movs	r2, #4
 801cd96:	4619      	mov	r1, r3
 801cd98:	69f8      	ldr	r0, [r7, #28]
 801cd9a:	f7fe fd81 	bl	801b8a0 <csumup>
 801cd9e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cda2:	3310      	adds	r3, #16
 801cda4:	2204      	movs	r2, #4
 801cda6:	4619      	mov	r1, r3
 801cda8:	69f8      	ldr	r0, [r7, #28]
 801cdaa:	f7fe fd79 	bl	801b8a0 <csumup>
 801cdae:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 801cdb0:	f107 0314 	add.w	r3, r7, #20
 801cdb4:	2204      	movs	r2, #4
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	69f8      	ldr	r0, [r7, #28]
 801cdba:	f7fe fd71 	bl	801b8a0 <csumup>
 801cdbe:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 801cdc0:	69f8      	ldr	r0, [r7, #28]
 801cdc2:	f7fe fd98 	bl	801b8f6 <csumfin>
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	461a      	mov	r2, r3
 801cdca:	6a3b      	ldr	r3, [r7, #32]
 801cdcc:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 801cdce:	4b21      	ldr	r3, [pc, #132]	@ (801ce54 <tx_tcp+0x184>)
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	2b03      	cmp	r3, #3
 801cdd4:	dd2c      	ble.n	801ce30 <tx_tcp+0x160>
 801cdd6:	4b20      	ldr	r3, [pc, #128]	@ (801ce58 <tx_tcp+0x188>)
 801cdd8:	f241 5250 	movw	r2, #5456	@ 0x1550
 801cddc:	491f      	ldr	r1, [pc, #124]	@ (801ce5c <tx_tcp+0x18c>)
 801cdde:	2004      	movs	r0, #4
 801cde0:	f7fb ff44 	bl	8018c6c <mg_log_prefix>
 801cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cde6:	f103 050c 	add.w	r5, r3, #12
 801cdea:	6a3b      	ldr	r3, [r7, #32]
 801cdec:	881b      	ldrh	r3, [r3, #0]
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f003 f95a 	bl	80200aa <mg_ntohs>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	461e      	mov	r6, r3
 801cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdfc:	f103 0410 	add.w	r4, r3, #16
 801ce00:	6a3b      	ldr	r3, [r7, #32]
 801ce02:	885b      	ldrh	r3, [r3, #2]
 801ce04:	b29b      	uxth	r3, r3
 801ce06:	4618      	mov	r0, r3
 801ce08:	f003 f94f 	bl	80200aa <mg_ntohs>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	461a      	mov	r2, r3
 801ce10:	6a3b      	ldr	r3, [r7, #32]
 801ce12:	7b5b      	ldrb	r3, [r3, #13]
 801ce14:	4619      	mov	r1, r3
 801ce16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce18:	9304      	str	r3, [sp, #16]
 801ce1a:	9103      	str	r1, [sp, #12]
 801ce1c:	9202      	str	r2, [sp, #8]
 801ce1e:	9401      	str	r4, [sp, #4]
 801ce20:	4b0f      	ldr	r3, [pc, #60]	@ (801ce60 <tx_tcp+0x190>)
 801ce22:	9300      	str	r3, [sp, #0]
 801ce24:	4633      	mov	r3, r6
 801ce26:	462a      	mov	r2, r5
 801ce28:	490d      	ldr	r1, [pc, #52]	@ (801ce60 <tx_tcp+0x190>)
 801ce2a:	480e      	ldr	r0, [pc, #56]	@ (801ce64 <tx_tcp+0x194>)
 801ce2c:	f7fb ff6e 	bl	8018d0c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 801ce30:	6a3b      	ldr	r3, [r7, #32]
 801ce32:	f103 0214 	add.w	r2, r3, #20
 801ce36:	68fb      	ldr	r3, [r7, #12]
 801ce38:	695b      	ldr	r3, [r3, #20]
 801ce3a:	1ad3      	subs	r3, r2, r3
 801ce3c:	461a      	mov	r2, r3
 801ce3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce40:	4413      	add	r3, r2
 801ce42:	4619      	mov	r1, r3
 801ce44:	68f8      	ldr	r0, [r7, #12]
 801ce46:	f7fe fde1 	bl	801ba0c <ether_output>
 801ce4a:	4603      	mov	r3, r0
}
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	372c      	adds	r7, #44	@ 0x2c
 801ce50:	46bd      	mov	sp, r7
 801ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce54:	20000288 	.word	0x20000288
 801ce58:	08026f68 	.word	0x08026f68
 801ce5c:	0802487c 	.word	0x0802487c
 801ce60:	0801ee5d 	.word	0x0801ee5d
 801ce64:	080260f4 	.word	0x080260f4

0801ce68 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 801ce68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce6c:	b08c      	sub	sp, #48	@ 0x30
 801ce6e:	af06      	add	r7, sp, #24
 801ce70:	60f8      	str	r0, [r7, #12]
 801ce72:	60b9      	str	r1, [r7, #8]
 801ce74:	603b      	str	r3, [r7, #0]
 801ce76:	4613      	mov	r3, r2
 801ce78:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 801ce7a:	68bb      	ldr	r3, [r7, #8]
 801ce7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce7e:	7b5b      	ldrb	r3, [r3, #13]
 801ce80:	f003 0303 	and.w	r3, r3, #3
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	bf14      	ite	ne
 801ce88:	2301      	movne	r3, #1
 801ce8a:	2300      	moveq	r3, #0
 801ce8c:	b2db      	uxtb	r3, r3
 801ce8e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801ce90:	68bb      	ldr	r3, [r7, #8]
 801ce92:	691b      	ldr	r3, [r3, #16]
 801ce94:	1d9e      	adds	r6, r3, #6
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	69db      	ldr	r3, [r3, #28]
 801ce9a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801ce9e:	68bb      	ldr	r3, [r7, #8]
 801cea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cea2:	885b      	ldrh	r3, [r3, #2]
 801cea4:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801cea6:	68bb      	ldr	r3, [r7, #8]
 801cea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801ceaa:	881b      	ldrh	r3, [r3, #0]
 801ceac:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ceb2:	685b      	ldr	r3, [r3, #4]
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f003 f8df 	bl	8020078 <mg_ntohl>
 801ceba:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801cebc:	697b      	ldr	r3, [r7, #20]
 801cebe:	4413      	add	r3, r2
 801cec0:	4618      	mov	r0, r3
 801cec2:	f003 f8d9 	bl	8020078 <mg_ntohl>
 801cec6:	4601      	mov	r1, r0
 801cec8:	79fa      	ldrb	r2, [r7, #7]
 801ceca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cecc:	9305      	str	r3, [sp, #20]
 801cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ced0:	9304      	str	r3, [sp, #16]
 801ced2:	9103      	str	r1, [sp, #12]
 801ced4:	683b      	ldr	r3, [r7, #0]
 801ced6:	9302      	str	r3, [sp, #8]
 801ced8:	9501      	str	r5, [sp, #4]
 801ceda:	9400      	str	r4, [sp, #0]
 801cedc:	4613      	mov	r3, r2
 801cede:	4642      	mov	r2, r8
 801cee0:	4631      	mov	r1, r6
 801cee2:	68f8      	ldr	r0, [r7, #12]
 801cee4:	f7ff fef4 	bl	801ccd0 <tx_tcp>
 801cee8:	4603      	mov	r3, r0
                buf, len);
}
 801ceea:	4618      	mov	r0, r3
 801ceec:	3718      	adds	r7, #24
 801ceee:	46bd      	mov	sp, r7
 801cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cef4 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801cef4:	b5b0      	push	{r4, r5, r7, lr}
 801cef6:	b084      	sub	sp, #16
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	6078      	str	r0, [r7, #4]
 801cefc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	685b      	ldr	r3, [r3, #4]
 801cf02:	4618      	mov	r0, r3
 801cf04:	f7fe fa87 	bl	801b416 <mg_alloc_conn>
 801cf08:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d10f      	bne.n	801cf30 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 801cf10:	4b4e      	ldr	r3, [pc, #312]	@ (801d04c <accept_conn+0x158>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	dd09      	ble.n	801cf2c <accept_conn+0x38>
 801cf18:	4b4d      	ldr	r3, [pc, #308]	@ (801d050 <accept_conn+0x15c>)
 801cf1a:	f241 5264 	movw	r2, #5476	@ 0x1564
 801cf1e:	494d      	ldr	r1, [pc, #308]	@ (801d054 <accept_conn+0x160>)
 801cf20:	2001      	movs	r0, #1
 801cf22:	f7fb fea3 	bl	8018c6c <mg_log_prefix>
 801cf26:	484c      	ldr	r0, [pc, #304]	@ (801d058 <accept_conn+0x164>)
 801cf28:	f7fb fef0 	bl	8018d0c <mg_log>
    return NULL;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	e088      	b.n	801d042 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	33b0      	adds	r3, #176	@ 0xb0
 801cf34:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 801cf36:	683b      	ldr	r3, [r7, #0]
 801cf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf3a:	689b      	ldr	r3, [r3, #8]
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f003 f89b 	bl	8020078 <mg_ntohl>
 801cf42:	4602      	mov	r2, r0
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	601a      	str	r2, [r3, #0]
 801cf48:	683b      	ldr	r3, [r7, #0]
 801cf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf4c:	685b      	ldr	r3, [r3, #4]
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f003 f892 	bl	8020078 <mg_ntohl>
 801cf54:	4602      	mov	r2, r0
 801cf56:	68bb      	ldr	r3, [r7, #8]
 801cf58:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801cf5a:	68bb      	ldr	r3, [r7, #8]
 801cf5c:	f103 0018 	add.w	r0, r3, #24
 801cf60:	683b      	ldr	r3, [r7, #0]
 801cf62:	691b      	ldr	r3, [r3, #16]
 801cf64:	3306      	adds	r3, #6
 801cf66:	2206      	movs	r2, #6
 801cf68:	4619      	mov	r1, r3
 801cf6a:	f004 f95a 	bl	8021222 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 801cf6e:	2100      	movs	r1, #0
 801cf70:	68f8      	ldr	r0, [r7, #12]
 801cf72:	f7fe fcef 	bl	801b954 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	331c      	adds	r3, #28
 801cf7a:	683a      	ldr	r2, [r7, #0]
 801cf7c:	69d2      	ldr	r2, [r2, #28]
 801cf7e:	320c      	adds	r2, #12
 801cf80:	6812      	ldr	r2, [r2, #0]
 801cf82:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 801cf84:	683b      	ldr	r3, [r7, #0]
 801cf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf88:	881b      	ldrh	r3, [r3, #0]
 801cf8a:	b29a      	uxth	r2, r3
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 801cf90:	4b2e      	ldr	r3, [pc, #184]	@ (801d04c <accept_conn+0x158>)
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	2b02      	cmp	r3, #2
 801cf96:	dd0e      	ble.n	801cfb6 <accept_conn+0xc2>
 801cf98:	4b2d      	ldr	r3, [pc, #180]	@ (801d050 <accept_conn+0x15c>)
 801cf9a:	f241 526d 	movw	r2, #5485	@ 0x156d
 801cf9e:	492d      	ldr	r1, [pc, #180]	@ (801d054 <accept_conn+0x160>)
 801cfa0:	2003      	movs	r0, #3
 801cfa2:	f7fb fe63 	bl	8018c6c <mg_log_prefix>
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	331c      	adds	r3, #28
 801cfae:	4a2b      	ldr	r2, [pc, #172]	@ (801d05c <accept_conn+0x168>)
 801cfb0:	482b      	ldr	r0, [pc, #172]	@ (801d060 <accept_conn+0x16c>)
 801cfb2:	f7fb feab 	bl	8018d0c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	685b      	ldr	r3, [r3, #4]
 801cfba:	681a      	ldr	r2, [r3, #0]
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	601a      	str	r2, [r3, #0]
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	685b      	ldr	r3, [r3, #4]
 801cfc4:	68fa      	ldr	r2, [r7, #12]
 801cfc6:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 801cfc8:	68fa      	ldr	r2, [r7, #12]
 801cfca:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801cfce:	f043 0304 	orr.w	r3, r3, #4
 801cfd2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cfdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801cfe0:	b2d9      	uxtb	r1, r3
 801cfe2:	68fa      	ldr	r2, [r7, #12]
 801cfe4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801cfe8:	f361 03c3 	bfi	r3, r1, #3, #1
 801cfec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801cffc:	68fa      	ldr	r2, [r7, #12]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	f102 0408 	add.w	r4, r2, #8
 801d004:	f103 0508 	add.w	r5, r3, #8
 801d008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d00a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d00c:	682b      	ldr	r3, [r5, #0]
 801d00e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 801d02c:	2200      	movs	r2, #0
 801d02e:	2101      	movs	r1, #1
 801d030:	68f8      	ldr	r0, [r7, #12]
 801d032:	f7f6 fa3b 	bl	80134ac <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 801d036:	2200      	movs	r2, #0
 801d038:	2105      	movs	r1, #5
 801d03a:	68f8      	ldr	r0, [r7, #12]
 801d03c:	f7f6 fa36 	bl	80134ac <mg_call>
  return c;
 801d040:	68fb      	ldr	r3, [r7, #12]
}
 801d042:	4618      	mov	r0, r3
 801d044:	3710      	adds	r7, #16
 801d046:	46bd      	mov	sp, r7
 801d048:	bdb0      	pop	{r4, r5, r7, pc}
 801d04a:	bf00      	nop
 801d04c:	20000288 	.word	0x20000288
 801d050:	08026f70 	.word	0x08026f70
 801d054:	0802487c 	.word	0x0802487c
 801d058:	08025d48 	.word	0x08025d48
 801d05c:	0801eed5 	.word	0x0801eed5
 801d060:	08026118 	.word	0x08026118

0801d064 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801d064:	b580      	push	{r7, lr}
 801d066:	b08a      	sub	sp, #40	@ 0x28
 801d068:	af00      	add	r7, sp, #0
 801d06a:	6078      	str	r0, [r7, #4]
 801d06c:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	685b      	ldr	r3, [r3, #4]
 801d072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d074:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801d076:	230e      	movs	r3, #14
 801d078:	623b      	str	r3, [r7, #32]
 801d07a:	2318      	movs	r3, #24
 801d07c:	61fb      	str	r3, [r7, #28]
 801d07e:	233c      	movs	r3, #60	@ 0x3c
 801d080:	61bb      	str	r3, [r7, #24]
 801d082:	2308      	movs	r3, #8
 801d084:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801d086:	6a3a      	ldr	r2, [r7, #32]
 801d088:	69fb      	ldr	r3, [r7, #28]
 801d08a:	441a      	add	r2, r3
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d092:	f003 0301 	and.w	r3, r3, #1
 801d096:	b2db      	uxtb	r3, r3
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d001      	beq.n	801d0a0 <trim_len+0x3c>
 801d09c:	697b      	ldr	r3, [r7, #20]
 801d09e:	e000      	b.n	801d0a2 <trim_len+0x3e>
 801d0a0:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801d0a2:	4413      	add	r3, r2
 801d0a4:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d0ac:	f003 0301 	and.w	r3, r3, #1
 801d0b0:	b2db      	uxtb	r3, r3
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d103      	bne.n	801d0be <trim_len+0x5a>
 801d0b6:	693a      	ldr	r2, [r7, #16]
 801d0b8:	6a3b      	ldr	r3, [r7, #32]
 801d0ba:	1ad3      	subs	r3, r2, r3
 801d0bc:	e000      	b.n	801d0c0 <trim_len+0x5c>
 801d0be:	2344      	movs	r3, #68	@ 0x44
 801d0c0:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801d0c2:	683a      	ldr	r2, [r7, #0]
 801d0c4:	693b      	ldr	r3, [r7, #16]
 801d0c6:	441a      	add	r2, r3
 801d0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0ca:	699b      	ldr	r3, [r3, #24]
 801d0cc:	429a      	cmp	r2, r3
 801d0ce:	d904      	bls.n	801d0da <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 801d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0d2:	699a      	ldr	r2, [r3, #24]
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 801d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	4293      	cmp	r3, r2
 801d0e6:	d913      	bls.n	801d110 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 801d0e8:	4b20      	ldr	r3, [pc, #128]	@ (801d16c <trim_len+0x108>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	dd0a      	ble.n	801d106 <trim_len+0xa2>
 801d0f0:	4b1f      	ldr	r3, [pc, #124]	@ (801d170 <trim_len+0x10c>)
 801d0f2:	f241 5288 	movw	r2, #5512	@ 0x1588
 801d0f6:	491f      	ldr	r1, [pc, #124]	@ (801d174 <trim_len+0x110>)
 801d0f8:	2001      	movs	r0, #1
 801d0fa:	f7fb fdb7 	bl	8018c6c <mg_log_prefix>
 801d0fe:	68f9      	ldr	r1, [r7, #12]
 801d100:	481d      	ldr	r0, [pc, #116]	@ (801d178 <trim_len+0x114>)
 801d102:	f7fb fe03 	bl	8018d0c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	b29a      	uxth	r2, r3
 801d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d10c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 801d110:	683a      	ldr	r2, [r7, #0]
 801d112:	693b      	ldr	r3, [r7, #16]
 801d114:	441a      	add	r2, r3
 801d116:	6a3b      	ldr	r3, [r7, #32]
 801d118:	1ad3      	subs	r3, r2, r3
 801d11a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d11c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 801d120:	4293      	cmp	r3, r2
 801d122:	d91e      	bls.n	801d162 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 801d124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801d12a:	461a      	mov	r2, r3
 801d12c:	693b      	ldr	r3, [r7, #16]
 801d12e:	1ad3      	subs	r3, r2, r3
 801d130:	6a3a      	ldr	r2, [r7, #32]
 801d132:	4413      	add	r3, r2
 801d134:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d13c:	f003 0301 	and.w	r3, r3, #1
 801d140:	b2db      	uxtb	r3, r3
 801d142:	2b00      	cmp	r3, #0
 801d144:	d00d      	beq.n	801d162 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801d146:	4b09      	ldr	r3, [pc, #36]	@ (801d16c <trim_len+0x108>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	dd09      	ble.n	801d162 <trim_len+0xfe>
 801d14e:	4b08      	ldr	r3, [pc, #32]	@ (801d170 <trim_len+0x10c>)
 801d150:	f241 528f 	movw	r2, #5519	@ 0x158f
 801d154:	4907      	ldr	r1, [pc, #28]	@ (801d174 <trim_len+0x110>)
 801d156:	2001      	movs	r0, #1
 801d158:	f7fb fd88 	bl	8018c6c <mg_log_prefix>
 801d15c:	4807      	ldr	r0, [pc, #28]	@ (801d17c <trim_len+0x118>)
 801d15e:	f7fb fdd5 	bl	8018d0c <mg_log>
    }
  }

  return len;
 801d162:	683b      	ldr	r3, [r7, #0]
}
 801d164:	4618      	mov	r0, r3
 801d166:	3728      	adds	r7, #40	@ 0x28
 801d168:	46bd      	mov	sp, r7
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	20000288 	.word	0x20000288
 801d170:	08026f7c 	.word	0x08026f7c
 801d174:	0802487c 	.word	0x0802487c
 801d178:	08026128 	.word	0x08026128
 801d17c:	08026154 	.word	0x08026154

0801d180 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801d180:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d182:	b08f      	sub	sp, #60	@ 0x3c
 801d184:	af06      	add	r7, sp, #24
 801d186:	60f8      	str	r0, [r7, #12]
 801d188:	60b9      	str	r1, [r7, #8]
 801d18a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	685b      	ldr	r3, [r3, #4]
 801d190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d192:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	33b0      	adds	r3, #176	@ 0xb0
 801d198:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	331c      	adds	r3, #28
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801d1a2:	6879      	ldr	r1, [r7, #4]
 801d1a4:	68f8      	ldr	r0, [r7, #12]
 801d1a6:	f7ff ff5d 	bl	801d064 <trim_len>
 801d1aa:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d1b2:	f003 0301 	and.w	r3, r3, #1
 801d1b6:	b2db      	uxtb	r3, r3
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d015      	beq.n	801d1e8 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 801d1bc:	69bb      	ldr	r3, [r7, #24]
 801d1be:	f103 0118 	add.w	r1, r3, #24
 801d1c2:	69fb      	ldr	r3, [r7, #28]
 801d1c4:	6898      	ldr	r0, [r3, #8]
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	8b1c      	ldrh	r4, [r3, #24]
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801d1ce:	687a      	ldr	r2, [r7, #4]
 801d1d0:	9203      	str	r2, [sp, #12]
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	9202      	str	r2, [sp, #8]
 801d1d6:	9301      	str	r3, [sp, #4]
 801d1d8:	697b      	ldr	r3, [r7, #20]
 801d1da:	9300      	str	r3, [sp, #0]
 801d1dc:	4623      	mov	r3, r4
 801d1de:	4602      	mov	r2, r0
 801d1e0:	69f8      	ldr	r0, [r7, #28]
 801d1e2:	f7fe fd77 	bl	801bcd4 <tx_udp>
 801d1e6:	e03d      	b.n	801d264 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 801d1e8:	69bb      	ldr	r3, [r7, #24]
 801d1ea:	f103 0618 	add.w	r6, r3, #24
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	8b1c      	ldrh	r4, [r3, #24]
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801d1f6:	69bb      	ldr	r3, [r7, #24]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	f002 ff3c 	bl	8020078 <mg_ntohl>
 801d200:	6038      	str	r0, [r7, #0]
 801d202:	69bb      	ldr	r3, [r7, #24]
 801d204:	685b      	ldr	r3, [r3, #4]
 801d206:	4618      	mov	r0, r3
 801d208:	f002 ff36 	bl	8020078 <mg_ntohl>
 801d20c:	4602      	mov	r2, r0
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	9305      	str	r3, [sp, #20]
 801d212:	68bb      	ldr	r3, [r7, #8]
 801d214:	9304      	str	r3, [sp, #16]
 801d216:	9203      	str	r2, [sp, #12]
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	9302      	str	r3, [sp, #8]
 801d21c:	9501      	str	r5, [sp, #4]
 801d21e:	9400      	str	r4, [sp, #0]
 801d220:	2318      	movs	r3, #24
 801d222:	697a      	ldr	r2, [r7, #20]
 801d224:	4631      	mov	r1, r6
 801d226:	69f8      	ldr	r0, [r7, #28]
 801d228:	f7ff fd52 	bl	801ccd0 <tx_tcp>
 801d22c:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801d22e:	693b      	ldr	r3, [r7, #16]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d102      	bne.n	801d23a <mg_io_send+0xba>
      return MG_IO_WAIT;
 801d234:	f06f 0301 	mvn.w	r3, #1
 801d238:	e015      	b.n	801d266 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 801d23a:	693b      	ldr	r3, [r7, #16]
 801d23c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d240:	d102      	bne.n	801d248 <mg_io_send+0xc8>
      return MG_IO_ERR;
 801d242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d246:	e00e      	b.n	801d266 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 801d248:	69bb      	ldr	r3, [r7, #24]
 801d24a:	681a      	ldr	r2, [r3, #0]
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	441a      	add	r2, r3
 801d250:	69bb      	ldr	r3, [r7, #24]
 801d252:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801d254:	69bb      	ldr	r3, [r7, #24]
 801d256:	7f9b      	ldrb	r3, [r3, #30]
 801d258:	2b01      	cmp	r3, #1
 801d25a:	d103      	bne.n	801d264 <mg_io_send+0xe4>
 801d25c:	2100      	movs	r1, #0
 801d25e:	68f8      	ldr	r0, [r7, #12]
 801d260:	f7fe fb78 	bl	801b954 <settmout>
    }
  }
  return (long) len;
 801d264:	687b      	ldr	r3, [r7, #4]
}
 801d266:	4618      	mov	r0, r3
 801d268:	3724      	adds	r7, #36	@ 0x24
 801d26a:	46bd      	mov	sp, r7
 801d26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801d270 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 801d270:	b580      	push	{r7, lr}
 801d272:	b084      	sub	sp, #16
 801d274:	af00      	add	r7, sp, #0
 801d276:	6078      	str	r0, [r7, #4]
 801d278:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 801d27a:	683b      	ldr	r3, [r7, #0]
 801d27c:	681a      	ldr	r2, [r3, #0]
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	689b      	ldr	r3, [r3, #8]
 801d282:	18d1      	adds	r1, r2, r3
 801d284:	683b      	ldr	r3, [r7, #0]
 801d286:	685a      	ldr	r2, [r3, #4]
 801d288:	683b      	ldr	r3, [r7, #0]
 801d28a:	689b      	ldr	r3, [r3, #8]
 801d28c:	1ad3      	subs	r3, r2, r3
 801d28e:	461a      	mov	r2, r3
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	f002 fcc9 	bl	801fc28 <mg_tls_recv>
 801d296:	4603      	mov	r3, r0
 801d298:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 801d29a:	68fb      	ldr	r3, [r7, #12]
 801d29c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d2a0:	d104      	bne.n	801d2ac <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 801d2a2:	490c      	ldr	r1, [pc, #48]	@ (801d2d4 <handle_tls_recv+0x64>)
 801d2a4:	6878      	ldr	r0, [r7, #4]
 801d2a6:	f7f6 f921 	bl	80134ec <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 801d2aa:	e00f      	b.n	801d2cc <handle_tls_recv+0x5c>
  } else if (n > 0) {
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	dd0c      	ble.n	801d2cc <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	689b      	ldr	r3, [r3, #8]
 801d2b6:	68fa      	ldr	r2, [r7, #12]
 801d2b8:	441a      	add	r2, r3
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 801d2be:	f107 030c 	add.w	r3, r7, #12
 801d2c2:	461a      	mov	r2, r3
 801d2c4:	2107      	movs	r1, #7
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f7f6 f8f0 	bl	80134ac <mg_call>
}
 801d2cc:	bf00      	nop
 801d2ce:	3710      	adds	r7, #16
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	08026180 	.word	0x08026180

0801d2d8 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2dc:	b090      	sub	sp, #64	@ 0x40
 801d2de:	af06      	add	r7, sp, #24
 801d2e0:	60f8      	str	r0, [r7, #12]
 801d2e2:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	33b0      	adds	r3, #176	@ 0xb0
 801d2e8:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d2f4:	b2db      	uxtb	r3, r3
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d002      	beq.n	801d300 <read_conn+0x28>
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	3368      	adds	r3, #104	@ 0x68
 801d2fe:	e001      	b.n	801d304 <read_conn+0x2c>
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	3338      	adds	r3, #56	@ 0x38
 801d304:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801d306:	68bb      	ldr	r3, [r7, #8]
 801d308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d30a:	685b      	ldr	r3, [r3, #4]
 801d30c:	4618      	mov	r0, r3
 801d30e:	f002 feb3 	bl	8020078 <mg_ntohl>
 801d312:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	331c      	adds	r3, #28
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d320:	7b5b      	ldrb	r3, [r3, #13]
 801d322:	f003 0301 	and.w	r3, r3, #1
 801d326:	2b00      	cmp	r3, #0
 801d328:	d070      	beq.n	801d40c <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801d32a:	2310      	movs	r3, #16
 801d32c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d334:	685b      	ldr	r3, [r3, #4]
 801d336:	4618      	mov	r0, r3
 801d338:	f002 fe9e 	bl	8020078 <mg_ntohl>
 801d33c:	4602      	mov	r2, r0
 801d33e:	68bb      	ldr	r3, [r7, #8]
 801d340:	68db      	ldr	r3, [r3, #12]
 801d342:	4413      	add	r3, r2
 801d344:	1c5a      	adds	r2, r3, #1
 801d346:	6a3b      	ldr	r3, [r7, #32]
 801d348:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d350:	f003 0310 	and.w	r3, r3, #16
 801d354:	b2db      	uxtb	r3, r3
 801d356:	2b00      	cmp	r3, #0
 801d358:	d01e      	beq.n	801d398 <read_conn+0xc0>
 801d35a:	6a3b      	ldr	r3, [r7, #32]
 801d35c:	7f9b      	ldrb	r3, [r3, #30]
 801d35e:	2b04      	cmp	r3, #4
 801d360:	d11a      	bne.n	801d398 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801d362:	6a3b      	ldr	r3, [r7, #32]
 801d364:	681c      	ldr	r4, [r3, #0]
 801d366:	68bb      	ldr	r3, [r7, #8]
 801d368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d36a:	689b      	ldr	r3, [r3, #8]
 801d36c:	4618      	mov	r0, r3
 801d36e:	f002 fe83 	bl	8020078 <mg_ntohl>
 801d372:	4603      	mov	r3, r0
 801d374:	429c      	cmp	r4, r3
 801d376:	d105      	bne.n	801d384 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 801d378:	6a3b      	ldr	r3, [r7, #32]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	1c5a      	adds	r2, r3, #1
 801d37e:	6a3b      	ldr	r3, [r7, #32]
 801d380:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801d382:	e01a      	b.n	801d3ba <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 801d384:	68bb      	ldr	r3, [r7, #8]
 801d386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d388:	689b      	ldr	r3, [r3, #8]
 801d38a:	4618      	mov	r0, r3
 801d38c:	f002 fe74 	bl	8020078 <mg_ntohl>
 801d390:	4602      	mov	r2, r0
 801d392:	6a3b      	ldr	r3, [r7, #32]
 801d394:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801d396:	e010      	b.n	801d3ba <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 801d398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d39c:	f043 0301 	orr.w	r3, r3, #1
 801d3a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801d3a4:	68fa      	ldr	r2, [r7, #12]
 801d3a6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d3aa:	f043 0310 	orr.w	r3, r3, #16
 801d3ae:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 801d3b2:	2104      	movs	r1, #4
 801d3b4:	68f8      	ldr	r0, [r7, #12]
 801d3b6:	f7fe facd 	bl	801b954 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	685b      	ldr	r3, [r3, #4]
 801d3be:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801d3c0:	6a3b      	ldr	r3, [r7, #32]
 801d3c2:	f103 0818 	add.w	r8, r3, #24
 801d3c6:	693b      	ldr	r3, [r7, #16]
 801d3c8:	607b      	str	r3, [r7, #4]
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	8b1c      	ldrh	r4, [r3, #24]
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801d3d2:	6a3b      	ldr	r3, [r7, #32]
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	f002 fe4e 	bl	8020078 <mg_ntohl>
 801d3dc:	6038      	str	r0, [r7, #0]
 801d3de:	6a3b      	ldr	r3, [r7, #32]
 801d3e0:	685b      	ldr	r3, [r3, #4]
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f002 fe48 	bl	8020078 <mg_ntohl>
 801d3e8:	4602      	mov	r2, r0
 801d3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d3ee:	2100      	movs	r1, #0
 801d3f0:	9105      	str	r1, [sp, #20]
 801d3f2:	4990      	ldr	r1, [pc, #576]	@ (801d634 <read_conn+0x35c>)
 801d3f4:	9104      	str	r1, [sp, #16]
 801d3f6:	9203      	str	r2, [sp, #12]
 801d3f8:	6839      	ldr	r1, [r7, #0]
 801d3fa:	9102      	str	r1, [sp, #8]
 801d3fc:	9501      	str	r5, [sp, #4]
 801d3fe:	9400      	str	r4, [sp, #0]
 801d400:	687a      	ldr	r2, [r7, #4]
 801d402:	4641      	mov	r1, r8
 801d404:	4630      	mov	r0, r6
 801d406:	f7ff fc63 	bl	801ccd0 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801d40a:	e173      	b.n	801d6f4 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 801d40c:	68bb      	ldr	r3, [r7, #8]
 801d40e:	68db      	ldr	r3, [r3, #12]
 801d410:	2b00      	cmp	r3, #0
 801d412:	f000 816f 	beq.w	801d6f4 <read_conn+0x41c>
  } else if (seq != s->ack) {
 801d416:	6a3b      	ldr	r3, [r7, #32]
 801d418:	685b      	ldr	r3, [r3, #4]
 801d41a:	69ba      	ldr	r2, [r7, #24]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d059      	beq.n	801d4d4 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801d420:	68bb      	ldr	r3, [r7, #8]
 801d422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d424:	685b      	ldr	r3, [r3, #4]
 801d426:	4618      	mov	r0, r3
 801d428:	f002 fe26 	bl	8020078 <mg_ntohl>
 801d42c:	4602      	mov	r2, r0
 801d42e:	68bb      	ldr	r3, [r7, #8]
 801d430:	68db      	ldr	r3, [r3, #12]
 801d432:	4413      	add	r3, r2
 801d434:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801d436:	6a3b      	ldr	r3, [r7, #32]
 801d438:	685b      	ldr	r3, [r3, #4]
 801d43a:	697a      	ldr	r2, [r7, #20]
 801d43c:	429a      	cmp	r2, r3
 801d43e:	d10f      	bne.n	801d460 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 801d440:	4b7d      	ldr	r3, [pc, #500]	@ (801d638 <read_conn+0x360>)
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	2b03      	cmp	r3, #3
 801d446:	f340 8155 	ble.w	801d6f4 <read_conn+0x41c>
 801d44a:	4b7c      	ldr	r3, [pc, #496]	@ (801d63c <read_conn+0x364>)
 801d44c:	f241 52d6 	movw	r2, #5590	@ 0x15d6
 801d450:	497b      	ldr	r1, [pc, #492]	@ (801d640 <read_conn+0x368>)
 801d452:	2004      	movs	r0, #4
 801d454:	f7fb fc0a 	bl	8018c6c <mg_log_prefix>
 801d458:	487a      	ldr	r0, [pc, #488]	@ (801d644 <read_conn+0x36c>)
 801d45a:	f7fb fc57 	bl	8018d0c <mg_log>
}
 801d45e:	e149      	b.n	801d6f4 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 801d460:	4b75      	ldr	r3, [pc, #468]	@ (801d638 <read_conn+0x360>)
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	2b03      	cmp	r3, #3
 801d466:	dd0d      	ble.n	801d484 <read_conn+0x1ac>
 801d468:	4b74      	ldr	r3, [pc, #464]	@ (801d63c <read_conn+0x364>)
 801d46a:	f241 52d8 	movw	r2, #5592	@ 0x15d8
 801d46e:	4974      	ldr	r1, [pc, #464]	@ (801d640 <read_conn+0x368>)
 801d470:	2004      	movs	r0, #4
 801d472:	f7fb fbfb 	bl	8018c6c <mg_log_prefix>
 801d476:	6a3b      	ldr	r3, [r7, #32]
 801d478:	685a      	ldr	r2, [r3, #4]
 801d47a:	697b      	ldr	r3, [r7, #20]
 801d47c:	69b9      	ldr	r1, [r7, #24]
 801d47e:	4872      	ldr	r0, [pc, #456]	@ (801d648 <read_conn+0x370>)
 801d480:	f7fb fc44 	bl	8018d0c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801d484:	68fb      	ldr	r3, [r7, #12]
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801d48a:	6a3b      	ldr	r3, [r7, #32]
 801d48c:	f103 0818 	add.w	r8, r3, #24
 801d490:	693b      	ldr	r3, [r7, #16]
 801d492:	607b      	str	r3, [r7, #4]
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	8b1c      	ldrh	r4, [r3, #24]
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801d49c:	6a3b      	ldr	r3, [r7, #32]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f002 fde9 	bl	8020078 <mg_ntohl>
 801d4a6:	6038      	str	r0, [r7, #0]
 801d4a8:	6a3b      	ldr	r3, [r7, #32]
 801d4aa:	685b      	ldr	r3, [r3, #4]
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f002 fde3 	bl	8020078 <mg_ntohl>
 801d4b2:	4603      	mov	r3, r0
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	9205      	str	r2, [sp, #20]
 801d4b8:	4a5e      	ldr	r2, [pc, #376]	@ (801d634 <read_conn+0x35c>)
 801d4ba:	9204      	str	r2, [sp, #16]
 801d4bc:	9303      	str	r3, [sp, #12]
 801d4be:	6839      	ldr	r1, [r7, #0]
 801d4c0:	9102      	str	r1, [sp, #8]
 801d4c2:	9501      	str	r5, [sp, #4]
 801d4c4:	9400      	str	r4, [sp, #0]
 801d4c6:	2310      	movs	r3, #16
 801d4c8:	687a      	ldr	r2, [r7, #4]
 801d4ca:	4641      	mov	r1, r8
 801d4cc:	4630      	mov	r0, r6
 801d4ce:	f7ff fbff 	bl	801ccd0 <tx_tcp>
}
 801d4d2:	e10f      	b.n	801d6f4 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 801d4d4:	69fb      	ldr	r3, [r7, #28]
 801d4d6:	685a      	ldr	r2, [r3, #4]
 801d4d8:	69fb      	ldr	r3, [r7, #28]
 801d4da:	689b      	ldr	r3, [r3, #8]
 801d4dc:	1ad2      	subs	r2, r2, r3
 801d4de:	68bb      	ldr	r3, [r7, #8]
 801d4e0:	68db      	ldr	r3, [r3, #12]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	d210      	bcs.n	801d508 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801d4e6:	69fb      	ldr	r3, [r7, #28]
 801d4e8:	689a      	ldr	r2, [r3, #8]
 801d4ea:	68bb      	ldr	r3, [r7, #8]
 801d4ec:	68db      	ldr	r3, [r3, #12]
 801d4ee:	4413      	add	r3, r2
 801d4f0:	4619      	mov	r1, r3
 801d4f2:	69f8      	ldr	r0, [r7, #28]
 801d4f4:	f7fa fbcc 	bl	8017c90 <mg_iobuf_resize>
 801d4f8:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d104      	bne.n	801d508 <read_conn+0x230>
    mg_error(c, "oom");
 801d4fe:	4953      	ldr	r1, [pc, #332]	@ (801d64c <read_conn+0x374>)
 801d500:	68f8      	ldr	r0, [r7, #12]
 801d502:	f7f5 fff3 	bl	80134ec <mg_error>
 801d506:	e0f5      	b.n	801d6f4 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801d508:	69fb      	ldr	r3, [r7, #28]
 801d50a:	681a      	ldr	r2, [r3, #0]
 801d50c:	69fb      	ldr	r3, [r7, #28]
 801d50e:	689b      	ldr	r3, [r3, #8]
 801d510:	18d0      	adds	r0, r2, r3
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	6899      	ldr	r1, [r3, #8]
 801d516:	68bb      	ldr	r3, [r7, #8]
 801d518:	68db      	ldr	r3, [r3, #12]
 801d51a:	461a      	mov	r2, r3
 801d51c:	f003 fe81 	bl	8021222 <memcpy>
    io->len += pkt->pay.len;
 801d520:	69fb      	ldr	r3, [r7, #28]
 801d522:	689a      	ldr	r2, [r3, #8]
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	68db      	ldr	r3, [r3, #12]
 801d528:	441a      	add	r2, r3
 801d52a:	69fb      	ldr	r3, [r7, #28]
 801d52c:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801d52e:	4b42      	ldr	r3, [pc, #264]	@ (801d638 <read_conn+0x360>)
 801d530:	681b      	ldr	r3, [r3, #0]
 801d532:	2b03      	cmp	r3, #3
 801d534:	dd15      	ble.n	801d562 <read_conn+0x28a>
 801d536:	4b41      	ldr	r3, [pc, #260]	@ (801d63c <read_conn+0x364>)
 801d538:	f241 52e9 	movw	r2, #5609	@ 0x15e9
 801d53c:	4940      	ldr	r1, [pc, #256]	@ (801d640 <read_conn+0x368>)
 801d53e:	2004      	movs	r0, #4
 801d540:	f7fb fb94 	bl	8018c6c <mg_log_prefix>
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801d548:	68bb      	ldr	r3, [r7, #8]
 801d54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d54c:	685b      	ldr	r3, [r3, #4]
 801d54e:	4618      	mov	r0, r3
 801d550:	f002 fd92 	bl	8020078 <mg_ntohl>
 801d554:	4602      	mov	r2, r0
 801d556:	6a3b      	ldr	r3, [r7, #32]
 801d558:	685b      	ldr	r3, [r3, #4]
 801d55a:	4621      	mov	r1, r4
 801d55c:	483c      	ldr	r0, [pc, #240]	@ (801d650 <read_conn+0x378>)
 801d55e:	f7fb fbd5 	bl	8018d0c <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d566:	685b      	ldr	r3, [r3, #4]
 801d568:	4618      	mov	r0, r3
 801d56a:	f002 fd85 	bl	8020078 <mg_ntohl>
 801d56e:	4602      	mov	r2, r0
 801d570:	68bb      	ldr	r3, [r7, #8]
 801d572:	68db      	ldr	r3, [r3, #12]
 801d574:	441a      	add	r2, r3
 801d576:	6a3b      	ldr	r3, [r7, #32]
 801d578:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 801d57a:	6a3b      	ldr	r3, [r7, #32]
 801d57c:	695a      	ldr	r2, [r3, #20]
 801d57e:	68bb      	ldr	r3, [r7, #8]
 801d580:	68db      	ldr	r3, [r3, #12]
 801d582:	441a      	add	r2, r3
 801d584:	6a3b      	ldr	r3, [r7, #32]
 801d586:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 801d588:	6a3b      	ldr	r3, [r7, #32]
 801d58a:	695b      	ldr	r3, [r3, #20]
 801d58c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801d590:	4293      	cmp	r3, r2
 801d592:	d961      	bls.n	801d658 <read_conn+0x380>
 801d594:	6a3b      	ldr	r3, [r7, #32]
 801d596:	691a      	ldr	r2, [r3, #16]
 801d598:	6a3b      	ldr	r3, [r7, #32]
 801d59a:	685b      	ldr	r3, [r3, #4]
 801d59c:	429a      	cmp	r2, r3
 801d59e:	d05b      	beq.n	801d658 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 801d5a0:	4b25      	ldr	r3, [pc, #148]	@ (801d638 <read_conn+0x360>)
 801d5a2:	681b      	ldr	r3, [r3, #0]
 801d5a4:	2b03      	cmp	r3, #3
 801d5a6:	dd0e      	ble.n	801d5c6 <read_conn+0x2ee>
 801d5a8:	4b24      	ldr	r3, [pc, #144]	@ (801d63c <read_conn+0x364>)
 801d5aa:	f241 52f0 	movw	r2, #5616	@ 0x15f0
 801d5ae:	4924      	ldr	r1, [pc, #144]	@ (801d640 <read_conn+0x368>)
 801d5b0:	2004      	movs	r0, #4
 801d5b2:	f7fb fb5b 	bl	8018c6c <mg_log_prefix>
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d5ba:	6a3b      	ldr	r3, [r7, #32]
 801d5bc:	691b      	ldr	r3, [r3, #16]
 801d5be:	461a      	mov	r2, r3
 801d5c0:	4824      	ldr	r0, [pc, #144]	@ (801d654 <read_conn+0x37c>)
 801d5c2:	f7fb fba3 	bl	8018d0c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	685b      	ldr	r3, [r3, #4]
 801d5ca:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801d5cc:	6a3b      	ldr	r3, [r7, #32]
 801d5ce:	f103 0818 	add.w	r8, r3, #24
 801d5d2:	693b      	ldr	r3, [r7, #16]
 801d5d4:	607b      	str	r3, [r7, #4]
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	8b1c      	ldrh	r4, [r3, #24]
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801d5de:	6a3b      	ldr	r3, [r7, #32]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	f002 fd48 	bl	8020078 <mg_ntohl>
 801d5e8:	6038      	str	r0, [r7, #0]
 801d5ea:	6a3b      	ldr	r3, [r7, #32]
 801d5ec:	685b      	ldr	r3, [r3, #4]
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	f002 fd42 	bl	8020078 <mg_ntohl>
 801d5f4:	4603      	mov	r3, r0
 801d5f6:	2200      	movs	r2, #0
 801d5f8:	9205      	str	r2, [sp, #20]
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	9204      	str	r2, [sp, #16]
 801d5fe:	9303      	str	r3, [sp, #12]
 801d600:	6839      	ldr	r1, [r7, #0]
 801d602:	9102      	str	r1, [sp, #8]
 801d604:	9501      	str	r5, [sp, #4]
 801d606:	9400      	str	r4, [sp, #0]
 801d608:	2310      	movs	r3, #16
 801d60a:	687a      	ldr	r2, [r7, #4]
 801d60c:	4641      	mov	r1, r8
 801d60e:	4630      	mov	r0, r6
 801d610:	f7ff fb5e 	bl	801ccd0 <tx_tcp>
      s->unacked = 0;
 801d614:	6a3b      	ldr	r3, [r7, #32]
 801d616:	2200      	movs	r2, #0
 801d618:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 801d61a:	6a3b      	ldr	r3, [r7, #32]
 801d61c:	685a      	ldr	r2, [r3, #4]
 801d61e:	6a3b      	ldr	r3, [r7, #32]
 801d620:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 801d622:	6a3b      	ldr	r3, [r7, #32]
 801d624:	7f9b      	ldrb	r3, [r3, #30]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d01e      	beq.n	801d668 <read_conn+0x390>
 801d62a:	2100      	movs	r1, #0
 801d62c:	68f8      	ldr	r0, [r7, #12]
 801d62e:	f7fe f991 	bl	801b954 <settmout>
 801d632:	e019      	b.n	801d668 <read_conn+0x390>
 801d634:	08024f5c 	.word	0x08024f5c
 801d638:	20000288 	.word	0x20000288
 801d63c:	08026f88 	.word	0x08026f88
 801d640:	0802487c 	.word	0x0802487c
 801d644:	08026190 	.word	0x08026190
 801d648:	080261a8 	.word	0x080261a8
 801d64c:	080260f0 	.word	0x080260f0
 801d650:	080261c0 	.word	0x080261c0
 801d654:	080261d4 	.word	0x080261d4
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801d658:	6a3b      	ldr	r3, [r7, #32]
 801d65a:	7f9b      	ldrb	r3, [r3, #30]
 801d65c:	2b01      	cmp	r3, #1
 801d65e:	d003      	beq.n	801d668 <read_conn+0x390>
 801d660:	2101      	movs	r1, #1
 801d662:	68f8      	ldr	r0, [r7, #12]
 801d664:	f7fe f976 	bl	801b954 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d66e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d672:	b2db      	uxtb	r3, r3
 801d674:	2b00      	cmp	r3, #0
 801d676:	d00b      	beq.n	801d690 <read_conn+0x3b8>
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d67e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801d682:	b2db      	uxtb	r3, r3
 801d684:	2b00      	cmp	r3, #0
 801d686:	d003      	beq.n	801d690 <read_conn+0x3b8>
      mg_tls_handshake(c);
 801d688:	68f8      	ldr	r0, [r7, #12]
 801d68a:	f002 fab9 	bl	801fc00 <mg_tls_handshake>
 801d68e:	e031      	b.n	801d6f4 <read_conn+0x41c>
    } else if (c->is_tls) {
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d69a:	b2db      	uxtb	r3, r3
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d021      	beq.n	801d6e4 <read_conn+0x40c>
      io = &c->recv;
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	3338      	adds	r3, #56	@ 0x38
 801d6a4:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 801d6a6:	69fb      	ldr	r3, [r7, #28]
 801d6a8:	685a      	ldr	r2, [r3, #4]
 801d6aa:	69fb      	ldr	r3, [r7, #28]
 801d6ac:	689b      	ldr	r3, [r3, #8]
 801d6ae:	1ad2      	subs	r2, r2, r3
 801d6b0:	68bb      	ldr	r3, [r7, #8]
 801d6b2:	68db      	ldr	r3, [r3, #12]
 801d6b4:	429a      	cmp	r2, r3
 801d6b6:	d210      	bcs.n	801d6da <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801d6b8:	69fb      	ldr	r3, [r7, #28]
 801d6ba:	689a      	ldr	r2, [r3, #8]
 801d6bc:	68bb      	ldr	r3, [r7, #8]
 801d6be:	68db      	ldr	r3, [r3, #12]
 801d6c0:	4413      	add	r3, r2
 801d6c2:	4619      	mov	r1, r3
 801d6c4:	69f8      	ldr	r0, [r7, #28]
 801d6c6:	f7fa fae3 	bl	8017c90 <mg_iobuf_resize>
 801d6ca:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d104      	bne.n	801d6da <read_conn+0x402>
        mg_error(c, "oom");
 801d6d0:	490b      	ldr	r1, [pc, #44]	@ (801d700 <read_conn+0x428>)
 801d6d2:	68f8      	ldr	r0, [r7, #12]
 801d6d4:	f7f5 ff0a 	bl	80134ec <mg_error>
 801d6d8:	e00c      	b.n	801d6f4 <read_conn+0x41c>
        handle_tls_recv(c, io);
 801d6da:	69f9      	ldr	r1, [r7, #28]
 801d6dc:	68f8      	ldr	r0, [r7, #12]
 801d6de:	f7ff fdc7 	bl	801d270 <handle_tls_recv>
}
 801d6e2:	e007      	b.n	801d6f4 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801d6e4:	68bb      	ldr	r3, [r7, #8]
 801d6e6:	330c      	adds	r3, #12
 801d6e8:	461a      	mov	r2, r3
 801d6ea:	2107      	movs	r1, #7
 801d6ec:	68f8      	ldr	r0, [r7, #12]
 801d6ee:	f7f5 fedd 	bl	80134ac <mg_call>
}
 801d6f2:	e7ff      	b.n	801d6f4 <read_conn+0x41c>
 801d6f4:	bf00      	nop
 801d6f6:	3728      	adds	r7, #40	@ 0x28
 801d6f8:	46bd      	mov	sp, r7
 801d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6fe:	bf00      	nop
 801d700:	080260f0 	.word	0x080260f0

0801d704 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801d704:	b590      	push	{r4, r7, lr}
 801d706:	b089      	sub	sp, #36	@ 0x24
 801d708:	af02      	add	r7, sp, #8
 801d70a:	6078      	str	r0, [r7, #4]
 801d70c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d712:	2200      	movs	r2, #0
 801d714:	6839      	ldr	r1, [r7, #0]
 801d716:	4618      	mov	r0, r3
 801d718:	f7fe fcba 	bl	801c090 <getpeer>
 801d71c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801d71e:	697b      	ldr	r3, [r7, #20]
 801d720:	2b00      	cmp	r3, #0
 801d722:	d002      	beq.n	801d72a <rx_tcp+0x26>
 801d724:	697b      	ldr	r3, [r7, #20]
 801d726:	33b0      	adds	r3, #176	@ 0xb0
 801d728:	e000      	b.n	801d72c <rx_tcp+0x28>
 801d72a:	2300      	movs	r3, #0
 801d72c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801d72e:	697b      	ldr	r3, [r7, #20]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d048      	beq.n	801d7c6 <rx_tcp+0xc2>
 801d734:	697b      	ldr	r3, [r7, #20]
 801d736:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d73a:	f003 0320 	and.w	r3, r3, #32
 801d73e:	b2db      	uxtb	r3, r3
 801d740:	2b00      	cmp	r3, #0
 801d742:	d040      	beq.n	801d7c6 <rx_tcp+0xc2>
 801d744:	683b      	ldr	r3, [r7, #0]
 801d746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d748:	7b5b      	ldrb	r3, [r3, #13]
 801d74a:	2b12      	cmp	r3, #18
 801d74c:	d13b      	bne.n	801d7c6 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d752:	689b      	ldr	r3, [r3, #8]
 801d754:	4618      	mov	r0, r3
 801d756:	f002 fc8f 	bl	8020078 <mg_ntohl>
 801d75a:	4602      	mov	r2, r0
 801d75c:	693b      	ldr	r3, [r7, #16]
 801d75e:	601a      	str	r2, [r3, #0]
 801d760:	683b      	ldr	r3, [r7, #0]
 801d762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d764:	685b      	ldr	r3, [r3, #4]
 801d766:	4618      	mov	r0, r3
 801d768:	f002 fc86 	bl	8020078 <mg_ntohl>
 801d76c:	4603      	mov	r3, r0
 801d76e:	1c5a      	adds	r2, r3, #1
 801d770:	693b      	ldr	r3, [r7, #16]
 801d772:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801d774:	683b      	ldr	r3, [r7, #0]
 801d776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d778:	689b      	ldr	r3, [r3, #8]
 801d77a:	2200      	movs	r2, #0
 801d77c:	9201      	str	r2, [sp, #4]
 801d77e:	2200      	movs	r2, #0
 801d780:	9200      	str	r2, [sp, #0]
 801d782:	2210      	movs	r2, #16
 801d784:	6839      	ldr	r1, [r7, #0]
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f7ff fb6e 	bl	801ce68 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801d78c:	697a      	ldr	r2, [r7, #20]
 801d78e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d792:	f36f 1345 	bfc	r3, #5, #1
 801d796:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801d79a:	2100      	movs	r1, #0
 801d79c:	6978      	ldr	r0, [r7, #20]
 801d79e:	f7fe f8d9 	bl	801b954 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801d7a2:	2200      	movs	r2, #0
 801d7a4:	2104      	movs	r1, #4
 801d7a6:	6978      	ldr	r0, [r7, #20]
 801d7a8:	f7f5 fe80 	bl	80134ac <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801d7ac:	697b      	ldr	r3, [r7, #20]
 801d7ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d7b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801d7b6:	b2db      	uxtb	r3, r3
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	f000 80cd 	beq.w	801d958 <rx_tcp+0x254>
 801d7be:	6978      	ldr	r0, [r7, #20]
 801d7c0:	f002 fa1e 	bl	801fc00 <mg_tls_handshake>
 801d7c4:	e0c8      	b.n	801d958 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 801d7c6:	697b      	ldr	r3, [r7, #20]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d019      	beq.n	801d800 <rx_tcp+0xfc>
 801d7cc:	697b      	ldr	r3, [r7, #20]
 801d7ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d7d2:	f003 0320 	and.w	r3, r3, #32
 801d7d6:	b2db      	uxtb	r3, r3
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d011      	beq.n	801d800 <rx_tcp+0xfc>
 801d7dc:	683b      	ldr	r3, [r7, #0]
 801d7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7e0:	7b5b      	ldrb	r3, [r3, #13]
 801d7e2:	2b10      	cmp	r3, #16
 801d7e4:	d00c      	beq.n	801d800 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7ea:	689b      	ldr	r3, [r3, #8]
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	9201      	str	r2, [sp, #4]
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	9200      	str	r2, [sp, #0]
 801d7f4:	2214      	movs	r2, #20
 801d7f6:	6839      	ldr	r1, [r7, #0]
 801d7f8:	6878      	ldr	r0, [r7, #4]
 801d7fa:	f7ff fb35 	bl	801ce68 <tx_tcp_pkt>
 801d7fe:	e0ab      	b.n	801d958 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801d800:	697b      	ldr	r3, [r7, #20]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d00b      	beq.n	801d81e <rx_tcp+0x11a>
 801d806:	683b      	ldr	r3, [r7, #0]
 801d808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d80a:	7b5b      	ldrb	r3, [r3, #13]
 801d80c:	f003 0304 	and.w	r3, r3, #4
 801d810:	2b00      	cmp	r3, #0
 801d812:	d004      	beq.n	801d81e <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801d814:	4952      	ldr	r1, [pc, #328]	@ (801d960 <rx_tcp+0x25c>)
 801d816:	6978      	ldr	r0, [r7, #20]
 801d818:	f7f5 fe68 	bl	80134ec <mg_error>
 801d81c:	e09c      	b.n	801d958 <rx_tcp+0x254>
  } else if (c != NULL) {
 801d81e:	697b      	ldr	r3, [r7, #20]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d00f      	beq.n	801d844 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801d824:	693b      	ldr	r3, [r7, #16]
 801d826:	2200      	movs	r2, #0
 801d828:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801d82a:	693b      	ldr	r3, [r7, #16]
 801d82c:	7f9b      	ldrb	r3, [r3, #30]
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d103      	bne.n	801d83a <rx_tcp+0x136>
      settmout(c,
 801d832:	2100      	movs	r1, #0
 801d834:	6978      	ldr	r0, [r7, #20]
 801d836:	f7fe f88d 	bl	801b954 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801d83a:	6839      	ldr	r1, [r7, #0]
 801d83c:	6978      	ldr	r0, [r7, #20]
 801d83e:	f7ff fd4b 	bl	801d2d8 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801d842:	e089      	b.n	801d958 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d848:	2201      	movs	r2, #1
 801d84a:	6839      	ldr	r1, [r7, #0]
 801d84c:	4618      	mov	r0, r3
 801d84e:	f7fe fc1f 	bl	801c090 <getpeer>
 801d852:	6178      	str	r0, [r7, #20]
 801d854:	697b      	ldr	r3, [r7, #20]
 801d856:	2b00      	cmp	r3, #0
 801d858:	d10c      	bne.n	801d874 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801d85a:	683b      	ldr	r3, [r7, #0]
 801d85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d85e:	689b      	ldr	r3, [r3, #8]
 801d860:	2200      	movs	r2, #0
 801d862:	9201      	str	r2, [sp, #4]
 801d864:	2200      	movs	r2, #0
 801d866:	9200      	str	r2, [sp, #0]
 801d868:	2214      	movs	r2, #20
 801d86a:	6839      	ldr	r1, [r7, #0]
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	f7ff fafb 	bl	801ce68 <tx_tcp_pkt>
}
 801d872:	e071      	b.n	801d958 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d878:	7b5b      	ldrb	r3, [r3, #13]
 801d87a:	f003 0304 	and.w	r3, r3, #4
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d00c      	beq.n	801d89c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801d882:	697b      	ldr	r3, [r7, #20]
 801d884:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d888:	f003 0304 	and.w	r3, r3, #4
 801d88c:	b2db      	uxtb	r3, r3
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d062      	beq.n	801d958 <rx_tcp+0x254>
 801d892:	4933      	ldr	r1, [pc, #204]	@ (801d960 <rx_tcp+0x25c>)
 801d894:	6978      	ldr	r0, [r7, #20]
 801d896:	f7f5 fe29 	bl	80134ec <mg_error>
}
 801d89a:	e05d      	b.n	801d958 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 801d89c:	683b      	ldr	r3, [r7, #0]
 801d89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d8a0:	7b5b      	ldrb	r3, [r3, #13]
 801d8a2:	f003 0302 	and.w	r3, r3, #2
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d016      	beq.n	801d8d8 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801d8aa:	683b      	ldr	r3, [r7, #0]
 801d8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d8ae:	881b      	ldrh	r3, [r3, #0]
 801d8b0:	b29b      	uxth	r3, r3
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	f002 fbf9 	bl	80200aa <mg_ntohs>
 801d8b8:	4603      	mov	r3, r0
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f002 fbdc 	bl	8020078 <mg_ntohl>
 801d8c0:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	9301      	str	r3, [sp, #4]
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	9300      	str	r3, [sp, #0]
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	2212      	movs	r2, #18
 801d8ce:	6839      	ldr	r1, [r7, #0]
 801d8d0:	6878      	ldr	r0, [r7, #4]
 801d8d2:	f7ff fac9 	bl	801ce68 <tx_tcp_pkt>
}
 801d8d6:	e03f      	b.n	801d958 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 801d8d8:	683b      	ldr	r3, [r7, #0]
 801d8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d8dc:	7b5b      	ldrb	r3, [r3, #13]
 801d8de:	f003 0301 	and.w	r3, r3, #1
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d00c      	beq.n	801d900 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d8ea:	689b      	ldr	r3, [r3, #8]
 801d8ec:	2200      	movs	r2, #0
 801d8ee:	9201      	str	r2, [sp, #4]
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	9200      	str	r2, [sp, #0]
 801d8f4:	2211      	movs	r2, #17
 801d8f6:	6839      	ldr	r1, [r7, #0]
 801d8f8:	6878      	ldr	r0, [r7, #4]
 801d8fa:	f7ff fab5 	bl	801ce68 <tx_tcp_pkt>
}
 801d8fe:	e02b      	b.n	801d958 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d904:	689b      	ldr	r3, [r3, #8]
 801d906:	4618      	mov	r0, r3
 801d908:	f002 fbb6 	bl	8020078 <mg_ntohl>
 801d90c:	4604      	mov	r4, r0
 801d90e:	683b      	ldr	r3, [r7, #0]
 801d910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d912:	881b      	ldrh	r3, [r3, #0]
 801d914:	b29b      	uxth	r3, r3
 801d916:	4618      	mov	r0, r3
 801d918:	f002 fbc7 	bl	80200aa <mg_ntohs>
 801d91c:	4603      	mov	r3, r0
 801d91e:	3301      	adds	r3, #1
 801d920:	429c      	cmp	r4, r3
 801d922:	d104      	bne.n	801d92e <rx_tcp+0x22a>
    accept_conn(c, pkt);
 801d924:	6839      	ldr	r1, [r7, #0]
 801d926:	6978      	ldr	r0, [r7, #20]
 801d928:	f7ff fae4 	bl	801cef4 <accept_conn>
}
 801d92c:	e014      	b.n	801d958 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 801d92e:	697b      	ldr	r3, [r7, #20]
 801d930:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801d934:	f003 0304 	and.w	r3, r3, #4
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d10c      	bne.n	801d958 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801d93e:	683b      	ldr	r3, [r7, #0]
 801d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d942:	689b      	ldr	r3, [r3, #8]
 801d944:	2200      	movs	r2, #0
 801d946:	9201      	str	r2, [sp, #4]
 801d948:	2200      	movs	r2, #0
 801d94a:	9200      	str	r2, [sp, #0]
 801d94c:	2214      	movs	r2, #20
 801d94e:	6839      	ldr	r1, [r7, #0]
 801d950:	6878      	ldr	r0, [r7, #4]
 801d952:	f7ff fa89 	bl	801ce68 <tx_tcp_pkt>
}
 801d956:	e7ff      	b.n	801d958 <rx_tcp+0x254>
 801d958:	bf00      	nop
 801d95a:	371c      	adds	r7, #28
 801d95c:	46bd      	mov	sp, r7
 801d95e:	bd90      	pop	{r4, r7, pc}
 801d960:	080261e4 	.word	0x080261e4

0801d964 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801d964:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d966:	b089      	sub	sp, #36	@ 0x24
 801d968:	af04      	add	r7, sp, #16
 801d96a:	6078      	str	r0, [r7, #4]
 801d96c:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801d96e:	683b      	ldr	r3, [r7, #0]
 801d970:	69db      	ldr	r3, [r3, #28]
 801d972:	88db      	ldrh	r3, [r3, #6]
 801d974:	b29b      	uxth	r3, r3
 801d976:	f003 0320 	and.w	r3, r3, #32
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d109      	bne.n	801d992 <rx_ip+0x2e>
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	69db      	ldr	r3, [r3, #28]
 801d982:	88db      	ldrh	r3, [r3, #6]
 801d984:	b29b      	uxth	r3, r3
 801d986:	461a      	mov	r2, r3
 801d988:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 801d98c:	4013      	ands	r3, r2
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d026      	beq.n	801d9e0 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	69db      	ldr	r3, [r3, #28]
 801d996:	7a5b      	ldrb	r3, [r3, #9]
 801d998:	2b11      	cmp	r3, #17
 801d99a:	d105      	bne.n	801d9a8 <rx_ip+0x44>
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	69db      	ldr	r3, [r3, #28]
 801d9a0:	f103 0214 	add.w	r2, r3, #20
 801d9a4:	683b      	ldr	r3, [r7, #0]
 801d9a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	69db      	ldr	r3, [r3, #28]
 801d9ac:	7a5b      	ldrb	r3, [r3, #9]
 801d9ae:	2b06      	cmp	r3, #6
 801d9b0:	d105      	bne.n	801d9be <rx_ip+0x5a>
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	69db      	ldr	r3, [r3, #28]
 801d9b6:	f103 0214 	add.w	r2, r3, #20
 801d9ba:	683b      	ldr	r3, [r7, #0]
 801d9bc:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d9c2:	2200      	movs	r2, #0
 801d9c4:	6839      	ldr	r1, [r7, #0]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f7fe fb62 	bl	801c090 <getpeer>
 801d9cc:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 801d9ce:	68bb      	ldr	r3, [r7, #8]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	f000 811b 	beq.w	801dc0c <rx_ip+0x2a8>
 801d9d6:	4992      	ldr	r1, [pc, #584]	@ (801dc20 <rx_ip+0x2bc>)
 801d9d8:	68b8      	ldr	r0, [r7, #8]
 801d9da:	f7f5 fd87 	bl	80134ec <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801d9de:	e115      	b.n	801dc0c <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 801d9e0:	683b      	ldr	r3, [r7, #0]
 801d9e2:	69db      	ldr	r3, [r3, #28]
 801d9e4:	7a5b      	ldrb	r3, [r3, #9]
 801d9e6:	2b01      	cmp	r3, #1
 801d9e8:	d116      	bne.n	801da18 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 801d9ea:	683b      	ldr	r3, [r7, #0]
 801d9ec:	69db      	ldr	r3, [r3, #28]
 801d9ee:	f103 0214 	add.w	r2, r3, #20
 801d9f2:	683b      	ldr	r3, [r7, #0]
 801d9f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801d9f6:	683b      	ldr	r3, [r7, #0]
 801d9f8:	68db      	ldr	r3, [r3, #12]
 801d9fa:	2b03      	cmp	r3, #3
 801d9fc:	f240 8108 	bls.w	801dc10 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 801da00:	683b      	ldr	r3, [r7, #0]
 801da02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da04:	3304      	adds	r3, #4
 801da06:	4619      	mov	r1, r3
 801da08:	6838      	ldr	r0, [r7, #0]
 801da0a:	f7fd ff2b 	bl	801b864 <mkpay>
    rx_icmp(ifp, pkt);
 801da0e:	6839      	ldr	r1, [r7, #0]
 801da10:	6878      	ldr	r0, [r7, #4]
 801da12:	f7fe fcb9 	bl	801c388 <rx_icmp>
 801da16:	e100      	b.n	801dc1a <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 801da18:	683b      	ldr	r3, [r7, #0]
 801da1a:	69db      	ldr	r3, [r3, #28]
 801da1c:	7a5b      	ldrb	r3, [r3, #9]
 801da1e:	2b11      	cmp	r3, #17
 801da20:	f040 808b 	bne.w	801db3a <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801da24:	683b      	ldr	r3, [r7, #0]
 801da26:	69db      	ldr	r3, [r3, #28]
 801da28:	f103 0214 	add.w	r2, r3, #20
 801da2c:	683b      	ldr	r3, [r7, #0]
 801da2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	68db      	ldr	r3, [r3, #12]
 801da34:	2b07      	cmp	r3, #7
 801da36:	f240 80ed 	bls.w	801dc14 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da3e:	3308      	adds	r3, #8
 801da40:	4619      	mov	r1, r3
 801da42:	6838      	ldr	r0, [r7, #0]
 801da44:	f7fd ff0e 	bl	801b864 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801da48:	4b76      	ldr	r3, [pc, #472]	@ (801dc24 <rx_ip+0x2c0>)
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	2b03      	cmp	r3, #3
 801da4e:	dd2d      	ble.n	801daac <rx_ip+0x148>
 801da50:	4b75      	ldr	r3, [pc, #468]	@ (801dc28 <rx_ip+0x2c4>)
 801da52:	f241 6251 	movw	r2, #5713	@ 0x1651
 801da56:	4975      	ldr	r1, [pc, #468]	@ (801dc2c <rx_ip+0x2c8>)
 801da58:	2004      	movs	r0, #4
 801da5a:	f7fb f907 	bl	8018c6c <mg_log_prefix>
 801da5e:	683b      	ldr	r3, [r7, #0]
 801da60:	69db      	ldr	r3, [r3, #28]
 801da62:	f103 050c 	add.w	r5, r3, #12
 801da66:	683b      	ldr	r3, [r7, #0]
 801da68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da6a:	881b      	ldrh	r3, [r3, #0]
 801da6c:	b29b      	uxth	r3, r3
 801da6e:	4618      	mov	r0, r3
 801da70:	f002 fb1b 	bl	80200aa <mg_ntohs>
 801da74:	4603      	mov	r3, r0
 801da76:	461e      	mov	r6, r3
 801da78:	683b      	ldr	r3, [r7, #0]
 801da7a:	69db      	ldr	r3, [r3, #28]
 801da7c:	f103 0410 	add.w	r4, r3, #16
 801da80:	683b      	ldr	r3, [r7, #0]
 801da82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da84:	885b      	ldrh	r3, [r3, #2]
 801da86:	b29b      	uxth	r3, r3
 801da88:	4618      	mov	r0, r3
 801da8a:	f002 fb0e 	bl	80200aa <mg_ntohs>
 801da8e:	4603      	mov	r3, r0
 801da90:	461a      	mov	r2, r3
 801da92:	683b      	ldr	r3, [r7, #0]
 801da94:	68db      	ldr	r3, [r3, #12]
 801da96:	9303      	str	r3, [sp, #12]
 801da98:	9202      	str	r2, [sp, #8]
 801da9a:	9401      	str	r4, [sp, #4]
 801da9c:	4b64      	ldr	r3, [pc, #400]	@ (801dc30 <rx_ip+0x2cc>)
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	4633      	mov	r3, r6
 801daa2:	462a      	mov	r2, r5
 801daa4:	4962      	ldr	r1, [pc, #392]	@ (801dc30 <rx_ip+0x2cc>)
 801daa6:	4863      	ldr	r0, [pc, #396]	@ (801dc34 <rx_ip+0x2d0>)
 801daa8:	f7fb f930 	bl	8018d0c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	7f1b      	ldrb	r3, [r3, #28]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d01c      	beq.n	801daee <rx_ip+0x18a>
 801dab4:	683b      	ldr	r3, [r7, #0]
 801dab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dab8:	885b      	ldrh	r3, [r3, #2]
 801daba:	b29c      	uxth	r4, r3
 801dabc:	2044      	movs	r0, #68	@ 0x44
 801dabe:	f002 faf4 	bl	80200aa <mg_ntohs>
 801dac2:	4603      	mov	r3, r0
 801dac4:	429c      	cmp	r4, r3
 801dac6:	d112      	bne.n	801daee <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801dac8:	683b      	ldr	r3, [r7, #0]
 801daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dacc:	f103 0208 	add.w	r2, r3, #8
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dad8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801dadc:	4619      	mov	r1, r3
 801dade:	6838      	ldr	r0, [r7, #0]
 801dae0:	f7fd fec0 	bl	801b864 <mkpay>
      rx_dhcp_client(ifp, pkt);
 801dae4:	6839      	ldr	r1, [r7, #0]
 801dae6:	6878      	ldr	r0, [r7, #4]
 801dae8:	f7fe fcaa 	bl	801c440 <rx_dhcp_client>
 801daec:	e095      	b.n	801dc1a <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	7f5b      	ldrb	r3, [r3, #29]
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d01c      	beq.n	801db30 <rx_ip+0x1cc>
 801daf6:	683b      	ldr	r3, [r7, #0]
 801daf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dafa:	885b      	ldrh	r3, [r3, #2]
 801dafc:	b29c      	uxth	r4, r3
 801dafe:	2043      	movs	r0, #67	@ 0x43
 801db00:	f002 fad3 	bl	80200aa <mg_ntohs>
 801db04:	4603      	mov	r3, r0
 801db06:	429c      	cmp	r4, r3
 801db08:	d112      	bne.n	801db30 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801db0a:	683b      	ldr	r3, [r7, #0]
 801db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db0e:	f103 0208 	add.w	r2, r3, #8
 801db12:	683b      	ldr	r3, [r7, #0]
 801db14:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801db16:	683b      	ldr	r3, [r7, #0]
 801db18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db1a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801db1e:	4619      	mov	r1, r3
 801db20:	6838      	ldr	r0, [r7, #0]
 801db22:	f7fd fe9f 	bl	801b864 <mkpay>
      rx_dhcp_server(ifp, pkt);
 801db26:	6839      	ldr	r1, [r7, #0]
 801db28:	6878      	ldr	r0, [r7, #4]
 801db2a:	f7fe fe71 	bl	801c810 <rx_dhcp_server>
 801db2e:	e074      	b.n	801dc1a <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 801db30:	6839      	ldr	r1, [r7, #0]
 801db32:	6878      	ldr	r0, [r7, #4]
 801db34:	f7ff f85a 	bl	801cbec <rx_udp>
 801db38:	e06f      	b.n	801dc1a <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 801db3a:	683b      	ldr	r3, [r7, #0]
 801db3c:	69db      	ldr	r3, [r3, #28]
 801db3e:	7a5b      	ldrb	r3, [r3, #9]
 801db40:	2b06      	cmp	r3, #6
 801db42:	d16a      	bne.n	801dc1a <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	69db      	ldr	r3, [r3, #28]
 801db48:	f103 0214 	add.w	r2, r3, #20
 801db4c:	683b      	ldr	r3, [r7, #0]
 801db4e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801db50:	683b      	ldr	r3, [r7, #0]
 801db52:	68db      	ldr	r3, [r3, #12]
 801db54:	2b13      	cmp	r3, #19
 801db56:	d95f      	bls.n	801dc18 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 801db58:	683b      	ldr	r3, [r7, #0]
 801db5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db5c:	3314      	adds	r3, #20
 801db5e:	4619      	mov	r1, r3
 801db60:	6838      	ldr	r0, [r7, #0]
 801db62:	f7fd fe7f 	bl	801b864 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	69db      	ldr	r3, [r3, #28]
 801db6a:	885b      	ldrh	r3, [r3, #2]
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	4618      	mov	r0, r3
 801db70:	f002 fa9b 	bl	80200aa <mg_ntohs>
 801db74:	4603      	mov	r3, r0
 801db76:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 801db78:	683b      	ldr	r3, [r7, #0]
 801db7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db7c:	7b1b      	ldrb	r3, [r3, #12]
 801db7e:	091b      	lsrs	r3, r3, #4
 801db80:	b2db      	uxtb	r3, r3
 801db82:	3305      	adds	r3, #5
 801db84:	b29b      	uxth	r3, r3
 801db86:	009b      	lsls	r3, r3, #2
 801db88:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 801db8a:	89fa      	ldrh	r2, [r7, #14]
 801db8c:	89bb      	ldrh	r3, [r7, #12]
 801db8e:	429a      	cmp	r2, r3
 801db90:	d305      	bcc.n	801db9e <rx_ip+0x23a>
 801db92:	89fa      	ldrh	r2, [r7, #14]
 801db94:	89bb      	ldrh	r3, [r7, #12]
 801db96:	1ad3      	subs	r3, r2, r3
 801db98:	461a      	mov	r2, r3
 801db9a:	683b      	ldr	r3, [r7, #0]
 801db9c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801db9e:	4b21      	ldr	r3, [pc, #132]	@ (801dc24 <rx_ip+0x2c0>)
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	2b03      	cmp	r3, #3
 801dba4:	dd2d      	ble.n	801dc02 <rx_ip+0x29e>
 801dba6:	4b20      	ldr	r3, [pc, #128]	@ (801dc28 <rx_ip+0x2c4>)
 801dba8:	f241 6266 	movw	r2, #5734	@ 0x1666
 801dbac:	491f      	ldr	r1, [pc, #124]	@ (801dc2c <rx_ip+0x2c8>)
 801dbae:	2004      	movs	r0, #4
 801dbb0:	f7fb f85c 	bl	8018c6c <mg_log_prefix>
 801dbb4:	683b      	ldr	r3, [r7, #0]
 801dbb6:	69db      	ldr	r3, [r3, #28]
 801dbb8:	f103 050c 	add.w	r5, r3, #12
 801dbbc:	683b      	ldr	r3, [r7, #0]
 801dbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbc0:	881b      	ldrh	r3, [r3, #0]
 801dbc2:	b29b      	uxth	r3, r3
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f002 fa70 	bl	80200aa <mg_ntohs>
 801dbca:	4603      	mov	r3, r0
 801dbcc:	461e      	mov	r6, r3
 801dbce:	683b      	ldr	r3, [r7, #0]
 801dbd0:	69db      	ldr	r3, [r3, #28]
 801dbd2:	f103 0410 	add.w	r4, r3, #16
 801dbd6:	683b      	ldr	r3, [r7, #0]
 801dbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbda:	885b      	ldrh	r3, [r3, #2]
 801dbdc:	b29b      	uxth	r3, r3
 801dbde:	4618      	mov	r0, r3
 801dbe0:	f002 fa63 	bl	80200aa <mg_ntohs>
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	683b      	ldr	r3, [r7, #0]
 801dbea:	68db      	ldr	r3, [r3, #12]
 801dbec:	9303      	str	r3, [sp, #12]
 801dbee:	9202      	str	r2, [sp, #8]
 801dbf0:	9401      	str	r4, [sp, #4]
 801dbf2:	4b0f      	ldr	r3, [pc, #60]	@ (801dc30 <rx_ip+0x2cc>)
 801dbf4:	9300      	str	r3, [sp, #0]
 801dbf6:	4633      	mov	r3, r6
 801dbf8:	462a      	mov	r2, r5
 801dbfa:	490d      	ldr	r1, [pc, #52]	@ (801dc30 <rx_ip+0x2cc>)
 801dbfc:	480e      	ldr	r0, [pc, #56]	@ (801dc38 <rx_ip+0x2d4>)
 801dbfe:	f7fb f885 	bl	8018d0c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 801dc02:	6839      	ldr	r1, [r7, #0]
 801dc04:	6878      	ldr	r0, [r7, #4]
 801dc06:	f7ff fd7d 	bl	801d704 <rx_tcp>
 801dc0a:	e006      	b.n	801dc1a <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801dc0c:	bf00      	nop
 801dc0e:	e004      	b.n	801dc1a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801dc10:	bf00      	nop
 801dc12:	e002      	b.n	801dc1a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801dc14:	bf00      	nop
 801dc16:	e000      	b.n	801dc1a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801dc18:	bf00      	nop
  }
}
 801dc1a:	3714      	adds	r7, #20
 801dc1c:	46bd      	mov	sp, r7
 801dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc20:	080261f0 	.word	0x080261f0
 801dc24:	20000288 	.word	0x20000288
 801dc28:	08026f94 	.word	0x08026f94
 801dc2c:	0802487c 	.word	0x0802487c
 801dc30:	0801ee5d 	.word	0x0801ee5d
 801dc34:	0802620c 	.word	0x0802620c
 801dc38:	08026228 	.word	0x08026228

0801dc3c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b082      	sub	sp, #8
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
 801dc44:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	6a1b      	ldr	r3, [r3, #32]
 801dc4a:	799b      	ldrb	r3, [r3, #6]
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	d004      	beq.n	801dc5a <rx_ip6+0x1e>
 801dc50:	683b      	ldr	r3, [r7, #0]
 801dc52:	6a1b      	ldr	r3, [r3, #32]
 801dc54:	799b      	ldrb	r3, [r3, #6]
 801dc56:	2b3a      	cmp	r3, #58	@ 0x3a
 801dc58:	d115      	bne.n	801dc86 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 801dc5a:	683b      	ldr	r3, [r7, #0]
 801dc5c:	6a1b      	ldr	r3, [r3, #32]
 801dc5e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801dc62:	683b      	ldr	r3, [r7, #0]
 801dc64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801dc66:	683b      	ldr	r3, [r7, #0]
 801dc68:	68db      	ldr	r3, [r3, #12]
 801dc6a:	2b03      	cmp	r3, #3
 801dc6c:	d922      	bls.n	801dcb4 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 801dc6e:	683b      	ldr	r3, [r7, #0]
 801dc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc72:	3304      	adds	r3, #4
 801dc74:	4619      	mov	r1, r3
 801dc76:	6838      	ldr	r0, [r7, #0]
 801dc78:	f7fd fdf4 	bl	801b864 <mkpay>
    rx_icmp(ifp, pkt);
 801dc7c:	6839      	ldr	r1, [r7, #0]
 801dc7e:	6878      	ldr	r0, [r7, #4]
 801dc80:	f7fe fb82 	bl	801c388 <rx_icmp>
 801dc84:	e019      	b.n	801dcba <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 801dc86:	683b      	ldr	r3, [r7, #0]
 801dc88:	6a1b      	ldr	r3, [r3, #32]
 801dc8a:	799b      	ldrb	r3, [r3, #6]
 801dc8c:	2b11      	cmp	r3, #17
 801dc8e:	d114      	bne.n	801dcba <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	6a1b      	ldr	r3, [r3, #32]
 801dc94:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801dc98:	683b      	ldr	r3, [r7, #0]
 801dc9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	68db      	ldr	r3, [r3, #12]
 801dca0:	2b07      	cmp	r3, #7
 801dca2:	d909      	bls.n	801dcb8 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dca8:	3308      	adds	r3, #8
 801dcaa:	4619      	mov	r1, r3
 801dcac:	6838      	ldr	r0, [r7, #0]
 801dcae:	f7fd fdd9 	bl	801b864 <mkpay>
 801dcb2:	e002      	b.n	801dcba <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801dcb4:	bf00      	nop
 801dcb6:	e000      	b.n	801dcba <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801dcb8:	bf00      	nop
  }
}
 801dcba:	3708      	adds	r7, #8
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}

0801dcc0 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 801dcc0:	b590      	push	{r4, r7, lr}
 801dcc2:	b093      	sub	sp, #76	@ 0x4c
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	60f8      	str	r0, [r7, #12]
 801dcc8:	60b9      	str	r1, [r7, #8]
 801dcca:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 801dccc:	f107 0314 	add.w	r3, r7, #20
 801dcd0:	2234      	movs	r2, #52	@ 0x34
 801dcd2:	2100      	movs	r1, #0
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	f003 f9d3 	bl	8021080 <memset>
  pkt.raw.buf = (char *) buf;
 801dcda:	68bb      	ldr	r3, [r7, #8]
 801dcdc:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 801dce2:	68bb      	ldr	r3, [r7, #8]
 801dce4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801dce6:	69bb      	ldr	r3, [r7, #24]
 801dce8:	2b0d      	cmp	r3, #13
 801dcea:	f240 80d8 	bls.w	801de9e <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d013      	beq.n	801dd20 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801dcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	2206      	movs	r2, #6
 801dd00:	4619      	mov	r1, r3
 801dd02:	f003 f993 	bl	802102c <memcmp>
 801dd06:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d009      	beq.n	801dd20 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 801dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd0e:	2206      	movs	r2, #6
 801dd10:	496d      	ldr	r1, [pc, #436]	@ (801dec8 <mg_tcpip_rx+0x208>)
 801dd12:	4618      	mov	r0, r3
 801dd14:	f003 f98a 	bl	802102c <memcmp>
 801dd18:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	f040 80c1 	bne.w	801dea2 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d01a      	beq.n	801dd60 <mg_tcpip_rx+0xa0>
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	2b04      	cmp	r3, #4
 801dd2e:	d917      	bls.n	801dd60 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	3b04      	subs	r3, #4
 801dd34:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 801dd36:	687a      	ldr	r2, [r7, #4]
 801dd38:	68b9      	ldr	r1, [r7, #8]
 801dd3a:	2000      	movs	r0, #0
 801dd3c:	f002 f9cc 	bl	80200d8 <mg_crc32>
 801dd40:	4603      	mov	r3, r0
 801dd42:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801dd44:	68ba      	ldr	r2, [r7, #8]
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	4413      	add	r3, r2
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	f107 0310 	add.w	r3, r7, #16
 801dd50:	2204      	movs	r2, #4
 801dd52:	4619      	mov	r1, r3
 801dd54:	f003 f96a 	bl	802102c <memcmp>
 801dd58:	4603      	mov	r3, r0
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	f040 80a3 	bne.w	801dea6 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801dd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd62:	899b      	ldrh	r3, [r3, #12]
 801dd64:	b29c      	uxth	r4, r3
 801dd66:	f640 0006 	movw	r0, #2054	@ 0x806
 801dd6a:	f002 f99e 	bl	80200aa <mg_ntohs>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	429c      	cmp	r4, r3
 801dd72:	d10d      	bne.n	801dd90 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 801dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd76:	330e      	adds	r3, #14
 801dd78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801dd7a:	69bb      	ldr	r3, [r7, #24]
 801dd7c:	2b29      	cmp	r3, #41	@ 0x29
 801dd7e:	f240 8094 	bls.w	801deaa <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 801dd82:	f107 0314 	add.w	r3, r7, #20
 801dd86:	4619      	mov	r1, r3
 801dd88:	68f8      	ldr	r0, [r7, #12]
 801dd8a:	f7fe f9f3 	bl	801c174 <rx_arp>
 801dd8e:	e097      	b.n	801dec0 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 801dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd92:	899b      	ldrh	r3, [r3, #12]
 801dd94:	b29c      	uxth	r4, r3
 801dd96:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 801dd9a:	f002 f986 	bl	80200aa <mg_ntohs>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	429c      	cmp	r4, r3
 801dda2:	d11b      	bne.n	801dddc <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 801dda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dda6:	330e      	adds	r3, #14
 801dda8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801ddaa:	69bb      	ldr	r3, [r7, #24]
 801ddac:	2b35      	cmp	r3, #53	@ 0x35
 801ddae:	d97e      	bls.n	801deae <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801ddb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ddb2:	781b      	ldrb	r3, [r3, #0]
 801ddb4:	091b      	lsrs	r3, r3, #4
 801ddb6:	b2db      	uxtb	r3, r3
 801ddb8:	2b06      	cmp	r3, #6
 801ddba:	d17a      	bne.n	801deb2 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 801ddbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ddbe:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801ddc2:	f107 0314 	add.w	r3, r7, #20
 801ddc6:	4611      	mov	r1, r2
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7fd fd4b 	bl	801b864 <mkpay>
    rx_ip6(ifp, &pkt);
 801ddce:	f107 0314 	add.w	r3, r7, #20
 801ddd2:	4619      	mov	r1, r3
 801ddd4:	68f8      	ldr	r0, [r7, #12]
 801ddd6:	f7ff ff31 	bl	801dc3c <rx_ip6>
 801ddda:	e071      	b.n	801dec0 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 801dddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddde:	899b      	ldrh	r3, [r3, #12]
 801dde0:	b29c      	uxth	r4, r3
 801dde2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801dde6:	f002 f960 	bl	80200aa <mg_ntohs>
 801ddea:	4603      	mov	r3, r0
 801ddec:	429c      	cmp	r4, r3
 801ddee:	d133      	bne.n	801de58 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddf2:	330e      	adds	r3, #14
 801ddf4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801ddf6:	69bb      	ldr	r3, [r7, #24]
 801ddf8:	2b21      	cmp	r3, #33	@ 0x21
 801ddfa:	d95c      	bls.n	801deb6 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 801ddfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddfe:	885b      	ldrh	r3, [r3, #2]
 801de00:	b29b      	uxth	r3, r3
 801de02:	4618      	mov	r0, r3
 801de04:	f002 f951 	bl	80200aa <mg_ntohs>
 801de08:	4603      	mov	r3, r0
 801de0a:	f103 020e 	add.w	r2, r3, #14
 801de0e:	69bb      	ldr	r3, [r7, #24]
 801de10:	429a      	cmp	r2, r3
 801de12:	d208      	bcs.n	801de26 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 801de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de16:	885b      	ldrh	r3, [r3, #2]
 801de18:	b29b      	uxth	r3, r3
 801de1a:	4618      	mov	r0, r3
 801de1c:	f002 f945 	bl	80200aa <mg_ntohs>
 801de20:	4603      	mov	r3, r0
 801de22:	330e      	adds	r3, #14
 801de24:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801de26:	69bb      	ldr	r3, [r7, #24]
 801de28:	2b21      	cmp	r3, #33	@ 0x21
 801de2a:	d946      	bls.n	801deba <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801de2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de2e:	781b      	ldrb	r3, [r3, #0]
 801de30:	091b      	lsrs	r3, r3, #4
 801de32:	b2db      	uxtb	r3, r3
 801de34:	2b04      	cmp	r3, #4
 801de36:	d142      	bne.n	801debe <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 801de38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de3a:	f103 0214 	add.w	r2, r3, #20
 801de3e:	f107 0314 	add.w	r3, r7, #20
 801de42:	4611      	mov	r1, r2
 801de44:	4618      	mov	r0, r3
 801de46:	f7fd fd0d 	bl	801b864 <mkpay>
    rx_ip(ifp, &pkt);
 801de4a:	f107 0314 	add.w	r3, r7, #20
 801de4e:	4619      	mov	r1, r3
 801de50:	68f8      	ldr	r0, [r7, #12]
 801de52:	f7ff fd87 	bl	801d964 <rx_ip>
 801de56:	e033      	b.n	801dec0 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 801de58:	4b1c      	ldr	r3, [pc, #112]	@ (801decc <mg_tcpip_rx+0x20c>)
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	2b02      	cmp	r3, #2
 801de5e:	dd11      	ble.n	801de84 <mg_tcpip_rx+0x1c4>
 801de60:	4b1b      	ldr	r3, [pc, #108]	@ (801ded0 <mg_tcpip_rx+0x210>)
 801de62:	f241 62a4 	movw	r2, #5796	@ 0x16a4
 801de66:	491b      	ldr	r1, [pc, #108]	@ (801ded4 <mg_tcpip_rx+0x214>)
 801de68:	2003      	movs	r0, #3
 801de6a:	f7fa feff 	bl	8018c6c <mg_log_prefix>
 801de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de70:	899b      	ldrh	r3, [r3, #12]
 801de72:	b29b      	uxth	r3, r3
 801de74:	4618      	mov	r0, r3
 801de76:	f002 f918 	bl	80200aa <mg_ntohs>
 801de7a:	4603      	mov	r3, r0
 801de7c:	4619      	mov	r1, r3
 801de7e:	4816      	ldr	r0, [pc, #88]	@ (801ded8 <mg_tcpip_rx+0x218>)
 801de80:	f7fa ff44 	bl	8018d0c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 801de84:	4b11      	ldr	r3, [pc, #68]	@ (801decc <mg_tcpip_rx+0x20c>)
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	2b03      	cmp	r3, #3
 801de8a:	dd19      	ble.n	801dec0 <mg_tcpip_rx+0x200>
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	2b20      	cmp	r3, #32
 801de90:	bf28      	it	cs
 801de92:	2320      	movcs	r3, #32
 801de94:	4619      	mov	r1, r3
 801de96:	68b8      	ldr	r0, [r7, #8]
 801de98:	f7fa ff6e 	bl	8018d78 <mg_hexdump>
 801de9c:	e010      	b.n	801dec0 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801de9e:	bf00      	nop
 801dea0:	e00e      	b.n	801dec0 <mg_tcpip_rx+0x200>
    return;
 801dea2:	bf00      	nop
 801dea4:	e00c      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801dea6:	bf00      	nop
 801dea8:	e00a      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801deaa:	bf00      	nop
 801deac:	e008      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801deae:	bf00      	nop
 801deb0:	e006      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801deb2:	bf00      	nop
 801deb4:	e004      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801deb6:	bf00      	nop
 801deb8:	e002      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801deba:	bf00      	nop
 801debc:	e000      	b.n	801dec0 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801debe:	bf00      	nop
  }
}
 801dec0:	374c      	adds	r7, #76	@ 0x4c
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd90      	pop	{r4, r7, pc}
 801dec6:	bf00      	nop
 801dec8:	08026e38 	.word	0x08026e38
 801decc:	20000288 	.word	0x20000288
 801ded0:	08026f9c 	.word	0x08026f9c
 801ded4:	0802487c 	.word	0x0802487c
 801ded8:	08026244 	.word	0x08026244

0801dedc <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 801dedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dede:	b095      	sub	sp, #84	@ 0x54
 801dee0:	af06      	add	r7, sp, #24
 801dee2:	6178      	str	r0, [r7, #20]
 801dee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 801dee8:	697b      	ldr	r3, [r7, #20]
 801deea:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 801deee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801def2:	e9cd 2300 	strd	r2, r3, [sp]
 801def6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801defa:	f04f 0300 	mov.w	r3, #0
 801defe:	4608      	mov	r0, r1
 801df00:	f001 fdb3 	bl	801fa6a <mg_timer_expired>
 801df04:	4603      	mov	r3, r0
 801df06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 801df0a:	6979      	ldr	r1, [r7, #20]
 801df0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801df10:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 801df14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d052      	beq.n	801dfc2 <mg_tcpip_poll+0xe6>
 801df1c:	697b      	ldr	r3, [r7, #20]
 801df1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801df20:	68db      	ldr	r3, [r3, #12]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d04d      	beq.n	801dfc2 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 801df26:	697b      	ldr	r3, [r7, #20]
 801df28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801df2a:	68db      	ldr	r3, [r3, #12]
 801df2c:	6978      	ldr	r0, [r7, #20]
 801df2e:	4798      	blx	r3
 801df30:	4603      	mov	r3, r0
 801df32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 801df36:	697b      	ldr	r3, [r7, #20]
 801df38:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	bf14      	ite	ne
 801df40:	2301      	movne	r3, #1
 801df42:	2300      	moveq	r3, #0
 801df44:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 801df48:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 801df4c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801df50:	429a      	cmp	r2, r3
 801df52:	d023      	beq.n	801df9c <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 801df54:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801df58:	f083 0301 	eor.w	r3, r3, #1
 801df5c:	b2db      	uxtb	r3, r3
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d001      	beq.n	801df66 <mg_tcpip_poll+0x8a>
 801df62:	2300      	movs	r3, #0
 801df64:	e006      	b.n	801df74 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 801df66:	697b      	ldr	r3, [r7, #20]
 801df68:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d001      	beq.n	801df72 <mg_tcpip_poll+0x96>
 801df6e:	2301      	movs	r3, #1
 801df70:	e000      	b.n	801df74 <mg_tcpip_poll+0x98>
 801df72:	2303      	movs	r3, #3
 801df74:	697a      	ldr	r2, [r7, #20]
 801df76:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 801df7a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801df7e:	f083 0301 	eor.w	r3, r3, #1
 801df82:	b2db      	uxtb	r3, r3
 801df84:	2b00      	cmp	r3, #0
 801df86:	d006      	beq.n	801df96 <mg_tcpip_poll+0xba>
 801df88:	697b      	ldr	r3, [r7, #20]
 801df8a:	7f1b      	ldrb	r3, [r3, #28]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d002      	beq.n	801df96 <mg_tcpip_poll+0xba>
 801df90:	697b      	ldr	r3, [r7, #20]
 801df92:	2200      	movs	r2, #0
 801df94:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 801df96:	6978      	ldr	r0, [r7, #20]
 801df98:	f7fd fdb2 	bl	801bb00 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d10d      	bne.n	801dfc2 <mg_tcpip_poll+0xe6>
 801dfa6:	4ba4      	ldr	r3, [pc, #656]	@ (801e238 <mg_tcpip_poll+0x35c>)
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	dd09      	ble.n	801dfc2 <mg_tcpip_poll+0xe6>
 801dfae:	4ba3      	ldr	r3, [pc, #652]	@ (801e23c <mg_tcpip_poll+0x360>)
 801dfb0:	f241 62c1 	movw	r2, #5825	@ 0x16c1
 801dfb4:	49a2      	ldr	r1, [pc, #648]	@ (801e240 <mg_tcpip_poll+0x364>)
 801dfb6:	2001      	movs	r0, #1
 801dfb8:	f7fa fe58 	bl	8018c6c <mg_log_prefix>
 801dfbc:	48a1      	ldr	r0, [pc, #644]	@ (801e244 <mg_tcpip_poll+0x368>)
 801dfbe:	f7fa fea5 	bl	8018d0c <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 801dfc2:	697b      	ldr	r3, [r7, #20]
 801dfc4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	f000 818d 	beq.w	801e2e8 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 801dfce:	697b      	ldr	r3, [r7, #20]
 801dfd0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dfd4:	2b01      	cmp	r3, #1
 801dfd6:	d107      	bne.n	801dfe8 <mg_tcpip_poll+0x10c>
 801dfd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d003      	beq.n	801dfe8 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 801dfe0:	6978      	ldr	r0, [r7, #20]
 801dfe2:	f7fe f819 	bl	801c018 <tx_dhcp_discover>
 801dfe6:	e04c      	b.n	801e082 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 801dfe8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d048      	beq.n	801e082 <mg_tcpip_poll+0x1a6>
 801dff0:	697b      	ldr	r3, [r7, #20]
 801dff2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dff6:	2b03      	cmp	r3, #3
 801dff8:	d143      	bne.n	801e082 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 801e000:	4313      	orrs	r3, r2
 801e002:	d03e      	beq.n	801e082 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 801e004:	697b      	ldr	r3, [r7, #20]
 801e006:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 801e00a:	697b      	ldr	r3, [r7, #20]
 801e00c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 801e010:	4290      	cmp	r0, r2
 801e012:	eb71 0303 	sbcs.w	r3, r1, r3
 801e016:	d30a      	bcc.n	801e02e <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 801e018:	697b      	ldr	r3, [r7, #20]
 801e01a:	2201      	movs	r2, #1
 801e01c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e020:	697b      	ldr	r3, [r7, #20]
 801e022:	2200      	movs	r2, #0
 801e024:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 801e026:	6978      	ldr	r0, [r7, #20]
 801e028:	f7fd fd6a 	bl	801bb00 <onstatechange>
 801e02c:	e029      	b.n	801e082 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801e02e:	697b      	ldr	r3, [r7, #20]
 801e030:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e034:	4984      	ldr	r1, [pc, #528]	@ (801e248 <mg_tcpip_poll+0x36c>)
 801e036:	1854      	adds	r4, r2, r1
 801e038:	f143 0500 	adc.w	r5, r3, #0
 801e03c:	697b      	ldr	r3, [r7, #20]
 801e03e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 801e042:	42a2      	cmp	r2, r4
 801e044:	41ab      	sbcs	r3, r5
 801e046:	d21c      	bcs.n	801e082 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 801e048:	697b      	ldr	r3, [r7, #20]
 801e04a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 801e04e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e052:	f04f 0300 	mov.w	r3, #0
 801e056:	f7e2 fdc3 	bl	8000be0 <__aeabi_uldivmod>
 801e05a:	4602      	mov	r2, r0
 801e05c:	460b      	mov	r3, r1
 801e05e:	4610      	mov	r0, r2
 801e060:	4619      	mov	r1, r3
 801e062:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 801e066:	f04f 0300 	mov.w	r3, #0
 801e06a:	f7e2 fdb9 	bl	8000be0 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801e06e:	4313      	orrs	r3, r2
 801e070:	d107      	bne.n	801e082 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 801e072:	697b      	ldr	r3, [r7, #20]
 801e074:	689a      	ldr	r2, [r3, #8]
 801e076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e07a:	4974      	ldr	r1, [pc, #464]	@ (801e24c <mg_tcpip_poll+0x370>)
 801e07c:	6978      	ldr	r0, [r7, #20]
 801e07e:	f7fd ff99 	bl	801bfb4 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 801e082:	697b      	ldr	r3, [r7, #20]
 801e084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e086:	689b      	ldr	r3, [r3, #8]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d019      	beq.n	801e0c0 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 801e08c:	697b      	ldr	r3, [r7, #20]
 801e08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e090:	689b      	ldr	r3, [r3, #8]
 801e092:	697a      	ldr	r2, [r7, #20]
 801e094:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801e096:	697a      	ldr	r2, [r7, #20]
 801e098:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 801e09a:	697a      	ldr	r2, [r7, #20]
 801e09c:	4798      	blx	r3
 801e09e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 801e0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d024      	beq.n	801e0f0 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 801e0a6:	697b      	ldr	r3, [r7, #20]
 801e0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e0aa:	1c5a      	adds	r2, r3, #1
 801e0ac:	697b      	ldr	r3, [r7, #20]
 801e0ae:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 801e0b0:	697b      	ldr	r3, [r7, #20]
 801e0b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e0b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e0b6:	4619      	mov	r1, r3
 801e0b8:	6978      	ldr	r0, [r7, #20]
 801e0ba:	f7ff fe01 	bl	801dcc0 <mg_tcpip_rx>
 801e0be:	e017      	b.n	801e0f0 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 801e0c0:	697b      	ldr	r3, [r7, #20]
 801e0c2:	3334      	adds	r3, #52	@ 0x34
 801e0c4:	f107 0220 	add.w	r2, r7, #32
 801e0c8:	4611      	mov	r1, r2
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f000 ffcc 	bl	801f068 <mg_queue_next>
 801e0d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 801e0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d00b      	beq.n	801e0f0 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 801e0d8:	6a3b      	ldr	r3, [r7, #32]
 801e0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e0dc:	4619      	mov	r1, r3
 801e0de:	6978      	ldr	r0, [r7, #20]
 801e0e0:	f7ff fdee 	bl	801dcc0 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 801e0e4:	697b      	ldr	r3, [r7, #20]
 801e0e6:	3334      	adds	r3, #52	@ 0x34
 801e0e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	f001 f802 	bl	801f0f4 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801e0f0:	697b      	ldr	r3, [r7, #20]
 801e0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 801e0f8:	e0f1      	b.n	801e2de <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 801e0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0fc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e100:	f003 0301 	and.w	r3, r3, #1
 801e104:	b2db      	uxtb	r3, r3
 801e106:	2b00      	cmp	r3, #0
 801e108:	f040 80e5 	bne.w	801e2d6 <mg_tcpip_poll+0x3fa>
 801e10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e10e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e112:	f003 0301 	and.w	r3, r3, #1
 801e116:	b2db      	uxtb	r3, r3
 801e118:	2b00      	cmp	r3, #0
 801e11a:	f040 80dc 	bne.w	801e2d6 <mg_tcpip_poll+0x3fa>
 801e11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e120:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e124:	f003 0308 	and.w	r3, r3, #8
 801e128:	b2db      	uxtb	r3, r3
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	f040 80d3 	bne.w	801e2d6 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 801e130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e132:	33b0      	adds	r3, #176	@ 0xb0
 801e134:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801e136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e138:	331c      	adds	r3, #28
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 801e13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e140:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801e144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e148:	4290      	cmp	r0, r2
 801e14a:	eb71 0303 	sbcs.w	r3, r1, r3
 801e14e:	f080 80c3 	bcs.w	801e2d8 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 801e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e154:	7f9b      	ldrb	r3, [r3, #30]
 801e156:	2b01      	cmp	r3, #1
 801e158:	d142      	bne.n	801e1e0 <mg_tcpip_poll+0x304>
 801e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e15c:	691a      	ldr	r2, [r3, #16]
 801e15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e160:	685b      	ldr	r3, [r3, #4]
 801e162:	429a      	cmp	r2, r3
 801e164:	d03c      	beq.n	801e1e0 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 801e166:	4b34      	ldr	r3, [pc, #208]	@ (801e238 <mg_tcpip_poll+0x35c>)
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	2b03      	cmp	r3, #3
 801e16c:	dd0f      	ble.n	801e18e <mg_tcpip_poll+0x2b2>
 801e16e:	4b33      	ldr	r3, [pc, #204]	@ (801e23c <mg_tcpip_poll+0x360>)
 801e170:	f241 62ed 	movw	r2, #5869	@ 0x16ed
 801e174:	4932      	ldr	r1, [pc, #200]	@ (801e240 <mg_tcpip_poll+0x364>)
 801e176:	2004      	movs	r0, #4
 801e178:	f7fa fd78 	bl	8018c6c <mg_log_prefix>
 801e17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e17e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801e180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e182:	681a      	ldr	r2, [r3, #0]
 801e184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e186:	685b      	ldr	r3, [r3, #4]
 801e188:	4831      	ldr	r0, [pc, #196]	@ (801e250 <mg_tcpip_poll+0x374>)
 801e18a:	f7fa fdbf 	bl	8018d0c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e190:	f103 0618 	add.w	r6, r3, #24
 801e194:	69fb      	ldr	r3, [r7, #28]
 801e196:	613b      	str	r3, [r7, #16]
 801e198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e19a:	8b1c      	ldrh	r4, [r3, #24]
 801e19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e19e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801e1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f001 ff67 	bl	8020078 <mg_ntohl>
 801e1aa:	6078      	str	r0, [r7, #4]
 801e1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1ae:	685b      	ldr	r3, [r3, #4]
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	f001 ff61 	bl	8020078 <mg_ntohl>
 801e1b6:	4603      	mov	r3, r0
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	9205      	str	r2, [sp, #20]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	9204      	str	r2, [sp, #16]
 801e1c0:	9303      	str	r3, [sp, #12]
 801e1c2:	6879      	ldr	r1, [r7, #4]
 801e1c4:	9102      	str	r1, [sp, #8]
 801e1c6:	9501      	str	r5, [sp, #4]
 801e1c8:	9400      	str	r4, [sp, #0]
 801e1ca:	2310      	movs	r3, #16
 801e1cc:	693a      	ldr	r2, [r7, #16]
 801e1ce:	4631      	mov	r1, r6
 801e1d0:	6978      	ldr	r0, [r7, #20]
 801e1d2:	f7fe fd7d 	bl	801ccd0 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 801e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1d8:	685a      	ldr	r2, [r3, #4]
 801e1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1dc:	611a      	str	r2, [r3, #16]
 801e1de:	e075      	b.n	801e2cc <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 801e1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1e2:	7f9b      	ldrb	r3, [r3, #30]
 801e1e4:	2b02      	cmp	r3, #2
 801e1e6:	d104      	bne.n	801e1f2 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 801e1e8:	491a      	ldr	r1, [pc, #104]	@ (801e254 <mg_tcpip_poll+0x378>)
 801e1ea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e1ec:	f7f5 f97e 	bl	80134ec <mg_error>
 801e1f0:	e06c      	b.n	801e2cc <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 801e1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1f4:	7f9b      	ldrb	r3, [r3, #30]
 801e1f6:	2b03      	cmp	r3, #3
 801e1f8:	d104      	bne.n	801e204 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 801e1fa:	4917      	ldr	r1, [pc, #92]	@ (801e258 <mg_tcpip_poll+0x37c>)
 801e1fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e1fe:	f7f5 f975 	bl	80134ec <mg_error>
 801e202:	e063      	b.n	801e2cc <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 801e204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e206:	7f9b      	ldrb	r3, [r3, #30]
 801e208:	2b04      	cmp	r3, #4
 801e20a:	d107      	bne.n	801e21c <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 801e20c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e20e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801e212:	f043 0320 	orr.w	r3, r3, #32
 801e216:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 801e21a:	e05d      	b.n	801e2d8 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 801e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e21e:	7fdb      	ldrb	r3, [r3, #31]
 801e220:	1c5a      	adds	r2, r3, #1
 801e222:	b2d1      	uxtb	r1, r2
 801e224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e226:	77d1      	strb	r1, [r2, #31]
 801e228:	2b02      	cmp	r3, #2
 801e22a:	d919      	bls.n	801e260 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 801e22c:	490b      	ldr	r1, [pc, #44]	@ (801e25c <mg_tcpip_poll+0x380>)
 801e22e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e230:	f7f5 f95c 	bl	80134ec <mg_error>
 801e234:	e04a      	b.n	801e2cc <mg_tcpip_poll+0x3f0>
 801e236:	bf00      	nop
 801e238:	20000288 	.word	0x20000288
 801e23c:	08026fa8 	.word	0x08026fa8
 801e240:	0802487c 	.word	0x0802487c
 801e244:	08026258 	.word	0x08026258
 801e248:	001b7740 	.word	0x001b7740
 801e24c:	08026e38 	.word	0x08026e38
 801e250:	08026268 	.word	0x08026268
 801e254:	08026278 	.word	0x08026278
 801e258:	08026284 	.word	0x08026284
 801e25c:	08026298 	.word	0x08026298
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 801e260:	4b23      	ldr	r3, [pc, #140]	@ (801e2f0 <mg_tcpip_poll+0x414>)
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	2b03      	cmp	r3, #3
 801e266:	dd0c      	ble.n	801e282 <mg_tcpip_poll+0x3a6>
 801e268:	4b22      	ldr	r3, [pc, #136]	@ (801e2f4 <mg_tcpip_poll+0x418>)
 801e26a:	f241 62fc 	movw	r2, #5884	@ 0x16fc
 801e26e:	4922      	ldr	r1, [pc, #136]	@ (801e2f8 <mg_tcpip_poll+0x41c>)
 801e270:	2004      	movs	r0, #4
 801e272:	f7fa fcfb 	bl	8018c6c <mg_log_prefix>
 801e276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e27a:	4619      	mov	r1, r3
 801e27c:	481f      	ldr	r0, [pc, #124]	@ (801e2fc <mg_tcpip_poll+0x420>)
 801e27e:	f7fa fd45 	bl	8018d0c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e284:	f103 0618 	add.w	r6, r3, #24
 801e288:	69fb      	ldr	r3, [r7, #28]
 801e28a:	613b      	str	r3, [r7, #16]
 801e28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e28e:	8b1c      	ldrh	r4, [r3, #24]
 801e290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e292:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 801e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e296:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801e298:	3b01      	subs	r3, #1
 801e29a:	4618      	mov	r0, r3
 801e29c:	f001 feec 	bl	8020078 <mg_ntohl>
 801e2a0:	6078      	str	r0, [r7, #4]
 801e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2a4:	685b      	ldr	r3, [r3, #4]
 801e2a6:	4618      	mov	r0, r3
 801e2a8:	f001 fee6 	bl	8020078 <mg_ntohl>
 801e2ac:	4603      	mov	r3, r0
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	9205      	str	r2, [sp, #20]
 801e2b2:	2200      	movs	r2, #0
 801e2b4:	9204      	str	r2, [sp, #16]
 801e2b6:	9303      	str	r3, [sp, #12]
 801e2b8:	6879      	ldr	r1, [r7, #4]
 801e2ba:	9102      	str	r1, [sp, #8]
 801e2bc:	9501      	str	r5, [sp, #4]
 801e2be:	9400      	str	r4, [sp, #0]
 801e2c0:	2310      	movs	r3, #16
 801e2c2:	693a      	ldr	r2, [r7, #16]
 801e2c4:	4631      	mov	r1, r6
 801e2c6:	6978      	ldr	r0, [r7, #20]
 801e2c8:	f7fe fd02 	bl	801ccd0 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 801e2cc:	2100      	movs	r1, #0
 801e2ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e2d0:	f7fd fb40 	bl	801b954 <settmout>
 801e2d4:	e000      	b.n	801e2d8 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 801e2d6:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801e2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	637b      	str	r3, [r7, #52]	@ 0x34
 801e2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	f47f af0a 	bne.w	801e0fa <mg_tcpip_poll+0x21e>
 801e2e6:	e000      	b.n	801e2ea <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 801e2e8:	bf00      	nop
    }
  }
}
 801e2ea:	373c      	adds	r7, #60	@ 0x3c
 801e2ec:	46bd      	mov	sp, r7
 801e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2f0:	20000288 	.word	0x20000288
 801e2f4:	08026fa8 	.word	0x08026fa8
 801e2f8:	0802487c 	.word	0x0802487c
 801e2fc:	080262a4 	.word	0x080262a4

0801e300 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 801e300:	b580      	push	{r7, lr}
 801e302:	b084      	sub	sp, #16
 801e304:	af00      	add	r7, sp, #0
 801e306:	6078      	str	r0, [r7, #4]
 801e308:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801e30a:	683b      	ldr	r3, [r7, #0]
 801e30c:	781b      	ldrb	r3, [r3, #0]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d12d      	bne.n	801e36e <mg_tcpip_init+0x6e>
 801e312:	683b      	ldr	r3, [r7, #0]
 801e314:	785b      	ldrb	r3, [r3, #1]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d129      	bne.n	801e36e <mg_tcpip_init+0x6e>
 801e31a:	683b      	ldr	r3, [r7, #0]
 801e31c:	789b      	ldrb	r3, [r3, #2]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d125      	bne.n	801e36e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801e322:	683b      	ldr	r3, [r7, #0]
 801e324:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801e326:	2b00      	cmp	r3, #0
 801e328:	d121      	bne.n	801e36e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801e32a:	683b      	ldr	r3, [r7, #0]
 801e32c:	791b      	ldrb	r3, [r3, #4]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d11d      	bne.n	801e36e <mg_tcpip_init+0x6e>
 801e332:	683b      	ldr	r3, [r7, #0]
 801e334:	795b      	ldrb	r3, [r3, #5]
 801e336:	2b00      	cmp	r3, #0
 801e338:	d119      	bne.n	801e36e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 801e33a:	683b      	ldr	r3, [r7, #0]
 801e33c:	2202      	movs	r2, #2
 801e33e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 801e340:	683b      	ldr	r3, [r7, #0]
 801e342:	3301      	adds	r3, #1
 801e344:	2105      	movs	r1, #5
 801e346:	4618      	mov	r0, r3
 801e348:	f001 fe2f 	bl	801ffaa <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 801e34c:	4b51      	ldr	r3, [pc, #324]	@ (801e494 <mg_tcpip_init+0x194>)
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	2b01      	cmp	r3, #1
 801e352:	dd0c      	ble.n	801e36e <mg_tcpip_init+0x6e>
 801e354:	4b50      	ldr	r3, [pc, #320]	@ (801e498 <mg_tcpip_init+0x198>)
 801e356:	f241 721b 	movw	r2, #5915	@ 0x171b
 801e35a:	4950      	ldr	r1, [pc, #320]	@ (801e49c <mg_tcpip_init+0x19c>)
 801e35c:	2002      	movs	r0, #2
 801e35e:	f7fa fc85 	bl	8018c6c <mg_log_prefix>
 801e362:	683b      	ldr	r3, [r7, #0]
 801e364:	461a      	mov	r2, r3
 801e366:	494e      	ldr	r1, [pc, #312]	@ (801e4a0 <mg_tcpip_init+0x1a0>)
 801e368:	484e      	ldr	r0, [pc, #312]	@ (801e4a4 <mg_tcpip_init+0x1a4>)
 801e36a:	f7fa fccf 	bl	8018d0c <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 801e36e:	683b      	ldr	r3, [r7, #0]
 801e370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	2b00      	cmp	r3, #0
 801e376:	d019      	beq.n	801e3ac <mg_tcpip_init+0xac>
 801e378:	683b      	ldr	r3, [r7, #0]
 801e37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	6838      	ldr	r0, [r7, #0]
 801e380:	4798      	blx	r3
 801e382:	4603      	mov	r3, r0
 801e384:	f083 0301 	eor.w	r3, r3, #1
 801e388:	b2db      	uxtb	r3, r3
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d00e      	beq.n	801e3ac <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 801e38e:	4b41      	ldr	r3, [pc, #260]	@ (801e494 <mg_tcpip_init+0x194>)
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	2b00      	cmp	r3, #0
 801e394:	dd7a      	ble.n	801e48c <mg_tcpip_init+0x18c>
 801e396:	4b40      	ldr	r3, [pc, #256]	@ (801e498 <mg_tcpip_init+0x198>)
 801e398:	f241 721f 	movw	r2, #5919	@ 0x171f
 801e39c:	493f      	ldr	r1, [pc, #252]	@ (801e49c <mg_tcpip_init+0x19c>)
 801e39e:	2001      	movs	r0, #1
 801e3a0:	f7fa fc64 	bl	8018c6c <mg_log_prefix>
 801e3a4:	4840      	ldr	r0, [pc, #256]	@ (801e4a8 <mg_tcpip_init+0x1a8>)
 801e3a6:	f7fa fcb1 	bl	8018d0c <mg_log>
 801e3aa:	e06f      	b.n	801e48c <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 801e3ac:	f240 6304 	movw	r3, #1540	@ 0x604
 801e3b0:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 801e3b2:	68f9      	ldr	r1, [r7, #12]
 801e3b4:	2001      	movs	r0, #1
 801e3b6:	f7f4 fa99 	bl	80128ec <mg_calloc>
 801e3ba:	4602      	mov	r2, r0
 801e3bc:	683b      	ldr	r3, [r7, #0]
 801e3be:	615a      	str	r2, [r3, #20]
 801e3c0:	683b      	ldr	r3, [r7, #0]
 801e3c2:	68fa      	ldr	r2, [r7, #12]
 801e3c4:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 801e3c6:	683b      	ldr	r3, [r7, #0]
 801e3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d10a      	bne.n	801e3e4 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 801e3ce:	683b      	ldr	r3, [r7, #0]
 801e3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e3d2:	689b      	ldr	r3, [r3, #8]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d001      	beq.n	801e3dc <mg_tcpip_init+0xdc>
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	e001      	b.n	801e3e0 <mg_tcpip_init+0xe0>
 801e3dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801e3e0:	683a      	ldr	r2, [r7, #0]
 801e3e2:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 801e3e4:	683b      	ldr	r3, [r7, #0]
 801e3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3e8:	4619      	mov	r1, r3
 801e3ea:	2001      	movs	r0, #1
 801e3ec:	f7f4 fa7e 	bl	80128ec <mg_calloc>
 801e3f0:	4602      	mov	r2, r0
 801e3f2:	683b      	ldr	r3, [r7, #0]
 801e3f4:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 801e3f6:	f001 fee9 	bl	80201cc <mg_millis>
 801e3fa:	4602      	mov	r2, r0
 801e3fc:	460b      	mov	r3, r1
 801e3fe:	6839      	ldr	r1, [r7, #0]
 801e400:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	683a      	ldr	r2, [r7, #0]
 801e408:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 801e40a:	683b      	ldr	r3, [r7, #0]
 801e40c:	687a      	ldr	r2, [r7, #4]
 801e40e:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 801e410:	683b      	ldr	r3, [r7, #0]
 801e412:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 801e416:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2230      	movs	r2, #48	@ 0x30
 801e41e:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 801e420:	683b      	ldr	r3, [r7, #0]
 801e422:	689b      	ldr	r3, [r3, #8]
 801e424:	2b00      	cmp	r3, #0
 801e426:	d102      	bne.n	801e42e <mg_tcpip_init+0x12e>
 801e428:	683b      	ldr	r3, [r7, #0]
 801e42a:	2201      	movs	r2, #1
 801e42c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 801e42e:	683b      	ldr	r3, [r7, #0]
 801e430:	3346      	adds	r3, #70	@ 0x46
 801e432:	2206      	movs	r2, #6
 801e434:	21ff      	movs	r1, #255	@ 0xff
 801e436:	4618      	mov	r0, r3
 801e438:	f002 fe22 	bl	8021080 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 801e43c:	683b      	ldr	r3, [r7, #0]
 801e43e:	3368      	adds	r3, #104	@ 0x68
 801e440:	2102      	movs	r1, #2
 801e442:	4618      	mov	r0, r3
 801e444:	f001 fdb1 	bl	801ffaa <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 801e448:	683b      	ldr	r3, [r7, #0]
 801e44a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801e44e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801e452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801e456:	b29a      	uxth	r2, r3
 801e458:	683b      	ldr	r3, [r7, #0]
 801e45a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 801e45e:	683b      	ldr	r3, [r7, #0]
 801e460:	695b      	ldr	r3, [r3, #20]
 801e462:	2b00      	cmp	r3, #0
 801e464:	d003      	beq.n	801e46e <mg_tcpip_init+0x16e>
 801e466:	683b      	ldr	r3, [r7, #0]
 801e468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d10e      	bne.n	801e48c <mg_tcpip_init+0x18c>
 801e46e:	4b09      	ldr	r3, [pc, #36]	@ (801e494 <mg_tcpip_init+0x194>)
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	2b00      	cmp	r3, #0
 801e474:	dd0a      	ble.n	801e48c <mg_tcpip_init+0x18c>
 801e476:	4b08      	ldr	r3, [pc, #32]	@ (801e498 <mg_tcpip_init+0x198>)
 801e478:	f241 7230 	movw	r2, #5936	@ 0x1730
 801e47c:	4907      	ldr	r1, [pc, #28]	@ (801e49c <mg_tcpip_init+0x19c>)
 801e47e:	2001      	movs	r0, #1
 801e480:	f7fa fbf4 	bl	8018c6c <mg_log_prefix>
 801e484:	4809      	ldr	r0, [pc, #36]	@ (801e4ac <mg_tcpip_init+0x1ac>)
 801e486:	f7fa fc41 	bl	8018d0c <mg_log>
  }
}
 801e48a:	e7ff      	b.n	801e48c <mg_tcpip_init+0x18c>
 801e48c:	bf00      	nop
 801e48e:	3710      	adds	r7, #16
 801e490:	46bd      	mov	sp, r7
 801e492:	bd80      	pop	{r7, pc}
 801e494:	20000288 	.word	0x20000288
 801e498:	08026fb8 	.word	0x08026fb8
 801e49c:	0802487c 	.word	0x0802487c
 801e4a0:	0801ef21 	.word	0x0801ef21
 801e4a4:	080262b4 	.word	0x080262b4
 801e4a8:	080262d8 	.word	0x080262d8
 801e4ac:	08025d48 	.word	0x08025d48

0801e4b0 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 801e4b0:	b590      	push	{r4, r7, lr}
 801e4b2:	b08d      	sub	sp, #52	@ 0x34
 801e4b4:	af06      	add	r7, sp, #24
 801e4b6:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	33b0      	adds	r3, #176	@ 0xb0
 801e4bc:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	8b1b      	ldrh	r3, [r3, #24]
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f001 fdf1 	bl	80200aa <mg_ntohs>
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	f001 fdd4 	bl	8020078 <mg_ntohl>
 801e4d0:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e4d8:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	331c      	adds	r3, #28
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 801e4e2:	697b      	ldr	r3, [r7, #20]
 801e4e4:	f103 0018 	add.w	r0, r3, #24
 801e4e8:	68bc      	ldr	r4, [r7, #8]
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	8b1b      	ldrh	r3, [r3, #24]
 801e4ee:	687a      	ldr	r2, [r7, #4]
 801e4f0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	9105      	str	r1, [sp, #20]
 801e4f6:	2100      	movs	r1, #0
 801e4f8:	9104      	str	r1, [sp, #16]
 801e4fa:	2100      	movs	r1, #0
 801e4fc:	9103      	str	r1, [sp, #12]
 801e4fe:	6939      	ldr	r1, [r7, #16]
 801e500:	9102      	str	r1, [sp, #8]
 801e502:	9201      	str	r2, [sp, #4]
 801e504:	9300      	str	r3, [sp, #0]
 801e506:	2302      	movs	r3, #2
 801e508:	4622      	mov	r2, r4
 801e50a:	4601      	mov	r1, r0
 801e50c:	68f8      	ldr	r0, [r7, #12]
 801e50e:	f7fe fbdf 	bl	801ccd0 <tx_tcp>
         0);
}
 801e512:	bf00      	nop
 801e514:	371c      	adds	r7, #28
 801e516:	46bd      	mov	sp, r7
 801e518:	bd90      	pop	{r4, r7, pc}
	...

0801e51c <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 801e51c:	b580      	push	{r7, lr}
 801e51e:	b08a      	sub	sp, #40	@ 0x28
 801e520:	af02      	add	r7, sp, #8
 801e522:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	685b      	ldr	r3, [r3, #4]
 801e528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e52a:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	331c      	adds	r3, #28
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 801e534:	687a      	ldr	r2, [r7, #4]
 801e536:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e53a:	f36f 03c3 	bfc	r3, #3, #1
 801e53e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 801e542:	69fb      	ldr	r3, [r7, #28]
 801e544:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801e548:	b21b      	sxth	r3, r3
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	db04      	blt.n	801e558 <mg_connect_resolved+0x3c>
 801e54e:	69fb      	ldr	r3, [r7, #28]
 801e550:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801e554:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	3308      	adds	r3, #8
 801e55c:	69fa      	ldr	r2, [r7, #28]
 801e55e:	3208      	adds	r2, #8
 801e560:	6812      	ldr	r2, [r2, #0]
 801e562:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 801e564:	69fb      	ldr	r3, [r7, #28]
 801e566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801e56a:	1c5a      	adds	r2, r3, #1
 801e56c:	b291      	uxth	r1, r2
 801e56e:	69fa      	ldr	r2, [r7, #28]
 801e570:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 801e574:	4618      	mov	r0, r3
 801e576:	f001 fd98 	bl	80200aa <mg_ntohs>
 801e57a:	4603      	mov	r3, r0
 801e57c:	461a      	mov	r2, r3
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 801e582:	4b6a      	ldr	r3, [pc, #424]	@ (801e72c <mg_connect_resolved+0x210>)
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	2b02      	cmp	r3, #2
 801e588:	dd15      	ble.n	801e5b6 <mg_connect_resolved+0x9a>
 801e58a:	4b69      	ldr	r3, [pc, #420]	@ (801e730 <mg_connect_resolved+0x214>)
 801e58c:	f241 724b 	movw	r2, #5963	@ 0x174b
 801e590:	4968      	ldr	r1, [pc, #416]	@ (801e734 <mg_connect_resolved+0x218>)
 801e592:	2003      	movs	r0, #3
 801e594:	f7fa fb6a 	bl	8018c6c <mg_log_prefix>
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	f103 0208 	add.w	r2, r3, #8
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	331c      	adds	r3, #28
 801e5a6:	9301      	str	r3, [sp, #4]
 801e5a8:	4b63      	ldr	r3, [pc, #396]	@ (801e738 <mg_connect_resolved+0x21c>)
 801e5aa:	9300      	str	r3, [sp, #0]
 801e5ac:	4613      	mov	r3, r2
 801e5ae:	4a62      	ldr	r2, [pc, #392]	@ (801e738 <mg_connect_resolved+0x21c>)
 801e5b0:	4862      	ldr	r0, [pc, #392]	@ (801e73c <mg_connect_resolved+0x220>)
 801e5b2:	f7fa fbab 	bl	8018d0c <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 801e5b6:	2200      	movs	r2, #0
 801e5b8:	2103      	movs	r1, #3
 801e5ba:	6878      	ldr	r0, [r7, #4]
 801e5bc:	f7f4 ff76 	bl	80134ac <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e5c6:	f003 0301 	and.w	r3, r3, #1
 801e5ca:	b2db      	uxtb	r3, r3
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d017      	beq.n	801e600 <mg_connect_resolved+0xe4>
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5d6:	d008      	beq.n	801e5ea <mg_connect_resolved+0xce>
 801e5d8:	69fb      	ldr	r3, [r7, #28]
 801e5da:	689a      	ldr	r2, [r3, #8]
 801e5dc:	69fb      	ldr	r3, [r7, #28]
 801e5de:	68db      	ldr	r3, [r3, #12]
 801e5e0:	43db      	mvns	r3, r3
 801e5e2:	431a      	orrs	r2, r3
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	429a      	cmp	r2, r3
 801e5e8:	d10a      	bne.n	801e600 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	33b0      	adds	r3, #176	@ 0xb0
 801e5ee:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 801e5f0:	69bb      	ldr	r3, [r7, #24]
 801e5f2:	3318      	adds	r3, #24
 801e5f4:	2206      	movs	r2, #6
 801e5f6:	21ff      	movs	r1, #255	@ 0xff
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	f002 fd41 	bl	8021080 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 801e5fe:	e091      	b.n	801e724 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 801e600:	69fb      	ldr	r3, [r7, #28]
 801e602:	689b      	ldr	r3, [r3, #8]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d036      	beq.n	801e676 <mg_connect_resolved+0x15a>
 801e608:	69fb      	ldr	r3, [r7, #28]
 801e60a:	689a      	ldr	r2, [r3, #8]
 801e60c:	68fb      	ldr	r3, [r7, #12]
 801e60e:	405a      	eors	r2, r3
 801e610:	69fb      	ldr	r3, [r7, #28]
 801e612:	68db      	ldr	r3, [r3, #12]
 801e614:	4013      	ands	r3, r2
 801e616:	2b00      	cmp	r3, #0
 801e618:	d12d      	bne.n	801e676 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 801e61a:	69fb      	ldr	r3, [r7, #28]
 801e61c:	691a      	ldr	r2, [r3, #16]
 801e61e:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 801e620:	429a      	cmp	r2, r3
 801e622:	d028      	beq.n	801e676 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 801e624:	4b41      	ldr	r3, [pc, #260]	@ (801e72c <mg_connect_resolved+0x210>)
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	2b02      	cmp	r3, #2
 801e62a:	dd0c      	ble.n	801e646 <mg_connect_resolved+0x12a>
 801e62c:	4b40      	ldr	r3, [pc, #256]	@ (801e730 <mg_connect_resolved+0x214>)
 801e62e:	f241 7254 	movw	r2, #5972	@ 0x1754
 801e632:	4940      	ldr	r1, [pc, #256]	@ (801e734 <mg_connect_resolved+0x218>)
 801e634:	2003      	movs	r0, #3
 801e636:	f7fa fb19 	bl	8018c6c <mg_log_prefix>
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e63e:	4619      	mov	r1, r3
 801e640:	483f      	ldr	r0, [pc, #252]	@ (801e740 <mg_connect_resolved+0x224>)
 801e642:	f7fa fb63 	bl	8018d0c <mg_log>
    arp_ask(ifp, rem_ip);
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	4619      	mov	r1, r3
 801e64a:	69f8      	ldr	r0, [r7, #28]
 801e64c:	f7fd f9fa 	bl	801ba44 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 801e650:	2102      	movs	r1, #2
 801e652:	6878      	ldr	r0, [r7, #4]
 801e654:	f7fd f97e 	bl	801b954 <settmout>
    c->is_arplooking = 1;
 801e658:	687a      	ldr	r2, [r7, #4]
 801e65a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e65e:	f043 0310 	orr.w	r3, r3, #16
 801e662:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 801e666:	687a      	ldr	r2, [r7, #4]
 801e668:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e66c:	f043 0320 	orr.w	r3, r3, #32
 801e670:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801e674:	e056      	b.n	801e724 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 801e676:	f107 030c 	add.w	r3, r7, #12
 801e67a:	781b      	ldrb	r3, [r3, #0]
 801e67c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801e680:	2be0      	cmp	r3, #224	@ 0xe0
 801e682:	d126      	bne.n	801e6d2 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	33b0      	adds	r3, #176	@ 0xb0
 801e688:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 801e68a:	4a2e      	ldr	r2, [pc, #184]	@ (801e744 <mg_connect_resolved+0x228>)
 801e68c:	f107 0308 	add.w	r3, r7, #8
 801e690:	6812      	ldr	r2, [r2, #0]
 801e692:	4611      	mov	r1, r2
 801e694:	8019      	strh	r1, [r3, #0]
 801e696:	3302      	adds	r3, #2
 801e698:	0c12      	lsrs	r2, r2, #16
 801e69a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 801e69c:	693b      	ldr	r3, [r7, #16]
 801e69e:	3318      	adds	r3, #24
 801e6a0:	461a      	mov	r2, r3
 801e6a2:	f107 0308 	add.w	r3, r7, #8
 801e6a6:	8819      	ldrh	r1, [r3, #0]
 801e6a8:	789b      	ldrb	r3, [r3, #2]
 801e6aa:	8011      	strh	r1, [r2, #0]
 801e6ac:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 801e6ae:	693b      	ldr	r3, [r7, #16]
 801e6b0:	3318      	adds	r3, #24
 801e6b2:	1cd8      	adds	r0, r3, #3
 801e6b4:	f107 030c 	add.w	r3, r7, #12
 801e6b8:	3301      	adds	r3, #1
 801e6ba:	2203      	movs	r2, #3
 801e6bc:	4619      	mov	r1, r3
 801e6be:	f002 fdb0 	bl	8021222 <memcpy>
    s->mac[3] &= 0x7F;
 801e6c2:	693b      	ldr	r3, [r7, #16]
 801e6c4:	7edb      	ldrb	r3, [r3, #27]
 801e6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6ca:	b2da      	uxtb	r2, r3
 801e6cc:	693b      	ldr	r3, [r7, #16]
 801e6ce:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 801e6d0:	e028      	b.n	801e724 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	33b0      	adds	r3, #176	@ 0xb0
 801e6d6:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 801e6d8:	697b      	ldr	r3, [r7, #20]
 801e6da:	f103 0018 	add.w	r0, r3, #24
 801e6de:	69fb      	ldr	r3, [r7, #28]
 801e6e0:	3346      	adds	r3, #70	@ 0x46
 801e6e2:	2206      	movs	r2, #6
 801e6e4:	4619      	mov	r1, r3
 801e6e6:	f002 fd9c 	bl	8021222 <memcpy>
    if (c->is_udp) {
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e6f0:	f003 0301 	and.w	r3, r3, #1
 801e6f4:	b2db      	uxtb	r3, r3
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d005      	beq.n	801e706 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 801e6fa:	2200      	movs	r2, #0
 801e6fc:	2104      	movs	r1, #4
 801e6fe:	6878      	ldr	r0, [r7, #4]
 801e700:	f7f4 fed4 	bl	80134ac <mg_call>
}
 801e704:	e00e      	b.n	801e724 <mg_connect_resolved+0x208>
      send_syn(c);
 801e706:	6878      	ldr	r0, [r7, #4]
 801e708:	f7ff fed2 	bl	801e4b0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 801e70c:	2103      	movs	r1, #3
 801e70e:	6878      	ldr	r0, [r7, #4]
 801e710:	f7fd f920 	bl	801b954 <settmout>
      c->is_connecting = 1;
 801e714:	687a      	ldr	r2, [r7, #4]
 801e716:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e71a:	f043 0320 	orr.w	r3, r3, #32
 801e71e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 801e722:	e7ff      	b.n	801e724 <mg_connect_resolved+0x208>
 801e724:	bf00      	nop
 801e726:	3720      	adds	r7, #32
 801e728:	46bd      	mov	sp, r7
 801e72a:	bd80      	pop	{r7, pc}
 801e72c:	20000288 	.word	0x20000288
 801e730:	08026fc8 	.word	0x08026fc8
 801e734:	0802487c 	.word	0x0802487c
 801e738:	0801eed5 	.word	0x0801eed5
 801e73c:	080262ec 	.word	0x080262ec
 801e740:	080262fc 	.word	0x080262fc
 801e744:	08026310 	.word	0x08026310

0801e748 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 801e748:	b580      	push	{r7, lr}
 801e74a:	b082      	sub	sp, #8
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	6078      	str	r0, [r7, #4]
 801e750:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 801e752:	6838      	ldr	r0, [r7, #0]
 801e754:	f001 fbac 	bl	801feb0 <mg_url_port>
 801e758:	4603      	mov	r3, r0
 801e75a:	4618      	mov	r0, r3
 801e75c:	f001 fca5 	bl	80200aa <mg_ntohs>
 801e760:	4603      	mov	r3, r0
 801e762:	461a      	mov	r2, r3
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	831a      	strh	r2, [r3, #24]
  return true;
 801e768:	2301      	movs	r3, #1
}
 801e76a:	4618      	mov	r0, r3
 801e76c:	3708      	adds	r7, #8
 801e76e:	46bd      	mov	sp, r7
 801e770:	bd80      	pop	{r7, pc}
	...

0801e774 <write_conn>:

static void write_conn(struct mg_connection *c) {
 801e774:	b580      	push	{r7, lr}
 801e776:	b084      	sub	sp, #16
 801e778:	af00      	add	r7, sp, #0
 801e77a:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e786:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d009      	beq.n	801e7a0 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e794:	461a      	mov	r2, r3
 801e796:	6878      	ldr	r0, [r7, #4]
 801e798:	f001 fa5f 	bl	801fc5a <mg_tls_send>
 801e79c:	4603      	mov	r3, r0
 801e79e:	e008      	b.n	801e7b2 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e7a8:	461a      	mov	r2, r3
 801e7aa:	6878      	ldr	r0, [r7, #4]
 801e7ac:	f7fe fce8 	bl	801d180 <mg_io_send>
 801e7b0:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 801e7b2:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e7ba:	d104      	bne.n	801e7c6 <write_conn+0x52>
    mg_error(c, "tx err");
 801e7bc:	490c      	ldr	r1, [pc, #48]	@ (801e7f0 <write_conn+0x7c>)
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7f4 fe94 	bl	80134ec <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 801e7c4:	e010      	b.n	801e7e8 <write_conn+0x74>
  } else if (len > 0) {
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	dd0d      	ble.n	801e7e8 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	3348      	adds	r3, #72	@ 0x48
 801e7d0:	68fa      	ldr	r2, [r7, #12]
 801e7d2:	2100      	movs	r1, #0
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	f7f9 fb39 	bl	8017e4c <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 801e7da:	f107 030c 	add.w	r3, r7, #12
 801e7de:	461a      	mov	r2, r3
 801e7e0:	2108      	movs	r1, #8
 801e7e2:	6878      	ldr	r0, [r7, #4]
 801e7e4:	f7f4 fe62 	bl	80134ac <mg_call>
}
 801e7e8:	bf00      	nop
 801e7ea:	3710      	adds	r7, #16
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	bd80      	pop	{r7, pc}
 801e7f0:	08026314 	.word	0x08026314

0801e7f4 <init_closure>:

static void init_closure(struct mg_connection *c) {
 801e7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7f6:	b08f      	sub	sp, #60	@ 0x3c
 801e7f8:	af06      	add	r7, sp, #24
 801e7fa:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	33b0      	adds	r3, #176	@ 0xb0
 801e800:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e808:	f003 0301 	and.w	r3, r3, #1
 801e80c:	b2db      	uxtb	r3, r3
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d13f      	bne.n	801e892 <init_closure+0x9e>
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e818:	f003 0301 	and.w	r3, r3, #1
 801e81c:	b2db      	uxtb	r3, r3
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d137      	bne.n	801e892 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e828:	f003 0320 	and.w	r3, r3, #32
 801e82c:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d12f      	bne.n	801e892 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 801e832:	68fb      	ldr	r3, [r7, #12]
 801e834:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 801e836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e838:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	331c      	adds	r3, #28
 801e83e:	681b      	ldr	r3, [r3, #0]
 801e840:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 801e842:	69fb      	ldr	r3, [r7, #28]
 801e844:	f103 0618 	add.w	r6, r3, #24
 801e848:	697b      	ldr	r3, [r7, #20]
 801e84a:	60bb      	str	r3, [r7, #8]
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	8b1c      	ldrh	r4, [r3, #24]
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801e854:	69fb      	ldr	r3, [r7, #28]
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	4618      	mov	r0, r3
 801e85a:	f001 fc0d 	bl	8020078 <mg_ntohl>
 801e85e:	6078      	str	r0, [r7, #4]
 801e860:	69fb      	ldr	r3, [r7, #28]
 801e862:	685b      	ldr	r3, [r3, #4]
 801e864:	4618      	mov	r0, r3
 801e866:	f001 fc07 	bl	8020078 <mg_ntohl>
 801e86a:	4603      	mov	r3, r0
 801e86c:	2200      	movs	r2, #0
 801e86e:	9205      	str	r2, [sp, #20]
 801e870:	2200      	movs	r2, #0
 801e872:	9204      	str	r2, [sp, #16]
 801e874:	9303      	str	r3, [sp, #12]
 801e876:	6879      	ldr	r1, [r7, #4]
 801e878:	9102      	str	r1, [sp, #8]
 801e87a:	9501      	str	r5, [sp, #4]
 801e87c:	9400      	str	r4, [sp, #0]
 801e87e:	2311      	movs	r3, #17
 801e880:	68ba      	ldr	r2, [r7, #8]
 801e882:	4631      	mov	r1, r6
 801e884:	69b8      	ldr	r0, [r7, #24]
 801e886:	f7fe fa23 	bl	801ccd0 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 801e88a:	2104      	movs	r1, #4
 801e88c:	68f8      	ldr	r0, [r7, #12]
 801e88e:	f7fd f861 	bl	801b954 <settmout>
  }
}
 801e892:	bf00      	nop
 801e894:	3724      	adds	r7, #36	@ 0x24
 801e896:	46bd      	mov	sp, r7
 801e898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e89a <close_conn>:

static void close_conn(struct mg_connection *c) {
 801e89a:	b580      	push	{r7, lr}
 801e89c:	b084      	sub	sp, #16
 801e89e:	af00      	add	r7, sp, #0
 801e8a0:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	33b0      	adds	r3, #176	@ 0xb0
 801e8a6:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 801e8a8:	68fb      	ldr	r3, [r7, #12]
 801e8aa:	3320      	adds	r3, #32
 801e8ac:	4618      	mov	r0, r3
 801e8ae:	f7f9 fb18 	bl	8017ee2 <mg_iobuf_free>
  mg_close_conn(c);
 801e8b2:	6878      	ldr	r0, [r7, #4]
 801e8b4:	f7fc fddc 	bl	801b470 <mg_close_conn>
}
 801e8b8:	bf00      	nop
 801e8ba:	3710      	adds	r7, #16
 801e8bc:	46bd      	mov	sp, r7
 801e8be:	bd80      	pop	{r7, pc}

0801e8c0 <can_write>:

static bool can_write(struct mg_connection *c) {
 801e8c0:	b480      	push	{r7}
 801e8c2:	b083      	sub	sp, #12
 801e8c4:	af00      	add	r7, sp, #0
 801e8c6:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e8ce:	f003 0320 	and.w	r3, r3, #32
 801e8d2:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d11d      	bne.n	801e914 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e8de:	f003 0308 	and.w	r3, r3, #8
 801e8e2:	b2db      	uxtb	r3, r3
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d115      	bne.n	801e914 <can_write+0x54>
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d011      	beq.n	801e914 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e8f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801e8fa:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d109      	bne.n	801e914 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e906:	f003 0310 	and.w	r3, r3, #16
 801e90a:	b2db      	uxtb	r3, r3
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d101      	bne.n	801e914 <can_write+0x54>
 801e910:	2301      	movs	r3, #1
 801e912:	e000      	b.n	801e916 <can_write+0x56>
 801e914:	2300      	movs	r3, #0
 801e916:	f003 0301 	and.w	r3, r3, #1
 801e91a:	b2db      	uxtb	r3, r3
}
 801e91c:	4618      	mov	r0, r3
 801e91e:	370c      	adds	r7, #12
 801e920:	46bd      	mov	sp, r7
 801e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e926:	4770      	bx	lr

0801e928 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 801e928:	b5b0      	push	{r4, r5, r7, lr}
 801e92a:	b08c      	sub	sp, #48	@ 0x30
 801e92c:	af04      	add	r7, sp, #16
 801e92e:	6078      	str	r0, [r7, #4]
 801e930:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e936:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 801e938:	f001 fc48 	bl	80201cc <mg_millis>
 801e93c:	4602      	mov	r2, r0
 801e93e:	460b      	mov	r3, r1
 801e940:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801e94a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e94e:	4608      	mov	r0, r1
 801e950:	f001 f8ef 	bl	801fb32 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 801e954:	69bb      	ldr	r3, [r7, #24]
 801e956:	2b00      	cmp	r3, #0
 801e958:	f000 80aa 	beq.w	801eab0 <mg_mgr_poll+0x188>
 801e95c:	69bb      	ldr	r3, [r7, #24]
 801e95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e960:	2b00      	cmp	r3, #0
 801e962:	f000 80a5 	beq.w	801eab0 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 801e966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e96a:	69b8      	ldr	r0, [r7, #24]
 801e96c:	f7ff fab6 	bl	801dedc <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	61fb      	str	r3, [r7, #28]
 801e976:	e096      	b.n	801eaa6 <mg_mgr_poll+0x17e>
    tmp = c->next;
 801e978:	69fb      	ldr	r3, [r7, #28]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 801e97e:	69fb      	ldr	r3, [r7, #28]
 801e980:	33b0      	adds	r3, #176	@ 0xb0
 801e982:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 801e984:	f107 0308 	add.w	r3, r7, #8
 801e988:	461a      	mov	r2, r3
 801e98a:	2102      	movs	r1, #2
 801e98c:	69f8      	ldr	r0, [r7, #28]
 801e98e:	f7f4 fd8d 	bl	80134ac <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 801e992:	4b49      	ldr	r3, [pc, #292]	@ (801eab8 <mg_mgr_poll+0x190>)
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	2b03      	cmp	r3, #3
 801e998:	dd48      	ble.n	801ea2c <mg_mgr_poll+0x104>
 801e99a:	4b48      	ldr	r3, [pc, #288]	@ (801eabc <mg_mgr_poll+0x194>)
 801e99c:	f44f 52bd 	mov.w	r2, #6048	@ 0x17a0
 801e9a0:	4947      	ldr	r1, [pc, #284]	@ (801eac0 <mg_mgr_poll+0x198>)
 801e9a2:	2004      	movs	r0, #4
 801e9a4:	f7fa f962 	bl	8018c6c <mg_log_prefix>
 801e9a8:	69fb      	ldr	r3, [r7, #28]
 801e9aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801e9ac:	69fb      	ldr	r3, [r7, #28]
 801e9ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e9b6:	b2db      	uxtb	r3, r3
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d001      	beq.n	801e9c0 <mg_mgr_poll+0x98>
 801e9bc:	2454      	movs	r4, #84	@ 0x54
 801e9be:	e000      	b.n	801e9c2 <mg_mgr_poll+0x9a>
 801e9c0:	2474      	movs	r4, #116	@ 0x74
 801e9c2:	69fb      	ldr	r3, [r7, #28]
 801e9c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e9c8:	f003 0320 	and.w	r3, r3, #32
 801e9cc:	b2db      	uxtb	r3, r3
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d001      	beq.n	801e9d6 <mg_mgr_poll+0xae>
 801e9d2:	2543      	movs	r5, #67	@ 0x43
 801e9d4:	e000      	b.n	801e9d8 <mg_mgr_poll+0xb0>
 801e9d6:	2563      	movs	r5, #99	@ 0x63
 801e9d8:	69fb      	ldr	r3, [r7, #28]
 801e9da:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e9de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801e9e2:	b2db      	uxtb	r3, r3
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d001      	beq.n	801e9ec <mg_mgr_poll+0xc4>
 801e9e8:	2348      	movs	r3, #72	@ 0x48
 801e9ea:	e000      	b.n	801e9ee <mg_mgr_poll+0xc6>
 801e9ec:	2368      	movs	r3, #104	@ 0x68
 801e9ee:	69fa      	ldr	r2, [r7, #28]
 801e9f0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 801e9f4:	f002 0208 	and.w	r2, r2, #8
 801e9f8:	b2d2      	uxtb	r2, r2
 801e9fa:	2a00      	cmp	r2, #0
 801e9fc:	d001      	beq.n	801ea02 <mg_mgr_poll+0xda>
 801e9fe:	2252      	movs	r2, #82	@ 0x52
 801ea00:	e000      	b.n	801ea04 <mg_mgr_poll+0xdc>
 801ea02:	2272      	movs	r2, #114	@ 0x72
 801ea04:	69f9      	ldr	r1, [r7, #28]
 801ea06:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 801ea0a:	f001 0120 	and.w	r1, r1, #32
 801ea0e:	b2c9      	uxtb	r1, r1
 801ea10:	2900      	cmp	r1, #0
 801ea12:	d001      	beq.n	801ea18 <mg_mgr_poll+0xf0>
 801ea14:	2143      	movs	r1, #67	@ 0x43
 801ea16:	e000      	b.n	801ea1a <mg_mgr_poll+0xf2>
 801ea18:	2163      	movs	r1, #99	@ 0x63
 801ea1a:	9102      	str	r1, [sp, #8]
 801ea1c:	9201      	str	r2, [sp, #4]
 801ea1e:	9300      	str	r3, [sp, #0]
 801ea20:	462b      	mov	r3, r5
 801ea22:	4622      	mov	r2, r4
 801ea24:	4601      	mov	r1, r0
 801ea26:	4827      	ldr	r0, [pc, #156]	@ (801eac4 <mg_mgr_poll+0x19c>)
 801ea28:	f7fa f970 	bl	8018d0c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 801ea2c:	69fb      	ldr	r3, [r7, #28]
 801ea2e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801ea32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ea36:	b2db      	uxtb	r3, r3
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d00b      	beq.n	801ea54 <mg_mgr_poll+0x12c>
 801ea3c:	69f8      	ldr	r0, [r7, #28]
 801ea3e:	f001 f925 	bl	801fc8c <mg_tls_pending>
 801ea42:	4603      	mov	r3, r0
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d005      	beq.n	801ea54 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 801ea48:	69fb      	ldr	r3, [r7, #28]
 801ea4a:	3368      	adds	r3, #104	@ 0x68
 801ea4c:	4619      	mov	r1, r3
 801ea4e:	69f8      	ldr	r0, [r7, #28]
 801ea50:	f7fe fc0e 	bl	801d270 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 801ea54:	69f8      	ldr	r0, [r7, #28]
 801ea56:	f7ff ff33 	bl	801e8c0 <can_write>
 801ea5a:	4603      	mov	r3, r0
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d002      	beq.n	801ea66 <mg_mgr_poll+0x13e>
 801ea60:	69f8      	ldr	r0, [r7, #28]
 801ea62:	f7ff fe87 	bl	801e774 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 801ea66:	69fb      	ldr	r3, [r7, #28]
 801ea68:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ea6c:	f003 0310 	and.w	r3, r3, #16
 801ea70:	b2db      	uxtb	r3, r3
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d00a      	beq.n	801ea8c <mg_mgr_poll+0x164>
 801ea76:	69fb      	ldr	r3, [r7, #28]
 801ea78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d106      	bne.n	801ea8c <mg_mgr_poll+0x164>
 801ea7e:	693b      	ldr	r3, [r7, #16]
 801ea80:	7f9b      	ldrb	r3, [r3, #30]
 801ea82:	2b04      	cmp	r3, #4
 801ea84:	d002      	beq.n	801ea8c <mg_mgr_poll+0x164>
      init_closure(c);
 801ea86:	69f8      	ldr	r0, [r7, #28]
 801ea88:	f7ff feb4 	bl	801e7f4 <init_closure>
    if (c->is_closing) close_conn(c);
 801ea8c:	69fb      	ldr	r3, [r7, #28]
 801ea8e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ea92:	f003 0320 	and.w	r3, r3, #32
 801ea96:	b2db      	uxtb	r3, r3
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d002      	beq.n	801eaa2 <mg_mgr_poll+0x17a>
 801ea9c:	69f8      	ldr	r0, [r7, #28]
 801ea9e:	f7ff fefc 	bl	801e89a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 801eaa2:	697b      	ldr	r3, [r7, #20]
 801eaa4:	61fb      	str	r3, [r7, #28]
 801eaa6:	69fb      	ldr	r3, [r7, #28]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	f47f af65 	bne.w	801e978 <mg_mgr_poll+0x50>
 801eaae:	e000      	b.n	801eab2 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 801eab0:	bf00      	nop
  }
  (void) ms;
}
 801eab2:	3720      	adds	r7, #32
 801eab4:	46bd      	mov	sp, r7
 801eab6:	bdb0      	pop	{r4, r5, r7, pc}
 801eab8:	20000288 	.word	0x20000288
 801eabc:	08026fdc 	.word	0x08026fdc
 801eac0:	0802487c 	.word	0x0802487c
 801eac4:	0802631c 	.word	0x0802631c

0801eac8 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 801eac8:	b5b0      	push	{r4, r5, r7, lr}
 801eaca:	b08c      	sub	sp, #48	@ 0x30
 801eacc:	af04      	add	r7, sp, #16
 801eace:	60f8      	str	r0, [r7, #12]
 801ead0:	60b9      	str	r1, [r7, #8]
 801ead2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801ead4:	68fb      	ldr	r3, [r7, #12]
 801ead6:	685b      	ldr	r3, [r3, #4]
 801ead8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eada:	61bb      	str	r3, [r7, #24]
  bool res = false;
 801eadc:	2300      	movs	r3, #0
 801eade:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801eae0:	68fb      	ldr	r3, [r7, #12]
 801eae2:	331c      	adds	r3, #28
 801eae4:	681b      	ldr	r3, [r3, #0]
 801eae6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 801eae8:	69bb      	ldr	r3, [r7, #24]
 801eaea:	689b      	ldr	r3, [r3, #8]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d004      	beq.n	801eafa <mg_send+0x32>
 801eaf0:	69bb      	ldr	r3, [r7, #24]
 801eaf2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801eaf6:	2b03      	cmp	r3, #3
 801eaf8:	d004      	beq.n	801eb04 <mg_send+0x3c>
    mg_error(c, "net down");
 801eafa:	4921      	ldr	r1, [pc, #132]	@ (801eb80 <mg_send+0xb8>)
 801eafc:	68f8      	ldr	r0, [r7, #12]
 801eafe:	f7f4 fcf5 	bl	80134ec <mg_error>
 801eb02:	e037      	b.n	801eb74 <mg_send+0xac>
  } else if (c->is_udp) {
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801eb0a:	f003 0301 	and.w	r3, r3, #1
 801eb0e:	b2db      	uxtb	r3, r3
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d020      	beq.n	801eb56 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	33b0      	adds	r3, #176	@ 0xb0
 801eb18:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 801eb1a:	6879      	ldr	r1, [r7, #4]
 801eb1c:	68f8      	ldr	r0, [r7, #12]
 801eb1e:	f7fe faa1 	bl	801d064 <trim_len>
 801eb22:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 801eb24:	697b      	ldr	r3, [r7, #20]
 801eb26:	f103 0018 	add.w	r0, r3, #24
 801eb2a:	69bb      	ldr	r3, [r7, #24]
 801eb2c:	689c      	ldr	r4, [r3, #8]
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	8b1d      	ldrh	r5, [r3, #24]
 801eb32:	693b      	ldr	r3, [r7, #16]
 801eb34:	68fa      	ldr	r2, [r7, #12]
 801eb36:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 801eb38:	6879      	ldr	r1, [r7, #4]
 801eb3a:	9103      	str	r1, [sp, #12]
 801eb3c:	68b9      	ldr	r1, [r7, #8]
 801eb3e:	9102      	str	r1, [sp, #8]
 801eb40:	9201      	str	r2, [sp, #4]
 801eb42:	9300      	str	r3, [sp, #0]
 801eb44:	462b      	mov	r3, r5
 801eb46:	4622      	mov	r2, r4
 801eb48:	4601      	mov	r1, r0
 801eb4a:	69b8      	ldr	r0, [r7, #24]
 801eb4c:	f7fd f8c2 	bl	801bcd4 <tx_udp>
    res = true;
 801eb50:	2301      	movs	r3, #1
 801eb52:	77fb      	strb	r3, [r7, #31]
 801eb54:	e00e      	b.n	801eb74 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	68ba      	ldr	r2, [r7, #8]
 801eb64:	f7f9 f920 	bl	8017da8 <mg_iobuf_add>
 801eb68:	4603      	mov	r3, r0
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	bf14      	ite	ne
 801eb6e:	2301      	movne	r3, #1
 801eb70:	2300      	moveq	r3, #0
 801eb72:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 801eb74:	7ffb      	ldrb	r3, [r7, #31]
}
 801eb76:	4618      	mov	r0, r3
 801eb78:	3720      	adds	r7, #32
 801eb7a:	46bd      	mov	sp, r7
 801eb7c:	bdb0      	pop	{r4, r5, r7, pc}
 801eb7e:	bf00      	nop
 801eb80:	08026330 	.word	0x08026330

0801eb84 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 801eb84:	b580      	push	{r7, lr}
 801eb86:	b084      	sub	sp, #16
 801eb88:	af00      	add	r7, sp, #0
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	6039      	str	r1, [r7, #0]
 801eb8e:	71fb      	strb	r3, [r7, #7]
 801eb90:	4613      	mov	r3, r2
 801eb92:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 801eb94:	683b      	ldr	r3, [r7, #0]
 801eb96:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 801eb98:	79bb      	ldrb	r3, [r7, #6]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d00d      	beq.n	801ebba <mg_pfn_iobuf_private+0x36>
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	689b      	ldr	r3, [r3, #8]
 801eba2:	1c9a      	adds	r2, r3, #2
 801eba4:	68fb      	ldr	r3, [r7, #12]
 801eba6:	685b      	ldr	r3, [r3, #4]
 801eba8:	429a      	cmp	r2, r3
 801ebaa:	d906      	bls.n	801ebba <mg_pfn_iobuf_private+0x36>
 801ebac:	68fb      	ldr	r3, [r7, #12]
 801ebae:	689b      	ldr	r3, [r3, #8]
 801ebb0:	3302      	adds	r3, #2
 801ebb2:	4619      	mov	r1, r3
 801ebb4:	68f8      	ldr	r0, [r7, #12]
 801ebb6:	f7f9 f86b 	bl	8017c90 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	689b      	ldr	r3, [r3, #8]
 801ebbe:	1c9a      	adds	r2, r3, #2
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	685b      	ldr	r3, [r3, #4]
 801ebc4:	429a      	cmp	r2, r3
 801ebc6:	d811      	bhi.n	801ebec <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	681a      	ldr	r2, [r3, #0]
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	689b      	ldr	r3, [r3, #8]
 801ebd0:	1c58      	adds	r0, r3, #1
 801ebd2:	68f9      	ldr	r1, [r7, #12]
 801ebd4:	6088      	str	r0, [r1, #8]
 801ebd6:	4413      	add	r3, r2
 801ebd8:	79fa      	ldrb	r2, [r7, #7]
 801ebda:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 801ebdc:	68fb      	ldr	r3, [r7, #12]
 801ebde:	681a      	ldr	r2, [r3, #0]
 801ebe0:	68fb      	ldr	r3, [r7, #12]
 801ebe2:	689b      	ldr	r3, [r3, #8]
 801ebe4:	4413      	add	r3, r2
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 801ebea:	e00f      	b.n	801ec0c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 801ebec:	68fb      	ldr	r3, [r7, #12]
 801ebee:	689a      	ldr	r2, [r3, #8]
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	685b      	ldr	r3, [r3, #4]
 801ebf4:	429a      	cmp	r2, r3
 801ebf6:	d209      	bcs.n	801ec0c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	681a      	ldr	r2, [r3, #0]
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	689b      	ldr	r3, [r3, #8]
 801ec00:	1c58      	adds	r0, r3, #1
 801ec02:	68f9      	ldr	r1, [r7, #12]
 801ec04:	6088      	str	r0, [r1, #8]
 801ec06:	4413      	add	r3, r2
 801ec08:	2200      	movs	r2, #0
 801ec0a:	701a      	strb	r2, [r3, #0]
}
 801ec0c:	bf00      	nop
 801ec0e:	3710      	adds	r7, #16
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b082      	sub	sp, #8
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	4603      	mov	r3, r0
 801ec1c:	6039      	str	r1, [r7, #0]
 801ec1e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 801ec20:	79fb      	ldrb	r3, [r7, #7]
 801ec22:	2200      	movs	r2, #0
 801ec24:	6839      	ldr	r1, [r7, #0]
 801ec26:	4618      	mov	r0, r3
 801ec28:	f7ff ffac 	bl	801eb84 <mg_pfn_iobuf_private>
}
 801ec2c:	bf00      	nop
 801ec2e:	3708      	adds	r7, #8
 801ec30:	46bd      	mov	sp, r7
 801ec32:	bd80      	pop	{r7, pc}

0801ec34 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b082      	sub	sp, #8
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	6039      	str	r1, [r7, #0]
 801ec3e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 801ec40:	79fb      	ldrb	r3, [r7, #7]
 801ec42:	2201      	movs	r2, #1
 801ec44:	6839      	ldr	r1, [r7, #0]
 801ec46:	4618      	mov	r0, r3
 801ec48:	f7ff ff9c 	bl	801eb84 <mg_pfn_iobuf_private>
}
 801ec4c:	bf00      	nop
 801ec4e:	3708      	adds	r7, #8
 801ec50:	46bd      	mov	sp, r7
 801ec52:	bd80      	pop	{r7, pc}

0801ec54 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 801ec54:	b580      	push	{r7, lr}
 801ec56:	b08a      	sub	sp, #40	@ 0x28
 801ec58:	af00      	add	r7, sp, #0
 801ec5a:	60f8      	str	r0, [r7, #12]
 801ec5c:	60b9      	str	r1, [r7, #8]
 801ec5e:	607a      	str	r2, [r7, #4]
 801ec60:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	617b      	str	r3, [r7, #20]
 801ec66:	68bb      	ldr	r3, [r7, #8]
 801ec68:	61bb      	str	r3, [r7, #24]
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	61fb      	str	r3, [r7, #28]
 801ec6e:	2300      	movs	r3, #0
 801ec70:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 801ec72:	f107 0114 	add.w	r1, r7, #20
 801ec76:	683b      	ldr	r3, [r7, #0]
 801ec78:	687a      	ldr	r2, [r7, #4]
 801ec7a:	4809      	ldr	r0, [pc, #36]	@ (801eca0 <mg_vsnprintf+0x4c>)
 801ec7c:	f7f5 f946 	bl	8013f0c <mg_vxprintf>
 801ec80:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 801ec82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec84:	68bb      	ldr	r3, [r7, #8]
 801ec86:	429a      	cmp	r2, r3
 801ec88:	d204      	bcs.n	801ec94 <mg_vsnprintf+0x40>
 801ec8a:	68fa      	ldr	r2, [r7, #12]
 801ec8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec8e:	4413      	add	r3, r2
 801ec90:	2200      	movs	r2, #0
 801ec92:	701a      	strb	r2, [r3, #0]
  return n;
 801ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801ec96:	4618      	mov	r0, r3
 801ec98:	3728      	adds	r7, #40	@ 0x28
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	bd80      	pop	{r7, pc}
 801ec9e:	bf00      	nop
 801eca0:	0801ec15 	.word	0x0801ec15

0801eca4 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 801eca4:	b40c      	push	{r2, r3}
 801eca6:	b580      	push	{r7, lr}
 801eca8:	b084      	sub	sp, #16
 801ecaa:	af00      	add	r7, sp, #0
 801ecac:	6078      	str	r0, [r7, #4]
 801ecae:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 801ecb0:	f107 031c 	add.w	r3, r7, #28
 801ecb4:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 801ecb6:	f107 0308 	add.w	r3, r7, #8
 801ecba:	69ba      	ldr	r2, [r7, #24]
 801ecbc:	6839      	ldr	r1, [r7, #0]
 801ecbe:	6878      	ldr	r0, [r7, #4]
 801ecc0:	f7ff ffc8 	bl	801ec54 <mg_vsnprintf>
 801ecc4:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 801ecc6:	68fb      	ldr	r3, [r7, #12]
}
 801ecc8:	4618      	mov	r0, r3
 801ecca:	3710      	adds	r7, #16
 801eccc:	46bd      	mov	sp, r7
 801ecce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ecd2:	b002      	add	sp, #8
 801ecd4:	4770      	bx	lr
	...

0801ecd8 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 801ecd8:	b580      	push	{r7, lr}
 801ecda:	b086      	sub	sp, #24
 801ecdc:	af00      	add	r7, sp, #0
 801ecde:	6078      	str	r0, [r7, #4]
 801ece0:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 801ece2:	2300      	movs	r3, #0
 801ece4:	60bb      	str	r3, [r7, #8]
 801ece6:	2300      	movs	r3, #0
 801ece8:	60fb      	str	r3, [r7, #12]
 801ecea:	2300      	movs	r3, #0
 801ecec:	613b      	str	r3, [r7, #16]
 801ecee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801ecf2:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 801ecf4:	f107 0108 	add.w	r1, r7, #8
 801ecf8:	683b      	ldr	r3, [r7, #0]
 801ecfa:	687a      	ldr	r2, [r7, #4]
 801ecfc:	4803      	ldr	r0, [pc, #12]	@ (801ed0c <mg_vmprintf+0x34>)
 801ecfe:	f7f5 f905 	bl	8013f0c <mg_vxprintf>
  return (char *) io.buf;
 801ed02:	68bb      	ldr	r3, [r7, #8]
}
 801ed04:	4618      	mov	r0, r3
 801ed06:	3718      	adds	r7, #24
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	bd80      	pop	{r7, pc}
 801ed0c:	0801ec35 	.word	0x0801ec35

0801ed10 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 801ed10:	b40f      	push	{r0, r1, r2, r3}
 801ed12:	b580      	push	{r7, lr}
 801ed14:	b082      	sub	sp, #8
 801ed16:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 801ed18:	f107 0314 	add.w	r3, r7, #20
 801ed1c:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 801ed1e:	463b      	mov	r3, r7
 801ed20:	4619      	mov	r1, r3
 801ed22:	6938      	ldr	r0, [r7, #16]
 801ed24:	f7ff ffd8 	bl	801ecd8 <mg_vmprintf>
 801ed28:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 801ed2a:	687b      	ldr	r3, [r7, #4]
}
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	3708      	adds	r7, #8
 801ed30:	46bd      	mov	sp, r7
 801ed32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ed36:	b004      	add	sp, #16
 801ed38:	4770      	bx	lr

0801ed3a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 801ed3a:	b580      	push	{r7, lr}
 801ed3c:	b082      	sub	sp, #8
 801ed3e:	af00      	add	r7, sp, #0
 801ed40:	4603      	mov	r3, r0
 801ed42:	6039      	str	r1, [r7, #0]
 801ed44:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 801ed46:	79fb      	ldrb	r3, [r7, #7]
 801ed48:	4618      	mov	r0, r3
 801ed4a:	f002 f87b 	bl	8020e44 <putchar>
  (void) param;
}
 801ed4e:	bf00      	nop
 801ed50:	3708      	adds	r7, #8
 801ed52:	46bd      	mov	sp, r7
 801ed54:	bd80      	pop	{r7, pc}
	...

0801ed58 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 801ed58:	b580      	push	{r7, lr}
 801ed5a:	b088      	sub	sp, #32
 801ed5c:	af04      	add	r7, sp, #16
 801ed5e:	60f8      	str	r0, [r7, #12]
 801ed60:	60b9      	str	r1, [r7, #8]
 801ed62:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	781b      	ldrb	r3, [r3, #0]
 801ed68:	4618      	mov	r0, r3
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	3301      	adds	r3, #1
 801ed6e:	781b      	ldrb	r3, [r3, #0]
 801ed70:	461a      	mov	r2, r3
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	3302      	adds	r3, #2
 801ed76:	781b      	ldrb	r3, [r3, #0]
 801ed78:	4619      	mov	r1, r3
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	3303      	adds	r3, #3
 801ed7e:	781b      	ldrb	r3, [r3, #0]
 801ed80:	9302      	str	r3, [sp, #8]
 801ed82:	9101      	str	r1, [sp, #4]
 801ed84:	9200      	str	r2, [sp, #0]
 801ed86:	4603      	mov	r3, r0
 801ed88:	4a04      	ldr	r2, [pc, #16]	@ (801ed9c <print_ip4+0x44>)
 801ed8a:	68b9      	ldr	r1, [r7, #8]
 801ed8c:	68f8      	ldr	r0, [r7, #12]
 801ed8e:	f7f5 f8a2 	bl	8013ed6 <mg_xprintf>
 801ed92:	4603      	mov	r3, r0
}
 801ed94:	4618      	mov	r0, r3
 801ed96:	3710      	adds	r7, #16
 801ed98:	46bd      	mov	sp, r7
 801ed9a:	bd80      	pop	{r7, pc}
 801ed9c:	0802633c 	.word	0x0802633c

0801eda0 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 801eda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eda4:	b08e      	sub	sp, #56	@ 0x38
 801eda6:	af08      	add	r7, sp, #32
 801eda8:	6178      	str	r0, [r7, #20]
 801edaa:	6139      	str	r1, [r7, #16]
 801edac:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	881b      	ldrh	r3, [r3, #0]
 801edb2:	4618      	mov	r0, r3
 801edb4:	f001 f979 	bl	80200aa <mg_ntohs>
 801edb8:	4603      	mov	r3, r0
 801edba:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	3302      	adds	r3, #2
 801edc0:	881b      	ldrh	r3, [r3, #0]
 801edc2:	4618      	mov	r0, r3
 801edc4:	f001 f971 	bl	80200aa <mg_ntohs>
 801edc8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801edca:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 801edcc:	68fb      	ldr	r3, [r7, #12]
 801edce:	3304      	adds	r3, #4
 801edd0:	881b      	ldrh	r3, [r3, #0]
 801edd2:	4618      	mov	r0, r3
 801edd4:	f001 f969 	bl	80200aa <mg_ntohs>
 801edd8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801edda:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	3306      	adds	r3, #6
 801ede0:	881b      	ldrh	r3, [r3, #0]
 801ede2:	4618      	mov	r0, r3
 801ede4:	f001 f961 	bl	80200aa <mg_ntohs>
 801ede8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801edea:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	3308      	adds	r3, #8
 801edf0:	881b      	ldrh	r3, [r3, #0]
 801edf2:	4618      	mov	r0, r3
 801edf4:	f001 f959 	bl	80200aa <mg_ntohs>
 801edf8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801edfa:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	330a      	adds	r3, #10
 801ee00:	881b      	ldrh	r3, [r3, #0]
 801ee02:	4618      	mov	r0, r3
 801ee04:	f001 f951 	bl	80200aa <mg_ntohs>
 801ee08:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801ee0a:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801ee0c:	68fb      	ldr	r3, [r7, #12]
 801ee0e:	330c      	adds	r3, #12
 801ee10:	881b      	ldrh	r3, [r3, #0]
 801ee12:	4618      	mov	r0, r3
 801ee14:	f001 f949 	bl	80200aa <mg_ntohs>
 801ee18:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801ee1a:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	330e      	adds	r3, #14
 801ee20:	881b      	ldrh	r3, [r3, #0]
 801ee22:	4618      	mov	r0, r3
 801ee24:	f001 f941 	bl	80200aa <mg_ntohs>
 801ee28:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801ee2a:	9306      	str	r3, [sp, #24]
 801ee2c:	683a      	ldr	r2, [r7, #0]
 801ee2e:	9205      	str	r2, [sp, #20]
 801ee30:	687a      	ldr	r2, [r7, #4]
 801ee32:	9204      	str	r2, [sp, #16]
 801ee34:	68bb      	ldr	r3, [r7, #8]
 801ee36:	9303      	str	r3, [sp, #12]
 801ee38:	9602      	str	r6, [sp, #8]
 801ee3a:	9501      	str	r5, [sp, #4]
 801ee3c:	9400      	str	r4, [sp, #0]
 801ee3e:	4643      	mov	r3, r8
 801ee40:	4a05      	ldr	r2, [pc, #20]	@ (801ee58 <print_ip6+0xb8>)
 801ee42:	6939      	ldr	r1, [r7, #16]
 801ee44:	6978      	ldr	r0, [r7, #20]
 801ee46:	f7f5 f846 	bl	8013ed6 <mg_xprintf>
 801ee4a:	4603      	mov	r3, r0
}
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	3718      	adds	r7, #24
 801ee50:	46bd      	mov	sp, r7
 801ee52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee56:	bf00      	nop
 801ee58:	08026348 	.word	0x08026348

0801ee5c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 801ee5c:	b580      	push	{r7, lr}
 801ee5e:	b086      	sub	sp, #24
 801ee60:	af00      	add	r7, sp, #0
 801ee62:	60f8      	str	r0, [r7, #12]
 801ee64:	60b9      	str	r1, [r7, #8]
 801ee66:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	1d19      	adds	r1, r3, #4
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	6011      	str	r1, [r2, #0]
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 801ee76:	697a      	ldr	r2, [r7, #20]
 801ee78:	68b9      	ldr	r1, [r7, #8]
 801ee7a:	68f8      	ldr	r0, [r7, #12]
 801ee7c:	f7ff ff6c 	bl	801ed58 <print_ip4>
 801ee80:	4603      	mov	r3, r0
}
 801ee82:	4618      	mov	r0, r3
 801ee84:	3718      	adds	r7, #24
 801ee86:	46bd      	mov	sp, r7
 801ee88:	bd80      	pop	{r7, pc}

0801ee8a <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 801ee8a:	b580      	push	{r7, lr}
 801ee8c:	b086      	sub	sp, #24
 801ee8e:	af00      	add	r7, sp, #0
 801ee90:	60f8      	str	r0, [r7, #12]
 801ee92:	60b9      	str	r1, [r7, #8]
 801ee94:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	1d19      	adds	r1, r3, #4
 801ee9c:	687a      	ldr	r2, [r7, #4]
 801ee9e:	6011      	str	r1, [r2, #0]
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 801eea4:	697b      	ldr	r3, [r7, #20]
 801eea6:	7cdb      	ldrb	r3, [r3, #19]
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d007      	beq.n	801eebc <mg_print_ip+0x32>
 801eeac:	697b      	ldr	r3, [r7, #20]
 801eeae:	461a      	mov	r2, r3
 801eeb0:	68b9      	ldr	r1, [r7, #8]
 801eeb2:	68f8      	ldr	r0, [r7, #12]
 801eeb4:	f7ff ff74 	bl	801eda0 <print_ip6>
 801eeb8:	4603      	mov	r3, r0
 801eeba:	e006      	b.n	801eeca <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 801eebc:	697b      	ldr	r3, [r7, #20]
 801eebe:	461a      	mov	r2, r3
 801eec0:	68b9      	ldr	r1, [r7, #8]
 801eec2:	68f8      	ldr	r0, [r7, #12]
 801eec4:	f7ff ff48 	bl	801ed58 <print_ip4>
 801eec8:	4603      	mov	r3, r0
}
 801eeca:	4618      	mov	r0, r3
 801eecc:	3718      	adds	r7, #24
 801eece:	46bd      	mov	sp, r7
 801eed0:	bd80      	pop	{r7, pc}
	...

0801eed4 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 801eed4:	b580      	push	{r7, lr}
 801eed6:	b088      	sub	sp, #32
 801eed8:	af02      	add	r7, sp, #8
 801eeda:	60f8      	str	r0, [r7, #12]
 801eedc:	60b9      	str	r1, [r7, #8]
 801eede:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	1d19      	adds	r1, r3, #4
 801eee6:	687a      	ldr	r2, [r7, #4]
 801eee8:	6011      	str	r1, [r2, #0]
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 801eeee:	697b      	ldr	r3, [r7, #20]
 801eef0:	8a1b      	ldrh	r3, [r3, #16]
 801eef2:	4618      	mov	r0, r3
 801eef4:	f001 f8d9 	bl	80200aa <mg_ntohs>
 801eef8:	4603      	mov	r3, r0
 801eefa:	9301      	str	r3, [sp, #4]
 801eefc:	697b      	ldr	r3, [r7, #20]
 801eefe:	9300      	str	r3, [sp, #0]
 801ef00:	4b05      	ldr	r3, [pc, #20]	@ (801ef18 <mg_print_ip_port+0x44>)
 801ef02:	4a06      	ldr	r2, [pc, #24]	@ (801ef1c <mg_print_ip_port+0x48>)
 801ef04:	68b9      	ldr	r1, [r7, #8]
 801ef06:	68f8      	ldr	r0, [r7, #12]
 801ef08:	f7f4 ffe5 	bl	8013ed6 <mg_xprintf>
 801ef0c:	4603      	mov	r3, r0
}
 801ef0e:	4618      	mov	r0, r3
 801ef10:	3718      	adds	r7, #24
 801ef12:	46bd      	mov	sp, r7
 801ef14:	bd80      	pop	{r7, pc}
 801ef16:	bf00      	nop
 801ef18:	0801ee8b 	.word	0x0801ee8b
 801ef1c:	08026364 	.word	0x08026364

0801ef20 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 801ef20:	b5b0      	push	{r4, r5, r7, lr}
 801ef22:	b08c      	sub	sp, #48	@ 0x30
 801ef24:	af06      	add	r7, sp, #24
 801ef26:	60f8      	str	r0, [r7, #12]
 801ef28:	60b9      	str	r1, [r7, #8]
 801ef2a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	1d19      	adds	r1, r3, #4
 801ef32:	687a      	ldr	r2, [r7, #4]
 801ef34:	6011      	str	r1, [r2, #0]
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801ef3a:	697b      	ldr	r3, [r7, #20]
 801ef3c:	781b      	ldrb	r3, [r3, #0]
 801ef3e:	461d      	mov	r5, r3
 801ef40:	697b      	ldr	r3, [r7, #20]
 801ef42:	3301      	adds	r3, #1
 801ef44:	781b      	ldrb	r3, [r3, #0]
 801ef46:	461a      	mov	r2, r3
 801ef48:	697b      	ldr	r3, [r7, #20]
 801ef4a:	3302      	adds	r3, #2
 801ef4c:	781b      	ldrb	r3, [r3, #0]
 801ef4e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 801ef50:	697b      	ldr	r3, [r7, #20]
 801ef52:	3303      	adds	r3, #3
 801ef54:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801ef56:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 801ef58:	697b      	ldr	r3, [r7, #20]
 801ef5a:	3304      	adds	r3, #4
 801ef5c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801ef5e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 801ef60:	697b      	ldr	r3, [r7, #20]
 801ef62:	3305      	adds	r3, #5
 801ef64:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801ef66:	9304      	str	r3, [sp, #16]
 801ef68:	9403      	str	r4, [sp, #12]
 801ef6a:	9002      	str	r0, [sp, #8]
 801ef6c:	9101      	str	r1, [sp, #4]
 801ef6e:	9200      	str	r2, [sp, #0]
 801ef70:	462b      	mov	r3, r5
 801ef72:	4a05      	ldr	r2, [pc, #20]	@ (801ef88 <mg_print_mac+0x68>)
 801ef74:	68b9      	ldr	r1, [r7, #8]
 801ef76:	68f8      	ldr	r0, [r7, #12]
 801ef78:	f7f4 ffad 	bl	8013ed6 <mg_xprintf>
 801ef7c:	4603      	mov	r3, r0
}
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3718      	adds	r7, #24
 801ef82:	46bd      	mov	sp, r7
 801ef84:	bdb0      	pop	{r4, r5, r7, pc}
 801ef86:	bf00      	nop
 801ef88:	0802636c 	.word	0x0802636c

0801ef8c <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 801ef8c:	b580      	push	{r7, lr}
 801ef8e:	b088      	sub	sp, #32
 801ef90:	af00      	add	r7, sp, #0
 801ef92:	60f8      	str	r0, [r7, #12]
 801ef94:	60b9      	str	r1, [r7, #8]
 801ef96:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	1d19      	adds	r1, r3, #4
 801ef9e:	687a      	ldr	r2, [r7, #4]
 801efa0:	6011      	str	r1, [r2, #0]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	1d19      	adds	r1, r3, #4
 801efac:	687a      	ldr	r2, [r7, #4]
 801efae:	6011      	str	r1, [r2, #0]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 801efb4:	4b16      	ldr	r3, [pc, #88]	@ (801f010 <mg_print_hex+0x84>)
 801efb6:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 801efb8:	2300      	movs	r3, #0
 801efba:	61fb      	str	r3, [r7, #28]
 801efbc:	e01e      	b.n	801effc <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 801efbe:	697a      	ldr	r2, [r7, #20]
 801efc0:	69fb      	ldr	r3, [r7, #28]
 801efc2:	4413      	add	r3, r2
 801efc4:	781b      	ldrb	r3, [r3, #0]
 801efc6:	091b      	lsrs	r3, r3, #4
 801efc8:	b2db      	uxtb	r3, r3
 801efca:	f003 030f 	and.w	r3, r3, #15
 801efce:	693a      	ldr	r2, [r7, #16]
 801efd0:	4413      	add	r3, r2
 801efd2:	781a      	ldrb	r2, [r3, #0]
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	68b9      	ldr	r1, [r7, #8]
 801efd8:	4610      	mov	r0, r2
 801efda:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 801efdc:	697a      	ldr	r2, [r7, #20]
 801efde:	69fb      	ldr	r3, [r7, #28]
 801efe0:	4413      	add	r3, r2
 801efe2:	781b      	ldrb	r3, [r3, #0]
 801efe4:	f003 030f 	and.w	r3, r3, #15
 801efe8:	693a      	ldr	r2, [r7, #16]
 801efea:	4413      	add	r3, r2
 801efec:	781a      	ldrb	r2, [r3, #0]
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	68b9      	ldr	r1, [r7, #8]
 801eff2:	4610      	mov	r0, r2
 801eff4:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 801eff6:	69fb      	ldr	r3, [r7, #28]
 801eff8:	3301      	adds	r3, #1
 801effa:	61fb      	str	r3, [r7, #28]
 801effc:	69fa      	ldr	r2, [r7, #28]
 801effe:	69bb      	ldr	r3, [r7, #24]
 801f000:	429a      	cmp	r2, r3
 801f002:	d3dc      	bcc.n	801efbe <mg_print_hex+0x32>
  }
  return 2 * bl;
 801f004:	69bb      	ldr	r3, [r7, #24]
 801f006:	005b      	lsls	r3, r3, #1
}
 801f008:	4618      	mov	r0, r3
 801f00a:	3720      	adds	r7, #32
 801f00c:	46bd      	mov	sp, r7
 801f00e:	bd80      	pop	{r7, pc}
 801f010:	08024a04 	.word	0x08024a04

0801f014 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 801f014:	b580      	push	{r7, lr}
 801f016:	b084      	sub	sp, #16
 801f018:	af00      	add	r7, sp, #0
 801f01a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 801f01c:	2300      	movs	r3, #0
 801f01e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 801f020:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	681a      	ldr	r2, [r3, #0]
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	689b      	ldr	r3, [r3, #8]
 801f02c:	4413      	add	r3, r2
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	689a      	ldr	r2, [r3, #8]
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	4413      	add	r3, r2
 801f03a:	1d1a      	adds	r2, r3, #4
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	685b      	ldr	r3, [r3, #4]
 801f040:	429a      	cmp	r2, r3
 801f042:	d906      	bls.n	801f052 <mg_queue_read_len+0x3e>
 801f044:	4b05      	ldr	r3, [pc, #20]	@ (801f05c <mg_queue_read_len+0x48>)
 801f046:	4a06      	ldr	r2, [pc, #24]	@ (801f060 <mg_queue_read_len+0x4c>)
 801f048:	f641 11d2 	movw	r1, #6610	@ 0x19d2
 801f04c:	4805      	ldr	r0, [pc, #20]	@ (801f064 <mg_queue_read_len+0x50>)
 801f04e:	f001 fc3b 	bl	80208c8 <__assert_func>
  return n;
 801f052:	68fb      	ldr	r3, [r7, #12]
}
 801f054:	4618      	mov	r0, r3
 801f056:	3710      	adds	r7, #16
 801f058:	46bd      	mov	sp, r7
 801f05a:	bd80      	pop	{r7, pc}
 801f05c:	080263d0 	.word	0x080263d0
 801f060:	08026fe8 	.word	0x08026fe8
 801f064:	0802487c 	.word	0x0802487c

0801f068 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 801f068:	b580      	push	{r7, lr}
 801f06a:	b084      	sub	sp, #16
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
 801f070:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801f072:	2300      	movs	r3, #0
 801f074:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	689a      	ldr	r2, [r3, #8]
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	68db      	ldr	r3, [r3, #12]
 801f07e:	429a      	cmp	r2, r3
 801f080:	d013      	beq.n	801f0aa <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 801f082:	6878      	ldr	r0, [r7, #4]
 801f084:	f7ff ffc6 	bl	801f014 <mg_queue_read_len>
 801f088:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d10c      	bne.n	801f0aa <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	2200      	movs	r2, #0
 801f094:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	68da      	ldr	r2, [r3, #12]
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	689b      	ldr	r3, [r3, #8]
 801f09e:	429a      	cmp	r2, r3
 801f0a0:	d903      	bls.n	801f0aa <mg_queue_next+0x42>
 801f0a2:	6878      	ldr	r0, [r7, #4]
 801f0a4:	f7ff ffb6 	bl	801f014 <mg_queue_read_len>
 801f0a8:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 801f0aa:	683b      	ldr	r3, [r7, #0]
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d007      	beq.n	801f0c0 <mg_queue_next+0x58>
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	681a      	ldr	r2, [r3, #0]
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	689b      	ldr	r3, [r3, #8]
 801f0b8:	3304      	adds	r3, #4
 801f0ba:	441a      	add	r2, r3
 801f0bc:	683b      	ldr	r3, [r7, #0]
 801f0be:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	689a      	ldr	r2, [r3, #8]
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	441a      	add	r2, r3
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	685b      	ldr	r3, [r3, #4]
 801f0cc:	429a      	cmp	r2, r3
 801f0ce:	d906      	bls.n	801f0de <mg_queue_next+0x76>
 801f0d0:	4b05      	ldr	r3, [pc, #20]	@ (801f0e8 <mg_queue_next+0x80>)
 801f0d2:	4a06      	ldr	r2, [pc, #24]	@ (801f0ec <mg_queue_next+0x84>)
 801f0d4:	f641 11f3 	movw	r1, #6643	@ 0x19f3
 801f0d8:	4805      	ldr	r0, [pc, #20]	@ (801f0f0 <mg_queue_next+0x88>)
 801f0da:	f001 fbf5 	bl	80208c8 <__assert_func>
  return len;
 801f0de:	68fb      	ldr	r3, [r7, #12]
}
 801f0e0:	4618      	mov	r0, r3
 801f0e2:	3710      	adds	r7, #16
 801f0e4:	46bd      	mov	sp, r7
 801f0e6:	bd80      	pop	{r7, pc}
 801f0e8:	080263f4 	.word	0x080263f4
 801f0ec:	08026ffc 	.word	0x08026ffc
 801f0f0:	0802487c 	.word	0x0802487c

0801f0f4 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b082      	sub	sp, #8
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
 801f0fc:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	689a      	ldr	r2, [r3, #8]
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	4413      	add	r3, r2
 801f106:	1d1a      	adds	r2, r3, #4
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	689b      	ldr	r3, [r3, #8]
 801f110:	1d1a      	adds	r2, r3, #4
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	685b      	ldr	r3, [r3, #4]
 801f116:	429a      	cmp	r2, r3
 801f118:	d906      	bls.n	801f128 <mg_queue_del+0x34>
 801f11a:	4b05      	ldr	r3, [pc, #20]	@ (801f130 <mg_queue_del+0x3c>)
 801f11c:	4a05      	ldr	r2, [pc, #20]	@ (801f134 <mg_queue_del+0x40>)
 801f11e:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 801f122:	4805      	ldr	r0, [pc, #20]	@ (801f138 <mg_queue_del+0x44>)
 801f124:	f001 fbd0 	bl	80208c8 <__assert_func>
}
 801f128:	bf00      	nop
 801f12a:	3708      	adds	r7, #8
 801f12c:	46bd      	mov	sp, r7
 801f12e:	bd80      	pop	{r7, pc}
 801f130:	08026448 	.word	0x08026448
 801f134:	0802700c 	.word	0x0802700c
 801f138:	0802487c 	.word	0x0802487c

0801f13c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 801f13c:	b580      	push	{r7, lr}
 801f13e:	b084      	sub	sp, #16
 801f140:	af00      	add	r7, sp, #0
 801f142:	60f8      	str	r0, [r7, #12]
 801f144:	60b9      	str	r1, [r7, #8]
 801f146:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 801f148:	4b05      	ldr	r3, [pc, #20]	@ (801f160 <mg_http_serve_ssi+0x24>)
 801f14a:	2200      	movs	r2, #0
 801f14c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 801f150:	68f8      	ldr	r0, [r7, #12]
 801f152:	f7f6 fde7 	bl	8015d24 <mg_http_reply>
  (void) root, (void) fullpath;
}
 801f156:	bf00      	nop
 801f158:	3710      	adds	r7, #16
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}
 801f15e:	bf00      	nop
 801f160:	080265d0 	.word	0x080265d0

0801f164 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 801f164:	b580      	push	{r7, lr}
 801f166:	b084      	sub	sp, #16
 801f168:	af00      	add	r7, sp, #0
 801f16a:	6078      	str	r0, [r7, #4]
 801f16c:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 801f16e:	683b      	ldr	r3, [r7, #0]
 801f170:	60bb      	str	r3, [r7, #8]
 801f172:	683b      	ldr	r3, [r7, #0]
 801f174:	2b00      	cmp	r3, #0
 801f176:	d004      	beq.n	801f182 <mg_str_s+0x1e>
 801f178:	6838      	ldr	r0, [r7, #0]
 801f17a:	f7e1 f881 	bl	8000280 <strlen>
 801f17e:	4603      	mov	r3, r0
 801f180:	e000      	b.n	801f184 <mg_str_s+0x20>
 801f182:	2300      	movs	r3, #0
 801f184:	60fb      	str	r3, [r7, #12]
  return str;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	461a      	mov	r2, r3
 801f18a:	f107 0308 	add.w	r3, r7, #8
 801f18e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f192:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f196:	6878      	ldr	r0, [r7, #4]
 801f198:	3710      	adds	r7, #16
 801f19a:	46bd      	mov	sp, r7
 801f19c:	bd80      	pop	{r7, pc}

0801f19e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 801f19e:	b480      	push	{r7}
 801f1a0:	b087      	sub	sp, #28
 801f1a2:	af00      	add	r7, sp, #0
 801f1a4:	60f8      	str	r0, [r7, #12]
 801f1a6:	60b9      	str	r1, [r7, #8]
 801f1a8:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 801f1aa:	68bb      	ldr	r3, [r7, #8]
 801f1ac:	613b      	str	r3, [r7, #16]
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	617b      	str	r3, [r7, #20]
  return str;
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	461a      	mov	r2, r3
 801f1b6:	f107 0310 	add.w	r3, r7, #16
 801f1ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f1be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f1c2:	68f8      	ldr	r0, [r7, #12]
 801f1c4:	371c      	adds	r7, #28
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1cc:	4770      	bx	lr

0801f1ce <mg_tolc>:

static int mg_tolc(char c) {
 801f1ce:	b480      	push	{r7}
 801f1d0:	b083      	sub	sp, #12
 801f1d2:	af00      	add	r7, sp, #0
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 801f1d8:	79fb      	ldrb	r3, [r7, #7]
 801f1da:	2b40      	cmp	r3, #64	@ 0x40
 801f1dc:	d905      	bls.n	801f1ea <mg_tolc+0x1c>
 801f1de:	79fb      	ldrb	r3, [r7, #7]
 801f1e0:	2b5a      	cmp	r3, #90	@ 0x5a
 801f1e2:	d802      	bhi.n	801f1ea <mg_tolc+0x1c>
 801f1e4:	79fb      	ldrb	r3, [r7, #7]
 801f1e6:	3320      	adds	r3, #32
 801f1e8:	e000      	b.n	801f1ec <mg_tolc+0x1e>
 801f1ea:	79fb      	ldrb	r3, [r7, #7]
}
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	370c      	adds	r7, #12
 801f1f0:	46bd      	mov	sp, r7
 801f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1f6:	4770      	bx	lr

0801f1f8 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 801f1f8:	b490      	push	{r4, r7}
 801f1fa:	b088      	sub	sp, #32
 801f1fc:	af00      	add	r7, sp, #0
 801f1fe:	f107 0408 	add.w	r4, r7, #8
 801f202:	e884 0003 	stmia.w	r4, {r0, r1}
 801f206:	4639      	mov	r1, r7
 801f208:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 801f20c:	2300      	movs	r3, #0
 801f20e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801f210:	e019      	b.n	801f246 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 801f212:	68ba      	ldr	r2, [r7, #8]
 801f214:	69fb      	ldr	r3, [r7, #28]
 801f216:	4413      	add	r3, r2
 801f218:	781b      	ldrb	r3, [r3, #0]
 801f21a:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 801f21c:	683a      	ldr	r2, [r7, #0]
 801f21e:	69fb      	ldr	r3, [r7, #28]
 801f220:	4413      	add	r3, r2
 801f222:	781b      	ldrb	r3, [r3, #0]
 801f224:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 801f226:	69ba      	ldr	r2, [r7, #24]
 801f228:	697b      	ldr	r3, [r7, #20]
 801f22a:	429a      	cmp	r2, r3
 801f22c:	da02      	bge.n	801f234 <mg_strcmp+0x3c>
 801f22e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f232:	e01e      	b.n	801f272 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 801f234:	69ba      	ldr	r2, [r7, #24]
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	429a      	cmp	r2, r3
 801f23a:	dd01      	ble.n	801f240 <mg_strcmp+0x48>
 801f23c:	2301      	movs	r3, #1
 801f23e:	e018      	b.n	801f272 <mg_strcmp+0x7a>
    i++;
 801f240:	69fb      	ldr	r3, [r7, #28]
 801f242:	3301      	adds	r3, #1
 801f244:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	69fa      	ldr	r2, [r7, #28]
 801f24a:	429a      	cmp	r2, r3
 801f24c:	d203      	bcs.n	801f256 <mg_strcmp+0x5e>
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	69fa      	ldr	r2, [r7, #28]
 801f252:	429a      	cmp	r2, r3
 801f254:	d3dd      	bcc.n	801f212 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	69fa      	ldr	r2, [r7, #28]
 801f25a:	429a      	cmp	r2, r3
 801f25c:	d201      	bcs.n	801f262 <mg_strcmp+0x6a>
 801f25e:	2301      	movs	r3, #1
 801f260:	e007      	b.n	801f272 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	69fa      	ldr	r2, [r7, #28]
 801f266:	429a      	cmp	r2, r3
 801f268:	d202      	bcs.n	801f270 <mg_strcmp+0x78>
 801f26a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f26e:	e000      	b.n	801f272 <mg_strcmp+0x7a>
  return 0;
 801f270:	2300      	movs	r3, #0
}
 801f272:	4618      	mov	r0, r3
 801f274:	3720      	adds	r7, #32
 801f276:	46bd      	mov	sp, r7
 801f278:	bc90      	pop	{r4, r7}
 801f27a:	4770      	bx	lr

0801f27c <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 801f27c:	b590      	push	{r4, r7, lr}
 801f27e:	b089      	sub	sp, #36	@ 0x24
 801f280:	af00      	add	r7, sp, #0
 801f282:	f107 0408 	add.w	r4, r7, #8
 801f286:	e884 0003 	stmia.w	r4, {r0, r1}
 801f28a:	4639      	mov	r1, r7
 801f28c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 801f290:	2300      	movs	r3, #0
 801f292:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801f294:	e01f      	b.n	801f2d6 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 801f296:	68ba      	ldr	r2, [r7, #8]
 801f298:	69fb      	ldr	r3, [r7, #28]
 801f29a:	4413      	add	r3, r2
 801f29c:	781b      	ldrb	r3, [r3, #0]
 801f29e:	4618      	mov	r0, r3
 801f2a0:	f7ff ff95 	bl	801f1ce <mg_tolc>
 801f2a4:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 801f2a6:	683a      	ldr	r2, [r7, #0]
 801f2a8:	69fb      	ldr	r3, [r7, #28]
 801f2aa:	4413      	add	r3, r2
 801f2ac:	781b      	ldrb	r3, [r3, #0]
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	f7ff ff8d 	bl	801f1ce <mg_tolc>
 801f2b4:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 801f2b6:	69ba      	ldr	r2, [r7, #24]
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	429a      	cmp	r2, r3
 801f2bc:	da02      	bge.n	801f2c4 <mg_strcasecmp+0x48>
 801f2be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2c2:	e01e      	b.n	801f302 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 801f2c4:	69ba      	ldr	r2, [r7, #24]
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	429a      	cmp	r2, r3
 801f2ca:	dd01      	ble.n	801f2d0 <mg_strcasecmp+0x54>
 801f2cc:	2301      	movs	r3, #1
 801f2ce:	e018      	b.n	801f302 <mg_strcasecmp+0x86>
    i++;
 801f2d0:	69fb      	ldr	r3, [r7, #28]
 801f2d2:	3301      	adds	r3, #1
 801f2d4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	69fa      	ldr	r2, [r7, #28]
 801f2da:	429a      	cmp	r2, r3
 801f2dc:	d203      	bcs.n	801f2e6 <mg_strcasecmp+0x6a>
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	69fa      	ldr	r2, [r7, #28]
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	d3d7      	bcc.n	801f296 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	69fa      	ldr	r2, [r7, #28]
 801f2ea:	429a      	cmp	r2, r3
 801f2ec:	d201      	bcs.n	801f2f2 <mg_strcasecmp+0x76>
 801f2ee:	2301      	movs	r3, #1
 801f2f0:	e007      	b.n	801f302 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	69fa      	ldr	r2, [r7, #28]
 801f2f6:	429a      	cmp	r2, r3
 801f2f8:	d202      	bcs.n	801f300 <mg_strcasecmp+0x84>
 801f2fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2fe:	e000      	b.n	801f302 <mg_strcasecmp+0x86>
  return 0;
 801f300:	2300      	movs	r3, #0
}
 801f302:	4618      	mov	r0, r3
 801f304:	3724      	adds	r7, #36	@ 0x24
 801f306:	46bd      	mov	sp, r7
 801f308:	bd90      	pop	{r4, r7, pc}

0801f30a <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 801f30a:	b490      	push	{r4, r7}
 801f30c:	b088      	sub	sp, #32
 801f30e:	af00      	add	r7, sp, #0
 801f310:	f107 0408 	add.w	r4, r7, #8
 801f314:	e884 0003 	stmia.w	r4, {r0, r1}
 801f318:	4639      	mov	r1, r7
 801f31a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 801f31e:	2300      	movs	r3, #0
 801f320:	61fb      	str	r3, [r7, #28]
 801f322:	2300      	movs	r3, #0
 801f324:	61bb      	str	r3, [r7, #24]
 801f326:	2300      	movs	r3, #0
 801f328:	617b      	str	r3, [r7, #20]
 801f32a:	2300      	movs	r3, #0
 801f32c:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 801f32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f330:	2b00      	cmp	r3, #0
 801f332:	f000 80ba 	beq.w	801f4aa <mg_match+0x1a0>
 801f336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f338:	2200      	movs	r2, #0
 801f33a:	601a      	str	r2, [r3, #0]
 801f33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f33e:	2200      	movs	r2, #0
 801f340:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 801f342:	e0b2      	b.n	801f4aa <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	69fa      	ldr	r2, [r7, #28]
 801f348:	429a      	cmp	r2, r3
 801f34a:	d25b      	bcs.n	801f404 <mg_match+0xfa>
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	69ba      	ldr	r2, [r7, #24]
 801f350:	429a      	cmp	r2, r3
 801f352:	d257      	bcs.n	801f404 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 801f354:	683a      	ldr	r2, [r7, #0]
 801f356:	69fb      	ldr	r3, [r7, #28]
 801f358:	4413      	add	r3, r2
 801f35a:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 801f35c:	2b3f      	cmp	r3, #63	@ 0x3f
 801f35e:	d015      	beq.n	801f38c <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 801f360:	683a      	ldr	r2, [r7, #0]
 801f362:	69fb      	ldr	r3, [r7, #28]
 801f364:	4413      	add	r3, r2
 801f366:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 801f368:	2b2a      	cmp	r3, #42	@ 0x2a
 801f36a:	d04b      	beq.n	801f404 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 801f36c:	683a      	ldr	r2, [r7, #0]
 801f36e:	69fb      	ldr	r3, [r7, #28]
 801f370:	4413      	add	r3, r2
 801f372:	781b      	ldrb	r3, [r3, #0]
 801f374:	2b23      	cmp	r3, #35	@ 0x23
 801f376:	d045      	beq.n	801f404 <mg_match+0xfa>
 801f378:	68ba      	ldr	r2, [r7, #8]
 801f37a:	69bb      	ldr	r3, [r7, #24]
 801f37c:	4413      	add	r3, r2
 801f37e:	781a      	ldrb	r2, [r3, #0]
 801f380:	6839      	ldr	r1, [r7, #0]
 801f382:	69fb      	ldr	r3, [r7, #28]
 801f384:	440b      	add	r3, r1
 801f386:	781b      	ldrb	r3, [r3, #0]
 801f388:	429a      	cmp	r2, r3
 801f38a:	d13b      	bne.n	801f404 <mg_match+0xfa>
      if (caps == NULL) {
 801f38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d031      	beq.n	801f3f6 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 801f392:	683a      	ldr	r2, [r7, #0]
 801f394:	69fb      	ldr	r3, [r7, #28]
 801f396:	4413      	add	r3, r2
 801f398:	781b      	ldrb	r3, [r3, #0]
 801f39a:	2b3f      	cmp	r3, #63	@ 0x3f
 801f39c:	d111      	bne.n	801f3c2 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 801f39e:	68ba      	ldr	r2, [r7, #8]
 801f3a0:	69bb      	ldr	r3, [r7, #24]
 801f3a2:	441a      	add	r2, r3
 801f3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3a6:	601a      	str	r2, [r3, #0]
 801f3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3aa:	2201      	movs	r2, #1
 801f3ac:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 801f3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3b0:	3308      	adds	r3, #8
 801f3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	601a      	str	r2, [r3, #0]
 801f3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3bc:	2200      	movs	r2, #0
 801f3be:	605a      	str	r2, [r3, #4]
 801f3c0:	e019      	b.n	801f3f6 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 801f3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d015      	beq.n	801f3f6 <mg_match+0xec>
 801f3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3cc:	685b      	ldr	r3, [r3, #4]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d111      	bne.n	801f3f6 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 801f3d2:	68ba      	ldr	r2, [r7, #8]
 801f3d4:	69bb      	ldr	r3, [r7, #24]
 801f3d6:	441a      	add	r2, r3
 801f3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	1ad3      	subs	r3, r2, r3
 801f3de:	461a      	mov	r2, r3
 801f3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3e2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 801f3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3e6:	3308      	adds	r3, #8
 801f3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	605a      	str	r2, [r3, #4]
 801f3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3f2:	2200      	movs	r2, #0
 801f3f4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 801f3f6:	69fb      	ldr	r3, [r7, #28]
 801f3f8:	3301      	adds	r3, #1
 801f3fa:	61fb      	str	r3, [r7, #28]
 801f3fc:	69bb      	ldr	r3, [r7, #24]
 801f3fe:	3301      	adds	r3, #1
 801f400:	61bb      	str	r3, [r7, #24]
 801f402:	e052      	b.n	801f4aa <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	69fa      	ldr	r2, [r7, #28]
 801f408:	429a      	cmp	r2, r3
 801f40a:	d222      	bcs.n	801f452 <mg_match+0x148>
 801f40c:	683a      	ldr	r2, [r7, #0]
 801f40e:	69fb      	ldr	r3, [r7, #28]
 801f410:	4413      	add	r3, r2
 801f412:	781b      	ldrb	r3, [r3, #0]
 801f414:	2b2a      	cmp	r3, #42	@ 0x2a
 801f416:	d005      	beq.n	801f424 <mg_match+0x11a>
 801f418:	683a      	ldr	r2, [r7, #0]
 801f41a:	69fb      	ldr	r3, [r7, #28]
 801f41c:	4413      	add	r3, r2
 801f41e:	781b      	ldrb	r3, [r3, #0]
 801f420:	2b23      	cmp	r3, #35	@ 0x23
 801f422:	d116      	bne.n	801f452 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 801f424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f426:	2b00      	cmp	r3, #0
 801f428:	d00b      	beq.n	801f442 <mg_match+0x138>
 801f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d107      	bne.n	801f442 <mg_match+0x138>
 801f432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f434:	2200      	movs	r2, #0
 801f436:	605a      	str	r2, [r3, #4]
 801f438:	68ba      	ldr	r2, [r7, #8]
 801f43a:	69bb      	ldr	r3, [r7, #24]
 801f43c:	441a      	add	r2, r3
 801f43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f440:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 801f442:	69fb      	ldr	r3, [r7, #28]
 801f444:	1c5a      	adds	r2, r3, #1
 801f446:	61fa      	str	r2, [r7, #28]
 801f448:	617b      	str	r3, [r7, #20]
 801f44a:	69bb      	ldr	r3, [r7, #24]
 801f44c:	3301      	adds	r3, #1
 801f44e:	613b      	str	r3, [r7, #16]
 801f450:	e02b      	b.n	801f4aa <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 801f452:	693b      	ldr	r3, [r7, #16]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d025      	beq.n	801f4a4 <mg_match+0x19a>
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	693a      	ldr	r2, [r7, #16]
 801f45c:	429a      	cmp	r2, r3
 801f45e:	d821      	bhi.n	801f4a4 <mg_match+0x19a>
 801f460:	683a      	ldr	r2, [r7, #0]
 801f462:	697b      	ldr	r3, [r7, #20]
 801f464:	4413      	add	r3, r2
 801f466:	781b      	ldrb	r3, [r3, #0]
 801f468:	2b23      	cmp	r3, #35	@ 0x23
 801f46a:	d005      	beq.n	801f478 <mg_match+0x16e>
 801f46c:	68ba      	ldr	r2, [r7, #8]
 801f46e:	69bb      	ldr	r3, [r7, #24]
 801f470:	4413      	add	r3, r2
 801f472:	781b      	ldrb	r3, [r3, #0]
 801f474:	2b2f      	cmp	r3, #47	@ 0x2f
 801f476:	d015      	beq.n	801f4a4 <mg_match+0x19a>
      i = ni, j = nj;
 801f478:	697b      	ldr	r3, [r7, #20]
 801f47a:	61fb      	str	r3, [r7, #28]
 801f47c:	693b      	ldr	r3, [r7, #16]
 801f47e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 801f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f482:	2b00      	cmp	r3, #0
 801f484:	d010      	beq.n	801f4a8 <mg_match+0x19e>
 801f486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d10c      	bne.n	801f4a8 <mg_match+0x19e>
 801f48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f490:	685b      	ldr	r3, [r3, #4]
 801f492:	2b00      	cmp	r3, #0
 801f494:	d108      	bne.n	801f4a8 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 801f496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f498:	3b08      	subs	r3, #8
 801f49a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f49e:	2200      	movs	r2, #0
 801f4a0:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 801f4a2:	e001      	b.n	801f4a8 <mg_match+0x19e>
      }
    } else {
      return false;
 801f4a4:	2300      	movs	r3, #0
 801f4a6:	e01f      	b.n	801f4e8 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 801f4a8:	bf00      	nop
  while (i < p.len || j < s.len) {
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	69fa      	ldr	r2, [r7, #28]
 801f4ae:	429a      	cmp	r2, r3
 801f4b0:	f4ff af48 	bcc.w	801f344 <mg_match+0x3a>
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	69ba      	ldr	r2, [r7, #24]
 801f4b8:	429a      	cmp	r2, r3
 801f4ba:	f4ff af43 	bcc.w	801f344 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 801f4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d010      	beq.n	801f4e6 <mg_match+0x1dc>
 801f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d00c      	beq.n	801f4e6 <mg_match+0x1dc>
 801f4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4ce:	685b      	ldr	r3, [r3, #4]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d108      	bne.n	801f4e6 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 801f4d4:	68ba      	ldr	r2, [r7, #8]
 801f4d6:	69bb      	ldr	r3, [r7, #24]
 801f4d8:	441a      	add	r2, r3
 801f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	1ad3      	subs	r3, r2, r3
 801f4e0:	461a      	mov	r2, r3
 801f4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4e4:	605a      	str	r2, [r3, #4]
  }
  return true;
 801f4e6:	2301      	movs	r3, #1
}
 801f4e8:	4618      	mov	r0, r3
 801f4ea:	3720      	adds	r7, #32
 801f4ec:	46bd      	mov	sp, r7
 801f4ee:	bc90      	pop	{r4, r7}
 801f4f0:	4770      	bx	lr

0801f4f2 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 801f4f2:	b590      	push	{r4, r7, lr}
 801f4f4:	b089      	sub	sp, #36	@ 0x24
 801f4f6:	af00      	add	r7, sp, #0
 801f4f8:	f107 0410 	add.w	r4, r7, #16
 801f4fc:	e884 0003 	stmia.w	r4, {r0, r1}
 801f500:	60fa      	str	r2, [r7, #12]
 801f502:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 801f504:	697b      	ldr	r3, [r7, #20]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d002      	beq.n	801f510 <mg_span+0x1e>
 801f50a:	693b      	ldr	r3, [r7, #16]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d101      	bne.n	801f514 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 801f510:	2300      	movs	r3, #0
 801f512:	e047      	b.n	801f5a4 <mg_span+0xb2>
  } else {
    size_t len = 0;
 801f514:	2300      	movs	r3, #0
 801f516:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 801f518:	e002      	b.n	801f520 <mg_span+0x2e>
 801f51a:	69fb      	ldr	r3, [r7, #28]
 801f51c:	3301      	adds	r3, #1
 801f51e:	61fb      	str	r3, [r7, #28]
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	69fa      	ldr	r2, [r7, #28]
 801f524:	429a      	cmp	r2, r3
 801f526:	d207      	bcs.n	801f538 <mg_span+0x46>
 801f528:	693a      	ldr	r2, [r7, #16]
 801f52a:	69fb      	ldr	r3, [r7, #28]
 801f52c:	4413      	add	r3, r2
 801f52e:	781b      	ldrb	r3, [r3, #0]
 801f530:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801f534:	429a      	cmp	r2, r3
 801f536:	d1f0      	bne.n	801f51a <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d00c      	beq.n	801f558 <mg_span+0x66>
 801f53e:	6939      	ldr	r1, [r7, #16]
 801f540:	68fc      	ldr	r4, [r7, #12]
 801f542:	463b      	mov	r3, r7
 801f544:	69fa      	ldr	r2, [r7, #28]
 801f546:	4618      	mov	r0, r3
 801f548:	f7ff fe29 	bl	801f19e <mg_str_n>
 801f54c:	4622      	mov	r2, r4
 801f54e:	463b      	mov	r3, r7
 801f550:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f554:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 801f558:	68bb      	ldr	r3, [r7, #8]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d010      	beq.n	801f580 <mg_span+0x8e>
 801f55e:	693a      	ldr	r2, [r7, #16]
 801f560:	69fb      	ldr	r3, [r7, #28]
 801f562:	18d1      	adds	r1, r2, r3
 801f564:	697a      	ldr	r2, [r7, #20]
 801f566:	69fb      	ldr	r3, [r7, #28]
 801f568:	1ad2      	subs	r2, r2, r3
 801f56a:	68bc      	ldr	r4, [r7, #8]
 801f56c:	463b      	mov	r3, r7
 801f56e:	4618      	mov	r0, r3
 801f570:	f7ff fe15 	bl	801f19e <mg_str_n>
 801f574:	4622      	mov	r2, r4
 801f576:	463b      	mov	r3, r7
 801f578:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f57c:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 801f580:	68bb      	ldr	r3, [r7, #8]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d00d      	beq.n	801f5a2 <mg_span+0xb0>
 801f586:	697b      	ldr	r3, [r7, #20]
 801f588:	69fa      	ldr	r2, [r7, #28]
 801f58a:	429a      	cmp	r2, r3
 801f58c:	d209      	bcs.n	801f5a2 <mg_span+0xb0>
 801f58e:	68bb      	ldr	r3, [r7, #8]
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	1c5a      	adds	r2, r3, #1
 801f594:	68bb      	ldr	r3, [r7, #8]
 801f596:	601a      	str	r2, [r3, #0]
 801f598:	68bb      	ldr	r3, [r7, #8]
 801f59a:	685b      	ldr	r3, [r3, #4]
 801f59c:	1e5a      	subs	r2, r3, #1
 801f59e:	68bb      	ldr	r3, [r7, #8]
 801f5a0:	605a      	str	r2, [r3, #4]
    return true;
 801f5a2:	2301      	movs	r3, #1
  }
}
 801f5a4:	4618      	mov	r0, r3
 801f5a6:	3724      	adds	r7, #36	@ 0x24
 801f5a8:	46bd      	mov	sp, r7
 801f5aa:	bd90      	pop	{r4, r7, pc}

0801f5ac <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 801f5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b0:	b0a5      	sub	sp, #148	@ 0x94
 801f5b2:	af00      	add	r7, sp, #0
 801f5b4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 801f5b8:	e884 0003 	stmia.w	r4, {r0, r1}
 801f5bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801f5be:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801f5c6:	2300      	movs	r3, #0
 801f5c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 801f5cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f5d0:	2b01      	cmp	r3, #1
 801f5d2:	d016      	beq.n	801f602 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 801f5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f5d8:	2b02      	cmp	r3, #2
 801f5da:	d00d      	beq.n	801f5f8 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 801f5dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f5e0:	2b04      	cmp	r3, #4
 801f5e2:	d104      	bne.n	801f5ee <mg_str_to_num+0x42>
 801f5e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f5e8:	f04f 0300 	mov.w	r3, #0
 801f5ec:	e00d      	b.n	801f60a <mg_str_to_num+0x5e>
 801f5ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f5f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5f6:	e008      	b.n	801f60a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 801f5f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f5fc:	f04f 0300 	mov.w	r3, #0
 801f600:	e003      	b.n	801f60a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 801f602:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 801f606:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 801f60a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 801f60e:	f04f 0200 	mov.w	r2, #0
 801f612:	f04f 0300 	mov.w	r3, #0
 801f616:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 801f61a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 801f61e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f622:	bf08      	it	eq
 801f624:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 801f628:	d105      	bne.n	801f636 <mg_str_to_num+0x8a>
 801f62a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f62e:	2b08      	cmp	r3, #8
 801f630:	d001      	beq.n	801f636 <mg_str_to_num+0x8a>
 801f632:	2300      	movs	r3, #0
 801f634:	e1e8      	b.n	801fa08 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 801f636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d12d      	bne.n	801f698 <mg_str_to_num+0xec>
 801f63c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f63e:	2b01      	cmp	r3, #1
 801f640:	d92a      	bls.n	801f698 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 801f642:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f648:	4413      	add	r3, r2
 801f64a:	781b      	ldrb	r3, [r3, #0]
 801f64c:	2b30      	cmp	r3, #48	@ 0x30
 801f64e:	d121      	bne.n	801f694 <mg_str_to_num+0xe8>
      i++;
 801f650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f654:	3301      	adds	r3, #1
 801f656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 801f65a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f660:	4413      	add	r3, r2
 801f662:	781b      	ldrb	r3, [r3, #0]
 801f664:	2b62      	cmp	r3, #98	@ 0x62
 801f666:	d00a      	beq.n	801f67e <mg_str_to_num+0xd2>
 801f668:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f66a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f66e:	4413      	add	r3, r2
 801f670:	781b      	ldrb	r3, [r3, #0]
 801f672:	2b78      	cmp	r3, #120	@ 0x78
 801f674:	d101      	bne.n	801f67a <mg_str_to_num+0xce>
 801f676:	2310      	movs	r3, #16
 801f678:	e002      	b.n	801f680 <mg_str_to_num+0xd4>
 801f67a:	230a      	movs	r3, #10
 801f67c:	e000      	b.n	801f680 <mg_str_to_num+0xd4>
 801f67e:	2302      	movs	r3, #2
 801f680:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 801f682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f684:	2b0a      	cmp	r3, #10
 801f686:	d007      	beq.n	801f698 <mg_str_to_num+0xec>
 801f688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f68c:	3301      	adds	r3, #1
 801f68e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801f692:	e001      	b.n	801f698 <mg_str_to_num+0xec>
    } else {
      base = 10;
 801f694:	230a      	movs	r3, #10
 801f696:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 801f698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f69a:	2b10      	cmp	r3, #16
 801f69c:	f000 8178 	beq.w	801f990 <mg_str_to_num+0x3e4>
 801f6a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f6a2:	2b10      	cmp	r3, #16
 801f6a4:	f300 817d 	bgt.w	801f9a2 <mg_str_to_num+0x3f6>
 801f6a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f6aa:	2b02      	cmp	r3, #2
 801f6ac:	d052      	beq.n	801f754 <mg_str_to_num+0x1a8>
 801f6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f6b0:	2b0a      	cmp	r3, #10
 801f6b2:	f000 80cd 	beq.w	801f850 <mg_str_to_num+0x2a4>
 801f6b6:	e174      	b.n	801f9a2 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 801f6b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f6be:	4413      	add	r3, r2
 801f6c0:	781b      	ldrb	r3, [r3, #0]
 801f6c2:	3b30      	subs	r3, #48	@ 0x30
 801f6c4:	17da      	asrs	r2, r3, #31
 801f6c6:	633b      	str	r3, [r7, #48]	@ 0x30
 801f6c8:	637a      	str	r2, [r7, #52]	@ 0x34
 801f6ca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801f6ce:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 801f6d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f6d6:	f04f 0200 	mov.w	r2, #0
 801f6da:	f04f 0300 	mov.w	r3, #0
 801f6de:	0842      	lsrs	r2, r0, #1
 801f6e0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801f6e4:	084b      	lsrs	r3, r1, #1
 801f6e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f6ea:	4282      	cmp	r2, r0
 801f6ec:	418b      	sbcs	r3, r1
 801f6ee:	d201      	bcs.n	801f6f4 <mg_str_to_num+0x148>
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	e189      	b.n	801fa08 <mg_str_to_num+0x45c>
        result *= 2;
 801f6f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801f6f8:	1891      	adds	r1, r2, r2
 801f6fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f6fc:	415b      	adcs	r3, r3
 801f6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f700:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801f704:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801f708:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f70c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801f710:	1a85      	subs	r5, r0, r2
 801f712:	eb61 0603 	sbc.w	r6, r1, r3
 801f716:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801f71a:	4295      	cmp	r5, r2
 801f71c:	eb76 0303 	sbcs.w	r3, r6, r3
 801f720:	d201      	bcs.n	801f726 <mg_str_to_num+0x17a>
 801f722:	2300      	movs	r3, #0
 801f724:	e170      	b.n	801fa08 <mg_str_to_num+0x45c>
        result += digit;
 801f726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f72a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801f72e:	1884      	adds	r4, r0, r2
 801f730:	623c      	str	r4, [r7, #32]
 801f732:	eb41 0303 	adc.w	r3, r1, r3
 801f736:	627b      	str	r3, [r7, #36]	@ 0x24
 801f738:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801f73c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801f740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f744:	3301      	adds	r3, #1
 801f746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801f74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f74e:	3301      	adds	r3, #1
 801f750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 801f754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f756:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801f75a:	429a      	cmp	r2, r3
 801f75c:	f080 8123 	bcs.w	801f9a6 <mg_str_to_num+0x3fa>
 801f760:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f766:	4413      	add	r3, r2
 801f768:	781b      	ldrb	r3, [r3, #0]
 801f76a:	2b30      	cmp	r3, #48	@ 0x30
 801f76c:	d0a4      	beq.n	801f6b8 <mg_str_to_num+0x10c>
 801f76e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f774:	4413      	add	r3, r2
 801f776:	781b      	ldrb	r3, [r3, #0]
 801f778:	2b31      	cmp	r3, #49	@ 0x31
 801f77a:	d09d      	beq.n	801f6b8 <mg_str_to_num+0x10c>
      }
      break;
 801f77c:	e113      	b.n	801f9a6 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 801f77e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f784:	4413      	add	r3, r2
 801f786:	781b      	ldrb	r3, [r3, #0]
 801f788:	3b30      	subs	r3, #48	@ 0x30
 801f78a:	17da      	asrs	r2, r3, #31
 801f78c:	61bb      	str	r3, [r7, #24]
 801f78e:	61fa      	str	r2, [r7, #28]
 801f790:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801f794:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 801f798:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f79c:	f04f 020a 	mov.w	r2, #10
 801f7a0:	f04f 0300 	mov.w	r3, #0
 801f7a4:	f7e1 fa1c 	bl	8000be0 <__aeabi_uldivmod>
 801f7a8:	4602      	mov	r2, r0
 801f7aa:	460b      	mov	r3, r1
 801f7ac:	4610      	mov	r0, r2
 801f7ae:	4619      	mov	r1, r3
 801f7b0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801f7b4:	4290      	cmp	r0, r2
 801f7b6:	eb71 0303 	sbcs.w	r3, r1, r3
 801f7ba:	d201      	bcs.n	801f7c0 <mg_str_to_num+0x214>
 801f7bc:	2300      	movs	r3, #0
 801f7be:	e123      	b.n	801fa08 <mg_str_to_num+0x45c>
        result *= 10;
 801f7c0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801f7c4:	4622      	mov	r2, r4
 801f7c6:	462b      	mov	r3, r5
 801f7c8:	f04f 0000 	mov.w	r0, #0
 801f7cc:	f04f 0100 	mov.w	r1, #0
 801f7d0:	0099      	lsls	r1, r3, #2
 801f7d2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801f7d6:	0090      	lsls	r0, r2, #2
 801f7d8:	4602      	mov	r2, r0
 801f7da:	460b      	mov	r3, r1
 801f7dc:	eb12 0804 	adds.w	r8, r2, r4
 801f7e0:	eb43 0905 	adc.w	r9, r3, r5
 801f7e4:	eb18 0308 	adds.w	r3, r8, r8
 801f7e8:	613b      	str	r3, [r7, #16]
 801f7ea:	eb49 0309 	adc.w	r3, r9, r9
 801f7ee:	617b      	str	r3, [r7, #20]
 801f7f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801f7f4:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801f7f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f7fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801f800:	1a84      	subs	r4, r0, r2
 801f802:	63bc      	str	r4, [r7, #56]	@ 0x38
 801f804:	eb61 0303 	sbc.w	r3, r1, r3
 801f808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f80a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801f80e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801f812:	4621      	mov	r1, r4
 801f814:	4291      	cmp	r1, r2
 801f816:	4629      	mov	r1, r5
 801f818:	eb71 0303 	sbcs.w	r3, r1, r3
 801f81c:	d201      	bcs.n	801f822 <mg_str_to_num+0x276>
 801f81e:	2300      	movs	r3, #0
 801f820:	e0f2      	b.n	801fa08 <mg_str_to_num+0x45c>
        result += digit;
 801f822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f826:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801f82a:	1884      	adds	r4, r0, r2
 801f82c:	60bc      	str	r4, [r7, #8]
 801f82e:	eb41 0303 	adc.w	r3, r1, r3
 801f832:	60fb      	str	r3, [r7, #12]
 801f834:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801f838:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801f83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f840:	3301      	adds	r3, #1
 801f842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801f846:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f84a:	3301      	adds	r3, #1
 801f84c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 801f850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f852:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801f856:	429a      	cmp	r2, r3
 801f858:	f080 80a7 	bcs.w	801f9aa <mg_str_to_num+0x3fe>
 801f85c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f862:	4413      	add	r3, r2
 801f864:	781b      	ldrb	r3, [r3, #0]
 801f866:	2b2f      	cmp	r3, #47	@ 0x2f
 801f868:	f240 809f 	bls.w	801f9aa <mg_str_to_num+0x3fe>
 801f86c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f872:	4413      	add	r3, r2
 801f874:	781b      	ldrb	r3, [r3, #0]
 801f876:	2b39      	cmp	r3, #57	@ 0x39
 801f878:	d981      	bls.n	801f77e <mg_str_to_num+0x1d2>
      }
      break;
 801f87a:	e096      	b.n	801f9aa <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 801f87c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f882:	4413      	add	r3, r2
 801f884:	781b      	ldrb	r3, [r3, #0]
 801f886:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801f88a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f88e:	2b2f      	cmp	r3, #47	@ 0x2f
 801f890:	d90a      	bls.n	801f8a8 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 801f892:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f896:	2b39      	cmp	r3, #57	@ 0x39
 801f898:	d806      	bhi.n	801f8a8 <mg_str_to_num+0x2fc>
 801f89a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f89e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801f8a0:	17da      	asrs	r2, r3, #31
 801f8a2:	643b      	str	r3, [r7, #64]	@ 0x40
 801f8a4:	647a      	str	r2, [r7, #68]	@ 0x44
 801f8a6:	e023      	b.n	801f8f0 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801f8a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8ac:	2b40      	cmp	r3, #64	@ 0x40
 801f8ae:	d90a      	bls.n	801f8c6 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801f8b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8b4:	2b46      	cmp	r3, #70	@ 0x46
 801f8b6:	d806      	bhi.n	801f8c6 <mg_str_to_num+0x31a>
 801f8b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8bc:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801f8be:	17da      	asrs	r2, r3, #31
 801f8c0:	643b      	str	r3, [r7, #64]	@ 0x40
 801f8c2:	647a      	str	r2, [r7, #68]	@ 0x44
 801f8c4:	e014      	b.n	801f8f0 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 801f8c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8ca:	2b60      	cmp	r3, #96	@ 0x60
 801f8cc:	d90a      	bls.n	801f8e4 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801f8ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8d2:	2b66      	cmp	r3, #102	@ 0x66
 801f8d4:	d806      	bhi.n	801f8e4 <mg_str_to_num+0x338>
 801f8d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801f8da:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 801f8dc:	17da      	asrs	r2, r3, #31
 801f8de:	643b      	str	r3, [r7, #64]	@ 0x40
 801f8e0:	647a      	str	r2, [r7, #68]	@ 0x44
 801f8e2:	e005      	b.n	801f8f0 <mg_str_to_num+0x344>
 801f8e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f8ec:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 801f8f0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 801f8f4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 801f8f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801f8fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f900:	bf08      	it	eq
 801f902:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 801f906:	d04a      	beq.n	801f99e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 801f908:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f90c:	f04f 0200 	mov.w	r2, #0
 801f910:	f04f 0300 	mov.w	r3, #0
 801f914:	0902      	lsrs	r2, r0, #4
 801f916:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801f91a:	090b      	lsrs	r3, r1, #4
 801f91c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f920:	4282      	cmp	r2, r0
 801f922:	418b      	sbcs	r3, r1
 801f924:	d201      	bcs.n	801f92a <mg_str_to_num+0x37e>
 801f926:	2300      	movs	r3, #0
 801f928:	e06e      	b.n	801fa08 <mg_str_to_num+0x45c>
        result *= 16;
 801f92a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f92e:	f04f 0200 	mov.w	r2, #0
 801f932:	f04f 0300 	mov.w	r3, #0
 801f936:	010b      	lsls	r3, r1, #4
 801f938:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 801f93c:	0102      	lsls	r2, r0, #4
 801f93e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801f942:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801f946:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801f94a:	ebb0 0a02 	subs.w	sl, r0, r2
 801f94e:	eb61 0b03 	sbc.w	fp, r1, r3
 801f952:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801f956:	4592      	cmp	sl, r2
 801f958:	eb7b 0303 	sbcs.w	r3, fp, r3
 801f95c:	d201      	bcs.n	801f962 <mg_str_to_num+0x3b6>
 801f95e:	2300      	movs	r3, #0
 801f960:	e052      	b.n	801fa08 <mg_str_to_num+0x45c>
        result += digit;
 801f962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801f966:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801f96a:	1884      	adds	r4, r0, r2
 801f96c:	603c      	str	r4, [r7, #0]
 801f96e:	eb41 0303 	adc.w	r3, r1, r3
 801f972:	607b      	str	r3, [r7, #4]
 801f974:	e9d7 3400 	ldrd	r3, r4, [r7]
 801f978:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801f97c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f980:	3301      	adds	r3, #1
 801f982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801f986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f98a:	3301      	adds	r3, #1
 801f98c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 801f990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f992:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801f996:	429a      	cmp	r2, r3
 801f998:	f4ff af70 	bcc.w	801f87c <mg_str_to_num+0x2d0>
      }
      break;
 801f99c:	e006      	b.n	801f9ac <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 801f99e:	bf00      	nop
      break;
 801f9a0:	e004      	b.n	801f9ac <mg_str_to_num+0x400>
    default:
      return false;
 801f9a2:	2300      	movs	r3, #0
 801f9a4:	e030      	b.n	801fa08 <mg_str_to_num+0x45c>
      break;
 801f9a6:	bf00      	nop
 801f9a8:	e000      	b.n	801f9ac <mg_str_to_num+0x400>
      break;
 801f9aa:	bf00      	nop
  }
  if (ndigits == 0) return false;
 801f9ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d101      	bne.n	801f9b8 <mg_str_to_num+0x40c>
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	e027      	b.n	801fa08 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 801f9b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f9ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801f9be:	429a      	cmp	r2, r3
 801f9c0:	d001      	beq.n	801f9c6 <mg_str_to_num+0x41a>
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	e020      	b.n	801fa08 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 801f9c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f9ca:	2b01      	cmp	r3, #1
 801f9cc:	d104      	bne.n	801f9d8 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 801f9ce:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 801f9d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f9d4:	701a      	strb	r2, [r3, #0]
 801f9d6:	e016      	b.n	801fa06 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 801f9d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f9dc:	2b02      	cmp	r3, #2
 801f9de:	d104      	bne.n	801f9ea <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 801f9e0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 801f9e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f9e6:	801a      	strh	r2, [r3, #0]
 801f9e8:	e00d      	b.n	801fa06 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 801f9ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801f9ee:	2b04      	cmp	r3, #4
 801f9f0:	d104      	bne.n	801f9fc <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 801f9f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801f9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f9f8:	601a      	str	r2, [r3, #0]
 801f9fa:	e004      	b.n	801fa06 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 801f9fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801f9fe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801fa02:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 801fa06:	2301      	movs	r3, #1
}
 801fa08:	4618      	mov	r0, r3
 801fa0a:	3794      	adds	r7, #148	@ 0x94
 801fa0c:	46bd      	mov	sp, r7
 801fa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa12 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 801fa12:	b480      	push	{r7}
 801fa14:	b085      	sub	sp, #20
 801fa16:	af00      	add	r7, sp, #0
 801fa18:	60f8      	str	r0, [r7, #12]
 801fa1a:	60b9      	str	r1, [r7, #8]
 801fa1c:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 801fa20:	68bb      	ldr	r3, [r7, #8]
 801fa22:	2200      	movs	r2, #0
 801fa24:	601a      	str	r2, [r3, #0]
 801fa26:	68b9      	ldr	r1, [r7, #8]
 801fa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fa2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801fa30:	68b9      	ldr	r1, [r7, #8]
 801fa32:	f04f 0200 	mov.w	r2, #0
 801fa36:	f04f 0300 	mov.w	r3, #0
 801fa3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 801fa3e:	68bb      	ldr	r3, [r7, #8]
 801fa40:	69ba      	ldr	r2, [r7, #24]
 801fa42:	619a      	str	r2, [r3, #24]
 801fa44:	68bb      	ldr	r3, [r7, #8]
 801fa46:	69fa      	ldr	r2, [r7, #28]
 801fa48:	61da      	str	r2, [r3, #28]
 801fa4a:	68bb      	ldr	r3, [r7, #8]
 801fa4c:	6a3a      	ldr	r2, [r7, #32]
 801fa4e:	621a      	str	r2, [r3, #32]
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	681a      	ldr	r2, [r3, #0]
 801fa54:	68bb      	ldr	r3, [r7, #8]
 801fa56:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 801fa58:	68fb      	ldr	r3, [r7, #12]
 801fa5a:	68ba      	ldr	r2, [r7, #8]
 801fa5c:	601a      	str	r2, [r3, #0]
}
 801fa5e:	bf00      	nop
 801fa60:	3714      	adds	r7, #20
 801fa62:	46bd      	mov	sp, r7
 801fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa68:	4770      	bx	lr

0801fa6a <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 801fa6a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801fa6e:	b086      	sub	sp, #24
 801fa70:	af00      	add	r7, sp, #0
 801fa72:	6178      	str	r0, [r7, #20]
 801fa74:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 801fa78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801fa7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fa80:	eb10 0a02 	adds.w	sl, r0, r2
 801fa84:	eb41 0b03 	adc.w	fp, r1, r3
 801fa88:	697b      	ldr	r3, [r7, #20]
 801fa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa8e:	4592      	cmp	sl, r2
 801fa90:	eb7b 0303 	sbcs.w	r3, fp, r3
 801fa94:	d206      	bcs.n	801faa4 <mg_timer_expired+0x3a>
 801fa96:	6979      	ldr	r1, [r7, #20]
 801fa98:	f04f 0200 	mov.w	r2, #0
 801fa9c:	f04f 0300 	mov.w	r3, #0
 801faa0:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 801faa4:	697b      	ldr	r3, [r7, #20]
 801faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faaa:	4313      	orrs	r3, r2
 801faac:	d10d      	bne.n	801faca <mg_timer_expired+0x60>
 801faae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801fab2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fab6:	1886      	adds	r6, r0, r2
 801fab8:	603e      	str	r6, [r7, #0]
 801faba:	eb41 0303 	adc.w	r3, r1, r3
 801fabe:	607b      	str	r3, [r7, #4]
 801fac0:	697b      	ldr	r3, [r7, #20]
 801fac2:	e9d7 1200 	ldrd	r1, r2, [r7]
 801fac6:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 801faca:	697b      	ldr	r3, [r7, #20]
 801facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fad0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801fad4:	4290      	cmp	r0, r2
 801fad6:	eb71 0303 	sbcs.w	r3, r1, r3
 801fada:	d201      	bcs.n	801fae0 <mg_timer_expired+0x76>
 801fadc:	2300      	movs	r3, #0
 801fade:	e022      	b.n	801fb26 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 801fae0:	697b      	ldr	r3, [r7, #20]
 801fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fae6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801faea:	ebb0 0802 	subs.w	r8, r0, r2
 801faee:	eb61 0903 	sbc.w	r9, r1, r3
 801faf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801faf6:	4542      	cmp	r2, r8
 801faf8:	eb73 0309 	sbcs.w	r3, r3, r9
 801fafc:	d207      	bcs.n	801fb0e <mg_timer_expired+0xa4>
 801fafe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801fb02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fb06:	1884      	adds	r4, r0, r2
 801fb08:	eb41 0503 	adc.w	r5, r1, r3
 801fb0c:	e007      	b.n	801fb1e <mg_timer_expired+0xb4>
 801fb0e:	697b      	ldr	r3, [r7, #20]
 801fb10:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fb14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fb18:	1884      	adds	r4, r0, r2
 801fb1a:	eb41 0503 	adc.w	r5, r1, r3
 801fb1e:	697b      	ldr	r3, [r7, #20]
 801fb20:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 801fb24:	2301      	movs	r3, #1
}
 801fb26:	4618      	mov	r0, r3
 801fb28:	3718      	adds	r7, #24
 801fb2a:	46bd      	mov	sp, r7
 801fb2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801fb30:	4770      	bx	lr

0801fb32 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 801fb32:	b590      	push	{r4, r7, lr}
 801fb34:	b08b      	sub	sp, #44	@ 0x2c
 801fb36:	af02      	add	r7, sp, #8
 801fb38:	60f8      	str	r0, [r7, #12]
 801fb3a:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	681b      	ldr	r3, [r3, #0]
 801fb42:	61fb      	str	r3, [r7, #28]
 801fb44:	e054      	b.n	801fbf0 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 801fb46:	69fb      	ldr	r3, [r7, #28]
 801fb48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801fb4c:	4313      	orrs	r3, r2
 801fb4e:	d10d      	bne.n	801fb6c <mg_timer_poll+0x3a>
 801fb50:	69fb      	ldr	r3, [r7, #28]
 801fb52:	699b      	ldr	r3, [r3, #24]
 801fb54:	f003 0302 	and.w	r3, r3, #2
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d007      	beq.n	801fb6c <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 801fb5c:	69fb      	ldr	r3, [r7, #28]
 801fb5e:	699b      	ldr	r3, [r3, #24]
 801fb60:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d101      	bne.n	801fb6c <mg_timer_poll+0x3a>
 801fb68:	2301      	movs	r3, #1
 801fb6a:	e000      	b.n	801fb6e <mg_timer_poll+0x3c>
 801fb6c:	2300      	movs	r3, #0
 801fb6e:	76fb      	strb	r3, [r7, #27]
 801fb70:	7efb      	ldrb	r3, [r7, #27]
 801fb72:	f003 0301 	and.w	r3, r3, #1
 801fb76:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 801fb78:	69fb      	ldr	r3, [r7, #28]
 801fb7a:	f103 0410 	add.w	r4, r3, #16
 801fb7e:	69fb      	ldr	r3, [r7, #28]
 801fb80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801fb84:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fb88:	e9cd 2300 	strd	r2, r3, [sp]
 801fb8c:	4602      	mov	r2, r0
 801fb8e:	460b      	mov	r3, r1
 801fb90:	4620      	mov	r0, r4
 801fb92:	f7ff ff6a 	bl	801fa6a <mg_timer_expired>
 801fb96:	4603      	mov	r3, r0
 801fb98:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 801fb9a:	69fb      	ldr	r3, [r7, #28]
 801fb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fb9e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 801fba0:	7efb      	ldrb	r3, [r7, #27]
 801fba2:	f083 0301 	eor.w	r3, r3, #1
 801fba6:	b2db      	uxtb	r3, r3
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d005      	beq.n	801fbb8 <mg_timer_poll+0x86>
 801fbac:	7ebb      	ldrb	r3, [r7, #26]
 801fbae:	f083 0301 	eor.w	r3, r3, #1
 801fbb2:	b2db      	uxtb	r3, r3
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d118      	bne.n	801fbea <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 801fbb8:	69fb      	ldr	r3, [r7, #28]
 801fbba:	699b      	ldr	r3, [r3, #24]
 801fbbc:	f003 0301 	and.w	r3, r3, #1
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d105      	bne.n	801fbd0 <mg_timer_poll+0x9e>
 801fbc4:	69fb      	ldr	r3, [r7, #28]
 801fbc6:	699b      	ldr	r3, [r3, #24]
 801fbc8:	f003 0304 	and.w	r3, r3, #4
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d105      	bne.n	801fbdc <mg_timer_poll+0xaa>
      t->fn(t->arg);
 801fbd0:	69fb      	ldr	r3, [r7, #28]
 801fbd2:	69db      	ldr	r3, [r3, #28]
 801fbd4:	69fa      	ldr	r2, [r7, #28]
 801fbd6:	6a12      	ldr	r2, [r2, #32]
 801fbd8:	4610      	mov	r0, r2
 801fbda:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 801fbdc:	69fb      	ldr	r3, [r7, #28]
 801fbde:	699b      	ldr	r3, [r3, #24]
 801fbe0:	f043 0204 	orr.w	r2, r3, #4
 801fbe4:	69fb      	ldr	r3, [r7, #28]
 801fbe6:	619a      	str	r2, [r3, #24]
 801fbe8:	e000      	b.n	801fbec <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 801fbea:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 801fbec:	697b      	ldr	r3, [r7, #20]
 801fbee:	61fb      	str	r3, [r7, #28]
 801fbf0:	69fb      	ldr	r3, [r7, #28]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d1a7      	bne.n	801fb46 <mg_timer_poll+0x14>
  }
}
 801fbf6:	bf00      	nop
 801fbf8:	bf00      	nop
 801fbfa:	3724      	adds	r7, #36	@ 0x24
 801fbfc:	46bd      	mov	sp, r7
 801fbfe:	bd90      	pop	{r4, r7, pc}

0801fc00 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 801fc00:	b480      	push	{r7}
 801fc02:	b083      	sub	sp, #12
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
  (void) c;
}
 801fc08:	bf00      	nop
 801fc0a:	370c      	adds	r7, #12
 801fc0c:	46bd      	mov	sp, r7
 801fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc12:	4770      	bx	lr

0801fc14 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 801fc14:	b480      	push	{r7}
 801fc16:	b083      	sub	sp, #12
 801fc18:	af00      	add	r7, sp, #0
 801fc1a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 801fc1c:	bf00      	nop
 801fc1e:	370c      	adds	r7, #12
 801fc20:	46bd      	mov	sp, r7
 801fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc26:	4770      	bx	lr

0801fc28 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801fc28:	b480      	push	{r7}
 801fc2a:	b085      	sub	sp, #20
 801fc2c:	af00      	add	r7, sp, #0
 801fc2e:	60f8      	str	r0, [r7, #12]
 801fc30:	60b9      	str	r1, [r7, #8]
 801fc32:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d005      	beq.n	801fc46 <mg_tls_recv+0x1e>
 801fc3a:	68bb      	ldr	r3, [r7, #8]
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	d002      	beq.n	801fc46 <mg_tls_recv+0x1e>
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d101      	bne.n	801fc4a <mg_tls_recv+0x22>
 801fc46:	2300      	movs	r3, #0
 801fc48:	e001      	b.n	801fc4e <mg_tls_recv+0x26>
 801fc4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801fc4e:	4618      	mov	r0, r3
 801fc50:	3714      	adds	r7, #20
 801fc52:	46bd      	mov	sp, r7
 801fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc58:	4770      	bx	lr

0801fc5a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801fc5a:	b480      	push	{r7}
 801fc5c:	b085      	sub	sp, #20
 801fc5e:	af00      	add	r7, sp, #0
 801fc60:	60f8      	str	r0, [r7, #12]
 801fc62:	60b9      	str	r1, [r7, #8]
 801fc64:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 801fc66:	68fb      	ldr	r3, [r7, #12]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d005      	beq.n	801fc78 <mg_tls_send+0x1e>
 801fc6c:	68bb      	ldr	r3, [r7, #8]
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d002      	beq.n	801fc78 <mg_tls_send+0x1e>
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d101      	bne.n	801fc7c <mg_tls_send+0x22>
 801fc78:	2300      	movs	r3, #0
 801fc7a:	e001      	b.n	801fc80 <mg_tls_send+0x26>
 801fc7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801fc80:	4618      	mov	r0, r3
 801fc82:	3714      	adds	r7, #20
 801fc84:	46bd      	mov	sp, r7
 801fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc8a:	4770      	bx	lr

0801fc8c <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 801fc8c:	b480      	push	{r7}
 801fc8e:	b083      	sub	sp, #12
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 801fc94:	2300      	movs	r3, #0
}
 801fc96:	4618      	mov	r0, r3
 801fc98:	370c      	adds	r7, #12
 801fc9a:	46bd      	mov	sp, r7
 801fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fca0:	4770      	bx	lr

0801fca2 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801fca2:	b480      	push	{r7}
 801fca4:	b083      	sub	sp, #12
 801fca6:	af00      	add	r7, sp, #0
 801fca8:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801fcaa:	bf00      	nop
 801fcac:	370c      	adds	r7, #12
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcb4:	4770      	bx	lr
	...

0801fcb8 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 801fcb8:	b580      	push	{r7, lr}
 801fcba:	b082      	sub	sp, #8
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801fcc0:	2204      	movs	r2, #4
 801fcc2:	491b      	ldr	r1, [pc, #108]	@ (801fd30 <mg_url_is_ssl+0x78>)
 801fcc4:	6878      	ldr	r0, [r7, #4]
 801fcc6:	f001 f950 	bl	8020f6a <strncmp>
 801fcca:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d027      	beq.n	801fd20 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801fcd0:	2206      	movs	r2, #6
 801fcd2:	4918      	ldr	r1, [pc, #96]	@ (801fd34 <mg_url_is_ssl+0x7c>)
 801fcd4:	6878      	ldr	r0, [r7, #4]
 801fcd6:	f001 f948 	bl	8020f6a <strncmp>
 801fcda:	4603      	mov	r3, r0
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d01f      	beq.n	801fd20 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801fce0:	2206      	movs	r2, #6
 801fce2:	4915      	ldr	r1, [pc, #84]	@ (801fd38 <mg_url_is_ssl+0x80>)
 801fce4:	6878      	ldr	r0, [r7, #4]
 801fce6:	f001 f940 	bl	8020f6a <strncmp>
 801fcea:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d017      	beq.n	801fd20 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801fcf0:	2204      	movs	r2, #4
 801fcf2:	4912      	ldr	r1, [pc, #72]	@ (801fd3c <mg_url_is_ssl+0x84>)
 801fcf4:	6878      	ldr	r0, [r7, #4]
 801fcf6:	f001 f938 	bl	8020f6a <strncmp>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d00f      	beq.n	801fd20 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801fd00:	2204      	movs	r2, #4
 801fd02:	490f      	ldr	r1, [pc, #60]	@ (801fd40 <mg_url_is_ssl+0x88>)
 801fd04:	6878      	ldr	r0, [r7, #4]
 801fd06:	f001 f930 	bl	8020f6a <strncmp>
 801fd0a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d007      	beq.n	801fd20 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801fd10:	2205      	movs	r2, #5
 801fd12:	490c      	ldr	r1, [pc, #48]	@ (801fd44 <mg_url_is_ssl+0x8c>)
 801fd14:	6878      	ldr	r0, [r7, #4]
 801fd16:	f001 f928 	bl	8020f6a <strncmp>
 801fd1a:	4603      	mov	r3, r0
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d101      	bne.n	801fd24 <mg_url_is_ssl+0x6c>
 801fd20:	2301      	movs	r3, #1
 801fd22:	e000      	b.n	801fd26 <mg_url_is_ssl+0x6e>
 801fd24:	2300      	movs	r3, #0
}
 801fd26:	4618      	mov	r0, r3
 801fd28:	3708      	adds	r7, #8
 801fd2a:	46bd      	mov	sp, r7
 801fd2c:	bd80      	pop	{r7, pc}
 801fd2e:	bf00      	nop
 801fd30:	080265f4 	.word	0x080265f4
 801fd34:	080265fc 	.word	0x080265fc
 801fd38:	08026604 	.word	0x08026604
 801fd3c:	0802660c 	.word	0x0802660c
 801fd40:	08026614 	.word	0x08026614
 801fd44:	0802661c 	.word	0x0802661c

0801fd48 <urlparse>:

static struct url urlparse(const char *url) {
 801fd48:	b5b0      	push	{r4, r5, r7, lr}
 801fd4a:	b08a      	sub	sp, #40	@ 0x28
 801fd4c:	af00      	add	r7, sp, #0
 801fd4e:	6078      	str	r0, [r7, #4]
 801fd50:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801fd52:	f107 0308 	add.w	r3, r7, #8
 801fd56:	221c      	movs	r2, #28
 801fd58:	2100      	movs	r1, #0
 801fd5a:	4618      	mov	r0, r3
 801fd5c:	f001 f990 	bl	8021080 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801fd60:	2300      	movs	r3, #0
 801fd62:	627b      	str	r3, [r7, #36]	@ 0x24
 801fd64:	e05b      	b.n	801fe1e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801fd66:	683a      	ldr	r2, [r7, #0]
 801fd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd6a:	4413      	add	r3, r2
 801fd6c:	781b      	ldrb	r3, [r3, #0]
 801fd6e:	2b2f      	cmp	r3, #47	@ 0x2f
 801fd70:	d112      	bne.n	801fd98 <urlparse+0x50>
 801fd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d00f      	beq.n	801fd98 <urlparse+0x50>
 801fd78:	697b      	ldr	r3, [r7, #20]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d10c      	bne.n	801fd98 <urlparse+0x50>
 801fd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd80:	3b01      	subs	r3, #1
 801fd82:	683a      	ldr	r2, [r7, #0]
 801fd84:	4413      	add	r3, r2
 801fd86:	781b      	ldrb	r3, [r3, #0]
 801fd88:	2b2f      	cmp	r3, #47	@ 0x2f
 801fd8a:	d105      	bne.n	801fd98 <urlparse+0x50>
      u.host = i + 1;
 801fd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd8e:	3301      	adds	r3, #1
 801fd90:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801fd92:	2300      	movs	r3, #0
 801fd94:	61bb      	str	r3, [r7, #24]
 801fd96:	e03f      	b.n	801fe18 <urlparse+0xd0>
    } else if (url[i] == ']') {
 801fd98:	683a      	ldr	r2, [r7, #0]
 801fd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd9c:	4413      	add	r3, r2
 801fd9e:	781b      	ldrb	r3, [r3, #0]
 801fda0:	2b5d      	cmp	r3, #93	@ 0x5d
 801fda2:	d102      	bne.n	801fdaa <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801fda4:	2300      	movs	r3, #0
 801fda6:	61bb      	str	r3, [r7, #24]
 801fda8:	e036      	b.n	801fe18 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801fdaa:	683a      	ldr	r2, [r7, #0]
 801fdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdae:	4413      	add	r3, r2
 801fdb0:	781b      	ldrb	r3, [r3, #0]
 801fdb2:	2b3a      	cmp	r3, #58	@ 0x3a
 801fdb4:	d109      	bne.n	801fdca <urlparse+0x82>
 801fdb6:	69bb      	ldr	r3, [r7, #24]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d106      	bne.n	801fdca <urlparse+0x82>
 801fdbc:	69fb      	ldr	r3, [r7, #28]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d103      	bne.n	801fdca <urlparse+0x82>
      u.port = i + 1;
 801fdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdc4:	3301      	adds	r3, #1
 801fdc6:	61bb      	str	r3, [r7, #24]
 801fdc8:	e026      	b.n	801fe18 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801fdca:	683a      	ldr	r2, [r7, #0]
 801fdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdce:	4413      	add	r3, r2
 801fdd0:	781b      	ldrb	r3, [r3, #0]
 801fdd2:	2b40      	cmp	r3, #64	@ 0x40
 801fdd4:	d112      	bne.n	801fdfc <urlparse+0xb4>
 801fdd6:	68fb      	ldr	r3, [r7, #12]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d10f      	bne.n	801fdfc <urlparse+0xb4>
 801fddc:	693b      	ldr	r3, [r7, #16]
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d10c      	bne.n	801fdfc <urlparse+0xb4>
 801fde2:	69fb      	ldr	r3, [r7, #28]
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d109      	bne.n	801fdfc <urlparse+0xb4>
      u.user = u.host;
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 801fdec:	69bb      	ldr	r3, [r7, #24]
 801fdee:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 801fdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdf2:	3301      	adds	r3, #1
 801fdf4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	61bb      	str	r3, [r7, #24]
 801fdfa:	e00d      	b.n	801fe18 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801fdfc:	683a      	ldr	r2, [r7, #0]
 801fdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe00:	4413      	add	r3, r2
 801fe02:	781b      	ldrb	r3, [r3, #0]
 801fe04:	2b2f      	cmp	r3, #47	@ 0x2f
 801fe06:	d107      	bne.n	801fe18 <urlparse+0xd0>
 801fe08:	697b      	ldr	r3, [r7, #20]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d004      	beq.n	801fe18 <urlparse+0xd0>
 801fe0e:	69fb      	ldr	r3, [r7, #28]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d101      	bne.n	801fe18 <urlparse+0xd0>
      u.uri = i;
 801fe14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe16:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801fe18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe1a:	3301      	adds	r3, #1
 801fe1c:	627b      	str	r3, [r7, #36]	@ 0x24
 801fe1e:	683a      	ldr	r2, [r7, #0]
 801fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe22:	4413      	add	r3, r2
 801fe24:	781b      	ldrb	r3, [r3, #0]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d19d      	bne.n	801fd66 <urlparse+0x1e>
    }
  }
  u.end = i;
 801fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe2c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	461d      	mov	r5, r3
 801fe32:	f107 0408 	add.w	r4, r7, #8
 801fe36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fe38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fe3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801fe3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801fe42:	6878      	ldr	r0, [r7, #4]
 801fe44:	3728      	adds	r7, #40	@ 0x28
 801fe46:	46bd      	mov	sp, r7
 801fe48:	bdb0      	pop	{r4, r5, r7, pc}

0801fe4a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 801fe4a:	b580      	push	{r7, lr}
 801fe4c:	b08c      	sub	sp, #48	@ 0x30
 801fe4e:	af00      	add	r7, sp, #0
 801fe50:	6078      	str	r0, [r7, #4]
 801fe52:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 801fe54:	f107 0310 	add.w	r3, r7, #16
 801fe58:	6839      	ldr	r1, [r7, #0]
 801fe5a:	4618      	mov	r0, r3
 801fe5c:	f7ff ff74 	bl	801fd48 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801fe60:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d004      	beq.n	801fe70 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 801fe66:	6a3a      	ldr	r2, [r7, #32]
 801fe68:	69fb      	ldr	r3, [r7, #28]
 801fe6a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 801fe6c:	3b01      	subs	r3, #1
 801fe6e:	e009      	b.n	801fe84 <mg_url_host+0x3a>
 801fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d003      	beq.n	801fe7e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 801fe76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fe78:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 801fe7a:	1ad3      	subs	r3, r2, r3
 801fe7c:	e002      	b.n	801fe84 <mg_url_host+0x3a>
 801fe7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fe80:	69fb      	ldr	r3, [r7, #28]
 801fe82:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 801fe84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 801fe86:	69fb      	ldr	r3, [r7, #28]
 801fe88:	683a      	ldr	r2, [r7, #0]
 801fe8a:	18d1      	adds	r1, r2, r3
 801fe8c:	f107 0308 	add.w	r3, r7, #8
 801fe90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fe92:	4618      	mov	r0, r3
 801fe94:	f7ff f983 	bl	801f19e <mg_str_n>
  return s;
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	461a      	mov	r2, r3
 801fe9c:	f107 0308 	add.w	r3, r7, #8
 801fea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fea4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801fea8:	6878      	ldr	r0, [r7, #4]
 801feaa:	3730      	adds	r7, #48	@ 0x30
 801feac:	46bd      	mov	sp, r7
 801feae:	bd80      	pop	{r7, pc}

0801feb0 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b08a      	sub	sp, #40	@ 0x28
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801feb8:	f107 0308 	add.w	r3, r7, #8
 801febc:	6879      	ldr	r1, [r7, #4]
 801febe:	4618      	mov	r0, r3
 801fec0:	f7ff ff42 	bl	801fd48 <urlparse>
  unsigned short port = 0;
 801fec4:	2300      	movs	r3, #0
 801fec6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801fec8:	2205      	movs	r2, #5
 801feca:	4925      	ldr	r1, [pc, #148]	@ (801ff60 <mg_url_port+0xb0>)
 801fecc:	6878      	ldr	r0, [r7, #4]
 801fece:	f001 f84c 	bl	8020f6a <strncmp>
 801fed2:	4603      	mov	r3, r0
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d007      	beq.n	801fee8 <mg_url_port+0x38>
 801fed8:	2203      	movs	r2, #3
 801feda:	4922      	ldr	r1, [pc, #136]	@ (801ff64 <mg_url_port+0xb4>)
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	f001 f844 	bl	8020f6a <strncmp>
 801fee2:	4603      	mov	r3, r0
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d101      	bne.n	801feec <mg_url_port+0x3c>
 801fee8:	2350      	movs	r3, #80	@ 0x50
 801feea:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 801feec:	2204      	movs	r2, #4
 801feee:	491e      	ldr	r1, [pc, #120]	@ (801ff68 <mg_url_port+0xb8>)
 801fef0:	6878      	ldr	r0, [r7, #4]
 801fef2:	f001 f83a 	bl	8020f6a <strncmp>
 801fef6:	4603      	mov	r3, r0
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d007      	beq.n	801ff0c <mg_url_port+0x5c>
 801fefc:	2206      	movs	r2, #6
 801fefe:	491b      	ldr	r1, [pc, #108]	@ (801ff6c <mg_url_port+0xbc>)
 801ff00:	6878      	ldr	r0, [r7, #4]
 801ff02:	f001 f832 	bl	8020f6a <strncmp>
 801ff06:	4603      	mov	r3, r0
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	d102      	bne.n	801ff12 <mg_url_port+0x62>
    port = 443;
 801ff0c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801ff10:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801ff12:	2205      	movs	r2, #5
 801ff14:	4916      	ldr	r1, [pc, #88]	@ (801ff70 <mg_url_port+0xc0>)
 801ff16:	6878      	ldr	r0, [r7, #4]
 801ff18:	f001 f827 	bl	8020f6a <strncmp>
 801ff1c:	4603      	mov	r3, r0
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d102      	bne.n	801ff28 <mg_url_port+0x78>
 801ff22:	f240 735b 	movw	r3, #1883	@ 0x75b
 801ff26:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 801ff28:	2206      	movs	r2, #6
 801ff2a:	4912      	ldr	r1, [pc, #72]	@ (801ff74 <mg_url_port+0xc4>)
 801ff2c:	6878      	ldr	r0, [r7, #4]
 801ff2e:	f001 f81c 	bl	8020f6a <strncmp>
 801ff32:	4603      	mov	r3, r0
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d102      	bne.n	801ff3e <mg_url_port+0x8e>
 801ff38:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 801ff3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801ff3e:	69bb      	ldr	r3, [r7, #24]
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d007      	beq.n	801ff54 <mg_url_port+0xa4>
 801ff44:	69bb      	ldr	r3, [r7, #24]
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	4413      	add	r3, r2
 801ff4a:	4618      	mov	r0, r3
 801ff4c:	f000 fcda 	bl	8020904 <atoi>
 801ff50:	4603      	mov	r3, r0
 801ff52:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 801ff54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801ff56:	4618      	mov	r0, r3
 801ff58:	3728      	adds	r7, #40	@ 0x28
 801ff5a:	46bd      	mov	sp, r7
 801ff5c:	bd80      	pop	{r7, pc}
 801ff5e:	bf00      	nop
 801ff60:	08026624 	.word	0x08026624
 801ff64:	0802662c 	.word	0x0802662c
 801ff68:	080265f4 	.word	0x080265f4
 801ff6c:	080265fc 	.word	0x080265fc
 801ff70:	08026630 	.word	0x08026630
 801ff74:	08026604 	.word	0x08026604

0801ff78 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 801ff78:	b480      	push	{r7}
 801ff7a:	b083      	sub	sp, #12
 801ff7c:	af00      	add	r7, sp, #0
 801ff7e:	6078      	str	r0, [r7, #4]
 801ff80:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d00a      	beq.n	801ff9e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 801ff88:	e004      	b.n	801ff94 <mg_bzero+0x1c>
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	1c5a      	adds	r2, r3, #1
 801ff8e:	607a      	str	r2, [r7, #4]
 801ff90:	2200      	movs	r2, #0
 801ff92:	701a      	strb	r2, [r3, #0]
 801ff94:	683b      	ldr	r3, [r7, #0]
 801ff96:	1e5a      	subs	r2, r3, #1
 801ff98:	603a      	str	r2, [r7, #0]
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	d1f5      	bne.n	801ff8a <mg_bzero+0x12>
  }
}
 801ff9e:	bf00      	nop
 801ffa0:	370c      	adds	r7, #12
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa8:	4770      	bx	lr

0801ffaa <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 801ffaa:	b580      	push	{r7, lr}
 801ffac:	b084      	sub	sp, #16
 801ffae:	af00      	add	r7, sp, #0
 801ffb0:	6078      	str	r0, [r7, #4]
 801ffb2:	6039      	str	r1, [r7, #0]
  bool done = false;
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 801ffbc:	e007      	b.n	801ffce <mg_random+0x24>
 801ffbe:	f000 fd97 	bl	8020af0 <rand>
 801ffc2:	4601      	mov	r1, r0
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	1c5a      	adds	r2, r3, #1
 801ffc8:	60fa      	str	r2, [r7, #12]
 801ffca:	b2ca      	uxtb	r2, r1
 801ffcc:	701a      	strb	r2, [r3, #0]
 801ffce:	7afb      	ldrb	r3, [r7, #11]
 801ffd0:	f083 0301 	eor.w	r3, r3, #1
 801ffd4:	b2db      	uxtb	r3, r3
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d004      	beq.n	801ffe4 <mg_random+0x3a>
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	1e5a      	subs	r2, r3, #1
 801ffde:	603a      	str	r2, [r7, #0]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d1ec      	bne.n	801ffbe <mg_random+0x14>
}
 801ffe4:	bf00      	nop
 801ffe6:	3710      	adds	r7, #16
 801ffe8:	46bd      	mov	sp, r7
 801ffea:	bd80      	pop	{r7, pc}

0801ffec <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 801ffec:	b580      	push	{r7, lr}
 801ffee:	b084      	sub	sp, #16
 801fff0:	af00      	add	r7, sp, #0
 801fff2:	6078      	str	r0, [r7, #4]
 801fff4:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 801fff6:	6839      	ldr	r1, [r7, #0]
 801fff8:	6878      	ldr	r0, [r7, #4]
 801fffa:	f7ff ffd6 	bl	801ffaa <mg_random>
  for (i = 0; i < len; i++) {
 801fffe:	2300      	movs	r3, #0
 8020000:	60fb      	str	r3, [r7, #12]
 8020002:	e02d      	b.n	8020060 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8020004:	687a      	ldr	r2, [r7, #4]
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	4413      	add	r3, r2
 802000a:	781a      	ldrb	r2, [r3, #0]
 802000c:	0853      	lsrs	r3, r2, #1
 802000e:	4919      	ldr	r1, [pc, #100]	@ (8020074 <mg_random_str+0x88>)
 8020010:	fba1 1303 	umull	r1, r3, r1, r3
 8020014:	0919      	lsrs	r1, r3, #4
 8020016:	460b      	mov	r3, r1
 8020018:	015b      	lsls	r3, r3, #5
 802001a:	1a5b      	subs	r3, r3, r1
 802001c:	005b      	lsls	r3, r3, #1
 802001e:	1ad3      	subs	r3, r2, r3
 8020020:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8020022:	683b      	ldr	r3, [r7, #0]
 8020024:	3b01      	subs	r3, #1
 8020026:	68fa      	ldr	r2, [r7, #12]
 8020028:	429a      	cmp	r2, r3
 802002a:	d011      	beq.n	8020050 <mg_random_str+0x64>
 802002c:	7afb      	ldrb	r3, [r7, #11]
 802002e:	2b19      	cmp	r3, #25
 8020030:	d803      	bhi.n	802003a <mg_random_str+0x4e>
 8020032:	7afb      	ldrb	r3, [r7, #11]
 8020034:	3361      	adds	r3, #97	@ 0x61
 8020036:	b2db      	uxtb	r3, r3
 8020038:	e00b      	b.n	8020052 <mg_random_str+0x66>
 802003a:	7afb      	ldrb	r3, [r7, #11]
 802003c:	2b33      	cmp	r3, #51	@ 0x33
 802003e:	d803      	bhi.n	8020048 <mg_random_str+0x5c>
 8020040:	7afb      	ldrb	r3, [r7, #11]
 8020042:	3327      	adds	r3, #39	@ 0x27
 8020044:	b2db      	uxtb	r3, r3
 8020046:	e004      	b.n	8020052 <mg_random_str+0x66>
 8020048:	7afb      	ldrb	r3, [r7, #11]
 802004a:	3b04      	subs	r3, #4
 802004c:	b2db      	uxtb	r3, r3
 802004e:	e000      	b.n	8020052 <mg_random_str+0x66>
 8020050:	2300      	movs	r3, #0
 8020052:	6879      	ldr	r1, [r7, #4]
 8020054:	68fa      	ldr	r2, [r7, #12]
 8020056:	440a      	add	r2, r1
 8020058:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 802005a:	68fb      	ldr	r3, [r7, #12]
 802005c:	3301      	adds	r3, #1
 802005e:	60fb      	str	r3, [r7, #12]
 8020060:	68fa      	ldr	r2, [r7, #12]
 8020062:	683b      	ldr	r3, [r7, #0]
 8020064:	429a      	cmp	r2, r3
 8020066:	d3cd      	bcc.n	8020004 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8020068:	687b      	ldr	r3, [r7, #4]
}
 802006a:	4618      	mov	r0, r3
 802006c:	3710      	adds	r7, #16
 802006e:	46bd      	mov	sp, r7
 8020070:	bd80      	pop	{r7, pc}
 8020072:	bf00      	nop
 8020074:	84210843 	.word	0x84210843

08020078 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8020078:	b480      	push	{r7}
 802007a:	b085      	sub	sp, #20
 802007c:	af00      	add	r7, sp, #0
 802007e:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8020080:	2300      	movs	r3, #0
 8020082:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8020088:	7bfb      	ldrb	r3, [r7, #15]
 802008a:	461a      	mov	r2, r3
 802008c:	7bbb      	ldrb	r3, [r7, #14]
 802008e:	021b      	lsls	r3, r3, #8
 8020090:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8020092:	7b7b      	ldrb	r3, [r7, #13]
 8020094:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8020096:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8020098:	7b3b      	ldrb	r3, [r7, #12]
 802009a:	061b      	lsls	r3, r3, #24
 802009c:	4313      	orrs	r3, r2
}
 802009e:	4618      	mov	r0, r3
 80200a0:	3714      	adds	r7, #20
 80200a2:	46bd      	mov	sp, r7
 80200a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200a8:	4770      	bx	lr

080200aa <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 80200aa:	b480      	push	{r7}
 80200ac:	b085      	sub	sp, #20
 80200ae:	af00      	add	r7, sp, #0
 80200b0:	4603      	mov	r3, r0
 80200b2:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 80200b4:	2300      	movs	r3, #0
 80200b6:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 80200b8:	88fb      	ldrh	r3, [r7, #6]
 80200ba:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 80200bc:	7b7b      	ldrb	r3, [r7, #13]
 80200be:	b21a      	sxth	r2, r3
 80200c0:	7b3b      	ldrb	r3, [r7, #12]
 80200c2:	021b      	lsls	r3, r3, #8
 80200c4:	b21b      	sxth	r3, r3
 80200c6:	4313      	orrs	r3, r2
 80200c8:	b21b      	sxth	r3, r3
 80200ca:	b29b      	uxth	r3, r3
}
 80200cc:	4618      	mov	r0, r3
 80200ce:	3714      	adds	r7, #20
 80200d0:	46bd      	mov	sp, r7
 80200d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200d6:	4770      	bx	lr

080200d8 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80200d8:	b480      	push	{r7}
 80200da:	b087      	sub	sp, #28
 80200dc:	af00      	add	r7, sp, #0
 80200de:	60f8      	str	r0, [r7, #12]
 80200e0:	60b9      	str	r1, [r7, #8]
 80200e2:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	43db      	mvns	r3, r3
 80200e8:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80200ea:	e01f      	b.n	802012c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 80200ec:	68bb      	ldr	r3, [r7, #8]
 80200ee:	1c5a      	adds	r2, r3, #1
 80200f0:	60ba      	str	r2, [r7, #8]
 80200f2:	781b      	ldrb	r3, [r3, #0]
 80200f4:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80200f6:	7dfa      	ldrb	r2, [r7, #23]
 80200f8:	68fb      	ldr	r3, [r7, #12]
 80200fa:	4053      	eors	r3, r2
 80200fc:	f003 030f 	and.w	r3, r3, #15
 8020100:	4a11      	ldr	r2, [pc, #68]	@ (8020148 <mg_crc32+0x70>)
 8020102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	091b      	lsrs	r3, r3, #4
 802010a:	4053      	eors	r3, r2
 802010c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 802010e:	7dfb      	ldrb	r3, [r7, #23]
 8020110:	091b      	lsrs	r3, r3, #4
 8020112:	b2db      	uxtb	r3, r3
 8020114:	461a      	mov	r2, r3
 8020116:	68fb      	ldr	r3, [r7, #12]
 8020118:	4053      	eors	r3, r2
 802011a:	f003 030f 	and.w	r3, r3, #15
 802011e:	4a0a      	ldr	r2, [pc, #40]	@ (8020148 <mg_crc32+0x70>)
 8020120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020124:	68fb      	ldr	r3, [r7, #12]
 8020126:	091b      	lsrs	r3, r3, #4
 8020128:	4053      	eors	r3, r2
 802012a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	1e5a      	subs	r2, r3, #1
 8020130:	607a      	str	r2, [r7, #4]
 8020132:	2b00      	cmp	r3, #0
 8020134:	d1da      	bne.n	80200ec <mg_crc32+0x14>
  }
  return ~crc;
 8020136:	68fb      	ldr	r3, [r7, #12]
 8020138:	43db      	mvns	r3, r3
}
 802013a:	4618      	mov	r0, r3
 802013c:	371c      	adds	r7, #28
 802013e:	46bd      	mov	sp, r7
 8020140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020144:	4770      	bx	lr
 8020146:	bf00      	nop
 8020148:	0802701c 	.word	0x0802701c

0802014c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 802014c:	b480      	push	{r7}
 802014e:	b085      	sub	sp, #20
 8020150:	af00      	add	r7, sp, #0
 8020152:	463b      	mov	r3, r7
 8020154:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8020160:	683b      	ldr	r3, [r7, #0]
 8020162:	781b      	ldrb	r3, [r3, #0]
 8020164:	2b2e      	cmp	r3, #46	@ 0x2e
 8020166:	d123      	bne.n	80201b0 <mg_path_is_sane+0x64>
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	3301      	adds	r3, #1
 802016c:	781b      	ldrb	r3, [r3, #0]
 802016e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020170:	d11e      	bne.n	80201b0 <mg_path_is_sane+0x64>
 8020172:	2300      	movs	r3, #0
 8020174:	e024      	b.n	80201c0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	781b      	ldrb	r3, [r3, #0]
 802017a:	2b2f      	cmp	r3, #47	@ 0x2f
 802017c:	d003      	beq.n	8020186 <mg_path_is_sane+0x3a>
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	781b      	ldrb	r3, [r3, #0]
 8020182:	2b5c      	cmp	r3, #92	@ 0x5c
 8020184:	d10e      	bne.n	80201a4 <mg_path_is_sane+0x58>
 8020186:	68bb      	ldr	r3, [r7, #8]
 8020188:	2b01      	cmp	r3, #1
 802018a:	d90b      	bls.n	80201a4 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	3301      	adds	r3, #1
 8020190:	781b      	ldrb	r3, [r3, #0]
 8020192:	2b2e      	cmp	r3, #46	@ 0x2e
 8020194:	d106      	bne.n	80201a4 <mg_path_is_sane+0x58>
 8020196:	68fb      	ldr	r3, [r7, #12]
 8020198:	3302      	adds	r3, #2
 802019a:	781b      	ldrb	r3, [r3, #0]
 802019c:	2b2e      	cmp	r3, #46	@ 0x2e
 802019e:	d101      	bne.n	80201a4 <mg_path_is_sane+0x58>
 80201a0:	2300      	movs	r3, #0
 80201a2:	e00d      	b.n	80201c0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	3301      	adds	r3, #1
 80201a8:	60fb      	str	r3, [r7, #12]
 80201aa:	68bb      	ldr	r3, [r7, #8]
 80201ac:	3b01      	subs	r3, #1
 80201ae:	60bb      	str	r3, [r7, #8]
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	781b      	ldrb	r3, [r3, #0]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d002      	beq.n	80201be <mg_path_is_sane+0x72>
 80201b8:	68bb      	ldr	r3, [r7, #8]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d1db      	bne.n	8020176 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 80201be:	2301      	movs	r3, #1
}
 80201c0:	4618      	mov	r0, r3
 80201c2:	3714      	adds	r7, #20
 80201c4:	46bd      	mov	sp, r7
 80201c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ca:	4770      	bx	lr

080201cc <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 80201cc:	b5b0      	push	{r4, r5, r7, lr}
 80201ce:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80201d0:	f7e8 fc62 	bl	8008a98 <xTaskGetTickCount>
 80201d4:	4603      	mov	r3, r0
 80201d6:	2200      	movs	r2, #0
 80201d8:	461c      	mov	r4, r3
 80201da:	4615      	mov	r5, r2
 80201dc:	4622      	mov	r2, r4
 80201de:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 80201e0:	4610      	mov	r0, r2
 80201e2:	4619      	mov	r1, r3
 80201e4:	bdb0      	pop	{r4, r5, r7, pc}

080201e6 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80201e6:	b580      	push	{r7, lr}
 80201e8:	b086      	sub	sp, #24
 80201ea:	af00      	add	r7, sp, #0
 80201ec:	6078      	str	r0, [r7, #4]
 80201ee:	4608      	mov	r0, r1
 80201f0:	4611      	mov	r1, r2
 80201f2:	461a      	mov	r2, r3
 80201f4:	4603      	mov	r3, r0
 80201f6:	70fb      	strb	r3, [r7, #3]
 80201f8:	460b      	mov	r3, r1
 80201fa:	803b      	strh	r3, [r7, #0]
 80201fc:	4613      	mov	r3, r2
 80201fe:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 8020200:	6a3b      	ldr	r3, [r7, #32]
 8020202:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020204:	883b      	ldrh	r3, [r7, #0]
 8020206:	0a1b      	lsrs	r3, r3, #8
 8020208:	b29b      	uxth	r3, r3
 802020a:	b2db      	uxtb	r3, r3
 802020c:	733b      	strb	r3, [r7, #12]
 802020e:	883b      	ldrh	r3, [r7, #0]
 8020210:	b2db      	uxtb	r3, r3
 8020212:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8020214:	78fb      	ldrb	r3, [r7, #3]
 8020216:	00db      	lsls	r3, r3, #3
 8020218:	b25b      	sxtb	r3, r3
 802021a:	78ba      	ldrb	r2, [r7, #2]
 802021c:	2a00      	cmp	r2, #0
 802021e:	d001      	beq.n	8020224 <w5500_txn+0x3e>
 8020220:	2204      	movs	r2, #4
 8020222:	e000      	b.n	8020226 <w5500_txn+0x40>
 8020224:	2200      	movs	r2, #0
 8020226:	4313      	orrs	r3, r2
 8020228:	b25b      	sxtb	r3, r3
 802022a:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802022c:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	685b      	ldr	r3, [r3, #4]
 8020232:	687a      	ldr	r2, [r7, #4]
 8020234:	6812      	ldr	r2, [r2, #0]
 8020236:	4610      	mov	r0, r2
 8020238:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802023a:	2300      	movs	r3, #0
 802023c:	617b      	str	r3, [r7, #20]
 802023e:	e00d      	b.n	802025c <w5500_txn+0x76>
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	68db      	ldr	r3, [r3, #12]
 8020244:	687a      	ldr	r2, [r7, #4]
 8020246:	6810      	ldr	r0, [r2, #0]
 8020248:	f107 010c 	add.w	r1, r7, #12
 802024c:	697a      	ldr	r2, [r7, #20]
 802024e:	440a      	add	r2, r1
 8020250:	7812      	ldrb	r2, [r2, #0]
 8020252:	4611      	mov	r1, r2
 8020254:	4798      	blx	r3
 8020256:	697b      	ldr	r3, [r7, #20]
 8020258:	3301      	adds	r3, #1
 802025a:	617b      	str	r3, [r7, #20]
 802025c:	697b      	ldr	r3, [r7, #20]
 802025e:	2b02      	cmp	r3, #2
 8020260:	d9ee      	bls.n	8020240 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8020262:	2300      	movs	r3, #0
 8020264:	617b      	str	r3, [r7, #20]
 8020266:	e019      	b.n	802029c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	68db      	ldr	r3, [r3, #12]
 802026c:	687a      	ldr	r2, [r7, #4]
 802026e:	6810      	ldr	r0, [r2, #0]
 8020270:	6939      	ldr	r1, [r7, #16]
 8020272:	697a      	ldr	r2, [r7, #20]
 8020274:	440a      	add	r2, r1
 8020276:	7812      	ldrb	r2, [r2, #0]
 8020278:	4611      	mov	r1, r2
 802027a:	4798      	blx	r3
 802027c:	4603      	mov	r3, r0
 802027e:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8020280:	78bb      	ldrb	r3, [r7, #2]
 8020282:	f083 0301 	eor.w	r3, r3, #1
 8020286:	b2db      	uxtb	r3, r3
 8020288:	2b00      	cmp	r3, #0
 802028a:	d004      	beq.n	8020296 <w5500_txn+0xb0>
 802028c:	693a      	ldr	r2, [r7, #16]
 802028e:	697b      	ldr	r3, [r7, #20]
 8020290:	4413      	add	r3, r2
 8020292:	7bfa      	ldrb	r2, [r7, #15]
 8020294:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8020296:	697b      	ldr	r3, [r7, #20]
 8020298:	3301      	adds	r3, #1
 802029a:	617b      	str	r3, [r7, #20]
 802029c:	697a      	ldr	r2, [r7, #20]
 802029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202a0:	429a      	cmp	r2, r3
 80202a2:	d3e1      	bcc.n	8020268 <w5500_txn+0x82>
  }
  s->end(s->spi);
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	689b      	ldr	r3, [r3, #8]
 80202a8:	687a      	ldr	r2, [r7, #4]
 80202aa:	6812      	ldr	r2, [r2, #0]
 80202ac:	4610      	mov	r0, r2
 80202ae:	4798      	blx	r3
}
 80202b0:	bf00      	nop
 80202b2:	3718      	adds	r7, #24
 80202b4:	46bd      	mov	sp, r7
 80202b6:	bd80      	pop	{r7, pc}

080202b8 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 80202b8:	b580      	push	{r7, lr}
 80202ba:	b086      	sub	sp, #24
 80202bc:	af02      	add	r7, sp, #8
 80202be:	60f8      	str	r0, [r7, #12]
 80202c0:	607b      	str	r3, [r7, #4]
 80202c2:	460b      	mov	r3, r1
 80202c4:	72fb      	strb	r3, [r7, #11]
 80202c6:	4613      	mov	r3, r2
 80202c8:	813b      	strh	r3, [r7, #8]
 80202ca:	893a      	ldrh	r2, [r7, #8]
 80202cc:	7af9      	ldrb	r1, [r7, #11]
 80202ce:	69bb      	ldr	r3, [r7, #24]
 80202d0:	9301      	str	r3, [sp, #4]
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	9300      	str	r3, [sp, #0]
 80202d6:	2301      	movs	r3, #1
 80202d8:	68f8      	ldr	r0, [r7, #12]
 80202da:	f7ff ff84 	bl	80201e6 <w5500_txn>
 80202de:	bf00      	nop
 80202e0:	3710      	adds	r7, #16
 80202e2:	46bd      	mov	sp, r7
 80202e4:	bd80      	pop	{r7, pc}

080202e6 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 80202e6:	b580      	push	{r7, lr}
 80202e8:	b084      	sub	sp, #16
 80202ea:	af02      	add	r7, sp, #8
 80202ec:	6078      	str	r0, [r7, #4]
 80202ee:	4608      	mov	r0, r1
 80202f0:	4611      	mov	r1, r2
 80202f2:	461a      	mov	r2, r3
 80202f4:	4603      	mov	r3, r0
 80202f6:	70fb      	strb	r3, [r7, #3]
 80202f8:	460b      	mov	r3, r1
 80202fa:	803b      	strh	r3, [r7, #0]
 80202fc:	4613      	mov	r3, r2
 80202fe:	70bb      	strb	r3, [r7, #2]
 8020300:	1cbb      	adds	r3, r7, #2
 8020302:	883a      	ldrh	r2, [r7, #0]
 8020304:	78f9      	ldrb	r1, [r7, #3]
 8020306:	2001      	movs	r0, #1
 8020308:	9000      	str	r0, [sp, #0]
 802030a:	6878      	ldr	r0, [r7, #4]
 802030c:	f7ff ffd4 	bl	80202b8 <w5500_wn>
 8020310:	bf00      	nop
 8020312:	3708      	adds	r7, #8
 8020314:	46bd      	mov	sp, r7
 8020316:	bd80      	pop	{r7, pc}

08020318 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8020318:	b580      	push	{r7, lr}
 802031a:	b088      	sub	sp, #32
 802031c:	af02      	add	r7, sp, #8
 802031e:	60f8      	str	r0, [r7, #12]
 8020320:	4608      	mov	r0, r1
 8020322:	4611      	mov	r1, r2
 8020324:	461a      	mov	r2, r3
 8020326:	4603      	mov	r3, r0
 8020328:	72fb      	strb	r3, [r7, #11]
 802032a:	460b      	mov	r3, r1
 802032c:	813b      	strh	r3, [r7, #8]
 802032e:	4613      	mov	r3, r2
 8020330:	80fb      	strh	r3, [r7, #6]
 8020332:	88fb      	ldrh	r3, [r7, #6]
 8020334:	0a1b      	lsrs	r3, r3, #8
 8020336:	b29b      	uxth	r3, r3
 8020338:	b2db      	uxtb	r3, r3
 802033a:	753b      	strb	r3, [r7, #20]
 802033c:	88fb      	ldrh	r3, [r7, #6]
 802033e:	b2db      	uxtb	r3, r3
 8020340:	757b      	strb	r3, [r7, #21]
 8020342:	f107 0314 	add.w	r3, r7, #20
 8020346:	893a      	ldrh	r2, [r7, #8]
 8020348:	7af9      	ldrb	r1, [r7, #11]
 802034a:	2002      	movs	r0, #2
 802034c:	9000      	str	r0, [sp, #0]
 802034e:	68f8      	ldr	r0, [r7, #12]
 8020350:	f7ff ffb2 	bl	80202b8 <w5500_wn>
 8020354:	bf00      	nop
 8020356:	3718      	adds	r7, #24
 8020358:	46bd      	mov	sp, r7
 802035a:	bd80      	pop	{r7, pc}

0802035c <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 802035c:	b580      	push	{r7, lr}
 802035e:	b086      	sub	sp, #24
 8020360:	af02      	add	r7, sp, #8
 8020362:	60f8      	str	r0, [r7, #12]
 8020364:	607b      	str	r3, [r7, #4]
 8020366:	460b      	mov	r3, r1
 8020368:	72fb      	strb	r3, [r7, #11]
 802036a:	4613      	mov	r3, r2
 802036c:	813b      	strh	r3, [r7, #8]
 802036e:	893a      	ldrh	r2, [r7, #8]
 8020370:	7af9      	ldrb	r1, [r7, #11]
 8020372:	69bb      	ldr	r3, [r7, #24]
 8020374:	9301      	str	r3, [sp, #4]
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	9300      	str	r3, [sp, #0]
 802037a:	2300      	movs	r3, #0
 802037c:	68f8      	ldr	r0, [r7, #12]
 802037e:	f7ff ff32 	bl	80201e6 <w5500_txn>
 8020382:	bf00      	nop
 8020384:	3710      	adds	r7, #16
 8020386:	46bd      	mov	sp, r7
 8020388:	bd80      	pop	{r7, pc}

0802038a <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 802038a:	b580      	push	{r7, lr}
 802038c:	b086      	sub	sp, #24
 802038e:	af02      	add	r7, sp, #8
 8020390:	6078      	str	r0, [r7, #4]
 8020392:	460b      	mov	r3, r1
 8020394:	70fb      	strb	r3, [r7, #3]
 8020396:	4613      	mov	r3, r2
 8020398:	803b      	strh	r3, [r7, #0]
 802039a:	2300      	movs	r3, #0
 802039c:	73fb      	strb	r3, [r7, #15]
 802039e:	f107 030f 	add.w	r3, r7, #15
 80203a2:	883a      	ldrh	r2, [r7, #0]
 80203a4:	78f9      	ldrb	r1, [r7, #3]
 80203a6:	2001      	movs	r0, #1
 80203a8:	9000      	str	r0, [sp, #0]
 80203aa:	6878      	ldr	r0, [r7, #4]
 80203ac:	f7ff ffd6 	bl	802035c <w5500_rn>
 80203b0:	7bfb      	ldrb	r3, [r7, #15]
 80203b2:	4618      	mov	r0, r3
 80203b4:	3710      	adds	r7, #16
 80203b6:	46bd      	mov	sp, r7
 80203b8:	bd80      	pop	{r7, pc}

080203ba <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 80203ba:	b580      	push	{r7, lr}
 80203bc:	b086      	sub	sp, #24
 80203be:	af02      	add	r7, sp, #8
 80203c0:	6078      	str	r0, [r7, #4]
 80203c2:	460b      	mov	r3, r1
 80203c4:	70fb      	strb	r3, [r7, #3]
 80203c6:	4613      	mov	r3, r2
 80203c8:	803b      	strh	r3, [r7, #0]
 80203ca:	2300      	movs	r3, #0
 80203cc:	81bb      	strh	r3, [r7, #12]
 80203ce:	f107 030c 	add.w	r3, r7, #12
 80203d2:	883a      	ldrh	r2, [r7, #0]
 80203d4:	78f9      	ldrb	r1, [r7, #3]
 80203d6:	2002      	movs	r0, #2
 80203d8:	9000      	str	r0, [sp, #0]
 80203da:	6878      	ldr	r0, [r7, #4]
 80203dc:	f7ff ffbe 	bl	802035c <w5500_rn>
 80203e0:	7b3b      	ldrb	r3, [r7, #12]
 80203e2:	021b      	lsls	r3, r3, #8
 80203e4:	b21a      	sxth	r2, r3
 80203e6:	7b7b      	ldrb	r3, [r7, #13]
 80203e8:	b21b      	sxth	r3, r3
 80203ea:	4313      	orrs	r3, r2
 80203ec:	b21b      	sxth	r3, r3
 80203ee:	b29b      	uxth	r3, r3
 80203f0:	4618      	mov	r0, r3
 80203f2:	3710      	adds	r7, #16
 80203f4:	46bd      	mov	sp, r7
 80203f6:	bd80      	pop	{r7, pc}

080203f8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 80203f8:	b580      	push	{r7, lr}
 80203fa:	b08a      	sub	sp, #40	@ 0x28
 80203fc:	af02      	add	r7, sp, #8
 80203fe:	60f8      	str	r0, [r7, #12]
 8020400:	60b9      	str	r1, [r7, #8]
 8020402:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020408:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802040a:	2300      	movs	r3, #0
 802040c:	83fb      	strh	r3, [r7, #30]
 802040e:	2300      	movs	r3, #0
 8020410:	83bb      	strh	r3, [r7, #28]
 8020412:	68bb      	ldr	r3, [r7, #8]
 8020414:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8020416:	e001      	b.n	802041c <w5500_rx+0x24>
 8020418:	8abb      	ldrh	r3, [r7, #20]
 802041a:	83bb      	strh	r3, [r7, #28]
 802041c:	2226      	movs	r2, #38	@ 0x26
 802041e:	2101      	movs	r1, #1
 8020420:	69b8      	ldr	r0, [r7, #24]
 8020422:	f7ff ffca 	bl	80203ba <w5500_r2>
 8020426:	4603      	mov	r3, r0
 8020428:	82bb      	strh	r3, [r7, #20]
 802042a:	8aba      	ldrh	r2, [r7, #20]
 802042c:	8bbb      	ldrh	r3, [r7, #28]
 802042e:	429a      	cmp	r2, r3
 8020430:	d8f2      	bhi.n	8020418 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8020432:	8bbb      	ldrh	r3, [r7, #28]
 8020434:	2b00      	cmp	r3, #0
 8020436:	d032      	beq.n	802049e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8020438:	2228      	movs	r2, #40	@ 0x28
 802043a:	2101      	movs	r1, #1
 802043c:	69b8      	ldr	r0, [r7, #24]
 802043e:	f7ff ffbc 	bl	80203ba <w5500_r2>
 8020442:	4603      	mov	r3, r0
 8020444:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8020446:	8a7b      	ldrh	r3, [r7, #18]
 8020448:	461a      	mov	r2, r3
 802044a:	2103      	movs	r1, #3
 802044c:	69b8      	ldr	r0, [r7, #24]
 802044e:	f7ff ffb4 	bl	80203ba <w5500_r2>
 8020452:	4603      	mov	r3, r0
 8020454:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 8020456:	8bba      	ldrh	r2, [r7, #28]
 8020458:	8afb      	ldrh	r3, [r7, #22]
 802045a:	3302      	adds	r3, #2
 802045c:	429a      	cmp	r2, r3
 802045e:	dc0f      	bgt.n	8020480 <w5500_rx+0x88>
 8020460:	8bbb      	ldrh	r3, [r7, #28]
 8020462:	2b01      	cmp	r3, #1
 8020464:	d90c      	bls.n	8020480 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 8020466:	8bbb      	ldrh	r3, [r7, #28]
 8020468:	3b02      	subs	r3, #2
 802046a:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 802046c:	8a7b      	ldrh	r3, [r7, #18]
 802046e:	3302      	adds	r3, #2
 8020470:	b29a      	uxth	r2, r3
 8020472:	8bfb      	ldrh	r3, [r7, #30]
 8020474:	9300      	str	r3, [sp, #0]
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	2103      	movs	r1, #3
 802047a:	69b8      	ldr	r0, [r7, #24]
 802047c:	f7ff ff6e 	bl	802035c <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8020480:	8a7a      	ldrh	r2, [r7, #18]
 8020482:	8bbb      	ldrh	r3, [r7, #28]
 8020484:	4413      	add	r3, r2
 8020486:	b29b      	uxth	r3, r3
 8020488:	2228      	movs	r2, #40	@ 0x28
 802048a:	2101      	movs	r1, #1
 802048c:	69b8      	ldr	r0, [r7, #24]
 802048e:	f7ff ff43 	bl	8020318 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8020492:	2340      	movs	r3, #64	@ 0x40
 8020494:	2201      	movs	r2, #1
 8020496:	2101      	movs	r1, #1
 8020498:	69b8      	ldr	r0, [r7, #24]
 802049a:	f7ff ff24 	bl	80202e6 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 802049e:	8bfb      	ldrh	r3, [r7, #30]
}
 80204a0:	4618      	mov	r0, r3
 80204a2:	3720      	adds	r7, #32
 80204a4:	46bd      	mov	sp, r7
 80204a6:	bd80      	pop	{r7, pc}

080204a8 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b08a      	sub	sp, #40	@ 0x28
 80204ac:	af02      	add	r7, sp, #8
 80204ae:	60f8      	str	r0, [r7, #12]
 80204b0:	60b9      	str	r1, [r7, #8]
 80204b2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204b8:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 80204ba:	2300      	movs	r3, #0
 80204bc:	83bb      	strh	r3, [r7, #28]
 80204be:	68bb      	ldr	r3, [r7, #8]
 80204c0:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 80204c2:	e006      	b.n	80204d2 <w5500_tx+0x2a>
 80204c4:	2220      	movs	r2, #32
 80204c6:	2101      	movs	r1, #1
 80204c8:	6978      	ldr	r0, [r7, #20]
 80204ca:	f7ff ff76 	bl	80203ba <w5500_r2>
 80204ce:	4603      	mov	r3, r0
 80204d0:	83bb      	strh	r3, [r7, #28]
 80204d2:	8bba      	ldrh	r2, [r7, #28]
 80204d4:	8b7b      	ldrh	r3, [r7, #26]
 80204d6:	429a      	cmp	r2, r3
 80204d8:	d3f4      	bcc.n	80204c4 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 80204da:	2224      	movs	r2, #36	@ 0x24
 80204dc:	2101      	movs	r1, #1
 80204de:	6978      	ldr	r0, [r7, #20]
 80204e0:	f7ff ff6b 	bl	80203ba <w5500_r2>
 80204e4:	4603      	mov	r3, r0
 80204e6:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 80204e8:	8b7b      	ldrh	r3, [r7, #26]
 80204ea:	8a7a      	ldrh	r2, [r7, #18]
 80204ec:	9300      	str	r3, [sp, #0]
 80204ee:	68fb      	ldr	r3, [r7, #12]
 80204f0:	2102      	movs	r1, #2
 80204f2:	6978      	ldr	r0, [r7, #20]
 80204f4:	f7ff fee0 	bl	80202b8 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 80204f8:	8a7a      	ldrh	r2, [r7, #18]
 80204fa:	8b7b      	ldrh	r3, [r7, #26]
 80204fc:	4413      	add	r3, r2
 80204fe:	b29b      	uxth	r3, r3
 8020500:	2224      	movs	r2, #36	@ 0x24
 8020502:	2101      	movs	r1, #1
 8020504:	6978      	ldr	r0, [r7, #20]
 8020506:	f7ff ff07 	bl	8020318 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 802050a:	2320      	movs	r3, #32
 802050c:	2201      	movs	r2, #1
 802050e:	2101      	movs	r1, #1
 8020510:	6978      	ldr	r0, [r7, #20]
 8020512:	f7ff fee8 	bl	80202e6 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8020516:	2300      	movs	r3, #0
 8020518:	83fb      	strh	r3, [r7, #30]
 802051a:	e020      	b.n	802055e <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 802051c:	2202      	movs	r2, #2
 802051e:	2101      	movs	r1, #1
 8020520:	6978      	ldr	r0, [r7, #20]
 8020522:	f7ff ff32 	bl	802038a <w5500_r1>
 8020526:	4603      	mov	r3, r0
 8020528:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 802052a:	7c7b      	ldrb	r3, [r7, #17]
 802052c:	2b00      	cmp	r3, #0
 802052e:	d012      	beq.n	8020556 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8020530:	7c7b      	ldrb	r3, [r7, #17]
 8020532:	2202      	movs	r2, #2
 8020534:	2101      	movs	r1, #1
 8020536:	6978      	ldr	r0, [r7, #20]
 8020538:	f7ff fed5 	bl	80202e6 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 802053c:	7c7b      	ldrb	r3, [r7, #17]
 802053e:	f003 0308 	and.w	r3, r3, #8
 8020542:	2b00      	cmp	r3, #0
 8020544:	d001      	beq.n	802054a <w5500_tx+0xa2>
 8020546:	2300      	movs	r3, #0
 8020548:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 802054a:	7c7b      	ldrb	r3, [r7, #17]
 802054c:	f003 0318 	and.w	r3, r3, #24
 8020550:	2b00      	cmp	r3, #0
 8020552:	d108      	bne.n	8020566 <w5500_tx+0xbe>
 8020554:	e000      	b.n	8020558 <w5500_tx+0xb0>
    if (ir == 0) continue;
 8020556:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8020558:	8bfb      	ldrh	r3, [r7, #30]
 802055a:	3301      	adds	r3, #1
 802055c:	83fb      	strh	r3, [r7, #30]
 802055e:	8bfb      	ldrh	r3, [r7, #30]
 8020560:	2b27      	cmp	r3, #39	@ 0x27
 8020562:	d9db      	bls.n	802051c <w5500_tx+0x74>
 8020564:	e000      	b.n	8020568 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8020566:	bf00      	nop
  }
  return len;
 8020568:	8b7b      	ldrh	r3, [r7, #26]
}
 802056a:	4618      	mov	r0, r3
 802056c:	3720      	adds	r7, #32
 802056e:	46bd      	mov	sp, r7
 8020570:	bd80      	pop	{r7, pc}

08020572 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8020572:	b580      	push	{r7, lr}
 8020574:	b084      	sub	sp, #16
 8020576:	af00      	add	r7, sp, #0
 8020578:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802057e:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	689b      	ldr	r3, [r3, #8]
 8020584:	68fa      	ldr	r2, [r7, #12]
 8020586:	6812      	ldr	r2, [r2, #0]
 8020588:	4610      	mov	r0, r2
 802058a:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 802058c:	2380      	movs	r3, #128	@ 0x80
 802058e:	2200      	movs	r2, #0
 8020590:	2100      	movs	r1, #0
 8020592:	68f8      	ldr	r0, [r7, #12]
 8020594:	f7ff fea7 	bl	80202e6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8020598:	2300      	movs	r3, #0
 802059a:	222e      	movs	r2, #46	@ 0x2e
 802059c:	2100      	movs	r1, #0
 802059e:	68f8      	ldr	r0, [r7, #12]
 80205a0:	f7ff fea1 	bl	80202e6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 80205a4:	23f8      	movs	r3, #248	@ 0xf8
 80205a6:	222e      	movs	r2, #46	@ 0x2e
 80205a8:	2100      	movs	r1, #0
 80205aa:	68f8      	ldr	r0, [r7, #12]
 80205ac:	f7ff fe9b 	bl	80202e6 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 80205b0:	2310      	movs	r3, #16
 80205b2:	221e      	movs	r2, #30
 80205b4:	2101      	movs	r1, #1
 80205b6:	68f8      	ldr	r0, [r7, #12]
 80205b8:	f7ff fe95 	bl	80202e6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 80205bc:	2310      	movs	r3, #16
 80205be:	221f      	movs	r2, #31
 80205c0:	2101      	movs	r1, #1
 80205c2:	68f8      	ldr	r0, [r7, #12]
 80205c4:	f7ff fe8f 	bl	80202e6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 80205c8:	2304      	movs	r3, #4
 80205ca:	2200      	movs	r2, #0
 80205cc:	2101      	movs	r1, #1
 80205ce:	68f8      	ldr	r0, [r7, #12]
 80205d0:	f7ff fe89 	bl	80202e6 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 80205d4:	2301      	movs	r3, #1
 80205d6:	2201      	movs	r2, #1
 80205d8:	2101      	movs	r1, #1
 80205da:	68f8      	ldr	r0, [r7, #12]
 80205dc:	f7ff fe83 	bl	80202e6 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 80205e0:	2203      	movs	r2, #3
 80205e2:	2101      	movs	r1, #1
 80205e4:	68f8      	ldr	r0, [r7, #12]
 80205e6:	f7ff fed0 	bl	802038a <w5500_r1>
 80205ea:	4603      	mov	r3, r0
 80205ec:	2b42      	cmp	r3, #66	@ 0x42
 80205ee:	bf0c      	ite	eq
 80205f0:	2301      	moveq	r3, #1
 80205f2:	2300      	movne	r3, #0
 80205f4:	b2db      	uxtb	r3, r3
}
 80205f6:	4618      	mov	r0, r3
 80205f8:	3710      	adds	r7, #16
 80205fa:	46bd      	mov	sp, r7
 80205fc:	bd80      	pop	{r7, pc}

080205fe <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 80205fe:	b580      	push	{r7, lr}
 8020600:	b084      	sub	sp, #16
 8020602:	af00      	add	r7, sp, #0
 8020604:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802060a:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 802060c:	222e      	movs	r2, #46	@ 0x2e
 802060e:	2100      	movs	r1, #0
 8020610:	68f8      	ldr	r0, [r7, #12]
 8020612:	f7ff feba 	bl	802038a <w5500_r1>
 8020616:	4603      	mov	r3, r0
 8020618:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 802061a:	7afb      	ldrb	r3, [r7, #11]
 802061c:	f003 0301 	and.w	r3, r3, #1
 8020620:	2b00      	cmp	r3, #0
 8020622:	bf14      	ite	ne
 8020624:	2301      	movne	r3, #1
 8020626:	2300      	moveq	r3, #0
 8020628:	b2db      	uxtb	r3, r3
}
 802062a:	4618      	mov	r0, r3
 802062c:	3710      	adds	r7, #16
 802062e:	46bd      	mov	sp, r7
 8020630:	bd80      	pop	{r7, pc}
	...

08020634 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8020634:	b580      	push	{r7, lr}
 8020636:	b082      	sub	sp, #8
 8020638:	af00      	add	r7, sp, #0
 802063a:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 802063c:	2207      	movs	r2, #7
 802063e:	4907      	ldr	r1, [pc, #28]	@ (802065c <has_mqtt_prefix+0x28>)
 8020640:	6878      	ldr	r0, [r7, #4]
 8020642:	f000 fc92 	bl	8020f6a <strncmp>
 8020646:	4603      	mov	r3, r0
 8020648:	2b00      	cmp	r3, #0
 802064a:	bf0c      	ite	eq
 802064c:	2301      	moveq	r3, #1
 802064e:	2300      	movne	r3, #0
 8020650:	b2db      	uxtb	r3, r3
}
 8020652:	4618      	mov	r0, r3
 8020654:	3708      	adds	r7, #8
 8020656:	46bd      	mov	sp, r7
 8020658:	bd80      	pop	{r7, pc}
 802065a:	bf00      	nop
 802065c:	0802687c 	.word	0x0802687c

08020660 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8020660:	b580      	push	{r7, lr}
 8020662:	b08a      	sub	sp, #40	@ 0x28
 8020664:	af00      	add	r7, sp, #0
 8020666:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 8020668:	2300      	movs	r3, #0
 802066a:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 802066c:	2301      	movs	r3, #1
 802066e:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8020670:	2300      	movs	r3, #0
 8020672:	61fb      	str	r3, [r7, #28]
 8020674:	e01b      	b.n	80206ae <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 8020676:	69fb      	ldr	r3, [r7, #28]
 8020678:	687a      	ldr	r2, [r7, #4]
 802067a:	4413      	add	r3, r2
 802067c:	781b      	ldrb	r3, [r3, #0]
 802067e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020680:	d103      	bne.n	802068a <is_valid_ip_or_domain+0x2a>
            dot_count++;
 8020682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020684:	3301      	adds	r3, #1
 8020686:	627b      	str	r3, [r7, #36]	@ 0x24
 8020688:	e00e      	b.n	80206a8 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 802068a:	69fb      	ldr	r3, [r7, #28]
 802068c:	687a      	ldr	r2, [r7, #4]
 802068e:	4413      	add	r3, r2
 8020690:	781b      	ldrb	r3, [r3, #0]
 8020692:	3301      	adds	r3, #1
 8020694:	4a39      	ldr	r2, [pc, #228]	@ (802077c <is_valid_ip_or_domain+0x11c>)
 8020696:	4413      	add	r3, r2
 8020698:	781b      	ldrb	r3, [r3, #0]
 802069a:	f003 0304 	and.w	r3, r3, #4
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d102      	bne.n	80206a8 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 80206a2:	2300      	movs	r3, #0
 80206a4:	623b      	str	r3, [r7, #32]
            break;
 80206a6:	e008      	b.n	80206ba <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 80206a8:	69fb      	ldr	r3, [r7, #28]
 80206aa:	3301      	adds	r3, #1
 80206ac:	61fb      	str	r3, [r7, #28]
 80206ae:	69fb      	ldr	r3, [r7, #28]
 80206b0:	687a      	ldr	r2, [r7, #4]
 80206b2:	4413      	add	r3, r2
 80206b4:	781b      	ldrb	r3, [r3, #0]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d1dd      	bne.n	8020676 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 80206ba:	6a3b      	ldr	r3, [r7, #32]
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d026      	beq.n	802070e <is_valid_ip_or_domain+0xae>
 80206c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206c2:	2b03      	cmp	r3, #3
 80206c4:	d123      	bne.n	802070e <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 80206ca:	2300      	movs	r3, #0
 80206cc:	617b      	str	r3, [r7, #20]
 80206ce:	e019      	b.n	8020704 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 80206d0:	69b8      	ldr	r0, [r7, #24]
 80206d2:	f000 f917 	bl	8020904 <atoi>
 80206d6:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 80206d8:	68fb      	ldr	r3, [r7, #12]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	db02      	blt.n	80206e4 <is_valid_ip_or_domain+0x84>
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	2bff      	cmp	r3, #255	@ 0xff
 80206e2:	dd01      	ble.n	80206e8 <is_valid_ip_or_domain+0x88>
 80206e4:	2300      	movs	r3, #0
 80206e6:	e044      	b.n	8020772 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 80206e8:	212e      	movs	r1, #46	@ 0x2e
 80206ea:	69b8      	ldr	r0, [r7, #24]
 80206ec:	f000 fc1f 	bl	8020f2e <strchr>
 80206f0:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 80206f2:	69bb      	ldr	r3, [r7, #24]
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d002      	beq.n	80206fe <is_valid_ip_or_domain+0x9e>
 80206f8:	69bb      	ldr	r3, [r7, #24]
 80206fa:	3301      	adds	r3, #1
 80206fc:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 80206fe:	697b      	ldr	r3, [r7, #20]
 8020700:	3301      	adds	r3, #1
 8020702:	617b      	str	r3, [r7, #20]
 8020704:	697b      	ldr	r3, [r7, #20]
 8020706:	2b03      	cmp	r3, #3
 8020708:	dde2      	ble.n	80206d0 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 802070a:	2301      	movs	r3, #1
 802070c:	e031      	b.n	8020772 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 802070e:	2300      	movs	r3, #0
 8020710:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 8020712:	2300      	movs	r3, #0
 8020714:	613b      	str	r3, [r7, #16]
 8020716:	e020      	b.n	802075a <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8020718:	693b      	ldr	r3, [r7, #16]
 802071a:	687a      	ldr	r2, [r7, #4]
 802071c:	4413      	add	r3, r2
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	2b2e      	cmp	r3, #46	@ 0x2e
 8020722:	d103      	bne.n	802072c <is_valid_ip_or_domain+0xcc>
            dot_count++;
 8020724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020726:	3301      	adds	r3, #1
 8020728:	627b      	str	r3, [r7, #36]	@ 0x24
 802072a:	e013      	b.n	8020754 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 802072c:	693b      	ldr	r3, [r7, #16]
 802072e:	687a      	ldr	r2, [r7, #4]
 8020730:	4413      	add	r3, r2
 8020732:	781b      	ldrb	r3, [r3, #0]
 8020734:	3301      	adds	r3, #1
 8020736:	4a11      	ldr	r2, [pc, #68]	@ (802077c <is_valid_ip_or_domain+0x11c>)
 8020738:	4413      	add	r3, r2
 802073a:	781b      	ldrb	r3, [r3, #0]
 802073c:	f003 0307 	and.w	r3, r3, #7
 8020740:	2b00      	cmp	r3, #0
 8020742:	d107      	bne.n	8020754 <is_valid_ip_or_domain+0xf4>
 8020744:	693b      	ldr	r3, [r7, #16]
 8020746:	687a      	ldr	r2, [r7, #4]
 8020748:	4413      	add	r3, r2
 802074a:	781b      	ldrb	r3, [r3, #0]
 802074c:	2b2d      	cmp	r3, #45	@ 0x2d
 802074e:	d001      	beq.n	8020754 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 8020750:	2300      	movs	r3, #0
 8020752:	e00e      	b.n	8020772 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 8020754:	693b      	ldr	r3, [r7, #16]
 8020756:	3301      	adds	r3, #1
 8020758:	613b      	str	r3, [r7, #16]
 802075a:	693b      	ldr	r3, [r7, #16]
 802075c:	687a      	ldr	r2, [r7, #4]
 802075e:	4413      	add	r3, r2
 8020760:	781b      	ldrb	r3, [r3, #0]
 8020762:	2b00      	cmp	r3, #0
 8020764:	d1d8      	bne.n	8020718 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8020766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020768:	2b00      	cmp	r3, #0
 802076a:	bfcc      	ite	gt
 802076c:	2301      	movgt	r3, #1
 802076e:	2300      	movle	r3, #0
 8020770:	b2db      	uxtb	r3, r3
}
 8020772:	4618      	mov	r0, r3
 8020774:	3728      	adds	r7, #40	@ 0x28
 8020776:	46bd      	mov	sp, r7
 8020778:	bd80      	pop	{r7, pc}
 802077a:	bf00      	nop
 802077c:	08027107 	.word	0x08027107

08020780 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8020780:	b580      	push	{r7, lr}
 8020782:	b084      	sub	sp, #16
 8020784:	af00      	add	r7, sp, #0
 8020786:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8020788:	6878      	ldr	r0, [r7, #4]
 802078a:	f000 f8bb 	bl	8020904 <atoi>
 802078e:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8020790:	68fb      	ldr	r3, [r7, #12]
 8020792:	2b00      	cmp	r3, #0
 8020794:	dd03      	ble.n	802079e <is_valid_port+0x1e>
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802079c:	db10      	blt.n	80207c0 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 802079e:	2300      	movs	r3, #0
 80207a0:	e013      	b.n	80207ca <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	781b      	ldrb	r3, [r3, #0]
 80207a6:	3301      	adds	r3, #1
 80207a8:	4a0a      	ldr	r2, [pc, #40]	@ (80207d4 <is_valid_port+0x54>)
 80207aa:	4413      	add	r3, r2
 80207ac:	781b      	ldrb	r3, [r3, #0]
 80207ae:	f003 0304 	and.w	r3, r3, #4
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d101      	bne.n	80207ba <is_valid_port+0x3a>
            return 0;
 80207b6:	2300      	movs	r3, #0
 80207b8:	e007      	b.n	80207ca <is_valid_port+0x4a>
        }
        port_str++;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	3301      	adds	r3, #1
 80207be:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	781b      	ldrb	r3, [r3, #0]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d1ec      	bne.n	80207a2 <is_valid_port+0x22>
    }
    return 1;
 80207c8:	2301      	movs	r3, #1
}
 80207ca:	4618      	mov	r0, r3
 80207cc:	3710      	adds	r7, #16
 80207ce:	46bd      	mov	sp, r7
 80207d0:	bd80      	pop	{r7, pc}
 80207d2:	bf00      	nop
 80207d4:	08027107 	.word	0x08027107

080207d8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 80207d8:	b580      	push	{r7, lr}
 80207da:	b0c6      	sub	sp, #280	@ 0x118
 80207dc:	af00      	add	r7, sp, #0
 80207de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80207e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80207e6:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 80207e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80207ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80207f0:	6818      	ldr	r0, [r3, #0]
 80207f2:	f7ff ff1f 	bl	8020634 <has_mqtt_prefix>
 80207f6:	4603      	mov	r3, r0
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d105      	bne.n	8020808 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 80207fc:	482e      	ldr	r0, [pc, #184]	@ (80208b8 <is_valid_mqtt_url+0xe0>)
 80207fe:	f000 fb7f 	bl	8020f00 <puts>
        return -1;
 8020802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020806:	e051      	b.n	80208ac <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8020808:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 802080c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	3307      	adds	r3, #7
 8020814:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8020818:	213a      	movs	r1, #58	@ 0x3a
 802081a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 802081e:	f000 fb86 	bl	8020f2e <strchr>
 8020822:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 8020826:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802082a:	2b00      	cmp	r3, #0
 802082c:	d105      	bne.n	802083a <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 802082e:	4823      	ldr	r0, [pc, #140]	@ (80208bc <is_valid_mqtt_url+0xe4>)
 8020830:	f000 fb66 	bl	8020f00 <puts>
        return -2;
 8020834:	f06f 0301 	mvn.w	r3, #1
 8020838:	e038      	b.n	80208ac <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 802083a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 802083e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020842:	1ad3      	subs	r3, r2, r3
 8020844:	461a      	mov	r2, r3
 8020846:	f107 030c 	add.w	r3, r7, #12
 802084a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 802084e:	4618      	mov	r0, r3
 8020850:	f000 fb9d 	bl	8020f8e <strncpy>
    host[colon - host_start] = '\0';
 8020854:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8020858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802085c:	1ad3      	subs	r3, r2, r3
 802085e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8020862:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8020866:	2100      	movs	r1, #0
 8020868:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 802086a:	f107 030c 	add.w	r3, r7, #12
 802086e:	4618      	mov	r0, r3
 8020870:	f7ff fef6 	bl	8020660 <is_valid_ip_or_domain>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	d105      	bne.n	8020886 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 802087a:	4811      	ldr	r0, [pc, #68]	@ (80208c0 <is_valid_mqtt_url+0xe8>)
 802087c:	f000 fb40 	bl	8020f00 <puts>
        return -3;
 8020880:	f06f 0302 	mvn.w	r3, #2
 8020884:	e012      	b.n	80208ac <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 8020886:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802088a:	3301      	adds	r3, #1
 802088c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8020890:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8020894:	f7ff ff74 	bl	8020780 <is_valid_port>
 8020898:	4603      	mov	r3, r0
 802089a:	2b00      	cmp	r3, #0
 802089c:	d105      	bne.n	80208aa <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 802089e:	4809      	ldr	r0, [pc, #36]	@ (80208c4 <is_valid_mqtt_url+0xec>)
 80208a0:	f000 fb2e 	bl	8020f00 <puts>
        return -4;
 80208a4:	f06f 0303 	mvn.w	r3, #3
 80208a8:	e000      	b.n	80208ac <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 80208aa:	2300      	movs	r3, #0
}
 80208ac:	4618      	mov	r0, r3
 80208ae:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80208b2:	46bd      	mov	sp, r7
 80208b4:	bd80      	pop	{r7, pc}
 80208b6:	bf00      	nop
 80208b8:	08026884 	.word	0x08026884
 80208bc:	080268b0 	.word	0x080268b0
 80208c0:	080268e4 	.word	0x080268e4
 80208c4:	08026908 	.word	0x08026908

080208c8 <__assert_func>:
 80208c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80208ca:	4614      	mov	r4, r2
 80208cc:	461a      	mov	r2, r3
 80208ce:	4b09      	ldr	r3, [pc, #36]	@ (80208f4 <__assert_func+0x2c>)
 80208d0:	681b      	ldr	r3, [r3, #0]
 80208d2:	4605      	mov	r5, r0
 80208d4:	68d8      	ldr	r0, [r3, #12]
 80208d6:	b954      	cbnz	r4, 80208ee <__assert_func+0x26>
 80208d8:	4b07      	ldr	r3, [pc, #28]	@ (80208f8 <__assert_func+0x30>)
 80208da:	461c      	mov	r4, r3
 80208dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80208e0:	9100      	str	r1, [sp, #0]
 80208e2:	462b      	mov	r3, r5
 80208e4:	4905      	ldr	r1, [pc, #20]	@ (80208fc <__assert_func+0x34>)
 80208e6:	f000 f9e5 	bl	8020cb4 <fiprintf>
 80208ea:	f000 fcb0 	bl	802124e <abort>
 80208ee:	4b04      	ldr	r3, [pc, #16]	@ (8020900 <__assert_func+0x38>)
 80208f0:	e7f4      	b.n	80208dc <__assert_func+0x14>
 80208f2:	bf00      	nop
 80208f4:	200002ac 	.word	0x200002ac
 80208f8:	08027097 	.word	0x08027097
 80208fc:	08027069 	.word	0x08027069
 8020900:	0802705c 	.word	0x0802705c

08020904 <atoi>:
 8020904:	220a      	movs	r2, #10
 8020906:	2100      	movs	r1, #0
 8020908:	f000 ba62 	b.w	8020dd0 <strtol>

0802090c <sniprintf>:
 802090c:	b40c      	push	{r2, r3}
 802090e:	b530      	push	{r4, r5, lr}
 8020910:	4b17      	ldr	r3, [pc, #92]	@ (8020970 <sniprintf+0x64>)
 8020912:	1e0c      	subs	r4, r1, #0
 8020914:	681d      	ldr	r5, [r3, #0]
 8020916:	b09d      	sub	sp, #116	@ 0x74
 8020918:	da08      	bge.n	802092c <sniprintf+0x20>
 802091a:	238b      	movs	r3, #139	@ 0x8b
 802091c:	602b      	str	r3, [r5, #0]
 802091e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020922:	b01d      	add	sp, #116	@ 0x74
 8020924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020928:	b002      	add	sp, #8
 802092a:	4770      	bx	lr
 802092c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020930:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020934:	bf14      	ite	ne
 8020936:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802093a:	4623      	moveq	r3, r4
 802093c:	9304      	str	r3, [sp, #16]
 802093e:	9307      	str	r3, [sp, #28]
 8020940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020944:	9002      	str	r0, [sp, #8]
 8020946:	9006      	str	r0, [sp, #24]
 8020948:	f8ad 3016 	strh.w	r3, [sp, #22]
 802094c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802094e:	ab21      	add	r3, sp, #132	@ 0x84
 8020950:	a902      	add	r1, sp, #8
 8020952:	4628      	mov	r0, r5
 8020954:	9301      	str	r3, [sp, #4]
 8020956:	f000 fd27 	bl	80213a8 <_svfiprintf_r>
 802095a:	1c43      	adds	r3, r0, #1
 802095c:	bfbc      	itt	lt
 802095e:	238b      	movlt	r3, #139	@ 0x8b
 8020960:	602b      	strlt	r3, [r5, #0]
 8020962:	2c00      	cmp	r4, #0
 8020964:	d0dd      	beq.n	8020922 <sniprintf+0x16>
 8020966:	9b02      	ldr	r3, [sp, #8]
 8020968:	2200      	movs	r2, #0
 802096a:	701a      	strb	r2, [r3, #0]
 802096c:	e7d9      	b.n	8020922 <sniprintf+0x16>
 802096e:	bf00      	nop
 8020970:	200002ac 	.word	0x200002ac

08020974 <siprintf>:
 8020974:	b40e      	push	{r1, r2, r3}
 8020976:	b500      	push	{lr}
 8020978:	b09c      	sub	sp, #112	@ 0x70
 802097a:	ab1d      	add	r3, sp, #116	@ 0x74
 802097c:	9002      	str	r0, [sp, #8]
 802097e:	9006      	str	r0, [sp, #24]
 8020980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8020984:	4809      	ldr	r0, [pc, #36]	@ (80209ac <siprintf+0x38>)
 8020986:	9107      	str	r1, [sp, #28]
 8020988:	9104      	str	r1, [sp, #16]
 802098a:	4909      	ldr	r1, [pc, #36]	@ (80209b0 <siprintf+0x3c>)
 802098c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020990:	9105      	str	r1, [sp, #20]
 8020992:	6800      	ldr	r0, [r0, #0]
 8020994:	9301      	str	r3, [sp, #4]
 8020996:	a902      	add	r1, sp, #8
 8020998:	f000 fd06 	bl	80213a8 <_svfiprintf_r>
 802099c:	9b02      	ldr	r3, [sp, #8]
 802099e:	2200      	movs	r2, #0
 80209a0:	701a      	strb	r2, [r3, #0]
 80209a2:	b01c      	add	sp, #112	@ 0x70
 80209a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80209a8:	b003      	add	sp, #12
 80209aa:	4770      	bx	lr
 80209ac:	200002ac 	.word	0x200002ac
 80209b0:	ffff0208 	.word	0xffff0208

080209b4 <siscanf>:
 80209b4:	b40e      	push	{r1, r2, r3}
 80209b6:	b530      	push	{r4, r5, lr}
 80209b8:	b09c      	sub	sp, #112	@ 0x70
 80209ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 80209bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80209c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80209c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80209c8:	9002      	str	r0, [sp, #8]
 80209ca:	9006      	str	r0, [sp, #24]
 80209cc:	f7df fc58 	bl	8000280 <strlen>
 80209d0:	4b0b      	ldr	r3, [pc, #44]	@ (8020a00 <siscanf+0x4c>)
 80209d2:	9003      	str	r0, [sp, #12]
 80209d4:	9007      	str	r0, [sp, #28]
 80209d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80209d8:	480a      	ldr	r0, [pc, #40]	@ (8020a04 <siscanf+0x50>)
 80209da:	9401      	str	r4, [sp, #4]
 80209dc:	2300      	movs	r3, #0
 80209de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80209e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80209e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80209e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80209ea:	462a      	mov	r2, r5
 80209ec:	4623      	mov	r3, r4
 80209ee:	a902      	add	r1, sp, #8
 80209f0:	6800      	ldr	r0, [r0, #0]
 80209f2:	f000 fe2d 	bl	8021650 <__ssvfiscanf_r>
 80209f6:	b01c      	add	sp, #112	@ 0x70
 80209f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80209fc:	b003      	add	sp, #12
 80209fe:	4770      	bx	lr
 8020a00:	08020a2b 	.word	0x08020a2b
 8020a04:	200002ac 	.word	0x200002ac

08020a08 <__sread>:
 8020a08:	b510      	push	{r4, lr}
 8020a0a:	460c      	mov	r4, r1
 8020a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a10:	f000 fbb6 	bl	8021180 <_read_r>
 8020a14:	2800      	cmp	r0, #0
 8020a16:	bfab      	itete	ge
 8020a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8020a1c:	181b      	addge	r3, r3, r0
 8020a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020a22:	bfac      	ite	ge
 8020a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020a26:	81a3      	strhlt	r3, [r4, #12]
 8020a28:	bd10      	pop	{r4, pc}

08020a2a <__seofread>:
 8020a2a:	2000      	movs	r0, #0
 8020a2c:	4770      	bx	lr

08020a2e <__swrite>:
 8020a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a32:	461f      	mov	r7, r3
 8020a34:	898b      	ldrh	r3, [r1, #12]
 8020a36:	05db      	lsls	r3, r3, #23
 8020a38:	4605      	mov	r5, r0
 8020a3a:	460c      	mov	r4, r1
 8020a3c:	4616      	mov	r6, r2
 8020a3e:	d505      	bpl.n	8020a4c <__swrite+0x1e>
 8020a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a44:	2302      	movs	r3, #2
 8020a46:	2200      	movs	r2, #0
 8020a48:	f000 fb88 	bl	802115c <_lseek_r>
 8020a4c:	89a3      	ldrh	r3, [r4, #12]
 8020a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020a56:	81a3      	strh	r3, [r4, #12]
 8020a58:	4632      	mov	r2, r6
 8020a5a:	463b      	mov	r3, r7
 8020a5c:	4628      	mov	r0, r5
 8020a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020a62:	f000 bb9f 	b.w	80211a4 <_write_r>

08020a66 <__sseek>:
 8020a66:	b510      	push	{r4, lr}
 8020a68:	460c      	mov	r4, r1
 8020a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a6e:	f000 fb75 	bl	802115c <_lseek_r>
 8020a72:	1c43      	adds	r3, r0, #1
 8020a74:	89a3      	ldrh	r3, [r4, #12]
 8020a76:	bf15      	itete	ne
 8020a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020a82:	81a3      	strheq	r3, [r4, #12]
 8020a84:	bf18      	it	ne
 8020a86:	81a3      	strhne	r3, [r4, #12]
 8020a88:	bd10      	pop	{r4, pc}

08020a8a <__sclose>:
 8020a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a8e:	f000 baff 	b.w	8021090 <_close_r>
	...

08020a94 <srand>:
 8020a94:	b538      	push	{r3, r4, r5, lr}
 8020a96:	4b10      	ldr	r3, [pc, #64]	@ (8020ad8 <srand+0x44>)
 8020a98:	681d      	ldr	r5, [r3, #0]
 8020a9a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020a9c:	4604      	mov	r4, r0
 8020a9e:	b9b3      	cbnz	r3, 8020ace <srand+0x3a>
 8020aa0:	2018      	movs	r0, #24
 8020aa2:	f001 f88b 	bl	8021bbc <malloc>
 8020aa6:	4602      	mov	r2, r0
 8020aa8:	6328      	str	r0, [r5, #48]	@ 0x30
 8020aaa:	b920      	cbnz	r0, 8020ab6 <srand+0x22>
 8020aac:	4b0b      	ldr	r3, [pc, #44]	@ (8020adc <srand+0x48>)
 8020aae:	480c      	ldr	r0, [pc, #48]	@ (8020ae0 <srand+0x4c>)
 8020ab0:	2146      	movs	r1, #70	@ 0x46
 8020ab2:	f7ff ff09 	bl	80208c8 <__assert_func>
 8020ab6:	490b      	ldr	r1, [pc, #44]	@ (8020ae4 <srand+0x50>)
 8020ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8020ae8 <srand+0x54>)
 8020aba:	e9c0 1300 	strd	r1, r3, [r0]
 8020abe:	4b0b      	ldr	r3, [pc, #44]	@ (8020aec <srand+0x58>)
 8020ac0:	6083      	str	r3, [r0, #8]
 8020ac2:	230b      	movs	r3, #11
 8020ac4:	8183      	strh	r3, [r0, #12]
 8020ac6:	2100      	movs	r1, #0
 8020ac8:	2001      	movs	r0, #1
 8020aca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020ace:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020ad0:	2200      	movs	r2, #0
 8020ad2:	611c      	str	r4, [r3, #16]
 8020ad4:	615a      	str	r2, [r3, #20]
 8020ad6:	bd38      	pop	{r3, r4, r5, pc}
 8020ad8:	200002ac 	.word	0x200002ac
 8020adc:	08027098 	.word	0x08027098
 8020ae0:	080270af 	.word	0x080270af
 8020ae4:	abcd330e 	.word	0xabcd330e
 8020ae8:	e66d1234 	.word	0xe66d1234
 8020aec:	0005deec 	.word	0x0005deec

08020af0 <rand>:
 8020af0:	4b16      	ldr	r3, [pc, #88]	@ (8020b4c <rand+0x5c>)
 8020af2:	b510      	push	{r4, lr}
 8020af4:	681c      	ldr	r4, [r3, #0]
 8020af6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020af8:	b9b3      	cbnz	r3, 8020b28 <rand+0x38>
 8020afa:	2018      	movs	r0, #24
 8020afc:	f001 f85e 	bl	8021bbc <malloc>
 8020b00:	4602      	mov	r2, r0
 8020b02:	6320      	str	r0, [r4, #48]	@ 0x30
 8020b04:	b920      	cbnz	r0, 8020b10 <rand+0x20>
 8020b06:	4b12      	ldr	r3, [pc, #72]	@ (8020b50 <rand+0x60>)
 8020b08:	4812      	ldr	r0, [pc, #72]	@ (8020b54 <rand+0x64>)
 8020b0a:	2152      	movs	r1, #82	@ 0x52
 8020b0c:	f7ff fedc 	bl	80208c8 <__assert_func>
 8020b10:	4911      	ldr	r1, [pc, #68]	@ (8020b58 <rand+0x68>)
 8020b12:	4b12      	ldr	r3, [pc, #72]	@ (8020b5c <rand+0x6c>)
 8020b14:	e9c0 1300 	strd	r1, r3, [r0]
 8020b18:	4b11      	ldr	r3, [pc, #68]	@ (8020b60 <rand+0x70>)
 8020b1a:	6083      	str	r3, [r0, #8]
 8020b1c:	230b      	movs	r3, #11
 8020b1e:	8183      	strh	r3, [r0, #12]
 8020b20:	2100      	movs	r1, #0
 8020b22:	2001      	movs	r0, #1
 8020b24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020b28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020b2a:	480e      	ldr	r0, [pc, #56]	@ (8020b64 <rand+0x74>)
 8020b2c:	690b      	ldr	r3, [r1, #16]
 8020b2e:	694c      	ldr	r4, [r1, #20]
 8020b30:	4a0d      	ldr	r2, [pc, #52]	@ (8020b68 <rand+0x78>)
 8020b32:	4358      	muls	r0, r3
 8020b34:	fb02 0004 	mla	r0, r2, r4, r0
 8020b38:	fba3 3202 	umull	r3, r2, r3, r2
 8020b3c:	3301      	adds	r3, #1
 8020b3e:	eb40 0002 	adc.w	r0, r0, r2
 8020b42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020b46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020b4a:	bd10      	pop	{r4, pc}
 8020b4c:	200002ac 	.word	0x200002ac
 8020b50:	08027098 	.word	0x08027098
 8020b54:	080270af 	.word	0x080270af
 8020b58:	abcd330e 	.word	0xabcd330e
 8020b5c:	e66d1234 	.word	0xe66d1234
 8020b60:	0005deec 	.word	0x0005deec
 8020b64:	5851f42d 	.word	0x5851f42d
 8020b68:	4c957f2d 	.word	0x4c957f2d

08020b6c <std>:
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	b510      	push	{r4, lr}
 8020b70:	4604      	mov	r4, r0
 8020b72:	e9c0 3300 	strd	r3, r3, [r0]
 8020b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020b7a:	6083      	str	r3, [r0, #8]
 8020b7c:	8181      	strh	r1, [r0, #12]
 8020b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8020b80:	81c2      	strh	r2, [r0, #14]
 8020b82:	6183      	str	r3, [r0, #24]
 8020b84:	4619      	mov	r1, r3
 8020b86:	2208      	movs	r2, #8
 8020b88:	305c      	adds	r0, #92	@ 0x5c
 8020b8a:	f000 fa79 	bl	8021080 <memset>
 8020b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8020bc4 <std+0x58>)
 8020b90:	6263      	str	r3, [r4, #36]	@ 0x24
 8020b92:	4b0d      	ldr	r3, [pc, #52]	@ (8020bc8 <std+0x5c>)
 8020b94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020b96:	4b0d      	ldr	r3, [pc, #52]	@ (8020bcc <std+0x60>)
 8020b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8020bd0 <std+0x64>)
 8020b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8020b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8020bd4 <std+0x68>)
 8020ba0:	6224      	str	r4, [r4, #32]
 8020ba2:	429c      	cmp	r4, r3
 8020ba4:	d006      	beq.n	8020bb4 <std+0x48>
 8020ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020baa:	4294      	cmp	r4, r2
 8020bac:	d002      	beq.n	8020bb4 <std+0x48>
 8020bae:	33d0      	adds	r3, #208	@ 0xd0
 8020bb0:	429c      	cmp	r4, r3
 8020bb2:	d105      	bne.n	8020bc0 <std+0x54>
 8020bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020bbc:	f000 bb2e 	b.w	802121c <__retarget_lock_init_recursive>
 8020bc0:	bd10      	pop	{r4, pc}
 8020bc2:	bf00      	nop
 8020bc4:	08020a09 	.word	0x08020a09
 8020bc8:	08020a2f 	.word	0x08020a2f
 8020bcc:	08020a67 	.word	0x08020a67
 8020bd0:	08020a8b 	.word	0x08020a8b
 8020bd4:	20017458 	.word	0x20017458

08020bd8 <stdio_exit_handler>:
 8020bd8:	4a02      	ldr	r2, [pc, #8]	@ (8020be4 <stdio_exit_handler+0xc>)
 8020bda:	4903      	ldr	r1, [pc, #12]	@ (8020be8 <stdio_exit_handler+0x10>)
 8020bdc:	4803      	ldr	r0, [pc, #12]	@ (8020bec <stdio_exit_handler+0x14>)
 8020bde:	f000 b901 	b.w	8020de4 <_fwalk_sglue>
 8020be2:	bf00      	nop
 8020be4:	200002a0 	.word	0x200002a0
 8020be8:	08022445 	.word	0x08022445
 8020bec:	200002b0 	.word	0x200002b0

08020bf0 <cleanup_stdio>:
 8020bf0:	6841      	ldr	r1, [r0, #4]
 8020bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8020c24 <cleanup_stdio+0x34>)
 8020bf4:	4299      	cmp	r1, r3
 8020bf6:	b510      	push	{r4, lr}
 8020bf8:	4604      	mov	r4, r0
 8020bfa:	d001      	beq.n	8020c00 <cleanup_stdio+0x10>
 8020bfc:	f001 fc22 	bl	8022444 <_fflush_r>
 8020c00:	68a1      	ldr	r1, [r4, #8]
 8020c02:	4b09      	ldr	r3, [pc, #36]	@ (8020c28 <cleanup_stdio+0x38>)
 8020c04:	4299      	cmp	r1, r3
 8020c06:	d002      	beq.n	8020c0e <cleanup_stdio+0x1e>
 8020c08:	4620      	mov	r0, r4
 8020c0a:	f001 fc1b 	bl	8022444 <_fflush_r>
 8020c0e:	68e1      	ldr	r1, [r4, #12]
 8020c10:	4b06      	ldr	r3, [pc, #24]	@ (8020c2c <cleanup_stdio+0x3c>)
 8020c12:	4299      	cmp	r1, r3
 8020c14:	d004      	beq.n	8020c20 <cleanup_stdio+0x30>
 8020c16:	4620      	mov	r0, r4
 8020c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c1c:	f001 bc12 	b.w	8022444 <_fflush_r>
 8020c20:	bd10      	pop	{r4, pc}
 8020c22:	bf00      	nop
 8020c24:	20017458 	.word	0x20017458
 8020c28:	200174c0 	.word	0x200174c0
 8020c2c:	20017528 	.word	0x20017528

08020c30 <global_stdio_init.part.0>:
 8020c30:	b510      	push	{r4, lr}
 8020c32:	4b0b      	ldr	r3, [pc, #44]	@ (8020c60 <global_stdio_init.part.0+0x30>)
 8020c34:	4c0b      	ldr	r4, [pc, #44]	@ (8020c64 <global_stdio_init.part.0+0x34>)
 8020c36:	4a0c      	ldr	r2, [pc, #48]	@ (8020c68 <global_stdio_init.part.0+0x38>)
 8020c38:	601a      	str	r2, [r3, #0]
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	2104      	movs	r1, #4
 8020c40:	f7ff ff94 	bl	8020b6c <std>
 8020c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020c48:	2201      	movs	r2, #1
 8020c4a:	2109      	movs	r1, #9
 8020c4c:	f7ff ff8e 	bl	8020b6c <std>
 8020c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020c54:	2202      	movs	r2, #2
 8020c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c5a:	2112      	movs	r1, #18
 8020c5c:	f7ff bf86 	b.w	8020b6c <std>
 8020c60:	20017590 	.word	0x20017590
 8020c64:	20017458 	.word	0x20017458
 8020c68:	08020bd9 	.word	0x08020bd9

08020c6c <__sfp_lock_acquire>:
 8020c6c:	4801      	ldr	r0, [pc, #4]	@ (8020c74 <__sfp_lock_acquire+0x8>)
 8020c6e:	f000 bad6 	b.w	802121e <__retarget_lock_acquire_recursive>
 8020c72:	bf00      	nop
 8020c74:	20017599 	.word	0x20017599

08020c78 <__sfp_lock_release>:
 8020c78:	4801      	ldr	r0, [pc, #4]	@ (8020c80 <__sfp_lock_release+0x8>)
 8020c7a:	f000 bad1 	b.w	8021220 <__retarget_lock_release_recursive>
 8020c7e:	bf00      	nop
 8020c80:	20017599 	.word	0x20017599

08020c84 <__sinit>:
 8020c84:	b510      	push	{r4, lr}
 8020c86:	4604      	mov	r4, r0
 8020c88:	f7ff fff0 	bl	8020c6c <__sfp_lock_acquire>
 8020c8c:	6a23      	ldr	r3, [r4, #32]
 8020c8e:	b11b      	cbz	r3, 8020c98 <__sinit+0x14>
 8020c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c94:	f7ff bff0 	b.w	8020c78 <__sfp_lock_release>
 8020c98:	4b04      	ldr	r3, [pc, #16]	@ (8020cac <__sinit+0x28>)
 8020c9a:	6223      	str	r3, [r4, #32]
 8020c9c:	4b04      	ldr	r3, [pc, #16]	@ (8020cb0 <__sinit+0x2c>)
 8020c9e:	681b      	ldr	r3, [r3, #0]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d1f5      	bne.n	8020c90 <__sinit+0xc>
 8020ca4:	f7ff ffc4 	bl	8020c30 <global_stdio_init.part.0>
 8020ca8:	e7f2      	b.n	8020c90 <__sinit+0xc>
 8020caa:	bf00      	nop
 8020cac:	08020bf1 	.word	0x08020bf1
 8020cb0:	20017590 	.word	0x20017590

08020cb4 <fiprintf>:
 8020cb4:	b40e      	push	{r1, r2, r3}
 8020cb6:	b503      	push	{r0, r1, lr}
 8020cb8:	4601      	mov	r1, r0
 8020cba:	ab03      	add	r3, sp, #12
 8020cbc:	4805      	ldr	r0, [pc, #20]	@ (8020cd4 <fiprintf+0x20>)
 8020cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8020cc2:	6800      	ldr	r0, [r0, #0]
 8020cc4:	9301      	str	r3, [sp, #4]
 8020cc6:	f000 fe61 	bl	802198c <_vfiprintf_r>
 8020cca:	b002      	add	sp, #8
 8020ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020cd0:	b003      	add	sp, #12
 8020cd2:	4770      	bx	lr
 8020cd4:	200002ac 	.word	0x200002ac

08020cd8 <_strtol_l.constprop.0>:
 8020cd8:	2b24      	cmp	r3, #36	@ 0x24
 8020cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020cde:	4686      	mov	lr, r0
 8020ce0:	4690      	mov	r8, r2
 8020ce2:	d801      	bhi.n	8020ce8 <_strtol_l.constprop.0+0x10>
 8020ce4:	2b01      	cmp	r3, #1
 8020ce6:	d106      	bne.n	8020cf6 <_strtol_l.constprop.0+0x1e>
 8020ce8:	f000 fa6e 	bl	80211c8 <__errno>
 8020cec:	2316      	movs	r3, #22
 8020cee:	6003      	str	r3, [r0, #0]
 8020cf0:	2000      	movs	r0, #0
 8020cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cf6:	4834      	ldr	r0, [pc, #208]	@ (8020dc8 <_strtol_l.constprop.0+0xf0>)
 8020cf8:	460d      	mov	r5, r1
 8020cfa:	462a      	mov	r2, r5
 8020cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020d00:	5d06      	ldrb	r6, [r0, r4]
 8020d02:	f016 0608 	ands.w	r6, r6, #8
 8020d06:	d1f8      	bne.n	8020cfa <_strtol_l.constprop.0+0x22>
 8020d08:	2c2d      	cmp	r4, #45	@ 0x2d
 8020d0a:	d12d      	bne.n	8020d68 <_strtol_l.constprop.0+0x90>
 8020d0c:	782c      	ldrb	r4, [r5, #0]
 8020d0e:	2601      	movs	r6, #1
 8020d10:	1c95      	adds	r5, r2, #2
 8020d12:	f033 0210 	bics.w	r2, r3, #16
 8020d16:	d109      	bne.n	8020d2c <_strtol_l.constprop.0+0x54>
 8020d18:	2c30      	cmp	r4, #48	@ 0x30
 8020d1a:	d12a      	bne.n	8020d72 <_strtol_l.constprop.0+0x9a>
 8020d1c:	782a      	ldrb	r2, [r5, #0]
 8020d1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020d22:	2a58      	cmp	r2, #88	@ 0x58
 8020d24:	d125      	bne.n	8020d72 <_strtol_l.constprop.0+0x9a>
 8020d26:	786c      	ldrb	r4, [r5, #1]
 8020d28:	2310      	movs	r3, #16
 8020d2a:	3502      	adds	r5, #2
 8020d2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8020d30:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8020d34:	2200      	movs	r2, #0
 8020d36:	fbbc f9f3 	udiv	r9, ip, r3
 8020d3a:	4610      	mov	r0, r2
 8020d3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8020d40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8020d44:	2f09      	cmp	r7, #9
 8020d46:	d81b      	bhi.n	8020d80 <_strtol_l.constprop.0+0xa8>
 8020d48:	463c      	mov	r4, r7
 8020d4a:	42a3      	cmp	r3, r4
 8020d4c:	dd27      	ble.n	8020d9e <_strtol_l.constprop.0+0xc6>
 8020d4e:	1c57      	adds	r7, r2, #1
 8020d50:	d007      	beq.n	8020d62 <_strtol_l.constprop.0+0x8a>
 8020d52:	4581      	cmp	r9, r0
 8020d54:	d320      	bcc.n	8020d98 <_strtol_l.constprop.0+0xc0>
 8020d56:	d101      	bne.n	8020d5c <_strtol_l.constprop.0+0x84>
 8020d58:	45a2      	cmp	sl, r4
 8020d5a:	db1d      	blt.n	8020d98 <_strtol_l.constprop.0+0xc0>
 8020d5c:	fb00 4003 	mla	r0, r0, r3, r4
 8020d60:	2201      	movs	r2, #1
 8020d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020d66:	e7eb      	b.n	8020d40 <_strtol_l.constprop.0+0x68>
 8020d68:	2c2b      	cmp	r4, #43	@ 0x2b
 8020d6a:	bf04      	itt	eq
 8020d6c:	782c      	ldrbeq	r4, [r5, #0]
 8020d6e:	1c95      	addeq	r5, r2, #2
 8020d70:	e7cf      	b.n	8020d12 <_strtol_l.constprop.0+0x3a>
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d1da      	bne.n	8020d2c <_strtol_l.constprop.0+0x54>
 8020d76:	2c30      	cmp	r4, #48	@ 0x30
 8020d78:	bf0c      	ite	eq
 8020d7a:	2308      	moveq	r3, #8
 8020d7c:	230a      	movne	r3, #10
 8020d7e:	e7d5      	b.n	8020d2c <_strtol_l.constprop.0+0x54>
 8020d80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020d84:	2f19      	cmp	r7, #25
 8020d86:	d801      	bhi.n	8020d8c <_strtol_l.constprop.0+0xb4>
 8020d88:	3c37      	subs	r4, #55	@ 0x37
 8020d8a:	e7de      	b.n	8020d4a <_strtol_l.constprop.0+0x72>
 8020d8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020d90:	2f19      	cmp	r7, #25
 8020d92:	d804      	bhi.n	8020d9e <_strtol_l.constprop.0+0xc6>
 8020d94:	3c57      	subs	r4, #87	@ 0x57
 8020d96:	e7d8      	b.n	8020d4a <_strtol_l.constprop.0+0x72>
 8020d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020d9c:	e7e1      	b.n	8020d62 <_strtol_l.constprop.0+0x8a>
 8020d9e:	1c53      	adds	r3, r2, #1
 8020da0:	d108      	bne.n	8020db4 <_strtol_l.constprop.0+0xdc>
 8020da2:	2322      	movs	r3, #34	@ 0x22
 8020da4:	f8ce 3000 	str.w	r3, [lr]
 8020da8:	4660      	mov	r0, ip
 8020daa:	f1b8 0f00 	cmp.w	r8, #0
 8020dae:	d0a0      	beq.n	8020cf2 <_strtol_l.constprop.0+0x1a>
 8020db0:	1e69      	subs	r1, r5, #1
 8020db2:	e006      	b.n	8020dc2 <_strtol_l.constprop.0+0xea>
 8020db4:	b106      	cbz	r6, 8020db8 <_strtol_l.constprop.0+0xe0>
 8020db6:	4240      	negs	r0, r0
 8020db8:	f1b8 0f00 	cmp.w	r8, #0
 8020dbc:	d099      	beq.n	8020cf2 <_strtol_l.constprop.0+0x1a>
 8020dbe:	2a00      	cmp	r2, #0
 8020dc0:	d1f6      	bne.n	8020db0 <_strtol_l.constprop.0+0xd8>
 8020dc2:	f8c8 1000 	str.w	r1, [r8]
 8020dc6:	e794      	b.n	8020cf2 <_strtol_l.constprop.0+0x1a>
 8020dc8:	08027108 	.word	0x08027108

08020dcc <_strtol_r>:
 8020dcc:	f7ff bf84 	b.w	8020cd8 <_strtol_l.constprop.0>

08020dd0 <strtol>:
 8020dd0:	4613      	mov	r3, r2
 8020dd2:	460a      	mov	r2, r1
 8020dd4:	4601      	mov	r1, r0
 8020dd6:	4802      	ldr	r0, [pc, #8]	@ (8020de0 <strtol+0x10>)
 8020dd8:	6800      	ldr	r0, [r0, #0]
 8020dda:	f7ff bf7d 	b.w	8020cd8 <_strtol_l.constprop.0>
 8020dde:	bf00      	nop
 8020de0:	200002ac 	.word	0x200002ac

08020de4 <_fwalk_sglue>:
 8020de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020de8:	4607      	mov	r7, r0
 8020dea:	4688      	mov	r8, r1
 8020dec:	4614      	mov	r4, r2
 8020dee:	2600      	movs	r6, #0
 8020df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020df4:	f1b9 0901 	subs.w	r9, r9, #1
 8020df8:	d505      	bpl.n	8020e06 <_fwalk_sglue+0x22>
 8020dfa:	6824      	ldr	r4, [r4, #0]
 8020dfc:	2c00      	cmp	r4, #0
 8020dfe:	d1f7      	bne.n	8020df0 <_fwalk_sglue+0xc>
 8020e00:	4630      	mov	r0, r6
 8020e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020e06:	89ab      	ldrh	r3, [r5, #12]
 8020e08:	2b01      	cmp	r3, #1
 8020e0a:	d907      	bls.n	8020e1c <_fwalk_sglue+0x38>
 8020e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020e10:	3301      	adds	r3, #1
 8020e12:	d003      	beq.n	8020e1c <_fwalk_sglue+0x38>
 8020e14:	4629      	mov	r1, r5
 8020e16:	4638      	mov	r0, r7
 8020e18:	47c0      	blx	r8
 8020e1a:	4306      	orrs	r6, r0
 8020e1c:	3568      	adds	r5, #104	@ 0x68
 8020e1e:	e7e9      	b.n	8020df4 <_fwalk_sglue+0x10>

08020e20 <iprintf>:
 8020e20:	b40f      	push	{r0, r1, r2, r3}
 8020e22:	b507      	push	{r0, r1, r2, lr}
 8020e24:	4906      	ldr	r1, [pc, #24]	@ (8020e40 <iprintf+0x20>)
 8020e26:	ab04      	add	r3, sp, #16
 8020e28:	6808      	ldr	r0, [r1, #0]
 8020e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8020e2e:	6881      	ldr	r1, [r0, #8]
 8020e30:	9301      	str	r3, [sp, #4]
 8020e32:	f000 fdab 	bl	802198c <_vfiprintf_r>
 8020e36:	b003      	add	sp, #12
 8020e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8020e3c:	b004      	add	sp, #16
 8020e3e:	4770      	bx	lr
 8020e40:	200002ac 	.word	0x200002ac

08020e44 <putchar>:
 8020e44:	4b02      	ldr	r3, [pc, #8]	@ (8020e50 <putchar+0xc>)
 8020e46:	4601      	mov	r1, r0
 8020e48:	6818      	ldr	r0, [r3, #0]
 8020e4a:	6882      	ldr	r2, [r0, #8]
 8020e4c:	f001 bcfc 	b.w	8022848 <_putc_r>
 8020e50:	200002ac 	.word	0x200002ac

08020e54 <_puts_r>:
 8020e54:	6a03      	ldr	r3, [r0, #32]
 8020e56:	b570      	push	{r4, r5, r6, lr}
 8020e58:	6884      	ldr	r4, [r0, #8]
 8020e5a:	4605      	mov	r5, r0
 8020e5c:	460e      	mov	r6, r1
 8020e5e:	b90b      	cbnz	r3, 8020e64 <_puts_r+0x10>
 8020e60:	f7ff ff10 	bl	8020c84 <__sinit>
 8020e64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020e66:	07db      	lsls	r3, r3, #31
 8020e68:	d405      	bmi.n	8020e76 <_puts_r+0x22>
 8020e6a:	89a3      	ldrh	r3, [r4, #12]
 8020e6c:	0598      	lsls	r0, r3, #22
 8020e6e:	d402      	bmi.n	8020e76 <_puts_r+0x22>
 8020e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e72:	f000 f9d4 	bl	802121e <__retarget_lock_acquire_recursive>
 8020e76:	89a3      	ldrh	r3, [r4, #12]
 8020e78:	0719      	lsls	r1, r3, #28
 8020e7a:	d502      	bpl.n	8020e82 <_puts_r+0x2e>
 8020e7c:	6923      	ldr	r3, [r4, #16]
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d135      	bne.n	8020eee <_puts_r+0x9a>
 8020e82:	4621      	mov	r1, r4
 8020e84:	4628      	mov	r0, r5
 8020e86:	f001 fc27 	bl	80226d8 <__swsetup_r>
 8020e8a:	b380      	cbz	r0, 8020eee <_puts_r+0x9a>
 8020e8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020e92:	07da      	lsls	r2, r3, #31
 8020e94:	d405      	bmi.n	8020ea2 <_puts_r+0x4e>
 8020e96:	89a3      	ldrh	r3, [r4, #12]
 8020e98:	059b      	lsls	r3, r3, #22
 8020e9a:	d402      	bmi.n	8020ea2 <_puts_r+0x4e>
 8020e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e9e:	f000 f9bf 	bl	8021220 <__retarget_lock_release_recursive>
 8020ea2:	4628      	mov	r0, r5
 8020ea4:	bd70      	pop	{r4, r5, r6, pc}
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	da04      	bge.n	8020eb4 <_puts_r+0x60>
 8020eaa:	69a2      	ldr	r2, [r4, #24]
 8020eac:	429a      	cmp	r2, r3
 8020eae:	dc17      	bgt.n	8020ee0 <_puts_r+0x8c>
 8020eb0:	290a      	cmp	r1, #10
 8020eb2:	d015      	beq.n	8020ee0 <_puts_r+0x8c>
 8020eb4:	6823      	ldr	r3, [r4, #0]
 8020eb6:	1c5a      	adds	r2, r3, #1
 8020eb8:	6022      	str	r2, [r4, #0]
 8020eba:	7019      	strb	r1, [r3, #0]
 8020ebc:	68a3      	ldr	r3, [r4, #8]
 8020ebe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020ec2:	3b01      	subs	r3, #1
 8020ec4:	60a3      	str	r3, [r4, #8]
 8020ec6:	2900      	cmp	r1, #0
 8020ec8:	d1ed      	bne.n	8020ea6 <_puts_r+0x52>
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	da11      	bge.n	8020ef2 <_puts_r+0x9e>
 8020ece:	4622      	mov	r2, r4
 8020ed0:	210a      	movs	r1, #10
 8020ed2:	4628      	mov	r0, r5
 8020ed4:	f001 fbc2 	bl	802265c <__swbuf_r>
 8020ed8:	3001      	adds	r0, #1
 8020eda:	d0d7      	beq.n	8020e8c <_puts_r+0x38>
 8020edc:	250a      	movs	r5, #10
 8020ede:	e7d7      	b.n	8020e90 <_puts_r+0x3c>
 8020ee0:	4622      	mov	r2, r4
 8020ee2:	4628      	mov	r0, r5
 8020ee4:	f001 fbba 	bl	802265c <__swbuf_r>
 8020ee8:	3001      	adds	r0, #1
 8020eea:	d1e7      	bne.n	8020ebc <_puts_r+0x68>
 8020eec:	e7ce      	b.n	8020e8c <_puts_r+0x38>
 8020eee:	3e01      	subs	r6, #1
 8020ef0:	e7e4      	b.n	8020ebc <_puts_r+0x68>
 8020ef2:	6823      	ldr	r3, [r4, #0]
 8020ef4:	1c5a      	adds	r2, r3, #1
 8020ef6:	6022      	str	r2, [r4, #0]
 8020ef8:	220a      	movs	r2, #10
 8020efa:	701a      	strb	r2, [r3, #0]
 8020efc:	e7ee      	b.n	8020edc <_puts_r+0x88>
	...

08020f00 <puts>:
 8020f00:	4b02      	ldr	r3, [pc, #8]	@ (8020f0c <puts+0xc>)
 8020f02:	4601      	mov	r1, r0
 8020f04:	6818      	ldr	r0, [r3, #0]
 8020f06:	f7ff bfa5 	b.w	8020e54 <_puts_r>
 8020f0a:	bf00      	nop
 8020f0c:	200002ac 	.word	0x200002ac

08020f10 <strcat>:
 8020f10:	b510      	push	{r4, lr}
 8020f12:	4602      	mov	r2, r0
 8020f14:	7814      	ldrb	r4, [r2, #0]
 8020f16:	4613      	mov	r3, r2
 8020f18:	3201      	adds	r2, #1
 8020f1a:	2c00      	cmp	r4, #0
 8020f1c:	d1fa      	bne.n	8020f14 <strcat+0x4>
 8020f1e:	3b01      	subs	r3, #1
 8020f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020f24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020f28:	2a00      	cmp	r2, #0
 8020f2a:	d1f9      	bne.n	8020f20 <strcat+0x10>
 8020f2c:	bd10      	pop	{r4, pc}

08020f2e <strchr>:
 8020f2e:	b2c9      	uxtb	r1, r1
 8020f30:	4603      	mov	r3, r0
 8020f32:	4618      	mov	r0, r3
 8020f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f38:	b112      	cbz	r2, 8020f40 <strchr+0x12>
 8020f3a:	428a      	cmp	r2, r1
 8020f3c:	d1f9      	bne.n	8020f32 <strchr+0x4>
 8020f3e:	4770      	bx	lr
 8020f40:	2900      	cmp	r1, #0
 8020f42:	bf18      	it	ne
 8020f44:	2000      	movne	r0, #0
 8020f46:	4770      	bx	lr

08020f48 <strcspn>:
 8020f48:	b570      	push	{r4, r5, r6, lr}
 8020f4a:	4603      	mov	r3, r0
 8020f4c:	461e      	mov	r6, r3
 8020f4e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8020f52:	b144      	cbz	r4, 8020f66 <strcspn+0x1e>
 8020f54:	1e4a      	subs	r2, r1, #1
 8020f56:	e001      	b.n	8020f5c <strcspn+0x14>
 8020f58:	42a5      	cmp	r5, r4
 8020f5a:	d004      	beq.n	8020f66 <strcspn+0x1e>
 8020f5c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8020f60:	2d00      	cmp	r5, #0
 8020f62:	d1f9      	bne.n	8020f58 <strcspn+0x10>
 8020f64:	e7f2      	b.n	8020f4c <strcspn+0x4>
 8020f66:	1a30      	subs	r0, r6, r0
 8020f68:	bd70      	pop	{r4, r5, r6, pc}

08020f6a <strncmp>:
 8020f6a:	b510      	push	{r4, lr}
 8020f6c:	b16a      	cbz	r2, 8020f8a <strncmp+0x20>
 8020f6e:	3901      	subs	r1, #1
 8020f70:	1884      	adds	r4, r0, r2
 8020f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020f7a:	429a      	cmp	r2, r3
 8020f7c:	d103      	bne.n	8020f86 <strncmp+0x1c>
 8020f7e:	42a0      	cmp	r0, r4
 8020f80:	d001      	beq.n	8020f86 <strncmp+0x1c>
 8020f82:	2a00      	cmp	r2, #0
 8020f84:	d1f5      	bne.n	8020f72 <strncmp+0x8>
 8020f86:	1ad0      	subs	r0, r2, r3
 8020f88:	bd10      	pop	{r4, pc}
 8020f8a:	4610      	mov	r0, r2
 8020f8c:	e7fc      	b.n	8020f88 <strncmp+0x1e>

08020f8e <strncpy>:
 8020f8e:	b510      	push	{r4, lr}
 8020f90:	3901      	subs	r1, #1
 8020f92:	4603      	mov	r3, r0
 8020f94:	b132      	cbz	r2, 8020fa4 <strncpy+0x16>
 8020f96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8020f9e:	3a01      	subs	r2, #1
 8020fa0:	2c00      	cmp	r4, #0
 8020fa2:	d1f7      	bne.n	8020f94 <strncpy+0x6>
 8020fa4:	441a      	add	r2, r3
 8020fa6:	2100      	movs	r1, #0
 8020fa8:	4293      	cmp	r3, r2
 8020faa:	d100      	bne.n	8020fae <strncpy+0x20>
 8020fac:	bd10      	pop	{r4, pc}
 8020fae:	f803 1b01 	strb.w	r1, [r3], #1
 8020fb2:	e7f9      	b.n	8020fa8 <strncpy+0x1a>

08020fb4 <strrchr>:
 8020fb4:	b538      	push	{r3, r4, r5, lr}
 8020fb6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8020fba:	4603      	mov	r3, r0
 8020fbc:	d10e      	bne.n	8020fdc <strrchr+0x28>
 8020fbe:	4621      	mov	r1, r4
 8020fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020fc4:	f7ff bfb3 	b.w	8020f2e <strchr>
 8020fc8:	1c43      	adds	r3, r0, #1
 8020fca:	4605      	mov	r5, r0
 8020fcc:	4621      	mov	r1, r4
 8020fce:	4618      	mov	r0, r3
 8020fd0:	f7ff ffad 	bl	8020f2e <strchr>
 8020fd4:	2800      	cmp	r0, #0
 8020fd6:	d1f7      	bne.n	8020fc8 <strrchr+0x14>
 8020fd8:	4628      	mov	r0, r5
 8020fda:	bd38      	pop	{r3, r4, r5, pc}
 8020fdc:	2500      	movs	r5, #0
 8020fde:	e7f5      	b.n	8020fcc <strrchr+0x18>

08020fe0 <strspn>:
 8020fe0:	b570      	push	{r4, r5, r6, lr}
 8020fe2:	4603      	mov	r3, r0
 8020fe4:	461e      	mov	r6, r3
 8020fe6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8020fea:	b13c      	cbz	r4, 8020ffc <strspn+0x1c>
 8020fec:	1e4a      	subs	r2, r1, #1
 8020fee:	e001      	b.n	8020ff4 <strspn+0x14>
 8020ff0:	42a5      	cmp	r5, r4
 8020ff2:	d0f7      	beq.n	8020fe4 <strspn+0x4>
 8020ff4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8020ff8:	2d00      	cmp	r5, #0
 8020ffa:	d1f9      	bne.n	8020ff0 <strspn+0x10>
 8020ffc:	1a30      	subs	r0, r6, r0
 8020ffe:	bd70      	pop	{r4, r5, r6, pc}

08021000 <strstr>:
 8021000:	780a      	ldrb	r2, [r1, #0]
 8021002:	b570      	push	{r4, r5, r6, lr}
 8021004:	b96a      	cbnz	r2, 8021022 <strstr+0x22>
 8021006:	bd70      	pop	{r4, r5, r6, pc}
 8021008:	429a      	cmp	r2, r3
 802100a:	d109      	bne.n	8021020 <strstr+0x20>
 802100c:	460c      	mov	r4, r1
 802100e:	4605      	mov	r5, r0
 8021010:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021014:	2b00      	cmp	r3, #0
 8021016:	d0f6      	beq.n	8021006 <strstr+0x6>
 8021018:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802101c:	429e      	cmp	r6, r3
 802101e:	d0f7      	beq.n	8021010 <strstr+0x10>
 8021020:	3001      	adds	r0, #1
 8021022:	7803      	ldrb	r3, [r0, #0]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d1ef      	bne.n	8021008 <strstr+0x8>
 8021028:	4618      	mov	r0, r3
 802102a:	e7ec      	b.n	8021006 <strstr+0x6>

0802102c <memcmp>:
 802102c:	b510      	push	{r4, lr}
 802102e:	3901      	subs	r1, #1
 8021030:	4402      	add	r2, r0
 8021032:	4290      	cmp	r0, r2
 8021034:	d101      	bne.n	802103a <memcmp+0xe>
 8021036:	2000      	movs	r0, #0
 8021038:	e005      	b.n	8021046 <memcmp+0x1a>
 802103a:	7803      	ldrb	r3, [r0, #0]
 802103c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021040:	42a3      	cmp	r3, r4
 8021042:	d001      	beq.n	8021048 <memcmp+0x1c>
 8021044:	1b18      	subs	r0, r3, r4
 8021046:	bd10      	pop	{r4, pc}
 8021048:	3001      	adds	r0, #1
 802104a:	e7f2      	b.n	8021032 <memcmp+0x6>

0802104c <memmove>:
 802104c:	4288      	cmp	r0, r1
 802104e:	b510      	push	{r4, lr}
 8021050:	eb01 0402 	add.w	r4, r1, r2
 8021054:	d902      	bls.n	802105c <memmove+0x10>
 8021056:	4284      	cmp	r4, r0
 8021058:	4623      	mov	r3, r4
 802105a:	d807      	bhi.n	802106c <memmove+0x20>
 802105c:	1e43      	subs	r3, r0, #1
 802105e:	42a1      	cmp	r1, r4
 8021060:	d008      	beq.n	8021074 <memmove+0x28>
 8021062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021066:	f803 2f01 	strb.w	r2, [r3, #1]!
 802106a:	e7f8      	b.n	802105e <memmove+0x12>
 802106c:	4402      	add	r2, r0
 802106e:	4601      	mov	r1, r0
 8021070:	428a      	cmp	r2, r1
 8021072:	d100      	bne.n	8021076 <memmove+0x2a>
 8021074:	bd10      	pop	{r4, pc}
 8021076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802107a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802107e:	e7f7      	b.n	8021070 <memmove+0x24>

08021080 <memset>:
 8021080:	4402      	add	r2, r0
 8021082:	4603      	mov	r3, r0
 8021084:	4293      	cmp	r3, r2
 8021086:	d100      	bne.n	802108a <memset+0xa>
 8021088:	4770      	bx	lr
 802108a:	f803 1b01 	strb.w	r1, [r3], #1
 802108e:	e7f9      	b.n	8021084 <memset+0x4>

08021090 <_close_r>:
 8021090:	b538      	push	{r3, r4, r5, lr}
 8021092:	4d06      	ldr	r5, [pc, #24]	@ (80210ac <_close_r+0x1c>)
 8021094:	2300      	movs	r3, #0
 8021096:	4604      	mov	r4, r0
 8021098:	4608      	mov	r0, r1
 802109a:	602b      	str	r3, [r5, #0]
 802109c:	f7e0 fe5c 	bl	8001d58 <_close>
 80210a0:	1c43      	adds	r3, r0, #1
 80210a2:	d102      	bne.n	80210aa <_close_r+0x1a>
 80210a4:	682b      	ldr	r3, [r5, #0]
 80210a6:	b103      	cbz	r3, 80210aa <_close_r+0x1a>
 80210a8:	6023      	str	r3, [r4, #0]
 80210aa:	bd38      	pop	{r3, r4, r5, pc}
 80210ac:	20017594 	.word	0x20017594

080210b0 <_reclaim_reent>:
 80210b0:	4b29      	ldr	r3, [pc, #164]	@ (8021158 <_reclaim_reent+0xa8>)
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	4283      	cmp	r3, r0
 80210b6:	b570      	push	{r4, r5, r6, lr}
 80210b8:	4604      	mov	r4, r0
 80210ba:	d04b      	beq.n	8021154 <_reclaim_reent+0xa4>
 80210bc:	69c3      	ldr	r3, [r0, #28]
 80210be:	b1ab      	cbz	r3, 80210ec <_reclaim_reent+0x3c>
 80210c0:	68db      	ldr	r3, [r3, #12]
 80210c2:	b16b      	cbz	r3, 80210e0 <_reclaim_reent+0x30>
 80210c4:	2500      	movs	r5, #0
 80210c6:	69e3      	ldr	r3, [r4, #28]
 80210c8:	68db      	ldr	r3, [r3, #12]
 80210ca:	5959      	ldr	r1, [r3, r5]
 80210cc:	2900      	cmp	r1, #0
 80210ce:	d13b      	bne.n	8021148 <_reclaim_reent+0x98>
 80210d0:	3504      	adds	r5, #4
 80210d2:	2d80      	cmp	r5, #128	@ 0x80
 80210d4:	d1f7      	bne.n	80210c6 <_reclaim_reent+0x16>
 80210d6:	69e3      	ldr	r3, [r4, #28]
 80210d8:	4620      	mov	r0, r4
 80210da:	68d9      	ldr	r1, [r3, #12]
 80210dc:	f000 f8be 	bl	802125c <_free_r>
 80210e0:	69e3      	ldr	r3, [r4, #28]
 80210e2:	6819      	ldr	r1, [r3, #0]
 80210e4:	b111      	cbz	r1, 80210ec <_reclaim_reent+0x3c>
 80210e6:	4620      	mov	r0, r4
 80210e8:	f000 f8b8 	bl	802125c <_free_r>
 80210ec:	6961      	ldr	r1, [r4, #20]
 80210ee:	b111      	cbz	r1, 80210f6 <_reclaim_reent+0x46>
 80210f0:	4620      	mov	r0, r4
 80210f2:	f000 f8b3 	bl	802125c <_free_r>
 80210f6:	69e1      	ldr	r1, [r4, #28]
 80210f8:	b111      	cbz	r1, 8021100 <_reclaim_reent+0x50>
 80210fa:	4620      	mov	r0, r4
 80210fc:	f000 f8ae 	bl	802125c <_free_r>
 8021100:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021102:	b111      	cbz	r1, 802110a <_reclaim_reent+0x5a>
 8021104:	4620      	mov	r0, r4
 8021106:	f000 f8a9 	bl	802125c <_free_r>
 802110a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802110c:	b111      	cbz	r1, 8021114 <_reclaim_reent+0x64>
 802110e:	4620      	mov	r0, r4
 8021110:	f000 f8a4 	bl	802125c <_free_r>
 8021114:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8021116:	b111      	cbz	r1, 802111e <_reclaim_reent+0x6e>
 8021118:	4620      	mov	r0, r4
 802111a:	f000 f89f 	bl	802125c <_free_r>
 802111e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8021120:	b111      	cbz	r1, 8021128 <_reclaim_reent+0x78>
 8021122:	4620      	mov	r0, r4
 8021124:	f000 f89a 	bl	802125c <_free_r>
 8021128:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802112a:	b111      	cbz	r1, 8021132 <_reclaim_reent+0x82>
 802112c:	4620      	mov	r0, r4
 802112e:	f000 f895 	bl	802125c <_free_r>
 8021132:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021134:	b111      	cbz	r1, 802113c <_reclaim_reent+0x8c>
 8021136:	4620      	mov	r0, r4
 8021138:	f000 f890 	bl	802125c <_free_r>
 802113c:	6a23      	ldr	r3, [r4, #32]
 802113e:	b14b      	cbz	r3, 8021154 <_reclaim_reent+0xa4>
 8021140:	4620      	mov	r0, r4
 8021142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021146:	4718      	bx	r3
 8021148:	680e      	ldr	r6, [r1, #0]
 802114a:	4620      	mov	r0, r4
 802114c:	f000 f886 	bl	802125c <_free_r>
 8021150:	4631      	mov	r1, r6
 8021152:	e7bb      	b.n	80210cc <_reclaim_reent+0x1c>
 8021154:	bd70      	pop	{r4, r5, r6, pc}
 8021156:	bf00      	nop
 8021158:	200002ac 	.word	0x200002ac

0802115c <_lseek_r>:
 802115c:	b538      	push	{r3, r4, r5, lr}
 802115e:	4d07      	ldr	r5, [pc, #28]	@ (802117c <_lseek_r+0x20>)
 8021160:	4604      	mov	r4, r0
 8021162:	4608      	mov	r0, r1
 8021164:	4611      	mov	r1, r2
 8021166:	2200      	movs	r2, #0
 8021168:	602a      	str	r2, [r5, #0]
 802116a:	461a      	mov	r2, r3
 802116c:	f7e0 fe1b 	bl	8001da6 <_lseek>
 8021170:	1c43      	adds	r3, r0, #1
 8021172:	d102      	bne.n	802117a <_lseek_r+0x1e>
 8021174:	682b      	ldr	r3, [r5, #0]
 8021176:	b103      	cbz	r3, 802117a <_lseek_r+0x1e>
 8021178:	6023      	str	r3, [r4, #0]
 802117a:	bd38      	pop	{r3, r4, r5, pc}
 802117c:	20017594 	.word	0x20017594

08021180 <_read_r>:
 8021180:	b538      	push	{r3, r4, r5, lr}
 8021182:	4d07      	ldr	r5, [pc, #28]	@ (80211a0 <_read_r+0x20>)
 8021184:	4604      	mov	r4, r0
 8021186:	4608      	mov	r0, r1
 8021188:	4611      	mov	r1, r2
 802118a:	2200      	movs	r2, #0
 802118c:	602a      	str	r2, [r5, #0]
 802118e:	461a      	mov	r2, r3
 8021190:	f7e0 fda9 	bl	8001ce6 <_read>
 8021194:	1c43      	adds	r3, r0, #1
 8021196:	d102      	bne.n	802119e <_read_r+0x1e>
 8021198:	682b      	ldr	r3, [r5, #0]
 802119a:	b103      	cbz	r3, 802119e <_read_r+0x1e>
 802119c:	6023      	str	r3, [r4, #0]
 802119e:	bd38      	pop	{r3, r4, r5, pc}
 80211a0:	20017594 	.word	0x20017594

080211a4 <_write_r>:
 80211a4:	b538      	push	{r3, r4, r5, lr}
 80211a6:	4d07      	ldr	r5, [pc, #28]	@ (80211c4 <_write_r+0x20>)
 80211a8:	4604      	mov	r4, r0
 80211aa:	4608      	mov	r0, r1
 80211ac:	4611      	mov	r1, r2
 80211ae:	2200      	movs	r2, #0
 80211b0:	602a      	str	r2, [r5, #0]
 80211b2:	461a      	mov	r2, r3
 80211b4:	f7e0 fdb4 	bl	8001d20 <_write>
 80211b8:	1c43      	adds	r3, r0, #1
 80211ba:	d102      	bne.n	80211c2 <_write_r+0x1e>
 80211bc:	682b      	ldr	r3, [r5, #0]
 80211be:	b103      	cbz	r3, 80211c2 <_write_r+0x1e>
 80211c0:	6023      	str	r3, [r4, #0]
 80211c2:	bd38      	pop	{r3, r4, r5, pc}
 80211c4:	20017594 	.word	0x20017594

080211c8 <__errno>:
 80211c8:	4b01      	ldr	r3, [pc, #4]	@ (80211d0 <__errno+0x8>)
 80211ca:	6818      	ldr	r0, [r3, #0]
 80211cc:	4770      	bx	lr
 80211ce:	bf00      	nop
 80211d0:	200002ac 	.word	0x200002ac

080211d4 <__libc_init_array>:
 80211d4:	b570      	push	{r4, r5, r6, lr}
 80211d6:	4d0d      	ldr	r5, [pc, #52]	@ (802120c <__libc_init_array+0x38>)
 80211d8:	4c0d      	ldr	r4, [pc, #52]	@ (8021210 <__libc_init_array+0x3c>)
 80211da:	1b64      	subs	r4, r4, r5
 80211dc:	10a4      	asrs	r4, r4, #2
 80211de:	2600      	movs	r6, #0
 80211e0:	42a6      	cmp	r6, r4
 80211e2:	d109      	bne.n	80211f8 <__libc_init_array+0x24>
 80211e4:	4d0b      	ldr	r5, [pc, #44]	@ (8021214 <__libc_init_array+0x40>)
 80211e6:	4c0c      	ldr	r4, [pc, #48]	@ (8021218 <__libc_init_array+0x44>)
 80211e8:	f001 fbe0 	bl	80229ac <_init>
 80211ec:	1b64      	subs	r4, r4, r5
 80211ee:	10a4      	asrs	r4, r4, #2
 80211f0:	2600      	movs	r6, #0
 80211f2:	42a6      	cmp	r6, r4
 80211f4:	d105      	bne.n	8021202 <__libc_init_array+0x2e>
 80211f6:	bd70      	pop	{r4, r5, r6, pc}
 80211f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80211fc:	4798      	blx	r3
 80211fe:	3601      	adds	r6, #1
 8021200:	e7ee      	b.n	80211e0 <__libc_init_array+0xc>
 8021202:	f855 3b04 	ldr.w	r3, [r5], #4
 8021206:	4798      	blx	r3
 8021208:	3601      	adds	r6, #1
 802120a:	e7f2      	b.n	80211f2 <__libc_init_array+0x1e>
 802120c:	08027260 	.word	0x08027260
 8021210:	08027260 	.word	0x08027260
 8021214:	08027260 	.word	0x08027260
 8021218:	08027264 	.word	0x08027264

0802121c <__retarget_lock_init_recursive>:
 802121c:	4770      	bx	lr

0802121e <__retarget_lock_acquire_recursive>:
 802121e:	4770      	bx	lr

08021220 <__retarget_lock_release_recursive>:
 8021220:	4770      	bx	lr

08021222 <memcpy>:
 8021222:	440a      	add	r2, r1
 8021224:	4291      	cmp	r1, r2
 8021226:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802122a:	d100      	bne.n	802122e <memcpy+0xc>
 802122c:	4770      	bx	lr
 802122e:	b510      	push	{r4, lr}
 8021230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021238:	4291      	cmp	r1, r2
 802123a:	d1f9      	bne.n	8021230 <memcpy+0xe>
 802123c:	bd10      	pop	{r4, pc}

0802123e <strcpy>:
 802123e:	4603      	mov	r3, r0
 8021240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021244:	f803 2b01 	strb.w	r2, [r3], #1
 8021248:	2a00      	cmp	r2, #0
 802124a:	d1f9      	bne.n	8021240 <strcpy+0x2>
 802124c:	4770      	bx	lr

0802124e <abort>:
 802124e:	b508      	push	{r3, lr}
 8021250:	2006      	movs	r0, #6
 8021252:	f001 fb77 	bl	8022944 <raise>
 8021256:	2001      	movs	r0, #1
 8021258:	f7e0 fd3a 	bl	8001cd0 <_exit>

0802125c <_free_r>:
 802125c:	b538      	push	{r3, r4, r5, lr}
 802125e:	4605      	mov	r5, r0
 8021260:	2900      	cmp	r1, #0
 8021262:	d041      	beq.n	80212e8 <_free_r+0x8c>
 8021264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021268:	1f0c      	subs	r4, r1, #4
 802126a:	2b00      	cmp	r3, #0
 802126c:	bfb8      	it	lt
 802126e:	18e4      	addlt	r4, r4, r3
 8021270:	f001 f910 	bl	8022494 <__malloc_lock>
 8021274:	4a1d      	ldr	r2, [pc, #116]	@ (80212ec <_free_r+0x90>)
 8021276:	6813      	ldr	r3, [r2, #0]
 8021278:	b933      	cbnz	r3, 8021288 <_free_r+0x2c>
 802127a:	6063      	str	r3, [r4, #4]
 802127c:	6014      	str	r4, [r2, #0]
 802127e:	4628      	mov	r0, r5
 8021280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021284:	f001 b90c 	b.w	80224a0 <__malloc_unlock>
 8021288:	42a3      	cmp	r3, r4
 802128a:	d908      	bls.n	802129e <_free_r+0x42>
 802128c:	6820      	ldr	r0, [r4, #0]
 802128e:	1821      	adds	r1, r4, r0
 8021290:	428b      	cmp	r3, r1
 8021292:	bf01      	itttt	eq
 8021294:	6819      	ldreq	r1, [r3, #0]
 8021296:	685b      	ldreq	r3, [r3, #4]
 8021298:	1809      	addeq	r1, r1, r0
 802129a:	6021      	streq	r1, [r4, #0]
 802129c:	e7ed      	b.n	802127a <_free_r+0x1e>
 802129e:	461a      	mov	r2, r3
 80212a0:	685b      	ldr	r3, [r3, #4]
 80212a2:	b10b      	cbz	r3, 80212a8 <_free_r+0x4c>
 80212a4:	42a3      	cmp	r3, r4
 80212a6:	d9fa      	bls.n	802129e <_free_r+0x42>
 80212a8:	6811      	ldr	r1, [r2, #0]
 80212aa:	1850      	adds	r0, r2, r1
 80212ac:	42a0      	cmp	r0, r4
 80212ae:	d10b      	bne.n	80212c8 <_free_r+0x6c>
 80212b0:	6820      	ldr	r0, [r4, #0]
 80212b2:	4401      	add	r1, r0
 80212b4:	1850      	adds	r0, r2, r1
 80212b6:	4283      	cmp	r3, r0
 80212b8:	6011      	str	r1, [r2, #0]
 80212ba:	d1e0      	bne.n	802127e <_free_r+0x22>
 80212bc:	6818      	ldr	r0, [r3, #0]
 80212be:	685b      	ldr	r3, [r3, #4]
 80212c0:	6053      	str	r3, [r2, #4]
 80212c2:	4408      	add	r0, r1
 80212c4:	6010      	str	r0, [r2, #0]
 80212c6:	e7da      	b.n	802127e <_free_r+0x22>
 80212c8:	d902      	bls.n	80212d0 <_free_r+0x74>
 80212ca:	230c      	movs	r3, #12
 80212cc:	602b      	str	r3, [r5, #0]
 80212ce:	e7d6      	b.n	802127e <_free_r+0x22>
 80212d0:	6820      	ldr	r0, [r4, #0]
 80212d2:	1821      	adds	r1, r4, r0
 80212d4:	428b      	cmp	r3, r1
 80212d6:	bf04      	itt	eq
 80212d8:	6819      	ldreq	r1, [r3, #0]
 80212da:	685b      	ldreq	r3, [r3, #4]
 80212dc:	6063      	str	r3, [r4, #4]
 80212de:	bf04      	itt	eq
 80212e0:	1809      	addeq	r1, r1, r0
 80212e2:	6021      	streq	r1, [r4, #0]
 80212e4:	6054      	str	r4, [r2, #4]
 80212e6:	e7ca      	b.n	802127e <_free_r+0x22>
 80212e8:	bd38      	pop	{r3, r4, r5, pc}
 80212ea:	bf00      	nop
 80212ec:	200175a0 	.word	0x200175a0

080212f0 <__ssputs_r>:
 80212f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212f4:	688e      	ldr	r6, [r1, #8]
 80212f6:	461f      	mov	r7, r3
 80212f8:	42be      	cmp	r6, r7
 80212fa:	680b      	ldr	r3, [r1, #0]
 80212fc:	4682      	mov	sl, r0
 80212fe:	460c      	mov	r4, r1
 8021300:	4690      	mov	r8, r2
 8021302:	d82d      	bhi.n	8021360 <__ssputs_r+0x70>
 8021304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021308:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802130c:	d026      	beq.n	802135c <__ssputs_r+0x6c>
 802130e:	6965      	ldr	r5, [r4, #20]
 8021310:	6909      	ldr	r1, [r1, #16]
 8021312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021316:	eba3 0901 	sub.w	r9, r3, r1
 802131a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802131e:	1c7b      	adds	r3, r7, #1
 8021320:	444b      	add	r3, r9
 8021322:	106d      	asrs	r5, r5, #1
 8021324:	429d      	cmp	r5, r3
 8021326:	bf38      	it	cc
 8021328:	461d      	movcc	r5, r3
 802132a:	0553      	lsls	r3, r2, #21
 802132c:	d527      	bpl.n	802137e <__ssputs_r+0x8e>
 802132e:	4629      	mov	r1, r5
 8021330:	f000 fc6e 	bl	8021c10 <_malloc_r>
 8021334:	4606      	mov	r6, r0
 8021336:	b360      	cbz	r0, 8021392 <__ssputs_r+0xa2>
 8021338:	6921      	ldr	r1, [r4, #16]
 802133a:	464a      	mov	r2, r9
 802133c:	f7ff ff71 	bl	8021222 <memcpy>
 8021340:	89a3      	ldrh	r3, [r4, #12]
 8021342:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802134a:	81a3      	strh	r3, [r4, #12]
 802134c:	6126      	str	r6, [r4, #16]
 802134e:	6165      	str	r5, [r4, #20]
 8021350:	444e      	add	r6, r9
 8021352:	eba5 0509 	sub.w	r5, r5, r9
 8021356:	6026      	str	r6, [r4, #0]
 8021358:	60a5      	str	r5, [r4, #8]
 802135a:	463e      	mov	r6, r7
 802135c:	42be      	cmp	r6, r7
 802135e:	d900      	bls.n	8021362 <__ssputs_r+0x72>
 8021360:	463e      	mov	r6, r7
 8021362:	6820      	ldr	r0, [r4, #0]
 8021364:	4632      	mov	r2, r6
 8021366:	4641      	mov	r1, r8
 8021368:	f7ff fe70 	bl	802104c <memmove>
 802136c:	68a3      	ldr	r3, [r4, #8]
 802136e:	1b9b      	subs	r3, r3, r6
 8021370:	60a3      	str	r3, [r4, #8]
 8021372:	6823      	ldr	r3, [r4, #0]
 8021374:	4433      	add	r3, r6
 8021376:	6023      	str	r3, [r4, #0]
 8021378:	2000      	movs	r0, #0
 802137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802137e:	462a      	mov	r2, r5
 8021380:	f001 f8ce 	bl	8022520 <_realloc_r>
 8021384:	4606      	mov	r6, r0
 8021386:	2800      	cmp	r0, #0
 8021388:	d1e0      	bne.n	802134c <__ssputs_r+0x5c>
 802138a:	6921      	ldr	r1, [r4, #16]
 802138c:	4650      	mov	r0, sl
 802138e:	f7ff ff65 	bl	802125c <_free_r>
 8021392:	230c      	movs	r3, #12
 8021394:	f8ca 3000 	str.w	r3, [sl]
 8021398:	89a3      	ldrh	r3, [r4, #12]
 802139a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802139e:	81a3      	strh	r3, [r4, #12]
 80213a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213a4:	e7e9      	b.n	802137a <__ssputs_r+0x8a>
	...

080213a8 <_svfiprintf_r>:
 80213a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213ac:	4698      	mov	r8, r3
 80213ae:	898b      	ldrh	r3, [r1, #12]
 80213b0:	061b      	lsls	r3, r3, #24
 80213b2:	b09d      	sub	sp, #116	@ 0x74
 80213b4:	4607      	mov	r7, r0
 80213b6:	460d      	mov	r5, r1
 80213b8:	4614      	mov	r4, r2
 80213ba:	d510      	bpl.n	80213de <_svfiprintf_r+0x36>
 80213bc:	690b      	ldr	r3, [r1, #16]
 80213be:	b973      	cbnz	r3, 80213de <_svfiprintf_r+0x36>
 80213c0:	2140      	movs	r1, #64	@ 0x40
 80213c2:	f000 fc25 	bl	8021c10 <_malloc_r>
 80213c6:	6028      	str	r0, [r5, #0]
 80213c8:	6128      	str	r0, [r5, #16]
 80213ca:	b930      	cbnz	r0, 80213da <_svfiprintf_r+0x32>
 80213cc:	230c      	movs	r3, #12
 80213ce:	603b      	str	r3, [r7, #0]
 80213d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213d4:	b01d      	add	sp, #116	@ 0x74
 80213d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213da:	2340      	movs	r3, #64	@ 0x40
 80213dc:	616b      	str	r3, [r5, #20]
 80213de:	2300      	movs	r3, #0
 80213e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80213e2:	2320      	movs	r3, #32
 80213e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80213e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80213ec:	2330      	movs	r3, #48	@ 0x30
 80213ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802158c <_svfiprintf_r+0x1e4>
 80213f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80213f6:	f04f 0901 	mov.w	r9, #1
 80213fa:	4623      	mov	r3, r4
 80213fc:	469a      	mov	sl, r3
 80213fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021402:	b10a      	cbz	r2, 8021408 <_svfiprintf_r+0x60>
 8021404:	2a25      	cmp	r2, #37	@ 0x25
 8021406:	d1f9      	bne.n	80213fc <_svfiprintf_r+0x54>
 8021408:	ebba 0b04 	subs.w	fp, sl, r4
 802140c:	d00b      	beq.n	8021426 <_svfiprintf_r+0x7e>
 802140e:	465b      	mov	r3, fp
 8021410:	4622      	mov	r2, r4
 8021412:	4629      	mov	r1, r5
 8021414:	4638      	mov	r0, r7
 8021416:	f7ff ff6b 	bl	80212f0 <__ssputs_r>
 802141a:	3001      	adds	r0, #1
 802141c:	f000 80a7 	beq.w	802156e <_svfiprintf_r+0x1c6>
 8021420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021422:	445a      	add	r2, fp
 8021424:	9209      	str	r2, [sp, #36]	@ 0x24
 8021426:	f89a 3000 	ldrb.w	r3, [sl]
 802142a:	2b00      	cmp	r3, #0
 802142c:	f000 809f 	beq.w	802156e <_svfiprintf_r+0x1c6>
 8021430:	2300      	movs	r3, #0
 8021432:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802143a:	f10a 0a01 	add.w	sl, sl, #1
 802143e:	9304      	str	r3, [sp, #16]
 8021440:	9307      	str	r3, [sp, #28]
 8021442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021446:	931a      	str	r3, [sp, #104]	@ 0x68
 8021448:	4654      	mov	r4, sl
 802144a:	2205      	movs	r2, #5
 802144c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021450:	484e      	ldr	r0, [pc, #312]	@ (802158c <_svfiprintf_r+0x1e4>)
 8021452:	f7de fec5 	bl	80001e0 <memchr>
 8021456:	9a04      	ldr	r2, [sp, #16]
 8021458:	b9d8      	cbnz	r0, 8021492 <_svfiprintf_r+0xea>
 802145a:	06d0      	lsls	r0, r2, #27
 802145c:	bf44      	itt	mi
 802145e:	2320      	movmi	r3, #32
 8021460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021464:	0711      	lsls	r1, r2, #28
 8021466:	bf44      	itt	mi
 8021468:	232b      	movmi	r3, #43	@ 0x2b
 802146a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802146e:	f89a 3000 	ldrb.w	r3, [sl]
 8021472:	2b2a      	cmp	r3, #42	@ 0x2a
 8021474:	d015      	beq.n	80214a2 <_svfiprintf_r+0xfa>
 8021476:	9a07      	ldr	r2, [sp, #28]
 8021478:	4654      	mov	r4, sl
 802147a:	2000      	movs	r0, #0
 802147c:	f04f 0c0a 	mov.w	ip, #10
 8021480:	4621      	mov	r1, r4
 8021482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021486:	3b30      	subs	r3, #48	@ 0x30
 8021488:	2b09      	cmp	r3, #9
 802148a:	d94b      	bls.n	8021524 <_svfiprintf_r+0x17c>
 802148c:	b1b0      	cbz	r0, 80214bc <_svfiprintf_r+0x114>
 802148e:	9207      	str	r2, [sp, #28]
 8021490:	e014      	b.n	80214bc <_svfiprintf_r+0x114>
 8021492:	eba0 0308 	sub.w	r3, r0, r8
 8021496:	fa09 f303 	lsl.w	r3, r9, r3
 802149a:	4313      	orrs	r3, r2
 802149c:	9304      	str	r3, [sp, #16]
 802149e:	46a2      	mov	sl, r4
 80214a0:	e7d2      	b.n	8021448 <_svfiprintf_r+0xa0>
 80214a2:	9b03      	ldr	r3, [sp, #12]
 80214a4:	1d19      	adds	r1, r3, #4
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	9103      	str	r1, [sp, #12]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	bfbb      	ittet	lt
 80214ae:	425b      	neglt	r3, r3
 80214b0:	f042 0202 	orrlt.w	r2, r2, #2
 80214b4:	9307      	strge	r3, [sp, #28]
 80214b6:	9307      	strlt	r3, [sp, #28]
 80214b8:	bfb8      	it	lt
 80214ba:	9204      	strlt	r2, [sp, #16]
 80214bc:	7823      	ldrb	r3, [r4, #0]
 80214be:	2b2e      	cmp	r3, #46	@ 0x2e
 80214c0:	d10a      	bne.n	80214d8 <_svfiprintf_r+0x130>
 80214c2:	7863      	ldrb	r3, [r4, #1]
 80214c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80214c6:	d132      	bne.n	802152e <_svfiprintf_r+0x186>
 80214c8:	9b03      	ldr	r3, [sp, #12]
 80214ca:	1d1a      	adds	r2, r3, #4
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	9203      	str	r2, [sp, #12]
 80214d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80214d4:	3402      	adds	r4, #2
 80214d6:	9305      	str	r3, [sp, #20]
 80214d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802159c <_svfiprintf_r+0x1f4>
 80214dc:	7821      	ldrb	r1, [r4, #0]
 80214de:	2203      	movs	r2, #3
 80214e0:	4650      	mov	r0, sl
 80214e2:	f7de fe7d 	bl	80001e0 <memchr>
 80214e6:	b138      	cbz	r0, 80214f8 <_svfiprintf_r+0x150>
 80214e8:	9b04      	ldr	r3, [sp, #16]
 80214ea:	eba0 000a 	sub.w	r0, r0, sl
 80214ee:	2240      	movs	r2, #64	@ 0x40
 80214f0:	4082      	lsls	r2, r0
 80214f2:	4313      	orrs	r3, r2
 80214f4:	3401      	adds	r4, #1
 80214f6:	9304      	str	r3, [sp, #16]
 80214f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214fc:	4824      	ldr	r0, [pc, #144]	@ (8021590 <_svfiprintf_r+0x1e8>)
 80214fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021502:	2206      	movs	r2, #6
 8021504:	f7de fe6c 	bl	80001e0 <memchr>
 8021508:	2800      	cmp	r0, #0
 802150a:	d036      	beq.n	802157a <_svfiprintf_r+0x1d2>
 802150c:	4b21      	ldr	r3, [pc, #132]	@ (8021594 <_svfiprintf_r+0x1ec>)
 802150e:	bb1b      	cbnz	r3, 8021558 <_svfiprintf_r+0x1b0>
 8021510:	9b03      	ldr	r3, [sp, #12]
 8021512:	3307      	adds	r3, #7
 8021514:	f023 0307 	bic.w	r3, r3, #7
 8021518:	3308      	adds	r3, #8
 802151a:	9303      	str	r3, [sp, #12]
 802151c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802151e:	4433      	add	r3, r6
 8021520:	9309      	str	r3, [sp, #36]	@ 0x24
 8021522:	e76a      	b.n	80213fa <_svfiprintf_r+0x52>
 8021524:	fb0c 3202 	mla	r2, ip, r2, r3
 8021528:	460c      	mov	r4, r1
 802152a:	2001      	movs	r0, #1
 802152c:	e7a8      	b.n	8021480 <_svfiprintf_r+0xd8>
 802152e:	2300      	movs	r3, #0
 8021530:	3401      	adds	r4, #1
 8021532:	9305      	str	r3, [sp, #20]
 8021534:	4619      	mov	r1, r3
 8021536:	f04f 0c0a 	mov.w	ip, #10
 802153a:	4620      	mov	r0, r4
 802153c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021540:	3a30      	subs	r2, #48	@ 0x30
 8021542:	2a09      	cmp	r2, #9
 8021544:	d903      	bls.n	802154e <_svfiprintf_r+0x1a6>
 8021546:	2b00      	cmp	r3, #0
 8021548:	d0c6      	beq.n	80214d8 <_svfiprintf_r+0x130>
 802154a:	9105      	str	r1, [sp, #20]
 802154c:	e7c4      	b.n	80214d8 <_svfiprintf_r+0x130>
 802154e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021552:	4604      	mov	r4, r0
 8021554:	2301      	movs	r3, #1
 8021556:	e7f0      	b.n	802153a <_svfiprintf_r+0x192>
 8021558:	ab03      	add	r3, sp, #12
 802155a:	9300      	str	r3, [sp, #0]
 802155c:	462a      	mov	r2, r5
 802155e:	4b0e      	ldr	r3, [pc, #56]	@ (8021598 <_svfiprintf_r+0x1f0>)
 8021560:	a904      	add	r1, sp, #16
 8021562:	4638      	mov	r0, r7
 8021564:	f3af 8000 	nop.w
 8021568:	1c42      	adds	r2, r0, #1
 802156a:	4606      	mov	r6, r0
 802156c:	d1d6      	bne.n	802151c <_svfiprintf_r+0x174>
 802156e:	89ab      	ldrh	r3, [r5, #12]
 8021570:	065b      	lsls	r3, r3, #25
 8021572:	f53f af2d 	bmi.w	80213d0 <_svfiprintf_r+0x28>
 8021576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021578:	e72c      	b.n	80213d4 <_svfiprintf_r+0x2c>
 802157a:	ab03      	add	r3, sp, #12
 802157c:	9300      	str	r3, [sp, #0]
 802157e:	462a      	mov	r2, r5
 8021580:	4b05      	ldr	r3, [pc, #20]	@ (8021598 <_svfiprintf_r+0x1f0>)
 8021582:	a904      	add	r1, sp, #16
 8021584:	4638      	mov	r0, r7
 8021586:	f000 fc31 	bl	8021dec <_printf_i>
 802158a:	e7ed      	b.n	8021568 <_svfiprintf_r+0x1c0>
 802158c:	08027208 	.word	0x08027208
 8021590:	08027212 	.word	0x08027212
 8021594:	00000000 	.word	0x00000000
 8021598:	080212f1 	.word	0x080212f1
 802159c:	0802720e 	.word	0x0802720e

080215a0 <_sungetc_r>:
 80215a0:	b538      	push	{r3, r4, r5, lr}
 80215a2:	1c4b      	adds	r3, r1, #1
 80215a4:	4614      	mov	r4, r2
 80215a6:	d103      	bne.n	80215b0 <_sungetc_r+0x10>
 80215a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80215ac:	4628      	mov	r0, r5
 80215ae:	bd38      	pop	{r3, r4, r5, pc}
 80215b0:	8993      	ldrh	r3, [r2, #12]
 80215b2:	f023 0320 	bic.w	r3, r3, #32
 80215b6:	8193      	strh	r3, [r2, #12]
 80215b8:	6853      	ldr	r3, [r2, #4]
 80215ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80215bc:	b2cd      	uxtb	r5, r1
 80215be:	b18a      	cbz	r2, 80215e4 <_sungetc_r+0x44>
 80215c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80215c2:	429a      	cmp	r2, r3
 80215c4:	dd08      	ble.n	80215d8 <_sungetc_r+0x38>
 80215c6:	6823      	ldr	r3, [r4, #0]
 80215c8:	1e5a      	subs	r2, r3, #1
 80215ca:	6022      	str	r2, [r4, #0]
 80215cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80215d0:	6863      	ldr	r3, [r4, #4]
 80215d2:	3301      	adds	r3, #1
 80215d4:	6063      	str	r3, [r4, #4]
 80215d6:	e7e9      	b.n	80215ac <_sungetc_r+0xc>
 80215d8:	4621      	mov	r1, r4
 80215da:	f000 ff67 	bl	80224ac <__submore>
 80215de:	2800      	cmp	r0, #0
 80215e0:	d0f1      	beq.n	80215c6 <_sungetc_r+0x26>
 80215e2:	e7e1      	b.n	80215a8 <_sungetc_r+0x8>
 80215e4:	6921      	ldr	r1, [r4, #16]
 80215e6:	6822      	ldr	r2, [r4, #0]
 80215e8:	b141      	cbz	r1, 80215fc <_sungetc_r+0x5c>
 80215ea:	4291      	cmp	r1, r2
 80215ec:	d206      	bcs.n	80215fc <_sungetc_r+0x5c>
 80215ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80215f2:	42a9      	cmp	r1, r5
 80215f4:	d102      	bne.n	80215fc <_sungetc_r+0x5c>
 80215f6:	3a01      	subs	r2, #1
 80215f8:	6022      	str	r2, [r4, #0]
 80215fa:	e7ea      	b.n	80215d2 <_sungetc_r+0x32>
 80215fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8021600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021604:	6363      	str	r3, [r4, #52]	@ 0x34
 8021606:	2303      	movs	r3, #3
 8021608:	63a3      	str	r3, [r4, #56]	@ 0x38
 802160a:	4623      	mov	r3, r4
 802160c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8021610:	6023      	str	r3, [r4, #0]
 8021612:	2301      	movs	r3, #1
 8021614:	e7de      	b.n	80215d4 <_sungetc_r+0x34>

08021616 <__ssrefill_r>:
 8021616:	b510      	push	{r4, lr}
 8021618:	460c      	mov	r4, r1
 802161a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802161c:	b169      	cbz	r1, 802163a <__ssrefill_r+0x24>
 802161e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021622:	4299      	cmp	r1, r3
 8021624:	d001      	beq.n	802162a <__ssrefill_r+0x14>
 8021626:	f7ff fe19 	bl	802125c <_free_r>
 802162a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802162c:	6063      	str	r3, [r4, #4]
 802162e:	2000      	movs	r0, #0
 8021630:	6360      	str	r0, [r4, #52]	@ 0x34
 8021632:	b113      	cbz	r3, 802163a <__ssrefill_r+0x24>
 8021634:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8021636:	6023      	str	r3, [r4, #0]
 8021638:	bd10      	pop	{r4, pc}
 802163a:	6923      	ldr	r3, [r4, #16]
 802163c:	6023      	str	r3, [r4, #0]
 802163e:	2300      	movs	r3, #0
 8021640:	6063      	str	r3, [r4, #4]
 8021642:	89a3      	ldrh	r3, [r4, #12]
 8021644:	f043 0320 	orr.w	r3, r3, #32
 8021648:	81a3      	strh	r3, [r4, #12]
 802164a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802164e:	e7f3      	b.n	8021638 <__ssrefill_r+0x22>

08021650 <__ssvfiscanf_r>:
 8021650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021654:	460c      	mov	r4, r1
 8021656:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802165a:	2100      	movs	r1, #0
 802165c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8021660:	49a5      	ldr	r1, [pc, #660]	@ (80218f8 <__ssvfiscanf_r+0x2a8>)
 8021662:	91a0      	str	r1, [sp, #640]	@ 0x280
 8021664:	f10d 0804 	add.w	r8, sp, #4
 8021668:	49a4      	ldr	r1, [pc, #656]	@ (80218fc <__ssvfiscanf_r+0x2ac>)
 802166a:	4fa5      	ldr	r7, [pc, #660]	@ (8021900 <__ssvfiscanf_r+0x2b0>)
 802166c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8021670:	4606      	mov	r6, r0
 8021672:	91a1      	str	r1, [sp, #644]	@ 0x284
 8021674:	9300      	str	r3, [sp, #0]
 8021676:	7813      	ldrb	r3, [r2, #0]
 8021678:	2b00      	cmp	r3, #0
 802167a:	f000 8158 	beq.w	802192e <__ssvfiscanf_r+0x2de>
 802167e:	5cf9      	ldrb	r1, [r7, r3]
 8021680:	f011 0108 	ands.w	r1, r1, #8
 8021684:	f102 0501 	add.w	r5, r2, #1
 8021688:	d019      	beq.n	80216be <__ssvfiscanf_r+0x6e>
 802168a:	6863      	ldr	r3, [r4, #4]
 802168c:	2b00      	cmp	r3, #0
 802168e:	dd0f      	ble.n	80216b0 <__ssvfiscanf_r+0x60>
 8021690:	6823      	ldr	r3, [r4, #0]
 8021692:	781a      	ldrb	r2, [r3, #0]
 8021694:	5cba      	ldrb	r2, [r7, r2]
 8021696:	0712      	lsls	r2, r2, #28
 8021698:	d401      	bmi.n	802169e <__ssvfiscanf_r+0x4e>
 802169a:	462a      	mov	r2, r5
 802169c:	e7eb      	b.n	8021676 <__ssvfiscanf_r+0x26>
 802169e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80216a0:	3201      	adds	r2, #1
 80216a2:	9245      	str	r2, [sp, #276]	@ 0x114
 80216a4:	6862      	ldr	r2, [r4, #4]
 80216a6:	3301      	adds	r3, #1
 80216a8:	3a01      	subs	r2, #1
 80216aa:	6062      	str	r2, [r4, #4]
 80216ac:	6023      	str	r3, [r4, #0]
 80216ae:	e7ec      	b.n	802168a <__ssvfiscanf_r+0x3a>
 80216b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80216b2:	4621      	mov	r1, r4
 80216b4:	4630      	mov	r0, r6
 80216b6:	4798      	blx	r3
 80216b8:	2800      	cmp	r0, #0
 80216ba:	d0e9      	beq.n	8021690 <__ssvfiscanf_r+0x40>
 80216bc:	e7ed      	b.n	802169a <__ssvfiscanf_r+0x4a>
 80216be:	2b25      	cmp	r3, #37	@ 0x25
 80216c0:	d012      	beq.n	80216e8 <__ssvfiscanf_r+0x98>
 80216c2:	4699      	mov	r9, r3
 80216c4:	6863      	ldr	r3, [r4, #4]
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	f340 8093 	ble.w	80217f2 <__ssvfiscanf_r+0x1a2>
 80216cc:	6822      	ldr	r2, [r4, #0]
 80216ce:	7813      	ldrb	r3, [r2, #0]
 80216d0:	454b      	cmp	r3, r9
 80216d2:	f040 812c 	bne.w	802192e <__ssvfiscanf_r+0x2de>
 80216d6:	6863      	ldr	r3, [r4, #4]
 80216d8:	3b01      	subs	r3, #1
 80216da:	6063      	str	r3, [r4, #4]
 80216dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80216de:	3201      	adds	r2, #1
 80216e0:	3301      	adds	r3, #1
 80216e2:	6022      	str	r2, [r4, #0]
 80216e4:	9345      	str	r3, [sp, #276]	@ 0x114
 80216e6:	e7d8      	b.n	802169a <__ssvfiscanf_r+0x4a>
 80216e8:	9141      	str	r1, [sp, #260]	@ 0x104
 80216ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80216ec:	7853      	ldrb	r3, [r2, #1]
 80216ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80216f0:	bf02      	ittt	eq
 80216f2:	2310      	moveq	r3, #16
 80216f4:	1c95      	addeq	r5, r2, #2
 80216f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80216f8:	220a      	movs	r2, #10
 80216fa:	46a9      	mov	r9, r5
 80216fc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8021700:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8021704:	2b09      	cmp	r3, #9
 8021706:	d91e      	bls.n	8021746 <__ssvfiscanf_r+0xf6>
 8021708:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8021904 <__ssvfiscanf_r+0x2b4>
 802170c:	2203      	movs	r2, #3
 802170e:	4650      	mov	r0, sl
 8021710:	f7de fd66 	bl	80001e0 <memchr>
 8021714:	b138      	cbz	r0, 8021726 <__ssvfiscanf_r+0xd6>
 8021716:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8021718:	eba0 000a 	sub.w	r0, r0, sl
 802171c:	2301      	movs	r3, #1
 802171e:	4083      	lsls	r3, r0
 8021720:	4313      	orrs	r3, r2
 8021722:	9341      	str	r3, [sp, #260]	@ 0x104
 8021724:	464d      	mov	r5, r9
 8021726:	f815 3b01 	ldrb.w	r3, [r5], #1
 802172a:	2b78      	cmp	r3, #120	@ 0x78
 802172c:	d806      	bhi.n	802173c <__ssvfiscanf_r+0xec>
 802172e:	2b57      	cmp	r3, #87	@ 0x57
 8021730:	d810      	bhi.n	8021754 <__ssvfiscanf_r+0x104>
 8021732:	2b25      	cmp	r3, #37	@ 0x25
 8021734:	d0c5      	beq.n	80216c2 <__ssvfiscanf_r+0x72>
 8021736:	d857      	bhi.n	80217e8 <__ssvfiscanf_r+0x198>
 8021738:	2b00      	cmp	r3, #0
 802173a:	d065      	beq.n	8021808 <__ssvfiscanf_r+0x1b8>
 802173c:	2303      	movs	r3, #3
 802173e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8021740:	230a      	movs	r3, #10
 8021742:	9342      	str	r3, [sp, #264]	@ 0x108
 8021744:	e078      	b.n	8021838 <__ssvfiscanf_r+0x1e8>
 8021746:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8021748:	fb02 1103 	mla	r1, r2, r3, r1
 802174c:	3930      	subs	r1, #48	@ 0x30
 802174e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8021750:	464d      	mov	r5, r9
 8021752:	e7d2      	b.n	80216fa <__ssvfiscanf_r+0xaa>
 8021754:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8021758:	2a20      	cmp	r2, #32
 802175a:	d8ef      	bhi.n	802173c <__ssvfiscanf_r+0xec>
 802175c:	a101      	add	r1, pc, #4	@ (adr r1, 8021764 <__ssvfiscanf_r+0x114>)
 802175e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021762:	bf00      	nop
 8021764:	08021817 	.word	0x08021817
 8021768:	0802173d 	.word	0x0802173d
 802176c:	0802173d 	.word	0x0802173d
 8021770:	08021871 	.word	0x08021871
 8021774:	0802173d 	.word	0x0802173d
 8021778:	0802173d 	.word	0x0802173d
 802177c:	0802173d 	.word	0x0802173d
 8021780:	0802173d 	.word	0x0802173d
 8021784:	0802173d 	.word	0x0802173d
 8021788:	0802173d 	.word	0x0802173d
 802178c:	0802173d 	.word	0x0802173d
 8021790:	08021887 	.word	0x08021887
 8021794:	0802186d 	.word	0x0802186d
 8021798:	080217ef 	.word	0x080217ef
 802179c:	080217ef 	.word	0x080217ef
 80217a0:	080217ef 	.word	0x080217ef
 80217a4:	0802173d 	.word	0x0802173d
 80217a8:	08021829 	.word	0x08021829
 80217ac:	0802173d 	.word	0x0802173d
 80217b0:	0802173d 	.word	0x0802173d
 80217b4:	0802173d 	.word	0x0802173d
 80217b8:	0802173d 	.word	0x0802173d
 80217bc:	08021897 	.word	0x08021897
 80217c0:	08021831 	.word	0x08021831
 80217c4:	0802180f 	.word	0x0802180f
 80217c8:	0802173d 	.word	0x0802173d
 80217cc:	0802173d 	.word	0x0802173d
 80217d0:	08021893 	.word	0x08021893
 80217d4:	0802173d 	.word	0x0802173d
 80217d8:	0802186d 	.word	0x0802186d
 80217dc:	0802173d 	.word	0x0802173d
 80217e0:	0802173d 	.word	0x0802173d
 80217e4:	08021817 	.word	0x08021817
 80217e8:	3b45      	subs	r3, #69	@ 0x45
 80217ea:	2b02      	cmp	r3, #2
 80217ec:	d8a6      	bhi.n	802173c <__ssvfiscanf_r+0xec>
 80217ee:	2305      	movs	r3, #5
 80217f0:	e021      	b.n	8021836 <__ssvfiscanf_r+0x1e6>
 80217f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80217f4:	4621      	mov	r1, r4
 80217f6:	4630      	mov	r0, r6
 80217f8:	4798      	blx	r3
 80217fa:	2800      	cmp	r0, #0
 80217fc:	f43f af66 	beq.w	80216cc <__ssvfiscanf_r+0x7c>
 8021800:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8021802:	2800      	cmp	r0, #0
 8021804:	f040 808b 	bne.w	802191e <__ssvfiscanf_r+0x2ce>
 8021808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802180c:	e08b      	b.n	8021926 <__ssvfiscanf_r+0x2d6>
 802180e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8021810:	f042 0220 	orr.w	r2, r2, #32
 8021814:	9241      	str	r2, [sp, #260]	@ 0x104
 8021816:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8021818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802181c:	9241      	str	r2, [sp, #260]	@ 0x104
 802181e:	2210      	movs	r2, #16
 8021820:	2b6e      	cmp	r3, #110	@ 0x6e
 8021822:	9242      	str	r2, [sp, #264]	@ 0x108
 8021824:	d902      	bls.n	802182c <__ssvfiscanf_r+0x1dc>
 8021826:	e005      	b.n	8021834 <__ssvfiscanf_r+0x1e4>
 8021828:	2300      	movs	r3, #0
 802182a:	9342      	str	r3, [sp, #264]	@ 0x108
 802182c:	2303      	movs	r3, #3
 802182e:	e002      	b.n	8021836 <__ssvfiscanf_r+0x1e6>
 8021830:	2308      	movs	r3, #8
 8021832:	9342      	str	r3, [sp, #264]	@ 0x108
 8021834:	2304      	movs	r3, #4
 8021836:	9347      	str	r3, [sp, #284]	@ 0x11c
 8021838:	6863      	ldr	r3, [r4, #4]
 802183a:	2b00      	cmp	r3, #0
 802183c:	dd39      	ble.n	80218b2 <__ssvfiscanf_r+0x262>
 802183e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8021840:	0659      	lsls	r1, r3, #25
 8021842:	d404      	bmi.n	802184e <__ssvfiscanf_r+0x1fe>
 8021844:	6823      	ldr	r3, [r4, #0]
 8021846:	781a      	ldrb	r2, [r3, #0]
 8021848:	5cba      	ldrb	r2, [r7, r2]
 802184a:	0712      	lsls	r2, r2, #28
 802184c:	d438      	bmi.n	80218c0 <__ssvfiscanf_r+0x270>
 802184e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8021850:	2b02      	cmp	r3, #2
 8021852:	dc47      	bgt.n	80218e4 <__ssvfiscanf_r+0x294>
 8021854:	466b      	mov	r3, sp
 8021856:	4622      	mov	r2, r4
 8021858:	a941      	add	r1, sp, #260	@ 0x104
 802185a:	4630      	mov	r0, r6
 802185c:	f000 fbe6 	bl	802202c <_scanf_chars>
 8021860:	2801      	cmp	r0, #1
 8021862:	d064      	beq.n	802192e <__ssvfiscanf_r+0x2de>
 8021864:	2802      	cmp	r0, #2
 8021866:	f47f af18 	bne.w	802169a <__ssvfiscanf_r+0x4a>
 802186a:	e7c9      	b.n	8021800 <__ssvfiscanf_r+0x1b0>
 802186c:	220a      	movs	r2, #10
 802186e:	e7d7      	b.n	8021820 <__ssvfiscanf_r+0x1d0>
 8021870:	4629      	mov	r1, r5
 8021872:	4640      	mov	r0, r8
 8021874:	f000 fd28 	bl	80222c8 <__sccl>
 8021878:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802187a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802187e:	9341      	str	r3, [sp, #260]	@ 0x104
 8021880:	4605      	mov	r5, r0
 8021882:	2301      	movs	r3, #1
 8021884:	e7d7      	b.n	8021836 <__ssvfiscanf_r+0x1e6>
 8021886:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8021888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802188c:	9341      	str	r3, [sp, #260]	@ 0x104
 802188e:	2300      	movs	r3, #0
 8021890:	e7d1      	b.n	8021836 <__ssvfiscanf_r+0x1e6>
 8021892:	2302      	movs	r3, #2
 8021894:	e7cf      	b.n	8021836 <__ssvfiscanf_r+0x1e6>
 8021896:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8021898:	06c3      	lsls	r3, r0, #27
 802189a:	f53f aefe 	bmi.w	802169a <__ssvfiscanf_r+0x4a>
 802189e:	9b00      	ldr	r3, [sp, #0]
 80218a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80218a2:	1d19      	adds	r1, r3, #4
 80218a4:	9100      	str	r1, [sp, #0]
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	07c0      	lsls	r0, r0, #31
 80218aa:	bf4c      	ite	mi
 80218ac:	801a      	strhmi	r2, [r3, #0]
 80218ae:	601a      	strpl	r2, [r3, #0]
 80218b0:	e6f3      	b.n	802169a <__ssvfiscanf_r+0x4a>
 80218b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80218b4:	4621      	mov	r1, r4
 80218b6:	4630      	mov	r0, r6
 80218b8:	4798      	blx	r3
 80218ba:	2800      	cmp	r0, #0
 80218bc:	d0bf      	beq.n	802183e <__ssvfiscanf_r+0x1ee>
 80218be:	e79f      	b.n	8021800 <__ssvfiscanf_r+0x1b0>
 80218c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80218c2:	3201      	adds	r2, #1
 80218c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80218c6:	6862      	ldr	r2, [r4, #4]
 80218c8:	3a01      	subs	r2, #1
 80218ca:	2a00      	cmp	r2, #0
 80218cc:	6062      	str	r2, [r4, #4]
 80218ce:	dd02      	ble.n	80218d6 <__ssvfiscanf_r+0x286>
 80218d0:	3301      	adds	r3, #1
 80218d2:	6023      	str	r3, [r4, #0]
 80218d4:	e7b6      	b.n	8021844 <__ssvfiscanf_r+0x1f4>
 80218d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80218d8:	4621      	mov	r1, r4
 80218da:	4630      	mov	r0, r6
 80218dc:	4798      	blx	r3
 80218de:	2800      	cmp	r0, #0
 80218e0:	d0b0      	beq.n	8021844 <__ssvfiscanf_r+0x1f4>
 80218e2:	e78d      	b.n	8021800 <__ssvfiscanf_r+0x1b0>
 80218e4:	2b04      	cmp	r3, #4
 80218e6:	dc0f      	bgt.n	8021908 <__ssvfiscanf_r+0x2b8>
 80218e8:	466b      	mov	r3, sp
 80218ea:	4622      	mov	r2, r4
 80218ec:	a941      	add	r1, sp, #260	@ 0x104
 80218ee:	4630      	mov	r0, r6
 80218f0:	f000 fbf6 	bl	80220e0 <_scanf_i>
 80218f4:	e7b4      	b.n	8021860 <__ssvfiscanf_r+0x210>
 80218f6:	bf00      	nop
 80218f8:	080215a1 	.word	0x080215a1
 80218fc:	08021617 	.word	0x08021617
 8021900:	08027108 	.word	0x08027108
 8021904:	0802720e 	.word	0x0802720e
 8021908:	4b0a      	ldr	r3, [pc, #40]	@ (8021934 <__ssvfiscanf_r+0x2e4>)
 802190a:	2b00      	cmp	r3, #0
 802190c:	f43f aec5 	beq.w	802169a <__ssvfiscanf_r+0x4a>
 8021910:	466b      	mov	r3, sp
 8021912:	4622      	mov	r2, r4
 8021914:	a941      	add	r1, sp, #260	@ 0x104
 8021916:	4630      	mov	r0, r6
 8021918:	f3af 8000 	nop.w
 802191c:	e7a0      	b.n	8021860 <__ssvfiscanf_r+0x210>
 802191e:	89a3      	ldrh	r3, [r4, #12]
 8021920:	065b      	lsls	r3, r3, #25
 8021922:	f53f af71 	bmi.w	8021808 <__ssvfiscanf_r+0x1b8>
 8021926:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802192a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802192e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8021930:	e7f9      	b.n	8021926 <__ssvfiscanf_r+0x2d6>
 8021932:	bf00      	nop
 8021934:	00000000 	.word	0x00000000

08021938 <__sfputc_r>:
 8021938:	6893      	ldr	r3, [r2, #8]
 802193a:	3b01      	subs	r3, #1
 802193c:	2b00      	cmp	r3, #0
 802193e:	b410      	push	{r4}
 8021940:	6093      	str	r3, [r2, #8]
 8021942:	da08      	bge.n	8021956 <__sfputc_r+0x1e>
 8021944:	6994      	ldr	r4, [r2, #24]
 8021946:	42a3      	cmp	r3, r4
 8021948:	db01      	blt.n	802194e <__sfputc_r+0x16>
 802194a:	290a      	cmp	r1, #10
 802194c:	d103      	bne.n	8021956 <__sfputc_r+0x1e>
 802194e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021952:	f000 be83 	b.w	802265c <__swbuf_r>
 8021956:	6813      	ldr	r3, [r2, #0]
 8021958:	1c58      	adds	r0, r3, #1
 802195a:	6010      	str	r0, [r2, #0]
 802195c:	7019      	strb	r1, [r3, #0]
 802195e:	4608      	mov	r0, r1
 8021960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021964:	4770      	bx	lr

08021966 <__sfputs_r>:
 8021966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021968:	4606      	mov	r6, r0
 802196a:	460f      	mov	r7, r1
 802196c:	4614      	mov	r4, r2
 802196e:	18d5      	adds	r5, r2, r3
 8021970:	42ac      	cmp	r4, r5
 8021972:	d101      	bne.n	8021978 <__sfputs_r+0x12>
 8021974:	2000      	movs	r0, #0
 8021976:	e007      	b.n	8021988 <__sfputs_r+0x22>
 8021978:	f814 1b01 	ldrb.w	r1, [r4], #1
 802197c:	463a      	mov	r2, r7
 802197e:	4630      	mov	r0, r6
 8021980:	f7ff ffda 	bl	8021938 <__sfputc_r>
 8021984:	1c43      	adds	r3, r0, #1
 8021986:	d1f3      	bne.n	8021970 <__sfputs_r+0xa>
 8021988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802198c <_vfiprintf_r>:
 802198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021990:	460d      	mov	r5, r1
 8021992:	b09d      	sub	sp, #116	@ 0x74
 8021994:	4614      	mov	r4, r2
 8021996:	4698      	mov	r8, r3
 8021998:	4606      	mov	r6, r0
 802199a:	b118      	cbz	r0, 80219a4 <_vfiprintf_r+0x18>
 802199c:	6a03      	ldr	r3, [r0, #32]
 802199e:	b90b      	cbnz	r3, 80219a4 <_vfiprintf_r+0x18>
 80219a0:	f7ff f970 	bl	8020c84 <__sinit>
 80219a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80219a6:	07d9      	lsls	r1, r3, #31
 80219a8:	d405      	bmi.n	80219b6 <_vfiprintf_r+0x2a>
 80219aa:	89ab      	ldrh	r3, [r5, #12]
 80219ac:	059a      	lsls	r2, r3, #22
 80219ae:	d402      	bmi.n	80219b6 <_vfiprintf_r+0x2a>
 80219b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80219b2:	f7ff fc34 	bl	802121e <__retarget_lock_acquire_recursive>
 80219b6:	89ab      	ldrh	r3, [r5, #12]
 80219b8:	071b      	lsls	r3, r3, #28
 80219ba:	d501      	bpl.n	80219c0 <_vfiprintf_r+0x34>
 80219bc:	692b      	ldr	r3, [r5, #16]
 80219be:	b99b      	cbnz	r3, 80219e8 <_vfiprintf_r+0x5c>
 80219c0:	4629      	mov	r1, r5
 80219c2:	4630      	mov	r0, r6
 80219c4:	f000 fe88 	bl	80226d8 <__swsetup_r>
 80219c8:	b170      	cbz	r0, 80219e8 <_vfiprintf_r+0x5c>
 80219ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80219cc:	07dc      	lsls	r4, r3, #31
 80219ce:	d504      	bpl.n	80219da <_vfiprintf_r+0x4e>
 80219d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80219d4:	b01d      	add	sp, #116	@ 0x74
 80219d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219da:	89ab      	ldrh	r3, [r5, #12]
 80219dc:	0598      	lsls	r0, r3, #22
 80219de:	d4f7      	bmi.n	80219d0 <_vfiprintf_r+0x44>
 80219e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80219e2:	f7ff fc1d 	bl	8021220 <__retarget_lock_release_recursive>
 80219e6:	e7f3      	b.n	80219d0 <_vfiprintf_r+0x44>
 80219e8:	2300      	movs	r3, #0
 80219ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80219ec:	2320      	movs	r3, #32
 80219ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80219f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80219f6:	2330      	movs	r3, #48	@ 0x30
 80219f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021ba8 <_vfiprintf_r+0x21c>
 80219fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021a00:	f04f 0901 	mov.w	r9, #1
 8021a04:	4623      	mov	r3, r4
 8021a06:	469a      	mov	sl, r3
 8021a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a0c:	b10a      	cbz	r2, 8021a12 <_vfiprintf_r+0x86>
 8021a0e:	2a25      	cmp	r2, #37	@ 0x25
 8021a10:	d1f9      	bne.n	8021a06 <_vfiprintf_r+0x7a>
 8021a12:	ebba 0b04 	subs.w	fp, sl, r4
 8021a16:	d00b      	beq.n	8021a30 <_vfiprintf_r+0xa4>
 8021a18:	465b      	mov	r3, fp
 8021a1a:	4622      	mov	r2, r4
 8021a1c:	4629      	mov	r1, r5
 8021a1e:	4630      	mov	r0, r6
 8021a20:	f7ff ffa1 	bl	8021966 <__sfputs_r>
 8021a24:	3001      	adds	r0, #1
 8021a26:	f000 80a7 	beq.w	8021b78 <_vfiprintf_r+0x1ec>
 8021a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a2c:	445a      	add	r2, fp
 8021a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021a30:	f89a 3000 	ldrb.w	r3, [sl]
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	f000 809f 	beq.w	8021b78 <_vfiprintf_r+0x1ec>
 8021a3a:	2300      	movs	r3, #0
 8021a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021a44:	f10a 0a01 	add.w	sl, sl, #1
 8021a48:	9304      	str	r3, [sp, #16]
 8021a4a:	9307      	str	r3, [sp, #28]
 8021a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8021a52:	4654      	mov	r4, sl
 8021a54:	2205      	movs	r2, #5
 8021a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a5a:	4853      	ldr	r0, [pc, #332]	@ (8021ba8 <_vfiprintf_r+0x21c>)
 8021a5c:	f7de fbc0 	bl	80001e0 <memchr>
 8021a60:	9a04      	ldr	r2, [sp, #16]
 8021a62:	b9d8      	cbnz	r0, 8021a9c <_vfiprintf_r+0x110>
 8021a64:	06d1      	lsls	r1, r2, #27
 8021a66:	bf44      	itt	mi
 8021a68:	2320      	movmi	r3, #32
 8021a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021a6e:	0713      	lsls	r3, r2, #28
 8021a70:	bf44      	itt	mi
 8021a72:	232b      	movmi	r3, #43	@ 0x2b
 8021a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021a78:	f89a 3000 	ldrb.w	r3, [sl]
 8021a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a7e:	d015      	beq.n	8021aac <_vfiprintf_r+0x120>
 8021a80:	9a07      	ldr	r2, [sp, #28]
 8021a82:	4654      	mov	r4, sl
 8021a84:	2000      	movs	r0, #0
 8021a86:	f04f 0c0a 	mov.w	ip, #10
 8021a8a:	4621      	mov	r1, r4
 8021a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a90:	3b30      	subs	r3, #48	@ 0x30
 8021a92:	2b09      	cmp	r3, #9
 8021a94:	d94b      	bls.n	8021b2e <_vfiprintf_r+0x1a2>
 8021a96:	b1b0      	cbz	r0, 8021ac6 <_vfiprintf_r+0x13a>
 8021a98:	9207      	str	r2, [sp, #28]
 8021a9a:	e014      	b.n	8021ac6 <_vfiprintf_r+0x13a>
 8021a9c:	eba0 0308 	sub.w	r3, r0, r8
 8021aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8021aa4:	4313      	orrs	r3, r2
 8021aa6:	9304      	str	r3, [sp, #16]
 8021aa8:	46a2      	mov	sl, r4
 8021aaa:	e7d2      	b.n	8021a52 <_vfiprintf_r+0xc6>
 8021aac:	9b03      	ldr	r3, [sp, #12]
 8021aae:	1d19      	adds	r1, r3, #4
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	9103      	str	r1, [sp, #12]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	bfbb      	ittet	lt
 8021ab8:	425b      	neglt	r3, r3
 8021aba:	f042 0202 	orrlt.w	r2, r2, #2
 8021abe:	9307      	strge	r3, [sp, #28]
 8021ac0:	9307      	strlt	r3, [sp, #28]
 8021ac2:	bfb8      	it	lt
 8021ac4:	9204      	strlt	r2, [sp, #16]
 8021ac6:	7823      	ldrb	r3, [r4, #0]
 8021ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8021aca:	d10a      	bne.n	8021ae2 <_vfiprintf_r+0x156>
 8021acc:	7863      	ldrb	r3, [r4, #1]
 8021ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ad0:	d132      	bne.n	8021b38 <_vfiprintf_r+0x1ac>
 8021ad2:	9b03      	ldr	r3, [sp, #12]
 8021ad4:	1d1a      	adds	r2, r3, #4
 8021ad6:	681b      	ldr	r3, [r3, #0]
 8021ad8:	9203      	str	r2, [sp, #12]
 8021ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021ade:	3402      	adds	r4, #2
 8021ae0:	9305      	str	r3, [sp, #20]
 8021ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021bb8 <_vfiprintf_r+0x22c>
 8021ae6:	7821      	ldrb	r1, [r4, #0]
 8021ae8:	2203      	movs	r2, #3
 8021aea:	4650      	mov	r0, sl
 8021aec:	f7de fb78 	bl	80001e0 <memchr>
 8021af0:	b138      	cbz	r0, 8021b02 <_vfiprintf_r+0x176>
 8021af2:	9b04      	ldr	r3, [sp, #16]
 8021af4:	eba0 000a 	sub.w	r0, r0, sl
 8021af8:	2240      	movs	r2, #64	@ 0x40
 8021afa:	4082      	lsls	r2, r0
 8021afc:	4313      	orrs	r3, r2
 8021afe:	3401      	adds	r4, #1
 8021b00:	9304      	str	r3, [sp, #16]
 8021b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b06:	4829      	ldr	r0, [pc, #164]	@ (8021bac <_vfiprintf_r+0x220>)
 8021b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021b0c:	2206      	movs	r2, #6
 8021b0e:	f7de fb67 	bl	80001e0 <memchr>
 8021b12:	2800      	cmp	r0, #0
 8021b14:	d03f      	beq.n	8021b96 <_vfiprintf_r+0x20a>
 8021b16:	4b26      	ldr	r3, [pc, #152]	@ (8021bb0 <_vfiprintf_r+0x224>)
 8021b18:	bb1b      	cbnz	r3, 8021b62 <_vfiprintf_r+0x1d6>
 8021b1a:	9b03      	ldr	r3, [sp, #12]
 8021b1c:	3307      	adds	r3, #7
 8021b1e:	f023 0307 	bic.w	r3, r3, #7
 8021b22:	3308      	adds	r3, #8
 8021b24:	9303      	str	r3, [sp, #12]
 8021b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b28:	443b      	add	r3, r7
 8021b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b2c:	e76a      	b.n	8021a04 <_vfiprintf_r+0x78>
 8021b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021b32:	460c      	mov	r4, r1
 8021b34:	2001      	movs	r0, #1
 8021b36:	e7a8      	b.n	8021a8a <_vfiprintf_r+0xfe>
 8021b38:	2300      	movs	r3, #0
 8021b3a:	3401      	adds	r4, #1
 8021b3c:	9305      	str	r3, [sp, #20]
 8021b3e:	4619      	mov	r1, r3
 8021b40:	f04f 0c0a 	mov.w	ip, #10
 8021b44:	4620      	mov	r0, r4
 8021b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b4a:	3a30      	subs	r2, #48	@ 0x30
 8021b4c:	2a09      	cmp	r2, #9
 8021b4e:	d903      	bls.n	8021b58 <_vfiprintf_r+0x1cc>
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d0c6      	beq.n	8021ae2 <_vfiprintf_r+0x156>
 8021b54:	9105      	str	r1, [sp, #20]
 8021b56:	e7c4      	b.n	8021ae2 <_vfiprintf_r+0x156>
 8021b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8021b5c:	4604      	mov	r4, r0
 8021b5e:	2301      	movs	r3, #1
 8021b60:	e7f0      	b.n	8021b44 <_vfiprintf_r+0x1b8>
 8021b62:	ab03      	add	r3, sp, #12
 8021b64:	9300      	str	r3, [sp, #0]
 8021b66:	462a      	mov	r2, r5
 8021b68:	4b12      	ldr	r3, [pc, #72]	@ (8021bb4 <_vfiprintf_r+0x228>)
 8021b6a:	a904      	add	r1, sp, #16
 8021b6c:	4630      	mov	r0, r6
 8021b6e:	f3af 8000 	nop.w
 8021b72:	4607      	mov	r7, r0
 8021b74:	1c78      	adds	r0, r7, #1
 8021b76:	d1d6      	bne.n	8021b26 <_vfiprintf_r+0x19a>
 8021b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021b7a:	07d9      	lsls	r1, r3, #31
 8021b7c:	d405      	bmi.n	8021b8a <_vfiprintf_r+0x1fe>
 8021b7e:	89ab      	ldrh	r3, [r5, #12]
 8021b80:	059a      	lsls	r2, r3, #22
 8021b82:	d402      	bmi.n	8021b8a <_vfiprintf_r+0x1fe>
 8021b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021b86:	f7ff fb4b 	bl	8021220 <__retarget_lock_release_recursive>
 8021b8a:	89ab      	ldrh	r3, [r5, #12]
 8021b8c:	065b      	lsls	r3, r3, #25
 8021b8e:	f53f af1f 	bmi.w	80219d0 <_vfiprintf_r+0x44>
 8021b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021b94:	e71e      	b.n	80219d4 <_vfiprintf_r+0x48>
 8021b96:	ab03      	add	r3, sp, #12
 8021b98:	9300      	str	r3, [sp, #0]
 8021b9a:	462a      	mov	r2, r5
 8021b9c:	4b05      	ldr	r3, [pc, #20]	@ (8021bb4 <_vfiprintf_r+0x228>)
 8021b9e:	a904      	add	r1, sp, #16
 8021ba0:	4630      	mov	r0, r6
 8021ba2:	f000 f923 	bl	8021dec <_printf_i>
 8021ba6:	e7e4      	b.n	8021b72 <_vfiprintf_r+0x1e6>
 8021ba8:	08027208 	.word	0x08027208
 8021bac:	08027212 	.word	0x08027212
 8021bb0:	00000000 	.word	0x00000000
 8021bb4:	08021967 	.word	0x08021967
 8021bb8:	0802720e 	.word	0x0802720e

08021bbc <malloc>:
 8021bbc:	4b02      	ldr	r3, [pc, #8]	@ (8021bc8 <malloc+0xc>)
 8021bbe:	4601      	mov	r1, r0
 8021bc0:	6818      	ldr	r0, [r3, #0]
 8021bc2:	f000 b825 	b.w	8021c10 <_malloc_r>
 8021bc6:	bf00      	nop
 8021bc8:	200002ac 	.word	0x200002ac

08021bcc <sbrk_aligned>:
 8021bcc:	b570      	push	{r4, r5, r6, lr}
 8021bce:	4e0f      	ldr	r6, [pc, #60]	@ (8021c0c <sbrk_aligned+0x40>)
 8021bd0:	460c      	mov	r4, r1
 8021bd2:	6831      	ldr	r1, [r6, #0]
 8021bd4:	4605      	mov	r5, r0
 8021bd6:	b911      	cbnz	r1, 8021bde <sbrk_aligned+0x12>
 8021bd8:	f000 fed0 	bl	802297c <_sbrk_r>
 8021bdc:	6030      	str	r0, [r6, #0]
 8021bde:	4621      	mov	r1, r4
 8021be0:	4628      	mov	r0, r5
 8021be2:	f000 fecb 	bl	802297c <_sbrk_r>
 8021be6:	1c43      	adds	r3, r0, #1
 8021be8:	d103      	bne.n	8021bf2 <sbrk_aligned+0x26>
 8021bea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021bee:	4620      	mov	r0, r4
 8021bf0:	bd70      	pop	{r4, r5, r6, pc}
 8021bf2:	1cc4      	adds	r4, r0, #3
 8021bf4:	f024 0403 	bic.w	r4, r4, #3
 8021bf8:	42a0      	cmp	r0, r4
 8021bfa:	d0f8      	beq.n	8021bee <sbrk_aligned+0x22>
 8021bfc:	1a21      	subs	r1, r4, r0
 8021bfe:	4628      	mov	r0, r5
 8021c00:	f000 febc 	bl	802297c <_sbrk_r>
 8021c04:	3001      	adds	r0, #1
 8021c06:	d1f2      	bne.n	8021bee <sbrk_aligned+0x22>
 8021c08:	e7ef      	b.n	8021bea <sbrk_aligned+0x1e>
 8021c0a:	bf00      	nop
 8021c0c:	2001759c 	.word	0x2001759c

08021c10 <_malloc_r>:
 8021c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c14:	1ccd      	adds	r5, r1, #3
 8021c16:	f025 0503 	bic.w	r5, r5, #3
 8021c1a:	3508      	adds	r5, #8
 8021c1c:	2d0c      	cmp	r5, #12
 8021c1e:	bf38      	it	cc
 8021c20:	250c      	movcc	r5, #12
 8021c22:	2d00      	cmp	r5, #0
 8021c24:	4606      	mov	r6, r0
 8021c26:	db01      	blt.n	8021c2c <_malloc_r+0x1c>
 8021c28:	42a9      	cmp	r1, r5
 8021c2a:	d904      	bls.n	8021c36 <_malloc_r+0x26>
 8021c2c:	230c      	movs	r3, #12
 8021c2e:	6033      	str	r3, [r6, #0]
 8021c30:	2000      	movs	r0, #0
 8021c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021d0c <_malloc_r+0xfc>
 8021c3a:	f000 fc2b 	bl	8022494 <__malloc_lock>
 8021c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8021c42:	461c      	mov	r4, r3
 8021c44:	bb44      	cbnz	r4, 8021c98 <_malloc_r+0x88>
 8021c46:	4629      	mov	r1, r5
 8021c48:	4630      	mov	r0, r6
 8021c4a:	f7ff ffbf 	bl	8021bcc <sbrk_aligned>
 8021c4e:	1c43      	adds	r3, r0, #1
 8021c50:	4604      	mov	r4, r0
 8021c52:	d158      	bne.n	8021d06 <_malloc_r+0xf6>
 8021c54:	f8d8 4000 	ldr.w	r4, [r8]
 8021c58:	4627      	mov	r7, r4
 8021c5a:	2f00      	cmp	r7, #0
 8021c5c:	d143      	bne.n	8021ce6 <_malloc_r+0xd6>
 8021c5e:	2c00      	cmp	r4, #0
 8021c60:	d04b      	beq.n	8021cfa <_malloc_r+0xea>
 8021c62:	6823      	ldr	r3, [r4, #0]
 8021c64:	4639      	mov	r1, r7
 8021c66:	4630      	mov	r0, r6
 8021c68:	eb04 0903 	add.w	r9, r4, r3
 8021c6c:	f000 fe86 	bl	802297c <_sbrk_r>
 8021c70:	4581      	cmp	r9, r0
 8021c72:	d142      	bne.n	8021cfa <_malloc_r+0xea>
 8021c74:	6821      	ldr	r1, [r4, #0]
 8021c76:	1a6d      	subs	r5, r5, r1
 8021c78:	4629      	mov	r1, r5
 8021c7a:	4630      	mov	r0, r6
 8021c7c:	f7ff ffa6 	bl	8021bcc <sbrk_aligned>
 8021c80:	3001      	adds	r0, #1
 8021c82:	d03a      	beq.n	8021cfa <_malloc_r+0xea>
 8021c84:	6823      	ldr	r3, [r4, #0]
 8021c86:	442b      	add	r3, r5
 8021c88:	6023      	str	r3, [r4, #0]
 8021c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8021c8e:	685a      	ldr	r2, [r3, #4]
 8021c90:	bb62      	cbnz	r2, 8021cec <_malloc_r+0xdc>
 8021c92:	f8c8 7000 	str.w	r7, [r8]
 8021c96:	e00f      	b.n	8021cb8 <_malloc_r+0xa8>
 8021c98:	6822      	ldr	r2, [r4, #0]
 8021c9a:	1b52      	subs	r2, r2, r5
 8021c9c:	d420      	bmi.n	8021ce0 <_malloc_r+0xd0>
 8021c9e:	2a0b      	cmp	r2, #11
 8021ca0:	d917      	bls.n	8021cd2 <_malloc_r+0xc2>
 8021ca2:	1961      	adds	r1, r4, r5
 8021ca4:	42a3      	cmp	r3, r4
 8021ca6:	6025      	str	r5, [r4, #0]
 8021ca8:	bf18      	it	ne
 8021caa:	6059      	strne	r1, [r3, #4]
 8021cac:	6863      	ldr	r3, [r4, #4]
 8021cae:	bf08      	it	eq
 8021cb0:	f8c8 1000 	streq.w	r1, [r8]
 8021cb4:	5162      	str	r2, [r4, r5]
 8021cb6:	604b      	str	r3, [r1, #4]
 8021cb8:	4630      	mov	r0, r6
 8021cba:	f000 fbf1 	bl	80224a0 <__malloc_unlock>
 8021cbe:	f104 000b 	add.w	r0, r4, #11
 8021cc2:	1d23      	adds	r3, r4, #4
 8021cc4:	f020 0007 	bic.w	r0, r0, #7
 8021cc8:	1ac2      	subs	r2, r0, r3
 8021cca:	bf1c      	itt	ne
 8021ccc:	1a1b      	subne	r3, r3, r0
 8021cce:	50a3      	strne	r3, [r4, r2]
 8021cd0:	e7af      	b.n	8021c32 <_malloc_r+0x22>
 8021cd2:	6862      	ldr	r2, [r4, #4]
 8021cd4:	42a3      	cmp	r3, r4
 8021cd6:	bf0c      	ite	eq
 8021cd8:	f8c8 2000 	streq.w	r2, [r8]
 8021cdc:	605a      	strne	r2, [r3, #4]
 8021cde:	e7eb      	b.n	8021cb8 <_malloc_r+0xa8>
 8021ce0:	4623      	mov	r3, r4
 8021ce2:	6864      	ldr	r4, [r4, #4]
 8021ce4:	e7ae      	b.n	8021c44 <_malloc_r+0x34>
 8021ce6:	463c      	mov	r4, r7
 8021ce8:	687f      	ldr	r7, [r7, #4]
 8021cea:	e7b6      	b.n	8021c5a <_malloc_r+0x4a>
 8021cec:	461a      	mov	r2, r3
 8021cee:	685b      	ldr	r3, [r3, #4]
 8021cf0:	42a3      	cmp	r3, r4
 8021cf2:	d1fb      	bne.n	8021cec <_malloc_r+0xdc>
 8021cf4:	2300      	movs	r3, #0
 8021cf6:	6053      	str	r3, [r2, #4]
 8021cf8:	e7de      	b.n	8021cb8 <_malloc_r+0xa8>
 8021cfa:	230c      	movs	r3, #12
 8021cfc:	6033      	str	r3, [r6, #0]
 8021cfe:	4630      	mov	r0, r6
 8021d00:	f000 fbce 	bl	80224a0 <__malloc_unlock>
 8021d04:	e794      	b.n	8021c30 <_malloc_r+0x20>
 8021d06:	6005      	str	r5, [r0, #0]
 8021d08:	e7d6      	b.n	8021cb8 <_malloc_r+0xa8>
 8021d0a:	bf00      	nop
 8021d0c:	200175a0 	.word	0x200175a0

08021d10 <_printf_common>:
 8021d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d14:	4616      	mov	r6, r2
 8021d16:	4698      	mov	r8, r3
 8021d18:	688a      	ldr	r2, [r1, #8]
 8021d1a:	690b      	ldr	r3, [r1, #16]
 8021d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021d20:	4293      	cmp	r3, r2
 8021d22:	bfb8      	it	lt
 8021d24:	4613      	movlt	r3, r2
 8021d26:	6033      	str	r3, [r6, #0]
 8021d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021d2c:	4607      	mov	r7, r0
 8021d2e:	460c      	mov	r4, r1
 8021d30:	b10a      	cbz	r2, 8021d36 <_printf_common+0x26>
 8021d32:	3301      	adds	r3, #1
 8021d34:	6033      	str	r3, [r6, #0]
 8021d36:	6823      	ldr	r3, [r4, #0]
 8021d38:	0699      	lsls	r1, r3, #26
 8021d3a:	bf42      	ittt	mi
 8021d3c:	6833      	ldrmi	r3, [r6, #0]
 8021d3e:	3302      	addmi	r3, #2
 8021d40:	6033      	strmi	r3, [r6, #0]
 8021d42:	6825      	ldr	r5, [r4, #0]
 8021d44:	f015 0506 	ands.w	r5, r5, #6
 8021d48:	d106      	bne.n	8021d58 <_printf_common+0x48>
 8021d4a:	f104 0a19 	add.w	sl, r4, #25
 8021d4e:	68e3      	ldr	r3, [r4, #12]
 8021d50:	6832      	ldr	r2, [r6, #0]
 8021d52:	1a9b      	subs	r3, r3, r2
 8021d54:	42ab      	cmp	r3, r5
 8021d56:	dc26      	bgt.n	8021da6 <_printf_common+0x96>
 8021d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021d5c:	6822      	ldr	r2, [r4, #0]
 8021d5e:	3b00      	subs	r3, #0
 8021d60:	bf18      	it	ne
 8021d62:	2301      	movne	r3, #1
 8021d64:	0692      	lsls	r2, r2, #26
 8021d66:	d42b      	bmi.n	8021dc0 <_printf_common+0xb0>
 8021d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021d6c:	4641      	mov	r1, r8
 8021d6e:	4638      	mov	r0, r7
 8021d70:	47c8      	blx	r9
 8021d72:	3001      	adds	r0, #1
 8021d74:	d01e      	beq.n	8021db4 <_printf_common+0xa4>
 8021d76:	6823      	ldr	r3, [r4, #0]
 8021d78:	6922      	ldr	r2, [r4, #16]
 8021d7a:	f003 0306 	and.w	r3, r3, #6
 8021d7e:	2b04      	cmp	r3, #4
 8021d80:	bf02      	ittt	eq
 8021d82:	68e5      	ldreq	r5, [r4, #12]
 8021d84:	6833      	ldreq	r3, [r6, #0]
 8021d86:	1aed      	subeq	r5, r5, r3
 8021d88:	68a3      	ldr	r3, [r4, #8]
 8021d8a:	bf0c      	ite	eq
 8021d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021d90:	2500      	movne	r5, #0
 8021d92:	4293      	cmp	r3, r2
 8021d94:	bfc4      	itt	gt
 8021d96:	1a9b      	subgt	r3, r3, r2
 8021d98:	18ed      	addgt	r5, r5, r3
 8021d9a:	2600      	movs	r6, #0
 8021d9c:	341a      	adds	r4, #26
 8021d9e:	42b5      	cmp	r5, r6
 8021da0:	d11a      	bne.n	8021dd8 <_printf_common+0xc8>
 8021da2:	2000      	movs	r0, #0
 8021da4:	e008      	b.n	8021db8 <_printf_common+0xa8>
 8021da6:	2301      	movs	r3, #1
 8021da8:	4652      	mov	r2, sl
 8021daa:	4641      	mov	r1, r8
 8021dac:	4638      	mov	r0, r7
 8021dae:	47c8      	blx	r9
 8021db0:	3001      	adds	r0, #1
 8021db2:	d103      	bne.n	8021dbc <_printf_common+0xac>
 8021db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dbc:	3501      	adds	r5, #1
 8021dbe:	e7c6      	b.n	8021d4e <_printf_common+0x3e>
 8021dc0:	18e1      	adds	r1, r4, r3
 8021dc2:	1c5a      	adds	r2, r3, #1
 8021dc4:	2030      	movs	r0, #48	@ 0x30
 8021dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021dca:	4422      	add	r2, r4
 8021dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021dd4:	3302      	adds	r3, #2
 8021dd6:	e7c7      	b.n	8021d68 <_printf_common+0x58>
 8021dd8:	2301      	movs	r3, #1
 8021dda:	4622      	mov	r2, r4
 8021ddc:	4641      	mov	r1, r8
 8021dde:	4638      	mov	r0, r7
 8021de0:	47c8      	blx	r9
 8021de2:	3001      	adds	r0, #1
 8021de4:	d0e6      	beq.n	8021db4 <_printf_common+0xa4>
 8021de6:	3601      	adds	r6, #1
 8021de8:	e7d9      	b.n	8021d9e <_printf_common+0x8e>
	...

08021dec <_printf_i>:
 8021dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021df0:	7e0f      	ldrb	r7, [r1, #24]
 8021df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021df4:	2f78      	cmp	r7, #120	@ 0x78
 8021df6:	4691      	mov	r9, r2
 8021df8:	4680      	mov	r8, r0
 8021dfa:	460c      	mov	r4, r1
 8021dfc:	469a      	mov	sl, r3
 8021dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021e02:	d807      	bhi.n	8021e14 <_printf_i+0x28>
 8021e04:	2f62      	cmp	r7, #98	@ 0x62
 8021e06:	d80a      	bhi.n	8021e1e <_printf_i+0x32>
 8021e08:	2f00      	cmp	r7, #0
 8021e0a:	f000 80d2 	beq.w	8021fb2 <_printf_i+0x1c6>
 8021e0e:	2f58      	cmp	r7, #88	@ 0x58
 8021e10:	f000 80b9 	beq.w	8021f86 <_printf_i+0x19a>
 8021e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021e1c:	e03a      	b.n	8021e94 <_printf_i+0xa8>
 8021e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021e22:	2b15      	cmp	r3, #21
 8021e24:	d8f6      	bhi.n	8021e14 <_printf_i+0x28>
 8021e26:	a101      	add	r1, pc, #4	@ (adr r1, 8021e2c <_printf_i+0x40>)
 8021e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021e2c:	08021e85 	.word	0x08021e85
 8021e30:	08021e99 	.word	0x08021e99
 8021e34:	08021e15 	.word	0x08021e15
 8021e38:	08021e15 	.word	0x08021e15
 8021e3c:	08021e15 	.word	0x08021e15
 8021e40:	08021e15 	.word	0x08021e15
 8021e44:	08021e99 	.word	0x08021e99
 8021e48:	08021e15 	.word	0x08021e15
 8021e4c:	08021e15 	.word	0x08021e15
 8021e50:	08021e15 	.word	0x08021e15
 8021e54:	08021e15 	.word	0x08021e15
 8021e58:	08021f99 	.word	0x08021f99
 8021e5c:	08021ec3 	.word	0x08021ec3
 8021e60:	08021f53 	.word	0x08021f53
 8021e64:	08021e15 	.word	0x08021e15
 8021e68:	08021e15 	.word	0x08021e15
 8021e6c:	08021fbb 	.word	0x08021fbb
 8021e70:	08021e15 	.word	0x08021e15
 8021e74:	08021ec3 	.word	0x08021ec3
 8021e78:	08021e15 	.word	0x08021e15
 8021e7c:	08021e15 	.word	0x08021e15
 8021e80:	08021f5b 	.word	0x08021f5b
 8021e84:	6833      	ldr	r3, [r6, #0]
 8021e86:	1d1a      	adds	r2, r3, #4
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	6032      	str	r2, [r6, #0]
 8021e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021e94:	2301      	movs	r3, #1
 8021e96:	e09d      	b.n	8021fd4 <_printf_i+0x1e8>
 8021e98:	6833      	ldr	r3, [r6, #0]
 8021e9a:	6820      	ldr	r0, [r4, #0]
 8021e9c:	1d19      	adds	r1, r3, #4
 8021e9e:	6031      	str	r1, [r6, #0]
 8021ea0:	0606      	lsls	r6, r0, #24
 8021ea2:	d501      	bpl.n	8021ea8 <_printf_i+0xbc>
 8021ea4:	681d      	ldr	r5, [r3, #0]
 8021ea6:	e003      	b.n	8021eb0 <_printf_i+0xc4>
 8021ea8:	0645      	lsls	r5, r0, #25
 8021eaa:	d5fb      	bpl.n	8021ea4 <_printf_i+0xb8>
 8021eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021eb0:	2d00      	cmp	r5, #0
 8021eb2:	da03      	bge.n	8021ebc <_printf_i+0xd0>
 8021eb4:	232d      	movs	r3, #45	@ 0x2d
 8021eb6:	426d      	negs	r5, r5
 8021eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021ebc:	4859      	ldr	r0, [pc, #356]	@ (8022024 <_printf_i+0x238>)
 8021ebe:	230a      	movs	r3, #10
 8021ec0:	e011      	b.n	8021ee6 <_printf_i+0xfa>
 8021ec2:	6821      	ldr	r1, [r4, #0]
 8021ec4:	6833      	ldr	r3, [r6, #0]
 8021ec6:	0608      	lsls	r0, r1, #24
 8021ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8021ecc:	d402      	bmi.n	8021ed4 <_printf_i+0xe8>
 8021ece:	0649      	lsls	r1, r1, #25
 8021ed0:	bf48      	it	mi
 8021ed2:	b2ad      	uxthmi	r5, r5
 8021ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8021ed6:	4853      	ldr	r0, [pc, #332]	@ (8022024 <_printf_i+0x238>)
 8021ed8:	6033      	str	r3, [r6, #0]
 8021eda:	bf14      	ite	ne
 8021edc:	230a      	movne	r3, #10
 8021ede:	2308      	moveq	r3, #8
 8021ee0:	2100      	movs	r1, #0
 8021ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021ee6:	6866      	ldr	r6, [r4, #4]
 8021ee8:	60a6      	str	r6, [r4, #8]
 8021eea:	2e00      	cmp	r6, #0
 8021eec:	bfa2      	ittt	ge
 8021eee:	6821      	ldrge	r1, [r4, #0]
 8021ef0:	f021 0104 	bicge.w	r1, r1, #4
 8021ef4:	6021      	strge	r1, [r4, #0]
 8021ef6:	b90d      	cbnz	r5, 8021efc <_printf_i+0x110>
 8021ef8:	2e00      	cmp	r6, #0
 8021efa:	d04b      	beq.n	8021f94 <_printf_i+0x1a8>
 8021efc:	4616      	mov	r6, r2
 8021efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8021f02:	fb03 5711 	mls	r7, r3, r1, r5
 8021f06:	5dc7      	ldrb	r7, [r0, r7]
 8021f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021f0c:	462f      	mov	r7, r5
 8021f0e:	42bb      	cmp	r3, r7
 8021f10:	460d      	mov	r5, r1
 8021f12:	d9f4      	bls.n	8021efe <_printf_i+0x112>
 8021f14:	2b08      	cmp	r3, #8
 8021f16:	d10b      	bne.n	8021f30 <_printf_i+0x144>
 8021f18:	6823      	ldr	r3, [r4, #0]
 8021f1a:	07df      	lsls	r7, r3, #31
 8021f1c:	d508      	bpl.n	8021f30 <_printf_i+0x144>
 8021f1e:	6923      	ldr	r3, [r4, #16]
 8021f20:	6861      	ldr	r1, [r4, #4]
 8021f22:	4299      	cmp	r1, r3
 8021f24:	bfde      	ittt	le
 8021f26:	2330      	movle	r3, #48	@ 0x30
 8021f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021f2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8021f30:	1b92      	subs	r2, r2, r6
 8021f32:	6122      	str	r2, [r4, #16]
 8021f34:	f8cd a000 	str.w	sl, [sp]
 8021f38:	464b      	mov	r3, r9
 8021f3a:	aa03      	add	r2, sp, #12
 8021f3c:	4621      	mov	r1, r4
 8021f3e:	4640      	mov	r0, r8
 8021f40:	f7ff fee6 	bl	8021d10 <_printf_common>
 8021f44:	3001      	adds	r0, #1
 8021f46:	d14a      	bne.n	8021fde <_printf_i+0x1f2>
 8021f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021f4c:	b004      	add	sp, #16
 8021f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f52:	6823      	ldr	r3, [r4, #0]
 8021f54:	f043 0320 	orr.w	r3, r3, #32
 8021f58:	6023      	str	r3, [r4, #0]
 8021f5a:	4833      	ldr	r0, [pc, #204]	@ (8022028 <_printf_i+0x23c>)
 8021f5c:	2778      	movs	r7, #120	@ 0x78
 8021f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021f62:	6823      	ldr	r3, [r4, #0]
 8021f64:	6831      	ldr	r1, [r6, #0]
 8021f66:	061f      	lsls	r7, r3, #24
 8021f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8021f6c:	d402      	bmi.n	8021f74 <_printf_i+0x188>
 8021f6e:	065f      	lsls	r7, r3, #25
 8021f70:	bf48      	it	mi
 8021f72:	b2ad      	uxthmi	r5, r5
 8021f74:	6031      	str	r1, [r6, #0]
 8021f76:	07d9      	lsls	r1, r3, #31
 8021f78:	bf44      	itt	mi
 8021f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8021f7e:	6023      	strmi	r3, [r4, #0]
 8021f80:	b11d      	cbz	r5, 8021f8a <_printf_i+0x19e>
 8021f82:	2310      	movs	r3, #16
 8021f84:	e7ac      	b.n	8021ee0 <_printf_i+0xf4>
 8021f86:	4827      	ldr	r0, [pc, #156]	@ (8022024 <_printf_i+0x238>)
 8021f88:	e7e9      	b.n	8021f5e <_printf_i+0x172>
 8021f8a:	6823      	ldr	r3, [r4, #0]
 8021f8c:	f023 0320 	bic.w	r3, r3, #32
 8021f90:	6023      	str	r3, [r4, #0]
 8021f92:	e7f6      	b.n	8021f82 <_printf_i+0x196>
 8021f94:	4616      	mov	r6, r2
 8021f96:	e7bd      	b.n	8021f14 <_printf_i+0x128>
 8021f98:	6833      	ldr	r3, [r6, #0]
 8021f9a:	6825      	ldr	r5, [r4, #0]
 8021f9c:	6961      	ldr	r1, [r4, #20]
 8021f9e:	1d18      	adds	r0, r3, #4
 8021fa0:	6030      	str	r0, [r6, #0]
 8021fa2:	062e      	lsls	r6, r5, #24
 8021fa4:	681b      	ldr	r3, [r3, #0]
 8021fa6:	d501      	bpl.n	8021fac <_printf_i+0x1c0>
 8021fa8:	6019      	str	r1, [r3, #0]
 8021faa:	e002      	b.n	8021fb2 <_printf_i+0x1c6>
 8021fac:	0668      	lsls	r0, r5, #25
 8021fae:	d5fb      	bpl.n	8021fa8 <_printf_i+0x1bc>
 8021fb0:	8019      	strh	r1, [r3, #0]
 8021fb2:	2300      	movs	r3, #0
 8021fb4:	6123      	str	r3, [r4, #16]
 8021fb6:	4616      	mov	r6, r2
 8021fb8:	e7bc      	b.n	8021f34 <_printf_i+0x148>
 8021fba:	6833      	ldr	r3, [r6, #0]
 8021fbc:	1d1a      	adds	r2, r3, #4
 8021fbe:	6032      	str	r2, [r6, #0]
 8021fc0:	681e      	ldr	r6, [r3, #0]
 8021fc2:	6862      	ldr	r2, [r4, #4]
 8021fc4:	2100      	movs	r1, #0
 8021fc6:	4630      	mov	r0, r6
 8021fc8:	f7de f90a 	bl	80001e0 <memchr>
 8021fcc:	b108      	cbz	r0, 8021fd2 <_printf_i+0x1e6>
 8021fce:	1b80      	subs	r0, r0, r6
 8021fd0:	6060      	str	r0, [r4, #4]
 8021fd2:	6863      	ldr	r3, [r4, #4]
 8021fd4:	6123      	str	r3, [r4, #16]
 8021fd6:	2300      	movs	r3, #0
 8021fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021fdc:	e7aa      	b.n	8021f34 <_printf_i+0x148>
 8021fde:	6923      	ldr	r3, [r4, #16]
 8021fe0:	4632      	mov	r2, r6
 8021fe2:	4649      	mov	r1, r9
 8021fe4:	4640      	mov	r0, r8
 8021fe6:	47d0      	blx	sl
 8021fe8:	3001      	adds	r0, #1
 8021fea:	d0ad      	beq.n	8021f48 <_printf_i+0x15c>
 8021fec:	6823      	ldr	r3, [r4, #0]
 8021fee:	079b      	lsls	r3, r3, #30
 8021ff0:	d413      	bmi.n	802201a <_printf_i+0x22e>
 8021ff2:	68e0      	ldr	r0, [r4, #12]
 8021ff4:	9b03      	ldr	r3, [sp, #12]
 8021ff6:	4298      	cmp	r0, r3
 8021ff8:	bfb8      	it	lt
 8021ffa:	4618      	movlt	r0, r3
 8021ffc:	e7a6      	b.n	8021f4c <_printf_i+0x160>
 8021ffe:	2301      	movs	r3, #1
 8022000:	4632      	mov	r2, r6
 8022002:	4649      	mov	r1, r9
 8022004:	4640      	mov	r0, r8
 8022006:	47d0      	blx	sl
 8022008:	3001      	adds	r0, #1
 802200a:	d09d      	beq.n	8021f48 <_printf_i+0x15c>
 802200c:	3501      	adds	r5, #1
 802200e:	68e3      	ldr	r3, [r4, #12]
 8022010:	9903      	ldr	r1, [sp, #12]
 8022012:	1a5b      	subs	r3, r3, r1
 8022014:	42ab      	cmp	r3, r5
 8022016:	dcf2      	bgt.n	8021ffe <_printf_i+0x212>
 8022018:	e7eb      	b.n	8021ff2 <_printf_i+0x206>
 802201a:	2500      	movs	r5, #0
 802201c:	f104 0619 	add.w	r6, r4, #25
 8022020:	e7f5      	b.n	802200e <_printf_i+0x222>
 8022022:	bf00      	nop
 8022024:	08027219 	.word	0x08027219
 8022028:	0802722a 	.word	0x0802722a

0802202c <_scanf_chars>:
 802202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022030:	4615      	mov	r5, r2
 8022032:	688a      	ldr	r2, [r1, #8]
 8022034:	4680      	mov	r8, r0
 8022036:	460c      	mov	r4, r1
 8022038:	b932      	cbnz	r2, 8022048 <_scanf_chars+0x1c>
 802203a:	698a      	ldr	r2, [r1, #24]
 802203c:	2a00      	cmp	r2, #0
 802203e:	bf14      	ite	ne
 8022040:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8022044:	2201      	moveq	r2, #1
 8022046:	608a      	str	r2, [r1, #8]
 8022048:	6822      	ldr	r2, [r4, #0]
 802204a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80220dc <_scanf_chars+0xb0>
 802204e:	06d1      	lsls	r1, r2, #27
 8022050:	bf5f      	itttt	pl
 8022052:	681a      	ldrpl	r2, [r3, #0]
 8022054:	1d11      	addpl	r1, r2, #4
 8022056:	6019      	strpl	r1, [r3, #0]
 8022058:	6816      	ldrpl	r6, [r2, #0]
 802205a:	2700      	movs	r7, #0
 802205c:	69a0      	ldr	r0, [r4, #24]
 802205e:	b188      	cbz	r0, 8022084 <_scanf_chars+0x58>
 8022060:	2801      	cmp	r0, #1
 8022062:	d107      	bne.n	8022074 <_scanf_chars+0x48>
 8022064:	682b      	ldr	r3, [r5, #0]
 8022066:	781a      	ldrb	r2, [r3, #0]
 8022068:	6963      	ldr	r3, [r4, #20]
 802206a:	5c9b      	ldrb	r3, [r3, r2]
 802206c:	b953      	cbnz	r3, 8022084 <_scanf_chars+0x58>
 802206e:	2f00      	cmp	r7, #0
 8022070:	d031      	beq.n	80220d6 <_scanf_chars+0xaa>
 8022072:	e022      	b.n	80220ba <_scanf_chars+0x8e>
 8022074:	2802      	cmp	r0, #2
 8022076:	d120      	bne.n	80220ba <_scanf_chars+0x8e>
 8022078:	682b      	ldr	r3, [r5, #0]
 802207a:	781b      	ldrb	r3, [r3, #0]
 802207c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022080:	071b      	lsls	r3, r3, #28
 8022082:	d41a      	bmi.n	80220ba <_scanf_chars+0x8e>
 8022084:	6823      	ldr	r3, [r4, #0]
 8022086:	06da      	lsls	r2, r3, #27
 8022088:	bf5e      	ittt	pl
 802208a:	682b      	ldrpl	r3, [r5, #0]
 802208c:	781b      	ldrbpl	r3, [r3, #0]
 802208e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022092:	682a      	ldr	r2, [r5, #0]
 8022094:	686b      	ldr	r3, [r5, #4]
 8022096:	3201      	adds	r2, #1
 8022098:	602a      	str	r2, [r5, #0]
 802209a:	68a2      	ldr	r2, [r4, #8]
 802209c:	3b01      	subs	r3, #1
 802209e:	3a01      	subs	r2, #1
 80220a0:	606b      	str	r3, [r5, #4]
 80220a2:	3701      	adds	r7, #1
 80220a4:	60a2      	str	r2, [r4, #8]
 80220a6:	b142      	cbz	r2, 80220ba <_scanf_chars+0x8e>
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	dcd7      	bgt.n	802205c <_scanf_chars+0x30>
 80220ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80220b0:	4629      	mov	r1, r5
 80220b2:	4640      	mov	r0, r8
 80220b4:	4798      	blx	r3
 80220b6:	2800      	cmp	r0, #0
 80220b8:	d0d0      	beq.n	802205c <_scanf_chars+0x30>
 80220ba:	6823      	ldr	r3, [r4, #0]
 80220bc:	f013 0310 	ands.w	r3, r3, #16
 80220c0:	d105      	bne.n	80220ce <_scanf_chars+0xa2>
 80220c2:	68e2      	ldr	r2, [r4, #12]
 80220c4:	3201      	adds	r2, #1
 80220c6:	60e2      	str	r2, [r4, #12]
 80220c8:	69a2      	ldr	r2, [r4, #24]
 80220ca:	b102      	cbz	r2, 80220ce <_scanf_chars+0xa2>
 80220cc:	7033      	strb	r3, [r6, #0]
 80220ce:	6923      	ldr	r3, [r4, #16]
 80220d0:	443b      	add	r3, r7
 80220d2:	6123      	str	r3, [r4, #16]
 80220d4:	2000      	movs	r0, #0
 80220d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220da:	bf00      	nop
 80220dc:	08027108 	.word	0x08027108

080220e0 <_scanf_i>:
 80220e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220e4:	4698      	mov	r8, r3
 80220e6:	4b74      	ldr	r3, [pc, #464]	@ (80222b8 <_scanf_i+0x1d8>)
 80220e8:	460c      	mov	r4, r1
 80220ea:	4682      	mov	sl, r0
 80220ec:	4616      	mov	r6, r2
 80220ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80220f2:	b087      	sub	sp, #28
 80220f4:	ab03      	add	r3, sp, #12
 80220f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80220fa:	4b70      	ldr	r3, [pc, #448]	@ (80222bc <_scanf_i+0x1dc>)
 80220fc:	69a1      	ldr	r1, [r4, #24]
 80220fe:	4a70      	ldr	r2, [pc, #448]	@ (80222c0 <_scanf_i+0x1e0>)
 8022100:	2903      	cmp	r1, #3
 8022102:	bf08      	it	eq
 8022104:	461a      	moveq	r2, r3
 8022106:	68a3      	ldr	r3, [r4, #8]
 8022108:	9201      	str	r2, [sp, #4]
 802210a:	1e5a      	subs	r2, r3, #1
 802210c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8022110:	bf88      	it	hi
 8022112:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8022116:	4627      	mov	r7, r4
 8022118:	bf82      	ittt	hi
 802211a:	eb03 0905 	addhi.w	r9, r3, r5
 802211e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8022122:	60a3      	strhi	r3, [r4, #8]
 8022124:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022128:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802212c:	bf98      	it	ls
 802212e:	f04f 0900 	movls.w	r9, #0
 8022132:	6023      	str	r3, [r4, #0]
 8022134:	463d      	mov	r5, r7
 8022136:	f04f 0b00 	mov.w	fp, #0
 802213a:	6831      	ldr	r1, [r6, #0]
 802213c:	ab03      	add	r3, sp, #12
 802213e:	7809      	ldrb	r1, [r1, #0]
 8022140:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022144:	2202      	movs	r2, #2
 8022146:	f7de f84b 	bl	80001e0 <memchr>
 802214a:	b328      	cbz	r0, 8022198 <_scanf_i+0xb8>
 802214c:	f1bb 0f01 	cmp.w	fp, #1
 8022150:	d159      	bne.n	8022206 <_scanf_i+0x126>
 8022152:	6862      	ldr	r2, [r4, #4]
 8022154:	b92a      	cbnz	r2, 8022162 <_scanf_i+0x82>
 8022156:	6822      	ldr	r2, [r4, #0]
 8022158:	2108      	movs	r1, #8
 802215a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802215e:	6061      	str	r1, [r4, #4]
 8022160:	6022      	str	r2, [r4, #0]
 8022162:	6822      	ldr	r2, [r4, #0]
 8022164:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8022168:	6022      	str	r2, [r4, #0]
 802216a:	68a2      	ldr	r2, [r4, #8]
 802216c:	1e51      	subs	r1, r2, #1
 802216e:	60a1      	str	r1, [r4, #8]
 8022170:	b192      	cbz	r2, 8022198 <_scanf_i+0xb8>
 8022172:	6832      	ldr	r2, [r6, #0]
 8022174:	1c51      	adds	r1, r2, #1
 8022176:	6031      	str	r1, [r6, #0]
 8022178:	7812      	ldrb	r2, [r2, #0]
 802217a:	f805 2b01 	strb.w	r2, [r5], #1
 802217e:	6872      	ldr	r2, [r6, #4]
 8022180:	3a01      	subs	r2, #1
 8022182:	2a00      	cmp	r2, #0
 8022184:	6072      	str	r2, [r6, #4]
 8022186:	dc07      	bgt.n	8022198 <_scanf_i+0xb8>
 8022188:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802218c:	4631      	mov	r1, r6
 802218e:	4650      	mov	r0, sl
 8022190:	4790      	blx	r2
 8022192:	2800      	cmp	r0, #0
 8022194:	f040 8085 	bne.w	80222a2 <_scanf_i+0x1c2>
 8022198:	f10b 0b01 	add.w	fp, fp, #1
 802219c:	f1bb 0f03 	cmp.w	fp, #3
 80221a0:	d1cb      	bne.n	802213a <_scanf_i+0x5a>
 80221a2:	6863      	ldr	r3, [r4, #4]
 80221a4:	b90b      	cbnz	r3, 80221aa <_scanf_i+0xca>
 80221a6:	230a      	movs	r3, #10
 80221a8:	6063      	str	r3, [r4, #4]
 80221aa:	6863      	ldr	r3, [r4, #4]
 80221ac:	4945      	ldr	r1, [pc, #276]	@ (80222c4 <_scanf_i+0x1e4>)
 80221ae:	6960      	ldr	r0, [r4, #20]
 80221b0:	1ac9      	subs	r1, r1, r3
 80221b2:	f000 f889 	bl	80222c8 <__sccl>
 80221b6:	f04f 0b00 	mov.w	fp, #0
 80221ba:	68a3      	ldr	r3, [r4, #8]
 80221bc:	6822      	ldr	r2, [r4, #0]
 80221be:	2b00      	cmp	r3, #0
 80221c0:	d03d      	beq.n	802223e <_scanf_i+0x15e>
 80221c2:	6831      	ldr	r1, [r6, #0]
 80221c4:	6960      	ldr	r0, [r4, #20]
 80221c6:	f891 c000 	ldrb.w	ip, [r1]
 80221ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80221ce:	2800      	cmp	r0, #0
 80221d0:	d035      	beq.n	802223e <_scanf_i+0x15e>
 80221d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80221d6:	d124      	bne.n	8022222 <_scanf_i+0x142>
 80221d8:	0510      	lsls	r0, r2, #20
 80221da:	d522      	bpl.n	8022222 <_scanf_i+0x142>
 80221dc:	f10b 0b01 	add.w	fp, fp, #1
 80221e0:	f1b9 0f00 	cmp.w	r9, #0
 80221e4:	d003      	beq.n	80221ee <_scanf_i+0x10e>
 80221e6:	3301      	adds	r3, #1
 80221e8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80221ec:	60a3      	str	r3, [r4, #8]
 80221ee:	6873      	ldr	r3, [r6, #4]
 80221f0:	3b01      	subs	r3, #1
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	6073      	str	r3, [r6, #4]
 80221f6:	dd1b      	ble.n	8022230 <_scanf_i+0x150>
 80221f8:	6833      	ldr	r3, [r6, #0]
 80221fa:	3301      	adds	r3, #1
 80221fc:	6033      	str	r3, [r6, #0]
 80221fe:	68a3      	ldr	r3, [r4, #8]
 8022200:	3b01      	subs	r3, #1
 8022202:	60a3      	str	r3, [r4, #8]
 8022204:	e7d9      	b.n	80221ba <_scanf_i+0xda>
 8022206:	f1bb 0f02 	cmp.w	fp, #2
 802220a:	d1ae      	bne.n	802216a <_scanf_i+0x8a>
 802220c:	6822      	ldr	r2, [r4, #0]
 802220e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8022212:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022216:	d1bf      	bne.n	8022198 <_scanf_i+0xb8>
 8022218:	2110      	movs	r1, #16
 802221a:	6061      	str	r1, [r4, #4]
 802221c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8022220:	e7a2      	b.n	8022168 <_scanf_i+0x88>
 8022222:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8022226:	6022      	str	r2, [r4, #0]
 8022228:	780b      	ldrb	r3, [r1, #0]
 802222a:	f805 3b01 	strb.w	r3, [r5], #1
 802222e:	e7de      	b.n	80221ee <_scanf_i+0x10e>
 8022230:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8022234:	4631      	mov	r1, r6
 8022236:	4650      	mov	r0, sl
 8022238:	4798      	blx	r3
 802223a:	2800      	cmp	r0, #0
 802223c:	d0df      	beq.n	80221fe <_scanf_i+0x11e>
 802223e:	6823      	ldr	r3, [r4, #0]
 8022240:	05d9      	lsls	r1, r3, #23
 8022242:	d50d      	bpl.n	8022260 <_scanf_i+0x180>
 8022244:	42bd      	cmp	r5, r7
 8022246:	d909      	bls.n	802225c <_scanf_i+0x17c>
 8022248:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802224c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022250:	4632      	mov	r2, r6
 8022252:	4650      	mov	r0, sl
 8022254:	4798      	blx	r3
 8022256:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802225a:	464d      	mov	r5, r9
 802225c:	42bd      	cmp	r5, r7
 802225e:	d028      	beq.n	80222b2 <_scanf_i+0x1d2>
 8022260:	6822      	ldr	r2, [r4, #0]
 8022262:	f012 0210 	ands.w	r2, r2, #16
 8022266:	d113      	bne.n	8022290 <_scanf_i+0x1b0>
 8022268:	702a      	strb	r2, [r5, #0]
 802226a:	6863      	ldr	r3, [r4, #4]
 802226c:	9e01      	ldr	r6, [sp, #4]
 802226e:	4639      	mov	r1, r7
 8022270:	4650      	mov	r0, sl
 8022272:	47b0      	blx	r6
 8022274:	f8d8 3000 	ldr.w	r3, [r8]
 8022278:	6821      	ldr	r1, [r4, #0]
 802227a:	1d1a      	adds	r2, r3, #4
 802227c:	f8c8 2000 	str.w	r2, [r8]
 8022280:	f011 0f20 	tst.w	r1, #32
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	d00f      	beq.n	80222a8 <_scanf_i+0x1c8>
 8022288:	6018      	str	r0, [r3, #0]
 802228a:	68e3      	ldr	r3, [r4, #12]
 802228c:	3301      	adds	r3, #1
 802228e:	60e3      	str	r3, [r4, #12]
 8022290:	6923      	ldr	r3, [r4, #16]
 8022292:	1bed      	subs	r5, r5, r7
 8022294:	445d      	add	r5, fp
 8022296:	442b      	add	r3, r5
 8022298:	6123      	str	r3, [r4, #16]
 802229a:	2000      	movs	r0, #0
 802229c:	b007      	add	sp, #28
 802229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222a2:	f04f 0b00 	mov.w	fp, #0
 80222a6:	e7ca      	b.n	802223e <_scanf_i+0x15e>
 80222a8:	07ca      	lsls	r2, r1, #31
 80222aa:	bf4c      	ite	mi
 80222ac:	8018      	strhmi	r0, [r3, #0]
 80222ae:	6018      	strpl	r0, [r3, #0]
 80222b0:	e7eb      	b.n	802228a <_scanf_i+0x1aa>
 80222b2:	2001      	movs	r0, #1
 80222b4:	e7f2      	b.n	802229c <_scanf_i+0x1bc>
 80222b6:	bf00      	nop
 80222b8:	08026924 	.word	0x08026924
 80222bc:	08020dcd 	.word	0x08020dcd
 80222c0:	08022659 	.word	0x08022659
 80222c4:	0802724b 	.word	0x0802724b

080222c8 <__sccl>:
 80222c8:	b570      	push	{r4, r5, r6, lr}
 80222ca:	780b      	ldrb	r3, [r1, #0]
 80222cc:	4604      	mov	r4, r0
 80222ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80222d0:	bf0b      	itete	eq
 80222d2:	784b      	ldrbeq	r3, [r1, #1]
 80222d4:	1c4a      	addne	r2, r1, #1
 80222d6:	1c8a      	addeq	r2, r1, #2
 80222d8:	2100      	movne	r1, #0
 80222da:	bf08      	it	eq
 80222dc:	2101      	moveq	r1, #1
 80222de:	3801      	subs	r0, #1
 80222e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80222e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80222e8:	42a8      	cmp	r0, r5
 80222ea:	d1fb      	bne.n	80222e4 <__sccl+0x1c>
 80222ec:	b90b      	cbnz	r3, 80222f2 <__sccl+0x2a>
 80222ee:	1e50      	subs	r0, r2, #1
 80222f0:	bd70      	pop	{r4, r5, r6, pc}
 80222f2:	f081 0101 	eor.w	r1, r1, #1
 80222f6:	54e1      	strb	r1, [r4, r3]
 80222f8:	4610      	mov	r0, r2
 80222fa:	4602      	mov	r2, r0
 80222fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8022300:	2d2d      	cmp	r5, #45	@ 0x2d
 8022302:	d005      	beq.n	8022310 <__sccl+0x48>
 8022304:	2d5d      	cmp	r5, #93	@ 0x5d
 8022306:	d016      	beq.n	8022336 <__sccl+0x6e>
 8022308:	2d00      	cmp	r5, #0
 802230a:	d0f1      	beq.n	80222f0 <__sccl+0x28>
 802230c:	462b      	mov	r3, r5
 802230e:	e7f2      	b.n	80222f6 <__sccl+0x2e>
 8022310:	7846      	ldrb	r6, [r0, #1]
 8022312:	2e5d      	cmp	r6, #93	@ 0x5d
 8022314:	d0fa      	beq.n	802230c <__sccl+0x44>
 8022316:	42b3      	cmp	r3, r6
 8022318:	dcf8      	bgt.n	802230c <__sccl+0x44>
 802231a:	3002      	adds	r0, #2
 802231c:	461a      	mov	r2, r3
 802231e:	3201      	adds	r2, #1
 8022320:	4296      	cmp	r6, r2
 8022322:	54a1      	strb	r1, [r4, r2]
 8022324:	dcfb      	bgt.n	802231e <__sccl+0x56>
 8022326:	1af2      	subs	r2, r6, r3
 8022328:	3a01      	subs	r2, #1
 802232a:	1c5d      	adds	r5, r3, #1
 802232c:	42b3      	cmp	r3, r6
 802232e:	bfa8      	it	ge
 8022330:	2200      	movge	r2, #0
 8022332:	18ab      	adds	r3, r5, r2
 8022334:	e7e1      	b.n	80222fa <__sccl+0x32>
 8022336:	4610      	mov	r0, r2
 8022338:	e7da      	b.n	80222f0 <__sccl+0x28>
	...

0802233c <__sflush_r>:
 802233c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022344:	0716      	lsls	r6, r2, #28
 8022346:	4605      	mov	r5, r0
 8022348:	460c      	mov	r4, r1
 802234a:	d454      	bmi.n	80223f6 <__sflush_r+0xba>
 802234c:	684b      	ldr	r3, [r1, #4]
 802234e:	2b00      	cmp	r3, #0
 8022350:	dc02      	bgt.n	8022358 <__sflush_r+0x1c>
 8022352:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022354:	2b00      	cmp	r3, #0
 8022356:	dd48      	ble.n	80223ea <__sflush_r+0xae>
 8022358:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802235a:	2e00      	cmp	r6, #0
 802235c:	d045      	beq.n	80223ea <__sflush_r+0xae>
 802235e:	2300      	movs	r3, #0
 8022360:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022364:	682f      	ldr	r7, [r5, #0]
 8022366:	6a21      	ldr	r1, [r4, #32]
 8022368:	602b      	str	r3, [r5, #0]
 802236a:	d030      	beq.n	80223ce <__sflush_r+0x92>
 802236c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802236e:	89a3      	ldrh	r3, [r4, #12]
 8022370:	0759      	lsls	r1, r3, #29
 8022372:	d505      	bpl.n	8022380 <__sflush_r+0x44>
 8022374:	6863      	ldr	r3, [r4, #4]
 8022376:	1ad2      	subs	r2, r2, r3
 8022378:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802237a:	b10b      	cbz	r3, 8022380 <__sflush_r+0x44>
 802237c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802237e:	1ad2      	subs	r2, r2, r3
 8022380:	2300      	movs	r3, #0
 8022382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022384:	6a21      	ldr	r1, [r4, #32]
 8022386:	4628      	mov	r0, r5
 8022388:	47b0      	blx	r6
 802238a:	1c43      	adds	r3, r0, #1
 802238c:	89a3      	ldrh	r3, [r4, #12]
 802238e:	d106      	bne.n	802239e <__sflush_r+0x62>
 8022390:	6829      	ldr	r1, [r5, #0]
 8022392:	291d      	cmp	r1, #29
 8022394:	d82b      	bhi.n	80223ee <__sflush_r+0xb2>
 8022396:	4a2a      	ldr	r2, [pc, #168]	@ (8022440 <__sflush_r+0x104>)
 8022398:	410a      	asrs	r2, r1
 802239a:	07d6      	lsls	r6, r2, #31
 802239c:	d427      	bmi.n	80223ee <__sflush_r+0xb2>
 802239e:	2200      	movs	r2, #0
 80223a0:	6062      	str	r2, [r4, #4]
 80223a2:	04d9      	lsls	r1, r3, #19
 80223a4:	6922      	ldr	r2, [r4, #16]
 80223a6:	6022      	str	r2, [r4, #0]
 80223a8:	d504      	bpl.n	80223b4 <__sflush_r+0x78>
 80223aa:	1c42      	adds	r2, r0, #1
 80223ac:	d101      	bne.n	80223b2 <__sflush_r+0x76>
 80223ae:	682b      	ldr	r3, [r5, #0]
 80223b0:	b903      	cbnz	r3, 80223b4 <__sflush_r+0x78>
 80223b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80223b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80223b6:	602f      	str	r7, [r5, #0]
 80223b8:	b1b9      	cbz	r1, 80223ea <__sflush_r+0xae>
 80223ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80223be:	4299      	cmp	r1, r3
 80223c0:	d002      	beq.n	80223c8 <__sflush_r+0x8c>
 80223c2:	4628      	mov	r0, r5
 80223c4:	f7fe ff4a 	bl	802125c <_free_r>
 80223c8:	2300      	movs	r3, #0
 80223ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80223cc:	e00d      	b.n	80223ea <__sflush_r+0xae>
 80223ce:	2301      	movs	r3, #1
 80223d0:	4628      	mov	r0, r5
 80223d2:	47b0      	blx	r6
 80223d4:	4602      	mov	r2, r0
 80223d6:	1c50      	adds	r0, r2, #1
 80223d8:	d1c9      	bne.n	802236e <__sflush_r+0x32>
 80223da:	682b      	ldr	r3, [r5, #0]
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d0c6      	beq.n	802236e <__sflush_r+0x32>
 80223e0:	2b1d      	cmp	r3, #29
 80223e2:	d001      	beq.n	80223e8 <__sflush_r+0xac>
 80223e4:	2b16      	cmp	r3, #22
 80223e6:	d11e      	bne.n	8022426 <__sflush_r+0xea>
 80223e8:	602f      	str	r7, [r5, #0]
 80223ea:	2000      	movs	r0, #0
 80223ec:	e022      	b.n	8022434 <__sflush_r+0xf8>
 80223ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80223f2:	b21b      	sxth	r3, r3
 80223f4:	e01b      	b.n	802242e <__sflush_r+0xf2>
 80223f6:	690f      	ldr	r7, [r1, #16]
 80223f8:	2f00      	cmp	r7, #0
 80223fa:	d0f6      	beq.n	80223ea <__sflush_r+0xae>
 80223fc:	0793      	lsls	r3, r2, #30
 80223fe:	680e      	ldr	r6, [r1, #0]
 8022400:	bf08      	it	eq
 8022402:	694b      	ldreq	r3, [r1, #20]
 8022404:	600f      	str	r7, [r1, #0]
 8022406:	bf18      	it	ne
 8022408:	2300      	movne	r3, #0
 802240a:	eba6 0807 	sub.w	r8, r6, r7
 802240e:	608b      	str	r3, [r1, #8]
 8022410:	f1b8 0f00 	cmp.w	r8, #0
 8022414:	dde9      	ble.n	80223ea <__sflush_r+0xae>
 8022416:	6a21      	ldr	r1, [r4, #32]
 8022418:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802241a:	4643      	mov	r3, r8
 802241c:	463a      	mov	r2, r7
 802241e:	4628      	mov	r0, r5
 8022420:	47b0      	blx	r6
 8022422:	2800      	cmp	r0, #0
 8022424:	dc08      	bgt.n	8022438 <__sflush_r+0xfc>
 8022426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802242a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802242e:	81a3      	strh	r3, [r4, #12]
 8022430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022438:	4407      	add	r7, r0
 802243a:	eba8 0800 	sub.w	r8, r8, r0
 802243e:	e7e7      	b.n	8022410 <__sflush_r+0xd4>
 8022440:	dfbffffe 	.word	0xdfbffffe

08022444 <_fflush_r>:
 8022444:	b538      	push	{r3, r4, r5, lr}
 8022446:	690b      	ldr	r3, [r1, #16]
 8022448:	4605      	mov	r5, r0
 802244a:	460c      	mov	r4, r1
 802244c:	b913      	cbnz	r3, 8022454 <_fflush_r+0x10>
 802244e:	2500      	movs	r5, #0
 8022450:	4628      	mov	r0, r5
 8022452:	bd38      	pop	{r3, r4, r5, pc}
 8022454:	b118      	cbz	r0, 802245e <_fflush_r+0x1a>
 8022456:	6a03      	ldr	r3, [r0, #32]
 8022458:	b90b      	cbnz	r3, 802245e <_fflush_r+0x1a>
 802245a:	f7fe fc13 	bl	8020c84 <__sinit>
 802245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d0f3      	beq.n	802244e <_fflush_r+0xa>
 8022466:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022468:	07d0      	lsls	r0, r2, #31
 802246a:	d404      	bmi.n	8022476 <_fflush_r+0x32>
 802246c:	0599      	lsls	r1, r3, #22
 802246e:	d402      	bmi.n	8022476 <_fflush_r+0x32>
 8022470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022472:	f7fe fed4 	bl	802121e <__retarget_lock_acquire_recursive>
 8022476:	4628      	mov	r0, r5
 8022478:	4621      	mov	r1, r4
 802247a:	f7ff ff5f 	bl	802233c <__sflush_r>
 802247e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022480:	07da      	lsls	r2, r3, #31
 8022482:	4605      	mov	r5, r0
 8022484:	d4e4      	bmi.n	8022450 <_fflush_r+0xc>
 8022486:	89a3      	ldrh	r3, [r4, #12]
 8022488:	059b      	lsls	r3, r3, #22
 802248a:	d4e1      	bmi.n	8022450 <_fflush_r+0xc>
 802248c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802248e:	f7fe fec7 	bl	8021220 <__retarget_lock_release_recursive>
 8022492:	e7dd      	b.n	8022450 <_fflush_r+0xc>

08022494 <__malloc_lock>:
 8022494:	4801      	ldr	r0, [pc, #4]	@ (802249c <__malloc_lock+0x8>)
 8022496:	f7fe bec2 	b.w	802121e <__retarget_lock_acquire_recursive>
 802249a:	bf00      	nop
 802249c:	20017598 	.word	0x20017598

080224a0 <__malloc_unlock>:
 80224a0:	4801      	ldr	r0, [pc, #4]	@ (80224a8 <__malloc_unlock+0x8>)
 80224a2:	f7fe bebd 	b.w	8021220 <__retarget_lock_release_recursive>
 80224a6:	bf00      	nop
 80224a8:	20017598 	.word	0x20017598

080224ac <__submore>:
 80224ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224b0:	460c      	mov	r4, r1
 80224b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80224b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80224b8:	4299      	cmp	r1, r3
 80224ba:	d11d      	bne.n	80224f8 <__submore+0x4c>
 80224bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80224c0:	f7ff fba6 	bl	8021c10 <_malloc_r>
 80224c4:	b918      	cbnz	r0, 80224ce <__submore+0x22>
 80224c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80224ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80224d2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80224d4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80224d8:	6360      	str	r0, [r4, #52]	@ 0x34
 80224da:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80224de:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80224e2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80224e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80224ea:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80224ee:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80224f2:	6020      	str	r0, [r4, #0]
 80224f4:	2000      	movs	r0, #0
 80224f6:	e7e8      	b.n	80224ca <__submore+0x1e>
 80224f8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80224fa:	0077      	lsls	r7, r6, #1
 80224fc:	463a      	mov	r2, r7
 80224fe:	f000 f80f 	bl	8022520 <_realloc_r>
 8022502:	4605      	mov	r5, r0
 8022504:	2800      	cmp	r0, #0
 8022506:	d0de      	beq.n	80224c6 <__submore+0x1a>
 8022508:	eb00 0806 	add.w	r8, r0, r6
 802250c:	4601      	mov	r1, r0
 802250e:	4632      	mov	r2, r6
 8022510:	4640      	mov	r0, r8
 8022512:	f7fe fe86 	bl	8021222 <memcpy>
 8022516:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802251a:	f8c4 8000 	str.w	r8, [r4]
 802251e:	e7e9      	b.n	80224f4 <__submore+0x48>

08022520 <_realloc_r>:
 8022520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022524:	4680      	mov	r8, r0
 8022526:	4615      	mov	r5, r2
 8022528:	460c      	mov	r4, r1
 802252a:	b921      	cbnz	r1, 8022536 <_realloc_r+0x16>
 802252c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022530:	4611      	mov	r1, r2
 8022532:	f7ff bb6d 	b.w	8021c10 <_malloc_r>
 8022536:	b92a      	cbnz	r2, 8022544 <_realloc_r+0x24>
 8022538:	f7fe fe90 	bl	802125c <_free_r>
 802253c:	2400      	movs	r4, #0
 802253e:	4620      	mov	r0, r4
 8022540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022544:	f000 fa2a 	bl	802299c <_malloc_usable_size_r>
 8022548:	4285      	cmp	r5, r0
 802254a:	4606      	mov	r6, r0
 802254c:	d802      	bhi.n	8022554 <_realloc_r+0x34>
 802254e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022552:	d8f4      	bhi.n	802253e <_realloc_r+0x1e>
 8022554:	4629      	mov	r1, r5
 8022556:	4640      	mov	r0, r8
 8022558:	f7ff fb5a 	bl	8021c10 <_malloc_r>
 802255c:	4607      	mov	r7, r0
 802255e:	2800      	cmp	r0, #0
 8022560:	d0ec      	beq.n	802253c <_realloc_r+0x1c>
 8022562:	42b5      	cmp	r5, r6
 8022564:	462a      	mov	r2, r5
 8022566:	4621      	mov	r1, r4
 8022568:	bf28      	it	cs
 802256a:	4632      	movcs	r2, r6
 802256c:	f7fe fe59 	bl	8021222 <memcpy>
 8022570:	4621      	mov	r1, r4
 8022572:	4640      	mov	r0, r8
 8022574:	f7fe fe72 	bl	802125c <_free_r>
 8022578:	463c      	mov	r4, r7
 802257a:	e7e0      	b.n	802253e <_realloc_r+0x1e>

0802257c <_strtoul_l.constprop.0>:
 802257c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022580:	4e34      	ldr	r6, [pc, #208]	@ (8022654 <_strtoul_l.constprop.0+0xd8>)
 8022582:	4686      	mov	lr, r0
 8022584:	460d      	mov	r5, r1
 8022586:	4628      	mov	r0, r5
 8022588:	f815 4b01 	ldrb.w	r4, [r5], #1
 802258c:	5d37      	ldrb	r7, [r6, r4]
 802258e:	f017 0708 	ands.w	r7, r7, #8
 8022592:	d1f8      	bne.n	8022586 <_strtoul_l.constprop.0+0xa>
 8022594:	2c2d      	cmp	r4, #45	@ 0x2d
 8022596:	d12f      	bne.n	80225f8 <_strtoul_l.constprop.0+0x7c>
 8022598:	782c      	ldrb	r4, [r5, #0]
 802259a:	2701      	movs	r7, #1
 802259c:	1c85      	adds	r5, r0, #2
 802259e:	f033 0010 	bics.w	r0, r3, #16
 80225a2:	d109      	bne.n	80225b8 <_strtoul_l.constprop.0+0x3c>
 80225a4:	2c30      	cmp	r4, #48	@ 0x30
 80225a6:	d12c      	bne.n	8022602 <_strtoul_l.constprop.0+0x86>
 80225a8:	7828      	ldrb	r0, [r5, #0]
 80225aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80225ae:	2858      	cmp	r0, #88	@ 0x58
 80225b0:	d127      	bne.n	8022602 <_strtoul_l.constprop.0+0x86>
 80225b2:	786c      	ldrb	r4, [r5, #1]
 80225b4:	2310      	movs	r3, #16
 80225b6:	3502      	adds	r5, #2
 80225b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80225bc:	2600      	movs	r6, #0
 80225be:	fbb8 f8f3 	udiv	r8, r8, r3
 80225c2:	fb03 f908 	mul.w	r9, r3, r8
 80225c6:	ea6f 0909 	mvn.w	r9, r9
 80225ca:	4630      	mov	r0, r6
 80225cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80225d0:	f1bc 0f09 	cmp.w	ip, #9
 80225d4:	d81c      	bhi.n	8022610 <_strtoul_l.constprop.0+0x94>
 80225d6:	4664      	mov	r4, ip
 80225d8:	42a3      	cmp	r3, r4
 80225da:	dd2a      	ble.n	8022632 <_strtoul_l.constprop.0+0xb6>
 80225dc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80225e0:	d007      	beq.n	80225f2 <_strtoul_l.constprop.0+0x76>
 80225e2:	4580      	cmp	r8, r0
 80225e4:	d322      	bcc.n	802262c <_strtoul_l.constprop.0+0xb0>
 80225e6:	d101      	bne.n	80225ec <_strtoul_l.constprop.0+0x70>
 80225e8:	45a1      	cmp	r9, r4
 80225ea:	db1f      	blt.n	802262c <_strtoul_l.constprop.0+0xb0>
 80225ec:	fb00 4003 	mla	r0, r0, r3, r4
 80225f0:	2601      	movs	r6, #1
 80225f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80225f6:	e7e9      	b.n	80225cc <_strtoul_l.constprop.0+0x50>
 80225f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80225fa:	bf04      	itt	eq
 80225fc:	782c      	ldrbeq	r4, [r5, #0]
 80225fe:	1c85      	addeq	r5, r0, #2
 8022600:	e7cd      	b.n	802259e <_strtoul_l.constprop.0+0x22>
 8022602:	2b00      	cmp	r3, #0
 8022604:	d1d8      	bne.n	80225b8 <_strtoul_l.constprop.0+0x3c>
 8022606:	2c30      	cmp	r4, #48	@ 0x30
 8022608:	bf0c      	ite	eq
 802260a:	2308      	moveq	r3, #8
 802260c:	230a      	movne	r3, #10
 802260e:	e7d3      	b.n	80225b8 <_strtoul_l.constprop.0+0x3c>
 8022610:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8022614:	f1bc 0f19 	cmp.w	ip, #25
 8022618:	d801      	bhi.n	802261e <_strtoul_l.constprop.0+0xa2>
 802261a:	3c37      	subs	r4, #55	@ 0x37
 802261c:	e7dc      	b.n	80225d8 <_strtoul_l.constprop.0+0x5c>
 802261e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8022622:	f1bc 0f19 	cmp.w	ip, #25
 8022626:	d804      	bhi.n	8022632 <_strtoul_l.constprop.0+0xb6>
 8022628:	3c57      	subs	r4, #87	@ 0x57
 802262a:	e7d5      	b.n	80225d8 <_strtoul_l.constprop.0+0x5c>
 802262c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8022630:	e7df      	b.n	80225f2 <_strtoul_l.constprop.0+0x76>
 8022632:	1c73      	adds	r3, r6, #1
 8022634:	d106      	bne.n	8022644 <_strtoul_l.constprop.0+0xc8>
 8022636:	2322      	movs	r3, #34	@ 0x22
 8022638:	f8ce 3000 	str.w	r3, [lr]
 802263c:	4630      	mov	r0, r6
 802263e:	b932      	cbnz	r2, 802264e <_strtoul_l.constprop.0+0xd2>
 8022640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022644:	b107      	cbz	r7, 8022648 <_strtoul_l.constprop.0+0xcc>
 8022646:	4240      	negs	r0, r0
 8022648:	2a00      	cmp	r2, #0
 802264a:	d0f9      	beq.n	8022640 <_strtoul_l.constprop.0+0xc4>
 802264c:	b106      	cbz	r6, 8022650 <_strtoul_l.constprop.0+0xd4>
 802264e:	1e69      	subs	r1, r5, #1
 8022650:	6011      	str	r1, [r2, #0]
 8022652:	e7f5      	b.n	8022640 <_strtoul_l.constprop.0+0xc4>
 8022654:	08027108 	.word	0x08027108

08022658 <_strtoul_r>:
 8022658:	f7ff bf90 	b.w	802257c <_strtoul_l.constprop.0>

0802265c <__swbuf_r>:
 802265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802265e:	460e      	mov	r6, r1
 8022660:	4614      	mov	r4, r2
 8022662:	4605      	mov	r5, r0
 8022664:	b118      	cbz	r0, 802266e <__swbuf_r+0x12>
 8022666:	6a03      	ldr	r3, [r0, #32]
 8022668:	b90b      	cbnz	r3, 802266e <__swbuf_r+0x12>
 802266a:	f7fe fb0b 	bl	8020c84 <__sinit>
 802266e:	69a3      	ldr	r3, [r4, #24]
 8022670:	60a3      	str	r3, [r4, #8]
 8022672:	89a3      	ldrh	r3, [r4, #12]
 8022674:	071a      	lsls	r2, r3, #28
 8022676:	d501      	bpl.n	802267c <__swbuf_r+0x20>
 8022678:	6923      	ldr	r3, [r4, #16]
 802267a:	b943      	cbnz	r3, 802268e <__swbuf_r+0x32>
 802267c:	4621      	mov	r1, r4
 802267e:	4628      	mov	r0, r5
 8022680:	f000 f82a 	bl	80226d8 <__swsetup_r>
 8022684:	b118      	cbz	r0, 802268e <__swbuf_r+0x32>
 8022686:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802268a:	4638      	mov	r0, r7
 802268c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802268e:	6823      	ldr	r3, [r4, #0]
 8022690:	6922      	ldr	r2, [r4, #16]
 8022692:	1a98      	subs	r0, r3, r2
 8022694:	6963      	ldr	r3, [r4, #20]
 8022696:	b2f6      	uxtb	r6, r6
 8022698:	4283      	cmp	r3, r0
 802269a:	4637      	mov	r7, r6
 802269c:	dc05      	bgt.n	80226aa <__swbuf_r+0x4e>
 802269e:	4621      	mov	r1, r4
 80226a0:	4628      	mov	r0, r5
 80226a2:	f7ff fecf 	bl	8022444 <_fflush_r>
 80226a6:	2800      	cmp	r0, #0
 80226a8:	d1ed      	bne.n	8022686 <__swbuf_r+0x2a>
 80226aa:	68a3      	ldr	r3, [r4, #8]
 80226ac:	3b01      	subs	r3, #1
 80226ae:	60a3      	str	r3, [r4, #8]
 80226b0:	6823      	ldr	r3, [r4, #0]
 80226b2:	1c5a      	adds	r2, r3, #1
 80226b4:	6022      	str	r2, [r4, #0]
 80226b6:	701e      	strb	r6, [r3, #0]
 80226b8:	6962      	ldr	r2, [r4, #20]
 80226ba:	1c43      	adds	r3, r0, #1
 80226bc:	429a      	cmp	r2, r3
 80226be:	d004      	beq.n	80226ca <__swbuf_r+0x6e>
 80226c0:	89a3      	ldrh	r3, [r4, #12]
 80226c2:	07db      	lsls	r3, r3, #31
 80226c4:	d5e1      	bpl.n	802268a <__swbuf_r+0x2e>
 80226c6:	2e0a      	cmp	r6, #10
 80226c8:	d1df      	bne.n	802268a <__swbuf_r+0x2e>
 80226ca:	4621      	mov	r1, r4
 80226cc:	4628      	mov	r0, r5
 80226ce:	f7ff feb9 	bl	8022444 <_fflush_r>
 80226d2:	2800      	cmp	r0, #0
 80226d4:	d0d9      	beq.n	802268a <__swbuf_r+0x2e>
 80226d6:	e7d6      	b.n	8022686 <__swbuf_r+0x2a>

080226d8 <__swsetup_r>:
 80226d8:	b538      	push	{r3, r4, r5, lr}
 80226da:	4b29      	ldr	r3, [pc, #164]	@ (8022780 <__swsetup_r+0xa8>)
 80226dc:	4605      	mov	r5, r0
 80226de:	6818      	ldr	r0, [r3, #0]
 80226e0:	460c      	mov	r4, r1
 80226e2:	b118      	cbz	r0, 80226ec <__swsetup_r+0x14>
 80226e4:	6a03      	ldr	r3, [r0, #32]
 80226e6:	b90b      	cbnz	r3, 80226ec <__swsetup_r+0x14>
 80226e8:	f7fe facc 	bl	8020c84 <__sinit>
 80226ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226f0:	0719      	lsls	r1, r3, #28
 80226f2:	d422      	bmi.n	802273a <__swsetup_r+0x62>
 80226f4:	06da      	lsls	r2, r3, #27
 80226f6:	d407      	bmi.n	8022708 <__swsetup_r+0x30>
 80226f8:	2209      	movs	r2, #9
 80226fa:	602a      	str	r2, [r5, #0]
 80226fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022700:	81a3      	strh	r3, [r4, #12]
 8022702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022706:	e033      	b.n	8022770 <__swsetup_r+0x98>
 8022708:	0758      	lsls	r0, r3, #29
 802270a:	d512      	bpl.n	8022732 <__swsetup_r+0x5a>
 802270c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802270e:	b141      	cbz	r1, 8022722 <__swsetup_r+0x4a>
 8022710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022714:	4299      	cmp	r1, r3
 8022716:	d002      	beq.n	802271e <__swsetup_r+0x46>
 8022718:	4628      	mov	r0, r5
 802271a:	f7fe fd9f 	bl	802125c <_free_r>
 802271e:	2300      	movs	r3, #0
 8022720:	6363      	str	r3, [r4, #52]	@ 0x34
 8022722:	89a3      	ldrh	r3, [r4, #12]
 8022724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022728:	81a3      	strh	r3, [r4, #12]
 802272a:	2300      	movs	r3, #0
 802272c:	6063      	str	r3, [r4, #4]
 802272e:	6923      	ldr	r3, [r4, #16]
 8022730:	6023      	str	r3, [r4, #0]
 8022732:	89a3      	ldrh	r3, [r4, #12]
 8022734:	f043 0308 	orr.w	r3, r3, #8
 8022738:	81a3      	strh	r3, [r4, #12]
 802273a:	6923      	ldr	r3, [r4, #16]
 802273c:	b94b      	cbnz	r3, 8022752 <__swsetup_r+0x7a>
 802273e:	89a3      	ldrh	r3, [r4, #12]
 8022740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022748:	d003      	beq.n	8022752 <__swsetup_r+0x7a>
 802274a:	4621      	mov	r1, r4
 802274c:	4628      	mov	r0, r5
 802274e:	f000 f83f 	bl	80227d0 <__smakebuf_r>
 8022752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022756:	f013 0201 	ands.w	r2, r3, #1
 802275a:	d00a      	beq.n	8022772 <__swsetup_r+0x9a>
 802275c:	2200      	movs	r2, #0
 802275e:	60a2      	str	r2, [r4, #8]
 8022760:	6962      	ldr	r2, [r4, #20]
 8022762:	4252      	negs	r2, r2
 8022764:	61a2      	str	r2, [r4, #24]
 8022766:	6922      	ldr	r2, [r4, #16]
 8022768:	b942      	cbnz	r2, 802277c <__swsetup_r+0xa4>
 802276a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802276e:	d1c5      	bne.n	80226fc <__swsetup_r+0x24>
 8022770:	bd38      	pop	{r3, r4, r5, pc}
 8022772:	0799      	lsls	r1, r3, #30
 8022774:	bf58      	it	pl
 8022776:	6962      	ldrpl	r2, [r4, #20]
 8022778:	60a2      	str	r2, [r4, #8]
 802277a:	e7f4      	b.n	8022766 <__swsetup_r+0x8e>
 802277c:	2000      	movs	r0, #0
 802277e:	e7f7      	b.n	8022770 <__swsetup_r+0x98>
 8022780:	200002ac 	.word	0x200002ac

08022784 <__swhatbuf_r>:
 8022784:	b570      	push	{r4, r5, r6, lr}
 8022786:	460c      	mov	r4, r1
 8022788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802278c:	2900      	cmp	r1, #0
 802278e:	b096      	sub	sp, #88	@ 0x58
 8022790:	4615      	mov	r5, r2
 8022792:	461e      	mov	r6, r3
 8022794:	da0d      	bge.n	80227b2 <__swhatbuf_r+0x2e>
 8022796:	89a3      	ldrh	r3, [r4, #12]
 8022798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802279c:	f04f 0100 	mov.w	r1, #0
 80227a0:	bf14      	ite	ne
 80227a2:	2340      	movne	r3, #64	@ 0x40
 80227a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80227a8:	2000      	movs	r0, #0
 80227aa:	6031      	str	r1, [r6, #0]
 80227ac:	602b      	str	r3, [r5, #0]
 80227ae:	b016      	add	sp, #88	@ 0x58
 80227b0:	bd70      	pop	{r4, r5, r6, pc}
 80227b2:	466a      	mov	r2, sp
 80227b4:	f000 f87c 	bl	80228b0 <_fstat_r>
 80227b8:	2800      	cmp	r0, #0
 80227ba:	dbec      	blt.n	8022796 <__swhatbuf_r+0x12>
 80227bc:	9901      	ldr	r1, [sp, #4]
 80227be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80227c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80227c6:	4259      	negs	r1, r3
 80227c8:	4159      	adcs	r1, r3
 80227ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80227ce:	e7eb      	b.n	80227a8 <__swhatbuf_r+0x24>

080227d0 <__smakebuf_r>:
 80227d0:	898b      	ldrh	r3, [r1, #12]
 80227d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80227d4:	079d      	lsls	r5, r3, #30
 80227d6:	4606      	mov	r6, r0
 80227d8:	460c      	mov	r4, r1
 80227da:	d507      	bpl.n	80227ec <__smakebuf_r+0x1c>
 80227dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80227e0:	6023      	str	r3, [r4, #0]
 80227e2:	6123      	str	r3, [r4, #16]
 80227e4:	2301      	movs	r3, #1
 80227e6:	6163      	str	r3, [r4, #20]
 80227e8:	b003      	add	sp, #12
 80227ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80227ec:	ab01      	add	r3, sp, #4
 80227ee:	466a      	mov	r2, sp
 80227f0:	f7ff ffc8 	bl	8022784 <__swhatbuf_r>
 80227f4:	9f00      	ldr	r7, [sp, #0]
 80227f6:	4605      	mov	r5, r0
 80227f8:	4639      	mov	r1, r7
 80227fa:	4630      	mov	r0, r6
 80227fc:	f7ff fa08 	bl	8021c10 <_malloc_r>
 8022800:	b948      	cbnz	r0, 8022816 <__smakebuf_r+0x46>
 8022802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022806:	059a      	lsls	r2, r3, #22
 8022808:	d4ee      	bmi.n	80227e8 <__smakebuf_r+0x18>
 802280a:	f023 0303 	bic.w	r3, r3, #3
 802280e:	f043 0302 	orr.w	r3, r3, #2
 8022812:	81a3      	strh	r3, [r4, #12]
 8022814:	e7e2      	b.n	80227dc <__smakebuf_r+0xc>
 8022816:	89a3      	ldrh	r3, [r4, #12]
 8022818:	6020      	str	r0, [r4, #0]
 802281a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802281e:	81a3      	strh	r3, [r4, #12]
 8022820:	9b01      	ldr	r3, [sp, #4]
 8022822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022826:	b15b      	cbz	r3, 8022840 <__smakebuf_r+0x70>
 8022828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802282c:	4630      	mov	r0, r6
 802282e:	f000 f851 	bl	80228d4 <_isatty_r>
 8022832:	b128      	cbz	r0, 8022840 <__smakebuf_r+0x70>
 8022834:	89a3      	ldrh	r3, [r4, #12]
 8022836:	f023 0303 	bic.w	r3, r3, #3
 802283a:	f043 0301 	orr.w	r3, r3, #1
 802283e:	81a3      	strh	r3, [r4, #12]
 8022840:	89a3      	ldrh	r3, [r4, #12]
 8022842:	431d      	orrs	r5, r3
 8022844:	81a5      	strh	r5, [r4, #12]
 8022846:	e7cf      	b.n	80227e8 <__smakebuf_r+0x18>

08022848 <_putc_r>:
 8022848:	b570      	push	{r4, r5, r6, lr}
 802284a:	460d      	mov	r5, r1
 802284c:	4614      	mov	r4, r2
 802284e:	4606      	mov	r6, r0
 8022850:	b118      	cbz	r0, 802285a <_putc_r+0x12>
 8022852:	6a03      	ldr	r3, [r0, #32]
 8022854:	b90b      	cbnz	r3, 802285a <_putc_r+0x12>
 8022856:	f7fe fa15 	bl	8020c84 <__sinit>
 802285a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802285c:	07d8      	lsls	r0, r3, #31
 802285e:	d405      	bmi.n	802286c <_putc_r+0x24>
 8022860:	89a3      	ldrh	r3, [r4, #12]
 8022862:	0599      	lsls	r1, r3, #22
 8022864:	d402      	bmi.n	802286c <_putc_r+0x24>
 8022866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022868:	f7fe fcd9 	bl	802121e <__retarget_lock_acquire_recursive>
 802286c:	68a3      	ldr	r3, [r4, #8]
 802286e:	3b01      	subs	r3, #1
 8022870:	2b00      	cmp	r3, #0
 8022872:	60a3      	str	r3, [r4, #8]
 8022874:	da05      	bge.n	8022882 <_putc_r+0x3a>
 8022876:	69a2      	ldr	r2, [r4, #24]
 8022878:	4293      	cmp	r3, r2
 802287a:	db12      	blt.n	80228a2 <_putc_r+0x5a>
 802287c:	b2eb      	uxtb	r3, r5
 802287e:	2b0a      	cmp	r3, #10
 8022880:	d00f      	beq.n	80228a2 <_putc_r+0x5a>
 8022882:	6823      	ldr	r3, [r4, #0]
 8022884:	1c5a      	adds	r2, r3, #1
 8022886:	6022      	str	r2, [r4, #0]
 8022888:	701d      	strb	r5, [r3, #0]
 802288a:	b2ed      	uxtb	r5, r5
 802288c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802288e:	07da      	lsls	r2, r3, #31
 8022890:	d405      	bmi.n	802289e <_putc_r+0x56>
 8022892:	89a3      	ldrh	r3, [r4, #12]
 8022894:	059b      	lsls	r3, r3, #22
 8022896:	d402      	bmi.n	802289e <_putc_r+0x56>
 8022898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802289a:	f7fe fcc1 	bl	8021220 <__retarget_lock_release_recursive>
 802289e:	4628      	mov	r0, r5
 80228a0:	bd70      	pop	{r4, r5, r6, pc}
 80228a2:	4629      	mov	r1, r5
 80228a4:	4622      	mov	r2, r4
 80228a6:	4630      	mov	r0, r6
 80228a8:	f7ff fed8 	bl	802265c <__swbuf_r>
 80228ac:	4605      	mov	r5, r0
 80228ae:	e7ed      	b.n	802288c <_putc_r+0x44>

080228b0 <_fstat_r>:
 80228b0:	b538      	push	{r3, r4, r5, lr}
 80228b2:	4d07      	ldr	r5, [pc, #28]	@ (80228d0 <_fstat_r+0x20>)
 80228b4:	2300      	movs	r3, #0
 80228b6:	4604      	mov	r4, r0
 80228b8:	4608      	mov	r0, r1
 80228ba:	4611      	mov	r1, r2
 80228bc:	602b      	str	r3, [r5, #0]
 80228be:	f7df fa57 	bl	8001d70 <_fstat>
 80228c2:	1c43      	adds	r3, r0, #1
 80228c4:	d102      	bne.n	80228cc <_fstat_r+0x1c>
 80228c6:	682b      	ldr	r3, [r5, #0]
 80228c8:	b103      	cbz	r3, 80228cc <_fstat_r+0x1c>
 80228ca:	6023      	str	r3, [r4, #0]
 80228cc:	bd38      	pop	{r3, r4, r5, pc}
 80228ce:	bf00      	nop
 80228d0:	20017594 	.word	0x20017594

080228d4 <_isatty_r>:
 80228d4:	b538      	push	{r3, r4, r5, lr}
 80228d6:	4d06      	ldr	r5, [pc, #24]	@ (80228f0 <_isatty_r+0x1c>)
 80228d8:	2300      	movs	r3, #0
 80228da:	4604      	mov	r4, r0
 80228dc:	4608      	mov	r0, r1
 80228de:	602b      	str	r3, [r5, #0]
 80228e0:	f7df fa56 	bl	8001d90 <_isatty>
 80228e4:	1c43      	adds	r3, r0, #1
 80228e6:	d102      	bne.n	80228ee <_isatty_r+0x1a>
 80228e8:	682b      	ldr	r3, [r5, #0]
 80228ea:	b103      	cbz	r3, 80228ee <_isatty_r+0x1a>
 80228ec:	6023      	str	r3, [r4, #0]
 80228ee:	bd38      	pop	{r3, r4, r5, pc}
 80228f0:	20017594 	.word	0x20017594

080228f4 <_raise_r>:
 80228f4:	291f      	cmp	r1, #31
 80228f6:	b538      	push	{r3, r4, r5, lr}
 80228f8:	4605      	mov	r5, r0
 80228fa:	460c      	mov	r4, r1
 80228fc:	d904      	bls.n	8022908 <_raise_r+0x14>
 80228fe:	2316      	movs	r3, #22
 8022900:	6003      	str	r3, [r0, #0]
 8022902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022906:	bd38      	pop	{r3, r4, r5, pc}
 8022908:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802290a:	b112      	cbz	r2, 8022912 <_raise_r+0x1e>
 802290c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022910:	b94b      	cbnz	r3, 8022926 <_raise_r+0x32>
 8022912:	4628      	mov	r0, r5
 8022914:	f000 f830 	bl	8022978 <_getpid_r>
 8022918:	4622      	mov	r2, r4
 802291a:	4601      	mov	r1, r0
 802291c:	4628      	mov	r0, r5
 802291e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022922:	f000 b817 	b.w	8022954 <_kill_r>
 8022926:	2b01      	cmp	r3, #1
 8022928:	d00a      	beq.n	8022940 <_raise_r+0x4c>
 802292a:	1c59      	adds	r1, r3, #1
 802292c:	d103      	bne.n	8022936 <_raise_r+0x42>
 802292e:	2316      	movs	r3, #22
 8022930:	6003      	str	r3, [r0, #0]
 8022932:	2001      	movs	r0, #1
 8022934:	e7e7      	b.n	8022906 <_raise_r+0x12>
 8022936:	2100      	movs	r1, #0
 8022938:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802293c:	4620      	mov	r0, r4
 802293e:	4798      	blx	r3
 8022940:	2000      	movs	r0, #0
 8022942:	e7e0      	b.n	8022906 <_raise_r+0x12>

08022944 <raise>:
 8022944:	4b02      	ldr	r3, [pc, #8]	@ (8022950 <raise+0xc>)
 8022946:	4601      	mov	r1, r0
 8022948:	6818      	ldr	r0, [r3, #0]
 802294a:	f7ff bfd3 	b.w	80228f4 <_raise_r>
 802294e:	bf00      	nop
 8022950:	200002ac 	.word	0x200002ac

08022954 <_kill_r>:
 8022954:	b538      	push	{r3, r4, r5, lr}
 8022956:	4d07      	ldr	r5, [pc, #28]	@ (8022974 <_kill_r+0x20>)
 8022958:	2300      	movs	r3, #0
 802295a:	4604      	mov	r4, r0
 802295c:	4608      	mov	r0, r1
 802295e:	4611      	mov	r1, r2
 8022960:	602b      	str	r3, [r5, #0]
 8022962:	f7df f9a5 	bl	8001cb0 <_kill>
 8022966:	1c43      	adds	r3, r0, #1
 8022968:	d102      	bne.n	8022970 <_kill_r+0x1c>
 802296a:	682b      	ldr	r3, [r5, #0]
 802296c:	b103      	cbz	r3, 8022970 <_kill_r+0x1c>
 802296e:	6023      	str	r3, [r4, #0]
 8022970:	bd38      	pop	{r3, r4, r5, pc}
 8022972:	bf00      	nop
 8022974:	20017594 	.word	0x20017594

08022978 <_getpid_r>:
 8022978:	f7df b992 	b.w	8001ca0 <_getpid>

0802297c <_sbrk_r>:
 802297c:	b538      	push	{r3, r4, r5, lr}
 802297e:	4d06      	ldr	r5, [pc, #24]	@ (8022998 <_sbrk_r+0x1c>)
 8022980:	2300      	movs	r3, #0
 8022982:	4604      	mov	r4, r0
 8022984:	4608      	mov	r0, r1
 8022986:	602b      	str	r3, [r5, #0]
 8022988:	f7df fa1a 	bl	8001dc0 <_sbrk>
 802298c:	1c43      	adds	r3, r0, #1
 802298e:	d102      	bne.n	8022996 <_sbrk_r+0x1a>
 8022990:	682b      	ldr	r3, [r5, #0]
 8022992:	b103      	cbz	r3, 8022996 <_sbrk_r+0x1a>
 8022994:	6023      	str	r3, [r4, #0]
 8022996:	bd38      	pop	{r3, r4, r5, pc}
 8022998:	20017594 	.word	0x20017594

0802299c <_malloc_usable_size_r>:
 802299c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229a0:	1f18      	subs	r0, r3, #4
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	bfbc      	itt	lt
 80229a6:	580b      	ldrlt	r3, [r1, r0]
 80229a8:	18c0      	addlt	r0, r0, r3
 80229aa:	4770      	bx	lr

080229ac <_init>:
 80229ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229ae:	bf00      	nop
 80229b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80229b2:	bc08      	pop	{r3}
 80229b4:	469e      	mov	lr, r3
 80229b6:	4770      	bx	lr

080229b8 <_fini>:
 80229b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229ba:	bf00      	nop
 80229bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80229be:	bc08      	pop	{r3}
 80229c0:	469e      	mov	lr, r3
 80229c2:	4770      	bx	lr
